{"version":3,"file":"9451.646bca90ad8b3a5619be.js","mappings":"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","sources":["webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.module.scss?22c9","webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/modals/common/TableAboutModal.tsx","webpack://telegram-t/./src/components/modals/common/TableAboutModal.module.scss?0459","webpack://telegram-t/./src/components/common/pickers/PickerModal.tsx","webpack://telegram-t/./src/components/common/pickers/PickerModal.module.scss?7af2","webpack://telegram-t/./src/components/mediaViewer/helpers/getViewableMedia.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/common/ReportAvatarModal.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/hooks/useCurrentTimeSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useVideoWaitingSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/story/StoryViewer.module.scss?5f32","webpack://telegram-t/./src/components/story/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/story/helpers/dimensions.ts","webpack://telegram-t/./src/components/story/hooks/useSlideSizes.ts","webpack://telegram-t/./src/components/story/hooks/useStoryProps.ts","webpack://telegram-t/./src/components/story/StealthModeModal.module.scss?40cf","webpack://telegram-t/./src/components/story/StealthModeModal.tsx","webpack://telegram-t/./src/components/story/StoryDeleteConfirmModal.tsx","webpack://telegram-t/./src/components/story/privacy/AllowDenyList.tsx","webpack://telegram-t/./src/components/story/privacy/CloseFriends.module.scss?5d02","webpack://telegram-t/./src/components/story/privacy/CloseFriends.tsx","webpack://telegram-t/./src/components/story/StorySettings.module.scss?b887","webpack://telegram-t/./src/components/story/StorySettings.tsx","webpack://telegram-t/./src/components/common/embedded/EmbeddedStoryForward.tsx","webpack://telegram-t/./src/components/story/StoryCaption.tsx","webpack://telegram-t/./src/components/story/StoryFooter.module.scss?19b1","webpack://telegram-t/./src/components/story/StoryFooter.tsx","webpack://telegram-t/./src/components/story/StoryProgress.tsx","webpack://telegram-t/./src/components/story/StoryProgress.module.scss?59b4","webpack://telegram-t/./src/components/story/Story.tsx","webpack://telegram-t/./src/components/story/StoryPreview.tsx","webpack://telegram-t/./src/components/story/StorySlides.tsx","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/story/StoryViewModal.module.scss?06b1","webpack://telegram-t/./src/components/story/StoryView.tsx","webpack://telegram-t/./src/components/story/StoryViewModal.tsx","webpack://telegram-t/./src/components/story/StoryViewer.tsx","webpack://telegram-t/./src/components/common/pickers/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.module.scss?0842","webpack://telegram-t/./src/components/modals/map/MapModal.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/hooks/useDraggable.ts","webpack://telegram-t/./src/components/modals/webApp/MinimizedWebAppModal.module.scss?a30f","webpack://telegram-t/./src/components/modals/webApp/MinimizedWebAppModal.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppGridItem.module.scss?b350","webpack://telegram-t/./src/components/modals/webApp/WebAppGridItem.tsx","webpack://telegram-t/./src/components/modals/webApp/MoreAppsTabContent.module.scss?8058","webpack://telegram-t/./src/components/modals/webApp/MoreAppsTabContent.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModalTabContent.module.scss?c843","webpack://telegram-t/./src/components/modals/webApp/WebAppModalTabContent.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/usePopupLimit.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.module.scss?615e","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.module.scss?e925","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.module.scss?b798","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/common/pickers/ItemPicker.tsx","webpack://telegram-t/./src/components/common/CountryPickerModal.module.scss?d5e6","webpack://telegram-t/./src/components/common/CountryPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayChannelPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.module.scss?6d7c","webpack://telegram-t/./src/components/main/premium/GiveawayUserPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.module.scss?ac86","webpack://telegram-t/./src/components/main/premium/GiveawayModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/common/StickerButton.tsx","webpack://telegram-t/./src/components/common/reactions/ReactionEmoji.module.scss?9dc8","webpack://telegram-t/./src/components/common/reactions/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.module.scss?77cd","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.module.scss?aeb4","webpack://telegram-t/./src/components/modals/boost/BoostModal.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.module.scss?1c77","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.tsx","webpack://telegram-t/./src/util/getClosestEntry.ts","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.module.scss?3c02","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.module.scss?5f0b","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.module.scss?b66d","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.module.scss?2ca6","webpack://telegram-t/./src/components/common/AboutMonetizationModal.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.module.scss?bb6b","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.module.scss?4803","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.module.scss?843e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.module.scss?b26e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.module.scss?3c2e","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.module.scss?94bc","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/main/PermissionCheckboxList.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.module.scss?fbca","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/common/SeenByModal.module.scss?1d45","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.module.scss?a8aa","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.module.scss?68c3","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.module.scss?497f","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/BotAppResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultSponsored.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/paidMessage/PaidMessageSlider.tsx","webpack://telegram-t/./src/components/common/paidMessage/PaidMessagePrice.tsx","webpack://telegram-t/./src/components/left/settings/PremiumStatusItem.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.module.scss?16a3","webpack://telegram-t/./src/components/left/settings/PrivacyMessages.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsAcceptedGift.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyLastSeen.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.module.scss?6993","webpack://telegram-t/./src/components/left/MuteChatModal.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearchResult.module.scss?f0ab","webpack://telegram-t/./src/components/middle/search/MiddleSearchResult.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.module.scss?725f","webpack://telegram-t/./src/components/middle/search/MiddleSearch.tsx","webpack://telegram-t/./src/hooks/events/useOutsideClick.ts","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.module.scss?0536","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.module.scss?695a","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/util/visibility/isFullyVisible.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/ToDoListModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommand.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.module.scss?f347","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/TextFormatter.tsx","webpack://telegram-t/./src/util/getKeyFromEvent.ts","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPost.module.scss?fea0","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPostMeta.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentStory.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.module.scss?96a0","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.module.scss?bbd6","webpack://telegram-t/./src/components/right/statistics/StatisticsMessagePublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsStoryPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageBot.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/NewDiscussionGroup.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.module.scss?717b","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.module.scss?de6c","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.module.scss?86e3","webpack://telegram-t/./src/components/modals/common/TableInfoModal.module.scss?4f33","webpack://telegram-t/./src/components/modals/common/TableInfoModal.tsx","webpack://telegram-t/./src/components/common/PeerBadge.module.scss?732c","webpack://telegram-t/./src/components/common/PeerBadge.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"options\":\"OnCj9kef\",\"option\":\"tpTHQAUF\",\"active\":\"U_9MXPG5\",\"wideOption\":\"dJcJl33b\",\"optionTop\":\"x9G4lqMf\",\"stackedStars\":\"etXLebjM\",\"stackedStar\":\"swttXv9P\",\"optionBottom\":\"tK7La7L2\",\"moreOptions\":\"AWXBaWLW\",\"iconDown\":\"zWYHZJmd\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\n\nimport type { ApiStarGiveawayOption, ApiStarTopupOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './StarTopupOptionList.module.scss';\n\nconst MAX_STARS_COUNT = 6;\n\ntype OwnProps = {\n  isActive?: boolean;\n  options?: ApiStarTopupOption[] | ApiStarGiveawayOption[];\n  selectedStarOption?: ApiStarTopupOption | ApiStarGiveawayOption;\n  selectedStarCount?: number;\n  starsNeeded?: number;\n  className?: string;\n  onClick: (option: ApiStarTopupOption | ApiStarGiveawayOption) => void;\n};\n\nconst StarTopupOptionList: FC<OwnProps> = ({\n  isActive,\n  className,\n  options,\n  selectedStarOption,\n  selectedStarCount,\n  starsNeeded,\n  onClick,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [areOptionsExtended, markOptionsExtended, unmarkOptionsExtended] = useFlag();\n\n  useEffect(() => {\n    if (!isActive) {\n      unmarkOptionsExtended();\n    }\n  }, [isActive]);\n\n  const [renderingOptions, canExtend] = useMemo(() => {\n    if (!options) return [undefined, false];\n\n    const maxOption = options.reduce((max, option) => (\n      max.stars > option.stars ? max : option\n    ));\n    const forceShowAll = starsNeeded && maxOption.stars < starsNeeded;\n\n    const result: { option: ApiStarTopupOption | ApiStarGiveawayOption; starsCount: number; isWide: boolean }[] = [];\n    let currentStackedStarsCount = 0;\n    let canExtendOptions = false;\n    options.forEach((option, index) => {\n      if (!option.isExtended) currentStackedStarsCount++;\n\n      if (starsNeeded && !forceShowAll && option.stars < starsNeeded) return;\n      if (!areOptionsExtended && option.isExtended) {\n        canExtendOptions = true;\n        return;\n      }\n      result.push({\n        option,\n        starsCount: Math.min(currentStackedStarsCount, MAX_STARS_COUNT),\n        isWide: index === options.length - 1,\n      });\n    });\n\n    return [result, canExtendOptions];\n  }, [areOptionsExtended, options, starsNeeded]);\n\n  return (\n    <div className={buildClassName(styles.options, className)}>\n      {renderingOptions?.map(({ option, starsCount, isWide }) => {\n        const length = renderingOptions?.length;\n        const isOdd = length % 2 === 0;\n        const isActiveOption = option === selectedStarOption;\n\n        let perUserStarCount;\n        if (option && 'winners' in option) {\n          const winner = option.winners.find((opt) => opt.users === selectedStarCount)\n            || option.winners.reduce((max, opt) => (opt.users > max.users ? opt : max), option.winners[0]);\n          perUserStarCount = winner?.perUserStars;\n        }\n\n        return (\n          <div\n            className={buildClassName(\n              styles.option, (!isOdd && isWide) && styles.wideOption, isActiveOption && styles.active,\n            )}\n            key={option.stars}\n            onClick={() => onClick?.(option)}\n          >\n            <div className={styles.optionTop}>\n              +\n              {formatInteger(option.stars)}\n              <div className={styles.stackedStars} dir={lang.isRtl ? 'ltr' : 'rtl'}>\n                {Array.from({ length: starsCount }).map(() => (\n                  <StarIcon className={styles.stackedStar} type=\"gold\" size=\"big\" />\n                ))}\n              </div>\n            </div>\n            <div className={styles.optionBottom}>\n              {formatCurrency(lang, option.amount, option.currency)}\n            </div>\n            {(isActiveOption || (selectedStarOption && 'winners' in selectedStarOption))\n              && Boolean(perUserStarCount) && (\n              <div className={styles.optionBottom}>\n                <div className={styles.perUserStars}>\n                  {renderText(oldLang('BoostGift.Stars.PerUser', formatInteger(perUserStarCount)))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      })}\n      {!areOptionsExtended && canExtend && (\n        <Button className={styles.moreOptions} isText noForcedUpperCase onClick={markOptionsExtended}>\n          {oldLang('Stars.Purchase.ShowMore')}\n          <Icon className={styles.iconDown} name=\"down\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StarTopupOptionList);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import { memo, type TeactNode } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './TableAboutModal.module.scss';\n\nexport type TableAboutData = [IconName | undefined, TeactNode, TeactNode][];\n\ntype OwnProps = {\n  contentClassName?: string;\n  isOpen?: boolean;\n  listItemData?: TableAboutData;\n  headerIconName?: IconName;\n  header?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  hasBackdrop?: boolean;\n  withSeparator?: boolean;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n};\n\nconst TableAboutModal = ({\n  isOpen,\n  listItemData,\n  headerIconName,\n  header,\n  footer,\n  buttonText,\n  hasBackdrop,\n  withSeparator,\n  onClose,\n  onButtonClick,\n  contentClassName,\n}: OwnProps) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName(styles.root, contentClassName)}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      absoluteCloseButtonColor={hasBackdrop ? 'translucent-white' : undefined}\n      onClose={onClose}\n    >\n      {headerIconName && <div className={styles.topIcon}><Icon name={headerIconName} /></div>}\n      {header}\n      <div>\n        {listItemData?.map(([icon, title, subtitle]) => {\n          return (\n            <ListItem\n              isStatic\n              multiline\n              icon={icon}\n              iconClassName={styles.listItemIcon}\n            >\n              <span className=\"title\">{title}</span>\n              <span className=\"subtitle\">{subtitle}</span>\n            </ListItem>\n          );\n        })}\n      </div>\n      {withSeparator && <Separator className={styles.separator} />}\n      {footer}\n      {buttonText && (\n        <Button size=\"smaller\" onClick={onButtonClick || onClose}>{buttonText}</Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableAboutModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LAh8evux\",\"title\":\"yfODVQ1M\",\"description\":\"QaQn08BX\",\"secondary\":\"sQZslvAr\",\"topIcon\":\"jySLtQNG\",\"listItemIcon\":\"hQbEPsTU\",\"content\":\"hrizpMDe\",\"separator\":\"En1zD2cT\"};","import { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal, { type OwnProps as ModalProps } from '../../ui/Modal';\n\nimport styles from './PickerModal.module.scss';\n\ntype OwnProps = {\n  confirmButtonText?: string;\n  isConfirmDisabled?: boolean;\n  shouldAdaptToSearch?: boolean;\n  withFixedHeight?: boolean;\n  withPremiumGradient?: boolean;\n  onConfirm?: NoneToVoidFunction;\n} & ModalProps;\n\nconst PickerModal = ({\n  confirmButtonText,\n  isConfirmDisabled,\n  shouldAdaptToSearch,\n  withFixedHeight,\n  onConfirm,\n  withPremiumGradient,\n  ...modalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const hasButton = Boolean(confirmButtonText || onConfirm);\n\n  return (\n    <Modal\n\n      {...modalProps}\n      isSlim\n      className={buildClassName(\n        shouldAdaptToSearch && styles.withSearch,\n        withFixedHeight && styles.fixedHeight,\n        modalProps.className,\n      )}\n      contentClassName={buildClassName(styles.content, modalProps.contentClassName)}\n      headerClassName={buildClassName(styles.header, modalProps.headerClassName)}\n    >\n      {modalProps.children}\n      {hasButton && (\n        <div className={styles.buttonWrapper}>\n          <Button\n            withPremiumGradient={withPremiumGradient}\n            onClick={onConfirm || modalProps.onClose}\n            color=\"primary\"\n            size=\"smaller\"\n            disabled={isConfirmDisabled}\n          >\n            {confirmButtonText || lang('Confirm')}\n          </Button>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(PickerModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"FuFYE0AA\",\"fixedHeight\":\"CrEsDylb\",\"withSearch\":\"WGSZ8u75\",\"header\":\"iEptOmIp\",\"buttonWrapper\":\"HqeDTaSr\"};","import type {\n  ApiMessage, ApiPeer, ApiPeerPhotos, ApiSponsoredMessage,\n} from '../../../api/types';\nimport type { MediaViewerMedia } from '../../../types';\n\nimport { getMessageContent, isDocumentPhoto, isDocumentVideo } from '../../../global/helpers';\n\nexport type MediaViewerItem = {\n  type: 'message';\n  message: ApiMessage;\n  mediaIndex?: number;\n} | {\n  type: 'avatar';\n  avatarOwner: ApiPeer;\n  profilePhotos: ApiPeerPhotos;\n  mediaIndex: number;\n} | {\n  type: 'standalone';\n  media: MediaViewerMedia[];\n  mediaIndex: number;\n} | {\n  type: 'sponsoredMessage';\n  message: ApiSponsoredMessage;\n  mediaIndex?: number;\n};\n\ntype ViewableMedia = {\n  media: MediaViewerMedia;\n  isSingle?: boolean;\n};\n\nexport function getMediaViewerItem({\n  message, avatarOwner, profilePhotos, standaloneMedia, mediaIndex, sponsoredMessage,\n}: {\n  message?: ApiMessage;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  standaloneMedia?: MediaViewerMedia[];\n  sponsoredMessage?: ApiSponsoredMessage;\n  mediaIndex?: number;\n}): MediaViewerItem | undefined {\n  if (avatarOwner && profilePhotos) {\n    return {\n      type: 'avatar',\n      avatarOwner,\n      profilePhotos,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (standaloneMedia) {\n    return {\n      type: 'standalone',\n      media: standaloneMedia,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (message) {\n    return {\n      type: 'message',\n      message,\n      mediaIndex,\n    };\n  }\n\n  if (sponsoredMessage) {\n    return {\n      type: 'sponsoredMessage',\n      message: sponsoredMessage,\n      mediaIndex,\n    };\n  }\n\n  return undefined;\n}\n\nexport default function getViewableMedia(params?: MediaViewerItem): ViewableMedia | undefined {\n  if (!params) return undefined;\n\n  if (params.type === 'standalone') {\n    return {\n      media: params.media[params.mediaIndex],\n      isSingle: params.media.length === 1,\n    };\n  }\n\n  if (params.type === 'avatar') {\n    const avatar = params.profilePhotos?.photos[params.mediaIndex];\n    if (avatar) {\n      return {\n        media: avatar,\n      };\n    }\n    return undefined;\n  }\n\n  const {\n    action, document, photo, video, webPage, paidMedia,\n  } = getMessageContent(params.message);\n\n  if (action?.type === 'chatEditPhoto' || action?.type === 'suggestProfilePhoto') {\n    return {\n      media: action.photo!,\n      isSingle: true,\n    };\n  }\n\n  if (document && (isDocumentPhoto(document) || isDocumentVideo(document))) {\n    return {\n      media: document,\n    };\n  }\n\n  if (webPage) {\n    const { photo: webPagePhoto, video: webPageVideo, document: webPageDocument } = webPage;\n    const isDocumentMedia = webPageDocument && (isDocumentPhoto(webPageDocument) || isDocumentVideo(webPageDocument));\n    const mediaDocument = isDocumentMedia ? webPageDocument : undefined;\n    const media = webPageVideo || mediaDocument || webPagePhoto;\n    if (media) {\n      return {\n        media,\n        isSingle: true,\n      };\n    }\n  }\n\n  if (paidMedia) {\n    const extendedMedia = paidMedia.extendedMedia[params.mediaIndex || 0];\n    if (!('mediaType' in extendedMedia)) {\n      const { photo: extendedPhoto, video: extendedVideo } = extendedMedia;\n      return {\n        media: (extendedPhoto || extendedVideo)!,\n      };\n    }\n  }\n\n  const media = video || photo;\n\n  if (media) {\n    return {\n      media,\n      isSingle: video?.isGif,\n    };\n  }\n\n  return undefined;\n}\n","import type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport getOffsetToContainer from '../../../util/visibility/getOffsetToContainer';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport windowSize from '../../../util/windowSize';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n  mediaIndex?: number,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message, mediaIndex);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage, mediaIndex?: number,\n) {\n  const { container, mediaEl: toImage } = getNodes(origin, message, mediaIndex);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [\n      MediaViewerOrigin.Inline,\n      MediaViewerOrigin.ScheduledInline,\n      MediaViewerOrigin.Album,\n      MediaViewerOrigin.ScheduledAlbum,\n    ].includes(origin)\n    && !isMessageImageFullyVisible(toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n\n  const { top } = getOffsetToContainer(imageEl, messageListElement);\n\n  return top > messageListElement.scrollTop\n    && top + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage, index?: number) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      // eslint-disable-next-line @stylistic/max-len\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.PreviewMedia:\n      containerSelector = `#preview-media${index}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ChannelAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.StarsTransaction:\n      containerSelector = '.transaction-media-preview';\n      mediaSelector = index === 0 ? `.stars-transaction-media-${index} :is(img, video)` : undefined;\n      break;\n\n    case MediaViewerOrigin.SponsoredMessage:\n      containerSelector = '.Transition_slide-active > .MessageList .sponsored-media-preview';\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = mediaSelector\n    ? container?.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector) : undefined;\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.StarsTransaction:\n    case MediaViewerOrigin.PreviewMedia:\n    case MediaViewerOrigin.ChannelAvatar:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useCallback, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/browser/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: ElementRef<HTMLVideoElement>,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport type { MediaViewerMedia } from '../../../types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getMediaFileSize,\n  getMediaFormat,\n  getMediaHash,\n  getMediaThumbUri,\n  getPhotoFullDimensions,\n  getProfilePhotoMediaHash,\n  getVideoDimensions,\n  getVideoProfilePhotoMediaHash,\n  isDocumentPhoto,\n  isDocumentVideo,\n} from '../../../global/helpers';\nimport { AVATAR_FULL_DIMENSIONS, VIDEO_AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\n\nconst FALLBACK_DIMENSIONS = AVATAR_FULL_DIMENSIONS;\n\ntype UseMediaProps = {\n  media?: MediaViewerMedia;\n  isAvatar?: boolean;\n  origin?: MediaViewerOrigin;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  media,\n  isAvatar,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const isPhotoAvatar = isAvatar && media?.mediaType === 'photo' && !media.isVideo;\n  const isVideoAvatar = isAvatar && media?.mediaType === 'photo' && media.isVideo;\n  const isDocument = media?.mediaType === 'document';\n  const isVideo = (media?.mediaType === 'video' && !media.isRound) || (isDocument && isDocumentVideo(media));\n  const isPhoto = media?.mediaType === 'photo' || (isDocument && isDocumentPhoto(media));\n  const isGif = media?.mediaType === 'video' && media.isGif;\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaOrAvatarHash = useMemo(() => (isFull?: boolean) => {\n    if (!media) return undefined;\n\n    if ((isPhotoAvatar || isVideoAvatar) && !isFull) {\n      return getProfilePhotoMediaHash(media);\n    }\n\n    if (isVideoAvatar && isFull) {\n      return getVideoProfilePhotoMediaHash(media);\n    }\n\n    return getMediaHash(media, isFull ? 'full' : 'preview');\n  }, [isVideoAvatar, isPhotoAvatar, media]);\n\n  const pictogramBlobUrl = useMedia(\n    media\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocument)\n    && getMediaHash(media, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const previewMediaHash = getMediaOrAvatarHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaOrAvatarHash(true),\n    undefined,\n    media && getMediaFormat(media, 'full'),\n    delay,\n  );\n\n  const localBlobUrl = media && 'blobUrl' in media ? media.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && media && getMediaThumbUri(media));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    (!isVideoAvatar && !isVideo) ? (previewBlobUrl || pictogramBlobUrl || bestImageData) : undefined\n  );\n\n  const mediaSize = media && getMediaFileSize(media);\n\n  const isLocal = Boolean(localBlobUrl);\n\n  const dimensions = useMemo(() => {\n    if (isAvatar) {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n\n    if (isDocument) {\n      return media.mediaSize!;\n    }\n\n    if (isPhoto) {\n      return getPhotoFullDimensions(media);\n    }\n\n    if (isVideo) {\n      return getVideoDimensions(media);\n    }\n\n    return FALLBACK_DIMENSIONS;\n  }, [isAvatar, isDocument, isPhoto, isVideo, isVideoAvatar, media]);\n\n  return {\n    getMediaHash: getMediaOrAvatarHash,\n    media,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocument,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    mediaSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useBlur from './useBlur';\nimport useSyncEffect from './useSyncEffect';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto, ApiReportReason } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  peerId?: string;\n  photo?: ApiPhoto;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nconst ReportAvatarModal: FC<OwnProps> = ({\n  isOpen,\n  peerId,\n  photo,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { reportProfilePhoto } = getActions();\n\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = useLastCallback(() => {\n    reportProfilePhoto({\n      chatId: peerId, photo, reason: selectedReason, description,\n    });\n    onClose();\n  });\n\n  const handleSelectReason = useLastCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  });\n\n  const handleDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  });\n\n  const lang = useOldLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = useMemo(() => [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'illegalDrugs', label: 'Illegal Drugs' },\n    { value: 'personalDetails', label: 'Personal Details' },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ], [lang]);\n\n  if (!peerId || !photo) {\n    return undefined;\n  }\n\n  const title = lang('ReportPeer.Report');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      className=\"narrow\"\n      title={title}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n          {lang('lng_report_button')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAvatarModal);\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useUnmountCleanup(() => {\n    setZoomChange(1);\n  });\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\n\nimport { isUserId } from '../../util/entities/ids';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { ActiveDownloads, MediaViewerOrigin, MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { MenuItemProps } from '../ui/MenuItem';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport {\n  getIsDownloading,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActionsSlow, selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n  selectIsMessageProtected,\n  selectTabState,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport getViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useOldLang from '../../hooks/useOldLang';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  activeDownloads: ActiveDownloads;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  chat?: ApiChat;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  origin?: MediaViewerOrigin;\n};\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  mediaData?: string;\n  isVideo: boolean;\n  canUpdateMedia?: boolean;\n  canReportAvatar?: boolean;\n  activeDownloads?: ActiveDownloads;\n  onReportAvatar: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  item,\n  mediaData,\n  isVideo,\n  chat,\n  isChatProtected,\n  isProtected,\n  canReportAvatar,\n  canDelete,\n  canUpdate,\n  messageListType,\n  activeDownloads,\n  origin,\n  onReportAvatar: onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMedia,\n    cancelMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n    openMediaViewer,\n    openDeleteMessageModal,\n  } = getActions();\n\n  const isMessage = item?.type === 'message';\n\n  const { media } = getViewableMedia(item) || {};\n  const fileName = media && getMediaFilename(media);\n  const isDownloading = media && getIsDownloading(activeDownloads, media);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    media && getMediaHash(media, 'download'),\n    !isDownloading,\n    media && getMediaFormat(media, 'download'),\n  );\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (!media) return;\n\n    if (isDownloading) {\n      cancelMediaDownload({ media });\n    } else {\n      const message = item?.type === 'message' ? item.message : undefined;\n      downloadMedia({ media, originMessage: message });\n    }\n  });\n\n  const handleZoomOut = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  });\n\n  const handleZoomIn = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  });\n\n  const handleUpdate = useLastCallback(() => {\n    if (item?.type !== 'avatar') return;\n    const { avatarOwner, profilePhotos, mediaIndex } = item;\n    const avatarPhoto = profilePhotos?.photos[mediaIndex];\n    if (isUserId(avatarOwner.id)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwner.id, photo: avatarPhoto });\n    }\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: avatarOwner.id,\n      mediaIndex: 0,\n      isAvatarView: true,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const lang = useOldLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModal() {\n    return (item?.type === 'avatar') ? (\n      <DeleteProfilePhotoModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        onConfirm={onBeforeDelete}\n        profileId={item.avatarOwner.id}\n        photo={item.profilePhotos.photos[item.mediaIndex]}\n      />\n    ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected || item?.type === 'standalone') {\n      return undefined;\n    }\n\n    return item?.type !== 'sponsoredMessage' && (isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <Icon name=\"download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <Icon name=\"download\" />\n      </Button>\n    ));\n  }\n\n  const openDeleteModalHandler = useLastCallback(() => {\n    if (item?.type === 'message' && chat) {\n      openDeleteMessageModal({\n        chatId: chat?.id,\n        messageIds: [item.message.id],\n        isSchedule: messageListType === 'scheduled',\n        onConfirm: onBeforeDelete,\n      });\n    } else {\n      openDeleteModal();\n    }\n  });\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (isMessage && item.message.isForwardingAllowed && !item.message.content.action && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'close' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReportAvatar) {\n      menuItems.push({\n        icon: 'flag',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModalHandler,\n        children: lang('Delete'),\n        destructive: true,\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children, destructive,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon as IconName}\n              href={href}\n              download={download}\n              onClick={onClick}\n              destructive={destructive}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModal()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {isMessage && item.message.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <Icon name=\"zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <Icon name=\"zoom-in\" />\n      </Button>\n      {canReportAvatar && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <Icon name=\"flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <Icon name=\"copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModalHandler}\n        >\n          <Icon name=\"delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {canDelete && renderDeleteModal()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    item, canUpdateMedia,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { origin } = tabState.mediaViewer;\n\n    const message = item?.type === 'message' ? item.message : undefined;\n    const avatarOwner = item?.type === 'avatar' ? item.avatarOwner : undefined;\n    const avatarPhoto = item?.type === 'avatar' && item.profilePhotos.photos[item.mediaIndex];\n\n    const chat = selectCurrentChat(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isProtected = selectIsMessageProtected(global, message);\n    const activeDownloads = selectActiveDownloads(global);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActionsSlow(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarPhotoId);\n    const canDeleteAvatar = canUpdateMedia && Boolean(avatarPhoto);\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && Boolean(avatarPhoto) && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      activeDownloads,\n      isProtected,\n      chat,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      origin,\n    };\n  },\n)(MediaViewerActions));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import { useUnmountCleanup } from '../lib/teact/teact';\n\nimport { createSignal } from '../util/signals';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useUnmountCleanup(() => {\n    setCurrentTime(0);\n  });\n\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { throttle } from '../../util/schedulers';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Button from '../ui/Button';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  buttonText?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', buttonText, isForVideo, onClick, handleSponsoredClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text');\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const onButtonClick = useLastCallback(() => {\n    handleSponsoredClick();\n  });\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll allow-selection ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">\n            {text}\n          </p>\n        </div>\n      )}\n      {Boolean(buttonText) && (\n        <Button\n          className={buildClassName('media-viewer-footer-content', 'media-viewer-button')}\n          size=\"default\"\n          color=\"primary\"\n          isRectangular\n          onClick={onButtonClick}\n        >\n          {buttonText}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nexport const [getIsVideoWaiting, setIsVideoWaiting] = createSignal(false);\n\nexport default function useVideoWaitingSignal() {\n  useUnmountCleanup(() => {\n    setIsVideoWaiting(false);\n  });\n\n  return [getIsVideoWaiting, setIsVideoWaiting] as const;\n}\n","import { ApiMediaFormat } from '../../api/types';\n\nimport { IS_ANDROID, IS_IOS } from '../../util/browser/windowEnvironment';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport { callApi } from '../../api/gramjs';\nimport { requestMutation } from '../fasterdom/fasterdom';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = IS_MOBILE ? 40 : 80;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames = new Map<number, ImageBitmap>();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => {\n    videoPreview?.destroy();\n    videoPreview = undefined;\n  };\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ingarEvU\",\"preview\":\"TqpEWfl3\",\"previewCanvas\":\"fKVz2lln\",\"previewTime\":\"bGiNvx5D\",\"previewTimeText\":\"mnkqvOMR\",\"track\":\"Od9ZSc1U\",\"buffered\":\"ANe2DKfp\",\"played\":\"igaGLblf\",\"seeking\":\"beUP6SqY\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { createVideoPreviews, getPreviewDimensions, renderVideoPreview } from '../../lib/video-preview/VideoPreview';\nimport { animateNumber } from '../../util/animation';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents } from '../../util/captureEvents';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp, round } from '../../util/math';\n\nimport { useThrottledSignal } from '../../hooks/useAsyncResolvers';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  playbackRate: number;\n  isActive?: boolean;\n  isPlaying?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst LOCK_TIMEOUT = 250;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\n\nconst SeekLine: FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  playbackRate,\n  url,\n  isActive,\n  isPlaying,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  const seekerRef = useRef<HTMLDivElement>();\n  const [getCurrentTimeSignal] = useCurrentTimeSignal();\n  const [getIsWaiting] = useVideoWaitingSignal();\n  const getCurrentTime = useThrottledSignal(getCurrentTimeSignal, LOCK_TIMEOUT);\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  const previewCanvasRef = useRef<HTMLCanvasElement>();\n  const previewRef = useRef<HTMLDivElement>();\n  const progressRef = useRef<HTMLDivElement>();\n  const previewTimeRef = useRef<HTMLDivElement>();\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useLastCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  });\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (cancelAnimation) cancelAnimation();\n    cancelAnimation = undefined;\n    if (!isLockedRef.current && !isSeeking) {\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime, playbackRate, duration]);\n\n  useEffect(() => {\n    if (!isPlaying || getIsWaiting()) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    }\n  }, [isPlaying, getSelectedTime, getIsWaiting]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n    // eslint-disable-next-line\n  }, [isPlaying, playbackRate, duration]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = getPointerPosition(e).x;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const stopAnimation = () => {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      stopAnimation();\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      stopAnimation();\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      stopAnimation();\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, LOCK_TIMEOUT);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n    playbackRate,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            // @ts-ignore\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef,\n  useSignal,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { IconName } from '../../types/icons';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport SeekLine from './SeekLine';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n  onSeekingChange: (isSeeking: boolean) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n  onSeekingChange,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const closeTimeoutRef = useRef<number | undefined>();\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n      return undefined;\n    }\n    closeTimeoutRef.current = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useOldLang();\n\n  const handleSeek = useLastCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n    onSeekingChange(false);\n  });\n\n  const handleSeekStart = useLastCallback(() => {\n    setIsSeeking(true);\n    onSeekingChange(true);\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPlaying={isPlaying}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        playbackRate={playbackRate}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <Icon name={isPlaying ? 'pause' : 'play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <Icon name=\"pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <Icon name={isFullscreen ? 'smallscreen' : 'fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/browser/windowEnvironment';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp } from '../../util/math';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useFullscreen from '../../hooks/window/useFullscreen';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  isClickDisabled?: boolean;\n  isSponsoredMessage?: boolean;\n  timestamp?: number;\n  handleSponsoredClick?: (isFromMedia?: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n  isSponsoredMessage,\n  timestamp,\n  handleSponsoredClick,\n  onClose,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  const videoRef = useRef<HTMLVideoElement>();\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useLastCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  });\n\n  const handleLeaveFullscreen = useLastCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  });\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n  const lastMousePosition = useRef({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const updateMousePosition = (e: MouseEvent | TouchEvent) => {\n      lastMousePosition.current = getPointerPosition(e);\n    };\n\n    window.addEventListener('mousemove', updateMousePosition);\n    window.addEventListener('touchmove', updateMousePosition);\n\n    return () => {\n      window.removeEventListener('mousemove', updateMousePosition);\n      window.removeEventListener('touchmove', updateMousePosition);\n    };\n  }, []);\n\n  const checkMousePositionAndToggleControls = useLastCallback((clientX: number, clientY: number) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (clientX <= bounds.left || clientX >= bounds.right\n      || clientY <= bounds.top || clientY >= bounds.bottom) {\n      if (!getIsSeeking()) {\n        toggleControls(false);\n      }\n    }\n  });\n\n  const handleVideoMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const handleVideoLeave = useLastCallback((e) => {\n    checkMousePositionAndToggleControls(e.clientX, e.clientY);\n  });\n\n  const handleSeekingChange = useLastCallback((isSeeking: boolean) => {\n    setIsSeeking(isSeeking);\n    if (!isSeeking) {\n      const { x, y } = lastMousePosition.current;\n      checkMousePositionAndToggleControls(x, y);\n    }\n  });\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const isUnsupported = useUnsupportedMedia(videoRef, undefined, !url);\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransitionDeprecated(\n    !isBuffered && !isUnsupported, undefined, undefined, 'slow',\n  );\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransitionDeprecated(\n    IS_IOS && !isPlaying && !shouldRenderSpinner && !isUnsupported, undefined, undefined, 'slow',\n  );\n\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [, setIsVideoWaiting] = useVideoWaitingSignal();\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen || isUnsupported) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted, isUnsupported]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  useEffect(() => {\n    if (!timestamp) return;\n    videoRef.current!.currentTime = timestamp;\n    setCurrentTime(timestamp);\n  }, [setCurrentTime, timestamp]);\n\n  const togglePlayState = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isSponsoredMessage) {\n      handleSponsoredClick?.(true);\n      onClose(e);\n    }\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  });\n\n  useVideoCleanup(videoRef, bufferingHandlers);\n\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setIsVideoWaiting(false);\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  });\n\n  const handleEnded = useLastCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  });\n\n  const handleFullscreenChange = useLastCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  });\n\n  const handleSeek = useLastCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  });\n\n  const handleVolumeChange = useLastCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handlePlaybackRateChange = useLastCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  });\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseLeave={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onWaiting={() => setIsVideoWaiting(true)}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n          src={url}\n        />\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <Icon name=\"play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !isSponsoredMessage && !isUnsupported && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n          onSeekingChange={handleSeekingChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type React from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiDimensions, ApiMessage, ApiSponsoredMessage,\n} from '../../api/types';\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport { MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION } from '../../config';\nimport {\n  selectIsMessageProtected, selectMessageTimestampableDuration, selectTabState,\n} from '../../global/selectors';\nimport { ARE_WEBCODECS_SUPPORTED } from '../../util/browser/globalEnvironment';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport getViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport useThrottledCallback from '../../hooks/useThrottledCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  item: MediaViewerItem;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  isMoving?: boolean;\n  onClose: () => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: () => void;\n};\n\ntype StateProps = {\n  textMessage?: ApiMessage | ApiSponsoredMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  threadId?: ThreadId;\n  timestamp?: number;\n  maxTimestamp?: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\nconst PLAYBACK_SAVE_INTERVAL = 1000;\n\nconst MediaViewerContent = ({\n  item,\n  isActive,\n  textMessage,\n  origin,\n  withAnimation,\n  isProtected,\n  volume,\n  playbackRate,\n  isMuted,\n  isHidden,\n  isMoving,\n  threadId,\n  timestamp,\n  maxTimestamp,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}: OwnProps & StateProps) => {\n  const { updateLastPlaybackTimestamp } = getActions();\n\n  const lang = useOldLang();\n\n  const isAvatar = item.type === 'avatar';\n  const isSponsoredMessage = item.type === 'sponsoredMessage';\n  const { media } = getViewableMedia(item) || {};\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    mediaSize,\n    loadProgress,\n  } = useMediaProps({\n    media, isAvatar, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n  const [getCurrentTime] = useCurrentTimeSignal();\n\n  const isOpen = Boolean(media);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const updatePlaybackTimestamp = useThrottledCallback(() => {\n    if (!isActive || !textMessage || media?.mediaType !== 'video') return;\n    if (media.duration < MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION) return;\n\n    const message = 'id' in textMessage ? textMessage : undefined;\n    const currentTime = getCurrentTime();\n    if (!currentTime || !message || message.isInAlbum) return;\n\n    // Reset timestamp if we are close to the end of the video\n    const newTimestamp = media.duration - currentTime > PLAYBACK_SAVE_INTERVAL / 1000 ? currentTime : undefined;\n    updateLastPlaybackTimestamp({ chatId: message.chatId, messageId: message.id, timestamp: newTimestamp });\n  }, [getCurrentTime, isActive, media, textMessage], PLAYBACK_SAVE_INTERVAL);\n\n  useSignalEffect(updatePlaybackTimestamp, [getCurrentTime]);\n\n  if (!media) return undefined;\n\n  if (item.type === 'avatar') {\n    if (!isVideoAvatar) {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={media.id}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={mediaSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n            isSponsoredMessage={isSponsoredMessage}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        </div>\n      );\n    }\n  }\n\n  const textParts = textMessage && (textMessage.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText({\n      message: textMessage, maxTimestamp, threadId, forcePlayback: true, isForMediaViewer: true,\n    }));\n  const buttonText = textMessage && 'buttonText' in textMessage ? textMessage.buttonText : undefined;\n  const hasFooter = Boolean(textParts);\n  const posterSize = calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={media.id}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={mediaSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n          isSponsoredMessage={isSponsoredMessage}\n          handleSponsoredClick={handleSponsoredClick}\n          timestamp={timestamp}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          buttonText={buttonText}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { item }): StateProps => {\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n      origin,\n      timestamp,\n      threadId,\n    } = selectTabState(global).mediaViewer;\n    const message = item.type === 'message' ? item.message : undefined;\n    const sponsoredMessage = item.type === 'sponsoredMessage' ? item.message : undefined;\n    const textMessage = message || sponsoredMessage;\n\n    const maxTimestamp = message && selectMessageTimestampableDuration(global, message, true);\n\n    return {\n      origin,\n      textMessage,\n      isProtected: message && selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n      threadId,\n      timestamp,\n      maxTimestamp,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  chatId?: string;\n  threadId?: ThreadId;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  getNextItem: (from: MediaViewerItem, direction: number) => MediaViewerItem | undefined;\n  selectItem: (item: MediaViewerItem) => void;\n  loadMoreItemsIfNeeded: (item: MediaViewerItem) => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  onClose: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\nlet cancelZoomAnimation: ReturnType<typeof animateNumber> | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  item,\n  isVideo,\n  isGif,\n  isOpen,\n  withAnimation,\n  isHidden,\n  isLoadingMoreMedia,\n  isSynced,\n  loadMoreItemsIfNeeded,\n  getNextItem,\n  selectItem,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const activeSlideRef = useRef<HTMLDivElement>();\n  const leftSlideRef = useRef<HTMLDivElement>();\n  const rightSlideRef = useRef<HTMLDivElement>();\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveItem, setActiveItem] = useSignal<MediaViewerItem | undefined>(item);\n  const activeItemRef = useSignalRef(getActiveItem);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeItem = useDerivedState(getActiveItem);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectItemDebounced = useDebouncedCallback(selectItem, [selectItem], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  });\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveItem(item);\n    }\n  }, [item, setActiveItem, transformRef]);\n\n  useEffect(() => {\n    if (!isSynced || !activeItem || isLoadingMoreMedia) return;\n    loadMoreItemsIfNeeded(activeItem);\n  }, [activeItem, loadMoreItemsIfNeeded, isSynced, isLoadingMoreMedia]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeItemRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const cActiveItem = activeItemRef.current;\n      if (cActiveItem === undefined) return false;\n      const nextItem = getNextItem(cActiveItem, direction);\n      if (nextItem !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const cActiveItem = activeItemRef.current;\n      const nextItem = cActiveItem && getNextItem(cActiveItem, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (nextItem !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      withWheelDrag: true,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > SWIPE_DIRECTION_THRESHOLD || absOffsetX / absOffsetY > SWIPE_DIRECTION_TOLERANCE) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    activeItemRef,\n    clearSwipeDirectionDebounced,\n    clickXThreshold,\n    getNextItem,\n    isFullscreen,\n    isHidden,\n    onClose,\n    selectItemDebounced,\n    setActiveItem,\n    setIsActiveDebounced,\n    setTransform,\n    shouldCloseOnVideo,\n    transformRef,\n    windowHeight,\n    windowWidth,\n    withAnimation,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  const [prevItem, nextItem] = useMemo(() => {\n    if (activeItem === undefined) return [undefined, undefined];\n    return [getNextItem(activeItem, -1), getNextItem(activeItem, 1)];\n  }, [activeItem, getNextItem]);\n\n  if (activeItem === undefined) return undefined;\n\n  const hasPrev = prevItem !== undefined;\n  const hasNext = nextItem !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={prevItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          item={activeItem}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n          onClose={onClose}\n          onFooterClick={onFooterClick}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={nextItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiPeer } from '../../api/types';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport {\n  isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectSender,\n} from '../../global/selectors';\nimport { formatMediaDateTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n};\n\ntype StateProps = {\n  owner?: ApiPeer;\n};\n\nconst BULLET = '\\u2022';\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  owner,\n  item,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useLastCallback(() => {\n    closeMediaViewer();\n\n    if (item?.type !== 'message') return;\n\n    const message = item.message;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId: message.chatId, messageId: message.id });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId: message.chatId, messageId: message.id });\n    }\n  });\n\n  const lang = useOldLang();\n\n  const subtitle = useMemo(() => {\n    if (!item || item.type === 'standalone') return undefined;\n\n    const avatarOwner = item.type === 'avatar' ? item.avatarOwner : undefined;\n    const profilePhotos = item.type === 'avatar' ? item.profilePhotos : undefined;\n    const avatar = profilePhotos?.photos[item.mediaIndex!];\n    const isFallbackAvatar = avatar?.id === profilePhotos?.fallbackPhoto?.id;\n    const isPersonalAvatar = avatar?.id === profilePhotos?.personalPhoto?.id;\n    const date = item.type === 'message' ? item.message.date : avatar?.date;\n    if (!date) return undefined;\n\n    const formattedDate = formatMediaDateTime(lang, date * 1000, true);\n    const count = profilePhotos?.count\n      && (profilePhotos.count + (profilePhotos?.fallbackPhoto ? 1 : 0));\n    const currentIndex = item.mediaIndex! + 1 + (profilePhotos?.personalPhoto ? -1 : 0);\n    const countText = count && lang('Of', [currentIndex, count]);\n\n    const parts: string[] = [];\n    if (avatar) {\n      const chat = !isUserId(avatarOwner!.id) ? avatarOwner as ApiChat : undefined;\n      const isChannel = chat && isChatChannel(chat);\n      const isGroup = chat && isChatGroup(chat);\n      parts.push(lang(\n        isPersonalAvatar ? 'lng_mediaview_profile_photo_by_you'\n          : isFallbackAvatar ? 'lng_mediaview_profile_public_photo'\n            : isChannel ? 'lng_mediaview_channel_photo'\n              : isGroup ? 'lng_mediaview_group_photo' : 'lng_mediaview_profile_photo',\n      ));\n    }\n\n    if (countText && !isPersonalAvatar && !isFallbackAvatar) {\n      parts.push(countText);\n    }\n\n    parts.push(formattedDate);\n\n    return parts.join(` ${BULLET} `);\n  }, [item, lang]);\n\n  if (!owner) {\n    return undefined;\n  }\n\n  const senderTitle = getPeerTitle(lang, owner);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      <Avatar key={owner.id} size=\"medium\" peer={owner} />\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {subtitle}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { item }): StateProps => {\n    const message = item?.type === 'message' ? item.message : undefined;\n    const messageSender = message && selectSender(global, message);\n\n    const owner = item?.type === 'avatar' ? item.avatarOwner : messageSender;\n\n    return {\n      owner,\n    };\n  },\n)(SenderInfo);\n","import type React from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPeer,\n  ApiPeerPhotos,\n  ApiPhoto,\n  ApiSponsoredMessage,\n} from '../../api/types';\nimport { type MediaViewerMedia, MediaViewerOrigin, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatMediaMessageIds, getMessagePaidMedia, isChatAdmin,\n} from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChatMediaSearch,\n  selectCurrentSharedMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerPhotos,\n  selectPerformanceSettingsValue,\n  selectScheduledMessage, selectSponsoredMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { isUserId } from '../../util/entities/ids';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport getViewableMedia, { getMediaViewerItem, type MediaViewerItem } from './helpers/getViewableMedia';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Icon from '../common/icons/Icon';\nimport ReportAvatarModal from '../common/ReportAvatarModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  messageId?: number;\n  message?: ApiMessage;\n  collectedMessageIds?: number[];\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatar?: ApiPhoto;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  chatMessages?: Record<number, ApiMessage>;\n  sponsoredMessage?: ApiSponsoredMessage;\n  standaloneMedia?: MediaViewerMedia[];\n  mediaIndex?: number;\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  withDynamicLoading?: boolean;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n};\n\nconst ANIMATION_DURATION = 250;\nconst AVATAR_LOAD_TRIGGER = 4;\n\nconst MediaViewer = ({\n  chatId,\n  threadId,\n  messageId,\n  message,\n  collectedMessageIds,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatar,\n  avatarOwner,\n  profilePhotos,\n  chatMessages,\n  sponsoredMessage,\n  standaloneMedia,\n  mediaIndex,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n  withDynamicLoading,\n  isLoadingMoreMedia,\n  isSynced,\n}: StateProps) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n    searchChatMediaMessages,\n    loadMoreProfilePhotos,\n    clickSponsored,\n    openUrl,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || message || standaloneMedia || sponsoredMessage);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const senderId = message?.senderId || avatarOwner?.id || message?.chatId;\n  const prevSenderId = usePreviousDeprecated<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportAvatarModalOpen, openReportAvatarModal, closeReportAvatarModal] = useFlag();\n\n  const currentItem = getMediaViewerItem({\n    message, avatarOwner, standaloneMedia, profilePhotos, mediaIndex, sponsoredMessage,\n  });\n  const { media, isSingle } = getViewableMedia(currentItem) || {};\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n  } = useMediaProps({\n    media, isAvatar: Boolean(avatarOwner), origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReportAvatar = (() => {\n    if (isChatWithSelf) return false;\n    if (currentItem?.type !== 'avatar' || !avatarOwner) return false;\n    const info = currentItem.profilePhotos;\n    if (media === info.personalPhoto) return false;\n    return true;\n  })();\n  const isVisible = !isHidden && isOpen;\n\n  const messageMediaIds = useMemo(() => {\n    return withDynamicLoading\n      ? collectedMessageIds\n      : getChatMediaMessageIds(chatMessages || {}, collectedMessageIds || [], isFromSharedMedia);\n  }, [chatMessages, collectedMessageIds, isFromSharedMedia, withDynamicLoading]);\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || animationKey.current === undefined)) {\n    animationKey.current = isSingle ? 0 : (messageId || mediaIndex);\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      requestMutation(() => {\n        document.body.classList.toggle('is-media-viewer-open', isOpen);\n      });\n    }\n  }, [isMobile, isOpen]);\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    mql.addEventListener('change', forceUpdate);\n\n    return () => {\n      mql.removeEventListener('change', forceUpdate);\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePreviousDeprecated<ApiMessage | undefined>(message);\n  const prevIsHidden = usePreviousDeprecated<boolean | undefined>(isHidden);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const prevItem = usePreviousDeprecated(currentItem);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const textParts = message ? renderMessageText({ message, forcePlayback: true, isForMediaViewer: true }) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevItem !== currentItem;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (shouldAnimateOpening || !prevItem)) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message, mediaIndex);\n    }\n\n    if (isGhostAnimation && !isOpen && prevItem) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage, prevItem?.mediaIndex);\n    }\n  }, [\n    bestImageData, dimensions, hasFooter, isGhostAnimation, isOpen, isVideo, message, origin,\n    prevBestImageData, prevItem, prevMessage, prevOrigin, shouldAnimateOpening, mediaIndex,\n  ]);\n\n  const handleClose = useLastCallback(() => closeMediaViewer());\n\n  const handleFooterClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (e.target instanceof HTMLElement && e.target.closest('a')) return; // Prevent closing on timestamp click\n\n    handleClose();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId });\n    }\n  });\n\n  const handleSponsoredClick = useLastCallback((isFromMedia?: boolean) => {\n    if (!sponsoredMessage || !chatId) return;\n\n    clickSponsored({ isMedia: isFromMedia, isFullscreen: true, randomId: sponsoredMessage.randomId });\n    openUrl({ url: sponsoredMessage.url });\n    closeMediaViewer();\n  });\n\n  const handleForward = useLastCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [messageId!],\n    });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const loadMoreItemsIfNeeded = useLastCallback((item?: MediaViewerItem) => {\n    if (!item || isLoadingMoreMedia) return;\n\n    if (item.type === 'avatar') {\n      const isNearEnd = item.mediaIndex >= item.profilePhotos.photos.length - AVATAR_LOAD_TRIGGER;\n      if (!isNearEnd) return;\n      loadMoreProfilePhotos({ peerId: item.avatarOwner.id });\n    }\n\n    if (item.type === 'message' && withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: item.message.id });\n    }\n  });\n\n  const getNextItem = useLastCallback((from: MediaViewerItem, direction: number): MediaViewerItem | undefined => {\n    if (direction === 0 || isSingle) return undefined;\n\n    if (from.type === 'standalone') {\n      const { media: fromMedia, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && nextIndex < fromMedia.length) {\n        return { type: 'standalone', media: fromMedia, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'avatar') {\n      const { avatarOwner: fromAvatarOwner, profilePhotos: fromProfilePhotos, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && fromProfilePhotos && nextIndex < fromProfilePhotos.photos.length) {\n        return {\n          type: 'avatar',\n          avatarOwner: fromAvatarOwner,\n          profilePhotos: fromProfilePhotos,\n          mediaIndex: nextIndex,\n        };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'sponsoredMessage') {\n      const { message: fromSponsoredMessage, mediaIndex: fromSponsoredMessageIndex } = from;\n      const nextIndex = fromSponsoredMessageIndex! + direction;\n      if (nextIndex >= 0 && fromSponsoredMessage) {\n        return { type: 'sponsoredMessage', message: fromSponsoredMessage, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    const { message: fromMessage, mediaIndex: fromMediaIndex } = from;\n\n    const paidMedia = getMessagePaidMedia(fromMessage);\n    if (paidMedia) {\n      const nextIndex = fromMediaIndex! + direction;\n\n      if (nextIndex >= 0 && nextIndex < paidMedia.extendedMedia.length) {\n        return { type: 'message', message: fromMessage, mediaIndex: nextIndex };\n      }\n    }\n\n    const index = messageMediaIds?.indexOf(fromMessage.id);\n    if (index === undefined) return undefined;\n    const nextIndex = index + direction;\n    const nextMessageId = messageMediaIds![nextIndex];\n    const nextMessage = chatMessages?.[nextMessageId];\n    if (nextMessage) {\n      return { type: 'message', message: nextMessage };\n    }\n\n    return undefined;\n  });\n\n  const openMediaViewerItem = useLastCallback((item?: MediaViewerItem) => {\n    if (!item) {\n      handleClose();\n      return;\n    }\n\n    const itemChatId = item.type === 'avatar'\n      ? item.avatarOwner.id : item.type === 'message'\n        ? item.message.chatId : undefined;\n    const itemMessageId = item.type === 'message' ? item.message.id : undefined;\n    const itemStandaloneMedia = item.type === 'standalone' ? item.media : undefined;\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: itemChatId,\n      messageId: itemMessageId,\n      standaloneMedia: itemStandaloneMedia,\n      mediaIndex: item.mediaIndex,\n      isAvatarView: item.type === 'avatar',\n      withDynamicLoading,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const handleBeforeDelete = useLastCallback(() => {\n    const mediaCount = profilePhotos?.photos.length\n      || standaloneMedia?.length || messageMediaIds?.length || 0;\n    if (mediaCount <= 1 || !currentItem) {\n      handleClose();\n      return;\n    }\n    // Before deleting, select previous media\n    const prevMedia = getNextItem(currentItem, -1);\n    if (prevMedia) {\n      openMediaViewerItem(prevMedia);\n      return;\n    }\n\n    if ((currentItem.type === 'avatar' && isUserId(currentItem.avatarOwner.id)) || currentItem.type === 'standalone') {\n      // Keep current item, it'll update when indexes shift\n      return;\n    }\n\n    handleClose();\n  });\n\n  const lang = useOldLang();\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined} ref={headerRef}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          <SenderInfo\n            key={media?.id}\n            item={currentItem}\n          />\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          item={currentItem}\n          canUpdateMedia={canUpdateMedia}\n          canReportAvatar={canReportAvatar}\n          onBeforeDelete={handleBeforeDelete}\n          onReportAvatar={openReportAvatarModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportAvatarModal\n          isOpen={isReportAvatarModalOpen}\n          onClose={closeReportAvatarModal}\n          photo={avatar}\n          peerId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        item={currentItem}\n        loadMoreItemsIfNeeded={loadMoreItemsIfNeeded}\n        isLoadingMoreMedia={isLoadingMoreMedia}\n        isSynced={isSynced}\n        getNextItem={getNextItem}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectItem={openMediaViewerItem}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n        handleSponsoredClick={handleSponsoredClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      messageId,\n      origin,\n      isHidden,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isAvatarView,\n      isSponsoredMessage,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId, isSynced } = global;\n    const isChatWithSelf = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    if (isAvatarView) {\n      const peer = selectPeer(global, chatId!);\n      let canUpdateMedia = false;\n      if (peer) {\n        canUpdateMedia = isUserId(peer.id) ? peer.id === currentUserId : isChatAdmin(peer as ApiChat);\n      }\n\n      const profilePhotos = selectPeerPhotos(global, chatId!);\n\n      return {\n        profilePhotos,\n        avatar: profilePhotos?.photos[mediaIndex!],\n        avatarOwner: peer,\n        isLoadingMoreMedia: profilePhotos?.isLoading,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n        standaloneMedia,\n        mediaIndex,\n        isSynced,\n      };\n    }\n\n    let message: ApiMessage | undefined;\n    if (chatId && messageId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        message = selectScheduledMessage(global, chatId, messageId);\n      } else {\n        message = selectChatMessage(global, chatId, messageId);\n      }\n    }\n\n    let sponsoredMessage: ApiSponsoredMessage | undefined;\n    if (isSponsoredMessage && chatId) {\n      if (origin === MediaViewerOrigin.SponsoredMessage) {\n        sponsoredMessage = selectSponsoredMessage(global, chatId);\n      }\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (chatId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        chatMessages = selectChatScheduledMessages(global, chatId);\n      } else {\n        chatMessages = selectChatMessages(global, chatId);\n      }\n    }\n\n    let isLoadingMoreMedia = false;\n    const isOriginInline = origin === MediaViewerOrigin.Inline;\n    const isOriginAlbum = origin === MediaViewerOrigin.Album;\n    let collectedMessageIds: number[] | undefined;\n\n    if (chatId && threadId && messageId) {\n      if (withDynamicLoading && (isOriginInline || isOriginAlbum)) {\n        const currentSearch = selectCurrentChatMediaSearch(global);\n        isLoadingMoreMedia = Boolean(currentSearch?.isLoading);\n        const { foundIds } = (currentSearch?.currentSegment) || {};\n        collectedMessageIds = foundIds;\n      } else if (origin === MediaViewerOrigin.SharedMedia) {\n        const currentSearch = selectCurrentSharedMediaSearch(global);\n        const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n        collectedMessageIds = foundIds;\n      } else if (isOriginInline || isOriginAlbum) {\n        const outlyingList = selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n        collectedMessageIds = outlyingList || selectListedIds(global, chatId, threadId);\n      }\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      sponsoredMessage,\n      collectedMessageIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isLoadingMoreMedia,\n      isSynced,\n    };\n  },\n)(MediaViewer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"bu_hGbaa\",\"fullSize\":\"W9A8SEMl\",\"backdrop\":\"OFh6u50Q\",\"captionBackdrop\":\"Jd1DYS6Y\",\"backdropNonInteractive\":\"xe67dhtF\",\"close\":\"Mye8Dwxa\",\"wrapper\":\"gLHHo5k8\",\"slideAnimation\":\"GJVwqV9e\",\"slideAnimationToActive\":\"_Yn4SWUB\",\"content\":\"hGCH03qc\",\"slideAnimationFromActive\":\"ZecqXqKy\",\"storyHeader\":\"e7HHuS1g\",\"composer\":\"FXineBYO\",\"caption\":\"RKedwa0I\",\"captionGradient\":\"sHNAfxzf\",\"media\":\"PVZ8TOWS\",\"mediaPreview\":\"lQfkulvp\",\"contentInner\":\"Wi0DXPH2\",\"name\":\"Ka1CGfzq\",\"slide\":\"urTtSsk9\",\"mobileSlide\":\"AjXOHOgE\",\"slidePreview\":\"Sef28wEh\",\"activeSlide\":\"uAlXNXJN\",\"slideInner\":\"g8ypsnnC\",\"mediaWrapper\":\"YiuvOPgT\",\"forward\":\"pGKsAszF\",\"storyIndicators\":\"jGDd2sza\",\"sender\":\"eMYhXF_X\",\"senderInfoTransition\":\"PXnfXZur\",\"senderInfo\":\"WpyVfrsc\",\"senderMeta\":\"jmKI_lhC\",\"senderName\":\"H1uod43o\",\"storyMetaRow\":\"zimpR8Hz\",\"storyMeta\":\"hGTnZuar\",\"closeButton\":\"WlLsjJ2Z\",\"actions\":\"GrsJNw3y\",\"active\":\"q756IpZB\",\"visibilityButton\":\"prxptFFf\",\"visibilityButtonSelf\":\"_MVsZpgB\",\"button\":\"TkphaPyQ\",\"buttonMenu\":\"K0_xAdzf\",\"captionInner\":\"D_5mWNmi\",\"captionContent\":\"ilyTRZtw\",\"captionText\":\"hmFA5qb1\",\"hasOverflow\":\"e1gyTmKe\",\"expanded\":\"HIMnUViv\",\"animate\":\"CvnxnCxN\",\"withShowMore\":\"Vq8pl_kQ\",\"captionShowMore\":\"bM5rlQtM\",\"navigate\":\"nZ30pf4g\",\"prev\":\"SXpRZiax\",\"next\":\"twOBFwUE\",\"modal\":\"nLPOogqS\",\"thumbnail\":\"MnNC7VHS\",\"ghost\":\"fME2l_yv\",\"ghost2\":\"TYicp2_K\",\"ghostImage\":\"HjoURJRK\",\"forwardHeader\":\"JJFtefb9\",\"clickable\":\"BsqMBS2I\",\"headerTitle\":\"G8OgmMDJ\",\"forwardInfo\":\"_M8CgT7s\",\"fromPeer\":\"nJr8QgYX\"};","import type { IDimensions } from '../../../types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport fastBlur from '../../../lib/fastBlur';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getPeerStoryHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport storyRibbonStyles from '../StoryRibbon.module.scss';\nimport styles from '../StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 200;\nconst OFFSET_BOTTOM = 3.5 * REM;\nconst MOBILE_OFFSET = 0.5 * REM;\nconst MOBILE_WIDTH = 600;\n\nexport function animateOpening(\n  userId: string,\n  origin: StoryViewerOrigin,\n  thumb: string,\n  bestImageData: string | undefined,\n  dimensions: IDimensions,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, userId);\n  if (!fromImage) {\n    return;\n  }\n  const { width: windowWidth, height: windowHeight } = windowSize.get();\n  let { width: toWidth, height: toHeight } = dimensions;\n\n  const isMobile = windowWidth <= MOBILE_WIDTH;\n\n  if (isMobile) {\n    toWidth = windowWidth - 2 * MOBILE_OFFSET;\n    toHeight = windowHeight - OFFSET_BOTTOM - 2 * MOBILE_OFFSET;\n\n    const safeAreaBottom = getComputedStyle(document.documentElement).getPropertyValue('--safe-area-bottom');\n    if (safeAreaBottom) {\n      toHeight -= parseFloat(safeAreaBottom);\n    }\n  }\n\n  const toLeft = isMobile ? MOBILE_OFFSET : (windowWidth - toWidth) / 2;\n  const toTop = isMobile ? MOBILE_OFFSET : (windowHeight - (toHeight + OFFSET_BOTTOM)) / 2;\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || thumb, !bestImageData);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: '',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  userId: string,\n  origin: StoryViewerOrigin,\n  bestImageData: string,\n) {\n  const { mediaEl: toImage } = getNodes(origin, userId);\n\n  const fromImage = document.getElementById('StoryViewer')!.querySelector<HTMLImageElement>(\n    `.${styles.mobileSlide} .${styles.media}, .${styles.activeSlide} .${styles.media}`,\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: toTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  const toTranslateX = (toLeft + toWidth / 2) - (fromLeft + fromWidth / 2);\n  const toTranslateY = (toTop + toHeight / 2) - (fromTop + fromHeight / 2);\n  const toScaleX = toWidth / fromWidth;\n  const toScaleY = toHeight / fromHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData);\n    applyStyles(ghost, {\n      top: `${fromTop}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromHeight}px`,\n    });\n\n    const ghost2 = createGhost(toImage.src, undefined, true);\n    const ghost2Top = (fromTop + fromHeight / 2) - fromWidth / 2;\n    applyStyles(ghost2, {\n      top: `${ghost2Top}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromWidth}px`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.appendChild(ghost2);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX}, ${toScaleY})`,\n      });\n\n      applyStyles(ghost2, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX})`,\n        opacity: '1',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n\n          if (document.body.contains(ghost2)) {\n            document.body.removeChild(ghost2);\n          }\n\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nfunction createGhost(source: string, hasBlur = false, isGhost2 = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add(!isGhost2 ? styles.ghost : styles.ghost2);\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n  img.classList.add(styles.ghostImage);\n\n  if (hasBlur) {\n    const canvas = document.createElement('canvas');\n    canvas.classList.add(styles.thumbnail);\n    img.onload = () => {\n      const ctx = canvas.getContext('2d', { alpha: false })!;\n      const {\n        width,\n        height,\n      } = img;\n\n      requestMutation(() => {\n        canvas.width = width;\n        canvas.height = height;\n\n        if (IS_CANVAS_FILTER_SUPPORTED) {\n          ctx.filter = `blur(${RADIUS}px)`;\n        }\n\n        ctx.drawImage(img, -RADIUS * 2, -RADIUS * 2, width + RADIUS * 4, height + RADIUS * 4);\n\n        if (!IS_CANVAS_FILTER_SUPPORTED) {\n          fastBlur(ctx, 0, 0, width, height, RADIUS, ITERATIONS);\n        }\n      });\n    };\n    img.src = source;\n    ghost.appendChild(canvas);\n  } else {\n    img.src = source;\n    ghost.appendChild(img);\n  }\n\n  return ghost;\n}\n\nfunction getNodes(origin: StoryViewerOrigin, userId: string) {\n  let containerSelector;\n  const mediaSelector = `#${getPeerStoryHtmlId(userId)}`;\n\n  switch (origin) {\n    case StoryViewerOrigin.StoryRibbon:\n      containerSelector = `#LeftColumn .${storyRibbonStyles.root}`;\n      break;\n    case StoryViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo';\n      break;\n    case StoryViewerOrigin.ChatList:\n      containerSelector = '#LeftColumn .chat-list';\n      break;\n    case StoryViewerOrigin.SearchResult:\n      containerSelector = '#LeftColumn .LeftSearch--container';\n      break;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement>(`${mediaSelector} img`);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n","import type { IDimensions } from '../../../types';\n\nimport { roundToNearestEven } from '../../../util/math';\n\nexport const BASE_STORY_WIDTH = 720;\nexport const BASE_STORY_HEIGHT = 1280;\nconst BASE_SCREEN_WIDTH = 1200;\nconst BASE_SCREEN_HEIGHT = 800;\nconst BASE_ACTIVE_SLIDE_WIDTH = 405;\nconst BASE_ACTIVE_SLIDE_HEIGHT = 720;\nconst BASE_SLIDE_WIDTH = 135;\nconst BASE_SLIDE_HEIGHT = 240;\nconst BASE_GAP_WIDTH = 40;\n\nexport function calculateSlideSizes(windowWidth: number, windowHeight: number): {\n  activeSlide: IDimensions;\n  slide: IDimensions;\n  scale: number;\n  toActiveScale: number;\n  fromActiveScale: number;\n} {\n  const scale = calculateScale(BASE_SCREEN_WIDTH, BASE_SCREEN_HEIGHT, windowWidth, windowHeight);\n\n  const activeSlideWidth = roundToNearestEven(BASE_ACTIVE_SLIDE_WIDTH * scale);\n  const slideWidth = roundToNearestEven(BASE_SLIDE_WIDTH * scale);\n  // Avoid fractional values to prevent blurry text\n  return {\n    activeSlide: {\n      width: activeSlideWidth,\n      height: roundToNearestEven(BASE_ACTIVE_SLIDE_HEIGHT * scale),\n    },\n    slide: {\n      width: slideWidth,\n      height: roundToNearestEven(BASE_SLIDE_HEIGHT * scale),\n    },\n    scale,\n    toActiveScale: activeSlideWidth / slideWidth,\n    fromActiveScale: slideWidth / activeSlideWidth,\n  };\n}\n\nexport function calculateOffsetX({\n  scale,\n  slideAmount,\n  isActiveSlideSize,\n  isMoveThroughActiveSlide,\n  isBackward,\n}: {\n  scale: number;\n  slideAmount: number;\n  isActiveSlideSize: boolean;\n  isMoveThroughActiveSlide?: boolean;\n  isBackward: boolean;\n}) {\n  const mainOffset = BASE_GAP_WIDTH + (isActiveSlideSize ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH);\n  const additionalOffset = (Math.abs(slideAmount) - 1)\n    * ((isMoveThroughActiveSlide ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH) + BASE_GAP_WIDTH);\n  const totalOffset = roundToNearestEven((mainOffset + additionalOffset) * scale);\n\n  return isBackward ? -totalOffset : totalOffset;\n}\n\nfunction calculateScale(baseWidth: number, baseHeight: number, newWidth: number, newHeight: number) {\n  const widthScale = newWidth / baseWidth;\n  const heightScale = newHeight / baseHeight;\n\n  return Math.min(widthScale, heightScale);\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport { calculateSlideSizes } from '../helpers/dimensions';\n\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nexport default function useSlideSizes() {\n  const { width: windowWidth, height: windowHeight } = useWindowSize();\n  return useMemo(() => calculateSlideSizes(windowWidth, windowHeight), [windowWidth, windowHeight]);\n}\n","import type { ApiTypeStory } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStoryMediaHash, hasMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nexport default function useStoryProps(\n  story?: ApiTypeStory, isCurrentUserPremium = false, isDropdownMenuOpen = false,\n) {\n  const isLoadedStory = story && 'content' in story;\n  const isDeletedStory = story && 'isDeleted' in story;\n  const hasText = isLoadedStory ? hasMessageText(story) : false;\n  const hasForwardInfo = isLoadedStory && Boolean(story.forwardInfo);\n\n  let thumbnail: string | undefined;\n  if (isLoadedStory) {\n    if (story.content.photo?.thumbnail) {\n      thumbnail = story.content.photo.thumbnail.dataUri;\n    }\n    if (story.content.video?.thumbnail?.dataUri) {\n      thumbnail = story.content.video.thumbnail.dataUri;\n    }\n  }\n\n  const previewHash = isLoadedStory ? getStoryMediaHash(story) : undefined;\n  const previewBlobUrl = useMedia(previewHash);\n  const isVideo = Boolean(isLoadedStory && story.content.video);\n  const noSound = isLoadedStory && story.content.video?.noSound;\n  const fullMediaHash = isLoadedStory ? getStoryMediaHash(story, 'full') : undefined;\n  const fullMediaData = useMedia(fullMediaHash, !story, isVideo ? ApiMediaFormat.Progressive : ApiMediaFormat.BlobUrl);\n  const altMediaHash = isVideo && isLoadedStory ? getStoryMediaHash(story, 'full', true) : undefined;\n  const altMediaData = useMedia(altMediaHash, !story, ApiMediaFormat.Progressive);\n\n  const hasFullData = Boolean(fullMediaData || altMediaData);\n  const bestImageData = isVideo ? previewBlobUrl : fullMediaData || previewBlobUrl;\n  const hasThumb = !previewBlobUrl && !hasFullData;\n\n  const canDownload = isCurrentUserPremium && isLoadedStory && !story.noForwards;\n  const downloadHash = isLoadedStory ? getStoryMediaHash(story, 'download') : undefined;\n  const downloadMediaData = useMedia(downloadHash, !canDownload && !isDropdownMenuOpen);\n\n  return {\n    isLoadedStory,\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewHash,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaHash,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    bestImageData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GrE47IXS\",\"closeButton\":\"NlWSF1pA\",\"stealthIcon\":\"qKi5jsGM\",\"title\":\"BFctFGoT\",\"description\":\"fZIJH4IG\",\"listItem\":\"RGD70uBt\",\"icon\":\"HCYfPccW\",\"button\":\"AM_sxoXP\",\"subtitle\":\"L8oRQyKb\"};","import { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStealthMode } from '../../api/types';\n\nimport { selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport TextTimer from '../ui/TextTimer';\n\nimport styles from './StealthModeModal.module.scss';\n\ntype StateProps = {\n  isOpen?: boolean;\n  stealthMode?: ApiStealthMode;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StealthModeModal = ({ isOpen, stealthMode, isCurrentUserPremium }: StateProps) => {\n  const {\n    toggleStealthModal,\n    activateStealthMode,\n    showNotification,\n    openPremiumModal,\n  } = getActions();\n  const [isOnCooldown, setIsOnCooldown] = useState(false);\n\n  useEffect(() => {\n    if (!stealthMode) return;\n    const serverTime = getServerTime();\n    if (stealthMode.cooldownUntil && stealthMode.cooldownUntil > serverTime) {\n      setIsOnCooldown(true);\n    }\n  }, [stealthMode, isOpen]);\n\n  const lang = useOldLang();\n\n  const handleTimerEnds = useLastCallback(() => {\n    setIsOnCooldown(false);\n  });\n\n  const handleClose = useLastCallback(() => {\n    toggleStealthModal({ isOpen: false });\n  });\n\n  const handleActivate = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({ initialSection: 'stories' });\n      return;\n    }\n\n    activateStealthMode();\n    showNotification({\n      title: lang('StealthModeOn'),\n      message: lang('StealthModeOnHint'),\n    });\n    toggleStealthModal({ isOpen: false });\n  });\n\n  return (\n    <Modal\n      className=\"component-theme-dark\"\n      contentClassName={styles.root}\n      isOpen={isOpen}\n      isSlim\n      onClose={handleClose}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.stealthIcon}>\n        <Icon name=\"eye-crossed-outline\" />\n      </div>\n      <div className={styles.title}>{lang('StealthMode')}</div>\n      <div className={styles.description}>\n        {lang(isCurrentUserPremium ? 'StealthModeHint' : 'StealthModePremiumHint')}\n      </div>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-past\" className={styles.icon} />}\n      >\n        <span className=\"title\">{lang('HideRecentViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideRecentViewsDescription')}</span>\n      </ListItem>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-future\" className={styles.icon} aria-hidden />}\n      >\n        <span className=\"title\">{lang('HideNextViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideNextViewsDescription')}</span>\n      </ListItem>\n      <Button\n        className={styles.button}\n        size=\"smaller\"\n        disabled={isOnCooldown}\n        isShiny={!isCurrentUserPremium}\n        withPremiumGradient={!isCurrentUserPremium}\n        onClick={handleActivate}\n      >\n        {!isCurrentUserPremium ? lang('UnlockStealthMode')\n          : isOnCooldown\n            ? (<TextTimer langKey=\"AvailableIn\" endsAt={stealthMode!.cooldownUntil!} onEnd={handleTimerEnds} />)\n            : lang('EnableStealthMode')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const tabState = selectTabState(global);\n\n  return {\n    isOpen: tabState.storyViewer?.isStealthModalOpen,\n    stealthMode: global.stories.stealthMode,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StealthModeModal));\n","import { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ninterface OwnProps {\n  isOpen: boolean;\n  story?: ApiTypeStory;\n  onClose: NoneToVoidFunction;\n}\n\nfunction StoryDeleteConfirmModal({\n  isOpen, story, onClose,\n}: OwnProps) {\n  const { deleteStory, openNextStory } = getActions();\n\n  const lang = useOldLang();\n\n  const handleDeleteStoryClick = useCallback(() => {\n    if (!story) {\n      return;\n    }\n\n    openNextStory();\n    deleteStory({ peerId: story.peerId, storyId: story.id });\n    onClose();\n  }, [onClose, story]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('DeleteStoryTitle')}\n      text={lang('DeleteStorySubtitle')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteStoryClick}\n      confirmIsDestructive\n      className=\"component-theme-dark\"\n    />\n  );\n}\n\nexport default memo(StoryDeleteConfirmModal);\n","import { memo, useMemo, useState } from '../../../lib/teact/teact';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\n\ninterface OwnProps {\n  id: string;\n  contactListIds?: string[];\n  currentUserId: string;\n  selectedIds?: string[];\n  lockedIds?: string[];\n  onSelect: (selectedIds: string[]) => void;\n}\n\nfunction AllowDenyList({\n  id,\n  contactListIds,\n  currentUserId,\n  selectedIds,\n  lockedIds,\n  onSelect,\n}: OwnProps) {\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((userId) => userId !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...selectedIds || [], ...contactIds], query: searchQuery, type: 'user' }));\n  }, [contactListIds, currentUserId, searchQuery, selectedIds]);\n\n  return (\n    <PeerPicker\n      key={id}\n      itemIds={displayedIds}\n      selectedIds={selectedIds ?? MEMO_EMPTY_ARRAY}\n      lockedSelectedIds={lockedIds}\n      filterValue={searchQuery}\n      filterPlaceholder={lang('Search')}\n      searchInputId={`${id}-picker-search`}\n      isSearchable\n      withDefaultPadding\n      forceShowSelf\n      onSelectedIdsChange={onSelect}\n      onFilterChange={setSearchQuery}\n      allowMultiple\n      withStatus\n      itemInputType=\"checkbox\"\n    />\n  );\n}\n\nexport default memo(AllowDenyList);\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonHolder\":\"BDK_pgpt\",\"active\":\"N8ujSwlC\"};","import {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nimport styles from './CloseFriends.module.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  currentUserId: string;\n  usersById: Record<string, ApiUser>;\n  contactListIds?: string[];\n  onClose: NoneToVoidFunction;\n};\n\nfunction CloseFriends({\n  isActive, contactListIds, usersById, currentUserId, onClose,\n}: OwnProps) {\n  const { saveCloseFriends } = getActions();\n\n  const lang = useOldLang();\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>([]);\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((id) => id !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...closeFriendIds, ...contactIds], query: searchQuery, type: 'user' }));\n  }, [closeFriendIds, contactListIds, currentUserId, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (!prevIsActive && isActive) {\n      setIsSubmitShown(false);\n      setNewSelectedContactIds(closeFriendIds);\n    }\n  }, [isActive, closeFriendIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useLastCallback(() => {\n    saveCloseFriends({ userIds: newSelectedContactIds });\n    onClose();\n  });\n\n  return (\n    <>\n      <PeerPicker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        searchInputId=\"close-friends-picker-search\"\n        isSearchable\n        withDefaultPadding\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        withStatus\n        itemInputType=\"checkbox\"\n      />\n\n      <div className={buildClassName(styles.buttonHolder, isSubmitShown && styles.active)}>\n        <FloatingActionButton\n          isShown={isSubmitShown}\n          onClick={handleSubmit}\n          ariaLabel={lang('Save')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n    </>\n  );\n}\n\nexport default memo(CloseFriends);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"hz7SomkK\",\"header\":\"NV6Rt2g9\",\"closeButton\":\"SN1GFS6L\",\"headerTitle\":\"gi0Y6Ns6\",\"content\":\"sTaVDkiD\",\"section\":\"eUiuPoEC\",\"title\":\"iPPiw9DI\",\"list\":\"OUP1Ss0W\",\"option\":\"JL33Sa3b\",\"checked\":\"qVPo_cVL\",\"input\":\"zsDaUk0i\",\"icon\":\"AfYCVlys\",\"action\":\"njMeBBwY\",\"optionContent\":\"TUAAnG2w\",\"footer\":\"r24Qz2bf\",\"info\":\"ljeRVBOm\",\"submit\":\"RwNLN_rH\"};","import type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPrivacySettings, ApiStory, ApiUser, PrivacyVisibility,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectPeerStory, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getHours } from '../../util/dates/units';\nimport stopEvent from '../../util/stopEvent';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Switcher from '../ui/Switcher';\nimport Transition from '../ui/Transition';\nimport AllowDenyList from './privacy/AllowDenyList';\nimport CloseFriends from './privacy/CloseFriends';\n\nimport styles from './StorySettings.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  onClose?: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  story?: ApiStory;\n  visibility?: ApiPrivacySettings;\n  contactListIds?: string[];\n  usersById: Record<string, ApiUser>;\n  currentUserId: string;\n}\n\ntype PrivacyAction = 'blockUserIds' | 'closeFriends' | 'blockContactUserIds' | 'allowUserIds';\n\ninterface PrivacyOption {\n  name: string;\n  value: PrivacyVisibility;\n  color: [string, string];\n  icon: IconName;\n  actions?: PrivacyAction;\n}\n\nconst OPTIONS: PrivacyOption[] = [{\n  name: 'StoryPrivacyOptionEveryone',\n  value: 'everybody',\n  color: ['#50ABFF', '#007AFF'],\n  icon: 'channel-filled',\n  actions: 'blockUserIds',\n}, {\n  name: 'StoryPrivacyOptionContacts',\n  value: 'contacts',\n  color: ['#C36EFF', '#8B60FA'],\n  icon: 'user-filled',\n  actions: 'blockContactUserIds',\n}, {\n  name: 'StoryPrivacyOptionCloseFriends',\n  value: 'closeFriends',\n  color: ['#88D93A', '#30B73B'],\n  icon: 'favorite-filled',\n  actions: 'closeFriends',\n}, {\n  name: 'StoryPrivacyOptionSelectedContacts',\n  value: 'nobody',\n  color: ['#FFB743', '#F69A36'],\n  icon: 'group-filled',\n  actions: 'allowUserIds',\n}];\n\nenum Screens {\n  privacy,\n  allowList,\n  closeFriends,\n  denyList,\n}\n\nfunction StorySettings({\n  isOpen,\n  story,\n  visibility,\n  contactListIds,\n  usersById,\n  currentUserId,\n  onClose,\n}: OwnProps & StateProps) {\n  const { editStoryPrivacy, toggleStoryInProfile } = getActions();\n\n  const lang = useOldLang();\n  const [isOpenModal, openModal, closeModal] = useFlag(false);\n  const [privacy, setPrivacy] = useState<ApiPrivacySettings | undefined>(visibility);\n  const [isPinned, setIsPinned] = useState(story?.isInProfile);\n  const [activeKey, setActiveKey] = useState<Screens>(Screens.privacy);\n  const [editingBlockingCategory, setEditingBlockingCategory] = useState<PrivacyVisibility>('everybody');\n  const isBackButton = activeKey !== Screens.privacy;\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const lockedIds = useMemo(() => {\n    if (activeKey === Screens.allowList\n      && (!privacy?.allowUserIds?.length || privacy.allowUserIds[0] === currentUserId)\n    ) {\n      return [currentUserId];\n    }\n\n    return undefined;\n  }, [activeKey, currentUserId, privacy?.allowUserIds]);\n\n  const selectedBlockedIds = useMemo(() => {\n    if (editingBlockingCategory !== privacy?.visibility) return [];\n    return privacy?.blockUserIds || [];\n  }, [editingBlockingCategory, privacy?.blockUserIds, privacy?.visibility]);\n\n  const handleAllowUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      allowUserIds: newIds?.length ? newIds?.filter((id) => id !== currentUserId) : [currentUserId],\n    });\n  });\n\n  const handleDenyUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      blockUserIds: newIds,\n      visibility: editingBlockingCategory,\n    });\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      setActiveKey(Screens.privacy);\n      openModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setPrivacy(visibility);\n  }, [visibility]);\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (activeKey === Screens.privacy) {\n      closeModal();\n      return;\n    }\n\n    setActiveKey(Screens.privacy);\n  });\n\n  function handleVisibilityChange(newVisibility: PrivacyVisibility) {\n    setPrivacy({\n      ...privacy!,\n      visibility: newVisibility,\n    });\n  }\n\n  function handleActionClick(e: React.MouseEvent<HTMLDivElement>, action: PrivacyAction) {\n    stopEvent(e);\n\n    switch (action) {\n      case 'closeFriends':\n        setActiveKey(Screens.closeFriends);\n        break;\n      case 'allowUserIds':\n        setActiveKey(Screens.allowList);\n        break;\n      case 'blockUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('everybody');\n        break;\n      case 'blockContactUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('contacts');\n        break;\n    }\n  }\n\n  const handleIsPinnedToggle = useLastCallback(() => {\n    setIsPinned(!isPinned);\n  });\n\n  // console.warn(privacy?.visibility, story?.visibility, OPTIONS);\n\n  const handleSubmit = useLastCallback(() => {\n    editStoryPrivacy({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      privacy: privacy!,\n    });\n    if (story!.isInProfile !== isPinned) {\n      toggleStoryInProfile({ peerId: story!.peerId, storyId: story!.id, isInProfile: isPinned });\n    }\n    closeModal();\n  });\n\n  function renderActionName(action: PrivacyAction) {\n    if (action === 'closeFriends') {\n      if (closeFriendIds.length === 0) {\n        return lang('StoryPrivacyOptionCloseFriendsDetail');\n      }\n\n      if (closeFriendIds.length === 1) {\n        return getPeerTitle(lang, usersById[closeFriendIds[0]]);\n      }\n\n      return lang('StoryPrivacyOptionPeople', closeFriendIds.length, 'i');\n    }\n\n    if ((action === 'blockUserIds' && privacy?.visibility === 'everybody')\n      || (action === 'blockContactUserIds' && privacy?.visibility === 'contacts')) {\n      if (!privacy?.blockUserIds?.length) {\n        return lang('StoryPrivacyOptionContactsDetail');\n      }\n\n      if (privacy.blockUserIds.length === 1) {\n        return lang('StoryPrivacyOptionExcludePerson', getUserFullName(usersById[privacy.blockUserIds[0]]));\n      }\n\n      return lang('StoryPrivacyOptionExcludePeople', privacy.blockUserIds.length, 'i');\n    }\n\n    if (!privacy?.allowUserIds || privacy.allowUserIds.length === 0) {\n      return lang('StoryPrivacyOptionSelectedContactsDetail');\n    }\n\n    if (privacy.allowUserIds.length === 1) {\n      return getUserFullName(usersById[privacy.allowUserIds[0]]);\n    }\n\n    return lang('StoryPrivacyOptionPeople', privacy.allowUserIds.length, 'i');\n  }\n\n  function renderHeaderContent() {\n    switch (activeKey) {\n      case Screens.privacy:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertEditTitle')}</h3>;\n      case Screens.allowList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertSelectContactsTitle')}</h3>;\n      case Screens.closeFriends:\n        return <h3 className={styles.headerTitle}>{lang('CloseFriends')}</h3>;\n      case Screens.denyList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertExcludedContactsTitle')}</h3>;\n    }\n  }\n\n  function renderContent(isActive: boolean) {\n    switch (activeKey) {\n      case Screens.privacy:\n        return renderPrivacyList();\n      case Screens.closeFriends:\n        return (\n          <CloseFriends\n            key=\"close-friends\"\n            isActive={isActive}\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            onClose={handleCloseButtonClick}\n          />\n        );\n      case Screens.denyList:\n        return (\n          <AllowDenyList\n            key=\"deny-list\"\n            id=\"deny-list\"\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            selectedIds={selectedBlockedIds}\n            onSelect={handleDenyUserIdsChange}\n          />\n        );\n      case Screens.allowList:\n        return (\n          <AllowDenyList\n            key=\"allow-list\"\n            id=\"allow-list\"\n            contactListIds={contactListIds}\n            lockedIds={lockedIds}\n            currentUserId={currentUserId}\n            selectedIds={privacy?.allowUserIds}\n            onSelect={handleAllowUserIdsChange}\n          />\n        );\n    }\n  }\n\n  function renderPrivacyList() {\n    const storyLifeTime = story ? getHours(story.expireDate - story.date) : 0;\n\n    return (\n      <>\n        <div className={styles.section}>\n          <h3 className={styles.title}>{lang('StoryPrivacyAlertSubtitleProfile')}</h3>\n          <div className={styles.list}>\n            {OPTIONS.map((option) => (\n              <label\n                key={option.value}\n                className={buildClassName(styles.option, option.value === privacy?.visibility && styles.checked)}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"story_privacy\"\n                  className={styles.input}\n                  value={option.value}\n                  checked={option.value === privacy?.visibility}\n                  onChange={() => handleVisibilityChange(option.value)}\n                  teactExperimentControlled\n                />\n                <span\n                  className={styles.icon}\n                  style={`--color-from: ${option.color[0]}; --color-to: ${option.color[1]}`}\n                >\n                  <Icon name={option.icon} />\n                </span>\n                <div className={styles.optionContent}>\n                  <span className={buildClassName(styles.option_name)}>{lang(option.name)}</span>\n                  {option.actions && (\n                    <div\n                      tabIndex={0}\n                      role=\"button\"\n                      className={styles.action}\n                      aria-label={lang('Edit')}\n                      onClick={(e) => { handleActionClick(e, option.actions!); }}\n                    >\n                      <span className={styles.actionInner}>{renderActionName(option.actions)}</span>\n                      <Icon name=\"next\" />\n                    </div>\n                  )}\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <ListItem ripple onClick={handleIsPinnedToggle}>\n            <span>{lang('StoryKeep')}</span>\n            <Switcher\n              id=\"group-notifications\"\n              label={lang('StoryKeep')}\n              checked={isPinned}\n              inactive\n            />\n          </ListItem>\n        </div>\n        <div className={styles.footer}>\n          <div className={styles.info}>{lang('StoryKeepInfo', storyLifeTime)}</div>\n          <div className={styles.submit}>\n            <Button onClick={handleSubmit}>{lang('StoryPrivacyButtonSave')}</Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpenModal}\n      className={buildClassName(styles.modal, 'component-theme-dark')}\n      onClose={closeModal}\n      noBackdrop\n      onCloseAnimationEnd={onClose}\n    >\n      <div className={styles.header}>\n        <Button\n          className={buildClassName(styles.closeButton, 'close-button')}\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleCloseButtonClick}\n          ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n        >\n          <div className={buildClassName('animated-close-icon', isBackButton && 'state-back')} />\n        </Button>\n        <Transition name=\"slideFade\" activeKey={activeKey}>\n          {renderHeaderContent()}\n        </Transition>\n      </div>\n      <Transition\n        activeKey={activeKey}\n        name=\"slideFade\"\n        slideClassName=\"ChatOrUserPicker_slide\"\n        className={styles.content}\n      >\n        {renderContent}\n      </Transition>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      storyId, peerId,\n    },\n  } = selectTabState(global);\n  const story = (peerId && storyId)\n    ? selectPeerStory(global, peerId, storyId)\n    : undefined;\n\n  return {\n    story: story && 'content' in story ? story : undefined,\n    visibility: story && 'visibility' in story ? story.visibility : undefined,\n    contactListIds: global.contactList?.userIds,\n    usersById: global.users.byId,\n    currentUserId: global.currentUserId!,\n  };\n})(StorySettings));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStoryForwardInfo,\n  ApiTypeStory,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectPeer, selectPeerStory } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\nimport { renderTextWithEntities } from '../helpers/renderTextWithEntities';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\nimport PeerColorWrapper from '../PeerColorWrapper';\nimport EmojiIconBackground from './EmojiIconBackground';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  forwardInfo: ApiStoryForwardInfo;\n  className?: string;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  story?: ApiTypeStory;\n};\n\nconst EmbeddedStoryForward: FC<OwnProps & StateProps> = ({\n  className,\n  forwardInfo,\n  sender,\n  story,\n}) => {\n  const { openStoryViewer, loadPeerStoriesByIds, openChat } = getActions();\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!story && forwardInfo.fromPeerId && forwardInfo.storyId) {\n      loadPeerStoriesByIds({\n        peerId: forwardInfo.fromPeerId,\n        storyIds: [forwardInfo.storyId],\n      });\n    }\n  }, [forwardInfo, story]);\n\n  const senderTitle = sender ? getPeerTitle(lang, sender) : forwardInfo.fromName;\n\n  const openOriginalStory = useLastCallback(() => {\n    const { fromPeerId, storyId } = forwardInfo;\n    if (!fromPeerId) return;\n\n    const isStoryReady = story && !('isDeleted' in story && story.isDeleted);\n\n    if (isStoryReady) {\n      openStoryViewer({\n        peerId: fromPeerId,\n        storyId,\n        isSingleStory: true,\n      });\n    } else {\n      openChat({ id: fromPeerId });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(openOriginalStory);\n\n  function renderTextContent() {\n    if (story && 'content' in story && story.content.text) {\n      return (\n        <p className=\"embedded-text-wrapper\">\n          {renderTextWithEntities(story.content.text)}\n        </p>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSender() {\n    if (!sender || !senderTitle) {\n      return undefined;\n    }\n\n    const icon: IconName | undefined = !isUserId(sender.id) ? 'channel-filled' : 'user-filled';\n\n    return (\n      <>\n        {icon && <Icon name={icon} className=\"embedded-chat-icon\" />}\n        {senderTitle && renderText(senderTitle)}\n      </>\n    );\n  }\n\n  return (\n    <PeerColorWrapper\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        getPeerColorClass(sender, true, true),\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {sender?.color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          emojiDocumentId={sender.color.backgroundEmojiId}\n          className=\"EmbeddedMessage--background-icons\"\n        />\n      )}\n      <div className=\"message-text\">\n        {renderTextContent()}\n        <div className=\"message-title\">\n          {renderSender()}\n        </div>\n      </div>\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { forwardInfo }): StateProps => {\n    const sender = forwardInfo.fromPeerId ? selectPeer(global, forwardInfo.fromPeerId) : undefined;\n    const story = forwardInfo.storyId && forwardInfo.fromPeerId\n      ? selectPeerStory(global, forwardInfo.fromPeerId, forwardInfo.storyId) : undefined;\n    return {\n      sender,\n      story,\n    };\n  },\n)(EmbeddedStoryForward));\n","import {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../util/buildClassName';\nimport calcTextLineHeightAndCount from '../../util/element/calcTextLineHeightAndCount';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport EmbeddedStoryForward from '../common/embedded/EmbeddedStoryForward';\nimport MessageText from '../common/MessageText';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  story: ApiStory;\n  isExpanded: boolean;\n  className?: string;\n  onExpand: NoneToVoidFunction;\n  onFold?: NoneToVoidFunction;\n}\n\nconst EXPAND_ANIMATION_DURATION_MS = 400;\nconst LINES_TO_SHOW = 3;\n\nfunction StoryCaption({\n  story, isExpanded, className, onExpand, onFold,\n}: OwnProps) {\n  const lang = useOldLang();\n  const ref = useRef<HTMLDivElement>();\n  const contentRef = useRef<HTMLDivElement>();\n  const textRef = useRef<HTMLDivElement>();\n  const showMoreButtonRef = useRef<HTMLDivElement>();\n  const renderingStory = useCurrentOrPrev(story, true);\n\n  const caption = renderingStory?.content.text;\n\n  const [hasOverflow, setHasOverflow] = useState(false);\n  const prevIsExpanded = usePrevDuringAnimation(isExpanded || undefined, EXPAND_ANIMATION_DURATION_MS);\n  const isInExpandedState = isExpanded || prevIsExpanded;\n\n  useEffect(() => {\n    requestMutation(() => {\n      if (!contentRef.current) {\n        return;\n      }\n\n      if (isExpanded) {\n        addExtraClass(contentRef.current, styles.animate);\n      } else {\n        removeExtraClass(contentRef.current, styles.animate);\n      }\n    });\n  }, [isExpanded]);\n\n  const canExpand = hasOverflow && !isInExpandedState;\n  const { shouldRender: shouldRenderShowMore, transitionClassNames } = useShowTransitionDeprecated(\n    canExpand, undefined, true, 'slow', true,\n  );\n\n  // Setup gradient to clip caption before button\n  useLayoutEffect(() => {\n    requestMeasure(() => {\n      const container = contentRef.current;\n      const button = showMoreButtonRef.current;\n      if (!container || !button) {\n        return;\n      }\n\n      const { offsetWidth } = button;\n\n      requestMutation(() => {\n        container.style.setProperty('--expand-button-width', `${offsetWidth}px`);\n      });\n    });\n  }, [shouldRenderShowMore, lang]);\n\n  useLayoutEffect(() => {\n    requestForcedReflow(() => {\n      if (!contentRef.current || !textRef.current) {\n        return undefined;\n      }\n\n      const container = contentRef.current;\n      const textContainer = textRef.current;\n\n      const textOffsetTop = textContainer.offsetTop;\n      const { lineHeight, totalLines } = calcTextLineHeightAndCount(textContainer);\n      const isOverflowing = totalLines > LINES_TO_SHOW;\n      const overflowShift = textOffsetTop + lineHeight * LINES_TO_SHOW;\n\n      return () => {\n        if (isOverflowing) {\n          addExtraClass(container, styles.hasOverflow);\n          setHasOverflow(true);\n        }\n\n        container.style.setProperty('--_overflow-shift', `${overflowShift}px`);\n      };\n    });\n  }, [caption]);\n\n  useEffect(() => {\n    if (!isExpanded) {\n      ref.current?.scrollTo({ top: 0 });\n    }\n  }, [isExpanded]);\n\n  const fullClassName = buildClassName(\n    styles.captionContent,\n    isInExpandedState && styles.expanded,\n    shouldRenderShowMore && styles.withShowMore,\n  );\n\n  return (\n    <div className={buildClassName(styles.caption, className)}>\n      <div\n        ref={contentRef}\n        className={fullClassName}\n        role={canExpand ? 'button' : undefined}\n        onClick={canExpand ? onExpand : onFold}\n      >\n        <div\n          ref={ref}\n          className={buildClassName(styles.captionInner, 'allow-selection', 'custom-scroll')}\n        >\n          {renderingStory?.forwardInfo && (\n            <EmbeddedStoryForward\n              forwardInfo={renderingStory.forwardInfo}\n              className={styles.forwardInfo}\n            />\n          )}\n          {renderingStory && (\n            <div ref={textRef} className={styles.captionText}>\n              <MessageText\n                messageOrStory={renderingStory}\n                withTranslucentThumbs\n                forcePlayback\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      {shouldRenderShowMore && (\n        <div\n          ref={showMoreButtonRef}\n          className={buildClassName(styles.captionShowMore, transitionClassNames)}\n          onClick={onExpand}\n        >\n          {lang('Story.CaptionShowMore')}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(StoryCaption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YVD19vOP\",\"viewInfo\":\"cknL5COh\",\"interactive\":\"pJAyeGkG\",\"avatars\":\"Vz_VtJ16\",\"spacer\":\"kKoeDk3Z\",\"reactionCount\":\"sf3u_6Vh\",\"reactionCountHeart\":\"Er2XKRqi\",\"footerItem\":\"vJRk_UUk\",\"views\":\"nIv3YAnZ\",\"viewIcon\":\"WyBiNM6e\",\"reactionButton\":\"lpDXVIuf\",\"reactionHeart\":\"twgMDT1y\"};","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { HEART_REACTION } from '../../config';\nimport {\n  getReactionKey, getStoryKey, isSameReaction,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport ReactionAnimatedEmoji from '../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../ui/Button';\n\nimport styles from './StoryFooter.module.scss';\n\ntype OwnProps = {\n  story: ApiStory;\n  className?: string;\n};\n\nconst StoryFooter = ({\n  story,\n  className,\n}: OwnProps) => {\n  const { openStoryViewModal, openForwardMenu, sendStoryReaction } = getActions();\n  const lang = useOldLang();\n\n  const {\n    views, isOut, peerId, id: storyId, sentReaction,\n  } = story;\n  const { viewsCount, forwardsCount, reactionsCount } = views || {};\n  const isChannel = !isUserId(peerId);\n\n  const isSentStoryReactionHeart = sentReaction && isSameReaction(sentReaction, HEART_REACTION);\n\n  const canForward = Boolean(\n    (isOut || isChannel)\n    && story.isPublic\n    && !story.noForwards,\n  );\n\n  const containerId = getStoryKey(peerId, storyId);\n\n  const recentViewers = useMemo(() => {\n    const { users: { byId: usersById } } = getGlobal();\n\n    const recentViewerIds = views && 'recentViewerIds' in views ? views.recentViewerIds : undefined;\n    if (!recentViewerIds) return undefined;\n\n    return recentViewerIds.map((id) => usersById[id]).filter(Boolean);\n  }, [views]);\n\n  const handleOpenStoryViewModal = useLastCallback(() => {\n    openStoryViewModal({ storyId });\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleLikeStory = useLastCallback(() => {\n    const reaction = sentReaction ? undefined : HEART_REACTION;\n    sendStoryReaction({\n      peerId,\n      storyId,\n      containerId,\n      reaction,\n    });\n  });\n\n  if (!viewsCount) {\n    return (\n      <div className={buildClassName(styles.root, className)}>\n        {lang('NobodyViewed')}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        className,\n      )}\n    >\n      <div\n        className={buildClassName(styles.viewInfo, !isChannel && styles.interactive)}\n        onClick={!isChannel ? handleOpenStoryViewModal : undefined}\n      >\n        {Boolean(recentViewers?.length) && (\n          <AvatarList\n            size=\"small\"\n            peers={recentViewers}\n            className={styles.avatars}\n          />\n        )}\n\n        {isChannel ? (\n          <span className={styles.views}>\n            <Icon name=\"channelviews\" className={styles.viewIcon} />\n            {viewsCount}\n          </span>\n        ) : (\n          <span className={styles.views}>{lang('Views', viewsCount, 'i')}</span>\n        )}\n        {Boolean(reactionsCount) && !isChannel && (\n          <span className={styles.reactionCount}>\n            <Icon name=\"heart\" className={styles.reactionCountHeart} />\n            {reactionsCount}\n          </span>\n        )}\n      </div>\n      <div className={styles.spacer} />\n      {canForward && (\n        <Button\n          color=\"translucent\"\n          size=\"smaller\"\n          round\n          onClick={handleForwardClick}\n          ariaLabel={lang('Forward')}\n          className={styles.footerItem}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {isChannel && (\n        <>\n          {Boolean(forwardsCount) && (\n            <div className={styles.footerItem}>\n              <Button\n                round\n                color=\"translucent\"\n                size=\"smaller\"\n                nonInteractive\n                ariaLabel={lang('PublicShares')}\n              >\n                <Icon name=\"loop\" />\n              </Button>\n              <span>{forwardsCount}</span>\n            </div>\n          )}\n          <div className={styles.footerItem}>\n            <Button\n              round\n              className={styles.reactionButton}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleLikeStory}\n              ariaLabel={lang('AccDescrLike')}\n            >\n              {sentReaction && (\n                <ReactionAnimatedEmoji\n                  key={getReactionKey(sentReaction)}\n                  containerId={containerId}\n                  reaction={sentReaction}\n                  withEffectOnly={isSentStoryReactionHeart}\n                />\n              )}\n              {(!sentReaction || isSentStoryReactionHeart) && (\n                <Icon\n                  name={isSentStoryReactionHeart ? 'heart' : 'heart-outline'}\n                  className={buildClassName(isSentStoryReactionHeart && styles.reactionHeart)}\n                />\n              )}\n            </Button>\n            {Boolean(reactionsCount) && (<span>{reactionsCount}</span>)}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StoryFooter);\n","import type React from '../../lib/teact/teact';\nimport {\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './StoryProgress.module.scss';\n\ninterface OwnProps {\n  isActive: boolean;\n  isViewed: boolean;\n  isVideo?: boolean;\n  duration?: number;\n  isPaused?: boolean;\n  onImageComplete: NoneToVoidFunction;\n}\n\nconst DEFAULT_STORY_DURATION_S = 6;\n\nfunction StoryProgress({\n  isActive, isViewed, isVideo, duration = DEFAULT_STORY_DURATION_S, isPaused, onImageComplete,\n}: OwnProps) {\n  const handleAnimationEnd = useLastCallback((event: React.AnimationEvent<HTMLElement>) => {\n    if (!isVideo && event.animationName === styles.progress) {\n      onImageComplete();\n    }\n  });\n\n  const classNames = buildClassName(\n    styles.root,\n    isViewed && styles.viewed,\n    isActive && styles.active,\n    isPaused && styles.paused,\n  );\n\n  return (\n    <span\n      className={classNames}\n      aria-hidden\n    >\n      {isActive && (\n        <i style={`--progress-duration: ${duration}s`} className={styles.inner} onAnimationEnd={handleAnimationEnd} />\n      )}\n    </span>\n  );\n}\n\nexport default memo(StoryProgress);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c1fbGgcx\",\"viewed\":\"xwOKghO2\",\"active\":\"ZuByYcIx\",\"inner\":\"qyBCpJct\",\"progress\":\"XY98E7VM\",\"paused\":\"n9V6B7hP\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMediaAreaChannelPost,\n  ApiPeer, ApiStealthMode, ApiStory, ApiTypeStory,\n} from '../../api/types';\nimport type { IDimensions } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { EDITABLE_STORY_INPUT_CSS_SELECTOR, EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { isChatChannel } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectChat,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPaidMessagesStars,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { IS_SAFARI } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatMediaDuration, formatRelativePastTime } from '../../util/dates/dateFormat';\nimport download from '../../util/download';\nimport { isUserId } from '../../util/entities/ids';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { round } from '../../util/math';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\nimport { BASE_STORY_HEIGHT, BASE_STORY_WIDTH } from './helpers/dimensions';\nimport { PRIMARY_VIDEO_MIME, SECONDARY_VIDEO_MIME } from './helpers/videoFormats';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout, { getIsMobile } from '../../hooks/useAppLayout';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport { useStreaming } from '../../hooks/useStreaming';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useStoryPreloader from './hooks/useStoryPreloader';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Avatar from '../common/Avatar';\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\nimport Transition from '../ui/Transition';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\nimport StoryCaption from './StoryCaption';\nimport StoryFooter from './StoryFooter';\nimport StoryProgress from './StoryProgress';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peerId: string;\n  storyId: number;\n  dimensions: IDimensions;\n\n  isDeleteModalOpen?: boolean;\n  isPrivateStories?: boolean;\n  isArchivedStories?: boolean;\n  isSingleStory?: boolean;\n  getIsAnimating: Signal<boolean>;\n  onDelete: (story: ApiTypeStory) => void;\n  onClose: NoneToVoidFunction;\n  onReport: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peer: ApiPeer;\n  forwardSender?: ApiPeer;\n  fromPeer?: ApiPeer;\n  story?: ApiTypeStory;\n  isMuted: boolean;\n  orderedIds?: number[];\n  shouldForcePause?: boolean;\n  storyChangelogUserId?: string;\n  viewersExpirePeriod: number;\n  isChatExist?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  isCurrentUserPremium?: boolean;\n  stealthMode: ApiStealthMode;\n  withHeaderAnimation?: boolean;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n}\n\nconst VIDEO_MIN_READY_STATE = IS_SAFARI ? 4 : 3;\nconst SPACEBAR_CODE = 32;\n\nconst STEALTH_MODE_NOTIFICATION_DURATION = 4000;\n\nfunction Story({\n  peerId,\n  storyId,\n  peer,\n  forwardSender,\n  fromPeer,\n  isMuted,\n  isArchivedStories,\n  isPrivateStories,\n  story,\n  orderedIds,\n  isSingleStory,\n  dimensions,\n  shouldForcePause,\n  storyChangelogUserId,\n  viewersExpirePeriod,\n  isChatExist,\n  arePeerSettingsLoaded,\n  getIsAnimating,\n  isCurrentUserPremium,\n  stealthMode,\n  withHeaderAnimation,\n  onDelete,\n  onClose,\n  onReport,\n  paidMessagesStars,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    viewStory,\n    setStoryViewerMuted,\n    openPreviousStory,\n    openNextStory,\n    loadPeerSkippedStories,\n    openForwardMenu,\n    copyStoryLink,\n    toggleStoryInProfile,\n    openChat,\n    showNotification,\n    openStoryPrivacyEditor,\n    loadPeerSettings,\n    fetchChat,\n    loadStoryViews,\n    toggleStealthModal,\n  } = getActions();\n  const serverTime = getServerTime();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const [isComposerHasFocus, markComposerHasFocus, unmarkComposerHasFocus] = useFlag(false);\n  const [isStoryPlaybackRequested, playStory, pauseStory] = useFlag(false);\n  const [isStoryPlaying, markStoryPlaying, unmarkStoryPlaying] = useFlag(false);\n  const [isAppFocused, markAppFocused, unmarkAppFocused] = useFlag(true);\n  const [isCaptionExpanded, expandCaption, foldCaption] = useFlag(false);\n  const [isPausedBySpacebar, setIsPausedBySpacebar] = useState(false);\n  const [isPausedByLongPress, markIsPausedByLongPress, unmarkIsPausedByLongPress] = useFlag(false);\n  const [isDropdownMenuOpen, markDropdownMenuOpen, unmarkDropdownMenuOpen] = useFlag(false);\n  const videoRef = useRef<HTMLVideoElement>();\n  const {\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  } = useStoryProps(story, isCurrentUserPremium, isDropdownMenuOpen);\n\n  const isLoadedStory = story && 'content' in story;\n  const isChangelog = peerId === storyChangelogUserId;\n  const isUserStory = isUserId(peerId);\n  const isChatStory = !isUserStory;\n  const isChannelStory = isChatStory && isChatChannel(peer as ApiChat);\n  const isOut = isLoadedStory && story.isOut;\n\n  const canPinToProfile = useCurrentOrPrev(\n    isOut ? !story.isInProfile : undefined,\n    true,\n  );\n  const canUnpinFromProfile = useCurrentOrPrev(\n    isOut ? story.isInProfile : undefined,\n    true,\n  );\n  const areViewsExpired = Boolean(\n    isOut && (story.date + viewersExpirePeriod) < getServerTime(),\n  );\n\n  const forwardSenderTitle = forwardSender ? getPeerTitle(oldLang, forwardSender)\n    : (isLoadedStory && story.forwardInfo?.fromName);\n\n  const canCopyLink = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !isChangelog\n    && peer?.hasUsername,\n  );\n\n  const canShare = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !story.noForwards\n    && !isChangelog\n    && !isCaptionExpanded,\n  );\n\n  const canPlayStory = Boolean(\n    hasFullData && !shouldForcePause && isAppFocused && !isComposerHasFocus && !isCaptionExpanded\n    && !isPausedBySpacebar && !isPausedByLongPress,\n  );\n\n  const duration = isLoadedStory && story.content.video?.duration\n    ? story.content.video.duration\n    : undefined;\n\n  const shouldShowComposer = !(isOut && isUserStory) && !isChangelog && !isChannelStory && !isAccountFrozen;\n  const shouldShowFooter = isLoadedStory && !shouldShowComposer && (isOut || isChannelStory);\n  const headerAnimation = isMobile && withHeaderAnimation ? 'slideFade' : 'none';\n\n  const {\n    shouldRender: shouldRenderSkeleton,\n    transitionClassNames: skeletonTransitionClassNames,\n  } = useShowTransitionDeprecated(!hasFullData);\n\n  const {\n    transitionClassNames: mediaTransitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(fullMediaData));\n\n  const thumbRef = useCanvasBlur(thumbnail, !hasThumb);\n  const previewTransitionClassNames = useMediaTransitionDeprecated(previewBlobUrl);\n\n  const {\n    shouldRender: shouldRenderComposer,\n    transitionClassNames: composerAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(shouldShowComposer);\n\n  const {\n    shouldRender: shouldRenderCaptionBackdrop,\n    transitionClassNames: captionBackdropTransitionClassNames,\n  } = useShowTransitionDeprecated(hasText && isCaptionExpanded);\n\n  const { transitionClassNames: appearanceAnimationClassNames } = useShowTransitionDeprecated(true);\n  const {\n    shouldRender: shouldRenderCaption,\n    transitionClassNames: captionAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(hasText || hasForwardInfo);\n\n  const isStreamingSupported = useStreaming(videoRef, fullMediaData, PRIMARY_VIDEO_MIME);\n\n  useStoryPreloader(peerId, storyId);\n\n  useEffect(() => {\n    if (storyId) {\n      viewStory({ peerId, storyId });\n    }\n  }, [storyId, peerId]);\n\n  useEffect(() => {\n    loadPeerSkippedStories({ peerId });\n  }, [peerId]);\n\n  // Fetching user privacy settings for use in Composer\n  useEffect(() => {\n    const canWrite = isUserId(peerId);\n    if (!isChatExist && canWrite) {\n      fetchChat({ chatId: peerId });\n    }\n  }, [isChatExist, peerId]);\n  useEffect(() => {\n    if (isChatExist && !arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId });\n    }\n  }, [arePeerSettingsLoaded, isChatExist, peerId]);\n\n  const handlePauseStory = useLastCallback(() => {\n    if (isVideo) {\n      videoRef.current?.pause();\n    }\n\n    unmarkStoryPlaying();\n    pauseStory();\n  });\n\n  const handlePlayStory = useLastCallback(() => {\n    if (!canPlayStory) return;\n\n    playStory();\n    if (!isVideo) markStoryPlaying();\n  });\n\n  const handleLongPressStart = useLastCallback(() => {\n    markIsPausedByLongPress();\n  });\n  const handleLongPressEnd = useLastCallback(() => {\n    unmarkIsPausedByLongPress();\n  });\n\n  const handleDropdownMenuOpen = useLastCallback(() => {\n    markDropdownMenuOpen();\n    handlePauseStory();\n  });\n\n  const handleDropdownMenuClose = useLastCallback(() => {\n    unmarkDropdownMenuOpen();\n    handlePlayStory();\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleLongPressStart,\n    onEnd: handleLongPressEnd,\n  });\n\n  const isUnsupported = useUnsupportedMedia(\n    videoRef,\n    undefined,\n    !isVideo || !fullMediaData || isStreamingSupported,\n  );\n\n  const hasAllData = fullMediaData && (!altMediaHash || altMediaData);\n  // Play story after media has been downloaded\n  useEffect(() => {\n    if (hasAllData && !isUnsupported) handlePlayStory();\n  }, [hasAllData, isUnsupported]);\n\n  useBackgroundMode(unmarkAppFocused, markAppFocused);\n\n  useEffect(() => {\n    if (!hasAllData) return;\n    videoRef.current?.load();\n  }, [hasAllData]);\n\n  useEffect(() => {\n    if (!isLoadedStory || isDeletedStory || areViewsExpired) return;\n\n    if (!isOut && !isChannelStory) return;\n\n    // Refresh counters each time\n    loadStoryViews({ peerId, storyId });\n  }, [isDeletedStory, areViewsExpired, isLoadedStory, peerId, storyId, isOut, isChannelStory]);\n\n  useEffect(() => {\n    if (\n      shouldForcePause || !isAppFocused || isComposerHasFocus\n      || isCaptionExpanded || isPausedBySpacebar || isPausedByLongPress\n    ) {\n      handlePauseStory();\n    } else {\n      handlePlayStory();\n    }\n  }, [\n    handlePlayStory, isAppFocused, isCaptionExpanded, isComposerHasFocus,\n    shouldForcePause, isPausedBySpacebar, isPausedByLongPress,\n  ]);\n\n  useEffect(() => {\n    if (isComposerHasFocus || shouldForcePause || isCaptionExpanded) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (e.keyCode === SPACEBAR_CODE) {\n        e.preventDefault();\n        setIsPausedBySpacebar(!isPausedBySpacebar);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isCaptionExpanded, isComposerHasFocus, isPausedBySpacebar, shouldForcePause]);\n\n  // Reset the state of `isPausedBySpacebar` when closing the caption, losing focus by composer or disable forced pause\n  useEffectWithPrevDeps(([\n    prevIsComposerHasFocus,\n    prevIsCaptionExpanded,\n    prevShouldForcePause,\n    prevIsAppFocused,\n    prevIsPausedByLongPress,\n  ]) => {\n    if (\n      !isPausedBySpacebar || isCaptionExpanded || isComposerHasFocus\n      || shouldForcePause || !isAppFocused || isPausedByLongPress\n    ) {\n      return;\n    }\n\n    if (\n      prevIsCaptionExpanded !== isCaptionExpanded\n      || prevIsComposerHasFocus !== isComposerHasFocus\n      || prevShouldForcePause !== shouldForcePause\n      || prevIsAppFocused !== isAppFocused\n      || prevIsPausedByLongPress !== isPausedByLongPress\n    ) {\n      setIsPausedBySpacebar(false);\n    }\n  }, [isComposerHasFocus, isCaptionExpanded, shouldForcePause, isAppFocused, isPausedByLongPress, isPausedBySpacebar]);\n\n  const handleOpenChat = useLastCallback(() => {\n    onClose();\n    openChat({ id: peerId });\n  });\n\n  const handleForwardPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: forwardSender!.id });\n  });\n\n  const handleFromPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: fromPeer!.id });\n  });\n\n  const handleOpenPrevStory = useLastCallback(() => {\n    openPreviousStory();\n  });\n\n  const handleOpenNextStory = useLastCallback(() => {\n    openNextStory();\n  });\n\n  const handleVideoStoryTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= VIDEO_MIN_READY_STATE) {\n      markStoryPlaying();\n    } else {\n      unmarkStoryPlaying();\n    }\n    if (duration && round(video.currentTime, 2) >= round(duration, 2)) {\n      handleOpenNextStory();\n    }\n  });\n\n  useEffect(() => {\n    return !getIsAnimating() && !isComposerHasFocus ? captureKeyboardListeners({\n      onRight: handleOpenNextStory,\n      onLeft: handleOpenPrevStory,\n    }) : undefined;\n  }, [getIsAnimating, isComposerHasFocus]);\n\n  const handleCopyStoryLink = useLastCallback(() => {\n    copyStoryLink({ peerId, storyId });\n  });\n\n  const handlePinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: true });\n  });\n\n  const handleUnpinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: false });\n  });\n\n  const handleDeleteStoryClick = useLastCallback(() => {\n    onDelete(story!);\n  });\n\n  const handleReportStoryClick = useLastCallback(() => {\n    onReport();\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleInfoPrivacyEdit = useLastCallback(() => {\n    openStoryPrivacyEditor();\n  });\n\n  const handleInfoPrivacyClick = useLastCallback(() => {\n    const visibility = !isLoadedStory || story.isPublic\n      ? undefined\n      : story.isForContacts ? 'contacts' : (story.isForCloseFriends ? 'closeFriends' : 'nobody');\n\n    let message;\n    const myName = getPeerTitle(oldLang, peer);\n    switch (visibility) {\n      case 'nobody':\n        message = oldLang('StorySelectedContactsHint', myName);\n        break;\n      case 'contacts':\n        message = oldLang('StoryContactsHint', myName);\n        break;\n      case 'closeFriends':\n        message = oldLang('StoryCloseFriendsHint', myName);\n        break;\n      default:\n        return;\n    }\n    showNotification({ message });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    if (noSound) {\n      showNotification({\n        message: oldLang('Story.TooltipVideoHasNoSound'),\n      });\n      return;\n    }\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setStoryViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handleOpenStealthModal = useLastCallback(() => {\n    if (stealthMode.activeUntil && getServerTime() < stealthMode.activeUntil) {\n      const diff = stealthMode.activeUntil - getServerTime();\n      showNotification({\n        title: oldLang('StealthModeOn'),\n        message: oldLang('Story.ToastStealthModeActiveText', formatMediaDuration(diff)),\n        duration: STEALTH_MODE_NOTIFICATION_DURATION,\n      });\n      return;\n    }\n\n    toggleStealthModal({ isOpen: true });\n  });\n\n  const handleDownload = useLastCallback(() => {\n    if (!downloadMediaData) return;\n    download(downloadMediaData, `story-${peerId}-${storyId}.${isVideo ? 'mp4' : 'jpg'}`);\n  });\n\n  useEffect(() => {\n    if (!isDeletedStory) return;\n\n    showNotification({\n      message: oldLang('StoryNotFound'),\n    });\n  }, [oldLang, isDeletedStory]);\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => {\n      return (\n        <Button\n          round\n          ripple={!isMobile}\n          size=\"tiny\"\n          color=\"translucent-white\"\n          onClick={onTrigger}\n          className={buildClassName(styles.button, isOpen && 'active')}\n          ariaLabel={oldLang('AccDescrOpenMenu2')}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      );\n    };\n  }, [isMobile, oldLang]);\n\n  function renderStoriesTabs() {\n    return (\n      <div className={styles.storyIndicators}>\n        {(isSingleStory ? [storyId] : orderedIds ?? []).map((id) => (\n          <StoryProgress\n            key={`progress-${id}`}\n            isActive={id === story?.id}\n            isVideo={isVideo}\n            isViewed={Boolean(story?.id && ((isPrivateStories || isArchivedStories) ? id > story?.id : id < story?.id))}\n            isPaused={!isStoryPlaying}\n            duration={duration}\n            onImageComplete={handleOpenNextStory}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderStoryPrivacyButton() {\n    if (!isUserStory) return undefined;\n\n    let privacyIcon: IconName = 'channel-filled';\n    const gradient: Record<string, [string, string]> = {\n      'channel-filled': ['#50ABFF', '#007AFF'],\n      'user-filled': ['#C36EFF', '#8B60FA'],\n      'favorite-filled': ['#88D93A', '#30B73B'],\n      'group-filled': ['#FFB743', '#F69A36'],\n    };\n\n    if (isOut) {\n      const { visibility } = (story && 'visibility' in story && story.visibility) || {};\n\n      switch (visibility) {\n        case 'everybody':\n          privacyIcon = 'channel-filled';\n          break;\n        case 'contacts':\n          privacyIcon = 'user-filled';\n          break;\n        case 'closeFriends':\n          privacyIcon = 'favorite-filled';\n          break;\n        case 'nobody':\n          privacyIcon = 'group-filled';\n      }\n    } else {\n      if (!story || !('content' in story) || story.isPublic) {\n        return undefined;\n      }\n\n      privacyIcon = story.isForCloseFriends\n        ? 'favorite-filled'\n        : (story.isForContacts ? 'user-filled' : 'group-filled');\n    }\n\n    return (\n      <div\n        className={buildClassName(styles.visibilityButton, isOut && styles.visibilityButtonSelf)}\n        onClick={isOut ? handleInfoPrivacyEdit : handleInfoPrivacyClick}\n        style={`--color-from: ${gradient[privacyIcon][0]}; --color-to: ${gradient[privacyIcon][1]}`}\n      >\n        <Icon name={privacyIcon} />\n        {isOut && <Icon name=\"next\" />}\n      </div>\n    );\n  }\n\n  function renderSenderInfo() {\n    return (\n      <div className={styles.senderInfo}>\n        <Avatar\n          peer={peer}\n          size=\"tiny\"\n          onClick={handleOpenChat}\n        />\n        <div className={styles.senderMeta}>\n          <span onClick={handleOpenChat} className={styles.senderName}>\n            {renderText(getPeerTitle(oldLang, peer) || '')}\n          </span>\n          <div className={styles.storyMetaRow}>\n            {forwardSenderTitle && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.forwardHeader, forwardSender && styles.clickable,\n                )}\n                onClick={forwardSender ? handleForwardPeerClick : undefined}\n              >\n                <Icon name=\"loop\" />\n                <span className={styles.headerTitle}>\n                  {renderText(forwardSenderTitle)}\n                </span>\n              </span>\n            )}\n            {fromPeer && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.fromPeer,\n                )}\n                onClick={handleFromPeerClick}\n              >\n                <Avatar peer={fromPeer} size=\"micro\" />\n                <span className={styles.headerTitle}>\n                  {renderText(getPeerTitle(oldLang, fromPeer) || '')}\n                </span>\n              </span>\n            )}\n            {story && 'date' in story && (\n              <span className={styles.storyMeta}>{formatRelativePastTime(oldLang, serverTime, story.date)}</span>\n            )}\n            {isLoadedStory && story.isEdited && (\n              <span className={styles.storyMeta}>{oldLang('Story.HeaderEdited')}</span>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSender() {\n    return (\n      <div className={styles.sender}>\n        <Transition activeKey={Number(peerId)} name={headerAnimation} className={styles.senderInfoTransition}>\n          {renderSenderInfo()}\n        </Transition>\n\n        <div className={styles.actions}>\n          {renderStoryPrivacyButton()}\n          {isVideo && (\n            <Button\n              className={styles.button}\n              round\n              ripple={!isMobile}\n              size=\"tiny\"\n              color=\"translucent-white\"\n              disabled={!hasFullData}\n              onClick={handleVolumeMuted}\n              ariaLabel={oldLang('Volume')}\n            >\n              <Icon name={(isMuted || noSound) ? 'speaker-muted-story' : 'speaker-story'} />\n            </Button>\n          )}\n          <DropdownMenu\n            className={styles.buttonMenu}\n            trigger={MenuButton}\n            positionX=\"right\"\n            onOpen={handleDropdownMenuOpen}\n            onClose={handleDropdownMenuClose}\n          >\n            {canCopyLink && <MenuItem icon=\"copy\" onClick={handleCopyStoryLink}>{oldLang('CopyLink')}</MenuItem>}\n            {canPinToProfile && (\n              <MenuItem icon=\"save-story\" onClick={handlePinClick}>\n                {oldLang(isUserStory ? 'StorySave' : 'SaveToPosts')}\n              </MenuItem>\n            )}\n            {canUnpinFromProfile && (\n              <MenuItem icon=\"delete\" onClick={handleUnpinClick}>\n                {oldLang(isUserStory ? 'ArchiveStory' : 'RemoveFromPosts')}\n              </MenuItem>\n            )}\n            {canDownload && (\n              <MenuItem icon=\"download\" disabled={!downloadMediaData} onClick={handleDownload}>\n                {oldLang('lng_media_download')}\n              </MenuItem>\n            )}\n            {!isOut && isUserStory && (\n              <MenuItem icon=\"eye-crossed-outline\" onClick={handleOpenStealthModal}>\n                {oldLang('StealthMode')}\n              </MenuItem>\n            )}\n            {!isOut && <MenuItem icon=\"flag\" onClick={handleReportStoryClick}>{oldLang('lng_report_story')}</MenuItem>}\n            {isOut && (\n              <MenuItem\n                icon=\"delete\"\n                destructive\n                onClick={handleDeleteStoryClick}\n              >\n                {oldLang('Delete')}\n              </MenuItem>\n            )}\n          </DropdownMenu>\n          <Button\n            className={buildClassName(styles.button, styles.closeButton)}\n            round\n            size=\"tiny\"\n            color=\"translucent-white\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const inputPlaceholder = paidMessagesStars\n    ? lang('ComposerPlaceholderPaidReply', {\n      amount: formatStarsAsIcon(lang, paidMessagesStars, { asFont: true, className: 'placeholder-star-icon' }),\n    }, {\n      withNodes: true,\n    })\n    : oldLang(isChatStory ? 'ReplyToGroupStory' : 'ReplyPrivately');\n\n  return (\n    <div\n      className={buildClassName(styles.slideInner, 'component-theme-dark')}\n      onMouseDown={handleLongPressMouseDown}\n      onMouseUp={handleLongPressMouseUp}\n      onMouseLeave={handleLongPressMouseLeave}\n      onTouchStart={handleLongPressTouchStart}\n      onTouchEnd={handleLongPressTouchEnd}\n    >\n      <div className={buildClassName(styles.storyHeader, appearanceAnimationClassNames)}>\n        {renderStoriesTabs()}\n        {renderSender()}\n      </div>\n\n      <div\n        className={styles.mediaWrapper}\n        style={`width: ${dimensions.width}px; height: ${dimensions.height}px`}\n      >\n        <canvas ref={thumbRef} className={styles.thumbnail} />\n        {previewBlobUrl && (\n          <img\n            key={`preview-${storyId}`}\n            src={previewBlobUrl}\n            draggable={false}\n            alt=\"\"\n            className={buildClassName(styles.media, styles.mediaPreview, previewTransitionClassNames)}\n          />\n        )}\n        {shouldRenderSkeleton && (\n          <Skeleton className={buildClassName(skeletonTransitionClassNames, styles.fullSize)} />\n        )}\n        {!isVideo && fullMediaData && (\n          <img\n            src={fullMediaData}\n            alt=\"\"\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            draggable={false}\n          />\n        )}\n        {isVideo && fullMediaData && (\n          <OptimizedVideo\n            ref={videoRef}\n            key={`video-${storyId}`}\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            canPlay={isStoryPlaybackRequested}\n            muted={isMuted}\n            width={BASE_STORY_WIDTH}\n            height={BASE_STORY_HEIGHT}\n            draggable={false}\n            playsInline\n            disablePictureInPicture\n            isPriority\n            onPause={unmarkStoryPlaying}\n            onWaiting={unmarkStoryPlaying}\n            disableRemotePlayback\n            onTimeUpdate={handleVideoStoryTimeUpdate}\n          >\n            <source src={fullMediaData} type={PRIMARY_VIDEO_MIME} width=\"720\" />\n            {altMediaData && <source src={altMediaData} type={SECONDARY_VIDEO_MIME} width=\"480\" />}\n          </OptimizedVideo>\n        )}\n\n        {!isPausedByLongPress && !isComposerHasFocus && (\n          <>\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.prev)}\n              onClick={handleOpenPrevStory}\n              aria-label={oldLang('Previous')}\n            />\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.next)}\n              onClick={handleOpenNextStory}\n              aria-label={oldLang('Next')}\n            />\n          </>\n        )}\n        {isLoadedStory && fullMediaData && (\n          <MediaAreaOverlay\n            key={`area-overlay-${storyId}-${peerId}`}\n            story={story}\n            isActive\n            isStoryPlaying={isDropdownMenuOpen}\n          />\n        )}\n        {!isMobile && (\n          <div className={styles.content}>\n            <div className={styles.contentInner}>\n              <Avatar\n                peer={peer}\n                withStory\n                storyViewerMode=\"disabled\"\n              />\n              <div className={styles.name}>{renderText(getPeerTitle(oldLang, peer) || '')}</div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldShowFooter && (\n        <StoryFooter story={story} className={appearanceAnimationClassNames} />\n      )}\n      {shouldRenderCaptionBackdrop && (\n        <div\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.captionBackdrop, captionBackdropTransitionClassNames)}\n          onClick={() => foldCaption()}\n          aria-label={oldLang('Close')}\n        />\n      )}\n      {hasText && <div className={buildClassName(styles.captionGradient, captionAppearanceAnimationClassNames)} />}\n      {shouldRenderCaption && (\n        <StoryCaption\n          key={`caption-${storyId}-${peerId}`}\n          story={story as ApiStory}\n          isExpanded={isCaptionExpanded}\n          onExpand={expandCaption}\n          onFold={foldCaption}\n          className={captionAppearanceAnimationClassNames}\n        />\n      )}\n      {shouldRenderComposer && (\n        <Composer\n          type=\"story\"\n          chatId={peerId}\n          threadId={MAIN_THREAD_ID}\n          storyId={storyId}\n          isReady={!isOut}\n          messageListType=\"thread\"\n          isMobile={getIsMobile()}\n          editableInputCssSelector={EDITABLE_STORY_INPUT_CSS_SELECTOR}\n          editableInputId={EDITABLE_STORY_INPUT_ID}\n          inputId=\"story-input-text\"\n          className={buildClassName(styles.composer, composerAppearanceAnimationClassNames)}\n          inputPlaceholder={inputPlaceholder}\n          onForward={canShare ? handleForwardClick : undefined}\n          onFocus={markComposerHasFocus}\n          onBlur={unmarkComposerHasFocus}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, {\n  peerId,\n  storyId,\n  isDeleteModalOpen,\n}): StateProps => {\n  const { appConfig } = global;\n  const user = selectUser(global, peerId);\n  const chat = selectChat(global, peerId);\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  const tabState = selectTabState(global);\n  const {\n    storyViewer: {\n      isMuted,\n      viewModal,\n      isPrivacyModalOpen,\n      isStealthModalOpen,\n      storyList,\n    },\n    forwardMessages: { storyId: forwardedStoryId },\n    premiumModal,\n    safeLinkModalUrl,\n    mapModal,\n    reportModal,\n    giftInfoModal,\n    isPaymentMessageConfirmDialogOpen,\n  } = tabState;\n  const { isOpen: isPremiumModalOpen } = premiumModal || {};\n  const story = selectPeerStory(global, peerId, storyId);\n  const isLoadedStory = story && 'content' in story;\n  const shouldForcePause = Boolean(\n    isPaymentMessageConfirmDialogOpen\n    || viewModal || forwardedStoryId || tabState.reactionPicker?.storyId || reportModal || isPrivacyModalOpen\n    || isPremiumModalOpen || isDeleteModalOpen || safeLinkModalUrl || isStealthModalOpen || mapModal || giftInfoModal,\n  );\n\n  const forwardInfo = isLoadedStory ? story.forwardInfo : undefined;\n  const mediaAreas = isLoadedStory ? story.mediaAreas : undefined;\n  const forwardSenderId = forwardInfo?.fromPeerId\n    || mediaAreas?.find((area): area is ApiMediaAreaChannelPost => area.type === 'channelPost')?.channelId;\n  const forwardSender = forwardSenderId ? selectPeer(global, forwardSenderId) : undefined;\n  const withHeaderAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  const fromPeer = isLoadedStory && story.fromId ? selectPeer(global, story.fromId) : undefined;\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, peerId);\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    peer: (user || chat)!,\n    forwardSender,\n    fromPeer,\n    story,\n    orderedIds: storyList?.storyIdsByPeerId[peerId],\n    isMuted,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    shouldForcePause,\n    storyChangelogUserId: appConfig!.storyChangelogUserId,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    isChatExist: Boolean(chat),\n    arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n    stealthMode: global.stories.stealthMode,\n    withHeaderAnimation,\n    paidMessagesStars,\n    isAccountFrozen,\n  };\n})(Story));\n","import { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPeer, ApiPeerStories, ApiTypeStory,\n} from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectTabState } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peer?: ApiPeer;\n  peerStories?: ApiPeerStories;\n}\n\ninterface StateProps {\n  lastViewedId?: number;\n  origin?: StoryViewerOrigin;\n  storyIdsForViewer?: number[];\n}\n\nfunction StoryPreview({\n  peer, peerStories, lastViewedId, storyIdsForViewer, origin,\n}: OwnProps & StateProps) {\n  const { openStoryViewer, loadPeerSkippedStories } = getActions();\n  const lang = useOldLang();\n\n  const story = useMemo<ApiTypeStory | undefined>(() => {\n    if (!peerStories) {\n      return undefined;\n    }\n\n    const {\n      orderedIds, lastReadId, byId,\n    } = peerStories;\n    const hasUnreadStories = orderedIds[orderedIds.length - 1] !== lastReadId;\n    const previewIndexId = lastViewedId && storyIdsForViewer?.includes(lastViewedId)\n      ? lastViewedId ?? (hasUnreadStories ? (lastReadId ?? -1) : -1)\n      : -1;\n    const resultId = byId[previewIndexId]?.id || storyIdsForViewer?.[0] || orderedIds[0];\n\n    return byId[resultId];\n  }, [lastViewedId, peerStories, storyIdsForViewer]);\n\n  const isLoaded = story && 'content' in story;\n\n  useEffect(() => {\n    if (story && !isLoaded) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [story, isLoaded]);\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  if (!peer || !story || 'isDeleted' in story) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={styles.slideInner}\n      onClick={() => { openStoryViewer({ peerId: story.peerId, storyId: story.id, origin }); }}\n    >\n      {thumbUrl && (\n        <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n      )}\n      {isLoaded && <MediaAreaOverlay story={story} />}\n\n      <div className={styles.content}>\n        <div className={styles.contentInner}>\n          <Avatar\n            peer={peer}\n            withStory\n            storyViewerMode=\"disabled\"\n          />\n          <div className={styles.name}>{renderText(getPeerTitle(lang, peer) || '')}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { peer }): StateProps => {\n  const {\n    storyViewer: {\n      lastViewedByPeerId: lastViewedByPeerIds,\n      origin,\n      storyList,\n    },\n  } = selectTabState(global);\n\n  return {\n    lastViewedId: peer?.id ? lastViewedByPeerIds?.[peer.id] : undefined,\n    origin,\n    storyIdsForViewer: peer?.id ? storyList?.storyIdsByPeerId[peer.id] : undefined,\n  };\n})(StoryPreview));\n","import type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiPeerStories, ApiTypeStory } from '../../api/types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getStoryKey } from '../../global/helpers';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeer,\n  selectTabState,\n} from '../../global/selectors';\nimport { IS_IOS } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport focusEditableElement from '../../util/focusEditableElement';\nimport { clamp } from '../../util/math';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { calculateOffsetX } from './helpers/dimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useSlideSizes from './hooks/useSlideSizes';\n\nimport Story from './Story';\nimport StoryPreview from './StoryPreview';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  isDeleteModalOpen?: boolean;\n  onDelete: (story: ApiTypeStory) => void;\n  onReport: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peerIds: string[];\n  currentPeerId?: string;\n  currentStoryId?: number;\n  byPeerId?: Record<string, ApiPeerStories>;\n  isSinglePeer?: boolean;\n  isSingleStory?: boolean;\n  isPrivate?: boolean;\n  isArchive?: boolean;\n}\n\nconst ACTIVE_SLIDE_VERTICAL_CORRECTION_REM = 1.75;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SCROLL_RELEASE_DELAY = 1500;\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nfunction StorySlides({\n  peerIds,\n  currentPeerId,\n  currentStoryId,\n  isOpen,\n  isSinglePeer,\n  isSingleStory,\n  isPrivate,\n  isArchive,\n  byPeerId,\n  isDeleteModalOpen,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const { stopActiveReaction } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n  const [renderingPeerId, setRenderingPeerId] = useState(currentPeerId);\n  const [renderingStoryId, setRenderingStoryId] = useState(currentStoryId);\n  const prevPeerId = usePreviousDeprecated(currentPeerId);\n  const renderingIsArchive = useCurrentOrPrev(isArchive, true);\n  const renderingIsPrivate = useCurrentOrPrev(isPrivate, true);\n  const renderingIsSinglePeer = useCurrentOrPrev(isSinglePeer, true);\n  const renderingIsSingleStory = useCurrentOrPrev(isSingleStory, true);\n  const slideSizes = useSlideSizes();\n  const { height: windowHeight, width: windowWidth } = useWindowSize();\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const { isMobile } = useAppLayout();\n\n  const rendersRef = useRef<Record<string, { current: HTMLDivElement }>>({});\n  const [getIsAnimating, setIsAnimating] = useSignal(false);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  function setRef(ref: HTMLDivElement | undefined, peerId: string) {\n    if (!ref) {\n      return;\n    }\n    if (!rendersRef.current[peerId]) {\n      rendersRef.current[peerId] = { current: ref };\n    } else {\n      rendersRef.current[peerId].current = ref;\n    }\n  }\n\n  const renderingPeerIds = useMemo(() => {\n    if (renderingPeerId && (renderingIsSinglePeer || renderingIsSingleStory)) {\n      return [renderingPeerId];\n    }\n\n    const index = renderingPeerId ? peerIds.indexOf(renderingPeerId) : -1;\n    if (!renderingPeerId || index === -1) {\n      return [];\n    }\n\n    const start = Math.max(index - 4, 0);\n    const end = Math.min(index + 5, peerIds.length);\n\n    return peerIds.slice(start, end);\n  }, [renderingIsSingleStory, renderingIsSinglePeer, renderingPeerId, peerIds]);\n\n  const renderingPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !renderingPeerId) {\n      return -1;\n    }\n\n    return renderingPeerIds.indexOf(renderingPeerId);\n  }, [renderingPeerId, renderingPeerIds]);\n\n  const currentPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !currentPeerId) {\n      return -1;\n    }\n    return renderingPeerIds.indexOf(currentPeerId);\n  }, [currentPeerId, renderingPeerIds]);\n\n  useEffect(() => {\n    if (!isMobile) return;\n\n    // If animation disabled, set rendering peer id to current peer\n    setRenderingPeerId(currentPeerId);\n  }, [currentPeerId, isMobile]);\n\n  // Handling the flipping of stories from a current user\n  useEffect(() => {\n    if (renderingPeerId === currentPeerId && currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n  }, [currentPeerId, currentStoryId, renderingPeerId, renderingStoryId]);\n\n  useEffect(() => {\n    if (isMobile) return undefined;\n    if (prevPeerId && prevPeerId !== currentPeerId) {\n      setIsAnimating(true);\n    }\n\n    return () => {\n      setIsAnimating(false);\n    };\n  }, [prevPeerId, currentPeerId, setIsAnimating, isMobile]);\n\n  useEffect(() => {\n    return () => {\n      if (!currentStoryId || !currentPeerId) return;\n      stopActiveReaction({\n        containerId: getStoryKey(currentPeerId, currentStoryId),\n      });\n    };\n  }, [currentStoryId, currentPeerId]);\n\n  const slideAmount = currentPeerPosition - renderingPeerPosition;\n  const isBackward = renderingPeerPosition > currentPeerPosition;\n\n  const calculateTransformX = useLastCallback(() => {\n    return peerIds.reduce<Record<string, number>>((transformX, peerId, index) => {\n      if (peerId === renderingPeerId) {\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: isBackward,\n        });\n      } else {\n        let isMoveThroughActiveSlide = false;\n        if (!isBackward && index > 0 && peerIds[index - 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n        if (isBackward && index < peerIds.length - 1 && peerIds[index + 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: currentPeerId === peerId && !isBackward,\n          isMoveThroughActiveSlide,\n        });\n      }\n\n      return transformX;\n    }, {});\n  });\n\n  useEffect(() => {\n    if (!containerRef.current || !isOpen) {\n      return undefined;\n    }\n\n    let offsetY = 0;\n\n    const getCurrentStoryRef = () => {\n      return renderingPeerId ? rendersRef.current[renderingPeerId]?.current : undefined;\n    };\n\n    const onRelease = (event: MouseEvent | TouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      const current = getCurrentStoryRef();\n      if (!current) return;\n\n      if (offsetY < -SWIPE_Y_THRESHOLD) {\n        const composer = document.getElementById(EDITABLE_STORY_INPUT_ID);\n        if (composer) {\n          requestMutation(() => {\n            focusEditableElement(composer);\n          });\n        }\n        return;\n      }\n\n      if (offsetY > SWIPE_Y_THRESHOLD) {\n        onClose();\n        if (event.type === 'wheel') {\n          disableScrolling();\n          setTimeout(enableScrolling, SCROLL_RELEASE_DELAY);\n        }\n      } else {\n        requestMutation(() => {\n          current.style.setProperty('--slide-translate-y', '0px');\n        });\n      }\n    };\n\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      withWheelDrag: true,\n      excludedClosestSelector: '.Composer',\n      onDrag: (event, captureEvent, {\n        dragOffsetX, dragOffsetY,\n      }) => {\n        if (isReleasedRef.current) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (event.type === 'mousemove') return;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const current = getCurrentStoryRef();\n        if (!current) return;\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(absOffsetY) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          offsetY = clamp(dragOffsetY, -limit, limit);\n          if (offsetY > 0) {\n            requestMutation(() => {\n              current.style.setProperty('--slide-translate-y', `${offsetY * (isMobile ? 1 : -1)}px`);\n            });\n          }\n          if (event.type === 'wheel' && Math.abs(offsetY) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onRelease,\n    });\n  }, [isOpen, onClose, windowWidth, windowHeight, isMobile, renderingPeerId]);\n\n  useLayoutEffect(() => {\n    if (isMobile) return;\n    const transformX = calculateTransformX();\n\n    Object.entries(rendersRef.current).forEach(([peerId, { current }]) => {\n      if (!current) return;\n\n      if (!getIsAnimating()) {\n        current.classList.remove(styles.slideAnimation, styles.slideAnimationToActive, styles.slideAnimationFromActive);\n        current.style.setProperty('--slide-translate-x', '0px');\n        current.style.setProperty('--slide-translate-y', '0px');\n        current.style.setProperty('--slide-translate-scale', '1');\n        current.style.setProperty('--slide-content-scale', String(slideSizes.toActiveScale));\n\n        return;\n      }\n\n      const getScale = () => {\n        if (currentPeerId === peerId) {\n          return String(slideSizes.toActiveScale);\n        }\n        if (peerId === renderingPeerId) {\n          return String(slideSizes.fromActiveScale);\n        }\n        return '1';\n      };\n\n      let offsetY = 0;\n      if (peerId === renderingPeerId) {\n        offsetY = -ACTIVE_SLIDE_VERTICAL_CORRECTION_REM * slideSizes.fromActiveScale;\n        current.classList.add(styles.slideAnimationFromActive);\n      }\n      if (peerId === currentPeerId) {\n        offsetY = ACTIVE_SLIDE_VERTICAL_CORRECTION_REM;\n        current.classList.add(styles.slideAnimationToActive);\n      }\n\n      current.classList.add(styles.slideAnimation);\n      current.style.setProperty('--slide-translate-x', `${transformX[peerId] || 0}px`);\n      current.style.setProperty('--slide-translate-y', `${offsetY}rem`);\n      current.style.setProperty('--slide-translate-scale', getScale());\n    });\n  }, [currentPeerId, getIsAnimating, renderingPeerId, slideSizes, isMobile]);\n\n  const handleTransitionEnd = useLastCallback((event: React.TransitionEvent<HTMLDivElement>) => {\n    // It is `target` that is needed here, not `currentTarget`\n    const target = event.target as HTMLDivElement | null;\n\n    if (!target || !target.classList.contains(styles.activeSlide)) return;\n\n    if (renderingPeerId !== currentPeerId) {\n      setRenderingPeerId(currentPeerId);\n      setRenderingStoryId(currentStoryId);\n    } else if (currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n    setIsAnimating(false);\n  });\n\n  if (isMobile) {\n    return (\n      <div className={styles.wrapper} ref={containerRef}>\n        <div\n          className={styles.mobileSlide}\n          ref={(ref) => setRef(ref, renderingPeerId!)}\n        >\n          <Story\n            peerId={renderingPeerId!}\n            storyId={renderingStoryId!}\n            onDelete={onDelete}\n            dimensions={slideSizes.activeSlide}\n            isPrivateStories={renderingIsPrivate}\n            isArchivedStories={renderingIsArchive}\n            isDeleteModalOpen={isDeleteModalOpen}\n            isSingleStory={isSingleStory}\n            getIsAnimating={getIsAnimating}\n            onClose={onClose}\n            onReport={onReport}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  function renderStoryPreview(peerId: string, index: number, position: number) {\n    const style = buildStyle(\n      `width: ${slideSizes.slide.width}px`,\n      `height: ${slideSizes.slide.height}px`,\n    );\n    const className = buildClassName(\n      styles.slide,\n      styles.slidePreview,\n      `slide-${position}`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={className}\n        style={style}\n      >\n        <StoryPreview\n          peer={selectPeer(getGlobal(), peerId)}\n          peerStories={byPeerId?.[peerId]}\n        />\n      </div>\n    );\n  }\n\n  function renderStory(peerId: string) {\n    const style = isMobile ? undefined : buildStyle(\n      `width: ${slideSizes.activeSlide.width}px`,\n      `--slide-media-height: ${slideSizes.activeSlide.height}px`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={buildClassName(styles.slide, styles.activeSlide)}\n        style={style}\n      >\n        <Story\n          peerId={peerId}\n          storyId={renderingStoryId!}\n          onDelete={onDelete}\n          dimensions={slideSizes.activeSlide}\n          isPrivateStories={renderingIsPrivate}\n          isArchivedStories={renderingIsArchive}\n          isDeleteModalOpen={isDeleteModalOpen}\n          isSingleStory={isSingleStory}\n          getIsAnimating={getIsAnimating}\n          onClose={onClose}\n          onReport={onReport}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.wrapper}\n      ref={containerRef}\n      style={`--story-viewer-scale: ${slideSizes.scale}`}\n      onTransitionEnd={handleTransitionEnd}\n    >\n      <div className={styles.fullSize} onClick={onClose} />\n      {renderingPeerIds.length > 1 && (\n        <div className={styles.backdropNonInteractive} style={`height: ${slideSizes.slide.height}px`} />\n      )}\n      {renderingPeerIds.map((peerId, index) => {\n        if (peerId === renderingPeerId) {\n          return renderStory(renderingPeerId);\n        }\n\n        return renderStoryPreview(peerId, index, index - renderingPeerPosition);\n      })}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      peerId: currentPeerId, storyId: currentStoryId, isSinglePeer, isSingleStory, isPrivate, isArchive, storyList,\n    },\n  } = selectTabState(global);\n  const { byPeerId, orderedPeerIds: { active } } = global.stories;\n\n  return {\n    byPeerId,\n    peerIds: storyList?.peerIds ?? active,\n    currentPeerId,\n    currentStoryId,\n    isSinglePeer,\n    isSingleStory,\n    isPrivate,\n    isArchive,\n  };\n}, (global) => selectIsStoryViewerOpen(global))(StorySlides));\n","import { useState } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  });\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"views-list\":\"gpDY8bos\",\"viewsList\":\"gpDY8bos\",\"views-list-loading\":\"vuRAfQ5v\",\"viewsListLoading\":\"vuRAfQ5v\",\"info\":\"AOSUIChK\",\"centeredInfo\":\"oGLhkkS7\",\"view-reaction\":\"MLaabS6n\",\"viewReaction\":\"MLaabS6n\",\"header\":\"d3N2bktu\",\"content\":\"QmRA3HZK\",\"top-button\":\"Dkv8GAxf\",\"topButton\":\"Dkv8GAxf\",\"contact-filter\":\"YpB_9VxE\",\"contactFilter\":\"YpB_9VxE\",\"selected\":\"DoUlpdZJ\",\"sort\":\"axDpgq9G\",\"sort-button\":\"Bm5VA66f\",\"sortButton\":\"Bm5VA66f\",\"icon-sort\":\"YVQiH93R\",\"iconSort\":\"YVQiH93R\",\"icon-down\":\"NXP9aMD0\",\"iconDown\":\"NXP9aMD0\",\"search\":\"QQQqBLK6\",\"bottom-info\":\"_CSv6suH\",\"bottomInfo\":\"_CSv6suH\",\"scrolled\":\"RYQ0liYe\",\"footer\":\"dUK7rP37\",\"closeButton\":\"abPzLiCH\",\"opacity-fade-in\":\"cX8oY3zb\",\"opacityFadeIn\":\"cX8oY3zb\",\"fadeIn\":\"Sx_aeh1o\",\"blocked\":\"L82sciL8\",\"check\":\"UqGBKwjg\",\"menuBubble\":\"dRqemuTA\",\"with-colored-status\":\"GQ96fta9\",\"withColoredStatus\":\"GQ96fta9\"};","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiPeer, ApiTypeStoryView, ApiUser,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectPeer } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\n\nimport styles from './StoryViewModal.module.scss';\n\ntype OwnProps = {\n  storyView: ApiTypeStoryView;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\nconst BULLET = '\\u2022';\n\nconst StoryView = ({\n  storyView,\n  peer,\n  availableReactions,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    closeStoryViewer,\n    unblockUser,\n    blockUser,\n    deleteContact,\n    updateStoryView,\n    focusMessage,\n    openStoryViewer,\n    closeStoryViewModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    const { type } = storyView;\n\n    if (type === 'repost') {\n      closeStoryViewModal();\n      openStoryViewer({\n        peerId: storyView.peerId,\n        storyId: storyView.storyId,\n      });\n      return;\n    }\n\n    closeStoryViewer();\n\n    setTimeout(() => {\n      if (type === 'user') {\n        openChat({ id: storyView.peerId });\n      } else if (type === 'forward') {\n        focusMessage({ chatId: storyView.peerId, messageId: storyView.messageId });\n      }\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const contextActions = useMemo(() => {\n    if (!isUserId(storyView.peerId)) return undefined;\n    const { peerId, areStoriesBlocked, isUserBlocked } = storyView;\n    const user = peer as ApiUser;\n    const { isContact } = user || {};\n    const fullName = getUserFullName(user);\n\n    const actions: MenuItemContextAction[] = [];\n\n    if (!isUserBlocked) {\n      if (!areStoriesBlocked) {\n        actions.push({\n          handler: () => {\n            blockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: true });\n          },\n          title: lang('StoryHideFrom', fullName),\n          icon: 'hand-stop',\n        });\n      } else {\n        actions.push({\n          handler: () => {\n            unblockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: false });\n          },\n          title: lang('StoryShowBackTo', fullName),\n          icon: 'play-story',\n        });\n      }\n    }\n\n    if (isContact) {\n      actions.push({\n        handler: () => {\n          deleteContact({ userId: peerId });\n        },\n        title: lang('DeleteContact'),\n        icon: 'delete-user',\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        handler: () => {\n          if (isUserBlocked) {\n            unblockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: false });\n          } else {\n            blockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: true });\n          }\n        },\n        title: lang(isUserBlocked ? 'Unblock' : 'BlockUser'),\n        icon: isUserBlocked ? 'user' : 'delete-user',\n        destructive: !isUserBlocked,\n      });\n    }\n\n    return actions;\n  }, [lang, storyView, peer]);\n\n  const statusIcon: IconName = storyView.type === 'user' ? 'message-read'\n    : storyView.type === 'forward' ? 'forward' : 'loop';\n  const shouldColorStatus = storyView.type === 'forward' || storyView.type === 'repost';\n\n  const status = useMemo(() => {\n    const isModified = storyView.type === 'repost' && storyView.story.forwardInfo?.isModified;\n    const parts = [formatDateAtTime(lang, storyView.date * 1000)];\n    if (isModified) {\n      parts.push(lang('lng_edited'));\n    }\n\n    return parts.join(` ${BULLET} `);\n  }, [lang, storyView]);\n\n  return (\n    <ListItem\n      key={storyView.peerId}\n      className={buildClassName(\n        'chat-item-clickable small-icon',\n        styles.opacityFadeIn,\n        (storyView.isUserBlocked || storyView.areStoriesBlocked) && styles.blocked,\n      )}\n      onClick={handleClick}\n      rightElement={storyView.type === 'user' && storyView.reaction ? (\n        <ReactionStaticEmoji\n          reaction={storyView.reaction}\n          className={styles.viewReaction}\n          size={DEFAULT_REACTION_SIZE}\n          availableReactions={availableReactions}\n          withIconHeart\n        />\n      ) : undefined}\n      contextActions={contextActions}\n      withPortalForMenu\n      menuBubbleClassName={styles.menuBubble}\n    >\n      {isUserId(storyView.peerId) ? (\n        <PrivateChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          userId={storyView.peerId}\n          noStatusOrTyping\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n          forceShowSelf\n        />\n      ) : (\n        <GroupChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          chatId={storyView.peerId}\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { storyView }) => {\n  const peer = selectPeer(global, storyView.peerId);\n\n  return {\n    peer,\n    availableReactions: global.reactions.availableReactions,\n  };\n})(StoryView));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStoryView } from '../../api/types';\n\nimport {\n  STORY_MIN_REACTIONS_SORT,\n  STORY_VIEWS_MIN_CONTACTS_FILTER,\n  STORY_VIEWS_MIN_SEARCH,\n} from '../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport PlaceholderChatInfo from '../ui/placeholder/PlaceholderChatInfo';\nimport SearchInput from '../ui/SearchInput';\nimport StoryView from './StoryView';\n\nimport styles from './StoryViewModal.module.scss';\n\ninterface StateProps {\n  story?: ApiStory;\n  isLoading?: boolean;\n  views?: ApiTypeStoryView[];\n  nextOffset?: string;\n  viewersExpirePeriod: number;\n  isCurrentUserPremium?: boolean;\n}\n\nconst REFETCH_DEBOUNCE = 250;\n\nfunction StoryViewModal({\n  story,\n  viewersExpirePeriod,\n  views,\n  nextOffset,\n  isLoading,\n  isCurrentUserPremium,\n}: StateProps) {\n  const {\n    loadStoryViewList, closeStoryViewModal, clearStoryViews,\n  } = getActions();\n\n  const [areJustContacts, markJustContacts, unmarkJustContacts] = useFlag(false);\n  const [areReactionsFirst, markReactionsFirst, unmarkReactionsFirst] = useFlag(true);\n  const [query, setQuery] = useState('');\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(story);\n  const isExpired = Boolean(story?.date) && (story.date + viewersExpirePeriod) < getServerTime();\n  const { viewsCount = 0, reactionsCount = 0 } = story?.views || {};\n\n  const shouldShowJustContacts = story?.isPublic && viewsCount > STORY_VIEWS_MIN_CONTACTS_FILTER;\n  const shouldShowSortByReactions = reactionsCount > STORY_MIN_REACTIONS_SORT;\n  const shouldShowSearch = viewsCount > STORY_VIEWS_MIN_SEARCH;\n  const hasHeader = shouldShowJustContacts || shouldShowSortByReactions || shouldShowSearch;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setQuery('');\n      unmarkJustContacts();\n      markReactionsFirst();\n    }\n  }, [isOpen]);\n\n  const refetchViews = useDebouncedCallback(() => {\n    clearStoryViews({ isLoading: true });\n  }, [], REFETCH_DEBOUNCE, true);\n\n  useEffect(() => {\n    refetchViews();\n  }, [areJustContacts, areReactionsFirst, query, refetchViews]);\n\n  const sortedViews = useMemo(() => {\n    return views?.sort(prepareComparator(areReactionsFirst));\n  }, [areReactionsFirst, views]);\n\n  const placeholderCount = !sortedViews?.length ? Math.min(viewsCount, 8) : 1;\n\n  const notAllAvailable = Boolean(sortedViews?.length) && sortedViews.length < viewsCount && isExpired;\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!story?.id || nextOffset === undefined) return;\n    loadStoryViewList({\n      peerId: story.peerId,\n      storyId: story.id,\n      offset: nextOffset,\n      areReactionsFirst: areReactionsFirst || undefined,\n      areJustContacts: areJustContacts || undefined,\n      query,\n    });\n  });\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const handleClose = useLastCallback(() => {\n    closeStoryViewModal();\n  });\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        fluid\n        size=\"tiny\"\n        color=\"translucent\"\n        className={buildClassName(!isMenuOpen && 'active', styles.sortButton, styles.topButton)}\n        faded={isMenuOpen}\n        onClick={onTrigger}\n        ariaLabel={lang('SortBy')}\n      >\n        <Icon name={areReactionsFirst ? 'heart-outline' : 'recent'} className={styles.iconSort} />\n        <Icon name=\"down\" className={styles.iconDown} />\n      </Button>\n    );\n  }, [areReactionsFirst, lang]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className=\"component-theme-dark\"\n      contentClassName={styles.viewsList}\n      isSlim\n    >\n      {hasHeader && (\n        <div className={styles.header}>\n          {shouldShowJustContacts && (\n            <div className={styles.contactFilter}>\n              <Button\n                className={buildClassName(!areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={unmarkJustContacts}\n              >\n                {lang('AllViewers')}\n              </Button>\n              <Button\n                className={buildClassName(areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={markJustContacts}\n              >\n                {lang('Contacts')}\n              </Button>\n            </div>\n          )}\n          {shouldShowSortByReactions && (\n            <DropdownMenu\n              className={styles.sort}\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"heart-outline\" onClick={markReactionsFirst}>\n                {lang('SortByReactions')}\n                {areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n              <MenuItem icon=\"recent\" onClick={unmarkReactionsFirst}>\n                {lang('SortByTime')}\n                {!areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n            </DropdownMenu>\n          )}\n          {shouldShowSearch && (\n            <SearchInput className={styles.search} value={query} onChange={setQuery} />\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(styles.content, !isAtBeginning && styles.topScrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {isExpired && !isLoading && !query && Boolean(!sortedViews?.length) && (\n          <div className={buildClassName(styles.info, styles.centeredInfo)}>\n            {renderText(\n              lang(isCurrentUserPremium ? 'ServerErrorViewers' : 'ExpiredViewsStub'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n        )}\n        {!isLoading && Boolean(query.length) && !sortedViews?.length && (\n          <div className={styles.info}>\n            {lang('Story.ViewList.EmptyTextSearch')}\n          </div>\n        )}\n        <InfiniteScroll\n          items={sortedViews}\n          onLoadMore={handleLoadMore}\n        >\n          {sortedViews?.map((view) => {\n            const additionalKeyId = view.type === 'forward' ? view.messageId\n              : view.type === 'repost' ? view.storyId : 'user';\n            return (\n              <StoryView key={`${view.peerId}-${view.date}-${additionalKeyId}`} storyView={view} />\n            );\n          })}\n          {isLoading && Array.from({ length: placeholderCount }).map((_, i) => (\n            <ListItem\n\n              key={`placeholder-${i}`}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              disabled\n            >\n              <PlaceholderChatInfo />\n            </ListItem>\n          ))}\n          {notAllAvailable && (\n            <div key=\"not-all-available\" className={buildClassName(styles.info, styles.bottomInfo)}>\n              {lang('Story.ViewList.NotFullyRecorded')}\n            </div>\n          )}\n        </InfiniteScroll>\n      </div>\n      <div className={buildClassName(styles.footer, 'dialog-buttons')}>\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.close)}\n          isText\n          onClick={handleClose}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nfunction prepareComparator(areReactionsFirst?: boolean) {\n  return (a: ApiTypeStoryView, b: ApiTypeStoryView) => {\n    if (areReactionsFirst) {\n      const reactionA = a.type === 'user' && a.reaction;\n      const reactionB = b.type === 'user' && b.reaction;\n      if (reactionA && !reactionB) {\n        return -1;\n      }\n      if (!reactionA && reactionB) {\n        return 1;\n      }\n    }\n\n    return b.date - a.date;\n  };\n}\n\nexport default memo(withGlobal((global) => {\n  const { appConfig } = global;\n  const { storyViewer: { viewModal } } = selectTabState(global);\n  const {\n    storyId, views, nextOffset, isLoading,\n  } = viewModal || {};\n  const story = storyId ? selectPeerStory(global, global.currentUserId!, storyId) : undefined;\n\n  return {\n    storyId,\n    views,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    story: story && 'content' in story ? story : undefined,\n    nextOffset,\n    isLoading,\n    availableReactions: global.reactions.availableReactions,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StoryViewModal));\n","import {\n  beginHeavyAnimation,\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport useSlideSizes from './hooks/useSlideSizes';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport StealthModeModal from './StealthModeModal';\nimport StoryDeleteConfirmModal from './StoryDeleteConfirmModal';\nimport StorySettings from './StorySettings';\nimport StorySlides from './StorySlides';\nimport StoryViewModal from './StoryViewModal';\n\nimport styles from './StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 250;\n\ninterface StateProps {\n  isOpen: boolean;\n  peerId: string;\n  storyId?: number;\n  story?: ApiTypeStory;\n  origin?: StoryViewerOrigin;\n  shouldSkipHistoryAnimations?: boolean;\n  withAnimation?: boolean;\n  isPrivacyModalOpen?: boolean;\n}\n\nfunction StoryViewer({\n  isOpen,\n  peerId,\n  storyId,\n  story,\n  origin,\n  shouldSkipHistoryAnimations,\n  withAnimation,\n  isPrivacyModalOpen,\n}: StateProps) {\n  const { closeStoryViewer, closeStoryPrivacyEditor, reportStory } = getActions();\n\n  const lang = useOldLang();\n  const [storyToDelete, setStoryToDelete] = useState<ApiTypeStory | undefined>(undefined);\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n\n  const { bestImageData, thumbnail } = useStoryProps(story);\n  const slideSizes = useSlideSizes();\n  const isPrevOpen = usePreviousDeprecated(isOpen);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const prevPeerId = usePreviousDeprecated(peerId);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setStoryToDelete(undefined);\n      closeDeleteModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      enableDirectTextInput();\n      stopPriorityPlayback();\n    };\n  }, [isOpen]);\n\n  const handleClose = useCallback(() => {\n    closeStoryViewer();\n  }, [closeStoryViewer]);\n\n  const handleOpenDeleteModal = useLastCallback((s: ApiTypeStory) => {\n    setStoryToDelete(s);\n    openDeleteModal();\n  });\n\n  const handleCloseDeleteModal = useLastCallback(() => {\n    closeDeleteModal();\n    setStoryToDelete(undefined);\n  });\n\n  const openMessageReport = useLastCallback(() => {\n    if (!storyId) return;\n    reportStory({ storyId, peerId });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isGhostAnimation && !isPrevOpen && isOpen && peerId && thumbnail && origin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(peerId, origin, thumbnail, bestImageData, slideSizes.activeSlide);\n    }\n    if (isGhostAnimation && isPrevOpen && !isOpen && prevPeerId && prevBestImageData && prevOrigin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevPeerId, prevOrigin, prevBestImageData);\n    }\n  }, [\n    isGhostAnimation,\n    bestImageData,\n    prevBestImageData,\n    isOpen,\n    isPrevOpen,\n    slideSizes.activeSlide,\n    thumbnail,\n    peerId,\n    prevPeerId,\n    origin,\n    prevOrigin,\n  ]);\n\n  return (\n    <ShowTransition\n      id=\"StoryViewer\"\n      className={styles.root}\n      isOpen={isOpen}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className={styles.backdrop} onClick={handleClose} />\n      <Button\n        className={styles.close}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n\n      <StorySlides\n        isOpen={isOpen}\n        isDeleteModalOpen={isDeleteModalOpen}\n        onReport={openMessageReport}\n        onClose={handleClose}\n        onDelete={handleOpenDeleteModal}\n      />\n\n      <StoryDeleteConfirmModal\n        isOpen={isDeleteModalOpen}\n        story={storyToDelete}\n        onClose={handleCloseDeleteModal}\n      />\n      <StoryViewModal />\n      <StealthModeModal />\n      <StorySettings isOpen={isPrivacyModalOpen} onClose={closeStoryPrivacyEditor} />\n    </ShowTransition>\n  );\n}\n\nexport default memo(withGlobal((global): StateProps => {\n  const {\n    shouldSkipHistoryAnimations, storyViewer: {\n      storyId, peerId, isPrivacyModalOpen, origin,\n    },\n  } = selectTabState(global);\n  const story = peerId && storyId ? selectPeerStory(global, peerId, storyId) : undefined;\n  const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  return {\n    isOpen: selectIsStoryViewerOpen(global),\n    shouldSkipHistoryAnimations,\n    peerId: peerId!,\n    storyId,\n    story,\n    origin,\n    withAnimation,\n    isPrivacyModalOpen,\n  };\n})(StoryViewer));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\n\nimport { PEER_PICKER_ITEM_HEIGHT_PX } from '../../../config';\nimport {\n  getCanPostInChat, getGroupStatus, getUserStatus, isUserOnline,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport { selectMonoforumChannel, selectPeer, selectTopics, selectUserStatus } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../helpers/mediaDimensions';\nimport renderText from '../helpers/renderText';\n\nimport useSelector from '../../../hooks/data/useSelector';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useInputFocusOnOpen from '../../../hooks/useInputFocusOnOpen';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport Avatar from '../Avatar';\nimport FullNameTitle from '../FullNameTitle';\nimport Icon from '../icons/Icon';\nimport TopicIcon from '../TopicIcon';\nimport PickerItem from './PickerItem';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  className?: string;\n  isLowStackPriority?: boolean;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\nconst ITEM_CLASS_NAME = 'ChatOrUserPicker-item';\nconst TOPIC_ITEM_HEIGHT_PX = 56;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  search,\n  searchPlaceholder,\n  className,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n}) => {\n  const { loadTopics } = getActions();\n\n  const oldLang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const topicContainerRef = useRef<HTMLDivElement>();\n  const searchRef = useRef<HTMLInputElement>();\n  const topicSearchRef = useRef<HTMLInputElement>();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds.indexOf(viewportIds![0]);\n\n  const resetSearch = useLastCallback(() => {\n    onSearchChange('');\n  });\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const selectTopicsById = useLastCallback((global: GlobalState) => {\n    if (!forumId) {\n      return undefined;\n    }\n\n    return selectTopics(global, forumId);\n  });\n\n  const forumTopicsById = useSelector(selectTopicsById);\n\n  const [topicIds, topics] = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const chatFullInfoById = global.chats.fullInfoById;\n\n    const chat = chatsById[forumId!];\n\n    if (!chat || !forumTopicsById) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = forumTopicsById\n      ? Object.values(forumTopicsById).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chat, topic, undefined, chatFullInfoById[forumId!])\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : forumTopicsById;\n\n    return [Object.keys(result).map(Number), result];\n  }, [forumId, topicSearch, forumTopicsById]);\n\n  const handleHeaderBackClick = useLastCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  });\n\n  const handleSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  });\n\n  const handleTopicSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatsById = getGlobal().chats.byId;\n\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById[chatId];\n      if (chat?.isForum) {\n        if (!forumTopicsById) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleClick = useLastCallback((chatId: string) => {\n    const chatsById = getGlobal().chats.byId;\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!forumTopicsById) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  });\n\n  const renderChatItem = useCallback((id: string, index: number) => {\n    const global = getGlobal();\n    let peer = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const monoforumChannel = selectMonoforumChannel(global, id);\n    if (monoforumChannel) {\n      peer = monoforumChannel;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (peer.id === currentUserId) return [oldLang('SavedMessagesInfo')];\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(oldLang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return [\n        getUserStatus(oldLang, peer, userStatus),\n        buildClassName(isUserOnline(peer, userStatus, true) && 'online'),\n      ];\n    }\n\n    const [subtitle, subtitleClassName] = getSubtitle() || [];\n\n    return (\n      <PickerItem\n        key={id}\n        className={ITEM_CLASS_NAME}\n        title={(\n          <div className=\"title-wrapper\">\n            <FullNameTitle\n              className=\"item-title\"\n              peer={peer}\n              isMonoforum={Boolean(monoforumChannel)}\n              isSavedMessages={isSelf}\n            />\n          </div>\n        )}\n        avatarElement={(\n          <Avatar\n            peer={peer}\n            asMessageBubble={Boolean(monoforumChannel)}\n            isSavedMessages={isSelf}\n            size=\"medium\"\n          />\n        )}\n        subtitle={subtitle}\n        subtitleClassName={subtitleClassName}\n        ripple\n        style={`top: ${(viewportOffset + index) * PEER_PICKER_ITEM_HEIGHT_PX}px;`}\n\n        onClick={() => handleClick(id)}\n      />\n    );\n  }, [currentUserId, oldLang, viewportOffset]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={oldLang('Back')} onClick={handleHeaderBackClick}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={(topicIds?.length || 0) * TOPIC_ITEM_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {!topicIds && <Loading />}\n          {topicIds?.map((topicId, i) => (\n            <PickerItem\n              key={`${forumId}_${topicId}`}\n              className={ITEM_CLASS_NAME}\n\n              onClick={() => onSelectChatOrUser(forumId!, topicId)}\n              style={`top: ${(viewportOffset + i) * TOPIC_ITEM_HEIGHT_PX}px;`}\n              avatarElement={(\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n              )}\n              title={renderText(topics[topicId].title)}\n            />\n          ))}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            itemSelector={`.${ITEM_CLASS_NAME}`}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds.length * PEER_PICKER_ITEM_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map(renderChatItem)}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{oldLang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName('ChatOrUserPicker', className)}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\" slideClassName=\"ChatOrUserPicker_slide\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatType } from '../../api/types';\nimport type { ThreadId } from '../../types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport {\n  getCanPostInChat,\n  getHasAdminRight,\n  isChatChannel,\n  isDeletedUser,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport {\n  filterChatIdsByType, selectChat, selectChatFullInfo, selectIsMonoforumAdmin, selectUser,\n} from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from './helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ChatOrUserPicker from './pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  className?: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  isLowStackPriority?: boolean;\n  isForwarding?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  className,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n  isForwarding,\n}) => {\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n\n    const peerIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = selectChat(global, id);\n      const user = selectUser(global, id);\n      const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n      const isChannel = chat && isChatChannel(chat);\n      if (isForwarding && isChannel && !hasAdminRights) return false;\n      if (user && !isDeletedUser(user)) return true;\n\n      if (!chat) return false;\n\n      if (chat.isMonoforum && selectIsMonoforumAdmin(global, id)) {\n        return false;\n      }\n\n      const chatFullInfo = selectChatFullInfo(global, id);\n      // TODO: Handle bulk check with API call\n      return !chatFullInfo || getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n    });\n\n    const sorted = sortChatIds(\n      filterPeersByQuery({\n        ids: unique([\n          ...(currentUserId ? [currentUserId] : []),\n          ...peerIds,\n          ...(contactIds || []),\n        ]),\n        query: search,\n      }),\n      undefined,\n      priorityIds,\n      currentUserId,\n    );\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [\n    isOpen,\n    pinnedIds,\n    currentUserId,\n    activeListIds,\n    search,\n    archivedListIds,\n    contactIds,\n    filter,\n    isForwarding,\n  ]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      className={className}\n      chatOrUserIds={renderingIds}\n      currentUserId={currentUserId}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ThreadId } from '../../types';\n\nimport { getChatTitle, getUserFirstOrLastName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n  isStory?: boolean;\n  isForwarding?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n  isStory,\n  isForwarding,\n}) => {\n  const {\n    openChatOrTopicWithReplyInDraft,\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    forwardStory,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingIsStory = usePreviousDeprecated(isStory, true);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    const isSelf = recipientId === currentUserId;\n    if (isStory) {\n      forwardStory({ toChatId: recipientId });\n      const global = getGlobal();\n      if (isUserId(recipientId)) {\n        showNotification({\n          message: isSelf\n            ? lang('Conversation.StoryForwardTooltip.SavedMessages.One')\n            : lang(\n              'StorySharedTo',\n              getUserFirstOrLastName(selectUser(global, recipientId)),\n            ),\n        });\n      } else {\n        const chat = selectChat(global, recipientId);\n        if (!chat) return;\n\n        showNotification({\n          message: lang('StorySharedTo', getChatTitle(lang, chat)),\n        });\n      }\n      return;\n    }\n\n    if (isSelf) {\n      const message = lang(\n        isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One',\n      );\n\n      forwardToSavedMessages();\n      showNotification({ message });\n    } else {\n      const chatId = recipientId;\n      const topicId = threadId ? Number(threadId) : undefined;\n      if (isForwarding) {\n        setForwardChatOrTopic({ chatId, topicId });\n      } else {\n        openChatOrTopicWithReplyInDraft({ chatId, topicId });\n      }\n    }\n  }, [currentUserId, isManyMessages, isStory, lang, isForwarding]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      className={renderingIsStory ? 'component-theme-dark' : undefined}\n      searchPlaceholder={lang(isForwarding ? 'ForwardTo' : 'ReplyToDialog')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n      isForwarding={isForwarding}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { messageIds, storyId } = selectTabState(global).forwardMessages;\n  const isForwarding = (messageIds && messageIds.length > 0);\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (messageIds?.length || 0) > 1,\n    isStory: Boolean(storyId),\n    isForwarding,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ThreadId } from '../../types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { selectCurrentMessageList, selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport renderText from '../common/helpers/renderText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  dialogs: (ApiError | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, currentMessageList }) => {\n  const {\n    dismissDialog,\n    sendMessage,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      if (!currentMessageList) {\n        return;\n      }\n\n      sendMessage({\n        contact: contactRequest,\n        messageList: currentMessageList,\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiContact) => {\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map((notification) => (\n        <Notification key={notification.localId} notification={notification} />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/browser/url';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (!url) {\n      return;\n    }\n\n    window.open(ensureProtocol(url), '_blank', 'noopener noreferrer');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlText', { url: renderingUrl }, { withNodes: true, withMarkdown: true }))}\n      confirmLabel={lang('OpenUrlConfirm')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VJDwJpsF\",\"buttons\":\"aYO2C2Hx\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { IS_IOS, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport { prepareMapUrl } from '../../../util/map';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './MapModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['mapModal'];\n};\n\nconst OpenMapModal = ({ modal }: OwnProps) => {\n  const { closeMapModal } = getActions();\n\n  const { point: geoPoint, zoom } = modal || {};\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(geoPoint);\n\n  const handleClose = useLastCallback(() => {\n    closeMapModal();\n  });\n\n  const [googleUrl, bingUrl, appleUrl, osmUrl] = useMemo(() => {\n    if (!geoPoint) {\n      return [];\n    }\n\n    const google = prepareMapUrl('google', geoPoint, zoom);\n    const bing = prepareMapUrl('bing', geoPoint, zoom);\n    const osm = prepareMapUrl('osm', geoPoint, zoom);\n    const apple = prepareMapUrl('apple', geoPoint, zoom);\n\n    return [google, bing, apple, osm];\n  }, [geoPoint, zoom]);\n\n  const openUrl = useLastCallback((url: string) => {\n    closeMapModal();\n    window.open(url, '_blank', 'noopener');\n  });\n\n  const handleGoogleClick = useLastCallback(() => {\n    openUrl(googleUrl!);\n  });\n\n  const handleBingClick = useLastCallback(() => {\n    openUrl(bingUrl!);\n  });\n\n  const handleAppleClick = useLastCallback(() => {\n    openUrl(appleUrl!);\n  });\n\n  const handleOsmClick = useLastCallback(() => {\n    openUrl(osmUrl!);\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.root}\n      title={lang('OpenMapWith')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      isSlim\n    >\n      <div className={styles.buttons}>\n        {(IS_IOS || IS_MAC_OS) && (\n          <Button fluid size=\"smaller\" onClick={handleAppleClick}>\n            Apple Maps\n          </Button>\n        )}\n        <Button fluid size=\"smaller\" onClick={handleGoogleClick}>\n          Google Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleBingClick}>\n          Bing Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleOsmClick}>\n          OpenStreetMap\n        </Button>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(OpenMapModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport renderText from '../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal?: TabState['urlAuth'];\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps & StateProps> = ({\n  modal, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(modal, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useOldLang();\n\n  const handleOpen = useCallback(() => {\n    if (modal?.url && isLoginChecked) {\n      const acceptAction = modal.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else if (currentAuth?.url) {\n      window.open(ensureProtocol(currentAuth.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    modal, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(modal?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    return {\n      currentUser,\n    };\n  },\n)(UrlAuthModal));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateToString, formatTime, getDayStart } from '../../util/dates/dateFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useOldLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  const isDisabled = (isFutureMode && selectedDate.getTime() < minDate.getTime())\n    || (isPastMode && selectedDate.getTime() > maxDate.getTime());\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    if (isFutureMode && selectedDate < minDate) {\n      onSubmit(minDate);\n    } else if (isPastMode && selectedDate > maxDate) {\n      onSubmit(maxDate);\n    } else {\n      onSubmit(selectedDate);\n    }\n  }, [isFutureMode, isPastMode, minDate, maxDate, onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <Icon name=\"previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <Icon name=\"next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : gridDate ? 'clickable' : '',\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <div className=\"footer\">\n          <Button\n            onClick={handleSubmit}\n            disabled={isDisabled}\n          >\n            {submitLabel}\n          </Button>\n          {secondButtonLabel && (\n            <Button onClick={onSecondButtonClick} isText>\n              {secondButtonLabel}\n            </Button>\n          )}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: OldLangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.getTime() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useOldLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useOldLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  const inputRef = useRef<HTMLInputElement>();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => {\n        inputRef.current?.focus();\n      }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            peer={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text NewContactModal__help-text__negative\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import type {\n  ElementRef } from '../lib/teact/teact';\nimport {\n  useEffect, useSignal, useState,\n} from '../lib/teact/teact';\n\nimport type { Point, Size } from '../types';\n\nimport { RESIZE_HANDLE_SELECTOR } from '../config';\nimport buildStyle from '../util/buildStyle';\nimport { captureEvents } from '../util/captureEvents';\nimport getPointerPosition from '../util/events/getPointerPosition';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport enum ResizeHandleType {\n  Top,\n  Bottom,\n  Left,\n  Right,\n  TopLeft,\n  TopRight,\n  BottomLeft,\n  BottomRight,\n}\n\ntype ResizeHandleSelectorType = 'top' | 'bottom' | 'left'\n  | 'right' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\nconst resizeHandleSelectorsMap: Record<ResizeHandleSelectorType, ResizeHandleType> = {\n  top: ResizeHandleType.Top,\n  bottom: ResizeHandleType.Bottom,\n  left: ResizeHandleType.Left,\n  right: ResizeHandleType.Right,\n  topLeft: ResizeHandleType.TopLeft,\n  topRight: ResizeHandleType.TopRight,\n  bottomLeft: ResizeHandleType.BottomLeft,\n  bottomRight: ResizeHandleType.BottomRight,\n};\n\nconst resizeHandleSelectors = Object.keys(resizeHandleSelectorsMap) as ResizeHandleSelectorType[];\n\nlet resizeTimeout: number | undefined;\nconst FULLSCREEN_POSITION = { x: 0, y: 0 };\n\nexport default function useDraggable(\n  ref: ElementRef<HTMLElement>,\n  dragHandleElementRef: ElementRef<HTMLElement>,\n  isDragEnabled: boolean = true,\n  originalSize: Size,\n  isFullscreen: boolean = false,\n  minimumSize: Size = { width: 0, height: 0 },\n  cachedPosition?: Point,\n) {\n  const [elementCurrentPosition, setElementCurrentPosition] = useState<Point | undefined>(cachedPosition);\n  const [elementCurrentSize, setElementCurrentSize] = useState<Size | undefined>(undefined);\n\n  const [getElementPositionOnStartTransform, setElementPositionOnStartTransform] = useSignal({ x: 0, y: 0 });\n  const [getElementSizeOnStartTransform, setElementSizeOnStartTransform] = useSignal({ width: 0, height: 0 });\n  const [getTransformStartPoint, setTransformStartPoint] = useSignal({ x: 0, y: 0 });\n\n  const elementPositionOnStartTransform = getElementPositionOnStartTransform();\n  const transformStartPoint = getTransformStartPoint();\n\n  const element = ref.current;\n  const dragHandleElement = dragHandleElementRef.current;\n\n  const [isInitiated, setIsInitiated] = useFlag(false);\n  const [wasElementShown, setWasElementShown] = useFlag(false);\n  const [isDragging, startDragging, stopDragging] = useFlag(false);\n  const [isResizing, startResizing, stopResizing] = useFlag(false);\n  const [isWindowsResizing, startWindowResizing, stopWindowResizing] = useFlag(false);\n\n  const [hitResizeHandle, setHitResizeHandle] = useState<ResizeHandleType | undefined>(undefined);\n\n  function getVisibleArea() {\n    return {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n  }\n\n  const updateCurrentPosition = useLastCallback((position: Point) => {\n    if (!isFullscreen) setElementCurrentPosition({ x: position.x, y: position.y });\n  });\n\n  const getActualPosition = useLastCallback(() => {\n    return isFullscreen ? FULLSCREEN_POSITION : elementCurrentPosition;\n  });\n\n  const getCenteredPosition = useLastCallback(() => {\n    if (!elementCurrentSize) return undefined;\n    const { width, height } = elementCurrentSize;\n\n    const visibleArea = getVisibleArea();\n    const viewportWidth = visibleArea.width;\n    const viewportHeight = visibleArea.height;\n\n    const centeredX = (viewportWidth - width) / 2;\n    const centeredY = (viewportHeight - height) / 2;\n\n    return { x: centeredX, y: centeredY };\n  });\n\n  useEffect(() => {\n    if (element) setWasElementShown();\n  }, [element]);\n\n  useEffect(() => {\n    if (!isInitiated && elementCurrentSize) {\n      const centeredPosition = getCenteredPosition();\n      if (!centeredPosition) return;\n\n      updateCurrentPosition(centeredPosition);\n      setIsInitiated();\n    }\n  }, [elementCurrentSize, isInitiated, element]);\n\n  const handleStartDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (targetElement.closest('.no-drag') || !element) {\n      return;\n    }\n    const { x, y } = getPointerPosition(event);\n\n    const { left, top } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setTransformStartPoint({ x, y });\n\n    startDragging();\n  });\n\n  function getResizeHandleFromTarget(targetElement: HTMLElement) {\n    const closest = (selector: string) => targetElement.closest(selector);\n\n    if (!closest(RESIZE_HANDLE_SELECTOR)) return undefined;\n    for (const selector of resizeHandleSelectors) {\n      if (closest(`.${selector}`)) {\n        return resizeHandleSelectorsMap[selector];\n      }\n    }\n    return undefined;\n  }\n\n  const handleStartResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (!element || !targetElement) {\n      return;\n    }\n    const resizeHandle = getResizeHandleFromTarget(targetElement);\n\n    if (resizeHandle === undefined) return;\n    setHitResizeHandle(resizeHandle);\n\n    const { x, y } = getPointerPosition(event);\n\n    const {\n      left, right, top, bottom,\n    } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setElementSizeOnStartTransform({ width: right - left, height: bottom - top });\n    setTransformStartPoint({ x, y });\n\n    startResizing();\n  });\n\n  const handleDragRelease = useLastCallback(() => {\n    stopDragging();\n  });\n\n  const handleResizeRelease = useLastCallback(() => {\n    stopResizing();\n  });\n\n  useEffect(() => {\n    if (!isDragEnabled) {\n      stopDragging();\n    }\n  }, [isDragEnabled]);\n\n  const ensurePositionInVisibleArea = (x: number, y: number) => {\n    const visibleArea = getVisibleArea();\n\n    const visibleAreaWidth = visibleArea.width;\n    const visibleAreaHeight = visibleArea.height;\n\n    const componentWidth = elementCurrentSize!.width;\n    const componentHeight = elementCurrentSize!.height;\n\n    let newX = x;\n    let newY = y;\n\n    if (newX < 0) newX = 0;\n    if (newY < 0) newY = 0;\n    if (newX + componentWidth > visibleAreaWidth) newX = visibleAreaWidth - componentWidth;\n    if (newY + componentHeight > visibleAreaHeight) newY = visibleAreaHeight - componentHeight;\n\n    return { x: newX, y: newY };\n  };\n\n  const adjustPositionWithinBounds = useLastCallback(() => {\n    if (isFullscreen) return;\n    const position = !wasElementShown && !cachedPosition ? getCenteredPosition() : elementCurrentPosition;\n    if (!elementCurrentSize || !position) return;\n    const newPosition = ensurePositionInVisibleArea(position.x, position.y);\n    updateCurrentPosition(newPosition);\n  });\n\n  const ensureSizeInVisibleArea = useLastCallback((sizeForCheck: Size) => {\n    const newSize = sizeForCheck;\n\n    const visibleArea = getVisibleArea();\n\n    const originalWidth = originalSize.width;\n    const originalHeight = originalSize.height;\n    newSize.width = Math.min(visibleArea.width, Math.max(originalWidth, newSize.width));\n    newSize.height = Math.min(visibleArea.height, Math.max(originalHeight, newSize.height));\n\n    return newSize;\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    const newSize = ensureSizeInVisibleArea({ width: originalSize.width, height: originalSize.height });\n    if (newSize) setElementCurrentSize(newSize);\n  }, [originalSize, isResizing]);\n\n  const adjustSizeWithinBounds = useLastCallback(() => {\n    if (!elementCurrentSize || isResizing) return;\n    const newSize = ensureSizeInVisibleArea(elementCurrentSize);\n    if (newSize) setElementCurrentSize(newSize);\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    adjustPositionWithinBounds();\n  }, [elementCurrentSize, isResizing]);\n\n  useEffect(() => {\n    const handleWindowResize = () => {\n      startWindowResizing();\n      adjustSizeWithinBounds();\n      adjustPositionWithinBounds();\n      if (resizeTimeout) {\n        clearTimeout(resizeTimeout);\n        resizeTimeout = undefined;\n      }\n      resizeTimeout = window.setTimeout(() => {\n        resizeTimeout = undefined;\n        stopWindowResizing();\n      }, 250);\n    };\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = undefined;\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, [adjustPositionWithinBounds]);\n\n  const handleDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isDragging || !element) return;\n    const { x, y } = getPointerPosition(event);\n\n    const offsetX = x - transformStartPoint.x;\n    const offsetY = y - transformStartPoint.y;\n\n    const newX = elementPositionOnStartTransform.x + offsetX;\n    const newY = elementPositionOnStartTransform.y + offsetY;\n\n    if (elementCurrentSize) setElementCurrentPosition(ensurePositionInVisibleArea(newX, newY));\n  });\n\n  const handleResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isResizing || !element || hitResizeHandle === undefined) return;\n    const { x, y } = getPointerPosition(event);\n    const sizeOnStartTransform = getElementSizeOnStartTransform();\n\n    const pageVisibleX = Math.min(Math.max(0, x), getVisibleArea().width);\n    const pageVisibleY = Math.min(Math.max(0, y), getVisibleArea().height);\n\n    const offsetX = pageVisibleX - transformStartPoint.x;\n    const offsetY = pageVisibleY - transformStartPoint.y;\n\n    const maxX = elementPositionOnStartTransform.x + sizeOnStartTransform.width - minimumSize.width;\n    const maxY = elementPositionOnStartTransform.y + sizeOnStartTransform.height - minimumSize.height;\n\n    const originalBounds = {\n      x: elementPositionOnStartTransform.x,\n      y: elementPositionOnStartTransform.y,\n      width: sizeOnStartTransform.width,\n      height: sizeOnStartTransform.height,\n    };\n\n    const newBounds = { ...originalBounds };\n\n    if (hitResizeHandle === ResizeHandleType.Left\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width - offsetX, minimumSize.width);\n      newBounds.x = Math.min(newBounds.x + offsetX, maxX);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Right\n      || hitResizeHandle === ResizeHandleType.TopRight\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width + offsetX, minimumSize.width);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Top\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.TopRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height - offsetY, minimumSize.height);\n      newBounds.y = Math.min(newBounds.y + offsetY, maxY);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Bottom\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height + offsetY, minimumSize.height);\n    }\n\n    setElementCurrentSize({ width: newBounds.width, height: newBounds.height });\n    setElementCurrentPosition({ x: newBounds.x, y: newBounds.y });\n  });\n\n  useEffect(() => {\n    let cleanup: NoneToVoidFunction | undefined;\n    if (dragHandleElement && isDragEnabled) {\n      cleanup = captureEvents(dragHandleElement, {\n        onCapture: handleStartDrag,\n        onDrag: handleDrag,\n        onRelease: handleDragRelease,\n        onClick: handleDragRelease,\n        onDoubleClick: handleDragRelease,\n      });\n    }\n    return cleanup;\n  }, [isDragEnabled, dragHandleElement]);\n\n  useEffect(() => {\n    const cleanups: NoneToVoidFunction[] = [];\n    if (element && isDragEnabled) {\n      for (const selector of resizeHandleSelectors) {\n        const resizeHandler = element.querySelector(`.resizeHandle.${selector}`) as HTMLElement;\n\n        if (resizeHandler) {\n          const cleanup = captureEvents(resizeHandler, {\n            onCapture: handleStartResize,\n            onDrag: handleResize,\n            onRelease: handleResizeRelease,\n            onClick: handleResizeRelease,\n            onDoubleClick: handleResizeRelease,\n          });\n\n          if (cleanup) {\n            cleanups.push(cleanup);\n          }\n        }\n      }\n    }\n\n    return () => {\n      cleanups.forEach((cleanup) => cleanup());\n    };\n  }, [isDragEnabled, element]);\n\n  const cursorStyle = isDragging ? 'cursor: grabbing !important; ' : '';\n\n  const actualPosition = getActualPosition();\n\n  if (!isInitiated || !elementCurrentSize || !actualPosition) {\n    return {\n      isDragging: false,\n      style: cursorStyle,\n    };\n  }\n\n  const style = buildStyle(\n    `left: ${actualPosition.x}px;`,\n    `top: ${actualPosition.y}px;`,\n    !isFullscreen && `max-width: ${elementCurrentSize.width}px;`,\n    !isFullscreen && `max-height: ${elementCurrentSize.height}px;`,\n    'position: fixed;',\n    (isDragging || isResizing || isWindowsResizing) && 'transition: none !important;',\n    cursorStyle,\n  );\n\n  return {\n    position: elementCurrentPosition,\n    size: elementCurrentSize,\n    isDragging,\n    isResizing,\n    style,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kUZmBlnN\",\"window-state-button\":\"Rax9j_TK\",\"windowStateButton\":\"Rax9j_TK\",\"button\":\"SMRJmUuE\",\"avatars\":\"GP17QhNN\",\"state-icon\":\"sdbTXCxq\",\"stateIcon\":\"sdbTXCxq\",\"icon\":\"P0P4gW6a\",\"title\":\"TZFjRaG4\"};","import {\n  memo, useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { WebApp } from '../../../types/webapp';\n\nimport { selectActiveWebApp, selectTabState, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './MinimizedWebAppModal.module.scss';\n\ntype StateProps = {\n  activeTabBot?: ApiUser;\n  isMinimizedState?: boolean;\n  openedWebApps?: Record<string, WebApp>;\n};\n\nconst MinimizedWebAppModal = ({\n  activeTabBot, isMinimizedState, openedWebApps,\n}: StateProps) => {\n  const {\n    changeWebAppModalState,\n    closeWebAppModal,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const ref = useRef<HTMLDivElement>();\n\n  const openedWebAppsValues = useMemo(() => {\n    return openedWebApps && Object.values(openedWebApps);\n  }, [openedWebApps]);\n\n  const openedTabsCount = openedWebAppsValues?.length;\n\n  const peers = useMemo(() => {\n    if (!openedTabsCount) return [];\n\n    const global = getGlobal();\n    const activeTabBotId = activeTabBot?.id;\n    const openedApps = unique([activeTabBotId, ...openedWebAppsValues.map((app) => app.botId)]);\n    const bots = openedApps.map((id) => id && selectUser(global, id)).filter(Boolean).slice(0, 3);\n    return bots;\n  }, [openedTabsCount, activeTabBot, openedWebAppsValues]);\n\n  const handleCloseClick = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleExpandClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  });\n\n  if (!isMinimizedState) return undefined;\n\n  function renderTitle() {\n    const activeTabName = peers.length > 0 && peers[0]?.firstName;\n    const title = openedTabsCount && activeTabName && openedTabsCount > 1\n      ? lang('MiniAppsMoreTabs',\n        {\n          botName: activeTabName,\n          count: openedTabsCount - 1,\n        },\n        {\n          pluralValue: openedTabsCount - 1,\n        })\n      : activeTabName;\n\n    return (\n      <div className={styles.title}>\n        {title}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        styles.root,\n      )}\n    >\n      <Button\n        className={styles.button}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        ariaLabel={oldLang('Close')}\n        onClick={handleCloseClick}\n      >\n        <Icon className={styles.icon} name=\"close\" />\n      </Button>\n      <AvatarList className={styles.avatars} size=\"mini\" peers={peers} />\n      {renderTitle()}\n      <Button\n        className={buildClassName(\n          styles.windowStateButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleExpandClick}\n      >\n        <Icon className={styles.stateIcon} name=\"expand-modal\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const webApps = tabState.webApps;\n\n    const { botId } = selectActiveWebApp(global) || {};\n    const { modalState, openedWebApps } = webApps || {};\n    const isMinimizedState = modalState === 'minimized';\n    const activeTabBot = botId ? selectUser(global, botId) : undefined;\n\n    return {\n      activeTabBot,\n      isMinimizedState,\n      openedWebApps,\n    };\n  },\n)(MinimizedWebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RFg0Ey2I\",\"user-count-badge\":\"UZtJ6ZXb\",\"userCountBadge\":\"UZtJ6ZXb\",\"user-badge-icon\":\"pTiZFhsG\",\"userBadgeIcon\":\"pTiZFhsG\",\"name\":\"TzA5nqCC\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PeerBadge from '../../common/PeerBadge';\n\nimport styles from './WebAppGridItem.module.scss';\n\nexport type OwnProps = {\n\n  chatId: string;\n  isPopularApp?: boolean;\n};\n\nexport type StateProps = {\n  user?: ApiUser;\n};\n\nfunction WebAppGridItem({ user, isPopularApp }: OwnProps & StateProps) {\n  const {\n    requestMainWebView,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useLastCallback(() => {\n    if (!user) {\n      return;\n    }\n    const botId = user?.id;\n    if (!botId) {\n      return;\n    }\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId,\n      peerId: botId,\n      theme,\n    });\n  });\n\n  if (!user) return undefined;\n\n  const title = user?.firstName;\n  const activeUserCount = user?.botActiveUsers;\n  const badgeText = activeUserCount && isPopularApp ? formatIntegerCompact(lang, activeUserCount) : undefined;\n\n  return (\n    <div\n      className={styles.container}\n      onClick={handleClick}\n    >\n      <PeerBadge\n        className={buildClassName(styles.avatarContainer, isPopularApp && 'PopularAppGridItem')}\n        textClassName={styles.name}\n        badgeClassName={styles.userCountBadge}\n        badgeIconClassName={styles.userBadgeIcon}\n        peer={user}\n        text={title}\n        badgeText={badgeText}\n        badgeIcon=\"user-filled\"\n      />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const user = selectUser(global, chatId);\n\n    return {\n      user,\n    };\n  },\n)(WebAppGridItem));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"BJV09FsC\",\"search\":\"bdi8G7GR\",\"section-title\":\"ex3kxgWX\",\"sectionTitle\":\"ex3kxgWX\",\"section-content\":\"uIZzLhEh\",\"sectionContent\":\"uIZzLhEh\",\"showMoreLink\":\"h_Zs9ypA\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback,\n  useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport WebAppGridItem from './WebAppGridItem';\n\nimport styles from './MoreAppsTabContent.module.scss';\n\nconst POPULAR_APPS_SLICE = 30;\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\nconst LESS_GRID_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MoreAppsTabContent: FC<StateProps> = ({\n  foundIds,\n  recentBotIds,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n  const {\n    searchPopularBotApps,\n  } = getActions();\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n\n    return filterPeersByQuery({ ids: foundIds, query: searchQuery, type: 'user' });\n  }, [foundIds, searchQuery]);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleSearchInputReset = useCallback(() => {\n    setSearchQuery('');\n  }, []);\n\n  return (\n    <InfiniteScroll\n      className={buildClassName(styles.root, 'custom-scroll')}\n      items={filteredFoundIds}\n      onLoadMore={handleLoadMore}\n      itemSelector=\".PopularAppGridItem\"\n      noFastList\n      preloadBackwards={POPULAR_APPS_SLICE}\n    >\n      <SearchInput\n        className={styles.search}\n        value={searchQuery}\n        onChange={setSearchQuery}\n        onReset={handleSearchInputReset}\n        placeholder={lang('SearchApps')}\n      />\n      {recentBotIds && !searchQuery && (\n        <div className={styles.section}>\n          <div className={styles.sectionTitle}>\n            <span>{oldLang('SearchAppsMine')}</span>\n            <span className={styles.showMoreLink} onClick={handleToggleShowMoreMine}>\n              {oldLang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n            </span>\n          </div>\n          <div className={styles.sectionContent}>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_GRID_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <WebAppGridItem\n                  chatId={id}\n                />\n              );\n            })}\n          </div>\n        </div>\n      )}\n      <div className={styles.section}>\n        <div className={styles.sectionTitle}>\n          {searchQuery ? lang('Apps') : lang('PopularApps')}\n        </div>\n        <div className={styles.sectionContent}>\n          {filteredFoundIds && filteredFoundIds.map((id) => {\n            return (\n              <WebAppGridItem\n                chatId={id}\n                isPopularApp={!searchQuery}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal((global) => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(MoreAppsTabContent));\n","import type { ElementRef } from '../../../../lib/teact/teact';\nimport { useCallback, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { WebApp, WebAppInboundEvent, WebAppOutboundEvent } from '../../../../types/webapp';\n\nimport { getWebAppKey } from '../../../../global/helpers';\nimport { extractCurrentThemeParams } from '../../../../util/themeStyle';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst RELOAD_TIMEOUT = 500;\nconst FULLSCREEN_BUTTONS_AREA_HEIGHT = 3.675 * REM;\n\nconst useWebAppFrame = (\n  ref: ElementRef<HTMLIFrameElement>,\n  isOpen: boolean,\n  isFullscreen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  webApp?: WebApp,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n    setWebAppPaymentSlug,\n    openInvoice,\n    closeWebApp,\n    openSuggestedStatusModal,\n    updateWebApp,\n  } = getActions();\n\n  const isReloadSupported = useRef<boolean>(false);\n  const reloadTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendFullScreenChanged = useCallback((value: boolean) => {\n    sendEvent({\n      eventType: 'fullscreen_changed',\n      eventData: {\n        is_fullscreen: value,\n      },\n    });\n  }, [sendEvent]);\n\n  const forceReloadFrame = useLastCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  });\n\n  const reloadFrame = useCallback((url: string) => {\n    if (isReloadSupported.current) {\n      sendEvent({\n        eventType: 'reload_iframe',\n      });\n      reloadTimeout.current = setTimeout(() => {\n        forceReloadFrame(url);\n      }, RELOAD_TIMEOUT);\n      return;\n    }\n\n    forceReloadFrame(url);\n  }, [sendEvent]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendSafeArea = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n    sendEvent({\n      eventType: 'safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n      },\n    });\n\n    sendEvent({\n      eventType: 'content_safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: isFullscreen ? FULLSCREEN_BUTTONS_AREA_HEIGHT : 0,\n        bottom: 0,\n      },\n    });\n  }, [sendEvent, isFullscreen, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n    const contentWindow = ref.current?.contentWindow;\n    const sourceWindow = event.source as Window;\n\n    if (contentWindow !== sourceWindow) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      const { eventType, eventData } = data;\n      // Handle some app requests here to simplify hook usage\n      if (eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (eventType === 'web_app_close') {\n        if (webApp) {\n          const key = getWebAppKey(webApp);\n          closeWebApp({ key, skipClosingConfirmation: true });\n        }\n      }\n\n      if (eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (eventType === 'web_app_request_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_content_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n        isReloadSupported.current = Boolean(eventData.reload_supported);\n      }\n\n      if (eventType === 'iframe_will_reload') {\n        clearTimeout(reloadTimeout.current);\n      }\n\n      if (eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      // Clipboard access temporarily disabled to address security concerns\n      if (eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_open_scan_qr_popup') {\n        showNotification({\n          message: 'Scanning QR code is not supported in this client yet',\n        });\n      }\n\n      if (eventType === 'web_app_open_invoice') {\n        setWebAppPaymentSlug({\n          slug: eventData.slug,\n        });\n        openInvoice({\n          type: 'slug',\n          slug: eventData.slug,\n        });\n      }\n\n      if (eventType === 'web_app_open_link') {\n        const linkUrl = eventData.url;\n        window.open(linkUrl, '_blank', 'noreferrer');\n      }\n\n      if (eventType === 'web_app_biometry_get_info') {\n        sendEvent({\n          eventType: 'biometry_info_received',\n          eventData: {\n            available: false,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_device_storage_clear'\n        || eventType === 'web_app_device_storage_get_key'\n        || eventType === 'web_app_device_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'device_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_secure_storage_clear'\n        || eventType === 'web_app_secure_storage_get_key'\n        || eventType === 'web_app_secure_storage_restore_key'\n        || eventType === 'web_app_secure_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'secure_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_accelerometer') {\n        sendEvent({\n          eventType: 'accelerometer_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_gyroscope') {\n        sendEvent({\n          eventType: 'gyroscope_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_device_orientation') {\n        sendEvent({\n          eventType: 'device_orientation_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_add_to_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_check_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_checked',\n          eventData: {\n            status: 'unsupported',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_set_emoji_status') {\n        const { custom_emoji_id, duration } = eventData;\n\n        if (!custom_emoji_id || typeof custom_emoji_id !== 'string') {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'SUGGESTED_EMOJI_INVALID',\n            },\n          });\n          return;\n        }\n\n        if (duration) {\n          try {\n            BigInt(duration);\n          } catch (e) {\n            sendEvent({\n              eventType: 'emoji_status_failed',\n              eventData: {\n                error: 'DURATION_INVALID',\n              },\n            });\n            return;\n          }\n        }\n\n        if (!webApp) {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'UNKNOWN_ERROR',\n            },\n          });\n          return;\n        }\n\n        openSuggestedStatusModal({\n          webAppKey: getWebAppKey(webApp),\n          customEmojiId: custom_emoji_id,\n          duration: Number(duration),\n          botId: webApp.botId,\n        });\n      }\n\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [\n    isSimpleView, sendEvent, onEvent, sendCustomStyle, webApp,\n    sendTheme, sendViewport, sendSafeArea, onLoad, windowSize.isResizing,\n    ref,\n  ]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, sendSafeArea, windowSize]);\n\n  useEffect(() => {\n    if (!webApp?.plannedEvents?.length) return;\n    const events = webApp.plannedEvents;\n    events.forEach((event) => {\n      sendEvent(event);\n    });\n\n    updateWebApp({\n      key: getWebAppKey(webApp),\n      update: {\n        plannedEvents: [],\n      },\n    });\n  }, [sendEvent, webApp]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage, ref]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      sendSafeArea();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, isFullscreen, sendViewport, sendSafeArea, ref]);\n\n  return {\n    sendEvent, sendFullScreenChanged, reloadFrame, sendViewport, sendSafeArea, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LeeJZdwH\",\"multi-tab\":\"ESsGT5OD\",\"multiTab\":\"ESsGT5OD\",\"loadingPlaceholder\":\"jEAibDyh\",\"placeholderPath\":\"Gx1BIECZ\",\"fadeOpacityBreath\":\"N5Blieah\",\"defaultPlaceholderGrid\":\"Ig_t1R7i\",\"placeholderSquare\":\"ablUg8HU\",\"hide\":\"Wrl63uWL\",\"frame\":\"OmY14FFl\",\"with-button\":\"liDRl1xT\",\"withButton\":\"liDRl1xT\",\"hidden\":\"vOFiAq3l\",\"secondary-button\":\"ypxiUCFQ\",\"secondaryButton\":\"ypxiUCFQ\",\"main-button\":\"U_ggDKn1\",\"mainButton\":\"U_ggDKn1\",\"visible\":\"KwI4XdkC\",\"buttons-container\":\"mR_hsBdT\",\"buttonsContainer\":\"mR_hsBdT\",\"one-row\":\"YfQO314y\",\"oneRow\":\"YfQO314y\",\"two-rows\":\"gUldkEoy\",\"twoRows\":\"gUldkEoy\",\"left-to-right\":\"ntESqwQ_\",\"leftToRight\":\"ntESqwQ_\",\"right-to-left\":\"q6IUFEL0\",\"rightToLeft\":\"q6IUFEL0\",\"top-to-bottom\":\"gb4iHJ9H\",\"topToBottom\":\"gb4iHJ9H\",\"bottom-to-top\":\"R_bh3GF8\",\"bottomToTop\":\"R_bh3GF8\",\"hide-horizontal\":\"oYaRA7u4\",\"hideHorizontal\":\"oYaRA7u4\",\"secondary-button-spinner\":\"NYV0yA2J\",\"secondaryButtonSpinner\":\"NYV0yA2J\",\"main-button-spinner\":\"oq6HKJur\",\"mainButtonSpinner\":\"oq6HKJur\",\"web-app-popup\":\"YEOURXza\",\"webAppPopup\":\"YEOURXza\",\"without-title\":\"gvljUzY9\",\"withoutTitle\":\"gvljUzY9\",\"closeIcon\":\"BvNtfigU\",\"state-back\":\"rC2wkMIk\",\"stateBack\":\"rC2wkMIk\",\"backIconContainer\":\"JXsuZ01s\",\"moreIcon\":\"T58ozRyW\",\"headerPanel\":\"eYrhewMy\",\"icon\":\"a0AI_he5\",\"headerSplitButton\":\"Tl4_05AQ\",\"headerButton\":\"MvCwTbk_\",\"left\":\"emOpAMBm\",\"right\":\"z4C5VD5o\",\"buttonCaptionContainer\":\"dpZR3YT7\",\"backButtonCaption\":\"dWDprnWa\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiBotAppSettings, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { BotAppPermissions, ThemeKey } from '../../../types';\nimport type {\n  PopupOptions,\n  WebApp,\n  WebAppInboundEvent,\n  WebAppModalStateType,\n  WebAppOutboundEvent,\n} from '../../../types/webapp';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { convertToApiChatType } from '../../../global/helpers';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectBotAppPermissions,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { getGeolocationStatus, IS_GEOLOCATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle.ts';\nimport download from '../../../util/download';\nimport { extractCurrentThemeParams, validateHexColor } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport renderText from '../../common/helpers/renderText';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useFullscreen, { checkIfFullscreen } from '../../../hooks/window/useFullscreen';\nimport usePopupLimit from './hooks/usePopupLimit';\nimport useWebAppFrame from './hooks/useWebAppFrame';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Modal from '../../ui/Modal';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\n\nimport styles from './WebAppModalTabContent.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n  position?: 'left' | 'right' | 'top' | 'bottom';\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n  webApp?: WebApp;\n  registerSendEventCallback: (callback: (event: WebAppOutboundEvent) => void) => void;\n  registerReloadFrameCallback: (callback: (url: string) => void) => void;\n  onContextMenuButtonClick: (e: React.MouseEvent) => void;\n  isTransforming?: boolean;\n  isMultiTabSupported?: boolean;\n  modalHeight: number;\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n  botAppSettings?: ApiBotAppSettings;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n  isPremium?: boolean;\n  modalState?: WebAppModalStateType;\n  botAppPermissions?: BotAppPermissions;\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst ANIMATION_WAIT = 400;\nconst COLLAPSING_WAIT = 350;\nconst POPUP_SEQUENTIAL_LIMIT = 3;\nconst POPUP_RESET_DELAY = 2000; // 2s\nconst APP_NAME_DISPLAY_DURATION = 3800;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModalTabContent: FC<OwnProps & StateProps> = ({\n  modal,\n  webApp,\n  bot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n  registerSendEventCallback,\n  registerReloadFrameCallback,\n  isTransforming,\n  modalState,\n  isMultiTabSupported,\n  onContextMenuButtonClick,\n  botAppPermissions,\n  botAppSettings,\n  modalHeight,\n}) => {\n  const {\n    closeActiveWebApp,\n    sendWebViewData,\n    toggleAttachBot,\n    openTelegramLink,\n    setWebAppPaymentSlug,\n    switchBotInline,\n    sharePhoneWithBot,\n    updateWebApp,\n    resetPaymentStatus,\n    openChatWithInfo,\n    showNotification,\n    openEmojiStatusAccessModal,\n    openLocationAccessModal,\n    changeWebAppModalState,\n    closeWebAppModal,\n    openPreparedInlineMessageModal,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [secondaryButton, setSecondaryButton] = useState<WebAppButton | undefined>();\n\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n\n  const [popupParameters, setPopupParameters] = useState<PopupOptions | undefined>();\n  const [isRequestingPhone, setIsRequestingPhone] = useState(false);\n  const [isRequestingWriteAccess, setIsRequestingWriteAccess] = useState(false);\n  const [requestedFileDownload, setRequestedFileDownload] = useState<{ url: string; fileName: string } | undefined>();\n  const [bottomBarColor, setBottomBarColor] = useState<string | undefined>();\n  const {\n    unlockPopupsAt, handlePopupOpened, handlePopupClosed,\n  } = usePopupLimit(POPUP_SEQUENTIAL_LIMIT, POPUP_RESET_DELAY);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const headerButtonRef = useRef<HTMLDivElement>();\n\n  const headerButtonCaptionRef = useRef<HTMLDivElement>();\n\n  const isFullscreen = modalState === 'fullScreen';\n  const isMinimizedState = modalState === 'minimized';\n\n  const exitFullScreenCallback = useLastCallback(() => {\n    setTimeout(() => {\n      changeWebAppModalState({ state: 'maximized' });\n    }, COLLAPSING_WAIT);\n  });\n\n  const fullscreenElementRef = useRef<HTMLElement>();\n\n  useEffect(() => {\n    fullscreenElementRef.current = document.querySelector('#portals') as HTMLElement;\n  }, []);\n\n  const [, setFullscreen, exitFullscreen] = useFullscreen(fullscreenElementRef, exitFullScreenCallback);\n\n  const activeWebApp = modal?.activeWebAppKey ? modal.openedWebApps[modal.activeWebAppKey] : undefined;\n  const { appName: activeWebAppName, backgroundColor } = activeWebApp || {};\n  const {\n    url, buttonText, isBackButtonVisible,\n  } = webApp || {};\n\n  const {\n    placeholderPath,\n  } = botAppSettings || {};\n\n  const isCloseModalOpen = Boolean(webApp?.isCloseModalOpen);\n  const isRemoveModalOpen = Boolean(webApp?.isRemoveModalOpen);\n\n  const webAppKey = webApp && getWebAppKey(webApp);\n  const activeWebAppKey = activeWebApp && getWebAppKey(activeWebApp);\n\n  const isActive = (activeWebApp && webApp) && activeWebAppKey === webAppKey;\n\n  const isAvailable = IS_GEOLOCATION_SUPPORTED;\n  const isAccessRequested = botAppPermissions?.geolocation !== undefined;\n  const isAccessGranted = Boolean(botAppPermissions?.geolocation);\n\n  const updateCurrentWebApp = useLastCallback((updatedPartialWebApp: Partial<WebApp>) => {\n    if (!webAppKey) return;\n    updateWebApp({ key: webAppKey, update: updatedPartialWebApp });\n  });\n\n  const themeParams = useMemo(() => {\n    return extractCurrentThemeParams();\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [theme]);\n\n  useEffect(() => {\n    setBottomBarColor(themeParams.secondary_bg_color);\n  }, [themeParams]);\n\n  const themeBackgroundColor = themeParams.bg_color;\n  const [backgroundColorFromEvent, setBackgroundColorFromEvent] = useState<string | undefined>();\n  const backgroundColorFromSettings = theme === 'light' ? botAppSettings?.backgroundColor\n    : botAppSettings?.backgroundDarkColor;\n\n  useEffect(() => {\n    const color = backgroundColorFromEvent || backgroundColorFromSettings || themeBackgroundColor;\n\n    updateCurrentWebApp({ backgroundColor: color });\n  }, [themeBackgroundColor, backgroundColorFromEvent, backgroundColorFromSettings]);\n\n  const themeHeaderColor = themeParams.bg_color;\n  const [headerColorFromEvent, setHeaderColorFromEvent] = useState<string | undefined>();\n  const headerColorFromSettings = theme === 'light' ? botAppSettings?.headerColor\n    : botAppSettings?.headerDarkColor;\n\n  useEffect(() => {\n    const color = headerColorFromEvent || headerColorFromSettings || themeHeaderColor;\n\n    updateCurrentWebApp({ headerColor: color });\n  }, [themeHeaderColor, headerColorFromEvent, headerColorFromSettings]);\n\n  const frameRef = useRef<HTMLIFrameElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isOpen = modal?.isModalOpen || false;\n  const isSimple = Boolean(buttonText);\n\n  const {\n    reloadFrame, sendEvent, sendFullScreenChanged, sendViewport, sendSafeArea, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isFullscreen, isSimple, handleEvent, webApp, markLoaded);\n\n  useEffect(() => {\n    if (isActive) registerSendEventCallback(sendEvent);\n  }, [sendEvent, registerSendEventCallback, isActive]);\n\n  useEffect(() => {\n    if (isActive) registerReloadFrameCallback(reloadFrame);\n  }, [reloadFrame, registerReloadFrameCallback, isActive]);\n\n  const isMainButtonVisible = isLoaded && mainButton?.isVisible && mainButton.text.trim().length > 0;\n  const isSecondaryButtonVisible = isLoaded && secondaryButton?.isVisible && secondaryButton.text.trim().length > 0;\n\n  const handleHideCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ isCloseModalOpen: false });\n  });\n  const handleConfirmCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ shouldConfirmClosing: false, isCloseModalOpen: false });\n    setTimeout(() => {\n      closeActiveWebApp();\n    }, ANIMATION_WAIT);\n  });\n\n  const handleHideRemoveModal = useLastCallback(() => {\n    updateCurrentWebApp({ isRemoveModalOpen: false });\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  });\n\n  const handleSecondaryButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'secondary_button_pressed',\n    });\n  });\n\n  const handleAppPopupClose = useLastCallback((buttonId?: string) => {\n    setPopupParameters(undefined);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  });\n\n  const handleAppPopupModalClose = useLastCallback(() => {\n    handleAppPopupClose();\n  });\n\n  const sendThemeCallback = useLastCallback(() => {\n    sendTheme();\n  });\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendThemeCallback();\n    }, ANIMATION_WAIT);\n  }, [theme]);\n\n  const setFullscreenCallback = useLastCallback(() => {\n    if (!checkIfFullscreen() && isActive) {\n      setFullscreen?.();\n    }\n  });\n\n  const exitIfFullscreenCallback = useLastCallback(() => {\n    if (checkIfFullscreen() && isActive) {\n      exitFullscreen?.();\n    }\n  });\n\n  const sendFullScreenChangedCallback = useLastCallback(\n    (value: boolean) => {\n      if (isActive) sendFullScreenChanged(value);\n    },\n  );\n\n  useEffect(() => {\n    if (isFullscreen) {\n      setFullscreenCallback();\n      sendFullScreenChangedCallback(true);\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChangedCallback(false);\n    }\n  }, [isFullscreen]);\n\n  const visibilityChangedCallBack = useLastCallback((visibility: boolean) => {\n    sendEvent({\n      eventType: 'visibility_changed',\n      eventData: {\n        is_visible: visibility,\n      },\n    });\n  });\n\n  useEffect(() => {\n    if (isLoaded) {\n      visibilityChangedCallBack(Boolean(isActive));\n    }\n  }, [isActive, isLoaded]);\n\n  useEffectWithPrevDeps(([prevModalState]) => {\n    if (modalState === 'minimized') {\n      visibilityChangedCallBack(false);\n    }\n    if (modalState && prevModalState === 'minimized') {\n      visibilityChangedCallBack(true);\n    }\n  }, [modalState]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n      resetPaymentStatus();\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, webApp?.slug]);\n\n  const handleRemoveAttachBot = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: false,\n    });\n    closeActiveWebApp();\n  });\n\n  const handleRejectPhone = useLastCallback(() => {\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleAcceptPhone = useLastCallback(() => {\n    sharePhoneWithBot({ botId: bot!.id });\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'sent',\n      },\n    });\n  });\n\n  const handleRejectFileDownload = useLastCallback((shouldCloseActive?: boolean) => {\n    if (shouldCloseActive) {\n      setRequestedFileDownload(undefined);\n      handlePopupClosed();\n    }\n\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleRejectWriteAccess = useLastCallback(() => {\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  const handleAcceptWriteAccess = useLastCallback(async () => {\n    if (!bot) return;\n    const result = await callApi('allowBotSendMessages', { bot });\n    if (!result) {\n      handleRejectWriteAccess();\n      return;\n    }\n\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'allowed',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  async function handleRequestWriteAccess() {\n    if (!bot) return;\n    const canWrite = await callApi('fetchBotCanSendMessage', {\n      bot,\n    });\n\n    if (canWrite) {\n      sendEvent({\n        eventType: 'write_access_requested',\n        eventData: {\n          status: 'allowed',\n        },\n      });\n    }\n    setIsRequestingWriteAccess(!canWrite);\n  }\n\n  async function handleCheckDownloadFile(fileUrl: string, fileName: string) {\n    const canDownload = await callApi('checkBotDownloadFileParams', {\n      bot: bot!,\n      url: fileUrl,\n      fileName,\n    });\n\n    if (!canDownload) {\n      sendEvent({\n        eventType: 'file_download_requested',\n        eventData: {\n          status: 'cancelled',\n        },\n      });\n      return;\n    }\n\n    setRequestedFileDownload({ url: fileUrl, fileName });\n    handlePopupOpened();\n  }\n\n  const handleDownloadFile = useLastCallback(() => {\n    if (!requestedFileDownload) return;\n    setRequestedFileDownload(undefined);\n    handlePopupClosed();\n\n    download(requestedFileDownload.url, requestedFileDownload.fileName);\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'downloading',\n      },\n    });\n  });\n\n  async function handleInvokeCustomMethod(requestId: string, method: string, parameters: string) {\n    const result = await callApi('invokeWebViewCustomMethod', {\n      bot: bot!,\n      customMethod: method,\n      parameters,\n    });\n\n    sendEvent({\n      eventType: 'custom_method_invoked',\n      eventData: {\n        req_id: requestId,\n        ...result,\n      },\n    });\n  }\n\n  useEffect(() => {\n    if (!isOpen) {\n      setPopupParameters(undefined);\n      setIsRequestingPhone(false);\n      setIsRequestingWriteAccess(false);\n      setMainButton(undefined);\n      setSecondaryButton(undefined);\n      updateCurrentWebApp({\n        isSettingsButtonVisible: false,\n        shouldConfirmClosing: false,\n        isBackButtonVisible: false,\n        isCloseModalOpen: false,\n        isRemoveModalOpen: false,\n      });\n      markUnloaded();\n    }\n  }, [isOpen]);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChatWithInfo({ id: bot!.id });\n  });\n\n  function handleEvent(event: WebAppInboundEvent) {\n    const { eventType, eventData } = event;\n\n    if (eventType === 'web_app_request_fullscreen') {\n      if (getIsWebAppsFullscreenSupported()) {\n        changeWebAppModalState({ state: 'fullScreen' });\n      } else {\n        sendEvent({\n          eventType: 'fullscreen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n    }\n\n    if (eventType === 'web_app_exit_fullscreen') {\n      exitIfFullscreenCallback();\n    }\n\n    if (eventType === 'web_app_open_tg_link') {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl, shouldIgnoreCache: eventData.force_request });\n      closeActiveWebApp();\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      updateCurrentWebApp({ isBackButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_setup_settings_button') {\n      updateCurrentWebApp({ isSettingsButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      setBackgroundColorFromEvent(validateHexColor(eventData.color) ? eventData.color : undefined);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const key = eventData.color_key;\n      setHeaderColorFromEvent(eventData.color || (key ? themeParams[key] : undefined));\n    }\n\n    if (eventType === 'web_app_set_bottom_bar_color') {\n      setBottomBarColor(eventData.color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeActiveWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_secondary_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setSecondaryButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n        position: eventData.position,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      updateCurrentWebApp({ shouldConfirmClosing: true });\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (popupParameters || !eventData.message.trim().length || !eventData.buttons?.length\n        || eventData.buttons.length > 3 || isRequestingPhone || isRequestingWriteAccess\n        || unlockPopupsAt > Date.now()) {\n        handleAppPopupClose(undefined);\n        return;\n      }\n\n      setPopupParameters(eventData);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeActiveWebApp();\n    }\n\n    if (eventType === 'web_app_request_phone') {\n      if (popupParameters || isRequestingWriteAccess || unlockPopupsAt > Date.now()) {\n        handleRejectPhone();\n        return;\n      }\n\n      setIsRequestingPhone(true);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_request_write_access') {\n      if (popupParameters || isRequestingPhone || unlockPopupsAt > Date.now()) {\n        handleRejectWriteAccess();\n        return;\n      }\n\n      handleRequestWriteAccess();\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_invoke_custom_method') {\n      const { method, params, req_id: requestId } = eventData;\n      handleInvokeCustomMethod(requestId, method, JSON.stringify(params));\n    }\n\n    if (eventType === 'web_app_request_file_download') {\n      if (requestedFileDownload || unlockPopupsAt > Date.now()) {\n        handleRejectFileDownload();\n        return;\n      }\n      handleCheckDownloadFile(eventData.url, eventData.file_name);\n    }\n\n    if (eventType === 'web_app_send_prepared_message') {\n      if (!bot || !webAppKey) return;\n      const { id } = eventData;\n      openPreparedInlineMessageModal({ botId: bot.id, messageId: id, webAppKey });\n    }\n\n    if (eventType === 'web_app_request_emoji_status_access') {\n      if (!bot) return;\n      openEmojiStatusAccessModal({ bot, webAppKey });\n    }\n\n    if (eventType === 'web_app_check_location') {\n      const handleGeolocationCheck = () => {\n        sendEvent({\n          eventType: 'location_checked',\n          eventData: {\n            available: isAvailable,\n            access_requested: isAccessRequested,\n            access_granted: isAccessGranted,\n          },\n        });\n      };\n\n      handleGeolocationCheck();\n    }\n\n    if (eventType === 'web_app_request_location') {\n      const handleRequestLocation = async () => {\n        const geolocationData = await getGeolocationStatus();\n        const { accessRequested, accessGranted, geolocation } = geolocationData;\n\n        if (!accessGranted || !accessRequested) {\n          sendEvent({\n            eventType: 'location_requested',\n            eventData: {\n              available: false,\n            },\n          });\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n          return;\n        }\n\n        if (isAvailable) {\n          if (isAccessRequested) {\n            sendEvent({\n              eventType: 'location_requested',\n              eventData: {\n                available: Boolean(botAppPermissions?.geolocation),\n                latitude: geolocation?.latitude,\n                longitude: geolocation?.longitude,\n                altitude: geolocation?.altitude,\n                course: geolocation?.heading,\n                speed: geolocation?.speed,\n                horizontal_accuracy: geolocation?.accuracy,\n                vertical_accuracy: geolocation?.altitudeAccuracy,\n              },\n            });\n          } else {\n            openLocationAccessModal({ bot, webAppKey });\n          }\n        } else {\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n        }\n      };\n\n      handleRequestLocation();\n    }\n\n    if (eventType === 'web_app_open_location_settings') {\n      handleOpenChat();\n    }\n  }\n\n  const mainButtonCurrentColor = useCurrentOrPrev(mainButton?.color, true);\n  const mainButtonCurrentTextColor = useCurrentOrPrev(mainButton?.textColor, true);\n  const mainButtonCurrentIsActive = useCurrentOrPrev(mainButton && Boolean(mainButton.isActive), true);\n  const mainButtonCurrentText = useCurrentOrPrev(mainButton?.text, true);\n\n  const secondaryButtonCurrentPosition = useCurrentOrPrev(secondaryButton?.position, true);\n  const secondaryButtonCurrentColor = useCurrentOrPrev(secondaryButton?.color, true);\n  const secondaryButtonCurrentTextColor = useCurrentOrPrev(secondaryButton?.textColor, true);\n  const secondaryButtonCurrentIsActive = useCurrentOrPrev(secondaryButton && Boolean(secondaryButton.isActive), true);\n  const secondaryButtonCurrentText = useCurrentOrPrev(secondaryButton?.text, true);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideMainButton, setShouldHideMainButton] = useState(true);\n  const [shouldHideSecondaryButton, setShouldHideSecondaryButton] = useState(true);\n  const [shouldShowMainButton, setShouldShowMainButton] = useState(false);\n  const [shouldShowSecondaryButton, setShouldShowSecondaryButton] = useState(false);\n\n  const [shouldShowAppNameInFullscreen, setShouldShowAppNameInFullscreen] = useState(false);\n\n  const [backButtonTextWidth, setBackButtonTextWidth] = useState(0);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n      sendSafeArea();\n    }, isTransforming ? 0 : ANIMATION_WAIT);\n  }, [shouldShowSecondaryButton, shouldHideSecondaryButton,\n    shouldShowMainButton, shouldShowMainButton,\n    secondaryButton?.position, sendViewport, isTransforming, modalHeight,\n    sendSafeArea]);\n\n  const isVerticalLayout = secondaryButtonCurrentPosition === 'top' || secondaryButtonCurrentPosition === 'bottom';\n  const isHorizontalLayout = !isVerticalLayout;\n\n  const rowsCount = (isVerticalLayout && shouldShowMainButton && shouldShowSecondaryButton) ? 2\n    : shouldShowMainButton || shouldShowSecondaryButton ? 1 : 0;\n\n  const hideDirection = (isHorizontalLayout\n    && (!shouldHideMainButton && !shouldHideSecondaryButton)) ? 'horizontal' : 'vertical';\n\n  const mainButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const mainButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const appNameDisplayTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (isFullscreen && isOpen && Boolean(activeWebAppName)) {\n      setShouldShowAppNameInFullscreen(true);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n\n      appNameDisplayTimeout.current = setTimeout(() => {\n        setShouldShowAppNameInFullscreen(false);\n        appNameDisplayTimeout.current = undefined;\n      }, APP_NAME_DISPLAY_DURATION);\n    } else {\n      setShouldShowAppNameInFullscreen(false);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n        appNameDisplayTimeout.current = undefined;\n      }\n    }\n\n    return () => {\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n    };\n  }, [isFullscreen, isOpen, activeWebAppName]);\n\n  useEffect(() => {\n    if (mainButtonChangeTimeout.current) clearTimeout(mainButtonChangeTimeout.current);\n    if (mainButtonFastTimeout.current) clearTimeout(mainButtonFastTimeout.current);\n\n    if (isMainButtonVisible) {\n      mainButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowMainButton(true);\n      }, 35);\n      setShouldHideMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isMainButtonVisible) {\n      setShouldShowMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideMainButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isMainButtonVisible]);\n\n  useEffect(() => {\n    if (secondaryButtonChangeTimeout.current) clearTimeout(secondaryButtonChangeTimeout.current);\n    if (secondaryButtonFastTimeout.current) clearTimeout(secondaryButtonFastTimeout.current);\n\n    if (isSecondaryButtonVisible) {\n      secondaryButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowSecondaryButton(true);\n      }, 35);\n      setShouldHideSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isSecondaryButtonVisible) {\n      setShouldShowSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideSecondaryButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isSecondaryButtonVisible]);\n\n  useEffect(() => {\n    if (!shouldShowSecondaryButton && !shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowSecondaryButton, shouldShowMainButton]);\n\n  const frameStyle = buildStyle(\n    `background-color: ${backgroundColor || 'var(--color-background)'}`,\n    isTransforming && 'pointer-events: none;',\n  );\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChanged(false);\n      changeWebAppModalState({ state: 'maximized' });\n      closeWebAppModal();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    exitIfFullscreenCallback();\n  });\n\n  const handleShowContextMenu = useLastCallback((e: React.MouseEvent) => {\n    onContextMenuButtonClick(e);\n  });\n\n  const backIconClass = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n  const backButtonCaption = shouldShowAppNameInFullscreen ? activeWebAppName\n    : oldLang(isBackButtonVisible ? 'Back' : 'Close');\n\n  const hasHeaderElement = headerButtonCaptionRef?.current;\n\n  useEffect(() => {\n    const width = headerButtonCaptionRef?.current?.clientWidth || 0;\n    setBackButtonTextWidth(width);\n  }, [backButtonCaption, hasHeaderElement]);\n\n  function getBackButtonActiveKey() {\n    if (shouldShowAppNameInFullscreen) return 0;\n    return isBackButtonVisible ? 1 : 2;\n  }\n\n  function renderFullscreenBackButtonCaption() {\n    return (\n      <span\n        className={styles.buttonCaptionContainer}\n        style={\n          `width: ${backButtonTextWidth}px;`\n        }\n      >\n        <Transition\n          activeKey={getBackButtonActiveKey()}\n          name=\"slideFade\"\n        >\n          <div\n            ref={headerButtonCaptionRef}\n            className={styles.backButtonCaption}\n          >\n            {backButtonCaption}\n          </div>\n        </Transition>\n      </span>\n    );\n  }\n\n  function renderFullscreenHeaderPanel() {\n    return (\n      <div className={styles.headerPanel}>\n        <div ref={headerButtonRef} className={styles.headerButton} onClick={handleBackClick}>\n          <div className={styles.backIconContainer}>\n            <div className={backIconClass} />\n          </div>\n          {renderFullscreenBackButtonCaption()}\n        </div>\n        <div className={styles.headerSplitButton}>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.left,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-label={lang('WebAppCollapse')}\n            onClick={handleCollapseClick}\n          >\n            <Icon\n              name=\"down\"\n              className={styles.icon}\n            />\n          </div>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.right,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-haspopup=\"menu\"\n            aria-label={lang('AriaMoreButton')}\n            onClick={handleShowContextMenu}\n          >\n            <Icon\n              name=\"more\"\n              className={buildClassName(\n                styles.icon,\n                styles.moreIcon,\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderDefaultPlaceholder() {\n    const className = buildClassName(styles.loadingPlaceholder, styles.defaultPlaceholderGrid, isLoaded && styles.hide);\n    return (\n      <div className={className}>\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n      </div>\n    );\n  }\n\n  function renderPlaceholder() {\n    if (!placeholderPath) {\n      return renderDefaultPlaceholder();\n    }\n    return (\n      <svg\n        className={buildClassName(styles.loadingPlaceholder, isLoaded && styles.hide)}\n        viewBox=\"0 0 512 512\"\n      >\n        <path className={styles.placeholderPath} d={placeholderPath} />\n      </svg>\n    );\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(\n        styles.root,\n        !isActive && styles.hidden,\n        isMultiTabSupported && styles.multiTab,\n      )}\n    >\n      {isFullscreen && getIsWebAppsFullscreenSupported() && renderFullscreenHeaderPanel()}\n      {!isMinimizedState && renderPlaceholder()}\n      <iframe\n        className={buildClassName(\n          styles.frame,\n          shouldDecreaseWebFrameSize && styles.withButton,\n          !isLoaded && styles.hide,\n        )}\n        style={frameStyle}\n        src={url}\n        title={`${bot?.firstName} Web App`}\n        sandbox={SANDBOX_ATTRIBUTES}\n        allow=\"camera; microphone; geolocation; clipboard-write;\"\n        allowFullScreen\n        ref={frameRef}\n      />\n      {!isMinimizedState && (\n        <div\n          style={`background-color: ${bottomBarColor};`}\n          className={buildClassName(\n            styles.buttonsContainer,\n            secondaryButtonCurrentPosition === 'left' && styles.leftToRight,\n            secondaryButtonCurrentPosition === 'right' && styles.rightToLeft,\n            secondaryButtonCurrentPosition === 'top' && styles.topToBottom,\n            secondaryButtonCurrentPosition === 'bottom' && styles.bottomToTop,\n            hideDirection === 'horizontal' && styles.hideHorizontal,\n            rowsCount === 1 && styles.oneRow,\n            rowsCount === 2 && styles.twoRows,\n          )}\n        >\n          <Button\n            className={buildClassName(\n              styles.secondaryButton,\n              shouldShowSecondaryButton && !shouldHideSecondaryButton && styles.visible,\n              shouldHideSecondaryButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${secondaryButtonCurrentColor}; color: ${secondaryButtonCurrentTextColor}`}\n            disabled={!secondaryButtonCurrentIsActive && !secondaryButton?.isProgressVisible}\n            nonInteractive={secondaryButton?.isProgressVisible}\n            onClick={handleSecondaryButtonClick}\n            size=\"smaller\"\n          >\n            {!secondaryButton?.isProgressVisible && secondaryButtonCurrentText}\n            {secondaryButton?.isProgressVisible\n              && <Spinner className={styles.mainButtonSpinner} color=\"blue\" />}\n          </Button>\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && !shouldHideMainButton && styles.visible,\n              shouldHideMainButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive && !mainButton?.isProgressVisible}\n            nonInteractive={mainButton?.isProgressVisible}\n            onClick={handleMainButtonClick}\n            size=\"smaller\"\n          >\n            {!mainButton?.isProgressVisible && mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </div>\n      )}\n      {popupParameters && (\n        <Modal\n          isOpen={Boolean(popupParameters)}\n          title={popupParameters.title || NBSP}\n          onClose={handleAppPopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !popupParameters.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {popupParameters.message}\n          <div className=\"dialog-buttons mt-2\">\n            {popupParameters.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n\n                onClick={() => handleAppPopupClose(button.id)}\n              >\n                {button.text || oldLang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n\n      <ConfirmDialog\n        isOpen={isRequestingPhone}\n        onClose={handleRejectPhone}\n        title={oldLang('ShareYouPhoneNumberTitle')}\n        text={oldLang('AreYouSureShareMyContactInfoBot')}\n        confirmHandler={handleAcceptPhone}\n        confirmLabel={oldLang('ContactShare')}\n      />\n      <ConfirmDialog\n        isOpen={isRequestingWriteAccess}\n        onClose={handleRejectWriteAccess}\n        title={oldLang('lng_bot_allow_write_title')}\n        text={oldLang('lng_bot_allow_write')}\n        confirmHandler={handleAcceptWriteAccess}\n        confirmLabel={oldLang('lng_bot_allow_write_confirm')}\n      />\n      <ConfirmDialog\n        isOpen={Boolean(requestedFileDownload)}\n        title={oldLang('BotDownloadFileTitle')}\n        textParts={lang('BotDownloadFileDescription', {\n          bot: bot?.firstName,\n          filename: requestedFileDownload?.fileName,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n        })}\n        confirmLabel={oldLang('BotDownloadFileButton')}\n        onClose={handleRejectFileDownload}\n        confirmHandler={handleDownloadFile}\n      />\n\n      <ConfirmDialog\n        isOpen={isCloseModalOpen}\n        onClose={handleHideCloseModal}\n        title={oldLang('lng_bot_close_warning_title')}\n        text={oldLang('lng_bot_close_warning')}\n        confirmHandler={handleConfirmCloseModal}\n        confirmIsDestructive\n        confirmLabel={oldLang('lng_bot_close_warning_sure')}\n      />\n      <ConfirmDialog\n        isOpen={isRemoveModalOpen}\n        onClose={handleHideRemoveModal}\n        title={oldLang('BotRemoveFromMenuTitle')}\n        textParts={renderText(oldLang('BotRemoveFromMenu', bot?.firstName), ['simple_markdown'])}\n        confirmHandler={handleRemoveAttachBot}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n    const modalState = modal?.modalState;\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const userFullInfo = activeBotId ? selectUserFullInfo(global, activeBotId) : undefined;\n    const botAppSettings = userFullInfo?.botInfo?.appSettings;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status: regularPaymentStatus } = selectTabState(global).payment;\n    const { status: starsPaymentStatus, inputInvoice: starsInputInvoice } = selectTabState(global).starsPayment;\n    const botAppPermissions = bot ? selectBotAppPermissions(global, bot.id) : undefined;\n\n    const paymentStatus = starsPaymentStatus || regularPaymentStatus;\n\n    return {\n      attachBot,\n      bot,\n      currentUser,\n      theme,\n      isPaymentModalOpen: isPaymentModalOpen || Boolean(starsInputInvoice),\n      paymentStatus,\n      modalState,\n      botAppPermissions,\n      botAppSettings,\n    };\n  },\n)(WebAppModalTabContent));\n","import { useRef, useState } from '../../../../lib/teact/teact';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function usePopupLimit(sequentialLimit: number, resetAfter: number) {\n  const [unlockPopupsAt, setUnlockPopupsAt] = useState(0);\n  const sequentialCalls = useRef(0);\n  const lastClosedDate = useRef(0);\n\n  const handlePopupOpened = useLastCallback(() => {\n    const now = Date.now();\n\n    if (now - lastClosedDate.current > resetAfter) {\n      sequentialCalls.current = 0;\n    }\n\n    sequentialCalls.current += 1;\n\n    if (sequentialCalls.current >= sequentialLimit) {\n      setUnlockPopupsAt(now + resetAfter);\n    }\n  });\n\n  const handlePopupClosed = useLastCallback(() => {\n    if (unlockPopupsAt < Date.now()) { // Prevent confused user from extending lock time\n      lastClosedDate.current = Date.now();\n    }\n  });\n\n  return {\n    unlockPopupsAt,\n    handlePopupOpened,\n    handlePopupClosed,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"XWfkIDLY\",\"multi-tab\":\"gBVR7Hec\",\"multiTab\":\"gBVR7Hec\",\"close-icon\":\"RuJ3d9N6\",\"closeIcon\":\"RuJ3d9N6\",\"minimized\":\"dJ1Ld_PX\",\"fullScreen\":\"ciSTWz16\",\"tabs\":\"X18WbDa5\",\"tool-bar\":\"qK4q0Sat\",\"toolBar\":\"qK4q0Sat\",\"tab-button-wrapper\":\"oHX2d8Or\",\"tabButtonWrapper\":\"oHX2d8Or\",\"tab-button\":\"O4NxErFX\",\"tabButton\":\"O4NxErFX\",\"tab-right-mask\":\"dgdyQDsZ\",\"tabRightMask\":\"dgdyQDsZ\",\"tab-close-button\":\"xGefqS93\",\"tabCloseButton\":\"xGefqS93\",\"tab-button-curve-path\":\"bOuMHiVw\",\"tabButtonCurvePath\":\"bOuMHiVw\",\"tab-button-left-curve\":\"f7EicoVH\",\"tabButtonLeftCurve\":\"f7EicoVH\",\"tab-button-right-curve\":\"s6pBIYMI\",\"tabButtonRightCurve\":\"s6pBIYMI\",\"more-apps-tab-icon\":\"Obu3ui67\",\"moreAppsTabIcon\":\"Obu3ui67\",\"avatar-container\":\"z39ojrWc\",\"avatarContainer\":\"z39ojrWc\",\"web-app-tab-more-menu\":\"txS0KiU0\",\"webAppTabMoreMenu\":\"txS0KiU0\",\"more-button\":\"kKPD09tc\",\"moreButton\":\"kKPD09tc\",\"tab-more-button\":\"gkji2_RB\",\"tabMoreButton\":\"gkji2_RB\",\"more-apps-button\":\"cEuW1_hJ\",\"moreAppsButton\":\"cEuW1_hJ\",\"window-state-button\":\"XpHR_yo0\",\"windowStateButton\":\"XpHR_yo0\",\"header-button\":\"GE5AkJOU\",\"headerButton\":\"GE5AkJOU\",\"fullscreenButton\":\"otlJULGy\",\"tab-close-icon\":\"DoeOewUR\",\"tabCloseIcon\":\"DoeOewUR\",\"state-icon\":\"YRMGpqUS\",\"stateIcon\":\"YRMGpqUS\",\"icon\":\"b13oE9uA\",\"tab-avatar\":\"tI6TE6HP\",\"tabAvatar\":\"tI6TE6HP\",\"state-back\":\"IWA50OWU\",\"stateBack\":\"IWA50OWU\",\"loading-spinner\":\"ZvO65ZK4\",\"loadingSpinner\":\"ZvO65ZK4\",\"hide\":\"_90e04Jo\",\"frame\":\"zA1w1IOq\",\"with-button\":\"XsPaFD9G\",\"withButton\":\"XsPaFD9G\",\"main-button\":\"Os96PEjQ\",\"mainButton\":\"Os96PEjQ\",\"visible\":\"C8aMayAw\",\"hidden\":\"GllU9an9\",\"main-button-spinner\":\"nYSFrf_X\",\"mainButtonSpinner\":\"nYSFrf_X\",\"web-app-popup\":\"cTVKrIjM\",\"webAppPopup\":\"cTVKrIjM\",\"without-title\":\"d0DG1SkF\",\"withoutTitle\":\"d0DG1SkF\"};","import { type MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef,\n  useSignal, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { Point, Size, ThemeKey } from '../../../types';\nimport type { WebApp, WebAppOutboundEvent } from '../../../types/webapp';\n\nimport { RESIZE_HANDLE_CLASS_NAME } from '../../../config';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectCurrentChat, selectTheme, selectUser,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { getColorLuma } from '../../../util/colors';\nimport { hexToRgb } from '../../../util/switchTheme';\nimport windowSize from '../../../util/windowSize';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDraggable from '../../../hooks/useDraggable';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport MinimizedWebAppModal from './MinimizedWebAppModal';\nimport MoreAppsTabContent from './MoreAppsTabContent';\nimport WebAppModalTabContent from './WebAppModalTabContent';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppModalTab = {\n  bot?: ApiUser;\n  webApp: WebApp;\n  isOpen: boolean;\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  cachedSize?: Size;\n  cachedPosition?: Point;\n};\n\nconst PROLONG_INTERVAL = 45000; // 45s\nconst LUMA_THRESHOLD = 128;\n\nconst MINIMIZED_STATE_SIZE = { width: 300, height: 40 };\nconst DEFAULT_MAXIMIZED_STATE_SIZE = { width: 420, height: 730 };\nconst MAXIMIZED_STATE_MINIMUM_SIZE = { width: 300, height: 300 };\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  cachedSize,\n  cachedPosition,\n}) => {\n  const {\n    closeActiveWebApp,\n    closeWebAppModal,\n    prolongWebView,\n    toggleAttachBot,\n    openChat,\n    changeWebAppModalState,\n    openWebAppTab,\n    updateWebApp,\n    openMoreAppsTab,\n    closeMoreAppsTab,\n    updateMiniAppCachedPosition,\n    updateMiniAppCachedSize,\n  } = getActions();\n\n  const [getMaximizedStateSize, setMaximizedStateSize] = useSignal(cachedSize || DEFAULT_MAXIMIZED_STATE_SIZE);\n\n  function getSize() {\n    if (modal?.modalState === 'fullScreen') return windowSize.get();\n    if (modal?.modalState === 'maximized') return getMaximizedStateSize();\n    return MINIMIZED_STATE_SIZE;\n  }\n  function getMinimumSize() {\n    if (modal?.modalState === 'maximized') return MAXIMIZED_STATE_MINIMUM_SIZE;\n    return undefined;\n  }\n\n  const {\n    openedWebApps, activeWebAppKey, openedOrderedKeys, sessionKeys, isMoreAppsTabActive,\n  } = modal || {};\n  const activeWebApp = activeWebAppKey ? openedWebApps?.[activeWebAppKey] : undefined;\n  const {\n    isBackButtonVisible, headerColor, backgroundColor, isSettingsButtonVisible,\n  } = activeWebApp || {};\n\n  const tabs = useMemo(() => {\n    return openedOrderedKeys?.map((key) => {\n      const webApp = openedWebApps![key];\n      return {\n        bot: getGlobal().users.byId[webApp.botId],\n        webApp,\n        isOpen: Boolean(activeWebApp && (key === getWebAppKey(activeWebApp))),\n      };\n    });\n  }, [openedOrderedKeys, openedWebApps, activeWebApp]);\n\n  const { isMobile } = useAppLayout();\n  const isOpen = modal?.isModalOpen || false;\n  const isMaximizedState = modal?.modalState === 'maximized';\n  const isMinimizedState = modal?.modalState === 'minimized';\n  const isFullScreen = modal?.modalState === 'fullScreen';\n\n  const supportMultiTabMode = !isMobile;\n  const ref = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => ref.current!);\n\n  const getRootElement = useLastCallback(\n    () => ref.current!,\n  );\n\n  const getMenuElement = useLastCallback(\n    () => menuRef.current!,\n  );\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const [isDraggingEnabled, setIsDraggingEnabled] = useState(false);\n\n  const headerElement = headerRef.current;\n  const containerElement = ref.current;\n\n  useEffect(() => {\n    setIsDraggingEnabled(Boolean(supportMultiTabMode && headerElement && containerElement && !isFullScreen));\n  }, [supportMultiTabMode, headerElement, containerElement, isFullScreen]);\n\n  useEffect(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  }, [supportMultiTabMode]);\n\n  const {\n    isDragging,\n    isResizing,\n    style: draggableStyle,\n    size,\n    position,\n  } = useDraggable(\n    ref,\n    headerRef,\n    isDraggingEnabled,\n    getSize(),\n    isFullScreen,\n    getMinimumSize(),\n    cachedPosition,\n  );\n\n  const x = position?.x;\n  const y = position?.y;\n  useEffect(() => {\n    if (!isDragging && x !== undefined && y !== undefined) {\n      updateMiniAppCachedPosition({ position: { x, y } });\n    }\n  }, [isDragging, x, y]);\n\n  useEffect(() => {\n    if (!isDragging && size && isMaximizedState) {\n      updateMiniAppCachedSize({ size });\n    }\n  }, [isDragging, isMaximizedState, size]);\n\n  const currentSize = size || getSize();\n\n  const currentWidth = currentSize.width;\n  const currentHeight = currentSize.height;\n\n  useEffect(() => {\n    if (isResizing) {\n      setMaximizedStateSize({ width: currentWidth, height: currentHeight });\n    }\n  }, [currentHeight, currentWidth, isResizing, setMaximizedStateSize]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const {\n    queryId,\n  } = activeWebApp || {};\n\n  const openTabsCount = openedWebApps ? Object.values(openedWebApps).length : 0;\n\n  useInterval(() => {\n    if (!openedWebApps) return;\n    Object.keys(openedWebApps).forEach((key) => {\n      const webApp = openedWebApps[key];\n      if (webApp.queryId) {\n        prolongWebView({\n          botId: webApp.botId,\n          queryId: webApp.queryId,\n          peerId: webApp.peerId || chat!.id,\n          replyInfo: webApp.replyInfo,\n        });\n      }\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const sendEventCallback = useRef<((event: WebAppOutboundEvent) => void) | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const reloadFrameCallback = useRef<((url: string) => void) | null>(null);\n\n  const registerSendEventCallback = useLastCallback((callback: (event: WebAppOutboundEvent) => void) => {\n    sendEventCallback.current = callback;\n  });\n\n  const sendEvent = useLastCallback((event: WebAppOutboundEvent) => {\n    if (sendEventCallback.current) {\n      sendEventCallback.current(event);\n    }\n  });\n\n  const registerReloadFrameCallback = useLastCallback((callback: (url: string) => void) => {\n    reloadFrameCallback.current = callback;\n  });\n\n  const reloadFrame = useLastCallback((url: string) => {\n    if (reloadFrameCallback.current) {\n      reloadFrameCallback.current(url);\n    }\n  });\n\n  const handleSettingsButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  });\n\n  const handleRefreshClick = useLastCallback(() => {\n    reloadFrame(activeWebApp!.url);\n  });\n\n  const handleModalClose = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleCloseMoreAppsTab = useLastCallback(() => {\n    closeMoreAppsTab();\n  });\n\n  const handleTabClose = useLastCallback(() => {\n    if (openTabsCount > 1) {\n      closeActiveWebApp();\n    } else {\n      closeWebAppModal();\n    }\n  });\n\n  const handleToggleClick = useLastCallback(() => {\n    if (attachBot) {\n      const key = getWebAppKey(activeWebApp!);\n      updateWebApp({\n        key,\n        update: {\n          isRemoveModalOpen: true,\n        },\n      });\n      return;\n    }\n\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: true,\n    });\n  });\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleModalClose();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'minimized' });\n  });\n\n  const handleFullscreenClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'fullScreen' });\n  });\n\n  const handleOpenMoreAppsTabClick = useLastCallback(() => {\n    openMoreAppsTab();\n  });\n\n  const handleTabClick = useLastCallback((tab: WebAppModalTab) => {\n    openWebAppTab({ webApp: tab.webApp });\n  });\n\n  const openBotChat = useLastCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n  });\n\n  const MoreMenuButton:\n  FC<{ onTrigger: (e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        className={\n          buildClassName(\n            supportMultiTabMode ? styles.tabMoreButton : styles.moreButton,\n            isMenuOpen && 'active',\n          )\n        }\n        round\n        ripple={!isMobile}\n        size={supportMultiTabMode ? 'tiny' : 'smaller'}\n        color=\"translucent\"\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, supportMultiTabMode]);\n\n  function renderMenuItems() {\n    return (\n      <>\n        {chat && bot && chat.id !== bot.id && (\n          <MenuItem icon=\"bots\" onClick={openBotChat}>{oldLang('BotWebViewOpenBot')}</MenuItem>\n        )}\n        <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{oldLang('WebApp.ReloadPage')}</MenuItem>\n        {isSettingsButtonVisible && (\n          <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n            {oldLang('Settings')}\n          </MenuItem>\n        )}\n        {bot?.isAttachBot && (\n          <MenuItem\n            icon={attachBot ? 'stop' : 'install'}\n            onClick={handleToggleClick}\n            destructive={Boolean(attachBot)}\n          >\n            {oldLang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n          </MenuItem>\n        )}\n      </>\n    );\n  }\n\n  function renderMoreMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        ref={menuRef}\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        getTriggerElement={getTriggerElement}\n        getMenuElement={getMenuElement}\n        getRootElement={getRootElement}\n        autoClose\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n      >\n        {renderMenuItems()}\n      </Menu>\n    );\n  }\n\n  function renderDropdownMoreMenu() {\n    return (\n      <DropdownMenu\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        trigger={MoreMenuButton}\n        positionX={supportMultiTabMode ? 'left' : 'right'}\n      >\n        {renderMenuItems()}\n      </DropdownMenu>\n    );\n  }\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  const headerTextVar = useMemo(() => {\n    if (isMoreAppsTabActive) return 'color-text';\n    if (!headerColor) return undefined;\n    const { r, g, b } = hexToRgb(headerColor);\n    const luma = getColorLuma([r, g, b]);\n    const adaptedLuma = theme === 'dark' ? 255 - luma : luma;\n    return adaptedLuma > LUMA_THRESHOLD ? 'color-text' : 'color-background';\n  }, [headerColor, theme, isMoreAppsTabActive]);\n\n  function renderTabCurveBorder(className: string) {\n    return (\n      <svg\n        className={className}\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n      >\n        <path\n          className={styles.tabButtonCurvePath}\n          fill-rule=\"evenodd\"\n          clip-rule=\"evenodd\"\n          d=\"M16 16V0C16 12 12 16 0 16H16Z\"\n        />\n      </svg>\n    );\n  }\n\n  function renderActiveTab() {\n    const style = buildStyle(\n      headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n      headerColor && `--active-tab-background: ${headerColor}`,\n    );\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n        style={style}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.avatarContainer}>\n            <Avatar\n              size=\"mini\"\n              peer={bot}\n            />\n            <MoreMenuButton onTrigger={handleContextMenu} isOpen={isContextMenuOpen} />\n          </div>\n          {attachBot?.shortName ?? bot?.firstName}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleTabClose}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsTab() {\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.moreAppsTabIcon}>\n            <Icon className={styles.icon} name=\"add\" />\n          </div>\n          {lang('OpenApp')}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleCloseMoreAppsTab}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsButton() {\n    return (\n      <Button\n        className={buildClassName(\n          styles.moreAppsButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleOpenMoreAppsTabClick}\n      >\n        <Icon className={styles.icon} name=\"add\" />\n      </Button>\n    );\n  }\n\n  const containerRef = useRef<HTMLDivElement>();\n  useHorizontalScroll(containerRef, !isOpen || isMinimizedState || !(containerRef.current));\n\n  function renderTabs() {\n    return (\n      <div\n        className={styles.tabs}\n        ref={containerRef}\n      >\n        {tabs?.map((tab) => (\n          tab.isOpen ? (\n            renderActiveTab()\n          ) : (\n            <Avatar\n              className={styles.tabAvatar}\n              size=\"mini\"\n              peer={tab.bot}\n\n              onClick={() => handleTabClick(tab)}\n            />\n          )\n        ))}\n        {isMoreAppsTabActive && renderMoreAppsTab()}\n      </div>\n    );\n  }\n\n  function renderHeader() {\n    return (\n      <div\n        ref={headerRef}\n      >\n        {!supportMultiTabMode\n          ? renderSinglePageModeHeader()\n          : (isMaximizedState ? renderMultiTabHeader() : <MinimizedWebAppModal />)}\n      </div>\n    );\n  }\n\n  function renderMultiTabHeader() {\n    return (\n      <div\n        className={buildClassName(\n          'modal-header',\n          'multiTab',\n        )}\n        style={buildStyle(\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          className={styles.headerButton}\n          round\n          color=\"translucent\"\n          size=\"tiny\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        {renderTabs()}\n        {renderMoreMenu()}\n\n        <div className={styles.toolBar}>\n          {!isMoreAppsTabActive && renderMoreAppsButton()}\n\n          {!isMoreAppsTabActive && (\n            <Button\n              className={buildClassName(\n                styles.windowStateButton,\n                styles.fullscreenButton,\n                'no-drag',\n              )}\n              round\n              color=\"translucent\"\n              size=\"tiny\"\n              onClick={handleFullscreenClick}\n            >\n              <Icon className={styles.stateIcon} name=\"expand-modal\" />\n            </Button>\n          )}\n\n          <Button\n            className={buildClassName(\n              styles.windowStateButton,\n              'no-drag',\n            )}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            onClick={handleCollapseClick}\n          >\n            <Icon className={styles.stateIcon} name=\"collapse-modal\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSinglePageModeHeader() {\n    return (\n      <div\n        className=\"modal-header\"\n        style={buildStyle(\n          headerColor && `background-color: ${headerColor}`,\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{attachBot?.shortName ?? bot?.firstName}</div>\n        {!isMoreAppsTabActive && renderDropdownMoreMenu()}\n      </div>\n    );\n  }\n\n  function buildResizeHandleClass(handleClassName: string) {\n    return buildClassName(RESIZE_HANDLE_CLASS_NAME, handleClassName);\n  }\n\n  function renderResizeHandles() {\n    return (\n      <>\n        <div className={buildResizeHandleClass('top')} />\n        <div className={buildResizeHandleClass('bottom')} />\n        <div className={buildResizeHandleClass('left')} />\n        <div className={buildResizeHandleClass('right')} />\n        <div className={buildResizeHandleClass('topLeft')} />\n        <div className={buildResizeHandleClass('topRight')} />\n        <div className={buildResizeHandleClass('bottomLeft')} />\n        <div className={buildResizeHandleClass('bottomRight')} />\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      dialogRef={ref}\n      className={buildClassName(\n        styles.root,\n        supportMultiTabMode && styles.multiTab,\n        isMinimizedState && styles.minimized,\n        isFullScreen && styles.fullScreen,\n      )}\n      dialogStyle={supportMultiTabMode ? draggableStyle : undefined}\n      dialogContent={isDraggingEnabled && !isMinimizedState ? renderResizeHandles() : undefined}\n      isOpen={isOpen}\n      isLowStackPriority\n      onClose={handleModalClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor || 'var(--color-background)'}`}\n      noBackdrop\n      noBackdropClose\n    >\n      {isFullScreen && renderMoreMenu()}\n      {openedWebApps && sessionKeys?.map((key) => (\n        <WebAppModalTabContent\n          key={key}\n          modal={modal}\n          registerSendEventCallback={registerSendEventCallback}\n          registerReloadFrameCallback={registerReloadFrameCallback}\n          webApp={openedWebApps[key]}\n          isTransforming={isDragging || isResizing}\n          onContextMenuButtonClick={handleContextMenu}\n          isMultiTabSupported={supportMultiTabMode}\n          modalHeight={currentHeight}\n        />\n      ))}\n      {isMoreAppsTabActive && (<MoreAppsTabContent />)}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { miniAppsCachedPosition, miniAppsCachedSize } = selectSharedSettings(global);\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      cachedPosition: miniAppsCachedPosition,\n      cachedSize: miniAppsCachedSize,\n    };\n  },\n)(WebAppModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useOldLang();\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = type === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (type) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(bot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(bot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [bot, type, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', bot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { MINI_APP_TOS_URL } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['requestedAttachBotInstall'];\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  modal,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const bot = modal?.bot;\n\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n\n  const lang = useOldLang();\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed: Boolean(bot?.shouldRequestWriteAccess),\n    });\n  }, [confirmAttachBotInstall, bot]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsTosAccepted(false);\n    }\n  }, [bot]);\n\n  const tosLabel = useMemo(() => {\n    const base = lang('lng_mini_apps_disclaimer_button');\n    const split = base.split('{link}');\n    const linkText = lang('lng_mini_apps_disclaimer_link');\n    return [\n      split[0],\n      <a href={MINI_APP_TOS_URL} target=\"_blank\" rel=\"noopener noreferrer\">{linkText}</a>,\n      split[1],\n    ];\n  }, [lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={lang('lng_mini_apps_disclaimer_title')}\n      confirmHandler={handleConfirm}\n      isConfirmDisabled={!isTosAccepted}\n    >\n      {renderText(lang('lng_mini_apps_disclaimer_text', bot?.shortName), ['simple_markdown'])}\n      <Checkbox\n        className=\"dialog-checkbox\"\n        checked={isTosAccepted}\n        label={tosLabel}\n        onCheck={setIsTosAccepted}\n      />\n      {renderText(lang('WebBot.Account.Desclaimer.Desc', bot?.shortName), ['simple_markdown'])}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wn7D2H1e\",\"text\":\"IQ1U2TrZ\",\"header\":\"F6qqXRvD\",\"description\":\"ILLaH6qQ\",\"icon\":\"DzGwbpu5\",\"font-icon\":\"Pa9h5mh3\",\"fontIcon\":\"Pa9h5mh3\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport { hexToRgb, lerpRgb } from '../../../util/switchTheme';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps<T> = {\n  title: string;\n  text: string;\n  index: number;\n  count: number;\n  section: T;\n  onClick?: (section: T) => void;\n} & ({\n  icon: IconName;\n  isFontIcon: true;\n} | {\n  icon: string;\n  isFontIcon?: false;\n});\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n].map(hexToRgb);\n\nconst PremiumFeatureItem = <T,>({\n  icon,\n  isFontIcon,\n  title,\n  text,\n  index,\n  count,\n  section,\n  onClick,\n}: OwnProps<T>) => {\n  const newIndex = (index / count) * COLORS.length;\n  const colorA = COLORS[Math.floor(newIndex)];\n  const colorB = COLORS[Math.ceil(newIndex)] ?? colorA;\n  const { r, g, b } = lerpRgb(colorA, colorB, 0.5);\n\n  const handleClick = useLastCallback(() => {\n    onClick?.(section);\n  });\n\n  return (\n    <ListItem buttonClassName={styles.root} onClick={handleClick} inactive={!onClick}>\n      {isFontIcon ? (\n        <Icon name={icon} className={styles.fontIcon} style={`--item-color: rgb(${r},${g},${b})`} />\n      ) : (\n        <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: rgb(${r},${g},${b})`} draggable={false} />\n      )}\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HmY1pYD9\",\"arrow\":\"cqNhvdib\",\"right\":\"hIgQCprt\",\"arrow-hidden\":\"wDzTWXzO\",\"arrowHidden\":\"wDzTWXzO\",\"dot\":\"Ac0pMX9w\",\"medium\":\"yDo_8Y7X\",\"small\":\"bhODNwmU\",\"invisible\":\"O9pyrgj0\",\"active\":\"NYDxCNdz\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport Button from '../ui/Button';\nimport Icon from './icons/Icon';\n\nimport styles from './SliderDots.module.scss';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <Icon name=\"previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst || isInvisible) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <Icon name=\"next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"u84X0r2z\",\"floating-badge\":\"hPi4fICJ\",\"floatingBadge\":\"hPi4fICJ\",\"floating-badge-triangle\":\"jufjjcX9\",\"floatingBadgeTriangle\":\"jufjjcX9\",\"floating-badge-icon\":\"XkiOXdMP\",\"floatingBadgeIcon\":\"XkiOXdMP\",\"text\":\"YaiSoFKE\",\"floating-badge-value\":\"iC3LJrvy\",\"floatingBadgeValue\":\"iC3LJrvy\",\"left-text\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"leftText\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"right-text\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"rightText\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"right-value\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"rightValue\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"left-value\":\"RJosx238 YaiSoFKE\",\"leftValue\":\"RJosx238 YaiSoFKE\",\"line\":\"Hy5kWx0p\",\"left\":\"scGr4JS9\",\"right\":\"nPaUalQf\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { IconName } from '../../../../types/icons';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\ntype OwnProps = {\n  floatingBadgeIcon?: IconName;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <Icon name={floatingBadgeIcon} className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle}>\n            <svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\">\n              <path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\" />\n            </svg>\n          </div>\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXp65Wgy\",\"title\":\"W1xG3pjS\",\"description\":\"b_CBXIkT\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"O1fqNCy0\",\"sticker\":\"ogaoEAcn\",\"effect-sticker\":\"Stdz4UIW ogaoEAcn\",\"effectSticker\":\"Stdz4UIW ogaoEAcn\"};","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: (index: number) => void;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useLastCallback(() => {\n    onClick(realIndex);\n  });\n\n  const handleEnded = useLastCallback(() => {\n    inanimate();\n    onEnded(realIndex);\n  });\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\n\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useLastCallback((i: number) => {\n    setOffset(-i);\n  });\n\n  const handleEnded = useLastCallback((i: number) => {\n    const displayIndex = cycleRestrict(renderedStickers.length, i + offset);\n    if (displayIndex !== 0) return;\n\n    setTimeout(() => {\n      setOffset((current) => {\n        return cycleRestrict(renderedStickers.length, current + 1);\n      });\n    }, ENDED_DELAY);\n  });\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {Boolean(size) && renderedStickers?.map((sticker, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={sticker}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mFElmm7a\",\"header\":\"Jjbochk6\",\"circle\":\"ChteQ9C3\",\"title\":\"d2ayix6L\",\"features\":\"ensyCeMe\",\"mobile\":\"DFbZJafh\",\"scrolled\":\"iN1T0a2Y\"};","import { memo, useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\nimport type { IconName } from '../../../../types/icons';\n\nimport { selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useOldLang from '../../../../hooks/useOldLang';\nimport useScrolledState from '../../../../hooks/useScrolledState';\nimport useDevicePixelRatio from '../../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar, { AVATAR_SIZES } from '../../../common/Avatar';\nimport { drawGradientCircle } from '../../../common/AvatarStoryCircle';\nimport PremiumFeatureItem from '../PremiumFeatureItem';\n\nimport styles from './PremiumFeaturePreviewStories.module.scss';\n\ntype StateProps = {\n  currentUser: ApiUser;\n};\n\nconst STORY_FEATURE_TITLES = {\n  stories_order: 'PremiumStoriesPriority',\n  stories_stealth: 'PremiumStoriesStealth',\n  stories_views: 'PremiumStoriesViews',\n  stories_timer: 'lng_premium_stories_subtitle_expiration',\n  stories_save: 'PremiumStoriesSaveToGallery',\n  stories_caption: 'lng_premium_stories_subtitle_caption',\n  stories_link: 'lng_premium_stories_subtitle_links',\n};\n\nconst STORY_FEATURE_DESCRIPTIONS = {\n  stories_order: 'PremiumStoriesPriorityDescription',\n  stories_stealth: 'PremiumStoriesStealthDescription',\n  stories_views: 'PremiumStoriesViewsDescription',\n  stories_timer: 'PremiumStoriesExpirationDescription',\n  stories_save: 'PremiumStoriesSaveToGalleryDescription',\n  stories_caption: 'PremiumStoriesCaptionDescription',\n  stories_link: 'PremiumStoriesFormattingDescription',\n};\n\nconst STORY_FEATURE_ICONS: Record<string, IconName> = {\n  stories_order: 'story-priority',\n  stories_stealth: 'eye-crossed-outline',\n  stories_views: 'eye-outline',\n  stories_timer: 'timer',\n  stories_save: 'arrow-down-circle',\n  stories_caption: 'story-caption',\n  stories_link: 'link-badge',\n};\n\nconst STORY_FEATURE_ORDER = Object.keys(STORY_FEATURE_TITLES) as (keyof typeof STORY_FEATURE_TITLES)[];\n\nconst CIRCLE_SIZE = AVATAR_SIZES.giant + 0.25 * REM;\nconst CIRCLE_SEGMENTS = 8;\nconst CIRCLE_READ_SEGMENTS = 0;\n\nconst PremiumFeaturePreviewVideo = ({\n  currentUser,\n}: StateProps) => {\n  const circleRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const dpr = useDevicePixelRatio();\n\n  useLayoutEffect(() => {\n    if (!circleRef.current) {\n      return;\n    }\n\n    drawGradientCircle({\n      canvas: circleRef.current,\n      size: CIRCLE_SIZE * dpr,\n      segmentsCount: CIRCLE_SEGMENTS,\n      color: 'purple',\n      readSegmentsCount: CIRCLE_READ_SEGMENTS,\n      readSegmentColor: 'transparent',\n      dpr,\n    });\n  }, [dpr]);\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const maxSize = CIRCLE_SIZE;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.header}>\n        <Avatar forPremiumPromo peer={currentUser} size=\"giant\" />\n        <canvas className={styles.circle} ref={circleRef} style={`max-width: ${maxSize}px; max-height: ${maxSize}px`} />\n      </div>\n      <div className={styles.title}>{lang('UpgradedStories')}</div>\n      <div\n        className={buildClassName(styles.features, !isAtBeginning && styles.scrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {STORY_FEATURE_ORDER.map((section, index) => {\n          return (\n            <PremiumFeatureItem\n              key={section}\n              title={lang(STORY_FEATURE_TITLES[section])}\n              text={lang(STORY_FEATURE_DESCRIPTIONS[section])}\n              icon={STORY_FEATURE_ICONS[section]}\n              isFontIcon\n              index={index}\n              count={STORY_FEATURE_ORDER.length}\n              section={section}\n            />\n          );\n        })}\n        <div className={styles.mobile}>{lang('lng_premium_stories_about_mobile')}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      currentUser: selectUser(global, global.currentUserId!)!,\n    };\n  },\n)(PremiumFeaturePreviewVideo));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ot0dA1yZ\",\"wrapper\":\"yxSAGAc1\",\"down\":\"Jcy6cDoc\",\"frame\":\"Vn81yTTJ\",\"video\":\"rrVJClLL\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} draggable={false} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oyUTEj8I\",\"button\":\"EPfM7AgT\",\"button-content\":\"GysZk2mF\",\"buttonContent\":\"GysZk2mF\",\"back-button\":\"njYoMrKM\",\"backButton\":\"njYoMrKM\",\"white-back-button\":\"SB4pczOo\",\"whiteBackButton\":\"SB4pczOo\",\"content\":\"sJubG84j\",\"frame\":\"a7IoUtQG\",\"slide\":\"gubS9KP1\",\"limits\":\"U7ePgVBR\",\"stories\":\"J1M6fEdo\",\"limits-content\":\"n_rowVPI\",\"limitsContent\":\"n_rowVPI\",\"header\":\"mz2Hmd83\",\"no-header-border\":\"AgmNOqi7\",\"noHeaderBorder\":\"AgmNOqi7\",\"preview\":\"dIVBSdWi\",\"title\":\"iZLwcL8v\",\"description\":\"A7YHY8qF\",\"footer\":\"yN2611rA\",\"no-footer-border\":\"rCHMABcD\",\"noFooterBorder\":\"rCHMABcD\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { toggleExtraClass } from '../../../lib/teact/teact-dom';\n\nimport type {\n  ApiLimitTypeForPromo,\n  ApiPremiumPromo,\n  ApiPremiumSection,\n  ApiPremiumSubscriptionOption,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { LangPair } from '../../../types/language';\n\nimport { PREMIUM_BOTTOM_VIDEOS, PREMIUM_FEATURE_SECTIONS, PREMIUM_LIMITS_ORDER } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport SliderDots from '../../common/SliderDots';\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\nimport PremiumFeaturePreviewStories from './previews/PremiumFeaturePreviewStories';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n  translations: 'PremiumPreviewTranslations',\n  stories: 'PremiumPreviewStories',\n  saved_tags: 'PremiumPreviewTags2',\n  last_seen: 'PremiumPreviewLastSeen',\n  message_privacy: 'PremiumPreviewMessagePrivacy',\n  effects: 'Premium.MessageEffects',\n  todo: 'PremiumPreviewTodo',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n  translations: 'PremiumPreviewTranslationsDescription',\n  stories: 'PremiumPreviewStoriesDescription',\n  saved_tags: 'PremiumPreviewTagsDescription2',\n  last_seen: 'PremiumPreviewLastSeenDescription',\n  message_privacy: 'PremiumPreviewMessagePrivacyDescription',\n  effects: 'Premium.MessageEffectsInfo',\n  todo: 'PremiumPreviewTodoDescription',\n};\n\nconst LIMITS_TITLES: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n  recommendedChannels: 'SimilarChannelsLimitTitle',\n  moreAccounts: 'ConnectedAccountsLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n  recommendedChannels: 'SimilarChannelsLimitSubtitle',\n  moreAccounts: 'ConnectedAccountsLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  initialSection: ApiPremiumSection;\n  promo: ApiPremiumPromo;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumPromoOrder?: ApiPremiumSection[];\n  subscriptionOption?: ApiPremiumSubscriptionOption;\n  onBack: VoidFunction;\n  onClickSubscribe: (startParam?: string) => void;\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  isPremium,\n  limits,\n  premiumPromoOrder,\n  subscriptionOption,\n  onBack,\n  onClickSubscribe,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const scrollContainerRef = useRef<HTMLDivElement>();\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePreviousDeprecated(initialSection);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  const subscriptionButtonText = useMemo(() => {\n    if (!subscriptionOption) return undefined;\n\n    const { amount, months, currency } = subscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n\n    return isPremium\n      ? lang('OK')\n      : lang('SubscribeToPremium', { price: formatCurrency(lang, perMonthPrice, currency) }, { withNodes: true });\n  }, [isPremium, lang, subscriptionOption]);\n\n  const handleClick = useLastCallback(() => {\n    onClickSubscribe(initialSection);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const target = e.currentTarget;\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = target;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex}`);\n\n    requestMutation(() => {\n      target.style.setProperty('--scroll-progress', progress.toString());\n      target.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n\n      if (prevElement) toggleExtraClass(prevElement, 'reverse', false);\n      if (reverseElement) toggleExtraClass(reverseElement, 'reverse', true);\n    });\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = filteredSections.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, filteredSections, initialSection, prevInitialSection]);\n\n  const handleSelectSlide = useLastCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  });\n\n  const currentSection = filteredSections[currentSlideIndex];\n  const hasHeaderBackdrop = currentSection !== 'double_limits' && currentSection !== 'stories';\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, hasHeaderBackdrop && styles.whiteBackButton)}\n        color={hasHeaderBackdrop ? 'translucent-white' : 'translucent'}\n        onClick={onBack}\n        ariaLabel={oldLang('Back')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {filteredSections.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {PREMIUM_LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={oldLang(LIMITS_TITLES[limit])}\n                        description={oldLang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (PREMIUM_LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(oldLang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'stories') {\n            return (\n              <div className={buildClassName(styles.slide, styles.stories)}>\n                <PremiumFeaturePreviewStories />\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          const shouldUseNewLang = promo.videoSections[i] === 'todo';\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {shouldUseNewLang\n                  ? lang(\n                    PREMIUM_FEATURE_TITLES[promo.videoSections[i]] as keyof LangPair,\n                    undefined,\n                    { withNodes: true, renderTextFilters: ['br'] },\n                  )\n                  : oldLang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(shouldUseNewLang\n                  ? lang(\n                    PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]] as keyof LangPair,\n                    undefined,\n                    { withNodes: true, renderTextFilters: ['br'] },\n                  )\n                  : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]]), ['br'],\n                )}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        {Boolean(subscriptionButtonText) && (\n          <Button\n            className={buildClassName(styles.button)}\n            isShiny={!isPremium}\n            withPremiumGradient={!isPremium}\n            onClick={isPremium ? onBack : handleClick}\n          >\n            {subscriptionButtonText}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiPremiumGiftCodeOption, ApiPremiumSubscriptionOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport styles from './PremiumSubscriptionOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumSubscriptionOption | ApiPremiumGiftCodeOption;\n  isGiveaway?: boolean;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  className?: string;\n  onChange: (month: number) => void;\n};\n\nconst PremiumSubscriptionOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount,\n  onChange, className, isGiveaway,\n}) => {\n  const oldLang = useOldLang();\n\n  const {\n    months, amount, currency,\n  } = option;\n  const users = 'users' in option ? option.users : undefined;\n  const perMonth = Math.floor(amount / months);\n  const isUserCountPlural = users ? users > 1 : undefined;\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label\n      className={buildClassName(\n        isGiveaway ? styles.giveawayWrapper : styles.wrapper,\n        (checked && !isGiveaway) && styles.active,\n        className,\n      )}\n      dir={oldLang.isRtl ? 'rtl' : undefined}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"subscription_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>\n          {Boolean(discount) && (\n            <span\n              className={buildClassName(styles.giveawayDiscount, styles.discount)}\n              title={oldLang('GiftDiscount')}\n            >\n              {' '}\n              &minus;\n              {discount}\n              %\n            </span>\n          )}\n          {oldLang('Months', months)}\n        </div>\n        <div className={styles.perMonth}>\n          {(isGiveaway || isUserCountPlural) ? `${formatCurrencyAsString(amount, currency, oldLang.code)} x ${users!}`\n            : oldLang('PricePerMonth', formatCurrencyAsString(perMonth, currency, oldLang.code))}\n        </div>\n        <div className={styles.amount}>\n          {formatCurrencyAsString(amount, currency, oldLang.code)}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(PremiumSubscriptionOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"qZA6S2kc\",\"giveawayWrapper\":\"PkseWxFK\",\"active\":\"EJOQwnRj\",\"input\":\"WOEkhx6R\",\"content\":\"BHUCScsU\",\"month\":\"DfYCMUkL\",\"perMonth\":\"poxOXJ2o\",\"amount\":\"IGMrERf_\",\"discount\":\"uqDlP3Zt\",\"giveawayDiscount\":\"ublijP0j\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sfbpMFHM\",\"transition\":\"ELNkgPve\",\"button\":\"c1tMxuFH\",\"main\":\"ZpOIPrhp\",\"logo\":\"mlMezt6b\",\"status-emoji\":\"mQwvY9LA\",\"statusEmoji\":\"mQwvY9LA\",\"header-text\":\"y71v6ECL\",\"headerText\":\"y71v6ECL\",\"description\":\"cUcKXV3j\",\"list\":\"c3Ee2oSo\",\"no-button\":\"yWEHoJOL\",\"noButton\":\"yWEHoJOL\",\"header\":\"Bc_F0RKb\",\"hidden-header\":\"ltXo0Xi7\",\"hiddenHeader\":\"ltXo0Xi7\",\"close-button\":\"XyN3eWog\",\"closeButton\":\"XyN3eWog\",\"premium-header-text\":\"xysPdANX\",\"premiumHeaderText\":\"xysPdANX\",\"footer-text\":\"yKm9hKQP\",\"footerText\":\"yKm9hKQP\",\"primary-footer-text\":\"l1WlNpmu\",\"primaryFooterText\":\"l1WlNpmu\",\"footer\":\"nCnlO9UZ\",\"stickerSetText\":\"xw_GbDj7\",\"stickerSetLink\":\"FLzl2ng5\",\"stickerSetLinkIcon\":\"Y0jTcadE\",\"subscriptionOptions\":\"xZC_Oajr\",\"subscriptionOption\":\"gygsbDbE\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumPromo, ApiPremiumSection, ApiPremiumSubscriptionOption, ApiSticker, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { LangPair } from '../../../types/language';\n\nimport { PREMIUM_FEATURE_SECTIONS, TME_LINK_PREFIX } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectIsCurrentUserPremium, selectStickerSet,\n  selectTabState, selectUser,\n} from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './PremiumMainModal.module.scss';\n\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumEffects from '../../../assets/premium/PremiumEffects.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumLastSeen from '../../../assets/premium/PremiumLastSeen.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumMessagePrivacy from '../../../assets/premium/PremiumMessagePrivacy.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumTags from '../../../assets/premium/PremiumTags.svg';\nimport PremiumTranslate from '../../../assets/premium/PremiumTranslate.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\n\nconst LIMIT_ACCOUNTS = 4;\nconst STATUS_EMOJI_SIZE = 8 * REM;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<ApiPremiumSection, string> = {\n  stories: PremiumStatus,\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n  translations: PremiumTranslate,\n  saved_tags: PremiumTags,\n  last_seen: PremiumLastSeen,\n  message_privacy: PremiumMessagePrivacy,\n  effects: PremiumEffects,\n  todo: PremiumBadge,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  fromUser?: ApiUser;\n  fromUserStatusEmoji?: ApiSticker;\n  fromUserStatusSet?: ApiStickerSet;\n  toUser?: ApiUser;\n  initialSection?: ApiPremiumSection;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: ApiPremiumSection[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  fromUserStatusEmoji,\n  fromUserStatusSet,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink, loadStickers, openStickerSet,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<ApiPremiumSection | undefined>(initialSection);\n  const [selectedSubscriptionOption, setSubscriptionOption] = useState<ApiPremiumSubscriptionOption>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setCurrentSection(undefined);\n    } else if (initialSection) {\n      setCurrentSection(initialSection);\n    }\n  }, [isOpen, initialSection]);\n\n  const handleOpenSection = useLastCallback((section: ApiPremiumSection) => {\n    setCurrentSection(section);\n  });\n\n  const handleResetSection = useLastCallback(() => {\n    setCurrentSection(undefined);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClickWithStartParam = useLastCallback((startParam?: string) => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        type: 'slug',\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (selectedSubscriptionOption) {\n      handleClickWithStartParam(String(selectedSubscriptionOption.months));\n    } else {\n      handleClickWithStartParam();\n    }\n  });\n\n  const handleChangeSubscriptionOption = useLastCallback((months: number) => {\n    const foundOption = promo?.options.find((option) => option.months === months);\n    setSubscriptionOption(foundOption);\n  });\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  useEffect(() => {\n    if (!fromUserStatusEmoji || fromUserStatusSet) return;\n    loadStickers({\n      stickerSetInfo: fromUserStatusEmoji.stickerSetInfo,\n    });\n  }, [loadStickers, fromUserStatusEmoji, fromUserStatusSet]);\n\n  useEffect(() => {\n    const [defaultOption] = promo?.options ?? [];\n    setSubscriptionOption(defaultOption);\n  }, [promo]);\n\n  const handleOpenStatusSet = useLastCallback(() => {\n    if (!fromUserStatusSet) return;\n\n    openStickerSet({\n      stickerSetInfo: fromUserStatusSet,\n    });\n  });\n\n  const fullMonthlyAmount = useMemo(() => {\n    const monthOption = promo?.options.find((option) => option.months === 1);\n    if (!monthOption) {\n      return undefined;\n    }\n    return Number(monthOption.amount);\n  }, [promo]);\n\n  const subscribeButtonText = useMemo(() => {\n    if (!selectedSubscriptionOption) {\n      return undefined;\n    }\n    const { amount, months, currency } = selectedSubscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n    return formatCurrency(\n      lang,\n      perMonthPrice,\n      currency,\n    );\n  }, [selectedSubscriptionOption, lang]);\n\n  if (!promo || (fromUserStatusEmoji && !fromUserStatusSet)) return undefined;\n\n  function getHeaderText() {\n    if (isGift) {\n      return renderText(\n        fromUser?.id === currentUserId\n          ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n          : oldLang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]),\n        ['simple_markdown', 'emoji'],\n      );\n    }\n\n    if (fromUserStatusSet && fromUser) {\n      const template = oldLang('lng_premium_emoji_status_title').replace('{user}', getUserFullName(fromUser)!);\n      const [first, second] = template.split('{link}');\n\n      const emoji = fromUserStatusSet.thumbCustomEmojiId ? (\n        <CustomEmoji className={styles.stickerSetLinkIcon} documentId={fromUserStatusSet.thumbCustomEmojiId} />\n      ) : undefined;\n      const link = (\n        <span className={styles.stickerSetLink} onClick={handleOpenStatusSet}>\n          {emoji}\n          {renderText(fromUserStatusSet.title)}\n        </span>\n      );\n      return [renderText(first), link, renderText(second)];\n    }\n\n    return renderText(\n      fromUser\n        ? oldLang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n        : oldLang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium'),\n      ['simple_markdown', 'emoji'],\n    );\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : oldLang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    if (fromUserStatusSet) {\n      return oldLang('TelegramPremiumUserStatusDialogSubtitle');\n    }\n\n    return fromUser\n      ? oldLang('TelegramPremiumUserDialogSubtitle')\n      : oldLang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={oldLang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.subscriptionOptions}>\n        {promo?.options\n          .map((option) => (\n            <PremiumSubscriptionOption\n              className={styles.subscriptionOption}\n              key={option.amount}\n              option={option}\n              onChange={handleChangeSubscriptionOption}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={selectedSubscriptionOption?.months === option.months}\n            />\n          ))}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={closePremiumModal}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n\n              onClick={() => closePremiumModal()}\n              ariaLabel={oldLang('Close')}\n            >\n              <Icon name=\"close\" />\n            </Button>\n            {(fromUserStatusEmoji && !isGift) ? (\n              <CustomEmoji\n                className={styles.statusEmoji}\n                onClick={handleOpenStatusSet}\n                documentId={fromUserStatusEmoji.id}\n                isBig\n                size={STATUS_EMOJI_SIZE}\n              />\n            ) : (\n              <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n            )}\n            <h2 className={buildClassName(styles.headerText, fromUserStatusSet && styles.stickerSetText)}>\n              {getHeaderText()}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            {!isPremium && !isGift && renderSubscriptionOptions()}\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {oldLang('TelegramPremium')}\n              </h2>\n            </div>\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                const shouldUseNewLang = section === 'todo';\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={shouldUseNewLang\n                      ? lang(PREMIUM_FEATURE_TITLES[section] as keyof LangPair)\n                      : oldLang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : shouldUseNewLang\n                        ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section] as keyof LangPair)\n                        : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    count={filteredSections.length}\n                    section={section}\n                    onClick={handleOpenSection}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={oldLang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && selectedSubscriptionOption && (\n              <div className={styles.footer}>\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {oldLang('SubscribeToPremium', subscribeButtonText)}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleResetSection}\n            promo={promo}\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n            premiumPromoOrder={premiumPromoOrder}\n            subscriptionOption={selectedSubscriptionOption}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n\n  const fromUser = premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined;\n  const fromUserStatusEmoji = fromUser?.emojiStatus ? global.customEmojis.byId[fromUser.emojiStatus.documentId]\n    : undefined;\n  const fromUserStatusSet = fromUserStatusEmoji ? selectStickerSet(global, fromUserStatusEmoji.stickerSetInfo)\n    : undefined;\n\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser,\n    fromUserStatusEmoji,\n    fromUserStatusSet,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","import type { TeactNode } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Radio from '../../ui/Radio';\nimport Icon from '../icons/Icon';\nimport PickerItem from './PickerItem';\n\nimport styles from './PickerStyles.module.scss';\n\nexport type ItemPickerOption = {\n  label: TeactNode;\n  subLabel?: string;\n  disabled?: boolean;\n  isLoading?: boolean;\n  value: string;\n};\n\ntype SingleModeProps = {\n  allowMultiple?: false;\n  itemInputType?: 'radio';\n  selectedValue?: string;\n  selectedValues?: never; // Help TS to throw an error if this is passed\n  onSelectedValueChange?: (value: string) => void;\n};\n\ntype MultipleModeProps = {\n  allowMultiple: true;\n  itemInputType: 'checkbox';\n  selectedValue?: never;\n  selectedValues: string[];\n  lockedSelectedValues?: string[];\n  lockedUnselectedValues?: string[];\n  onSelectedValuesChange?: (values: string[]) => void;\n};\n\ntype OwnProps = {\n  className?: string;\n  isSearchable?: boolean;\n  searchInputId?: string;\n  items: ItemPickerOption[];\n  itemClassName?: string;\n  filterValue?: string;\n  filterPlaceholder?: string;\n  notFoundText?: string;\n  isLoading?: boolean;\n  noScrollRestore?: boolean;\n  isViewOnly?: boolean;\n  withDefaultPadding?: boolean;\n  forceRenderAllItems?: boolean;\n  onFilterChange?: (value: string) => void;\n  onDisabledClick?: (value: string, isSelected: boolean) => void;\n  onLoadMore?: () => void;\n} & (SingleModeProps | MultipleModeProps);\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst ITEM_CLASS_NAME = 'ItemPickerItem';\n\nconst ItemPicker = ({\n  className,\n  isSearchable,\n  searchInputId,\n  items,\n  filterValue,\n  notFoundText,\n  isLoading,\n  noScrollRestore,\n  filterPlaceholder,\n  isViewOnly,\n  itemInputType,\n  itemClassName,\n  withDefaultPadding,\n  forceRenderAllItems,\n  onFilterChange,\n  onDisabledClick,\n  onLoadMore,\n  ...optionalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n\n  const allowMultiple = optionalProps.allowMultiple;\n  const lockedSelectedValues = allowMultiple ? optionalProps.lockedSelectedValues : undefined;\n  const lockedUnselectedValues = allowMultiple ? optionalProps.lockedUnselectedValues : undefined;\n\n  useEffect(() => {\n    if (!isSearchable) return undefined;\n    const timeoutId = window.setTimeout(() => {\n      requestMeasure(() => {\n        inputRef.current?.focus();\n      });\n    }, FOCUS_DELAY_MS);\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [isSearchable]);\n\n  const selectedValues = useMemo(() => {\n    if (allowMultiple) {\n      return optionalProps.selectedValues;\n    }\n\n    return optionalProps.selectedValue ? [optionalProps.selectedValue] : MEMO_EMPTY_ARRAY;\n  }, [allowMultiple, optionalProps.selectedValue, optionalProps.selectedValues]);\n\n  const lockedSelectedValuesSet = useMemo(() => new Set(lockedSelectedValues), [lockedSelectedValues]);\n  const lockedUnselectedValuesSet = useMemo(() => new Set(lockedUnselectedValues), [lockedUnselectedValues]);\n\n  const sortedItemValuesList = useMemo(() => {\n    if (filterValue) {\n      return items.map((item) => item.value);\n    }\n\n    const lockedSelectedBucket: ItemPickerOption[] = [];\n    const unlockedBucket: ItemPickerOption[] = [];\n    const lockedUnselectableBucket: ItemPickerOption[] = [];\n\n    items.forEach((item) => {\n      if (lockedSelectedValuesSet.has(item.value)) {\n        lockedSelectedBucket.push(item);\n      } else if (lockedUnselectedValuesSet.has(item.value)) {\n        lockedUnselectableBucket.push(item);\n      } else {\n        unlockedBucket.push(item);\n      }\n    });\n\n    return lockedSelectedBucket.concat(unlockedBucket, lockedUnselectableBucket).map((item) => item.value);\n  }, [filterValue, items, lockedSelectedValuesSet, lockedUnselectedValuesSet]);\n\n  const handleItemClick = useLastCallback((value: string) => {\n    if (allowMultiple) {\n      const newSelectedValues = selectedValues.slice();\n      const index = newSelectedValues.indexOf(value);\n      if (index >= 0) {\n        newSelectedValues.splice(index, 1);\n      } else {\n        newSelectedValues.push(value);\n      }\n\n      optionalProps.onSelectedValuesChange?.(newSelectedValues);\n      return;\n    }\n\n    optionalProps.onSelectedValueChange?.(value);\n  });\n\n  const [viewportValuesList, getMore] = useInfiniteScroll(\n    onLoadMore, sortedItemValuesList, Boolean(forceRenderAllItems || filterValue),\n  );\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange?.(value);\n  });\n\n  const renderItem = useCallback((value: string) => {\n    const item = items.find((itemOption) => itemOption.value === value);\n    if (!item) return undefined;\n\n    const { label, subLabel, isLoading: isItemLoading } = item;\n    const isAlwaysUnselected = lockedUnselectedValuesSet.has(value);\n    const isAlwaysSelected = lockedSelectedValuesSet.has(value);\n    const isLocked = isAlwaysUnselected || isAlwaysSelected;\n    const isChecked = selectedValues.includes(value);\n\n    function getInputElement() {\n      if (isLocked) return <Icon name=\"lock-badge\" />;\n      if (itemInputType === 'radio') {\n        return <Radio checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      if (itemInputType === 'checkbox') {\n        return <Checkbox checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      return undefined;\n    }\n\n    return (\n      <PickerItem\n        key={value}\n        className={buildClassName(ITEM_CLASS_NAME, itemClassName)}\n        title={label}\n        subtitle={subLabel}\n        disabled={isLocked}\n        inactive={isViewOnly}\n        ripple\n        inputElement={getInputElement()}\n\n        onClick={() => handleItemClick(value)}\n\n        onDisabledClick={onDisabledClick && (() => onDisabledClick(value, isAlwaysSelected))}\n      />\n    );\n  }, [\n    items, lockedUnselectedValuesSet, lockedSelectedValuesSet, selectedValues, isViewOnly, onDisabledClick,\n    itemInputType, itemClassName,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.container, className)}>\n      {isSearchable && (\n        <div className={buildClassName(styles.header, 'custom-scroll')} dir={lang.isRtl ? 'rtl' : undefined}>\n          <InputText\n            id={searchInputId}\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={filterPlaceholder || lang('Search')}\n          />\n        </div>\n      )}\n\n      {viewportValuesList?.length ? (\n        <InfiniteScroll\n          className={buildClassName(styles.pickerList, withDefaultPadding && styles.padded, 'custom-scroll')}\n          items={viewportValuesList}\n          itemSelector={`.${ITEM_CLASS_NAME}`}\n          onLoadMore={getMore}\n          noScrollRestore={noScrollRestore}\n        >\n          {viewportValuesList.map((value) => renderItem(value))}\n        </InfiniteScroll>\n      ) : !isLoading && viewportValuesList && !viewportValuesList.length ? (\n        <p className={styles.noResults}>{notFoundText || lang('SearchEmptyViewTitle')}</p>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ItemPicker);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wzzA3MFh\",\"pickerSelector\":\"xhujrq9i\",\"pickerTitle\":\"YuRK4e7S\",\"picker\":\"YF9nLkCK\",\"footer\":\"ATCZ2Q5G\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport ItemPicker from './pickers/ItemPicker';\n\nimport styles from './CountryPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (value: string[]) => void;\n  countryList: ApiCountry[];\n  selectionLimit?: number | undefined;\n};\n\nconst CountryPickerModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  countryList,\n  selectionLimit,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[]>([]);\n  const prevSelectedCountryIds = usePreviousDeprecated(selectedCountryIds);\n  const noPickerScrollRestore = prevSelectedCountryIds === selectedCountryIds;\n\n  const displayedIds = useMemo(() => {\n    if (!countryList) {\n      return [];\n    }\n\n    return countryList.filter((country) => !country.isHidden && country.iso2 !== 'FT')\n      .map(({\n        iso2, defaultName,\n      }) => ({\n        value: iso2,\n        label: defaultName,\n      }));\n  }, [countryList]);\n\n  const handleSelectedIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (selectionLimit && newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningCountries', selectionLimit),\n      });\n      return;\n    }\n    setSelectedCountryIds(newSelectedIds);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    onSubmit(selectedCountryIds);\n    onClose();\n  });\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleSubmit}\n    >\n      <div className={styles.container}>\n        <div className={styles.pickerSelector}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4 className={styles.pickerTitle}>\n            {lang('BoostingSelectCountry')}\n          </h4>\n        </div>\n      </div>\n\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedIds}\n          selectedValues={selectedCountryIds}\n          onSelectedValuesChange={handleSelectedIdsChange}\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <div className={styles.footer}>\n        <Button\n          size=\"smaller\"\n          onClick={handleSubmit}\n        >\n          {lang('SelectCountries.OK')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(CountryPickerModal);\n","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport {\n  isChatChannel, isChatPublic, isChatSuperGroup,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\nconst GiveawayChannelPickerModal = ({\n  isOpen,\n  giveawayChatId,\n  selectionLimit,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [pendingChannelId, setPendingChannelId] = useState<string | undefined>(undefined);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const channelIds = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const { active, archived } = global.chats.listIds;\n    const ids = (active || []).concat(archived || []);\n\n    return unique(ids).map((id) => chatsById[id])\n      .filter((chat) => (\n        chat && (\n          isChatChannel(chat) || isChatSuperGroup(chat)\n        ) && chat.id !== giveawayChatId\n      )).map((chat) => chat.id);\n  }, [giveawayChatId]);\n\n  const displayedChannelIds = useMemo(() => {\n    const foundChannelIds = channelIds ? filterPeersByQuery({ ids: channelIds, query: searchQuery, type: 'chat' }) : [];\n\n    return sortChatIds(foundChannelIds,\n      false,\n      selectedIds);\n  }, [channelIds, searchQuery, selectedIds]);\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    const chatsById = getGlobal().chats.byId;\n    const newlyAddedIds = newSelectedIds.filter((id) => !selectedIds.includes(id));\n    const privateLinkChannelId = newlyAddedIds.find((id) => {\n      const chat = chatsById[id];\n      return chat && !isChatPublic(chat);\n    });\n\n    if (selectedIds?.length >= selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningChannelsPlural', selectionLimit),\n      });\n      return;\n    }\n\n    if (privateLinkChannelId) {\n      setPendingChannelId(privateLinkChannelId);\n      openConfirmModal();\n    } else {\n      setSelectedIds(newSelectedIds);\n    }\n  });\n\n  const confirmPrivateLinkChannelSelection = useLastCallback(() => {\n    if (pendingChannelId) {\n      setSelectedIds(unique([...selectedIds, pendingChannelId]));\n    }\n    closeConfirmModal();\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('RequestPeer.ChooseChannelTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedChannelIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedChannelIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n      <ConfirmDialog\n        title={lang('BoostingGiveawayPrivateChannel')}\n        text={lang('BoostingGiveawayPrivateChannelWarning')}\n        confirmLabel={lang('Add')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmPrivateLinkChannelSelection}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(GiveawayChannelPickerModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './GiveawayTypeOption.module.scss';\n\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\n\ntype OwnProps = {\n  option: ApiGiveawayType;\n  name: string;\n  text: string;\n  img: string;\n  checked?: boolean;\n  isLink: boolean;\n  className?: string;\n  onChange: (value: ApiGiveawayType) => void;\n  onClickAction?: () => void;\n  userNames?: string;\n  selectedMemberIds?: string[];\n};\n\nconst GiveawayTypeOption: FC<OwnProps> = ({\n  option, checked,\n  name, text, img,\n  isLink, onChange, onClickAction, className,\n  userNames, selectedMemberIds,\n}) => {\n  const lang = useOldLang();\n\n  let displayText: string | undefined = lang(text);\n  if (isLink && selectedMemberIds?.length) {\n    displayText = selectedMemberIds.length > 2 ? selectedMemberIds.length.toString() : userNames;\n  }\n\n  const handleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(option);\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    onClickAction?.();\n  });\n\n  return (\n    <label\n      className={buildClassName(styles.wrapper, className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"giveaway_option\"\n        value={option}\n        checked={checked}\n        onChange={handleChange}\n        onClick={(e) => e.stopPropagation()}\n      />\n      <div className={styles.content}>\n        <img className={styles.optionImg} src={img} alt=\"\" draggable={false} />\n        <div className={styles.giveaway}>\n          <h3 className={styles.title}>\n            {lang(name)}\n          </h3>\n          {isLink ? (\n            <div className={styles.link} onClick={handleClick}>\n              <span>{displayText}</span>\n              <Icon name=\"next\" />\n            </div>\n          ) : (\n            <span className={styles.contentText}>{displayText}</span>\n          )}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiveawayTypeOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"w3OGYFKn\",\"input\":\"xy4AclZa\",\"content\":\"TTgSI7Xh\",\"notChecked\":\"JDcXsByU\",\"giveaway\":\"sEt7TF59\",\"title\":\"u4NzVBBi\",\"link\":\"y7XfPOoG\",\"optionImg\":\"lGhZJbMF\",\"contentText\":\"kt2ZKZ6j\"};","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember } from '../../../api/types';\n\nimport {\n  isUserBot,\n  sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\ntype OwnProps = {\n  isOpen?: boolean;\n\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst GiveawayUserPickerModal = ({\n  isOpen,\n  selectionLimit,\n  members,\n  adminMembersById,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const memberIds = useMemo(() => {\n    const global = getGlobal();\n    const { byId, statusesById } = global.users;\n    if (!members?.length) {\n      return [];\n    }\n\n    const adminIdsSet = adminMembersById && new Set(Object.keys(adminMembersById));\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      byId,\n      statusesById,\n    );\n\n    return adminIdsSet ? userIds.filter((userId) => !adminIdsSet.has(userId)) : userIds;\n  }, [adminMembersById, members]);\n\n  const displayedMemberIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const filteredUserIds = memberIds\n      ? filterPeersByQuery({ ids: memberIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(unique(filteredUserIds).filter((userId) => {\n      const user = usersById[userId];\n      if (!user) {\n        return true;\n      }\n\n      return !isUserBot(user);\n    }));\n  }, [memberIds, searchQuery]);\n\n  const handleSelectedMemberIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningUsers', selectionLimit),\n      });\n      return;\n    }\n    setSelectedIds(newSelectedIds);\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('BoostingAwardSpecificUsers')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedMemberIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedMemberIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { giveawayChatId }): StateProps => {\n  const chatFullInfo = giveawayChatId ? selectChatFullInfo(global, giveawayChatId) : undefined;\n  if (!chatFullInfo) {\n    return {};\n  }\n\n  return {\n    members: chatFullInfo.members,\n    adminMembersById: chatFullInfo.adminMembersById,\n  };\n})(GiveawayUserPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"P0kLOw15\",\"button\":\"ILuhBsJG\",\"main\":\"SqiN63Ef\",\"logo\":\"Me2hCsMs\",\"header-text\":\"UVDnB0Wq\",\"headerText\":\"UVDnB0Wq\",\"description\":\"v5yGzV6v\",\"header\":\"U6XNIToQ\",\"hidden-header\":\"tDZc21ZC\",\"hiddenHeader\":\"tDZc21ZC\",\"close-button\":\"OX6_HqAd\",\"closeButton\":\"OX6_HqAd\",\"premium-header-text\":\"v6hiGpEn\",\"premiumHeaderText\":\"v6hiGpEn\",\"primary-footer-text\":\"YGbiSd3e\",\"primaryFooterText\":\"YGbiSd3e\",\"section\":\"rZRDMqUL\",\"types\":\"sQ5PkKEs\",\"footer\":\"hD_AEzjd\",\"options\":\"JjDLNrKG\",\"giveawayTitle\":\"p5Hn4Q6E\",\"subscription\":\"rniPcuiP\",\"starSubscription\":\"bzRAETfR\",\"subscriptionOption\":\"ggZrgZnv\",\"status\":\"q1y2qUTn\",\"info\":\"IsT38nlq\",\"titleInfo\":\"nmsfBLut\",\"month\":\"TsGuei3B\",\"quantity\":\"G9H3tm6D\",\"floatingBadge\":\"xKl2UeV8\",\"floatingBadgeColor\":\"HLx3wTBD\",\"floatingBadgeButtonColor\":\"JLH0MExt\",\"floatingBadgeIcon\":\"Ftr7zf2v\",\"floatingBadgeValue\":\"Ce0Ob2tg\",\"subscriptionFooter\":\"rDFQAfTt\",\"premiumFeatures\":\"eNQ_nrKr\",\"dateButton\":\"GeKqKRgP\",\"title\":\"LZ3vPzak\",\"checkboxSection\":\"Z9QJQ6IS\",\"prizesSection\":\"eQVP0Nx8\",\"prizesInput\":\"qMYNwiUZ\",\"subLabelClassName\":\"txXJxVFu\",\"prepaidImg\":\"ldn4mh2T\",\"addButton\":\"sOXvh85b\",\"addChannel\":\"aGbyR60s\",\"removeChannel\":\"UZdErfVI\",\"starOptions\":\"cLhNkYPB\",\"transition\":\"vEI2Wewt\"};","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiCountry,\n  ApiPremiumGiftCodeOption,\n  ApiPrepaidGiveaway,\n  ApiPrepaidStarsGiveaway,\n  ApiStarGiveawayOption,\n  ApiTypePrepaidGiveaway,\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n  GIVEAWAY_MAX_ADDITIONAL_CHANNELS,\n  GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  GIVEAWAY_MAX_ADDITIONAL_USERS,\n  STARS_CURRENCY_CODE,\n} from '../../../config';\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { unique } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport CountryPickerModal from '../../common/CountryPickerModal';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport StarTopupOptionList from '../../modals/stars/StarTopupOptionList';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSliderWithMarks from '../../ui/RangeSliderWithMarks';\nimport Switcher from '../../ui/Switcher';\nimport GiveawayChannelPickerModal from './GiveawayChannelPickerModal';\nimport GiveawayTypeOption from './GiveawayTypeOption';\nimport GiveawayUserPickerModal from './GiveawayUserPickerModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './GiveawayModal.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  userIds?: string[];\n};\n\ntype StateProps = {\n  chatId?: string;\n  gifts?: ApiPremiumGiftCodeOption[];\n  isOpen?: boolean;\n  fromUser?: ApiUser;\n  selectedMemberList?: string[] | undefined;\n  selectedChannelList?: string[] | undefined;\n  giveawayBoostPerPremiumLimit?: number;\n  userSelectionLimit?: number;\n  countryList: ApiCountry[];\n  prepaidGiveaway?: ApiTypePrepaidGiveaway;\n  countrySelectionLimit: number | undefined;\n  isChannel?: boolean;\n  isStarsGiftEnabled?: boolean;\n  starsGiftOptions?: ApiStarGiveawayOption[] | undefined;\n};\n\ntype GiveawayAction = 'createPremiumGiveaway' | 'createStarsGiveaway';\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\ntype SubscribersType = 'all' | 'new';\n\ninterface TypeOption {\n  name: string;\n  text: string;\n  value: ApiGiveawayType;\n  img: string;\n  actions?: GiveawayAction;\n  isLink: boolean;\n  onClickAction?: () => void;\n}\n\nconst DEFAULT_CUSTOM_EXPIRE_DATE = 86400 * 3 * 1000; // 3 days\nconst MAX_ADDITIONAL_CHANNELS = 9;\nconst DEFAULT_BOOST_COUNT = 5;\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst GiveawayModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  gifts,\n  isOpen,\n  isChannel,\n  selectedMemberList,\n  selectedChannelList,\n  giveawayBoostPerPremiumLimit = GIVEAWAY_BOOST_PER_PREMIUM,\n  countryList,\n  prepaidGiveaway,\n  countrySelectionLimit = GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  userSelectionLimit = GIVEAWAY_MAX_ADDITIONAL_USERS,\n  isStarsGiftEnabled,\n  starsGiftOptions,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closeGiveawayModal, openInvoice, openPremiumModal,\n    launchPrepaidGiveaway, launchPrepaidStarsGiveaway,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isCountryPickerModalOpen, openCountryPickerModal, closeCountryPickerModal] = useFlag();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [isUserPickerModalOpen, openUserPickerModal, closeUserPickerModal] = useFlag();\n  const [isChannelPickerModalOpen, openChannelPickerModal, closeChannelPickerModal] = useFlag();\n\n  const TYPE_OPTIONS: TypeOption[] = [{\n    name: 'Premium.Title',\n    text: 'BoostingWinnersRandomly',\n    value: 'premium_giveaway',\n    img: GiftBlueRound,\n    actions: 'createPremiumGiveaway',\n    isLink: true,\n    onClickAction: () => {\n      openUserPickerModal();\n    },\n  }];\n\n  if (isStarsGiftEnabled) {\n    TYPE_OPTIONS.push({\n      name: 'TelegramStars',\n      text: 'BoostingWinnersRandomly',\n      value: 'stars_giveaway',\n      img: GiftStar,\n      actions: 'createStarsGiveaway',\n      isLink: false,\n    });\n  }\n\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedRandomUserCount, setSelectedRandomUserCount] = useState<number>(DEFAULT_BOOST_COUNT);\n  const [selectedGiveawayOption, setGiveawayOption] = useState<ApiGiveawayType>(TYPE_OPTIONS[0].value);\n  const [selectedStarOption, setSelectedStarOption] = useState<ApiStarGiveawayOption | undefined>();\n  const [selectedSubscriberOption, setSelectedSubscriberOption] = useState<SubscribersType>('all');\n  const [selectedMonthOption, setSelectedMonthOption] = useState<number | undefined>();\n  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n  const [selectedChannelIds, setSelectedChannelIds] = useState<string[]>([]);\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[] | undefined>([]);\n  const [shouldShowWinners, setShouldShowWinners] = useState<boolean>(false);\n  const [shouldShowPrizes, setShouldShowPrizes] = useState<boolean>(false);\n  const [prizeDescription, setPrizeDescription] = useState<string | undefined>(undefined);\n  const [dataPrepaidGiveaway, setDataPrepaidGiveaway] = useState<ApiPrepaidGiveaway | undefined>(undefined);\n  const [\n    dataStarsPrepaidGiveaway, setDataStarsPrepaidGiveaway,\n  ] = useState<ApiPrepaidStarsGiveaway | undefined>(undefined);\n\n  const isPremiumGiveaway = selectedGiveawayOption === 'premium_giveaway';\n  const isStarsGiveaway = selectedGiveawayOption === 'stars_giveaway';\n  const selectedUserCount = isPremiumGiveaway\n    && !selectedUserIds.length ? selectedRandomUserCount : selectedUserIds.length;\n  const boostQuantity = selectedUserCount * giveawayBoostPerPremiumLimit;\n  const boostStarsQuantity = selectedStarOption?.yearlyBoosts;\n\n  const SUBSCRIBER_OPTIONS = useMemo(() => [\n    {\n      value: 'all',\n      label: lang(isChannel ? 'BoostingAllSubscribers' : 'BoostingAllMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n    {\n      value: 'new',\n      label: lang(isChannel ? 'BoostingNewSubscribers' : 'BoostingNewMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n  ], [isChannel, lang, selectedCountryIds]);\n\n  const monthQuantity = lang('Months', selectedMonthOption);\n  const isStarsPrepaidGiveaway = prepaidGiveaway?.type === 'starsGiveaway';\n  const isPremiumPrepaidGiveaway = prepaidGiveaway?.type === 'giveaway';\n\n  const selectedGift = useMemo(() => {\n    return gifts?.find((gift) => gift.months === selectedMonthOption && gift.users === selectedUserCount);\n  }, [gifts, selectedMonthOption, selectedUserCount]);\n\n  const selectedStarsGift = useMemo(() => {\n    return starsGiftOptions?.find((gift) => {\n      return isStarsPrepaidGiveaway && gift.stars === (dataStarsPrepaidGiveaway?.stars);\n    });\n  }, [dataStarsPrepaidGiveaway, starsGiftOptions, isStarsPrepaidGiveaway]);\n\n  const filteredGifts = useMemo(() => {\n    return gifts?.filter((gift) => gift.users === selectedUserCount && gift.currency !== STARS_CURRENCY_CODE);\n  }, [gifts, selectedUserCount]);\n\n  const fullMonthlyAmount = useMemo(() => {\n    const basicGift = filteredGifts?.reduce((acc, gift) => {\n      return gift.amount < acc.amount ? gift : acc;\n    }, filteredGifts[0]);\n\n    return basicGift && Math.floor(basicGift.amount / basicGift.months);\n  }, [filteredGifts]);\n\n  const userCountOptions = useMemo(() => {\n    return unique((gifts?.filter((gift) => gift.currency !== STARS_CURRENCY_CODE)\n      ?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [gifts]);\n\n  const winnerCountOptions = useMemo(() => {\n    return unique((selectedStarOption?.winners?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [selectedStarOption]);\n\n  useEffect(() => {\n    if (isOpen && gifts?.length && !isStarsPrepaidGiveaway) {\n      setSelectedMonthOption(gifts?.[0].months);\n    }\n  }, [isOpen, gifts, isStarsPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && starsGiftOptions?.length && !isPremiumPrepaidGiveaway) {\n      setSelectedStarOption(starsGiftOptions?.[0]);\n    }\n  }, [isOpen, starsGiftOptions, isPremiumPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isStarsPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataStarsPrepaidGiveaway(prepaidGiveaway);\n    }\n  }, [isOpen, isStarsPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isPremiumPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataPrepaidGiveaway(prepaidGiveaway);\n      setSelectedMonthOption(prepaidGiveaway.months);\n    }\n  }, [isOpen, isPremiumPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (selectedMemberList) {\n      setSelectedUserIds(selectedMemberList);\n    }\n  }, [selectedMemberList]);\n\n  useEffect(() => {\n    if (selectedChannelList) {\n      setSelectedChannelIds(selectedChannelList);\n    }\n  }, [selectedChannelList]);\n\n  const handlePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    setDataStarsPrepaidGiveaway(undefined);\n    setDataPrepaidGiveaway(undefined);\n    setSelectedStarOption(undefined);\n    setSelectedMonthOption(undefined);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n    closeGiveawayModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (isPremiumGiveaway) {\n      if (selectedUserIds?.length) {\n        openInvoice({\n          type: 'giftcode',\n          boostChannelId: chatId!,\n          userIds: selectedUserIds,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      } else {\n        openInvoice({\n          type: 'giveaway',\n          chatId: chatId!,\n          additionalChannelIds: selectedChannelIds,\n          isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n          countries: selectedCountryIds,\n          areWinnersVisible: shouldShowWinners,\n          prizeDescription,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      }\n    } else {\n      openInvoice({\n        type: 'starsgiveaway',\n        chatId: chatId!,\n        additionalChannelIds: selectedChannelIds,\n        isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n        countries: selectedCountryIds,\n        areWinnersVisible: shouldShowWinners,\n        prizeDescription,\n        untilDate: customExpireDate / 1000,\n        currency: selectedStarOption!.currency,\n        amount: selectedStarOption!.amount,\n        stars: selectedStarOption!.stars,\n        users: selectedRandomUserCount,\n      });\n    }\n\n    handleClose();\n  });\n\n  const confirmLaunchPrepaidGiveaway = useLastCallback(() => {\n    if (isStarsPrepaidGiveaway) {\n      launchPrepaidStarsGiveaway({\n        chatId: chatId!,\n        giveawayId: dataStarsPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          stars: dataStarsPrepaidGiveaway!.stars,\n          currency: selectedStarsGift!.currency,\n          amount: selectedStarsGift!.amount,\n          users: dataStarsPrepaidGiveaway!.quantity,\n        },\n      });\n    } else {\n      launchPrepaidGiveaway({\n        chatId: chatId!,\n        giveawayId: dataPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n        },\n      });\n    }\n\n    closeConfirmModal();\n    handleClose();\n  });\n\n  const handleRandomUserCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handleWinnerCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handlePrizeDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setPrizeDescription(e.target.value);\n  });\n\n  const userNames = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    return selectedUserIds?.map((userId) => getUserFullName(usersById[userId])).join(', ');\n  }, [selectedUserIds]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleChangeSubscriberOption = useLastCallback((value) => {\n    setSelectedSubscriberOption(value);\n  });\n\n  const handleChangeTypeOption = useLastCallback((value: ApiGiveawayType) => {\n    setGiveawayOption(value);\n    setSelectedUserIds([]);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleSetCountriesListChange = useLastCallback((value: string[]) => {\n    setSelectedCountryIds(value);\n  });\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedUserIds(newSelectedIds);\n    if (!newSelectedIds.length) {\n      setGiveawayOption('premium_giveaway');\n    }\n  });\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedChannelIds(newSelectedIds);\n  });\n\n  const handleShouldShowWinnersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowWinners(e.target.checked);\n  });\n\n  const handleShouldShowPrizesChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowPrizes(e.target.checked);\n  });\n\n  const onClickActionHandler = useLastCallback(() => {\n    openCountryPickerModal();\n  });\n\n  const handleStarClick = useLastCallback((option) => {\n    setSelectedStarOption(option);\n  });\n\n  function renderTypeOptions() {\n    return (\n      <div className={styles.options}>\n        {TYPE_OPTIONS.map((option) => {\n          return (\n            <GiveawayTypeOption\n              key={option.name}\n              name={option.name}\n              text={option.text}\n              option={option.value}\n              img={option.img}\n              onChange={handleChangeTypeOption}\n              checked={selectedGiveawayOption === option.value}\n              isLink={option.isLink}\n              userNames={userNames}\n              selectedMemberIds={selectedUserIds}\n              onClickAction={option.onClickAction}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscribersOptions() {\n    return (\n      <div className={styles.options}>\n        <RadioGroup\n          name=\"subscribers\"\n          options={SUBSCRIBER_OPTIONS}\n          selected={selectedSubscriberOption}\n          onChange={handleChangeSubscriberOption}\n          onClickAction={onClickActionHandler}\n          subLabelClassName={styles.subLabelClassName}\n          isLink\n        />\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.options}>\n        {filteredGifts?.map((gift) => (\n          <PremiumSubscriptionOption\n            isGiveaway\n            key={gift.months}\n            option={gift}\n            fullMonthlyAmount={fullMonthlyAmount}\n            checked={gift.months === selectedMonthOption}\n            onChange={setSelectedMonthOption}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  function deleteParticipantsHandler(id: string) {\n    const filteredChannelIds = selectedChannelIds.filter((channelId) => channelId !== id);\n    setSelectedChannelIds(filteredChannelIds);\n  }\n\n  function renderStarOptionList() {\n    return (\n      <StarTopupOptionList\n        className={styles.starOptions}\n        options={starsGiftOptions}\n        selectedStarCount={selectedRandomUserCount}\n        selectedStarOption={selectedStarOption}\n        onClick={handleStarClick}\n      />\n    );\n  }\n\n  function renderGiveawayOptionList() {\n    return (\n      <>\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingChannelsGroupsIncludedGiveaway')}\n          </h2>\n\n          <ListItem\n            inactive\n            className=\"chat-item-clickable contact-list-item\"\n          >\n            <GroupChatInfo\n              chatId={chatId!}\n              status={lang(isChannel ? 'BoostingChannelWillReceiveBoost'\n                : 'BoostingGroupWillReceiveBoost', boostQuantity || boostStarsQuantity, 'i')}\n            />\n          </ListItem>\n\n          {selectedChannelIds?.map((channelId) => {\n            return (\n              <ListItem\n                ripple\n                key={channelId}\n                className=\"chat-item-clickable contact-list-item\"\n\n                onClick={() => deleteParticipantsHandler(channelId)}\n                rightElement={(<Icon name=\"close\" className={styles.removeChannel} />)}\n              >\n                <GroupChatInfo\n                  chatId={channelId.toString()}\n                />\n              </ListItem>\n            );\n          })}\n\n          {selectedChannelIds.length < MAX_ADDITIONAL_CHANNELS && (\n            <ListItem\n              icon=\"add\"\n              ripple\n              onClick={openChannelPickerModal}\n              className={styles.addButton}\n              iconClassName={styles.addChannel}\n            >\n              {lang('BoostingAddChannelOrGroup')}\n            </ListItem>\n          )}\n        </div>\n\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingEligibleUsers')}\n          </h2>\n\n          {renderSubscribersOptions()}\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang(isChannel ? 'BoostGift.LimitSubscribersInfo' : 'lng_giveaway_users_about_group'))}\n        </div>\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayAdditionalPrizes')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowPrizes}\n              onChange={handleShouldShowPrizesChange}\n            />\n          </div>\n\n          {shouldShowPrizes && (\n            <div className={styles.prizesSection}>\n              <h2 className={styles.title}>\n                {selectedRandomUserCount}\n              </h2>\n              <InputText\n                className={styles.prizesInput}\n                value={prizeDescription}\n                onChange={handlePrizeDescriptionChange}\n                label={lang('BoostingGiveawayEnterYourPrize')}\n              />\n            </div>\n          )}\n        </div>\n\n        {shouldShowPrizes ? (\n          !isStarsGiveaway && !isStarsPrepaidGiveaway ? (\n            <div className={styles.subscription}>\n              {prizeDescription?.length ? renderText(lang('BoostingGiveawayAdditionPrizeCountNameHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, prizeDescription, monthQuantity]\n                  : [selectedUserCount, prizeDescription, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown']) : renderText(lang('BoostingGiveawayAdditionPrizeCountHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, monthQuantity]\n                  : [selectedUserCount, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown'])}\n            </div>\n          ) : undefined\n        ) : (\n          <div className={styles.subscription}>\n            {renderText(lang('BoostingGiveawayAdditionPrizeHint'))}\n          </div>\n        )}\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayShowWinners')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowWinners}\n              onChange={handleShouldShowWinnersChange}\n            />\n          </div>\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang('BoostingGiveawayShowWinnersHint'))}\n        </div>\n\n        <div className={buildClassName(styles.section,\n          (dataPrepaidGiveaway || dataStarsPrepaidGiveaway || isStarsGiveaway) && styles.subscriptionFooter)}\n        >\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingDateWhenGiveawayEnds')}\n          </h2>\n\n          <Button\n            ariaLabel={lang('BoostGift.DateEnds')}\n            className={buildClassName(styles.dateButton, 'expire-limit')}\n            isText\n            onClick={openCalendar}\n          >\n            <h3 className={styles.title}>\n              {lang('BoostGift.DateEnds')}\n            </h3>\n            {formatDateTimeToString(customExpireDate, lang.code)}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={handleClose}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n      onEnter={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          onClick={handleClose}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n        <h2 className={styles.headerText}>\n          {renderText(lang('BoostingBoostsViaGifts'))}\n        </h2>\n        <div className={styles.description}>\n          {renderText(lang(isChannel ? 'BoostingGetMoreBoost' : 'BoostingGetMoreBoostsGroup'))}\n        </div>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.premiumHeaderText}>\n            {lang('BoostingBoostsViaGifts')}\n          </h2>\n        </div>\n        {(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? (\n          <div className={styles.status}>\n            <div>\n              {dataStarsPrepaidGiveaway ? (\n                <img className={styles.prepaidImg} src={GiftStar} alt=\"\" />\n              ) : (\n                <img\n                  className={styles.prepaidImg}\n                  src={GIVEAWAY_IMG_LIST[dataPrepaidGiveaway!.months] || GIVEAWAY_IMG_LIST[3]}\n                  alt=\"\"\n                />\n              )}\n            </div>\n            <div className={styles.info}>\n              <h3 className={styles.title}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Title', dataStarsPrepaidGiveaway?.stars)\n                  : lang('BoostingTelegramPremiumCountPlural', dataPrepaidGiveaway!.quantity)}\n              </h3>\n              <p className={styles.month}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', dataStarsPrepaidGiveaway?.quantity)\n                  : lang('PrepaidGiveawayMonths', dataPrepaidGiveaway?.months)}\n              </p>\n            </div>\n            <div className={styles.quantity}>\n              <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {dataStarsPrepaidGiveaway ? dataStarsPrepaidGiveaway?.boosts\n                    : dataPrepaidGiveaway!.quantity * (giveawayBoostPerPremiumLimit ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className={buildClassName(styles.section, styles.types)}>\n            {renderTypeOptions()}\n          </div>\n        )}\n\n        {isPremiumGiveaway && !selectedUserIds?.length && (\n          <>\n            {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingQuantityPrizes')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedUserCount}\n                    marks={userCountOptions}\n                    onChange={handleRandomUserCountChange}\n                  />\n                </div>\n\n                <div className={styles.subscription}>\n                  {renderText(lang('BoostingChooseHowMany'))}\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {isStarsGiveaway && (\n          <>\n            {!dataStarsPrepaidGiveaway && !dataPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingStarsOptions')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostStarsQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  {renderStarOptionList()}\n                </div>\n\n                <div className={buildClassName(styles.subscription, styles.starSubscription)}>\n                  {renderText(lang('BoostGift.Stars.Info'))}\n                </div>\n\n                <div className={styles.section}>\n                  <h2 className={styles.giveawayTitle}>\n                    {lang('BoostingStarsQuantityPrizes')}\n                  </h2>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedRandomUserCount}\n                    marks={winnerCountOptions}\n                    onChange={handleWinnerCountChange}\n                  />\n\n                  <div className={styles.subscription}>\n                    {renderText(lang('BoostingStarsQuantityPrizesInfo'))}\n                  </div>\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && isPremiumGiveaway && (\n          <>\n            <div className={styles.section}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingDurationOfPremium')}\n              </h2>\n\n              {renderSubscriptionOptions()}\n            </div>\n\n            <div className={buildClassName(styles.subscription, styles.subscriptionFooter)}>\n              {renderPremiumFeaturesLink()}\n            </div>\n          </>\n        )}\n\n        {selectedGiveawayOption && (\n          <div className={styles.footer}>\n            <Button\n              className={styles.button}\n              onClick={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n            >\n              {lang('BoostingStartGiveaway')}\n            </Button>\n          </div>\n        )}\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n      <CountryPickerModal\n        isOpen={isCountryPickerModalOpen}\n        onClose={closeCountryPickerModal}\n        countryList={countryList}\n        onSubmit={handleSetCountriesListChange}\n        selectionLimit={countrySelectionLimit}\n      />\n      <GiveawayUserPickerModal\n        isOpen={isUserPickerModalOpen}\n        onClose={closeUserPickerModal}\n        onSelectedIdsConfirmed={handleSelectedUserIdsChange}\n        initialSelectedIds={selectedUserIds}\n        selectionLimit={userSelectionLimit}\n        giveawayChatId={chatId}\n      />\n      <GiveawayChannelPickerModal\n        isOpen={isChannelPickerModalOpen}\n        onClose={closeChannelPickerModal}\n        initialSelectedIds={selectedChannelIds}\n        onSelectedIdsConfirmed={handleSelectedChannelIdsChange}\n        selectionLimit={GIVEAWAY_MAX_ADDITIONAL_CHANNELS}\n        giveawayChatId={chatId}\n      />\n      <ConfirmDialog\n        title={lang('BoostingStartGiveawayConfirmTitle')}\n        text={lang('BoostingStartGiveawayConfirmText')}\n        confirmLabel={lang('Start')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmLaunchPrepaidGiveaway}\n      />\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    giveawayModal,\n  } = selectTabState(global);\n  const chatId = giveawayModal?.chatId;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const isChannel = chat && isChatChannel(chat);\n\n  return {\n    chatId,\n    gifts: giveawayModal?.gifts,\n    selectedMemberList: giveawayModal?.selectedMemberIds,\n    selectedChannelList: giveawayModal?.selectedChannelIds,\n    giveawayBoostPerPremiumLimit: global.appConfig?.giveawayBoostsPerPremium,\n    isStarsGiftEnabled: global.appConfig?.isStarsGiftEnabled,\n    userSelectionLimit: global.appConfig?.giveawayAddPeersMax,\n    countrySelectionLimit: global.appConfig?.giveawayCountriesMax,\n    countryList: global.countryList.general,\n    prepaidGiveaway: giveawayModal?.prepaidGiveaway,\n    isChannel,\n    starsGiftOptions: giveawayModal?.starOptions,\n  };\n})(GiveawayModal));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiLimitTypeWithModal } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\nimport type { IconName } from '../../../../types/icons';\n\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogs',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, IconName> = {\n  dialogFiltersChats: 'chat-badge',\n  uploadMaxFileparts: 'file-badge',\n  dialogFilters: 'folder-badge',\n  dialogFolderPinned: 'pin-badge',\n  channelsPublic: 'link-badge',\n  channels: 'chats-badge',\n  chatlistInvites: 'link-badge',\n  chatlistJoined: 'folder-badge',\n  savedDialogsPinned: 'pin-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: OldLangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: OldLangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useOldLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>\n            {valueFormatter?.(\n              lang, isPremium ? premiumValue : defaultValue,\n            ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n          && (\n            <Button\n              className=\"confirm-dialog-button\"\n              isText\n              onClick={handleClick}\n              color=\"primary\"\n            >\n              {lang('IncreaseLimit')}\n              <Icon name=\"double-badge\" className={styles.x2} />\n            </Button>\n          )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QAs_iFxO\",\"limit-compare\":\"k0O6Rnjh\",\"limitCompare\":\"k0O6Rnjh\",\"limit-badge\":\"Q5d_7bB4\",\"limitBadge\":\"Q5d_7bB4\",\"limit-value\":\"ArEy3hhB\",\"limitValue\":\"ArEy3hhB\",\"limit-icon\":\"rbnU7JVX\",\"limitIcon\":\"rbnU7JVX\",\"dialog-buttons\":\"RVM_RSap\",\"dialogButtons\":\"RVM_RSap\",\"x2\":\"esB1OhAF\",\"button-icon\":\"ydpxmYS3\",\"buttonIcon\":\"ydpxmYS3\"};","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useRef, useState } from '../../../lib/teact/teact';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: ElementRef<HTMLDivElement>,\n  headerRef: ElementRef<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useLastCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll({\n        container: containerRef.current!,\n        element: stickerSetEl,\n        position: 'start',\n        margin: FOCUS_MARGIN,\n        maxDistance: isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      });\n\n      return index;\n    });\n  });\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"m6XpTzQX\",\"video\":\"OZHqKbDL\",\"image\":\"enA6c8gc\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  forcePlayback,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    hasThumbnail, hasVideoThumb, hasAnimatedThumb, hasStaticThumb, thumbCustomEmojiId,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, undefined, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const shouldFallbackToSticker = !hasThumbnail\n    || (hasVideoThumb && !IS_WEBM_SUPPORTED && !hasAnimatedThumb && !hasStaticThumb);\n  const firstStickerHash = shouldFallbackToSticker && stickerSet.stickers?.[0]\n    && getStickerMediaHash(stickerSet.stickers[0], 'preview');\n  const firstStickerMediaData = useMedia(firstStickerHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !firstStickerHash) || hasAnimatedThumb) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = thumbCustomEmojiId || mediaData || firstStickerMediaData;\n  const transitionClassNames = useMediaTransitionDeprecated(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: stickerSet,\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'sticker-set-cover')}\n      style={`--_size: ${size}px`}\n    >\n      {isReady ? (\n        thumbCustomEmojiId ? (\n          <CustomEmoji\n            documentId={thumbCustomEmojiId}\n            size={size}\n            observeIntersectionForPlaying={observeIntersection}\n            noPlay={noPlay}\n          />\n        ) : hasAnimatedThumb ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n            forceAlways={forcePlayback}\n          />\n        ) : (hasVideoThumb && !shouldFallbackToSticker) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            isPriority={forcePlayback}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || firstStickerMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n            draggable={false}\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { MouseEvent as ReactMouseEvent, ReactNode } from 'react';\nimport type {\n  ElementRef } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiBotInlineMediaResult, ApiSticker } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useDynamicColorListener from '../../hooks/stickers/useDynamicColorListener';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport Icon from './icons/Icon';\nimport Sparkles from './Sparkles';\nimport StickerView from './StickerView';\n\nimport './StickerButton.scss';\n\ntype OwnProps<T> = {\n  sticker: ApiSticker;\n  size: number;\n  noPlay?: boolean;\n  title?: string;\n  className?: string;\n  noContextMenu?: boolean;\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  canViewSet?: boolean;\n  isSelected?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldIgnorePremium?: boolean;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  withTranslucentThumb?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  observeIntersectionForShowing?: ObserveFn;\n  noShowPremium?: boolean;\n  onClick?: (arg: OwnProps<T>['clickArg'], isSilent?: boolean, shouldSchedule?: boolean) => void;\n  clickArg: T;\n  onFaveClick?: (sticker: ApiSticker) => void;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n  onRemoveRecentClick?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n  isEffectEmoji?: boolean;\n  withSparkles?: boolean;\n};\n\nconst contentForStatusMenuContext = [\n  { title: 'SetTimeoutFor.Hours', value: 1, arg: 3600 },\n  { title: 'SetTimeoutFor.Hours', value: 2, arg: 7200 },\n  { title: 'SetTimeoutFor.Hours', value: 8, arg: 28800 },\n  { title: 'SetTimeoutFor.Days', value: 1, arg: 86400 },\n  { title: 'SetTimeoutFor.Days', value: 2, arg: 172800 },\n];\n\nconst StickerButton = <T extends number | ApiSticker | ApiBotInlineMediaResult | undefined = undefined>({\n  sticker,\n  size,\n  noPlay,\n  title,\n  className,\n  noContextMenu,\n  isSavedMessages,\n  isStatusPicker,\n  canViewSet,\n  observeIntersection,\n  observeIntersectionForShowing,\n  isSelected,\n  isCurrentUserPremium,\n  shouldIgnorePremium,\n  noShowPremium,\n  sharedCanvasRef,\n  withTranslucentThumb,\n  forcePlayback,\n  onClick,\n  clickArg,\n  onFaveClick,\n  onUnfaveClick,\n  onRemoveRecentClick,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  isEffectEmoji,\n  withSparkles,\n}: OwnProps<T>) => {\n  const { openStickerSet, openPremiumModal, setEmojiStatus } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n  const lang = useOldLang();\n  const hasCustomColor = sticker.shouldUseTextColor;\n  const customColor = useDynamicColorListener(ref, undefined, !hasCustomColor);\n\n  const {\n    id, stickerSetInfo,\n  } = sticker;\n\n  const isPremium = (!sticker.isFree && isEffectEmoji) || sticker.hasEffect;\n  const isCustomEmoji = sticker.isCustomEmoji || isEffectEmoji;\n  const isLocked = !isCurrentUserPremium && isPremium && !shouldIgnorePremium;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const shouldLoad = isIntersecting;\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const isIntesectingForShowing = useIsIntersecting(ref, observeIntersectionForShowing);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const shouldRenderContextMenu = Boolean(!noContextMenu && contextMenuAnchor);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => {\n    return isStatusPicker ? menuRef.current : ref.current!.querySelector('.sticker-context-menu .bubble');\n  });\n  const getLayout = useLastCallback(() => ({ withPortal: isStatusPicker, shouldAvoidNegativePosition: true }));\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenuOpen?.();\n    } else {\n      onContextMenuClose?.();\n    }\n  }, [isContextMenuOpen, onContextMenuClose, onContextMenuOpen]);\n\n  useEffect(() => {\n    if (!isIntersecting) handleContextMenuClose();\n  }, [handleContextMenuClose, isIntersecting]);\n\n  const handleClick = () => {\n    if (isContextMenuOpen) return;\n    if (isLocked) {\n      if (isEffectEmoji) {\n        openPremiumModal({ initialSection: 'effects' });\n      } else {\n        openPremiumModal({ initialSection: 'premium_stickers' });\n      }\n      return;\n    }\n    onClick?.(clickArg);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleRemoveClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextRemoveRecent = useLastCallback(() => {\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextUnfave = useLastCallback(() => {\n    onUnfaveClick!(sticker);\n  });\n\n  const handleContextFave = useLastCallback(() => {\n    onFaveClick!(sticker);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick?.(clickArg, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick?.(clickArg, undefined, true);\n  });\n\n  const handleOpenSet = useLastCallback(() => {\n    openStickerSet({ stickerSetInfo });\n  });\n\n  const handleEmojiStatusExpiresClick = useLastCallback((e: React.SyntheticEvent, duration = 0) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    handleContextMenuClose();\n    onContextMenuClick?.();\n    setEmojiStatus({\n      emojiStatus: { type: 'regular', documentId: sticker.id, until: getServerTime() + duration },\n    });\n  });\n\n  const shouldShowCloseButton = !IS_TOUCH_ENV && onRemoveRecentClick;\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    onClick && 'interactive',\n    isSelected && 'selected',\n    isCustomEmoji && 'custom-emoji',\n    isEffectEmoji && 'effect-emoji',\n    className,\n  );\n\n  const contextMenuItems = useMemo(() => {\n    if (!shouldRenderContextMenu || noContextMenu || (isCustomEmoji && !isStatusPicker)) return [];\n\n    const items: ReactNode[] = [];\n\n    if (isCustomEmoji) {\n      contentForStatusMenuContext.forEach((item) => {\n        items.push(\n          <MenuItem onClick={handleEmojiStatusExpiresClick} clickArg={item.arg}>\n            {lang(item.title, item.value, 'i')}\n          </MenuItem>,\n        );\n      });\n\n      return items;\n    }\n\n    if (onUnfaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextUnfave}>\n          {lang('Stickers.RemoveFromFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (onFaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextFave}>\n          {lang('Stickers.AddToFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (!isLocked && onClick) {\n      if (!isSavedMessages) {\n        items.push(<MenuItem onClick={handleSendQuiet} icon=\"muted\">{lang('SendWithoutSound')}</MenuItem>);\n      }\n      items.push(\n        <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>,\n      );\n    }\n\n    if (canViewSet) {\n      items.push(\n        <MenuItem onClick={handleOpenSet} icon=\"stickers\">\n          {lang('ViewPackPreview')}\n        </MenuItem>,\n      );\n    }\n    if (onRemoveRecentClick) {\n      items.push(\n        <MenuItem icon=\"delete\" onClick={handleContextRemoveRecent}>\n          {lang('DeleteFromRecent')}\n        </MenuItem>,\n      );\n    }\n    return items;\n  }, [\n    shouldRenderContextMenu, noContextMenu, isCustomEmoji, isStatusPicker, onUnfaveClick, onFaveClick, isLocked,\n    onClick, canViewSet, onRemoveRecentClick, handleEmojiStatusExpiresClick, lang, handleContextUnfave,\n    handleContextFave, isSavedMessages, handleSendScheduled, handleSendQuiet, handleOpenSet, handleContextRemoveRecent,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker?.emoji)}\n      data-sticker-id={id}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {withSparkles && <Sparkles preset=\"button\" />}\n      {isIntesectingForShowing && (\n        <StickerView\n          containerRef={ref}\n          sticker={sticker}\n          isSmall\n          size={size}\n          shouldLoop\n          shouldPreloadPreview\n          noLoad={!shouldLoad}\n          noPlay={!shouldPlay}\n          noVideoOnMobile\n          withSharedAnimation\n          sharedCanvasRef={sharedCanvasRef}\n          withTranslucentThumb={withTranslucentThumb}\n          customColor={customColor}\n          forceAlways={forcePlayback}\n        />\n      )}\n      {!noShowPremium && isLocked && (\n        <div\n          className=\"sticker-locked\"\n        >\n          <Icon name=\"lock-badge\" />\n        </div>\n      )}\n      {!noShowPremium && isPremium && !isLocked && (\n        <div className=\"sticker-premium\">\n          <Icon name=\"star\" />\n        </div>\n      )}\n      {shouldShowCloseButton && (\n        <Button\n          className=\"sticker-remove-button\"\n          color=\"dark\"\n          round\n          noFastClick\n          onClick={handleRemoveClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      {Boolean(contextMenuItems.length) && (\n        <Menu\n          ref={menuRef}\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className=\"sticker-context-menu\"\n          autoClose\n          withPortal={isStatusPicker}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {contextMenuItems}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AVrrYEbM\",\"selected\":\"QkdO_lz1\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiReactionWithPaid } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../../config';\nimport { getDocumentMediaHash, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../helpers/animatedAssets';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../AnimatedIconWithPreview';\nimport CustomEmoji from '../CustomEmoji';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionWithPaid;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  sharedCanvasHqRef?: ElementRef<HTMLCanvasElement>;\n  forcePlayback?: boolean;\n  onClick: (reaction: ApiReactionWithPaid) => void;\n  onContextMenu?: (reaction: ApiReactionWithPaid) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  forcePlayback,\n  onClick,\n  onContextMenu,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const isCustom = reaction.type === 'custom';\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation, 'full') : undefined,\n    !animationId,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, reaction.type !== 'paid', undefined, undefined, undefined, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenu?.(reaction);\n\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, onContextMenu, handleContextMenuHide, isContextMenuOpen, reaction]);\n\n  const tgsUrl = reaction.type === 'paid' ? LOCAL_TGS_URLS.StarReaction : mediaData;\n  const handleClick = useLastCallback(() => {\n    onClick(reaction);\n  });\n\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n          forceAlways={forcePlayback}\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={tgsUrl}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n          forceAlways={forcePlayback}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiEmojiStatusType, ApiReactionWithPaid, ApiSticker,\n} from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport { getReactionKey } from '../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Icon from './icons/Icon';\nimport ReactionEmoji from './reactions/ReactionEmoji';\nimport StickerButton from './StickerButton';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isChatEmojiSet?: boolean;\n  isChatStickerSet?: boolean;\n  isTranslucent?: boolean;\n  noContextMenus?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  collectibleStatuses?: ApiEmojiStatusType[];\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps & StateProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isChatEmojiSet,\n  isChatStickerSet,\n  isTranslucent,\n  noContextMenus,\n  forcePlayback,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onReactionContext,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  collectibleStatuses,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransitionDeprecated(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isStatusCollectible = stickerSet.id === COLLECTIBLE_STATUS_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useLastCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  });\n\n  const handleAddClick = useLastCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  });\n\n  const handleDefaultTopicIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const handleDefaultStatusIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useLastCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  });\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  });\n\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isCurrentUserPremium && isPremiumSet && !isChatEmojiSet;\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID\n    && stickerSet.id !== POPULAR_SYMBOL_SET_ID && stickerSet.id !== EFFECT_EMOJIS_SET_ID\n    && stickerSet.id !== EFFECT_STICKERS_SET_ID && !isChatEmojiSet && !isChatStickerSet;\n\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = (withDefaultTopicIcon || withDefaultStatusIcon) ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const collectibleEmojiIdsSet = useMemo(() => (\n    collectibleStatuses ? new Set(collectibleStatuses.map(({ documentId }) => documentId)) : undefined\n  ), [collectibleStatuses]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && !isStatusCollectible\n    && isEmoji && !isPopular && !isChatEmojiSet\n    && (!isInstalled || (!isCurrentUserPremium && !isSavedMessages));\n  const addSetButtonText = useMemo(() => {\n    if (isLocked) {\n      if (isInstalled) return lang('lng_emoji_premium_restore');\n      return lang('Unlock');\n    }\n\n    return lang('Add');\n  }, [isLocked, lang, isInstalled]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-title', withAddSetButton && 'symbol-set-title-external')}>\n            {isLocked && <Icon name=\"lock-badge\" className=\"symbol-set-locked-icon\" />}\n            <span className=\"symbol-set-name\">{stickerSet.title}</span>\n            {(isChatEmojiSet || isChatStickerSet) && (\n              <span className=\"symbol-set-chat\">{lang(isChatEmojiSet ? 'GroupEmoji' : 'GroupStickers')}</span>\n            )}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">\n                {lang(isEmoji ? 'EmojiCount' : 'Stickers', stickerSet.stickers.length, 'i')}\n              </span>\n            )}\n          </p>\n          {isRecent && (\n            <Icon className=\"symbol-set-remove\" name=\"close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {addSetButtonText}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'symbol-set-container shared-canvas-container',\n          transitionClassNames,\n          stickerSet.id === EFFECT_EMOJIS_SET_ID && 'effect-emojis',\n        )}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" draggable={false} />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <Icon name=\"star\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              onContextMenu={onReactionContext}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n              forcePlayback={forcePlayback}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            const withSparkles = sticker.id === COLLECTIBLE_STATUS_SET_ID\n              || collectibleEmojiIdsSet?.has(sticker.id);\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                noContextMenu={noContextMenus}\n                isCurrentUserPremium={isCurrentUserPremium}\n                shouldIgnorePremium={isChatEmojiSet}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n                forcePlayback={forcePlayback}\n                isEffectEmoji={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n                noShowPremium={isCurrentUserPremium\n                  && (stickerSet.id === EFFECT_STICKERS_SET_ID || stickerSet.id === EFFECT_EMOJIS_SET_ID)}\n                withSparkles={withSparkles}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +\n            {totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return { collectibleStatuses };\n  },\n)(StickerSet));\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lq8BD6Hc\",\"main\":\"p7c8y0LH\",\"hasHeader\":\"zTGriBHY\",\"main_customEmoji\":\"U0BL1VvK\",\"mainCustomEmoji\":\"U0BL1VvK\",\"header\":\"Qn3lBUNs\",\"headerWithBorder\":\"HMspKpNp\",\"stickerCover\":\"YKO0Obwy\",\"activated\":\"y02WwQk6\",\"pickerDisabled\":\"BZfaP1GD\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiEmojiStatusType,\n  ApiReaction, ApiReactionWithPaid, ApiSticker, ApiStickerSet,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChatFullInfo,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { pickTruthy, unique, uniqueByField } from '../../util/iteratees';\nimport { REM } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useScrolledState from '../../hooks/useScrolledState';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  pickerListClassName?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  collectibleStatuses?: ApiEmojiStatusType[];\n  chatEmojiSetId?: string;\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  isWithPaidReaction?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst RECENT_DEFAULT_STATUS_COUNT = 7;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  pickerListClassName,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  collectibleStatuses,\n  stickerSetsById,\n  chatEmojiSetId,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  defaultTagReactions,\n  isWithPaidReaction,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onReactionContext,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const collectibleStatusEmojis = useMemo(() => {\n    const collectibleStatusEmojiIds = collectibleStatuses?.map((status) => status.documentId);\n    return customEmojisById && collectibleStatusEmojiIds?.map((id) => customEmojisById[id]).filter(Boolean);\n  }, [customEmojisById, collectibleStatuses]);\n\n  const prefix = `${idPrefix}-custom-emoji`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const canLoadAndPlay = usePrevDuringAnimation(loadAndPlay || undefined, SLIDE_TRANSITION_DURATION);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker && isSavedMessages) {\n      if (defaultTagReactions?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('PremiumPreviewTags'),\n          reactions: defaultTagReactions,\n          count: defaultTagReactions.length,\n          isEmoji: true,\n        });\n      }\n    }\n\n    if (isReactionPicker && !isSavedMessages) {\n      const topReactionsSlice: ApiReactionWithPaid[] = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (isWithPaidReaction) {\n        topReactionsSlice.unshift({ type: 'paid' });\n      }\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .filter(({ isInactive }) => !isInactive)\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = uniqueByField(defaultStatusIconsPack.stickers\n          .slice(0, RECENT_DEFAULT_STATUS_COUNT)\n          .concat(recentCustomEmojis || []), 'id');\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n          isEmoji: true,\n        });\n      }\n      if (collectibleStatusEmojis?.length) {\n        defaultSets.push({\n          id: COLLECTIBLE_STATUS_SET_ID,\n          accessHash: '',\n          count: collectibleStatusEmojis.length,\n          stickers: collectibleStatusEmojis,\n          title: lang('CollectibleStatusesCategory'),\n          isEmoji: true,\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: oldLang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const userSetIds = [...(addedCustomEmojiIds || [])];\n    if (chatEmojiSetId) {\n      userSetIds.unshift(chatEmojiSetId);\n    }\n\n    const setIdsToDisplay = unique(userSetIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, oldLang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId, isSavedMessages, defaultTagReactions, chatEmojiSetId,\n    isWithPaidReaction, collectibleStatusEmojis, lang,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <Icon name=\"recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !canLoadAndPlay}\n              forcePlayback\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !canLoadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n        forcePlayback\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className={pickerStyles.pickerDisabled}>{oldLang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    pickerListClassName,\n    pickerStyles.hasHeader,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={listClassName}\n      >\n        {allSets.map((stickerSet, i) => {\n          const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n            || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n          const isChatEmojiSet = stickerSet.id === chatEmojiSetId;\n\n          return (\n            <StickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              loadAndPlay={Boolean(canAnimate && canLoadAndPlay)}\n              index={i}\n              idPrefix={prefix}\n              observeIntersection={observeIntersectionForSet}\n              observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n              observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n              isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n              isSavedMessages={isSavedMessages}\n              isStatusPicker={isStatusPicker}\n              isReactionPicker={isReactionPicker}\n              shouldHideHeader={shouldHideHeader}\n              withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              isChatEmojiSet={isChatEmojiSet}\n              isCurrentUserPremium={isCurrentUserPremium}\n              selectedReactionIds={selectedReactionIds}\n              availableReactions={availableReactions}\n              isTranslucent={isTranslucent}\n              onReactionSelect={onReactionSelect}\n              onReactionContext={onReactionContext}\n              onStickerSelect={handleEmojiSelect}\n              onContextMenuOpen={onContextMenuOpen}\n              onContextMenuClose={onContextMenuClose}\n              onContextMenuClick={onContextMenuClick}\n              forcePlayback\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      reactions: {\n        availableReactions,\n        recentReactions,\n        topReactions,\n        defaultTags,\n      },\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      customEmojisById,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      collectibleStatuses: isStatusPicker ? collectibleStatuses : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      chatEmojiSetId: chatFullInfo?.emojiSet?.id,\n      isWithPaidReaction: isReactionPicker && chatFullInfo?.isPaidReactionAvailable,\n      availableReactions: isReactionPicker ? availableReactions : undefined,\n      defaultTagReactions: isReactionPicker ? defaultTags : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qk9PEGRE\",\"activated\":\"WYeuJNQx\"};","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"hRzvfaRb\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: ElementRef<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"C9sWDINB\",\"topEmoji\":\"gdG3oY21\",\"description\":\"p7S4AH8A\",\"title\":\"KVpsce1g\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SuggestedStatusModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestedStatusModal'];\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n};\n\nconst CUSTOM_EMOJI_SIZE = 6 * REM;\n\nconst SuggestedStatusModal = ({ modal, currentUser, bot }: OwnProps & StateProps) => {\n  const { setEmojiStatus, closeSuggestedStatusModal, sendWebAppEvent } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !renderingModal) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: renderingModal.customEmojiId,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, renderingModal]);\n\n  const description = useMemo(() => {\n    if (!renderingModal || !bot) return undefined;\n\n    const botName = getUserFullName(bot);\n\n    if (renderingModal.duration) {\n      return lang('BotSuggestedStatusFor', {\n        bot: botName,\n        duration: formatShortDuration(lang, renderingModal.duration),\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n      });\n    }\n\n    return lang('BotSuggestedStatus', { bot: botName }, { withNodes: true, withMarkdown: true });\n  }, [bot, lang, renderingModal]);\n\n  const handleClose = useLastCallback(() => {\n    const webAppKey = renderingModal?.webAppKey;\n\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n      });\n    }\n\n    closeSuggestedStatusModal();\n  });\n\n  const handleSetStatus = useLastCallback(() => {\n    if (!renderingModal) return;\n\n    const expires = renderingModal.duration ? getServerTime() + renderingModal.duration : undefined;\n\n    setEmojiStatus({\n      referrerWebAppKey: renderingModal.webAppKey,\n      emojiStatus: { type: 'regular', documentId: renderingModal.customEmojiId, until: expires },\n    });\n    closeSuggestedStatusModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {renderingModal && (\n        <CustomEmoji\n          className={styles.topEmoji}\n          documentId={renderingModal.customEmojiId}\n          size={CUSTOM_EMOJI_SIZE}\n          loopLimit={1}\n          forceAlways\n        />\n      )}\n      <div>\n        <h3 className={styles.title}>{lang('BotSuggestedStatusTitle')}</h3>\n        <p className={styles.description}>{description}</p>\n      </div>\n      {mockPeerWithStatus && (\n        <PeerChip\n          mockPeer={mockPeerWithStatus}\n          withEmojiStatus\n        />\n      )}\n      <Button size=\"smaller\" onClick={handleSetStatus}>\n        {lang('GeneralConfirm')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const bot = modal?.botId ? selectUser(global, modal.botId) : undefined;\n\n    return {\n      currentUser,\n      bot,\n    };\n  },\n)(SuggestedStatusModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"pUyNTysT\",\"modal\":\"IK2mBqbm\",\"loading\":\"zjXCH3pT\",\"description\":\"j6xEoljc\",\"bold\":\"hAA6B1lc\",\"chip\":\"smWR78pO\",\"replaceModal\":\"GIFAjZPY\",\"replaceModalContent\":\"Jxyz9TaL\",\"avatarContainer\":\"OKp6HS1U\",\"arrow\":\"WSJdWV7L\",\"boostedWrapper\":\"NU9itcIm\",\"boostedMark\":\"upXvhNRY\"};","import { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiMyBoost } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getChatTitle, isChatAdmin, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\n\nimport styles from './BoostModal.module.scss';\n\ntype LoadedParams = {\n  boost?: ApiMyBoost;\n  leftText: string;\n  rightText?: string;\n  value: string;\n  progress: number;\n  descriptionText: string;\n  isBoosted?: boolean;\n  canBoostMore?: boolean;\n};\n\ntype BoostInfo = ({\n  isStatusLoaded: false;\n  title: string;\n} & Undefined<LoadedParams>) | ({\n  isStatusLoaded: true;\n  title: string;\n} & LoadedParams);\n\nexport type OwnProps = {\n  modal: TabState['boostModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  prevBoostedChat?: ApiChat;\n  isCurrentUserPremium?: boolean;\n};\n\nconst BoostModal = ({\n  modal,\n  chat,\n  chatFullInfo,\n  prevBoostedChat,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    applyBoost,\n    closeBoostModal,\n    requestConfetti,\n    openPremiumModal,\n    loadFullChat,\n  } = getActions();\n\n  const [isReplaceModalOpen, openReplaceModal, closeReplaceModal] = useFlag();\n  const [isWaitDialogOpen, openWaitDialog, closeWaitDialog] = useFlag();\n  const [isPremiumDialogOpen, openPremiumDialog, closePremiumDialog] = useFlag();\n\n  const isChannel = chat && isChatChannel(chat);\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (chat && !chatFullInfo) {\n      loadFullChat({ chatId: chat.id });\n    }\n  }, [chat, chatFullInfo]);\n\n  const chatTitle = useMemo(() => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, chat);\n  }, [chat, oldLang]);\n\n  const boostedChatTitle = useMemo(() => {\n    if (!prevBoostedChat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, prevBoostedChat);\n  }, [prevBoostedChat, oldLang]);\n\n  const {\n    isStatusLoaded,\n    isBoosted,\n    boost,\n    title,\n    leftText,\n    rightText,\n    value,\n    progress,\n    descriptionText,\n    canBoostMore,\n  }: BoostInfo = useMemo(() => {\n    if (!modal?.boostStatus || !chat) {\n      return {\n        isStatusLoaded: false,\n        title: oldLang('Loading'),\n      };\n    }\n\n    const {\n      hasMyBoost,\n    } = modal.boostStatus;\n\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, chat.id);\n    const areBoostsInDifferentChannels = modal?.myBoosts && !areAllBoostsInChannel(modal.myBoosts, chat.id);\n\n    const {\n      boosts,\n      currentLevel,\n      hasNextLevel,\n      levelProgress,\n      remainingBoosts,\n      isMaxLevel,\n    } = getBoostProgressInfo(modal.boostStatus, true);\n\n    const hasBoost = hasMyBoost;\n\n    const left = oldLang('BoostsLevel', currentLevel);\n    const right = hasNextLevel ? oldLang('BoostsLevel', currentLevel + 1) : undefined;\n\n    const moreBoosts = oldLang('ChannelBoost.MoreBoosts', remainingBoosts);\n\n    const modalTitle = isChannel ? oldLang('BoostChannel') : oldLang('BoostGroup');\n\n    const boostsLeftToUnrestrict = (chatFullInfo?.boostsToUnrestrict || 0) - (chatFullInfo?.boostsApplied || 0);\n\n    let description: string | undefined;\n    if (isMaxLevel) {\n      description = oldLang('BoostsMaxLevelReached');\n    } else if (boostsLeftToUnrestrict > 0 && !isChatAdmin(chat)) {\n      const boostTimes = oldLang('GroupBoost.BoostToUnrestrict.Times', boostsLeftToUnrestrict);\n      description = oldLang('GroupBoost.BoostToUnrestrict', [boostTimes, chatTitle]);\n    } else {\n      description = oldLang('ChannelBoost.MoreBoostsNeeded.Text', [chatTitle, moreBoosts]);\n    }\n\n    return {\n      isStatusLoaded: true,\n      title: modalTitle,\n      leftText: left,\n      rightText: right,\n      value: boosts.toString(),\n      progress: levelProgress,\n      remainingBoosts,\n      descriptionText: description,\n      boost: firstBoost,\n      isBoosted: hasBoost,\n      canBoostMore: areBoostsInDifferentChannels && !isMaxLevel,\n    };\n  }, [chat, chatTitle, modal, oldLang, chatFullInfo, isChannel]);\n\n  const isBoostDisabled = !modal?.myBoosts?.length && isCurrentUserPremium;\n  const isReplacingBoost = boost?.chatId && boost.chatId !== modal?.chatId;\n\n  const handleApplyBoost = useLastCallback(() => {\n    closeReplaceModal();\n    applyBoost({ chatId: chat!.id, slots: [boost!.slot] });\n    requestConfetti({});\n  });\n\n  const handleProceedPremium = useLastCallback(() => {\n    openPremiumModal();\n    closePremiumDialog();\n    closeBoostModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!boost) {\n      if (!isCurrentUserPremium) {\n        openPremiumDialog();\n        return;\n      }\n\n      closeBoostModal();\n      return;\n    }\n\n    if (!canBoostMore) {\n      closeBoostModal();\n      return;\n    }\n\n    if (boost.cooldownUntil) {\n      openWaitDialog();\n      return;\n    }\n\n    if (isReplacingBoost) {\n      openReplaceModal();\n      return;\n    }\n\n    handleApplyBoost();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeBoostModal();\n  });\n\n  function renderContent() {\n    if (!isStatusLoaded) {\n      return <Loading className={styles.loading} />;\n    }\n\n    return (\n      <>\n        <PremiumProgress\n          leftText={leftText}\n          rightText={rightText}\n          progress={progress}\n          floatingBadgeText={value}\n          floatingBadgeIcon=\"boost\"\n        />\n        {isBoosted && (\n          <div className={buildClassName(styles.description, styles.bold)}>\n            {oldLang('ChannelBoost.YouBoostedChannelText', chatTitle)}\n          </div>\n        )}\n        <div className={styles.description}>\n          {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n        </div>\n        <div className=\"dialog-buttons\">\n          <Button isText className=\"confirm-dialog-button\" disabled={isBoostDisabled} onClick={handleButtonClick}>\n            {canBoostMore ? (\n              <>\n                <Icon name=\"boost\" />\n                {oldLang(isChannel ? 'ChannelBoost.BoostChannel' : 'GroupBoost.BoostGroup')}\n              </>\n            ) : oldLang('OK')}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={handleCloseClick}>\n            {oldLang('Cancel')}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      className={styles.modal}\n      contentClassName={styles.content}\n      onClose={closeBoostModal}\n    >\n      {renderContent()}\n      {isReplacingBoost && boostedChatTitle && (\n        <Modal\n          isOpen={isReplaceModalOpen}\n          className={styles.replaceModal}\n          contentClassName={styles.replaceModalContent}\n          onClose={closeReplaceModal}\n        >\n          <div className={styles.avatarContainer}>\n            <div className={styles.boostedWrapper}>\n              <Avatar peer={prevBoostedChat} size=\"large\" />\n              <Icon name=\"boostcircle\" className={styles.boostedMark} />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar peer={chat} size=\"large\" />\n          </div>\n          <div>\n            {renderText(\n              oldLang('ChannelBoost.ReplaceBoost', [boostedChatTitle, chatTitle]), ['simple_markdown', 'emoji'],\n            )}\n          </div>\n          <div className=\"dialog-buttons\">\n            <Button isText className=\"confirm-dialog-button\" onClick={handleApplyBoost}>\n              {oldLang('Replace')}\n            </Button>\n            <Button isText className=\"confirm-dialog-button\" onClick={closeReplaceModal}>\n              {oldLang('Cancel')}\n            </Button>\n          </div>\n        </Modal>\n      )}\n      {Boolean(boost?.cooldownUntil) && (\n        <ConfirmDialog\n          isOpen={isWaitDialogOpen}\n          isOnlyConfirm\n          confirmLabel={oldLang('OK')}\n          title={oldLang('ChannelBoost.Error.BoostTooOftenTitle')}\n          onClose={closeWaitDialog}\n          confirmHandler={closeWaitDialog}\n        >\n          {renderText(\n            oldLang(\n              'ChannelBoost.Error.BoostTooOftenText',\n              formatShortDuration(lang, boost.cooldownUntil - getServerTime()),\n            ),\n            ['simple_markdown', 'emoji'],\n          )}\n        </ConfirmDialog>\n      )}\n      {!isCurrentUserPremium && (\n        <ConfirmDialog\n          isOpen={isPremiumDialogOpen}\n          confirmLabel={oldLang('Common.Yes')}\n          title={oldLang('PremiumNeeded')}\n          onClose={closePremiumDialog}\n          confirmHandler={handleProceedPremium}\n        >\n          {renderText(oldLang('PremiumNeededForBoosting'), ['simple_markdown', 'emoji'])}\n        </ConfirmDialog>\n      )}\n    </Modal>\n  );\n};\n\nfunction getFirstAvailableBoost(myBoosts: ApiMyBoost[], chatId?: string) {\n  return myBoosts.find((boost) => !boost.chatId)\n    || myBoosts.filter((b) => chatId && b.chatId !== chatId)\n      .sort((a, b) => a.date - b.date)[0];\n}\n\nfunction areAllBoostsInChannel(myBoosts: ApiMyBoost[], chatId: string) {\n  return myBoosts.every((boost) => boost.chatId === chatId);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal?.chatId);\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, modal.chatId);\n    const boostedChat = firstBoost?.chatId ? selectChat(global, firstBoost?.chatId) : undefined;\n\n    return {\n      chat,\n      chatFullInfo,\n      prevBoostedChat: boostedChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(BoostModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"clickable\":\"IzcASdzD\",\"centered\":\"xVLGjLub\",\"logo\":\"Mtx4SWww\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { selectChatMessage, selectSender } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport TableInfoModal, { type TableData } from '../common/TableInfoModal';\n\nimport styles from './GiftCodeModal.module.scss';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\n\nexport type OwnProps = {\n  modal: TabState['giftCodeModal'];\n};\n\nexport type StateProps = {\n  currentUserId?: string;\n  messageSender?: ApiPeer;\n};\n\nconst GIFTCODE_PATH = 'giftcode';\n\nconst GiftCodeModal = ({\n  currentUserId,\n  modal,\n  messageSender,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, applyGiftCode, focusMessage,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const canUse = (!modal?.info.toId || modal?.info.toId === currentUserId) && !modal?.info.usedAt;\n\n  const handleOpenGiveaway = useLastCallback(() => {\n    if (!modal || !modal.info.giveawayMessageId) return;\n    focusMessage({\n      chatId: modal.info.fromId!,\n      messageId: modal.info.giveawayMessageId,\n    });\n    closeGiftCodeModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (canUse) {\n      applyGiftCode({ slug: modal!.slug });\n      return;\n    }\n    closeGiftCodeModal();\n  });\n\n  const modalData = useMemo(() => {\n    if (!modal) return undefined;\n    const { slug, info } = modal;\n\n    const fromId = info.fromId || messageSender?.id;\n\n    const header = (\n      <>\n        <img src={PremiumLogo} alt=\"\" className={styles.logo} />\n        <p className={styles.centered}>{renderText(lang('lng_gift_link_about'), ['simple_markdown'])}</p>\n        <LinkField title=\"BoostingGiftLink\" link={`${TME_LINK_PREFIX}/${GIFTCODE_PATH}/${slug}`} />\n      </>\n    );\n\n    const tableData: TableData = [\n      [lang('BoostingFrom'), fromId ? { chatId: fromId } : lang('BoostingNoRecipient')],\n      [lang('BoostingTo'), info.toId ? { chatId: info.toId } : lang('BoostingNoRecipient')],\n      [lang('BoostingGift'), lang('BoostingTelegramPremiumFor', lang('Months', info.months, 'i'))],\n    ];\n    if (info.isFromGiveaway) {\n      tableData.push([\n        lang('BoostingReason'),\n        (\n          <span\n            className={buildClassName(info.giveawayMessageId && styles.clickable)}\n            onClick={handleOpenGiveaway}\n          >\n            {info.isFromGiveaway && !info.toId\n              ? lang('BoostingIncompleteGiveaway')\n              : lang('BoostingGiveaway')}\n          </span>\n        ),\n      ]);\n    }\n    tableData.push([\n      lang('BoostingDate'),\n      formatDateTimeToString(info.date * 1000, lang.code, true),\n    ]);\n\n    const footer = (\n      <span className={styles.centered}>\n        {renderText(\n          info.usedAt ? lang('BoostingUsedLinkDate', formatDateTimeToString(info.usedAt * 1000, lang.code, true))\n            : lang('BoostingSendLinkToAnyone'),\n          ['simple_markdown'],\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [lang, messageSender?.id, modal]);\n\n  if (!modalData) return undefined;\n\n  return (\n    <TableInfoModal\n      isOpen={isOpen}\n      title={lang('lng_gift_link_title')}\n      tableData={modalData.tableData}\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={canUse ? lang('BoostingUseLink') : lang('Close')}\n      onButtonClick={handleButtonClick}\n      onClose={closeGiftCodeModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { message } = modal || {};\n    const chatMessage = message && selectChatMessage(global, message.chatId, message.messageId);\n    const sender = chatMessage && selectSender(global, chatMessage);\n\n    return {\n      currentUserId: global.currentUserId,\n      messageSender: sender,\n    };\n  },\n)(GiftCodeModal));\n","export function getClosestEntry(arr: number[], value: number): number {\n  return arr.reduce((prev, curr) => {\n    return Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev;\n  });\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"X6K5oA8U\"};","import { memo, useEffect, useMemo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup.tsx';\n\nimport styles from './DeleteAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['deleteAccountModal'];\n};\n\nexport type StateProps = {\n  selfDestructAccountDays?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst DeleteAccountModal = ({\n  modal,\n  selfDestructAccountDays,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, closeDeleteAccountModal, setAccountTTL,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const [selectedOption, setSelectedOption] = useState<string>();\n\n  const optionToDays = useLastCallback((value: string): number => {\n    return Number(value) * DAYS_PER_MONTH;\n  });\n\n  const initialSelectedOption = useMemo(() => {\n    if (!selfDestructAccountDays) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, selfDestructAccountDays / DAYS_PER_MONTH).toString();\n  }, [selfDestructAccountDays]);\n\n  useEffect(() => {\n    if (initialSelectedOption) {\n      setSelectedOption(initialSelectedOption);\n    }\n  }, [initialSelectedOption]);\n\n  const options: { value: string; label: string }[] = useMemo(() => {\n    return ACCOUNT_TTL_OPTIONS.map((months) => ({\n      value: String(months),\n      label: lang('Months', { count: months }, { pluralValue: 1 }),\n    }));\n  }, [lang]);\n\n  const handleChange = useLastCallback((value: string) => {\n    setSelectedOption(value);\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!selectedOption) return;\n    setAccountTTL({ days: optionToDays(selectedOption) });\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteAccountModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('SelfDestructTitle')}\n      onClose={closeGiftCodeModal}\n      className={styles.root}\n    >\n      <p>{lang('SelfDestructSessionsDescription')}</p>\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedOption}\n        onChange={handleChange}\n        withIcon\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n        >\n          {lang('Save')}\n        </Button>\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { selfDestructAccountDays } = modal || {};\n\n    return {\n      selfDestructAccountDays,\n    };\n  },\n)(DeleteAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"dl10exNi\",\"picker-wrapper\":\"gxWY5c6x\",\"pickerWrapper\":\"gxWY5c6x\",\"picker-header\":\"h8N7eyob\",\"pickerHeader\":\"h8N7eyob\",\"picker-header-info\":\"Rth2Qu07\",\"pickerHeaderInfo\":\"Rth2Qu07\",\"selection-toggle\":\"B6eAugx8\",\"selectionToggle\":\"B6eAugx8\",\"foldersWrapper\":\"mwcvgD2S\",\"folders\":\"LKavx8ww\",\"folder\":\"qglLx5Dn\",\"button-text\":\"bgaRuEMs\",\"buttonText\":\"bgaRuEMs\",\"button-badge\":\"rTe14Z22\",\"buttonBadge\":\"rTe14Z22\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const isNew = invite.alreadyPeerIds.length === 0;\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = isNew ? lang('FolderLinkSubtitleNew')\n    : newChatsCount ? lang('FolderLinkSubtitleAdd', {\n      chats: lang('FolderLinkSubtitleAddCount', { count: newChatsCount }, { pluralValue: newChatsCount }),\n      title: renderTextWithEntities({\n        text: folder.title.text,\n        entities: folder.title.entities,\n        noCustomEmojiPlayback: folder.noTitleAnimations,\n      }),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    }) : lang('FolderLinkSubtitleAlready');\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {oldLang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length\n                  ? oldLang('DeselectAll') : oldLang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.alreadyPeerIds}\n          lockedSelectedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && oldLang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {oldLang('FolderLinkButtonJoinPlural', selectedPeerIds.length, 'i')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>([]);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </div>\n        </>\n      )}\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {lang('FolderLinkSubtitleNew')}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? oldLang('DeselectAll') : oldLang('SelectAll')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.peerIds}\n          lockedSelectedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        size=\"smaller\"\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkAddFolder')}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport ChatlistNew from './ChatlistNew';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  modal?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  modal,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(modal);\n  const renderingInfo = usePreviousDeprecated(modal) || modal;\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) {\n      return renderTextWithEntities({\n        text: renderingFolder.title.text,\n        entities: renderingFolder.title.entities,\n        noCustomEmojiPlayback: renderingFolder.noTitleAnimations,\n      });\n    }\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) {\n      return renderTextWithEntities({\n        text: renderingInfo.invite.title.text,\n        entities: renderingInfo.invite.title.entities,\n        noCustomEmojiPlayback: renderingInfo.invite.noTitleAnimations,\n      });\n    }\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: TeactNode) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab\n            className={styles.folder}\n            isActive\n            badgeCount={folderTabNumber}\n            isBadgeActive\n            title={folderTitle}\n          />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { invite, removal } = modal || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MZ0RCecx\",\"title\":\"ar8XeydN\",\"participantCount\":\"un00TXYY\",\"participants\":\"YvkZ6c2D\",\"participant\":\"DHJSBDeE\",\"buttons\":\"KFtrPtNr\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport PeerBadge from '../../common/PeerBadge';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './ChatInviteModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['chatInviteModal'];\n};\n\nconst ChatInviteModal = ({ modal }: OwnProps) => {\n  const { acceptChatInvite, closeChatInviteModal, showNotification } = getActions();\n  const participantsRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const prevModal = usePrevious(modal);\n  const { hash, inviteInfo } = modal || prevModal || {};\n  const {\n    about, isBroadcast, participantIds, participantsCount, photo, isRequestNeeded,\n  } = inviteInfo || {};\n\n  const handleClose = useLastCallback(() => {\n    closeChatInviteModal();\n  });\n\n  const handleAccept = useLastCallback(() => {\n    acceptChatInvite({ hash: hash! });\n\n    showNotification({\n      message: isBroadcast ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n    });\n\n    handleClose();\n  });\n\n  const acceptLangKey = isBroadcast ? 'ProfileJoinChannel' : 'JoinGroup';\n  const requestToJoinLangKey = isBroadcast ? 'MemberRequests.RequestToJoinChannel'\n    : 'MemberRequests.RequestToJoinGroup';\n\n  const customPeer = useMemo(() => {\n    if (!inviteInfo) return undefined;\n\n    return getCustomPeerFromInvite(inviteInfo);\n  }, [inviteInfo]);\n\n  const participants = useMemo(() => {\n    if (!participantIds) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n    return participantIds.map((id) => selectUser(global, id)).filter(Boolean);\n  }, [participantIds]);\n\n  useHorizontalScroll(participantsRef, !modal || !participants);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      contentClassName={styles.content}\n      isSlim\n      onClose={handleClose}\n      onEnter={handleAccept}\n    >\n      {customPeer && <Avatar size=\"jumbo\" photo={photo} peer={customPeer} withVideo />}\n      {customPeer && <FullNameTitle className={styles.title} peer={customPeer} />}\n      {about && <p className={styles.about}>{about}</p>}\n      <p className={styles.participantCount}>\n        {lang(isBroadcast ? 'Subscribers' : 'Members', participantsCount, 'i')}\n      </p>\n      {participants && (\n        <div ref={participantsRef} className={buildClassName(styles.participants, 'no-scrollbar')}>\n          {participants.map((participant) => (\n            <PeerBadge className={styles.participant} peer={participant} text={getUserFullName(participant)} />\n          ))}\n        </div>\n      )}\n      <div className={buildClassName('dialog-buttons', styles.buttons)}>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleAccept}>\n          {lang(isRequestNeeded ? requestToJoinLangKey : acceptLangKey)}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ChatInviteModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LFkgLoAk\",\"title\":\"La4sUYaq\",\"description\":\"Bn5kz5br\",\"moreButton\":\"JdN5pGTw\",\"secondary\":\"hbsLlXSH\",\"content\":\"TZE15Pt_\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { TableAboutData } from '../common/TableAboutModal';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport TableAboutModal from '../common/TableAboutModal';\n\nimport styles from './AboutAdsModal.module.scss';\n\nexport type OwnProps = {\n\n  modal: TabState['aboutAdsModal'];\n};\n\ntype StateProps = {\n  minLevelToRestrictAds?: number;\n};\n\nconst AboutAdsModal = ({ modal, minLevelToRestrictAds }: OwnProps & StateProps) => {\n  const { closeAboutAdsModal } = getActions();\n\n  const moreMenuRef = useRef<HTMLButtonElement>();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const {\n    canReport, randomId, additionalInfo, sponsorInfo,\n  } = renderingModal || {};\n  const isMonetizationSharing = canReport;\n\n  const renderingIsNewDesign = useCurrentOrPrev(isMonetizationSharing);\n\n  const oldLang = useOldLang();\n\n  const regularAdContent = useMemo(() => {\n    return (\n      <>\n        <h3>{oldLang('SponsoredMessageInfoScreen.Title')}</h3>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n        <p>\n          <SafeLink\n            url={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n            text={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n          />\n        </p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      </>\n    );\n  }, [oldLang]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(moreMenuRef, !renderingIsNewDesign);\n\n  const handleClose = useLastCallback(() => {\n    closeAboutAdsModal();\n    handleContextMenuClose();\n    handleContextMenuHide();\n  });\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <>\n        <h3 className={styles.title}>{oldLang('AboutRevenueSharingAds')}</h3>\n        <p className={buildClassName(styles.description, styles.secondary)}>\n          {oldLang('RevenueSharingAdsAlertSubtitle')}\n        </p>\n        <Button\n          ref={moreMenuRef}\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className={styles.moreButton}\n          onClick={handleContextMenu}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      </>\n    );\n\n    const listItemData = [\n      ['lock', oldLang('RevenueSharingAdsInfo1Title'),\n        renderText(oldLang('RevenueSharingAdsInfo1Subtitle'), ['simple_markdown'])],\n      ['revenue-split', oldLang('RevenueSharingAdsInfo2Title'),\n        renderText(oldLang('RevenueSharingAdsInfo2Subtitle'), ['simple_markdown'])],\n      ['nochannel', oldLang('RevenueSharingAdsInfo3Title'),\n        renderText(oldLang('RevenueSharingAdsInfo3Subtitle', minLevelToRestrictAds), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{renderText(oldLang('RevenueSharingAdsInfo4Title'), ['simple_markdown'])}</h3>\n        <p className={styles.description}>\n          {renderText(oldLang('RevenueSharingAdsInfo4Subtitle2', ''), ['simple_markdown'])}\n          <SafeLink\n            url={oldLang('PromoteUrl')}\n            text={oldLang('LearnMoreArrow')}\n          />\n        </p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, handleContextMenu, minLevelToRestrictAds]);\n\n  if (renderingIsNewDesign) {\n    return (\n      <>\n        <TableAboutModal\n          isOpen={isOpen}\n          listItemData={modalData?.listItemData}\n          headerIconName=\"channel\"\n          withSeparator\n          header={modalData?.header}\n          footer={modalData?.footer}\n          buttonText={oldLang('RevenueSharingAdsUnderstood')}\n          onClose={handleClose}\n        />\n        {contextMenuAnchor && randomId && (\n          <SponsoredMessageContextMenuContainer\n            isOpen={isContextMenuOpen}\n            anchor={contextMenuAnchor}\n            triggerRef={moreMenuRef}\n            randomId={randomId}\n            additionalInfo={additionalInfo}\n            canReport={canReport}\n            sponsorInfo={sponsorInfo}\n            shouldSkipAbout\n            onItemClick={handleClose}\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      {regularAdContent}\n      <Button\n        size=\"smaller\"\n        onClick={handleClose}\n      >\n        {oldLang('RevenueSharingAdsUnderstood')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const minLevelToRestrictAds = global.appConfig?.channelRestrictAdsLevelMin;\n\n    return {\n      minLevelToRestrictAds,\n    };\n  },\n)(AboutAdsModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"t9iZUzOj\",\"description\":\"mjveZmdr\",\"toncoin\":\"ATkOSqJ7\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\n\nimport type { TableAboutData } from '../modals/common/TableAboutModal';\n\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TableAboutModal from '../modals/common/TableAboutModal';\nimport Icon from './icons/Icon';\nimport SafeLink from './SafeLink';\n\nimport styles from './AboutMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\nconst AboutMonetizationModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const blockchainText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnLearnCoinAbout',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationInfoTONLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const monetizationTitle = useMemo(() => {\n    return lang(\n      'MonetizationInfoTONTitle',\n      undefined,\n      {\n        withNodes: true,\n        specialReplacement: { '💎': <Icon className={styles.toncoin} name=\"toncoin\" /> },\n      },\n    );\n  }, [lang]);\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <h3 className={styles.title}>{oldLang('lng_channel_earn_learn_title')}</h3>\n    );\n\n    const listItemData = [\n      ['channel', oldLang('lng_channel_earn_learn_in_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_in_about'), ['simple_markdown'])],\n      ['revenue-split', oldLang('lng_channel_earn_learn_split_subtitle'),\n        renderText(oldLang('Monetization.Intro.Split.Text'), ['simple_markdown'])],\n      ['cash-circle', oldLang('lng_channel_earn_learn_out_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_out_about'), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{monetizationTitle}</h3>\n        <p className={styles.description}>{blockchainText}</p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, monetizationTitle, blockchainText]);\n\n  if (!modalData) {\n    return undefined;\n  }\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      listItemData={modalData.listItemData}\n      headerIconName=\"cash-circle\"\n      withSeparator\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={oldLang('RevenueSharingAdsUnderstood')}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(AboutMonetizationModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WqeWhMAS\",\"content\":\"oofoCYlu\"};","import {\n  memo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Modal from '../ui/Modal';\nimport PasswordForm from './PasswordForm';\n\nimport styles from './VerificationMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['monetizationVerificationModal'];\n};\n\ntype StateProps = {\n  passwordHint?: string;\n};\n\nconst VerificationMonetizationModal = ({\n  modal,\n  passwordHint,\n}: OwnProps & StateProps) => {\n  const {\n    closeMonetizationVerificationModal, clearMonetizationVerificationError, processMonetizationRevenueWithdrawalUrl,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useLastCallback((password: string) => {\n    if (!renderingModal) return;\n    processMonetizationRevenueWithdrawalUrl({\n      peerId: renderingModal.chatId,\n      currentPassword: password,\n    });\n  });\n\n  const handleClearError = useLastCallback(() => {\n    clearMonetizationVerificationError();\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeMonetizationVerificationModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('CheckPasswordTitle')}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      <div className={buildClassName(styles.content, 'settings-content password-form custom-scroll')}>\n        <div className=\"settings-item pt-0\">\n          <PasswordForm\n            shouldShowSubmit\n            placeholder={lang('CheckPasswordPlaceholder')}\n            error={renderingModal?.errorKey && lang.withRegular(renderingModal.errorKey)}\n            description={lang('CheckPasswordDescription')}\n            clearError={handleClearError}\n            isLoading={renderingModal?.isLoading}\n            hint={passwordHint}\n            isPasswordVisible={shouldShowPassword}\n            shouldResetValue={isOpen}\n            onChangePasswordVisibility={setShouldShowPassword}\n            onSubmit={handleSubmit}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      passwordHint,\n    };\n  },\n)(VerificationMonetizationModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MKdSUg2P\",\"chatItem\":\"qEIwBtp0\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './EmojiStatusAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['emojiStatusAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n  stickerSet?: ApiStickerSet;\n  isPremium?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nconst INTERVAL = 3200;\n\nconst EmojiStatusAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n  stickerSet,\n  isPremium,\n  isAccountFrozen,\n}) => {\n  const {\n    closeEmojiStatusAccessModal,\n    toggleUserEmojiStatusPermission,\n    sendWebAppEvent,\n    openPremiumModal,\n    loadDefaultStatusIcons,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [currentStatusIndex, setCurrentStatusIndex] = useState<number>(0);\n\n  useEffect(() => {\n    if (isOpen && !stickerSet?.stickers && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n    }\n  }, [isOpen, stickerSet, isAccountFrozen]);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !stickerSet?.stickers) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: stickerSet.stickers[currentStatusIndex].id,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, stickerSet, currentStatusIndex]);\n\n  const totalCount = stickerSet?.stickers?.length;\n  useInterval(\n    () => {\n      if (!totalCount) return;\n      setCurrentStatusIndex((prevIndex) => (prevIndex + 1) % totalCount);\n    },\n    totalCount ? INTERVAL : undefined,\n  );\n\n  const renderPickerItem = useLastCallback(() => {\n    return (\n      <PeerChip\n        withEmojiStatus\n        className={styles.chatItem}\n        itemClassName={styles.itemName}\n        mockPeer={mockPeerWithStatus}\n      />\n    );\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      if (isPremium) {\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'allowed',\n            },\n          },\n        });\n        toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: true, isBotAccessEmojiGranted: true });\n      } else {\n        openPremiumModal();\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'cancelled',\n            },\n          },\n        });\n      }\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'emoji_status_access_requested',\n          eventData: {\n            status: 'cancelled',\n          },\n        },\n      });\n    }\n    if (isPremium) {\n      toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: false });\n    }\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('EmojiStatusAccessText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      contentClassName={styles.content}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderPickerItem()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const isPremium = selectIsCurrentUserPremium(global);\n    const stickerSet = global.defaultStatusIconsId ? selectStickerSet(global, global.defaultStatusIconsId) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUser,\n      stickerSet,\n      isPremium,\n      isAccountFrozen,\n    };\n  },\n)(EmojiStatusAccessModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { getGeolocationStatus } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './LocationAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['locationAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst LocationAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n}) => {\n  const {\n    closeLocationAccessModal, toggleUserLocationPermission, sendWebAppEvent,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const confirmHandler = useLastCallback(async () => {\n    const geolocationData = await getGeolocationStatus();\n    const { geolocation } = geolocationData;\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: true,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: true,\n            latitude: geolocation?.latitude,\n            longitude: geolocation?.longitude,\n            altitude: geolocation?.altitude,\n            course: geolocation?.heading,\n            speed: geolocation?.speed,\n            horizontal_accuracy: geolocation?.accuracy,\n            vertical_accuracy: geolocation?.accuracy,\n          },\n        },\n      });\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: false,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: false,\n          },\n        },\n      });\n    }\n  });\n\n  const renderInfo = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return (\n      <div className={styles.avatars}>\n        <Avatar\n          size=\"large\"\n          peer={currentUser}\n        />\n        <Icon name=\"next\" className={styles.arrow} />\n        <Avatar\n          size=\"large\"\n          peer={modal.bot}\n        />\n      </div>\n    );\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('LocationPermissionText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderInfo()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n\n    return {\n      currentUser,\n    };\n  },\n)(LocationAccessModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatars\":\"CGPoDaLo\",\"arrow\":\"pzERgD5x\"};","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"qJDgUtjV\",\"root\":\"njPBcVYr\",\"modalTitle\":\"ZAdG13Ah\",\"optionText\":\"oWujoaSC\",\"option\":\"aFbjDzNo\",\"optionButton\":\"VbE0HzDs\",\"sectionTitle\":\"jrA2dOiw\",\"description\":\"k71Zrc_P\",\"title\":\"mMmY6YR4\",\"titleMultiline\":\"lVVyV0py\",\"subtitle\":\"gSkAFc4u\",\"transition\":\"HjsGIG6e\"};","import {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportAdModal.module.scss';\n\nconst ADDED_PADDING = 56;\n\nexport type OwnProps = {\n  modal: TabState['reportAdModal'];\n};\n\nconst ReportAdModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportSponsored, closeReportAdModal, openPreviousReportAdModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const { chatId, randomId } = modal!;\n    reportSponsored({ peerId: chatId, randomId, option });\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    if (!renderingDepth) {\n      closeReportAdModal();\n      return;\n    }\n\n    openPreviousReportAdModal();\n  });\n\n  const bottomText = useMemo(() => {\n    if (!modal) return undefined;\n    const template = lang('lng_report_sponsored_reported_learn');\n    const parts = template.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        text={lang('lng_report_sponsored_reported_link')}\n        url={lang('ReportAd.Help_URL')}\n      />,\n      parts[1],\n    ];\n  }, [lang, modal]);\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(renderingDepth ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <Icon name={renderingDepth ? 'arrow-left' : 'close'} />\n        </Button>\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={styles.title}>{lang('ReportAd')}</h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.subtitle]);\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      className={styles.root}\n      header={header}\n      onClose={closeReportAdModal}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3>\n          {renderingSection?.options.map((option) => (\n            <ListItem\n              narrow\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n        </div>\n        <p className={styles.description}>{bottomText}</p>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAdModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"kq9LwNTZ\",\"root\":\"E1bGWeON\",\"content\":\"tNysQgHL\",\"modalTitle\":\"Lj_ezEWU\",\"header\":\"AlMDkK7c\",\"optionText\":\"FU8m6NUU\",\"option\":\"RoxwMzvA\",\"optionButton\":\"Z6skYdvb\",\"sectionTitle\":\"GSfUuTet\",\"description\":\"zwfjNhF9\",\"title\":\"QawchdxB\",\"hasDepth\":\"CV7kzv9H\",\"titleMultiline\":\"OYFbu8fQ\",\"subtitle\":\"OUFckTb7\",\"transition\":\"n2VxPirU\",\"block\":\"KpptZ3Mk\",\"optionInfo\":\"yc3szGcx\",\"reportIcon\":\"kO8JC4gK\"};","import type { ChangeEvent } from 'react';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport TextArea from '../../ui/TextArea';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportModal.module.scss';\n\nconst MAX_DESCRIPTION = 512;\nconst ADDED_PADDING = 20;\n\nexport type OwnProps = {\n  modal: TabState['reportModal'];\n};\n\nconst ReportModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportMessages, reportStory, closeReportModal, openPreviousReportModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const [text, setText] = useState('');\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    if (!messageIds) return;\n    switch (subject) {\n      case 'message':\n        reportMessages({ chatId: chatId!, messageIds, option });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds[0], peerId: peerId!, option,\n        });\n        break;\n    }\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal?.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    openPreviousReportModal();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeReportModal();\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        {renderingDepth ? (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Back')}\n            onClick={handleBackClick}\n          >\n            <Icon name=\"arrow-left\" />\n          </Button>\n        ) : (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={handleCloseClick}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={buildClassName(styles.title, renderingDepth && styles.hasDepth)}>\n            {renderingSection?.options\n              ? lang(modal?.subject === 'story' ? 'ReportStory' : 'Report') : renderingSection?.title}\n          </h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.options, renderingSection?.subtitle, renderingSection?.title]);\n\n  const handleTextChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n  });\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  const closeReportMessageModalHandler = useLastCallback(() => {\n    setText('');\n    closeReportModal();\n  });\n\n  const sendMessageReportHandler = useLastCallback(() => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    switch (subject) {\n      case 'message':\n        reportMessages({\n          chatId: chatId!, messageIds, option: renderingSection?.option, description: text,\n        });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds?.[0], peerId: peerId!, option: renderingSection?.option, description: text,\n        });\n        break;\n    }\n    closeReportMessageModalHandler();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      header={header}\n      onClose={closeReportMessageModalHandler}\n      contentClassName={styles.content}\n      className={buildClassName(styles.root, modal?.subject === 'story' && 'component-theme-dark')}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          {renderingSection?.options\n            ? <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3> : undefined}\n          {renderingSection?.options?.map((option) => (\n            <ListItem\n              narrow\n              nonInteractive\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n          {renderingSection?.option ? (\n            <div className={styles.block}>\n              <AnimatedIconWithPreview\n                tgsUrl={LOCAL_TGS_URLS.Report}\n                size={100}\n                className={styles.reportIcon}\n                nonInteractive\n                forceAlways\n                noLoop={false}\n              />\n              <TextArea\n                id=\"option\"\n                className={styles.optionInfo}\n                label={renderingSection.isOptional ? lang('Report2CommentOptional') : lang('Report2Comment')}\n                onChange={handleTextChange}\n                value={text}\n                maxLength={MAX_DESCRIPTION}\n                maxLengthIndicator={(MAX_DESCRIPTION - text.length).toString()}\n                noReplaceNewlines\n              />\n              <Button\n                size=\"smaller\"\n                onClick={sendMessageReportHandler}\n                disabled={!renderingSection.isOptional ? !text.length : undefined}\n              >\n                {lang('ReportSend')}\n              </Button>\n            </div>\n          ) : undefined}\n        </div>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Rzj2LMLf\",\"content\":\"Ve4u2KVI\",\"modalTitle\":\"E42tgAwD\",\"container\":\"pNSCKAVN\",\"header\":\"P1fPh6h8\",\"actionMessageView\":\"McJgXCtB\",\"info\":\"xWnXsG7q\",\"background\":\"_6w75ldP\",\"customBgImage\":\"CZkpv8n0\",\"customBgColor\":\"VJAYrDF_\",\"withTransition\":\"lElCwweL\",\"blurred\":\"m8xzfVvU\",\"withRightColumn\":\"rJCyBVMB\"};","import {\n  type FC,\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getMockPreparedMessageFromResult, getUserFullName } from '../../../global/helpers';\nimport { selectTheme, selectThemeValues, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Message from '../../middle/message/Message';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './PreparedMessageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['preparedMessageModal'];\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  bot?: ApiUser;\n};\n\nconst PreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  customBackground,\n  backgroundColor,\n  bot,\n}) => {\n  const {\n    closePreparedInlineMessageModal, sendWebAppEvent, openSharePreparedMessageModal,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const { webAppKey, message, botId } = modal || {};\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const handleOpenClick = useLastCallback(() => {\n    if (webAppKey && botId && message) {\n      openSharePreparedMessageModal({\n        webAppKey,\n        message,\n      });\n      closePreparedInlineMessageModal();\n    }\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closePreparedInlineMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.header}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang('Close')}\n          onClick={handleCloseClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <h3 className={buildClassName('modal-title', styles.modalTitle)}>\n          {lang('BotShareMessage')}\n        </h3>\n      </div>\n    );\n  }, [lang, modal]);\n\n  const localMessage = useMemo(() => {\n    if (!botId || !message || !webAppKey) return undefined;\n    return getMockPreparedMessageFromResult(botId, message);\n  }, [botId, message, webAppKey]);\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  return (\n    <Modal\n      dialogRef={containerRef}\n      isOpen={isOpen}\n      header={header}\n      onClose={handleCloseClick}\n      className={styles.root}\n      contentClassName={styles.content}\n    >\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        {localMessage && (\n          <Message\n            key={botId}\n            message={localMessage}\n            threadId={MAIN_THREAD_ID}\n            messageListType=\"thread\"\n            noComments\n            noReplies\n            appearanceOrder={0}\n            isJustAdded={false}\n            isFirstInGroup\n            isLastInGroup\n            isLastInList={false}\n            isFirstInDocumentGroup={false}\n            isLastInDocumentGroup={false}\n          />\n        )}\n      </div>\n      <div className={styles.container}>\n        <p className={styles.info}>\n          {lang('WebAppShareMessageInfo', { user: getUserFullName(bot) })}\n        </p>\n        <Button\n          size=\"smaller\"\n          onClick={handleOpenClick}\n        >\n          {lang('BotShareMessageShare')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }) => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n    } = selectThemeValues(global, theme) || {};\n    const bot = modal ? selectUser(global, modal?.botId) : undefined;\n\n    return {\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      bot,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(PreparedMessageModal));\n","import {\n  type FC,\n  memo, useEffect,\n} from '../../../lib/teact/teact';\nimport {\n  getActions, getGlobal, withGlobal,\n} from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectPeer, selectTabState,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePaidMessageConfirmation from '../../middle/composer/hooks/usePaidMessageConfirmation';\n\nimport PaymentMessageConfirmDialog from '../../common/PaymentMessageConfirmDialog';\nimport RecipientPicker from '../../common/RecipientPicker';\n\nexport type OwnProps = {\n  modal: TabState['sharePreparedMessageModal'];\n};\n\ntype StateProps = {\n  isPaymentMessageConfirmDialogOpen: boolean;\n  starsBalance: number;\n  isStarsBalanceModalOpen: boolean;\n};\n\nexport type SendParams = {\n  peerName?: string;\n  starsForSendMessage: number;\n};\n\nconst SharePreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal, isPaymentMessageConfirmDialogOpen, isStarsBalanceModalOpen, starsBalance,\n}) => {\n  const {\n    closeSharePreparedMessageModal,\n    sendInlineBotResult,\n    sendWebAppEvent,\n    showNotification,\n    updateSharePreparedMessageModalSendArgs,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const {\n    message, filter, webAppKey, pendingSendArgs,\n  } = modal || {};\n\n  const {\n    starsForSendMessage,\n  } = pendingSendArgs || {};\n\n  const {\n    closeConfirmDialog: closeConfirmModalPayForMessage,\n    dialogHandler: paymentMessageConfirmDialogHandler,\n    shouldAutoApprove: shouldPaidMessageAutoApprove,\n    setAutoApprove: setShouldPaidMessageAutoApprove,\n    handleWithConfirmation: handleActionWithPaymentConfirmation,\n  } = usePaidMessageConfirmation(starsForSendMessage || 0, isStarsBalanceModalOpen, starsBalance);\n\n  const handleClose = useLastCallback(() => {\n    closeSharePreparedMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const handleSend = useLastCallback((id: string, threadId?: ThreadId) => {\n    if (message && webAppKey) {\n      const global = getGlobal();\n      const peer = selectPeer(global, id);\n      sendInlineBotResult({\n        chatId: id,\n        threadId: threadId || MAIN_THREAD_ID,\n        id: message.result.id,\n        queryId: message.result.queryId,\n      });\n      if (!starsForSendMessage) {\n        showNotification({\n          message: lang('BotSharedToOne', getPeerTitle(lang, peer!)),\n        });\n      }\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_sent',\n        },\n      });\n      closeSharePreparedMessageModal();\n      updateSharePreparedMessageModalSendArgs({ args: undefined });\n    }\n  });\n\n  const handleSelectRecipient = useLastCallback((id: string, threadId?: ThreadId) => {\n    updateSharePreparedMessageModalSendArgs({ args: { peerId: id, threadId } });\n  });\n\n  const handleSendWithPaymentConfirmation = useLastCallback(() => {\n    if (pendingSendArgs) {\n      handleActionWithPaymentConfirmation(handleSend, pendingSendArgs.peerId, pendingSendArgs.threadId);\n    }\n  });\n\n  const handleClosePaymentMessageConfirmDialog = useLastCallback(() => {\n    closeConfirmModalPayForMessage();\n    updateSharePreparedMessageModalSendArgs({ args: undefined });\n  });\n\n  useEffect(() => {\n    if (pendingSendArgs) {\n      handleSendWithPaymentConfirmation();\n    }\n  }, [pendingSendArgs]);\n\n  const global = getGlobal();\n  const peer = pendingSendArgs ? selectPeer(global, pendingSendArgs.peerId) : undefined;\n  const peerName = peer ? getPeerTitle(lang, peer) : undefined;\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <>\n      <RecipientPicker\n        isOpen={isOpen}\n        searchPlaceholder={lang('Search')}\n        filter={filter}\n        onSelectRecipient={handleSelectRecipient}\n        onClose={handleClose}\n        onCloseAnimationEnd={unmarkIsShown}\n        isLowStackPriority\n      />\n      <PaymentMessageConfirmDialog\n        isOpen={isPaymentMessageConfirmDialogOpen}\n        onClose={handleClosePaymentMessageConfirmDialog}\n        userName={peerName}\n        messagePriceInStars={starsForSendMessage || 0}\n        messagesCount={1}\n        shouldAutoApprove={shouldPaidMessageAutoApprove}\n        setAutoApprove={setShouldPaidMessageAutoApprove}\n        confirmHandler={paymentMessageConfirmDialogHandler}\n      />\n    </>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { isPaymentMessageConfirmDialogOpen } = tabState;\n    const starsBalance = global.stars?.balance.amount || 0;\n    const isStarsBalanceModalOpen = Boolean(tabState.starsBalanceModal);\n    return {\n      isPaymentMessageConfirmDialogOpen,\n      starsBalance,\n      isStarsBalanceModalOpen,\n    };\n  },\n)(SharePreparedMessageModal));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  const resetPermissions = useCallback(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n  }, [defaultPermissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n    resetPermissions,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\n\nimport { isChatPublic } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  chatId?: string;\n  handlePermissionChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  permissions: ApiChatBannedRights;\n  isMediaDropdownOpen: boolean;\n  setIsMediaDropdownOpen: (open: boolean) => void;\n  className?: string;\n  shiftedClassName?: string;\n  dropdownClassName?: string;\n  withCheckbox?: boolean;\n  permissionGroup?: boolean;\n  getControlIsDisabled?: (key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => boolean | undefined;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasLinkedChat?: boolean;\n};\n\nconst permissionKeyList: (keyof ApiChatBannedRights)[] = [\n  'sendPhotos', 'sendVideos', 'sendStickers',\n  'sendAudios', 'sendDocs', 'sendVoices', 'sendRoundvideos', 'embedLinks', 'sendPolls',\n];\n\nconst PermissionCheckboxList: FC<OwnProps & StateProps> = ({\n  chat,\n  isMediaDropdownOpen,\n  setIsMediaDropdownOpen,\n  hasLinkedChat,\n  permissions,\n  handlePermissionChange,\n  className,\n  shiftedClassName,\n  dropdownClassName,\n  withCheckbox,\n  getControlIsDisabled,\n  permissionGroup,\n}) => {\n  const {\n    showNotification,\n  } = getActions();\n\n  const { isForum } = chat || {};\n\n  const lang = useOldLang();\n\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  const countCheckedPermissions = useMemo(() => {\n    return permissionKeyList.reduce((count, key) => {\n      if (!permissions[key]) {\n        count += 1;\n      }\n      return count;\n    }, 0);\n  }, [permissions]);\n\n  const handleOpenMediaDropdown = useLastCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  });\n\n  const handleDisabledClick = useLastCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  });\n\n  return (\n    <>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendPlain\"\n          checked={!permissions.sendPlain}\n          label={lang('UserRestrictionsSend')}\n          blocking\n          permissionGroup={permissionGroup}\n          onChange={handlePermissionChange}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendPlain')}\n        />\n      </div>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendMedia\"\n          checked={!permissions.sendMedia}\n          label={lang('UserRestrictionsSendMedia')}\n          labelText={`${countCheckedPermissions}/${permissionKeyList.length}`}\n          blocking\n          permissionGroup={permissionGroup}\n          rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n          onChange={handlePermissionChange}\n          onClickLabel={handleOpenMediaDropdown}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendMedia')}\n        />\n      </div>\n      <div className={dropdownClassName}>\n        <div\n          className={className}\n        >\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPhotos\"\n              checked={!permissions.sendPhotos}\n              label={lang('UserRestrictionsSendPhotos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPhotos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVideos\"\n              checked={!permissions.sendVideos}\n              label={lang('UserRestrictionsSendVideos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendStickers')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendAudios\"\n              checked={!permissions.sendAudios}\n              label={lang('UserRestrictionsSendMusic')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendAudios')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendDocs\"\n              checked={!permissions.sendDocs}\n              label={lang('UserRestrictionsSendFiles')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendDocs')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVoices\"\n              checked={!permissions.sendVoices}\n              label={lang('UserRestrictionsSendVoices')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVoices')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendRoundvideos\"\n              checked={!permissions.sendRoundvideos}\n              label={lang('UserRestrictionsSendRound')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendRoundvideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('embedLinks')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPolls')}\n            />\n          </div>\n        </div>\n      </div>\n      <div className={shiftedClassName}>\n        <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n          <Checkbox\n            name=\"inviteUsers\"\n            checked={!permissions.inviteUsers}\n            label={lang('UserRestrictionsInviteUsers')}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n            disabled={getControlIsDisabled && getControlIsDisabled('inviteUsers')}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"pinMessages\"\n            checked={!permissions.pinMessages}\n            label={lang('UserRestrictionsPinMessages')}\n            disabled={getControlIsDisabled ? getControlIsDisabled('pinMessages')\n              : shouldDisablePermissionForPublicGroup}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"changeInfo\"\n            checked={!permissions.changeInfo}\n            label={lang('UserRestrictionsChangeInfo')}\n            blocking\n            permissionGroup={permissionGroup}\n            disabled={getControlIsDisabled ? getControlIsDisabled('changeInfo')\n              : shouldDisablePermissionForPublicGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        {isForum && (\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"manageTopics\"\n              checked={!permissions.manageTopics}\n              label={lang('CreateTopicsPermission')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('manageTopics')}\n            />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const fullInfo = chat && selectChatFullInfo(global, chat.id);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      hasLinkedChat,\n    };\n  },\n)(PermissionCheckboxList));\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"_YNfwDqt\",\"root\":\"SeaF_shb\",\"container\":\"axa67kqo\",\"title\":\"U4IFhV0a\",\"singleTitle\":\"qd6OFHiG\",\"actionTitle\":\"yGhFKTl5\",\"restrictionTitle\":\"t3KOsBfm\",\"button\":\"goI3MITH\",\"options\":\"b6847Kh3\",\"dropdownList\":\"czTjjKim\",\"dialogButtons\":\"JTT_DIRv\",\"proceedButtons\":\"L4YzeG91\",\"restrictionContainer\":\"iv0u9Zw6\",\"restrictionContainerOpen\":\"qCQftA04\",\"dropdownListOpen\":\"Ifpyv7Jp\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../api/types';\nimport type { IRadioOption } from '../ui/CheckboxGroup';\n\nimport {\n  getHasAdminRight,\n  getPrivateChatUserId,\n  getUserFirstOrLastName, isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isSystemBot,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  getSendersFromSelectedMessages,\n  selectBot,\n  selectCanDeleteSelectedMessages,\n  selectChat,\n  selectChatFullInfo, selectIsChatWithBot,\n  selectSenderFromMessage,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { buildCollectionByCallback, unique } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useManagePermissions from '../right/hooks/useManagePermissions';\n\nimport PermissionCheckboxList from '../main/PermissionCheckboxList';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Avatar from './Avatar';\nimport AvatarList from './AvatarList';\nimport Icon from './icons/Icon';\n\nimport styles from './DeleteMessageModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isGroup?: boolean;\n  isChannel?: boolean;\n  isSuperGroup?: boolean;\n  messageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  currentUserId?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  chatBot?: boolean;\n  isSchedule?: boolean;\n  onConfirm?: NoneToVoidFunction;\n  canBanUsers?: boolean;\n  isCreator?: boolean;\n  linkedChatId?: string;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  isChannel,\n  isSuperGroup,\n  isSchedule,\n  currentUserId,\n  messageIds,\n  isCreator,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  chatBot,\n  adminMembersById,\n  canBanUsers,\n  linkedChatId,\n  onConfirm,\n}) => {\n  const {\n    closeDeleteMessageModal,\n    deleteMessages,\n    reportChannelSpam,\n    deleteChatMember,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n    updateChatMemberBannedRights,\n    deleteParticipantHistory,\n  } = getActions();\n\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    permissions, havePermissionChanged, handlePermissionChange, resetPermissions,\n  } = useManagePermissions(chat?.defaultBannedRights);\n\n  const [peerIdsToDeleteAll, setPeerIdsToDeleteAll] = useState<string[]>([]);\n  const [peerIdsToBan, setPeerIdsToBan] = useState<string[]>([]);\n  const [peerIdsToReportSpam, setPeerIdsToReportSpam] = useState<string[]>([]);\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const [isAdditionalOptionsVisible, setIsAdditionalOptionsVisible] = useState(false);\n  const [shouldDeleteForAll, setShouldDeleteForAll] = useState(true);\n\n  const peerList = useMemo(() => {\n    if (isChannel || !messageIds || !chat) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n    const senderArray = getSendersFromSelectedMessages(global, chat.id, messageIds);\n    return senderArray ? unique(senderArray)\n      .filter((peer) => (\n        peer?.id !== chat?.id\n        && peer?.id !== linkedChatId\n        && peer?.id !== chat?.linkedMonoforumId\n      )) : MEMO_EMPTY_ARRAY;\n  }, [chat, isChannel, linkedChatId, messageIds]);\n\n  const buildNestedOptionListWithAvatars = useLastCallback(() => {\n    return peerList.map((member) => {\n      return {\n        value: member.id,\n        label: getPeerTitle(lang, member) || '',\n        leftElement: <Avatar size=\"small\" peer={member} />,\n      };\n    });\n  });\n\n  const peerListToDeleteAll = useMemo(() => {\n    return peerList.filter((peer) => (\n      peer.id !== linkedChatId\n      && peer.id !== chat?.linkedMonoforumId\n      && peer.id !== currentUserId\n    ));\n  }, [peerList, currentUserId, linkedChatId, chat?.linkedMonoforumId]);\n\n  const peerListToReportSpam = useMemo(() => {\n    return peerList.filter((peer) => (\n      peer.id !== currentUserId\n      && peer.id !== linkedChatId\n      && peer.id !== chat?.linkedMonoforumId\n    ));\n  }, [peerList, currentUserId, linkedChatId, chat?.linkedMonoforumId]);\n\n  const peerListToBan = useMemo(() => {\n    const isCurrentUserInList = peerList.some((peer) => peer.id === currentUserId);\n    const shouldReturnEmpty = !canBanUsers || isCurrentUserInList || chat?.isMonoforum;\n\n    if (shouldReturnEmpty) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return peerList.filter((peer) => {\n      const isAdmin = adminMembersById?.[peer.id];\n      return isCreator || !isAdmin;\n    });\n  }, [peerList, isCreator, currentUserId, canBanUsers, adminMembersById, chat?.isMonoforum]);\n\n  const shouldShowAdditionalOptions = useMemo(() => {\n    return Boolean(peerListToDeleteAll.length || peerListToReportSpam.length || peerListToBan.length);\n  }, [peerListToDeleteAll, peerListToReportSpam, peerListToBan]);\n\n  const shouldShowOption = shouldShowAdditionalOptions\n    && !canDeleteForAll && !isSchedule && isSuperGroup;\n\n  const peerNames = useMemo(() => {\n    if (!peerList || isSchedule) return {};\n    return buildCollectionByCallback(peerList, (peer) => [peer.id, getPeerTitle(lang, peer)]);\n  }, [isSchedule, lang, peerList]);\n\n  const ACTION_SPAM_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'spam' : peerList?.[0]?.id,\n        label: oldLang('ReportSpamTitle'),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== chat?.linkedMonoforumId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, linkedChatId, chat?.linkedMonoforumId, currentUserId]);\n\n  const ACTION_DELETE_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'delete_all' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? oldLang('DeleteAllFromUsers')\n          : oldLang('DeleteAllFrom', Object.values(peerNames)[0]),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== chat?.linkedMonoforumId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, peerNames, linkedChatId, chat?.linkedMonoforumId, currentUserId]);\n\n  const ACTION_BAN_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'ban' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? (isAdditionalOptionsVisible ? oldLang('DeleteRestrictUsers') : oldLang('DeleteBanUsers'))\n          : (isAdditionalOptionsVisible ? oldLang('KickFromSupergroup')\n            : oldLang('DeleteBan', Object.values(peerNames)[0])),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars(),\n        ] : undefined,\n      },\n    ];\n  }, [isAdditionalOptionsVisible, oldLang, messageIds, peerList, peerNames]);\n\n  const toggleAdditionalOptions = useLastCallback(() => {\n    setIsAdditionalOptionsVisible((prev) => !prev);\n  });\n\n  const filterMessageIdByPeerId = useLastCallback((peerIds: string[], selectedMessageIdList: number[]) => {\n    if (!chat) return MEMO_EMPTY_ARRAY;\n    const global = getGlobal();\n    return selectedMessageIdList.filter((msgId) => {\n      const sender = selectSenderFromMessage(global, chat.id, msgId);\n      return sender && peerIds.includes(sender.id);\n    });\n  });\n\n  const handleReportSpam = useLastCallback((userMessagesMap: Record<string, number[]>) => {\n    Object.entries(userMessagesMap).forEach(([userId, messageIdList]) => {\n      if (messageIdList.length) {\n        reportChannelSpam({\n          participantId: userId,\n          chatId: chat!.id,\n          messageIds: messageIdList,\n        });\n      }\n    });\n  });\n\n  const handleDeleteMessages = useLastCallback((filteredMessageIdList: number[]) => {\n    deleteMessages({ messageIds: filteredMessageIdList, shouldDeleteForAll: true });\n  });\n\n  const handleDeleteAllPeerMessages = useLastCallback((peerIdList: string[]) => {\n    if (!chat) return;\n    peerIdList.forEach((peerId) => {\n      deleteParticipantHistory({ peerId, chatId: chat.id });\n    });\n  });\n\n  const handleDeleteMember = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      deleteChatMember({ chatId: chat!.id, userId });\n    });\n  });\n\n  const handleUpdateChatMemberBannedRights = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      updateChatMemberBannedRights({\n        chatId: chat!.id,\n        userId,\n        bannedRights: permissions,\n      });\n    });\n  });\n\n  const handleDeleteMessageList = useLastCallback(() => {\n    if (!chat || !messageIds) return;\n\n    onConfirm?.();\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else if (shouldShowOption) {\n      if (peerIdsToReportSpam?.length) {\n        const global = getGlobal();\n        const peerIdList = peerIdsToReportSpam.filter((option) => !Number.isNaN(Number(option)));\n        const messageList = messageIds.reduce<Record<string, number[]>>((acc, msgId) => {\n          const peer = selectSenderFromMessage(global, chat.id, msgId);\n          if (peer && peerIdList.includes(peer.id)) {\n            if (!acc[peer.id]) {\n              acc[peer.id] = [];\n            }\n            acc[peer.id].push(Number(msgId));\n          }\n          return acc;\n        }, {});\n\n        handleReportSpam(messageList);\n      }\n\n      if (peerIdsToDeleteAll?.length) {\n        const peerIdList = peerIdsToDeleteAll.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteAllPeerMessages(peerIdList);\n      }\n\n      if (peerIdsToBan?.length && !havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteMember(peerIdList);\n        const filteredMessageIdList = filterMessageIdByPeerId(peerIdList, messageIds);\n        handleDeleteMessages(filteredMessageIdList);\n      }\n\n      if (peerIdsToBan?.length && havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleUpdateChatMemberBannedRights(peerIdList);\n      }\n\n      if (!peerIdsToReportSpam?.length || !peerIdsToDeleteAll?.length || !peerIdsToBan?.length) {\n        deleteMessages({ messageIds, shouldDeleteForAll });\n      }\n    } else {\n      deleteMessages({ messageIds, shouldDeleteForAll });\n    }\n\n    closeDeleteMessageModal();\n    exitMessageSelectMode();\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteMessageModal();\n  });\n\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      setPeerIdsToReportSpam([]);\n      setPeerIdsToDeleteAll([]);\n      setPeerIdsToBan([]);\n      setShouldDeleteForAll(true);\n      setIsMediaDropdownOpen(false);\n      setIsAdditionalOptionsVisible(false);\n      resetPermissions();\n    }\n  }, [isOpen, prevIsOpen, resetPermissions]);\n\n  function renderHeader() {\n    return (\n      <div\n        className={shouldShowOption && styles.container}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldShowOption && (\n          <AvatarList\n            size=\"small\"\n            peers={peerList}\n          />\n        )}\n        <h3 className={buildClassName(shouldShowOption ? styles.title : styles.singleTitle)}>\n          {oldLang('Chat.DeleteMessagesConfirmation', messageIds?.length)}\n        </h3>\n      </div>\n    );\n  }\n\n  function renderAdditionalActionOptions() {\n    return (\n      <div className={styles.options}>\n        <CheckboxGroup\n          options={ACTION_SPAM_OPTION}\n          onChange={setPeerIdsToReportSpam}\n          selected={peerIdsToReportSpam}\n          nestedCheckbox={messageIds && peerList.length >= 2}\n        />\n        {peerListToDeleteAll?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_DELETE_OPTION}\n            onChange={setPeerIdsToDeleteAll}\n            selected={peerIdsToDeleteAll}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n        {peerListToBan?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_BAN_OPTION}\n            onChange={setPeerIdsToBan}\n            selected={peerIdsToBan}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderPartiallyRestrictedUser() {\n    return (\n      <div className={buildClassName(styles.restrictionContainer,\n        isAdditionalOptionsVisible && styles.restrictionContainerOpen)}\n      >\n        <h3 className={buildClassName(styles.actionTitle, styles.restrictionTitle)}>\n          {oldLang('UserRestrictionsCanDoUsers', peerList.length)}\n        </h3>\n        <PermissionCheckboxList\n          withCheckbox\n          chatId={chat?.id}\n          isMediaDropdownOpen={isMediaDropdownOpen}\n          setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n          handlePermissionChange={handlePermissionChange}\n          permissions={permissions}\n          className={buildClassName(\n            styles.dropdownList,\n            isMediaDropdownOpen && styles.dropdownListOpen,\n          )}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageList}\n      className={styles.root}\n    >\n      <div className={styles.main}>\n        {renderHeader()}\n        {shouldShowOption && (\n          <>\n            <p className={styles.actionTitle}>{oldLang('DeleteAdditionalActions')}</p>\n            {renderAdditionalActionOptions()}\n            {renderPartiallyRestrictedUser()}\n            {peerIdsToBan?.length && canBanUsers ? (\n              <ListItem\n                narrow\n                buttonClassName={styles.button}\n                onClick={toggleAdditionalOptions}\n              >\n                {oldLang(isAdditionalOptionsVisible ? 'DeleteToggleBanUsers' : 'DeleteToggleRestrictUsers')}\n                <Icon\n                  name={isAdditionalOptionsVisible ? 'up' : 'down'}\n                  className={buildClassName(styles.button, 'ml-2')}\n                />\n              </ListItem>\n            ) : setIsAdditionalOptionsVisible(false)}\n          </>\n        )}\n        {(canDeleteForAll || chatBot || !shouldShowOption) && (\n          <>\n            <p>\n              {messageIds && messageIds.length > 1\n                ? lang('AreYouSureDeleteFewMessages') : lang('AreYouSureDeleteSingleMessage')}\n            </p>\n            {willDeleteForCurrentUserOnly && (\n              <p>{oldLang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n            )}\n            {willDeleteForAll && (\n              <p>{oldLang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n            )}\n          </>\n        )}\n        {canDeleteForAll && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={contactName ? renderText(oldLang('DeleteMessagesOptionAlso', contactName))\n              : oldLang('Conversation.DeleteMessagesForEveryone')}\n            checked={shouldDeleteForAll}\n            onCheck={setShouldDeleteForAll}\n          />\n        )}\n        <div className={buildClassName('dialog-buttons',\n          isMediaDropdownOpen ? styles.dialogButtons : styles.proceedButtons)}\n        >\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageList}>\n            {shouldShowOption ? oldLang('DeleteProceedBtn') : lang('Delete')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>{oldLang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      deleteMessageModal,\n    } = selectTabState(global);\n    const messageIds = deleteMessageModal?.messageIds;\n    const chatId = deleteMessageModal?.chatId;\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global, messageIds);\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const linkedChatId = chatFullInfo?.linkedChatId;\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const isSchedule = deleteMessageModal?.isSchedule;\n    const onConfirm = deleteMessageModal?.onConfirm;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n    const chatBot = Boolean(chat && !isSystemBot(chat.id) && selectBot(global, chat.id));\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const canBanUsers = chat && getHasAdminRight(chat, 'banUsers');\n    const isCreator = chat?.isCreator;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const willDeleteForCurrentUserOnly = (chat && isChatBasicGroup(chat) && !canDeleteForAll) || isChatWithBot;\n    const willDeleteForAll = chat && (isChatSuperGroup(chat) || isChannel);\n\n    return {\n      chat,\n      isChannel,\n      isSuperGroup,\n      messageIds,\n      currentUserId: global.currentUserId,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n      adminMembersById,\n      chatBot,\n      canBanUsers,\n      linkedChatId,\n      isSchedule,\n      isCreator,\n      onConfirm,\n    };\n  },\n)(DeleteMessageModal));\n","import { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal = ({\n  isOpen,\n  chatId,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { pinMessage } = getActions();\n\n  const [shouldPinForAll, setShouldPinForAll] = useState(true);\n\n  const handlePinMessage = useLastCallback(() => {\n    pinMessage({\n      chatId,\n      messageId,\n      isUnpin: false,\n      isOneSide: !shouldPinForAll,\n      isSilent: !shouldPinForAll,\n    });\n    onClose();\n  });\n\n  const lang = useOldLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      {canPinForAll && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          label={contactName ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          checked={shouldPinForAll}\n          onCheck={setShouldPinForAll}\n        />\n      )}\n      <div className=\"dialog-buttons\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(useMemo(() => (isActive ? {\n    'Mod+C': handleCopy,\n  } : undefined), [isActive]));\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages, selectCurrentChat,\n  selectCurrentMessageList, selectHasProtectedMessage,\n  selectHasSvg,\n  selectSelectedMessagesCount,\n  selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n  shouldWarnAboutSvg?: boolean;\n  hasSvgs?: boolean;\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  chat,\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n  shouldWarnAboutSvg,\n  hasSvgs,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n    reportMessages,\n    openDeleteMessageModal,\n    setSharedSettingOption,\n  } = getActions();\n  const lang = useOldLang();\n\n  useCopySelectedMessages(isActive);\n\n  const [isSvgDialogOpen, openSvgDialog, closeSvgDialog] = useFlag();\n  const [shouldNotWarnAboutSvg, setShouldNotWarnAboutSvg] = useState(false);\n\n  const handleExitMessageSelectMode = useLastCallback(() => {\n    exitMessageSelectMode();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    openDeleteMessageModal({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n      isSchedule,\n    });\n  });\n\n  useEffect(() => {\n    return isActive && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? handleDelete : undefined,\n        onDelete: canDeleteMessages ? handleDelete : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, handleDelete, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useLastCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  });\n\n  const handleDownload = useLastCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  });\n\n  const handleMessageDownload = useLastCallback(() => {\n    if (shouldWarnAboutSvg && hasSvgs) {\n      openSvgDialog();\n      return;\n    }\n\n    handleDownload();\n  });\n\n  const handleSvgConfirm = useLastCallback(() => {\n    setSharedSettingOption({ shouldWarnAboutSvg: !shouldNotWarnAboutSvg });\n    closeSvgDialog();\n    handleDownload();\n  });\n\n  const prevSelectedMessagesCount = usePreviousDeprecated(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const openMessageReport = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    reportMessages({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n    });\n    exitMessageSelectMode();\n  });\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: IconName, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n        aria-label={label}\n      >\n        <Icon name={icon} />\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className={className}>\n        <div className=\"MessageSelectToolbar-inner\">\n          <Button\n            color=\"translucent\"\n            round\n            onClick={handleExitMessageSelectMode}\n            ariaLabel=\"Exit select mode\"\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n            {formattedMessagesCount}\n          </span>\n\n          {Boolean(selectedMessagesCount) && (\n            <div className=\"MessageSelectToolbar-actions\">\n              {messageListType !== 'scheduled' && canForwardMessages && (\n                renderButton(\n                  'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n                )\n              )}\n              {canReportMessages && (\n                renderButton('flag', lang('Conversation.ReportMessages'), openMessageReport)\n              )}\n              {canDownloadMessages && !hasProtectedMessage && (\n                renderButton('download', lang('lng_media_download'), handleMessageDownload)\n              )}\n              {!hasProtectedMessage && (\n                renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n              )}\n              {canDeleteMessages && (\n                renderButton('delete', lang('EditAdminGroupDeleteMessages'), handleDelete, true)\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isSvgDialogOpen}\n        onClose={closeSvgDialog}\n        confirmHandler={handleSvgConfirm}\n      >\n        {lang('lng_launch_svg_warning')}\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldNotWarnAboutSvg}\n          label={lang('lng_launch_exe_dont_ask')}\n          onCheck={setShouldNotWarnAboutSvg}\n        />\n      </ConfirmDialog>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n    const chat = selectCurrentChat(global);\n\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const hasSvgs = selectedMessageIds && chatId ? selectHasSvg(global, chatId, selectedMessageIds) : false;\n    const isShareMessageModalOpen = tabState.isShareMessageModalShown;\n    const isAnyModalOpen = Boolean(isShareMessageModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall || tabState.reportModal\n      || tabState.deleteMessageModal);\n\n    return {\n      chat,\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n      shouldWarnAboutSvg,\n      hasSvgs,\n    };\n  },\n)(MessageSelectToolbar));\n","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeSeenByModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"slqA9gR2\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"tauadiDm\",\"icon\":\"i4wZg_0J\",\"header\":\"MQxuEIRA\",\"desc\":\"AEAN1Au4\",\"separator\":\"sXXb5yOS\",\"button\":\"F7owtTHj\",\"closeButton\":\"i6iFv9YE\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTabState, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal, { ANIMATION_DURATION } from '../ui/Modal';\nimport Separator from '../ui/Separator';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\nimport Icon from './icons/Icon';\n\nimport styles from './PrivacySettingsNoticeModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isReadDate?: boolean;\n};\n\nconst CLOSE_ANIMATION_DURATION = ANIMATION_DURATION + ANIMATION_END_DELAY;\n\nconst PrivacySettingsNoticeModal = ({ isOpen, isReadDate, user }: OwnProps & StateProps) => {\n  const lang = useOldLang();\n  const {\n    updateGlobalPrivacySettings,\n    openPremiumModal,\n    closePrivacySettingsNoticeModal,\n    showNotification,\n    setPrivacyVisibility,\n    loadUser,\n  } = getActions();\n  const userName = getUserFirstOrLastName(user);\n\n  const handleShowReadTime = useLastCallback(() => {\n    updateGlobalPrivacySettings({ shouldHideReadMarks: false });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumReadSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleShowLastSeen = useLastCallback(() => {\n    setPrivacyVisibility({\n      privacyKey: 'lastSeen',\n      visibility: 'everybody',\n      onSuccess: () => loadUser({ userId: user!.id }),\n    });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumLastSeenSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleOpenPremium = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      openPremiumModal({ initialSection: 'last_seen' });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n  });\n\n  return (\n    <Modal isSlim isOpen={isOpen} onClose={handleClose}>\n      <div className={styles.container} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className={styles.closeButton}\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={handleClose}\n          ariaLabel=\"Close\"\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <AnimatedIconWithPreview\n          tgsUrl={isReadDate ? LOCAL_TGS_URLS.ReadTime : LOCAL_TGS_URLS.LastSeen}\n          size={84}\n          className={styles.icon}\n          nonInteractive\n          noLoop\n        />\n        <h2 className={styles.header}>\n          {lang(isReadDate ? 'PremiumReadHeader1' : 'PremiumLastSeenHeader1')}\n        </h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(\n              isReadDate ? 'PremiumReadText1' : 'PremiumLastSeenText1Locked',\n              userName,\n            ),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          size=\"smaller\"\n          onClick={isReadDate ? handleShowReadTime : handleShowLastSeen}\n          className={styles.button}\n        >\n          {lang(isReadDate ? 'PremiumReadButton1' : 'PremiumLastSeenButton1')}\n        </Button>\n        <Separator className={styles.separator}>{lang('PremiumOr')}</Separator>\n        <h2 className={styles.header}>{lang('PremiumReadHeader2')}</h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(isReadDate ? 'PremiumReadText2' : 'PremiumLastSeenText2', userName),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          withPremiumGradient\n          size=\"smaller\"\n          onClick={handleOpenPremium}\n          className={styles.button}\n        >\n          {lang('PremiumLastSeenButton2')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(\n  withGlobal<OwnProps>((global): StateProps => {\n    const { chatId, isReadDate } = selectTabState(global).privacySettingsNoticeModal || {};\n    const user = chatId ? selectUser(global, chatId) : undefined;\n\n    return { user, isReadDate };\n  })(PrivacySettingsNoticeModal),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { getReactionKey, isSameReaction } from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { unique } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\nimport Icon from '../common/icons/Icon';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on chats or users, so we avoid them\n  const chatsById = getGlobal().chats.byId;\n  const usersById = getGlobal().users.byId;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    startClosing();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  });\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const peerIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ peerId }) => peerId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ peerId }) => peerId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, peerIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={oldLang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n\n            onClick={() => setChosenTab(undefined)}\n          >\n            <Icon name=\"heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(lang, reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(lang, count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={oldLang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (peerId) => {\n                const peer = usersById[peerId] || chatsById[peerId];\n\n                const peerReactions = reactors?.reactions.filter((reactor) => reactor.peerId === peerId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[peerId];\n\n                peerReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-${getReactionKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <Avatar peer={peer} size=\"medium\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={peer} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <Icon name=\"heart-outline\" className=\"status-icon\" />\n                          {formatDateAtTime(oldLang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !peerReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <PrivateChatInfo\n                        userId={peerId}\n                        noStatusOrTyping\n                        avatarSize=\"medium\"\n                        status={seenByUser ? formatDateAtTime(oldLang, seenByUser * 1000) : undefined}\n                        statusIcon=\"message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {oldLang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.reactions.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../types';\n\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { IS_ANDROID } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useLastCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  });\n\n  const handleCancelAnimation = useLastCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  });\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      endHeavyAnimation();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceAlways\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport {\n  selectLanguageCode,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst ChatLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const {\n    requestMessageTranslation,\n    closeChatLanguageModal,\n    setSettingOption,\n    requestChatTranslation,\n  } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useOldLang();\n\n  const handleSelect = useLastCallback((langCode: string) => {\n    if (!chatId) return;\n\n    if (messageId) {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: langCode });\n    } else {\n      setSettingOption({ translationLanguage: langCode });\n      requestChatTranslation({ chatId, toLanguageCode: langCode });\n    }\n\n    closeChatLanguageModal();\n  });\n\n  const handleSearch = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  });\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeChatLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={buildClassName(styles.listItem, 'no-icon')}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).chatLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId\n      ? messageId\n        ? selectRequestedMessageTranslationLanguage(global, chatId, messageId)\n        : selectRequestedChatTranslationLanguage(global, chatId)\n      : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(ChatLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aMjNU9gm\",\"list-item\":\"T3An6Hoz\",\"listItem\":\"T3An6Hoz\",\"title\":\"dQ9wwFu1\",\"subtitle\":\"m_J41YYl\",\"languages\":\"r3YNWDQr\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"WEJIbFQj\",\"closeButton\":\"_vwPuDEM\",\"icon\":\"BUiGM8qZ\",\"title\":\"Q3NhXpNI\",\"description\":\"frZbGQ0G\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiCountryCode } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './CollectibleInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['collectibleInfoModal'];\n};\n\ntype StateProps = {\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst TOP_ICON_SIZE = 60;\n\nconst CollectibleInfoModal: FC<OwnProps & StateProps> = ({\n  modal,\n  phoneCodeList,\n}) => {\n  const {\n    closeCollectibleInfoModal,\n    openChat,\n    openUrl,\n    showNotification,\n  } = getActions();\n  const lang = useOldLang();\n\n  const isUsername = modal?.type === 'username';\n\n  const handleClose = useLastCallback(() => {\n    closeCollectibleInfoModal();\n  });\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: modal!.peerId });\n    handleClose();\n  });\n\n  const handleOpenUrl = useLastCallback(() => {\n    openUrl({\n      url: modal!.url,\n      shouldSkipModal: true,\n    });\n    handleClose();\n  });\n\n  const handleCopy = useLastCallback(() => {\n    const text = isUsername ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal!.collectible);\n    copyTextToClipboard(text);\n    showNotification({\n      message: lang(isUsername ? 'UsernameCopied' : 'PhoneCopied'),\n    });\n    handleClose();\n  });\n\n  const title = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameTitle' : 'FragmentPhoneTitle';\n    const formattedCollectible = isUsername\n      ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal.collectible);\n    return lang(key, formattedCollectible);\n  }, [modal, isUsername, phoneCodeList, lang]);\n\n  const description = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameMessage' : 'FragmentPhoneMessage';\n    const date = formatDateAtTime(lang, modal.purchaseDate * 1000);\n    const currency = formatCurrencyAsString(modal.amount, modal.currency, lang.code);\n    const cryptoCurrency = formatCurrencyAsString(modal.cryptoAmount, modal.cryptoCurrency, lang.code);\n    const paid = `${cryptoCurrency} (${currency})`;\n    return lang(key, [date, paid]);\n  }, [modal, isUsername, lang]);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      isSlim\n      contentClassName={styles.content}\n      onClose={closeCollectibleInfoModal}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.icon}>\n        <AnimatedIconWithPreview\n          tgsUrl={isUsername ? LOCAL_TGS_URLS.Mention : LOCAL_TGS_URLS.Fragment}\n          size={TOP_ICON_SIZE}\n        />\n      </div>\n      <h3 className={styles.title}>\n        {title && renderText(title, ['simple_markdown'])}\n      </h3>\n      <PeerChip\n        className={styles.chip}\n        peerId={modal?.peerId}\n        forceShowSelf\n        clickArg={modal?.peerId}\n        onClick={handleOpenChat}\n      />\n      <p className={styles.description}>\n        {description && renderText(description, ['simple_markdown'])}\n      </p>\n      <div className=\"dialog-buttons dialog-buttons-centered\">\n        <Button className=\"confirm-dialog-button\" onClick={handleOpenUrl}>\n          {lang('FragmentUsernameOpen')}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleCopy}>\n          {lang(isUsername ? 'FragmentUsernameCopy' : 'FragmentPhoneCopy')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { countryList } = global;\n\n    return {\n      phoneCodeList: countryList.phoneCodes,\n    };\n  },\n)(CollectibleInfoModal));\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { GlobalState, TabState } from '../../../../global/types';\nimport type { ThemeKey } from '../../../../types';\nimport type { SearchResultKey } from '../../../../util/keys/searchResultKey';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\nimport { selectSharedSettings } from '../../../../global/selectors/sharedState';\n\nexport type StateProps = {\n  theme: ThemeKey;\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: SearchResultKey[];\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  shouldWarnAboutSvg?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      shouldWarnAboutSvg,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading, getMessageDownloadableMedia } from '../../../global/helpers';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n\n      const media = getMessageDownloadableMedia(message)!;\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Audio\n              key={message.id}\n              theme={theme}\n              message={message}\n              origin={AudioOrigin.Search}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              date={message.date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n              isDownloading={getIsDownloading(activeDownloads, media)}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  const buttonRef = useRef<HTMLDivElement>();\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat, selectIsChatPinned, selectNotifyDefaults, selectNotifyException, selectUser,\n} from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  withOpenAppButton?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n  withOpenAppButton,\n  onClick,\n}) => {\n  const { requestMainWebView } = getActions();\n  const oldLang = useOldLang();\n\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useLastCallback(() => {\n    onClick(chatId);\n  });\n\n  const handleOpenApp = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId: chatId,\n      peerId: chatId,\n      theme,\n    });\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo\n          userId={chatId}\n          withUsername={withUsername}\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={chatId}\n          withUsername={withUsername}\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      {withOpenAppButton && user?.hasMainMiniApp && (\n        <Button\n          className=\"ChatBadge miniapp\"\n          pill\n          fluid\n          size=\"tiny\"\n          onClick={handleOpenApp}\n        >\n          {oldLang('BotOpen')}\n        </Button>\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, chatId);\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\n\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst BotAppResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  foundIds,\n  recentBotIds,\n}) => {\n  const {\n    searchPopularBotApps,\n    openChatWithInfo,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n    const recentSet = new Set(recentBotIds);\n    const withoutRecent = foundIds.filter((id) => !recentSet.has(id));\n\n    return filterPeersByQuery({ ids: withoutRecent, query: searchQuery, type: 'user' });\n  }, [foundIds, recentBotIds, searchQuery]);\n\n  const handleChatClick = useLastCallback((id: string) => {\n    openChatWithInfo({ id, shouldReplaceHistory: true });\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll\"\n        items={canRenderContents ? filteredFoundIds : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && !filteredFoundIds?.length && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && !searchQuery && Boolean(recentBotIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">\n              {recentBotIds.length > LESS_LIST_ITEMS_AMOUNT && (\n                <Link className=\"Link\" onClick={handleToggleShowMoreMine}>\n                  {lang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n                </Link>\n              )}\n              {lang('SearchAppsMine')}\n            </h3>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_LIST_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n        {canRenderContents && Boolean(filteredFoundIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">{lang('SearchAppsPopular')}</h3>\n            {filteredFoundIds.map((id) => {\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(BotAppResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiMessageOutgoingStatus,\n  ApiUser,\n} from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageVideo,\n  getPrivateChatUserId,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  });\n\n  const lang = useOldLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  const peer = privateChatUser || chat;\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        peer={peer}\n        isSavedMessages={privateChatUser?.isSelf}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={peer}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: OldLangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n        draggable={false}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      ...(privateChatUserId && { privateChatUser }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <Icon name=\"calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { selectTopic } from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport TopicIcon from '../../common/TopicIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const topic = selectTopic(global, chatId, topicId);\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: SearchResultKey[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openThread } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      if (!searchChatId) return;\n      openThread({ chatId: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId } } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiSponsoredPeer } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { isUserId } from '../../../util/entities/ids';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport BadgeButton from '../../common/BadgeButton';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  sponsoredPeer: ApiSponsoredPeer;\n  observeIntersection?: ObserveFn;\n};\n\nconst LeftSearchResultSponsored: FC<OwnProps> = ({\n  sponsoredPeer,\n  observeIntersection,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const { clickSponsored, viewSponsored, openChat } = getActions();\n  const lang = useLang();\n\n  const {\n    peerId, randomId, additionalInfo, sponsorInfo,\n  } = sponsoredPeer;\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    if (entry.intersectionRatio === 1) {\n      viewSponsored({ randomId });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    clickSponsored({ randomId });\n    openChat({ id: peerId });\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const {\n    handleClick: handleBadgeClick,\n    handleMouseDown: handleBadgeMouseDown,\n  } = useFastClick((e: React.MouseEvent) => {\n    e.stopPropagation();\n    handleContextMenu(e);\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      ref={ref}\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n      buttonRef={buttonRef}\n    >\n      {isUserId(peerId) ? (\n        <PrivateChatInfo\n          userId={peerId}\n          withUsername\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={peerId}\n          withUsername\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      <BadgeButton className=\"search-sponsored-badge\" onMouseDown={handleBadgeMouseDown} onClick={handleBadgeClick}>\n        {lang('SponsoredPeerBadge')}\n        <Icon name=\"more\" />\n      </BadgeButton>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(LeftSearchResultSponsored);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  const topUsersRef = useRef<HTMLDivElement>();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useOldLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar peer={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3\n            className={buildClassName(\n              'section-heading mt-0 recent-chats-header',\n              !topUserIds && 'without-border',\n            )}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {lang('Recent')}\n\n            <Button\n              className=\"clear-recent-chats\"\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel={lang('Clear')}\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              withOpenAppButton\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageSearchContext, ApiSponsoredPeer } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { ALL_FOLDER_ID, GLOBAL_SUGGESTED_CHANNELS_ID } from '../../../config';\nimport {\n  isChatChannel,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectSimilarChannelIds, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { unique } from '../../../util/iteratees';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PeerChip from '../../common/PeerChip';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Transition from '../../ui/Transition';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport LeftSearchResultSponsored from './LeftSearchResultSponsored';\nimport RecentContacts from './RecentContacts';\n\nimport './ChatResults.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  isChannelList?: boolean;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  contactIds?: string[];\n  accountPeerIds?: string[];\n  globalPeerIds?: string[];\n  foundIds?: SearchResultKey[];\n  sponsoredPeer?: ApiSponsoredPeer;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  suggestedChannelIds?: string[];\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  isChannelList,\n  searchQuery,\n  searchDate,\n  dateSearchQuery,\n  currentUserId,\n  contactIds,\n  accountPeerIds,\n  globalPeerIds,\n  foundIds,\n  globalMessagesByChatId,\n  fetchingStatus,\n  suggestedChannelIds,\n  sponsoredPeer,\n  onReset,\n  onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal,\n    setGlobalSearchChatId, loadChannelRecommendations,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const chatSelectionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n  const [searchContext, setSearchContext] = useState<ApiMessageSearchContext>('all');\n  const ref = useRef<HTMLDivElement>();\n\n  useEffectOnce(() => {\n    if (isChannelList) loadChannelRecommendations({});\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: isChannelList ? 'channels' : 'text',\n          context: searchContext,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery, searchContext]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  function getSearchContextCaption(context: ApiMessageSearchContext) {\n    if (context === 'users') return lang('PrivateChatsSearchContext');\n    if (context === 'groups') return lang('GroupChatsSearchContext');\n    if (context === 'channels') return lang('ChannelsSearchContext');\n    return lang('AllChatsSearchContext');\n  }\n\n  const {\n    isContextMenuOpen, contextMenuAnchor, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getRootElement = useLastCallback(() => ref.current!);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.chatResultsContextMenu .bubble'));\n  const getTriggerElement = useLastCallback(() => ref.current!.querySelector('.menuTrigger'));\n\n  const handleClickContext = useLastCallback((e: React.MouseEvent): void => {\n    handleContextMenu(e);\n  });\n\n  const itemPlaceholderClass = buildClassName('icon', 'iconPlaceholder');\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getMenuElement={getMenuElement}\n        className=\"chatResultsContextMenu\"\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        autoClose\n      >\n        <>\n          <MenuItem\n            icon={searchContext === 'all' ? 'check' : undefined}\n            customIcon={searchContext !== 'all' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('all')}\n          >\n            {getSearchContextCaption('all')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'users' ? 'check' : undefined}\n            customIcon={searchContext !== 'users' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('users')}\n          >\n            {getSearchContextCaption('users')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'groups' ? 'check' : undefined}\n            customIcon={searchContext !== 'groups' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('groups')}\n          >\n            {getSearchContextCaption('groups')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'channels' ? 'check' : undefined}\n            customIcon={searchContext !== 'channels' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('channels')}\n          >\n            {getSearchContextCaption('channels')}\n          </MenuItem>\n        </>\n      </Menu>\n    );\n  }\n\n  const localResults = useMemo(() => {\n    if (!isChannelList && (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2))) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const orderedChatIds = getOrderedIds(ALL_FOLDER_ID) ?? [];\n    const filteredChatIds = orderedChatIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n    const localChatIds = filterPeersByQuery({ ids: filteredChatIds, query: searchQuery, type: 'chat' });\n\n    if (isChannelList) return localChatIds;\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(contactIds || []),\n    ];\n\n    const localContactIds = filterPeersByQuery({\n      ids: contactIdsWithMe, query: searchQuery, type: 'user',\n    });\n\n    const localPeerIds = [\n      ...localContactIds,\n      ...localChatIds,\n    ];\n\n    return unique([\n      ...sortChatIds(localPeerIds, undefined, currentUserId ? [currentUserId] : undefined),\n      ...sortChatIds(accountPeerIds || []),\n    ]);\n  }, [searchQuery, currentUserId, contactIds, accountPeerIds, isChannelList]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length || isChannelList, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalPeerIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const filteredIds = globalPeerIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n\n    return sortChatIds(filteredIds, true);\n  }, [globalPeerIds, isChannelList, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n        const chat = chatsById[chatId];\n        if (!chat) return undefined;\n        if (isChannelList && !isChatChannel(chat)) return undefined;\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean);\n  }, [searchQuery, searchDate, foundIds, isChannelList, globalMessagesByChatId]);\n\n  useEffect(() => {\n    if (!searchQuery) return;\n    searchMessagesGlobal({\n      type: isChannelList ? 'channels' : 'text',\n      context: searchContext,\n      shouldResetResultsByType: true,\n      shouldCheckFetchingMessagesStatus: true,\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [searchContext]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const chatsById = getGlobal().chats.byId;\n\n    const text = renderMessageSummary(oldLang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const actualFoundIds = foundMessages;\n\n  const nothingFound = searchContext === 'all' && fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !actualFoundIds.length;\n  const isMessagesFetching = fetchingStatus?.messages;\n\n  const shouldRenderTopPeers = !searchQuery && !searchDate && !isChannelList;\n\n  const { observe } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n    isDisabled: !shouldRenderTopPeers,\n  });\n\n  if (shouldRenderTopPeers) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  const shouldRenderMessagesSection = searchContext === 'all' ? Boolean(actualFoundIds.length) : true;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"LeftSearch--content custom-scroll\"\n      items={actualFoundIds}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={oldLang('ChatList.Search.NoResults')}\n          description={oldLang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && !isChannelList && (\n        <div\n          className=\"chat-selection no-scrollbar\"\n          dir={oldLang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PeerChip\n              peerId={id}\n              className=\"left-search-local-suggestion\"\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {oldLang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {oldLang(isChannelList ? 'SearchMyChannels' : 'DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                withOpenAppButton\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {oldLang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {oldLang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {sponsoredPeer && (\n            <LeftSearchResultSponsored sponsoredPeer={sponsoredPeer} observeIntersection={observe} />\n          )}\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(suggestedChannelIds?.length) && !searchQuery && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {oldLang('SearchRecommendedChannels')}\n          </h3>\n          {suggestedChannelIds.map((id) => {\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      <div className=\"menuOwner\" ref={ref}>\n        {renderContextMenu()}\n        {shouldRenderMessagesSection && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n              {!isChannelList && (\n                <Link className=\"Link menuTrigger dropDownLink\" onClick={handleClickContext}>\n                  {lang('SearchContextCaption', {\n                    type: getSearchContextCaption(searchContext),\n                  }, {\n                    withNodes: true,\n                  })}\n\n                  <Transition\n                    name=\"fade\"\n                    shouldCleanup\n                    activeKey={Number(isMessagesFetching)}\n                    className=\"iconContainer\"\n                    slideClassName=\"iconContainerSlide\"\n                  >\n                    {isMessagesFetching && (<Loading />)}\n                    {!isMessagesFetching && <Icon name=\"down\" />}\n                  </Transition>\n                </Link>\n              )}\n              {oldLang('SearchMessages')}\n            </h3>\n            {actualFoundIds.map(renderFoundMessage)}\n          </div>\n        )}\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isChannelList }): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const {\n      currentUserId, messages,\n    } = global;\n\n    if (!contactIds) {\n      return {};\n    }\n\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType, sponsoredPeer,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: accountPeerIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.[isChannelList ? 'channels' : 'text']?.foundIds;\n    const { similarChannelIds } = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID) || {};\n\n    return {\n      currentUserId,\n      contactIds,\n      accountPeerIds,\n      globalPeerIds,\n      foundIds,\n      globalMessagesByChatId,\n      fetchingStatus,\n      sponsoredPeer,\n      suggestedChannelIds: similarChannelIds,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading, getMessageDocument } from '../../../global/helpers';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Document from '../../common/Document';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  shouldWarnAboutSvg,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n      const message = globalMessagesByChatId[chatId]?.byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              dir={lang.isRtl ? 'rtl' : undefined}\n              key={message.date}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Document\n              document={getMessageDocument(message)!}\n              message={message}\n              withDate\n              datetime={message.date}\n              smaller\n              sender={getSenderName(lang, message, chatsById, usersById)}\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, message.content.document!)}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport WebLink from '../../common/WebLink';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            dir={lang.isRtl ? 'rtl' : undefined}\n            key={message.id}\n          >\n            <WebLink\n              key={message.id}\n              message={message}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              isProtected={isChatProtected || message.isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Media from '../../common/Media';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport ChatMessage from './ChatMessage';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch--content LeftSearch--media\">\n      <InfiniteScroll\n        className={classNames}\n        items={canRenderContents ? foundMessages : undefined}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { RegularLangKey } from '../../../types/language';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/dates/dateFormat';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport AudioResults from './AudioResults';\nimport BotAppResults from './BotAppResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport ChatResults from './ChatResults';\nimport FileResults from './FileResults';\nimport LinkResults from './LinkResults';\nimport MediaResults from './MediaResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\ntype TabInfo = {\n  type: GlobalSearchContent;\n  key: RegularLangKey;\n};\n\nconst TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabChats' },\n  { type: GlobalSearchContent.ChannelList, key: 'SearchTabChannels' },\n  { type: GlobalSearchContent.BotApps, key: 'SearchTabApps' },\n  { type: GlobalSearchContent.Media, key: 'SearchTabMedia' },\n  { type: GlobalSearchContent.Links, key: 'SearchTabLinks' },\n  { type: GlobalSearchContent.Files, key: 'SearchTabFiles' },\n  { type: GlobalSearchContent.Music, key: 'SearchTabMusic' },\n  { type: GlobalSearchContent.Voice, key: 'SearchTabVoice' },\n];\n\nconst CHAT_TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabMessages' },\n  ...TABS.slice(3), // Skip ChatList, ChannelList and BotApps, replaced with All Messages\n];\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const tabs = useMemo(() => {\n    const arr = chatId ? CHAT_TABS : TABS;\n    return arr.map((tab) => ({\n      ...tab,\n      title: lang(tab.key),\n    }));\n  }, [chatId, lang]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    const tab = tabs[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  });\n\n  const handleSearchDateSelect = useLastCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const containerRef = useRef<HTMLDivElement>();\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        renderCount={tabs.length}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n            case GlobalSearchContent.ChannelList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  isChannelList={currentContent === GlobalSearchContent.ChannelList}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.BotApps:\n              return (\n                <BotAppResults\n                  key=\"botApps\"\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { unique } from '../../../../util/iteratees';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Loading from '../../../ui/Loading';\n\ntype StateProps = {\n  maxChats: number;\n};\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n  maxChats,\n}) => {\n  const lang = useOldLang();\n\n  const { openLimitReachedModal } = getActions();\n\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = useMemo(() => selectChatFilters(state, mode, true), [mode, state]);\n  const chatTypes = mode === 'included' ? CUSTOM_PEER_INCLUDED_CHAT_TYPES : CUSTOM_PEER_EXCLUDED_CHAT_TYPES;\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  const displayedIds = useMemo(() => {\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...filterPeersByQuery({ ids: chatIds, query: chatFilter, type: 'chat' }),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, chatFilter]);\n\n  const handleFilterChange = useLastCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n    setIsTouched(true);\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    if (mode === 'included') {\n      if (ids.length >= maxChats) {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  const handleSelectedChatTypesChange = useLastCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <div className=\"Picker settings-folders-chat-list\">\n      <PeerPicker\n        categories={shouldHideChatTypes ? undefined : chatTypes}\n        itemIds={displayedIds}\n        selectedIds={selectedChatIds}\n        selectedCategories={selectedChatTypes}\n        filterValue={chatFilter}\n        filterPlaceholder={lang('Search')}\n        categoryPlaceholderKey=\"FilterChatTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        withDefaultPadding\n        withPeerTypes\n        allowMultiple\n        itemInputType=\"checkbox\"\n        onSelectedIdsChange={handleSelectedIdsChange}\n        onSelectedCategoriesChange={handleSelectedChatTypesChange}\n        onFilterChange={handleFilterChange}\n      />\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatFilters));\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { selectCanShareFolder } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { isUserId } from '../../../../util/entities/ids';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport Icon from '../../../common/icons/Icon';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n  maxChatLists: number;\n  chatListCount: number;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  maxChatLists,\n  chatListCount,\n  onSaveFolder,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'included'), [state]);\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'excluded'), [state]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (chatListCount >= maxChatLists && !state.folder.isChatList) {\n      openLimitReachedModal({\n        limit: 'chatlistJoined',\n      });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n      return;\n    }\n\n    openLimitReachedModal({\n      limit: 'chatlistInvites',\n    });\n  }, [\n    invites, state.folderId, state.isTouched, chatListCount, maxInviteLinks, isCreating, onSaveFolder,\n    onShareFolder, lang, maxChatLists, state.folder.isChatList,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? CUSTOM_PEER_INCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key)\n      : CUSTOM_PEER_EXCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.type}\n        className=\"settings-folders-list-item mb-1\"\n        narrow\n        inactive\n      >\n        <PrivateChatInfo\n          avatarSize=\"small\"\n          customPeer={chatType}\n        />\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ListItem\n            key=\"load-more\"\n            className=\"settings-folders-list-item\"\n            narrow\n\n            onClick={clickHandler}\n            icon=\"down\"\n          >\n            {lang('FilterShowMoreChats', leftChatsCount, 'i')}\n          </ListItem>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIconWithPreview\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title.text}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary\"\n            icon=\"add\"\n            narrow\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item\"\n              icon=\"link\"\n              narrow\n              multiline\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n    const chatListCount = Object.values(byId).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      chatListCount,\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { isBetween } from '../../../../util/math';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../../hooks/usePreviousDeprecated';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Draggable from '../../../ui/Draggable';\nimport ListItem from '../../../ui/ListItem';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 56;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePreviousDeprecated(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: {\n            text: lang('FilterAllChats'),\n            entities: [],\n          },\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n        noTitleAnimations: folder.noTitleAnimations,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIconWithPreview\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"settings-button with-icon\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <Icon name=\"add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                    allowSelection\n                  >\n                    <span className=\"title\">\n                      {renderTextWithEntities({\n                        text: folder.title.text,\n                        entities: folder.title.entities,\n                        noCustomEmojiPlayback: folder.noTitleAnimations,\n                      })}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                    {isBlocked && <Icon name=\"lock-badge\" className=\"settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <Icon name=\"link\" className=\"mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              narrow\n\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                  </span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { partition } from '../../../../util/iteratees';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Icon from '../../../common/icons/Icon';\nimport LinkField from '../../../common/LinkField';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  folder?: ApiChatFolder;\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  folder,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useLastCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  });\n\n  const itemIds = useMemo(() => {\n    return (folder?.includedChatIds || []).concat(folder?.pinnedChatIds || []);\n  }, [folder?.includedChatIds, folder?.pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useLastCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    if (!folderId || !url || !isTouched) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  });\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        {folder && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('FolderLinkTitleDescription', {\n              folder: renderTextWithEntities({\n                text: folder.title.text,\n                entities: folder.title.entities,\n                noCustomEmojiPlayback: folder.noTitleAnimations,\n              }),\n              chats: lang('FolderLinkTitleDescriptionChats', { count: chatsCount }, { pluralValue: chatsCount }),\n            }, {\n              withMarkdown: true,\n              withNodes: true,\n            })}\n          </p>\n        )}\n      </div>\n\n      <LinkField\n        className=\"settings-item\"\n        link={!url ? oldLang('Loading') : url}\n        withShare\n        onRevoke={handleRevoke}\n        isDisabled={!chatsCount || isTouched}\n      />\n\n      <div className=\"settings-item settings-item-picker\">\n        <PeerPicker\n          itemIds={itemIds}\n          lockedUnselectedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      folder,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n    openSettingsScreen,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  }, [state.mode, dispatch, currentScreen, onReset]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    const newState = dispatch({ type: 'saveFilters' });\n    handleReset();\n    saveState(newState);\n  }, [dispatch, handleReset, saveState]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n  }, [dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n  }, [dispatch]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersIncludedChatsFromChatList\n        : SettingsScreens.FoldersIncludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersExcludedChatsFromChatList\n        : SettingsScreens.FoldersExcludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [dispatch, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PasswordForm from '../../common/PasswordForm';\nimport PasswordMonkey from '../../common/PasswordMonkey';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useOldLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent })}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeTurnOff })}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram Web A.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram Web A and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { decryptSession } from '../../../../util/passcode';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n  }, [onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeCongratulations });\n  }, [onSetPasscode, passcode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onSetPasscode]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      openSettingsScreen({ screen: SettingsScreens.Privacy });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsText } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../icons/Icon';\n\ntype OwnProps = {\n  min?: number;\n  max: number;\n  value: number;\n  disabled?: boolean;\n  readOnly?: boolean;\n  bold?: boolean;\n  className?: string;\n  defaultValue: number;\n  onChange: (value: number) => void;\n  canChangeChargeForMessages?: boolean;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst PaidMessageSlider: FC<OwnProps> = ({\n  min = 0,\n  max,\n  value,\n  disabled,\n  readOnly,\n  bold,\n  className,\n  defaultValue,\n  onChange,\n  canChangeChargeForMessages,\n}) => {\n  const lang = useLang();\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < max) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= max) {\n        result.push(max);\n        break;\n      }\n    }\n\n    return result;\n  }, [max]);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    onChange(getValue(points, newValue));\n  });\n\n  const mainClassName = buildClassName(\n    className,\n    'RangeSlider',\n    disabled && 'disabled',\n    readOnly && 'readOnly',\n    bold && 'bold',\n  );\n\n  function renderTopRow() {\n    return (\n      <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"value-min\" dir=\"auto\">{lang.number(min)}</span>\n        <span className=\"settings-range-value\">\n          {!canChangeChargeForMessages && (<Icon name=\"lock-badge\" />)}\n          {formatStarsAsText(lang, getValue(points, getProgress(points, value)))}\n        </span>\n        <span className=\"value-max\" dir=\"auto\">{lang.number(max)}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className={mainClassName}>\n      {renderTopRow()}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          style={`width: ${(getProgress(points, value) / points.length) * 100}%`}\n        />\n        <input\n          min={0}\n          max={points.length}\n          defaultValue={getProgress(points, defaultValue)}\n          step=\"any\"\n          type=\"range\"\n          className=\"RangeSlider__input\"\n          onChange={handleChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const pointValue = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return pointValue < 100 ? Math.round(pointValue) : Math.round(pointValue / 10) * 10;\n}\n\nexport default memo(PaidMessageSlider);\n","import {\n  memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n  MINIMUM_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPercent } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Icon from '../icons/Icon';\nimport PaidMessageSlider from './PaidMessageSlider';\n\ntype OwnProps = {\n  chargeForMessages: number;\n  canChangeChargeForMessages?: boolean;\n  isGroupChat?: boolean;\n  onChange: (value: number) => void;\n};\n\ntype StateProps = {\n  starsUsdWithdrawRate: number;\n  starsPaidMessageAmountMax: number;\n  starsPaidMessageCommissionPermille: number;\n};\n\nfunction PaidMessagePrice({\n  starsUsdWithdrawRate,\n  starsPaidMessageAmountMax,\n  starsPaidMessageCommissionPermille,\n  canChangeChargeForMessages,\n  isGroupChat,\n  chargeForMessages,\n  onChange,\n}: OwnProps & StateProps) {\n  const { openPremiumModal } = getActions();\n\n  const lang = useLang();\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    onChange?.(value);\n  });\n\n  const handleUnlockWithPremium = useLastCallback(() => {\n    openPremiumModal({ initialSection: 'message_privacy' });\n  });\n\n  return (\n    <>\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('SectionTitleStarsForForMessages')}\n      </h4>\n      <PaidMessageSlider\n        defaultValue={chargeForMessages}\n        min={MINIMUM_CHARGE_FOR_MESSAGES}\n        max={starsPaidMessageAmountMax}\n        value={chargeForMessages}\n        onChange={handleChargeForMessagesChange}\n        canChangeChargeForMessages={canChangeChargeForMessages}\n        readOnly={!canChangeChargeForMessages}\n      />\n      {!canChangeChargeForMessages && (\n        <Button\n          color=\"primary\"\n          fluid\n          size=\"smaller\"\n          noForcedUpperCase\n          className=\"settings-unlock-button\"\n          onClick={handleUnlockWithPremium}\n        >\n          <span className=\"settings-unlock-button-title\">\n            {lang('UnlockButtonTitle')}\n            <Icon name=\"lock-badge\" className=\"settings-unlock-button-icon\" />\n          </span>\n        </Button>\n      )}\n      {canChangeChargeForMessages && (\n        <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang(isGroupChat ? 'SetPriceGroupDescription' : 'SectionDescriptionStarsForForMessages', {\n            percent: formatPercent(starsPaidMessageCommissionPermille * 100),\n            amount: formatCurrencyAsString(\n              chargeForMessages * starsUsdWithdrawRate * starsPaidMessageCommissionPermille,\n              'USD',\n              lang.code,\n            ),\n          }, {\n            withNodes: true,\n          })}\n        </p>\n      )}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const starsUsdWithdrawRateX1000 = global.appConfig?.starsUsdWithdrawRateX1000;\n    const starsUsdWithdrawRate = starsUsdWithdrawRateX1000 ? starsUsdWithdrawRateX1000 / 1000 : 1;\n    const configStarsPaidMessageCommissionPermille = global.appConfig?.starsPaidMessageCommissionPermille;\n    const starsPaidMessageCommissionPermille = configStarsPaidMessageCommissionPermille\n      ? configStarsPaidMessageCommissionPermille / 1000 : 100;\n\n    return {\n      starsPaidMessageCommissionPermille,\n      starsUsdWithdrawRate,\n      starsPaidMessageAmountMax: global.appConfig?.starsPaidMessageAmountMax || DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(PaidMessagePrice));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPremiumSection } from '../../../api/types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  premiumSection?: ApiPremiumSection;\n};\n\nfunction PremiumStatusItem({ premiumSection }: OwnProps) {\n  const { openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal({ initialSection: premiumSection }));\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n        onClick={handleOpenPremiumModal}\n      >\n        {lang('PrivacyLastSeenPremium')}\n      </ListItem>\n      <p\n        className=\"settings-item-description-larger premium-info\"\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {lang('lng_messages_privacy_premium_about')}\n      </p>\n    </div>\n  );\n}\n\nexport default memo(PremiumStatusItem);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './PrivacyLockedOption.module.scss';\n\ntype OwnProps = {\n  label: string;\n  isChecked?: boolean;\n};\n\nfunction PrivacyLockedOption({ label, isChecked }: OwnProps) {\n  const lang = useOldLang();\n  const { showNotification } = getActions();\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        isChecked && styles.checked,\n      )}\n      onClick={() => showNotification({ message: lang('OptionPremiumRequiredMessage') })}\n    >\n      <span>{label}</span>\n      <Icon name=\"lock-badge\" className={styles.lockIcon} />\n    </div>\n  );\n}\n\nexport default memo(PrivacyLockedOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sBptmiga\",\"lock-icon\":\"jWxrRbkh\",\"lockIcon\":\"jWxrRbkh\",\"checked\":\"U_6O1ebL\"};","import {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectNewNoncontactPeersRequirePremium,\n  selectNonContactPeersPaidStars,\n} from '../../../global/selectors';\n\nimport useDebouncedCallback from '../../../hooks/useDebouncedCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages?: boolean;\n  canLimitNewMessagesWithoutPremium?: boolean;\n  canChargeForMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  nonContactPeersPaidStars: number;\n  noPaidReactionsForUsersCount: number;\n  privacy: GlobalState['settings']['privacy'];\n};\n\nfunction PrivacyMessages({\n  isActive,\n  canLimitNewMessagesWithoutPremium,\n  canChargeForMessages,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  nonContactPeersPaidStars,\n  isCurrentUserPremium,\n  noPaidReactionsForUsersCount,\n  onReset,\n  privacy,\n}: OwnProps & StateProps) {\n  const { updateGlobalPrivacySettings, openSettingsScreen, showNotification } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const canChangeForContactsAndPremium = isCurrentUserPremium || canLimitNewMessagesWithoutPremium;\n  const canChangeChargeForMessages = isCurrentUserPremium && canChargeForMessages;\n  const [chargeForMessages, setChargeForMessages] = useState<number>(nonContactPeersPaidStars);\n  const [hasShownNotification, setHasShownNotification] = useState(false);\n\n  const selectedValue = useMemo(() => {\n    if (shouldChargeForMessages) return 'charge_for_messages';\n    if (shouldNewNonContactPeersRequirePremium) return 'contacts_and_premium';\n    return 'everybody';\n  }, [shouldChargeForMessages, shouldNewNonContactPeersRequirePremium]);\n\n  useEffectWithPrevDeps(([prevSelectedValue]) => {\n    if (\n      !hasShownNotification && prevSelectedValue !== undefined\n      && selectedValue !== 'everybody'\n      && selectedValue !== prevSelectedValue\n    ) {\n      if (privacy.chatInvite?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyInviteText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyGroupChats },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      if (privacy.phoneCall?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyCallsText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyPhoneCall },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      setHasShownNotification(true);\n    }\n  }, [selectedValue, shouldChargeForMessages, privacy, lang, hasShownNotification]);\n\n  const options = useMemo(() => {\n    return [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts_and_premium',\n        label: canChangeForContactsAndPremium ? (\n          oldLang('PrivacyMessagesContactsAndPremium')\n        ) : (\n          <PrivacyLockedOption\n            label={oldLang('PrivacyMessagesContactsAndPremium')}\n            isChecked={selectedValue === 'contacts_and_premium'}\n          />\n        ),\n        hidden: !canChangeForContactsAndPremium,\n        isCanCheckedInDisabled: true,\n      },\n      {\n        value: 'charge_for_messages',\n        label: canChangeChargeForMessages ? (\n          lang('PrivacyChargeForMessages')\n        ) : (\n          <PrivacyLockedOption\n            label={lang('PrivacyChargeForMessages')}\n            isChecked={selectedValue === 'charge_for_messages'}\n          />\n        ),\n        hidden: !canChangeChargeForMessages,\n        isCanCheckedInDisabled: true,\n      },\n    ];\n  }, [oldLang, lang, canChangeForContactsAndPremium, canChangeChargeForMessages, selectedValue]);\n\n  const handleChange = useLastCallback((privacyValue: string) => {\n    updateGlobalPrivacySettings({\n      shouldNewNonContactPeersRequirePremium: privacyValue === 'contacts_and_premium',\n      // eslint-disable-next-line no-null/no-null\n      nonContactPeersPaidStars: privacyValue === 'charge_for_messages' ? chargeForMessages : null,\n    });\n  });\n\n  const updateGlobalPrivacySettingsWithDebounced = useDebouncedCallback((value: number) => {\n    updateGlobalPrivacySettings({\n      nonContactPeersPaidStars: value,\n    });\n  }, [updateGlobalPrivacySettings], 300, true);\n\n  const handleChargeForMessagesChange = useCallback((value: number) => {\n    setChargeForMessages(value);\n    updateGlobalPrivacySettingsWithDebounced(value);\n  }, [setChargeForMessages, updateGlobalPrivacySettingsWithDebounced]);\n\n  function renderSectionNoPaidMessagesForUsers() {\n    const itemSubtitle = !noPaidReactionsForUsersCount ? lang('SubtitlePrivacyAddUsers')\n      : oldLang('Users', noPaidReactionsForUsersCount, 'i');\n\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('RemoveFeeTitle')}\n        </h4>\n        <ListItem\n          narrow\n          icon=\"delete-user\"\n\n          onClick={() => {\n            openSettingsScreen({ screen: SettingsScreens.PrivacyNoPaidMessages });\n          }}\n        >\n          <div className=\"multiline-item full-size\">\n            <span className=\"title\">{lang('ExceptionTitlePrivacyChargeForMessages')}</span>\n            <span className=\"subtitle\">\n              {\n                itemSubtitle\n              }\n            </span>\n          </div>\n        </ListItem>\n      </div>\n    );\n  }\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const privacyDescription = useMemo(() => {\n    if (shouldChargeForMessages) return lang('PrivacyDescriptionChargeForMessages');\n    return lang('PrivacyDescriptionMessagesContactsAndPremium');\n  }, [shouldChargeForMessages, lang]);\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('PrivacyMessagesTitle')}\n        </h4>\n        <RadioGroup\n          name=\"privacy-messages\"\n          options={options}\n          onChange={handleChange}\n          selected={selectedValue}\n        />\n        <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {privacyDescription}\n        </p>\n      </div>\n      {selectedValue === 'charge_for_messages' && (\n        <div className=\"settings-item fluid-container\">\n          <PaidMessagePrice\n            canChangeChargeForMessages={canChangeChargeForMessages}\n            chargeForMessages={chargeForMessages}\n            onChange={handleChargeForMessagesChange}\n          />\n        </div>\n      )}\n      {canChangeChargeForMessages && selectedValue === 'charge_for_messages' && renderSectionNoPaidMessagesForUsers()}\n      {!isCurrentUserPremium && selectedValue !== 'charge_for_messages'\n        && <PremiumStatusItem premiumSection=\"message_privacy\" />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    settings: {\n      privacy,\n    },\n  } = global;\n  const nonContactPeersPaidStars = selectNonContactPeersPaidStars(global);\n\n  const noPaidReactionsForUsersCount = global.settings.privacy.noPaidMessages?.allowUserIds.length || 0;\n\n  return {\n    shouldNewNonContactPeersRequirePremium: selectNewNoncontactPeersRequirePremium(global),\n    shouldChargeForMessages: Boolean(nonContactPeersPaidStars),\n    nonContactPeersPaidStars: nonContactPeersPaidStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    canLimitNewMessagesWithoutPremium: global.appConfig?.canLimitNewMessagesWithoutPremium,\n    canChargeForMessages: global.appConfig?.starsPaidMessagesAvailable,\n    noPaidReactionsForUsersCount,\n    privacy,\n  };\n})(PrivacyMessages));\n","import type { ApiSession } from '../../../../api/types';\nimport type { DeviceType } from '../../../../types/icons/device';\n\nexport default function getSessionIcon(session: ApiSession): DeviceType {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"M84mrPgu\",\"settingsActiveSession\":\"M84mrPgu\",\"iconDevice\":\"Add8P_K4\",\"iconDevice__android\":\"onkXVGY4\",\"iconDeviceAndroid\":\"onkXVGY4\",\"iconDevice__apple\":\"xw13aT8u\",\"iconDeviceApple\":\"xw13aT8u\",\"iconDevice__brave\":\"HESrGUdv\",\"iconDeviceBrave\":\"HESrGUdv\",\"iconDevice__chrome\":\"Vpej7wm7\",\"iconDeviceChrome\":\"Vpej7wm7\",\"iconDevice__edge\":\"ueWE77x9\",\"iconDeviceEdge\":\"ueWE77x9\",\"iconDevice__firefox\":\"_lMTmvya\",\"iconDeviceFirefox\":\"_lMTmvya\",\"iconDevice__linux\":\"cDVfvyG_\",\"iconDeviceLinux\":\"cDVfvyG_\",\"iconDevice__opera\":\"nWqlTxZt\",\"iconDeviceOpera\":\"nWqlTxZt\",\"iconDevice__safari\":\"ldFLp1Gf\",\"iconDeviceSafari\":\"ldFLp1Gf\",\"iconDevice__samsung\":\"VHNORBGL\",\"iconDeviceSamsung\":\"VHNORBGL\",\"iconDevice__ubuntu\":\"QBVivtdu\",\"iconDeviceUbuntu\":\"QBVivtdu\",\"iconDevice__unknown\":\"GbjIgrwU\",\"iconDeviceUnknown\":\"GbjIgrwU\",\"iconDevice__vivaldi\":\"yieVnjoI\",\"iconDeviceVivaldi\":\"yieVnjoI\",\"iconDevice__windows\":\"_0dnTFOE\",\"iconDeviceWindows\":\"_0dnTFOE\",\"iconDevice__xbox\":\"fbCjjDpU\",\"iconDeviceXbox\":\"fbCjjDpU\",\"title\":\"c6edjhlh\",\"note\":\"lRqTZAYn\",\"date\":\"oLnN6crs\",\"box\":\"wVEXuPlZ\",\"actionHeader\":\"olQS2T1n\",\"actionName\":\"KuX1APpO\",\"headerButton\":\"VT8pZfMu\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useOldLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName}\n          {' '}\n          {renderingSession?.appVersion}\n          ,\n          {' '}\n          {renderingSession?.platform}\n          {' '}\n          {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)}`} iconClassName=\"icon-device\">\n          <div className=\"multiline-item full-size\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName}\n              {' '}\n              {session.appVersion}\n              ,\n              {' '}\n              {session.platform}\n              {' '}\n              {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">\n              {session.ip}\n              {' '}\n              -\n              {' '}\n              {getLocation(session)}\n            </span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p className=\"settings-item-description-larger\">{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)}`}\n        iconClassName=\"icon-device\"\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName}\n            {' '}\n            {session.appVersion}\n            ,\n            {' '}\n            {session.platform}\n            {' '}\n            {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">\n            {session.ip}\n            {' '}\n            {getLocation(session)}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wd0fmiSY\",\"avatar\":\"OhZHdRsP\",\"title\":\"EQ7__xGn\",\"note\":\"YRYk96ki\",\"box\":\"kmCTIfvf\",\"action-header\":\"qkq5Fa0V\",\"actionHeader\":\"qkq5Fa0V\",\"action-name\":\"zFYUiy13\",\"actionName\":\"zFYUiy13\",\"header-button\":\"lUf0RJ2h\",\"headerButton\":\"lUf0RJ2h\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useOldLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): StateProps => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"v0wP46TR\",\"clear-help\":\"WnnxcARX\",\"clearHelp\":\"WnnxcARX\",\"subtitle\":\"uEUfjByC\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} peer={bot} size=\"tiny\" />\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}\n            ,\n            {session.browser}\n            ,\n            {session.platform}\n          </span>\n          <span className={buildClassName('subtitle', styles.subtitle)}>\n            {session.ip}\n            {' '}\n            {session.region}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { CHAT_HEIGHT_PX, STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useLastCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  });\n\n  if (!stickerSet?.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      className={buildClassName('StickerSetCard', 'chat-item-clickable small-icon', className)}\n      style={`height: ${CHAT_HEIGHT_PX}px;`}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', {\n      limit: lang('FileSizeMB', { count: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] }),\n    });\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettingsContacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsPrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsGroupChats')}\n          checked={canAutoLoadInGroups}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsChannels')}\n          checked={canAutoLoadInChannels}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadFilesTitle'),\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ys1i4ssl\",\"item\":\"skaVPMTF\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { partition } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useOldLang();\n  const language = lang.code || 'en';\n  const [displayedOptions, setDisplayedOptions] = useState<string[]>([]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedOptionList: ItemPickerOption[] = useMemo(() => {\n    const options = SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).filter(Boolean).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n\n    if (!searchQuery.trim()) {\n      const currentLanguageOption = options.find((option) => option.value === language);\n      const otherOptionList = options.filter((option) => option.value !== language);\n      return currentLanguageOption ? [currentLanguageOption, ...otherOptionList] : options;\n    }\n\n    return options?.filter((option) => option.label.toLowerCase().includes(searchQuery.toLowerCase()));\n  }, [language, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive, prevLanguage]) => {\n    if (prevIsActive === isActive && prevLanguage?.find((option) => option === language)) return;\n    const [selected] = partition(displayedOptionList, (option) => doNotTranslate.includes(option.value));\n    setDisplayedOptions([...selected.map((option) => option.value)]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, displayedOptionList]);\n\n  const handleChange = useLastCallback((newSelectedIds: string[]) => {\n    setDisplayedOptions(newSelectedIds);\n    setSettingOption({\n      doNotTranslate: newSelectedIds,\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content infinite-scroll')}>\n      <div className={buildClassName(styles.item)}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedOptionList}\n          selectedValues={displayedOptions}\n          onSelectedValuesChange={handleChange}\n          filterValue={searchQuery}\n          onFilterChange={setSearchQuery}\n          isSearchable\n          allowMultiple\n          withDefaultPadding\n          itemInputType=\"checkbox\"\n          searchInputId=\"lang-picker-search\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUsername } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { isBetween } from '../../util/math';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 56;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useOldLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePreviousDeprecated(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (!usernameForConfirm) {\n      return;\n    }\n\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">\n                    @\n                    {usernameData.username}\n                  </span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PaO1MMi5\",\"header\":\"wSswdVkR\",\"description\":\"oiJc22Aj\",\"sortableContainer\":\"lAeeBh9K\",\"item\":\"l04OwRBg\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  isUsernameValid, MAX_USERNAME_LENGTH, MIN_UPDATE_USERNAME_LENGTH, USERNAME_REGEX,\n} from '../../util/entities/username';\nimport { debounce } from '../../util/schedulers';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useOldLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_UPDATE_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    // Prevent prefix editing\n    if (asLink && !value.match(LINK_PREFIX_REGEX)) {\n      if (!value.length) {\n        setUsername('');\n        onChange?.('');\n      }\n      return;\n    }\n    const newUsername = value.replace(LINK_PREFIX_REGEX, '');\n\n    setUsername(newUsername);\n\n    const isValid = newUsername === '' ? true : isUsernameValid(newUsername, true);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-item\">\n          <div className=\"settings-input\">\n            <AvatarEditable\n              currentAvatarBlobUrl={currentAvatarBlobUrl}\n              onChange={handlePhotoChange}\n              title=\"Edit your profile photo\"\n              disabled={isLoading}\n            />\n            <InputText\n              value={firstName}\n              onChange={handleFirstNameChange}\n              label={lang('FirstName')}\n              disabled={isLoading}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              value={lastName}\n              onChange={handleLastNameChange}\n              label={lang('LastName')}\n              disabled={isLoading}\n            />\n            <TextArea\n              value={bio}\n              onChange={handleBioChange}\n              label={lang('UserBio')}\n              disabled={isLoading}\n              maxLength={maxBioLength}\n              maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n            />\n          </div>\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <div className=\"settings-input\">\n            <UsernameInput\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n          </div>\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}\n              <br />\n              <span className=\"username-link\">\n                {TME_LINK_PREFIX}\n                {editableUsername}\n              </span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser;\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { DEBUG_LOG_FILENAME } from '../../../config';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_ELECTRON,\n  IS_SNAP_EFFECT_SUPPORTED,\n  IS_WAVE_TRANSFORM_SUPPORTED,\n} from '../../../util/browser/windowEnvironment';\nimport { getDebugLogs } from '../../../util/debugConsole';\nimport download from '../../../util/download';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport { animateSnap } from '../../main/visualEffects/SnapEffectContainer';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldForceHttpTransport?: boolean;\n  shouldAllowHttpTransport?: boolean;\n  shouldCollectDebugLogs?: boolean;\n  shouldDebugExportedSenders?: boolean;\n};\n\nconst SettingsExperimental: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  shouldForceHttpTransport,\n  shouldAllowHttpTransport,\n  shouldCollectDebugLogs,\n  shouldDebugExportedSenders,\n}) => {\n  const { requestConfetti, setSharedSettingOption, requestWave } = getActions();\n\n  const snapButtonRef = useRef<HTMLDivElement>();\n  const [isSnapButtonAnimating, setIsSnapButtonAnimating] = useState(false);\n\n  const lang = useOldLang();\n\n  const [isAutoUpdateEnabled, setIsAutoUpdateEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsAutoUpdateEnabled);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDownloadLog = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    const url = URL.createObjectURL(file);\n    download(url, DEBUG_LOG_FILENAME);\n  });\n\n  const handleIsAutoUpdateEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsAutoUpdateEnabled(isChecked);\n  }, []);\n\n  const handleRequestWave = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    requestWave({ startX: e.clientX, startY: e.clientY });\n  });\n\n  const handleRequestConfetti = useLastCallback(() => {\n    requestConfetti({ withStars: true });\n  });\n\n  const handleSnap = useLastCallback(() => {\n    const button = snapButtonRef.current;\n    if (!button) return;\n\n    if (animateSnap(button)) {\n      setIsSnapButtonAnimating(true);\n      // Manual reset for debug\n      setTimeout(() => {\n        setIsSnapButtonAnimating(false);\n      }, 1500);\n    }\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          onClick={handleRequestConfetti}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n        <ListItem\n          onClick={handleRequestWave}\n          icon=\"story-expired\"\n          disabled={!IS_WAVE_TRANSFORM_SUPPORTED}\n        >\n          <div className=\"title\">Start wave</div>\n        </ListItem>\n        <ListItem\n          ref={snapButtonRef}\n          onClick={handleSnap}\n          icon=\"spoiler\"\n          disabled={!IS_SNAP_EFFECT_SUPPORTED}\n          style={isSnapButtonAnimating ? 'visibility: hidden' : ''}\n        >\n          <div className=\"title\">Vaporize this button</div>\n        </ListItem>\n\n        <Checkbox\n          label=\"Allow HTTP Transport\"\n          checked={Boolean(shouldAllowHttpTransport)}\n\n          onCheck={() => setSharedSettingOption({ shouldAllowHttpTransport: !shouldAllowHttpTransport })}\n        />\n\n        <Checkbox\n          label=\"Force HTTP Transport\"\n          disabled={!shouldAllowHttpTransport}\n          checked={Boolean(shouldForceHttpTransport)}\n\n          onCheck={() => setSharedSettingOption({ shouldForceHttpTransport: !shouldForceHttpTransport })}\n        />\n\n        <Checkbox\n          label={lang('DebugMenuEnableLogs')}\n          checked={Boolean(shouldCollectDebugLogs)}\n\n          onCheck={() => setSharedSettingOption({ shouldCollectDebugLogs: !shouldCollectDebugLogs })}\n        />\n\n        <Checkbox\n          label=\"Enable exported senders debug\"\n          checked={Boolean(shouldDebugExportedSenders)}\n\n          onCheck={() => setSharedSettingOption({ shouldDebugExportedSenders: !shouldDebugExportedSenders })}\n        />\n\n        {IS_ELECTRON && (\n          <Checkbox\n            label=\"Enable autoupdates\"\n            checked={Boolean(isAutoUpdateEnabled)}\n            onCheck={handleIsAutoUpdateEnabledChange}\n          />\n        )}\n\n        <ListItem\n          onClick={handleDownloadLog}\n          icon=\"bug\"\n        >\n          <div className=\"title\">Download log</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    } = selectSharedSettings(global);\n\n    return {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    };\n  },\n)(SettingsExperimental));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { SharedSettings, ThemeKey, TimeFormat } from '../../../types';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_MAC_OS, IS_WINDOWS,\n} from '../../../util/browser/windowEnvironment';\nimport { setTimeFormat } from '../../../util/oldLangProvider';\nimport { getSystemTheme } from '../../../util/systemTheme';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<SharedSettings, (\n    'messageTextSize' |\n    'messageSendKeyCombo' |\n    'timeFormat' |\n    'theme' |\n    'shouldUseSystemTheme'\n  )>;\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n  onReset,\n}) => {\n  const {\n    setSharedSettingOption, openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const timeFormatOptions: IRadioOption[] = [{\n    label: lang('SettingsTimeFormat12'),\n    value: '12h',\n  }, {\n    label: lang('SettingsTimeFormat24'),\n    value: '24h',\n  }];\n\n  const appearanceThemeOptions: IRadioOption[] = [{\n    label: lang('EmptyChatAppearanceLight'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChatAppearanceDark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChatAppearanceSystem'),\n    value: 'auto',\n  }];\n\n  const keyboardSendOptions = !isMobileDevice ? [\n    { value: 'enter', label: lang('SettingsSendEnter'), subLabel: lang('SettingsSendEnterDescription') },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS || IS_IOS ? 'SettingsSendCmdenter' : 'SettingsSendCtrlenter'),\n      subLabel: lang('SettingsSendPlusEnterDescription'),\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSharedSettingOption({ messageTextSize: newSize });\n  }, []);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ThemeKey;\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, []);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSharedSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSharedSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, []);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSharedSettingOption({ messageSendKeyCombo: newCombo as SharedSettings['messageSendKeyCombo'] });\n  }, []);\n\n  const [isTrayIconEnabled, setIsTrayIconEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsTrayIconEnabled().then(setIsTrayIconEnabled);\n  }, []);\n\n  const handleIsTrayIconEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsTrayIconEnabled(isChecked);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Settings')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground })}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n\n        {IS_ELECTRON && IS_WINDOWS && (\n          <Checkbox\n            label={lang('SettingsTray')}\n            checked={Boolean(isTrayIconEnabled)}\n            onCheck={handleIsTrayIconEnabledChange}\n          />\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={appearanceThemeOptions}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsTimeFormat')}\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={timeFormatOptions}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {keyboardSendOptions && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SettingsKeyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={keyboardSendOptions}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      theme,\n      shouldUseSystemTheme,\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n    } = selectSharedSettings(global);\n\n    return {\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\n\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransitionDeprecated(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePreviousDeprecated(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransitionDeprecated(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { validateFiles } from '../../../util/files';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n    openSettingsScreen,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.GeneralChatBackgroundColor });\n  }, []);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = selectThemeValues(global, theme) || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\n\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { captureEvents } from '../../../util/captureEvents';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { pick } from '../../../util/iteratees';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  const containerRef = useRef<HTMLDivElement>();\n  const colorPickerRef = useRef<HTMLDivElement>();\n  const huePickerRef = useRef<HTMLDivElement>();\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: React.RefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: React.RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = selectThemeValues(global, theme) || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    openSettingsScreen({ screen: SettingsScreens.Experimental });\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{oldLang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{oldLang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{oldLang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{oldLang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{oldLang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{oldLang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{oldLang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{oldLang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{oldLang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{oldLang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{oldLang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{oldLang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{oldLang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{oldLang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{oldLang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{oldLang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyBio:\n        return <h3>{oldLang('PrivacyBio')}</h3>;\n      case SettingsScreens.PrivacyBirthday:\n        return <h3>{oldLang('PrivacyBirthday')}</h3>;\n      case SettingsScreens.PrivacyGifts:\n        return <h3>{lang('PrivacyGifts')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{oldLang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{oldLang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyMessages:\n        return <h3>{oldLang('PrivacyMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{oldLang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{oldLang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{oldLang('AlwaysShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{oldLang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{oldLang('AlwaysAllow')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{oldLang('NeverAllow')}</h3>;\n\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return <h3>{lang('RemoveFeeTitle')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('MenuAnimations')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{oldLang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{oldLang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{oldLang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{oldLang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{oldLang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{oldLang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{oldLang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{oldLang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{oldLang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{oldLang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{oldLang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{oldLang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{oldLang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{oldLang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{oldLang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{oldLang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {oldLang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {oldLang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {oldLang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openSettingsScreen({ screen: SettingsScreens.EditProfile })}\n              ariaLabel={oldLang('lng_settings_information')}\n            >\n              <Icon name=\"edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{oldLang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={oldLang('AccDescrGoBack')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={oldLang('lng_sure_logout')}\n        confirmLabel={oldLang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings, LangCode, SharedSettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { oldSetLanguage } from '../../../util/oldLangProvider';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n} & Pick<AccountSettings, 'canTranslate' | 'canTranslateChats' | 'doNotTranslate'>\n& Pick<SharedSettings, 'language' | 'languages'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  languages,\n  language,\n  canTranslate,\n  canTranslateChats,\n  doNotTranslate,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n    setSharedSettingOption,\n    openPremiumModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const canTranslateChatsEnabled = isCurrentUserPremium && canTranslateChats;\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!languages?.length) {\n      loadLanguages();\n    }\n  }, [languages]);\n\n  const handleChange = useLastCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void oldSetLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSharedSettingOption({ language: langCode as LangCode });\n    });\n  });\n\n  const options = useMemo(() => {\n    if (!languages) return undefined;\n    const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n    const shortLangCode = currentLangCode.substr(0, 2);\n\n    return languages.map(({ langCode, nativeName, name }) => ({\n      value: langCode,\n      label: nativeName,\n      subLabel: name,\n      isLoading: langCode === selectedLanguage && isLoading,\n    } satisfies ItemPickerOption)).sort((a) => {\n      return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n    });\n  }, [isLoading, languages, selectedLanguage]);\n\n  const handleShouldTranslateChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  });\n\n  const handleShouldTranslateChatsChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslateChats: newValue });\n  });\n\n  const handleShouldTranslateChatsClick = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'translations',\n      });\n    }\n  });\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.DoNotTranslate });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          <Checkbox\n            label={lang('ShowTranslateChatButton')}\n            checked={canTranslateChatsEnabled}\n            disabled={!isCurrentUserPremium}\n            rightIcon={!isCurrentUserPremium ? 'lock' : undefined}\n            onClickLabel={handleShouldTranslateChatsClick}\n            onCheck={handleShouldTranslateChatsChange}\n          />\n          {(canTranslate || canTranslateChatsEnabled) && (\n            <ListItem\n              narrow\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item settings-item-picker\">\n        <h4 className=\"settings-item-header\">\n          {lang('Localization.InterfaceLanguage')}\n        </h4>\n        {options ? (\n          <ItemPicker\n            items={options}\n            selectedValue={selectedLanguage}\n            forceRenderAllItems\n            onSelectedValueChange={handleChange}\n            itemInputType=\"radio\"\n            className=\"settings-picker\"\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      canTranslate, canTranslateChats, doNotTranslate,\n    } = global.settings.byKey;\n    const { language, languages } = selectSharedSettings(global);\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      languages,\n      language,\n      canTranslate,\n      canTranslateChats,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarsAmount } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { FAQ_URL, PRIVACY_URL } from '../../../config';\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport {\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectIsPremiumPurchaseBlocked,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport ChatExtra from '../../common/profile/ChatExtra';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUserId?: string;\n  canBuyPremium?: boolean;\n  isGiveawayAvailable?: boolean;\n  starsBalance?: ApiStarsAmount;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentUserId,\n  sessionCount,\n  canBuyPremium,\n  isGiveawayAvailable,\n  starsBalance,\n  onReset,\n}) => {\n  const {\n    loadMoreProfilePhotos,\n    openPremiumModal,\n    openSupportChat,\n    openUrl,\n    openGiftRecipientPicker,\n    openStarsBalanceModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [isSupportDialogOpen, openSupportDialog, closeSupportDialog] = useFlag(false);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (currentUserId) {\n      loadMoreProfilePhotos({ peerId: currentUserId, isPreload: true });\n    }\n  }, [currentUserId]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleOpenSupport = useLastCallback(() => {\n    openSupportChat();\n    closeSupportDialog();\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu self-profile\">\n        {currentUserId && (\n          <ProfileInfo\n            peerId={currentUserId}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUserId && (\n          <ChatExtra\n            chatOrUserId={currentUserId}\n            isInSettings\n          />\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"settings\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.General })}\n        >\n          {lang('TelegramGeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Performance })}\n        >\n          {lang('MenuAnimations')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Notifications })}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.DataStorage })}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Privacy })}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Folders })}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveSessions })}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Language })}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.languageInfo.nativeName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Stickers })}\n        >\n          {lang('MenuStickers')}\n        </ListItem>\n      </div>\n      <div className=\"settings-main-menu\">\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n            narrow\n\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"gold\" size=\"big\" />}\n          narrow\n\n          onClick={() => openStarsBalanceModal({})}\n        >\n          {lang('MenuStars')}\n          {Boolean(starsBalance) && (\n            <span className=\"settings-item__current-value\">\n              {formatStarsAmount(lang, starsBalance)}\n            </span>\n          )}\n        </ListItem>\n        {isGiveawayAvailable && (\n          <ListItem\n            icon=\"gift\"\n            narrow\n\n            onClick={() => openGiftRecipientPicker()}\n          >\n            {lang('MenuSendGift')}\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"ask-support\"\n          narrow\n          onClick={openSupportDialog}\n        >\n          {lang('AskAQuestion')}\n        </ListItem>\n        <ListItem\n          icon=\"help\"\n          narrow\n\n          onClick={() => openUrl({ url: FAQ_URL })}\n        >\n          {lang('MenuTelegramFaq')}\n        </ListItem>\n        <ListItem\n          icon=\"privacy-policy\"\n          narrow\n\n          onClick={() => openUrl({ url: PRIVACY_URL })}\n        >\n          {lang('MenuPrivacyPolicy')}\n        </ListItem>\n      </div>\n      <ConfirmDialog\n        isOpen={isSupportDialogOpen}\n        confirmLabel={lang('OK')}\n        title={lang('AskAQuestion')}\n        textParts={lang('MenuAskText', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        confirmHandler={handleOpenSupport}\n        onClose={closeSupportDialog}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const starsBalance = global.stars?.balance;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUserId,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isGiveawayAvailable,\n      starsBalance,\n    };\n  },\n)(SettingsMain));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNotifyPeerType, ApiPeerNotifySettings } from '../../../api/types';\n\nimport {\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n  playNotifySound,\n} from '../../../util/notifications';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  notifyDefaults?: Record<ApiNotifyPeerType, ApiPeerNotifySettings>;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  notifyDefaults,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: ApiNotifyPeerType,\n    setting: 'mute' | 'showPreviews',\n  ) => {\n    const currentIsMuted = Boolean(notifyDefaults?.[peerType]?.mutedUntil);\n    const currentShouldShowPreviews = Boolean(notifyDefaults?.[peerType]?.shouldShowPreviews);\n\n    updateNotificationSettings({\n      peerType,\n      isMuted: setting === 'mute' ? !e.target.checked : currentIsMuted,\n      shouldShowPreviews: setting === 'showPreviews' ? e.target.checked : currentShouldShowPreviews,\n    });\n  }, [notifyDefaults]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'mute');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NotificationsWeb')}\n        </h4>\n        <Checkbox\n          label={lang('NotificationsWeb')}\n          subLabel={lang(hasWebNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label={lang('NotificationsOffline')}\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          subLabel={areOfflineNotificationsSupported\n            ? lang(hasPushNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')\n            : lang('SettingsOfflineNotificationUnsupported')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label={lang('NotificationsSound')}\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          subLabel={lang(notifyDefaults?.users?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.users?.mutedUntil)}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.users?.mutedUntil}\n          subLabel={lang(notifyDefaults?.users?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.users?.shouldShowPreviews)}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(notifyDefaults?.groups?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.groups?.mutedUntil)}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.groups?.mutedUntil}\n          subLabel={lang(notifyDefaults?.groups?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.groups?.shouldShowPreviews)}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          subLabel={lang(notifyDefaults?.channels?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.channels?.mutedUntil)}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.channels?.mutedUntil}\n          subLabel={lang(notifyDefaults?.channels?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.channels?.shouldShowPreviews)}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { IS_BACKDROP_BLUR_SUPPORTED, IS_SNAP_EFFECT_SUPPORTED } from '../../../util/browser/windowEnvironment';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype PerformanceSection = [RegularLangKey, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: RegularLangKey;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderMedium',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderCustom',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['SettingsPerformanceInterfaceAnimations', [\n    { key: 'pageTransitions', label: 'SettingsPerformancePageTransitions' },\n    { key: 'messageSendingAnimations', label: 'SettingsPerformanceSending' },\n    { key: 'mediaViewerAnimations', label: 'SettingsPerformanceMediaViewer' },\n    { key: 'messageComposerAnimations', label: 'SettingsPerformanceComposer' },\n    { key: 'contextMenuAnimations', label: 'SettingsPerformanceContextAnimation' },\n    { key: 'contextMenuBlur', label: 'SettingsPerformanceContextBlur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'SettingsPerformanceRightColumn' },\n    { key: 'snapEffect', label: 'SettingsPerformanceThanos' },\n  ]],\n  ['SettingsPerformanceStickers', [\n    { key: 'animatedEmoji', label: 'SettingsPerformanceAnimatedEmoji' },\n    { key: 'loopAnimatedStickers', label: 'SettingsPerformanceLoopStickers' },\n    { key: 'reactionEffects', label: 'SettingsPerformanceReactionEffects' },\n    { key: 'stickerEffects', label: 'SettingsPerformanceStickerEffects' },\n  ]],\n  ['SettingsPerformanceMediaAutoplay', [\n    { key: 'autoplayGifs', label: 'SettingsPerformanceAutoplayGif' },\n    { key: 'autoplayVideos', label: 'SettingsPerformanceAutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSharedSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MID)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n\n  const animationLevelOptions = useMemo(() => {\n    const options = animationLevelState === ANIMATION_LEVEL_CUSTOM\n      ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n      : ANIMATION_LEVEL_OPTIONS;\n\n    return options.map((option) => lang(option));\n  }, [animationLevelState, lang]);\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MID : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performance);\n  }, []);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderTitle')}\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderSubtitle')}\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">Resource-Intensive Processes</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => {\n                    if (key === 'snapEffect' && !IS_SNAP_EFFECT_SUPPORTED) return undefined;\n                    return (\n                      <Checkbox\n                        key={key}\n                        name={key}\n                        checked={performanceSettings[key]}\n                        label={lang(label)}\n                        disabled={disabled}\n                        onChange={handlePropertyChange}\n                      />\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport {\n  selectCanSetPasscode, selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages: boolean;\n  canDisplayChatInTitle?: boolean;\n  isCurrentUserFrozen?: boolean;\n  privacy: GlobalState['settings']['privacy'];\n  accountDaysTtl?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  canDisplayChatInTitle,\n  canSetPasscode,\n  privacy,\n  onReset,\n  isCurrentUserFrozen,\n  accountDaysTtl,\n}) => {\n  const {\n    openDeleteAccountModal,\n    loadPrivacySettings,\n    loadBlockedUsers,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    setSharedSettingOption,\n    openSettingsScreen,\n    loadAccountDaysTtl,\n  } = getActions();\n\n  useEffect(() => {\n    if (!isCurrentUserFrozen) {\n      loadBlockedUsers();\n      loadPrivacySettings();\n      loadContentSettings();\n      loadWebAuthorizations();\n    }\n  }, [isCurrentUserFrozen]);\n\n  useEffect(() => {\n    if (isActive && !isCurrentUserFrozen) {\n      loadGlobalPrivacySettings();\n      loadAccountDaysTtl();\n    }\n  }, [isActive, isCurrentUserFrozen, loadGlobalPrivacySettings]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSharedSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings({ isSensitiveEnabled: isChecked });\n  }, [updateContentSettings]);\n\n  const handleOpenDeleteAccountModal = useLastCallback(() => {\n    if (!accountDaysTtl) return;\n    openDeleteAccountModal({ days: accountDaysTtl });\n  });\n\n  const dayOption = useMemo(() => {\n    if (!accountDaysTtl) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, accountDaysTtl / DAYS_PER_MONTH).toString();\n  }, [accountDaysTtl]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    if (!setting) return oldLang('Loading');\n\n    const { visibility, shouldAllowPremium, botsPrivacy } = setting;\n\n    const isAllowBots = botsPrivacy === 'allow';\n    const isVisibilityEverybody = visibility === 'everybody';\n    const shouldShowBotsString = isAllowBots && !isVisibilityEverybody;\n\n    const blockCount = setting.blockChatIds.length + setting.blockUserIds.length;\n    const allowCount = setting.allowChatIds.length + setting.allowUserIds.length;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount && !isVisibilityEverybody) total.push(`+${allowCount}`);\n\n    const botPrivacyString = shouldShowBotsString ? lang('PrivacyValueBots') : '';\n    const totalString = lang.conjunction(total);\n\n    const exceptionString = [botPrivacyString, totalString].filter(Boolean).join(' ');\n    if (shouldShowBotsString && !isVisibilityEverybody) return exceptionString;\n\n    if (shouldAllowPremium) {\n      return oldLang(exceptionString ? 'ContactsAndPremium' : 'PrivacyPremium');\n    }\n\n    switch (visibility) {\n      case 'everybody':\n        return `${oldLang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${oldLang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${oldLang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBlockedUsers })}\n        >\n          {oldLang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n\n            onClick={() => openSettingsScreen({\n              screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            })}\n          >\n            <div className=\"multiline-item\">\n              <span className=\"title\">{oldLang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {oldLang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({\n            screen: hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {oldLang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveWebsites })}\n          >\n            {oldLang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{oldLang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.lastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.profilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBio })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBio')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.bio)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBirthday')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.birthday)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGifts })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{lang('PrivacyGifts')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.gifts)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.forwards)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          allowDisabledClick\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.voiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {shouldChargeForMessages ? lang('PrivacyPaidMessagesValue')\n                : shouldNewNonContactPeersRequirePremium\n                  ? oldLang('PrivacyMessagesContactsAndPremium')\n                  : oldLang('P2PEverybody')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.chatInvite)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={oldLang('lng_settings_sensitive_disable_filtering')}\n            subLabel={oldLang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={handleUpdateContentSettings}\n          />\n        </div>\n      )}\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={oldLang('ArchiveAndMute')}\n            subLabel={oldLang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={oldLang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('DeleteMyAccount')}\n        </h4>\n        <ListItem\n          narrow\n          onClick={handleOpenDeleteAccountModal}\n        >\n          {lang('DeleteAccountIfAwayFor')}\n          <span className=\"settings-item__current-value\">\n            {lang('Months', { count: dayOption }, { pluralValue: 1 })}\n          </span>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          shouldNewNonContactPeersRequirePremium, nonContactPeersPaidStars,\n        },\n        privacy,\n        accountDaysTtl,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    const { canDisplayChatInTitle } = selectSharedSettings(global);\n    const shouldChargeForMessages = Boolean(nonContactPeersPaidStars);\n    const isCurrentUserFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      shouldNewNonContactPeersRequirePremium,\n      shouldChargeForMessages,\n      privacy,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n      isCurrentUserFrozen,\n      accountDaysTtl,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockUser,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterPeersByQuery({ ids: availableContactIds, query: search, type: 'user' })\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    blockUser({ userId });\n    onClose();\n  }, [onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockUser } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((userId: string) => {\n    unblockUser({ userId });\n  }, [unblockUser]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, userId) => {\n      const isPrivate = isUserId(userId);\n      const user = isPrivate ? usersByIds[userId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[userId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = usersByIds[contactId];\n    const chat = chatsByIds[contactId];\n    const peer = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          peer={peer}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {peer && <FullNameTitle peer={peer} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (\n            <div className=\"contact-username\" dir=\"auto\">\n              @\n              {userMainUsername}\n            </div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container settings-item\">\n              {blockedIds.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        className=\"block-user-button\"\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <Icon name=\"add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { ApiPrivacyKey } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyBio:\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return 'bio';\n    case SettingsScreens.PrivacyBirthday:\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return 'birthday';\n    case SettingsScreens.PrivacyGifts:\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return 'gifts';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n    case SettingsScreens.PrivacyAddByPhone:\n      return 'addByPhone';\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return 'noPaidMessages';\n  }\n\n  return undefined;\n}\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiDisallowedGiftsSettings } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\n\ntype StateProps = {\n  disallowedGifts?: ApiDisallowedGiftsSettings;\n  isCurrentUserPremium: boolean;\n};\n\nconst SettingsAcceptedGift = ({\n  disallowedGifts, isCurrentUserPremium,\n}: StateProps) => {\n  const { showNotification, updateGlobalPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const handleOpenTelegramPremiumModal = useLastCallback(() => {\n    showNotification({\n      message: lang('PrivacySubscribeToTelegramPremium'),\n      action: {\n        action: 'openPremiumModal',\n        payload: {},\n      },\n      actionText: { key: 'Open' },\n      icon: 'star',\n    });\n  });\n\n  const handleLimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowLimitedStarGifts: !disallowedGifts?.shouldDisallowLimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUnlimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUnlimitedStarGifts: !disallowedGifts?.shouldDisallowUnlimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUniqueChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUniqueStarGifts: !disallowedGifts?.shouldDisallowUniqueStarGifts || undefined,\n      },\n    });\n  });\n\n  const handlePremiumSubscriptionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowPremiumGifts: !disallowedGifts?.shouldDisallowPremiumGifts || undefined,\n      },\n    });\n  });\n\n  return (\n    <div className=\"settings-item\">\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftTitle')}\n      </h4>\n      <ListItem onClick={handleLimitedEditionChange}>\n        <span>{lang('PrivacyGiftLimitedEdition')}</span>\n        <Switcher\n          id=\"limited_edition\"\n          label={disallowedGifts?.shouldDisallowLimitedStarGifts ? lang('PrivacyDisableLimitedEditionStarGifts')\n            : lang('PrivacyEnableLimitedEditionStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowLimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUnlimitedEditionChange}>\n        <span>{lang('PrivacyGiftUnlimited')}</span>\n        <Switcher\n          id=\"unlimited\"\n          label={disallowedGifts?.shouldDisallowUnlimitedStarGifts ? lang('PrivacyDisableUnlimitedStarGifts')\n            : lang('PrivacyEnableUnlimitedStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUnlimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUniqueChange}>\n        <span>{lang('PrivacyGiftUnique')}</span>\n        <Switcher\n          id=\"unique\"\n          label={disallowedGifts?.shouldDisallowUniqueStarGifts ? lang('PrivacyDisableUniqueStarGifts')\n            : lang('PrivacyEnableUniqueStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUniqueStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handlePremiumSubscriptionChange}>\n        <span>{lang('PrivacyGiftPremiumSubscription')}</span>\n        <Switcher\n          id=\"premium_subscription\"\n          label={disallowedGifts?.shouldDisallowPremiumGifts ? lang('PrivacyDisablePremiumGifts')\n            : lang('PrivacyEnablePremiumGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowPremiumGifts}\n        />\n      </ListItem>\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          disallowedGifts,\n        },\n      },\n    } = global;\n\n    return {\n      disallowedGifts,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsAcceptedGift));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { PrivacyVisibility } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium, selectShouldHideReadMarks } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  visibility?: PrivacyVisibility;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n  shouldHideReadMarks: boolean;\n};\n\nconst SettingsPrivacyLastSeen = ({\n  isCurrentUserPremium, shouldHideReadMarks, visibility,\n}: OwnProps & StateProps) => {\n  const { updateGlobalPrivacySettings, openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const canShowHideReadTime = visibility === 'nobody' || visibility === 'contacts';\n\n  const handleChangeShouldHideReadMarks = useLastCallback(\n    (isEnabled) => updateGlobalPrivacySettings({ shouldHideReadMarks: isEnabled }),\n  );\n\n  const handleOpenPremiumModal = useLastCallback(() => {\n    openPremiumModal({\n      initialSection: 'last_seen',\n    });\n  });\n\n  return (\n    <>\n      {canShowHideReadTime && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('HideReadTime')}\n            checked={shouldHideReadMarks}\n            onCheck={handleChangeShouldHideReadMarks}\n          />\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('HideReadTimeInfo'), ['br'])}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n          onClick={handleOpenPremiumModal}\n        >\n          {isCurrentUserPremium ? lang('PrivacyLastSeenPremiumForPremium') : lang('PrivacyLastSeenPremium')}\n        </ListItem>\n        <p\n          className=\"settings-item-description-larger premium-info\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          {isCurrentUserPremium\n            ? lang('PrivacyLastSeenPremiumInfoForPremium')\n            : lang('PrivacyLastSeenPremiumInfo')}\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldHideReadMarks: Boolean(selectShouldHideReadMarks(global)),\n    };\n  },\n)(SettingsPrivacyLastSeen));\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"Qvhl9Jjv\",\"fallbackPhoto\":\"Qvhl9Jjv\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPhoto } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  const inputRef = useRef<HTMLInputElement>();\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUserId });\n    }\n  }, [hasCurrentUserFullInfo, currentUserId, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        narrow\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          narrow\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiPrivacySettings, BotsPrivacyType } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../../global/selectors';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Switcher from '../../ui/Switcher';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\nimport SettingsAcceptedGift from './SettingsAcceptedGift';\nimport SettingsPrivacyLastSeen from './SettingsPrivacyLastSeen';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n  primaryPrivacy?: ApiPrivacySettings;\n  secondaryPrivacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n  shouldDisplayGiftsButton?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  primaryPrivacy,\n  secondaryPrivacy,\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n  isPremiumRequired,\n  onReset,\n  shouldDisplayGiftsButton,\n  isCurrentUserPremium,\n}) => {\n  const { updateGlobalPrivacySettings, showNotification } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleShowGiftIconInChats = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      showNotification({\n        message: lang('PrivacySubscribeToTelegramPremium'),\n        action: {\n          action: 'openPremiumModal',\n          payload: {},\n        },\n        actionText: { key: 'Open' },\n        icon: 'star',\n      });\n      return;\n    }\n    updateGlobalPrivacySettings({\n      shouldDisplayGiftsButton: !shouldDisplayGiftsButton,\n    });\n  });\n\n  const secondaryScreen = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneP2P;\n      case SettingsScreens.PrivacyPhoneNumber: {\n        return primaryPrivacy?.visibility === 'nobody' ? SettingsScreens.PrivacyAddByPhone : undefined;\n      }\n      default:\n        return undefined;\n    }\n  }, [primaryPrivacy, screen]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {screen === SettingsScreens.PrivacyGifts && (\n        <div className=\"settings-item\">\n          <ListItem onClick={handleShowGiftIconInChats}>\n            <span>{lang('PrivacyDisplayGiftsButton')}</span>\n            <Switcher\n              id=\"gift\"\n              disabled={!isCurrentUserPremium}\n              label={shouldDisplayGiftsButton ? lang('HideGiftsButton') : lang('DisplayGiftsButton')}\n              checked={shouldDisplayGiftsButton}\n            />\n          </ListItem>\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('PrivacyDisplayGiftIconInChats', {\n              icon: <Icon name=\"gift\" className=\"gift-icon\" />,\n              gift: lang('PrivacyDisplayGift'),\n            }, {\n              withNodes: true,\n            })}\n          </p>\n        </div>\n      )}\n      <PrivacySubsection\n        screen={screen}\n        privacy={primaryPrivacy}\n        isPremiumRequired={isPremiumRequired}\n      />\n      {screen === SettingsScreens.PrivacyProfilePhoto && primaryPrivacy?.visibility !== 'everybody' && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUserId={currentUserId}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n      {screen === SettingsScreens.PrivacyLastSeen && (\n        <SettingsPrivacyLastSeen visibility={primaryPrivacy?.visibility} />\n      )}\n      {screen === SettingsScreens.PrivacyGifts && (\n        <SettingsAcceptedGift />\n      )}\n      {Boolean(secondaryScreen) && (\n        <PrivacySubsection\n          screen={secondaryScreen}\n          privacy={secondaryPrivacy}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction PrivacySubsection({\n  screen,\n  privacy,\n  isPremiumRequired,\n}: {\n  screen: SettingsScreens;\n  privacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n}) {\n  const { setPrivacyVisibility, openSettingsScreen } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    const hasNobody = screen !== SettingsScreens.PrivacyAddByPhone;\n    const options = [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PContacts')} />\n        ) : (\n          oldLang('P2PContacts')\n        ),\n        hidden: isPremiumRequired,\n      },\n    ];\n\n    if (hasNobody) {\n      options.push({\n        value: 'nobody',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PNobody')} />\n        ) : (\n          oldLang('P2PNobody')\n        ),\n        hidden: isPremiumRequired,\n      });\n    }\n    return options;\n  }, [oldLang, screen, isPremiumRequired]);\n\n  const primaryExceptionLists = useMemo(() => {\n    if (screen === SettingsScreens.PrivacyAddByPhone) {\n      return {\n        shouldShowDenied: false,\n        shouldShowAllowed: false,\n      };\n    }\n\n    return {\n      shouldShowDenied: privacy?.visibility !== 'nobody',\n      shouldShowAllowed: privacy?.visibility !== 'everybody',\n    };\n  }, [privacy, screen]);\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsInfo');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('CustomHelp');\n      case SettingsScreens.PrivacyAddByPhone: {\n        return privacy?.visibility === 'everybody' ? oldLang('PrivacyPhoneInfo') : oldLang('PrivacyPhoneInfo3');\n      }\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesInfo');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen, privacy]);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return oldLang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyAddByPhone:\n        return oldLang('PrivacyPhoneTitle2');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return oldLang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyBio:\n        return oldLang('PrivacyBioTitle');\n      case SettingsScreens.PrivacyBirthday:\n        return oldLang('PrivacyBirthdayTitle');\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return oldLang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return oldLang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return oldLang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return oldLang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen]);\n\n  const prepareSubtitle = useLastCallback(\n    (userIds?: string[], chatIds?: string[], shouldAllowPremium?: boolean, botsPrivacy?: BotsPrivacyType) => {\n      const userIdsCount = userIds?.length || 0;\n      const chatIdsCount = chatIds?.length || 0;\n      const isAllowBots = botsPrivacy === 'allow';\n      const hasPeers = userIdsCount || chatIdsCount;\n\n      if (!hasPeers && !isAllowBots) {\n        return shouldAllowPremium ? oldLang('PrivacyPremium') : oldLang('EditAdminAddUsers');\n      } else if (shouldAllowPremium) {\n        return oldLang('ContactsAndPremium');\n      }\n\n      const userCountString = userIdsCount > 0 ? oldLang('Users', userIdsCount) : undefined;\n      const chatCountString = chatIdsCount > 0 ? oldLang('Chats', chatIdsCount) : undefined;\n\n      const botPrivacyString = isAllowBots ? lang('PrivacyValueBots') : '';\n      const peersString = lang.conjunction([userCountString, chatCountString].filter(Boolean));\n\n      return [botPrivacyString, peersString].filter(Boolean).join(' ');\n    },\n  );\n\n  const allowedString = useMemo(() => {\n    return prepareSubtitle(\n      privacy?.allowUserIds,\n      privacy?.allowChatIds,\n      privacy?.shouldAllowPremium,\n      privacy?.botsPrivacy,\n    );\n  }, [privacy]);\n\n  const blockString = useMemo(() => {\n    return prepareSubtitle(privacy?.blockUserIds, privacy?.blockChatIds);\n  }, [privacy]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioAllowedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayAllowedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioDeniedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayDeniedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={privacy?.visibility}\n        />\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n      {!isPremiumRequired && (primaryExceptionLists.shouldShowAllowed || primaryExceptionLists.shouldShowDenied) && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('PrivacyExceptions')}\n          </h4>\n          {primaryExceptionLists.shouldShowAllowed && (\n            <ListItem\n              narrow\n              icon=\"add-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: allowedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('AlwaysAllow')}</span>\n                <span className=\"subtitle\">{allowedString}</span>\n              </div>\n            </ListItem>\n          )}\n          {primaryExceptionLists.shouldShowDenied && (\n            <ListItem\n              narrow\n              icon=\"delete-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: deniedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('NeverAllow')}</span>\n                <span className=\"subtitle\">{blockString}</span>\n              </div>\n            </ListItem>\n          )}\n        </div>\n      )}\n      {isPremiumRequired && <PremiumStatusItem />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let primaryPrivacy: ApiPrivacySettings | undefined;\n    let secondaryPrivacy: ApiPrivacySettings | undefined;\n\n    const {\n      currentUserId,\n      settings: {\n        privacy,\n        byKey: {\n          shouldDisplayGiftsButton,\n        },\n      },\n    } = global;\n\n    const currentUserFullInfo = selectUserFullInfo(global, currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        primaryPrivacy = privacy.phoneNumber;\n        secondaryPrivacy = privacy.addByPhone;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        primaryPrivacy = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        primaryPrivacy = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyBio:\n        primaryPrivacy = privacy.bio;\n        break;\n\n      case SettingsScreens.PrivacyBirthday:\n        primaryPrivacy = privacy.birthday;\n        break;\n\n      case SettingsScreens.PrivacyGifts:\n        primaryPrivacy = privacy.gifts;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyPhoneCall:\n        primaryPrivacy = privacy.phoneCall;\n        secondaryPrivacy = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        primaryPrivacy = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        primaryPrivacy = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        primaryPrivacy = privacy.chatInvite;\n        break;\n    }\n\n    if (!primaryPrivacy) {\n      return {\n        currentUserId: currentUserId!,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      };\n    }\n\n    return {\n      primaryPrivacy,\n      secondaryPrivacy,\n      currentUserId: currentUserId!,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      isPremiumRequired: screen === SettingsScreens.PrivacyVoiceMessages && !selectIsCurrentUserPremium(global),\n      shouldDisplayGiftsButton,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { CustomPeerType, UniqueCustomPeer } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  isChatChannel, isDeletedUser,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { CUSTOM_PEER_PREMIUM } from '../../../util/objects/customPeer';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  withPremiumCategory?: boolean;\n  withMiniAppsCategory?: boolean;\n  usersOnly?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst PREMIUM_CATEGORY = [CUSTOM_PEER_PREMIUM];\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  withPremiumCategory,\n  withMiniAppsCategory,\n  screen,\n  isActive,\n  currentUserId,\n  settings,\n  usersOnly = false,\n  onReset,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const customPeerBots: UniqueCustomPeer = useMemo(() => {\n    return {\n      isCustomPeer: true,\n      type: 'bots',\n      title: lang('PrivacyValueBots'),\n      avatarIcon: 'bots',\n      isAvatarSquare: true,\n      peerColorId: 6,\n    };\n  }, [lang]);\n\n  const miniAppsCategory = useMemo(() => {\n    return [customPeerBots];\n  }, [customPeerBots]);\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const selectedCategoryTypes = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n    if (settings.shouldAllowPremium) {\n      return [CUSTOM_PEER_PREMIUM.type];\n    }\n    if (settings.botsPrivacy === 'allow' && isAllowList) {\n      return [customPeerBots.type];\n    }\n    return [];\n  }, [settings, isAllowList, customPeerBots]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n  const [newSelectedCategoryTypes, setNewSelectedCategoryTypes] = useState<CustomPeerType[]>(selectedCategoryTypes);\n\n  // Reset selected contact ids on change from other client when screen is not active\n  useEffect(() => {\n    if (!isActive) {\n      setNewSelectedContactIds(selectedContactIds);\n      setNewSelectedCategoryTypes(selectedCategoryTypes);\n    }\n  }, [isActive, selectedCategoryTypes, selectedContactIds]);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n        const user = usersById[chatId];\n        const isDeleted = user && isDeletedUser(user);\n        const isChannel = chat && isChatChannel(chat);\n        return (!usersOnly || user)\n          && chatId !== currentUserId\n          && chatId !== SERVICE_NOTIFICATIONS_USER_ID\n          && !isChannel && !isDeleted;\n      });\n\n    const filteredChats = filterPeersByQuery({ ids: chatIds, query: searchQuery });\n\n    // Show only relevant items\n    if (searchQuery) return filteredChats;\n\n    return unique([\n      ...selectedContactIds,\n      ...chatIds,\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, searchQuery, currentUserId, usersOnly]);\n\n  const handleSelectedCategoriesChange = useCallback((value: CustomPeerType[]) => {\n    setNewSelectedCategoryTypes(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      updatedIds: newSelectedContactIds,\n      isPremiumAllowed: newSelectedCategoryTypes.includes(CUSTOM_PEER_PREMIUM.type) || undefined,\n      botsPrivacy: (!withMiniAppsCategory) ? 'none'\n        : (newSelectedCategoryTypes.includes(customPeerBots.type) ? 'allow' : 'disallow'),\n    });\n\n    onReset();\n  }, [\n    isAllowList,\n    withMiniAppsCategory,\n    newSelectedCategoryTypes,\n    newSelectedContactIds,\n    onReset,\n    screen,\n    customPeerBots,\n  ]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function getCustomCategory() {\n    if (withPremiumCategory) return PREMIUM_CATEGORY;\n    if (withMiniAppsCategory && isAllowList) return miniAppsCategory;\n    return undefined;\n  }\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <PeerPicker\n        categories={getCustomCategory()}\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        selectedCategories={newSelectedCategoryTypes}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? oldLang('AlwaysAllowPlaceholder') : oldLang('NeverAllowPlaceholder')}\n        categoryPlaceholderKey=\"PrivacyUserTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onSelectedCategoriesChange={handleSelectedCategoriesChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        itemInputType=\"checkbox\"\n        withDefaultPadding\n        withStatus\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? oldLang('AlwaysAllow') : oldLang('NeverAllow')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return privacy.bio;\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return privacy.birthday;\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return privacy.gifts;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return privacy.noPaidMessages;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { type: 'emoji', emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n        withIcon\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { config, reactions } = global;\n\n    return {\n      availableReactions: reactions.availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<AccountSettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n    openSettingsScreen,\n  } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.CustomEmoji })}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.QuickReaction })}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.reactions.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.Privacy });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji, selectTabState } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n  recoveryEmail: string;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n  recoveryEmail,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {recoveryEmail && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('TwoStepAuth.ConfirmEmailDescription', recoveryEmail)}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  const tabState = selectTabState(global);\n  const recoveryEmail = tabState.recoveryEmail;\n\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n    recoveryEmail,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent })}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaTurnOff })}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword })}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useFlag from '../../../../hooks/useFlag';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Button from '../../../ui/Button';\nimport InputText from '../../../ui/InputText';\nimport Modal from '../../../ui/Modal';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {type === 'email' && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('RecoveryEmailSubtitle')}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  errorKey,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmailCode });\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCode });\n      }\n    }\n  }, [currentScreen, waitingEmailCodeLength, openSettingsScreen]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.Privacy });\n      },\n    });\n  }, [clearPassword, openSettingsScreen]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updateRecoveryEmail, openSettingsScreen]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          placeholder={oldLang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={oldLang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { LAYERS_ANIMATION_NAME } from '../../../util/browser/windowEnvironment';\n\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMarkScrolled from '../../../hooks/useMarkScrolled/useMarkScrolled';\n\nimport Transition from '../../ui/Transition';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport PrivacyMessages from './PrivacyMessages';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsMain from './SettingsMain';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPerformance from './SettingsPerformance';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_BIO_SCREENS = [\n  SettingsScreens.PrivacyBioAllowedContacts,\n  SettingsScreens.PrivacyBioDeniedContacts,\n];\n\nconst PRIVACY_BIRTHDAY_SCREENS = [\n  SettingsScreens.PrivacyBirthdayAllowedContacts,\n  SettingsScreens.PrivacyBirthdayDeniedContacts,\n];\n\nconst PRIVACY_GIFTS_SCREENS = [\n  SettingsScreens.PrivacyGiftsAllowedContacts,\n  SettingsScreens.PrivacyGiftsDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nconst PRIVACY_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyNoPaidMessages,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal, openSettingsScreen } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  useMarkScrolled({\n    containerRef,\n    selector: '.settings-content',\n  }, [currentScreen]);\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  });\n\n  function renderCurrentSectionContent(isScreenActive: boolean, activeScreen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBio]: PRIVACY_BIO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBirthday]: PRIVACY_BIRTHDAY_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGifts]: PRIVACY_GIFTS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyMessages]: PRIVACY_MESSAGES_SCREENS.includes(activeScreen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(activeScreen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(activeScreen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(activeScreen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(activeScreen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).map(Number).includes(activeScreen)\n      || Object.values(privacyAllowScreens).includes(true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            isActive={isScreenActive\n              || activeScreen === SettingsScreens.GeneralChatBackgroundColor\n              || activeScreen === SettingsScreens.GeneralChatBackground\n              || activeScreen === SettingsScreens.QuickReaction\n              || activeScreen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || activeScreen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            isActive={isScreenActive || activeScreen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyBio:\n      case SettingsScreens.PrivacyBirthday:\n      case SettingsScreens.PrivacyGifts:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            usersOnly={currentScreen === SettingsScreens.PrivacyNoPaidMessages}\n            withPremiumCategory={currentScreen === SettingsScreens.PrivacyGroupChatsAllowedContacts}\n            withMiniAppsCategory={currentScreen === SettingsScreens.PrivacyGiftsAllowedContacts}\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyMessages:\n        return (\n          <PrivacyMessages\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={activeScreen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(\n    isScreenActive: boolean,\n    _isFrom: boolean,\n    _currentKey: SettingsScreens,\n    activeKey: SettingsScreens,\n  ) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, activeKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      ref={containerRef}\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n      withSwipeControl\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { sortUserIds } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterPeersByQuery({ ids: contactIds, query: filter, type: 'user' });\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable contact-list-item\"\n            onClick={() => handleClick(id)}\n          >\n            <PrivateChatInfo\n              userId={id}\n              forceShowSelf\n              avatarSize=\"large\"\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.ChatList}\n              ripple={!isMobile}\n            />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <Icon name=\"add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { isUserBot } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localPeerIds?: string[];\n  globalPeerIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localPeerIds,\n  globalPeerIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds\n      ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localPeerIds || []),\n        ...(globalPeerIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        return user && !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, searchQuery, localPeerIds, globalPeerIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n          withDefaultPadding\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <Icon name=\"arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: localPeerIds } = localResults || {};\n\n    return {\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalPeerIds,\n      localPeerIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst MAX_MEMBERS_FOR_GENERATE_CHAT_NAME = 4;\n\nconst NewChatStep2: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  useEffect(() => {\n    if (isChannel) {\n      return;\n    }\n    if (!memberIds.length || memberIds.length > MAX_MEMBERS_FOR_GENERATE_CHAT_NAME) {\n      setTitle('');\n      return;\n    }\n    const global = getGlobal();\n    const usersById = global.users.byId;\n    const memberFirstNames = [global.currentUserId!, ...memberIds]\n      .map((userId) => getUserFirstOrLastName(usersById[userId]))\n      .filter(Boolean);\n    const generatedChatName = memberFirstNames.slice(0, -1).join(', ')\n      + lang('CreateGroup.PeersTitleLastDelimeter')\n      + memberFirstNames[memberFirstNames.length - 1];\n    setTitle(generatedChatName);\n  }, [isChannel, memberIds, lang]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n      isChannel: true,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/browser/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onReset,\n}) => {\n  const { openLeftColumnContent, setGlobalSearchQuery } = getActions();\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    openLeftColumnContent({\n      contentKey: isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2,\n    });\n  }, [isChannel]);\n\n  const changeSelectedMemberIdsHandler = useLastCallback((ids: string[]) => {\n    const isSelection = ids.length > newChatMemberIds.length;\n\n    setNewChatMemberIds(ids);\n    if (isSelection) {\n      setGlobalSearchQuery({ query: '' });\n    }\n  });\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={changeSelectedMemberIdsHandler}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { ANIMATION_DURATION } from '../story/helpers/ribbonAnimation';\n\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../common/icons/Icon';\nimport StoryRibbon from '../story/StoryRibbon';\nimport StoryToggler from '../story/StoryToggler';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  foldersDispatch: FolderEditDispatch;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  isStoryRibbonShown,\n  onReset,\n  onTopicSearch,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useLastCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransitionDeprecated(!isForumPanelOpen, undefined, undefined, false);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransitionDeprecated(\n    isStoryRibbonShown, undefined, undefined, '', false, ANIMATION_DURATION + ANIMATION_END_DELAY,\n  );\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className={buildClassName('left-header', !shouldRenderStoryRibbon && 'left-header-shadow')}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        <div className=\"story-toggler-wrapper\">\n          <StoryToggler canShow isArchived />\n        </div>\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'chat-list-wrapper',\n          shouldRenderStoryRibbon && 'with-story-ribbon',\n          storyRibbonClassNames,\n        )}\n      >\n        {shouldRenderStoryRibbon && (\n          <StoryRibbon isArchived className=\"left-header-shadow\" isClosing={isStoryRibbonClosing} />\n        )}\n        <ChatList\n          folderType=\"archived\"\n          isActive={isActive}\n          isForumPanelOpen={isForumPanelVisible}\n          isMainList\n          foldersDispatch={foldersDispatch}\n          archiveSettings={archiveSettings}\n        />\n      </div>\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatFolderModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useOldLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID)\n      .map((folderId) => {\n        const folder = foldersById ? foldersById[folderId] : undefined;\n        const label = folder ? renderTextWithEntities({\n          text: folder.title.text,\n          entities: folder.title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }) : '';\n        return {\n          label,\n          value: String(folderId),\n        };\n      }) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className={buildClassName(styles.root, 'delete')}\n      contentClassName={styles.modalContent}\n      title={lang('FilterAddTo')}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <CheckboxGroup\n          options={folders}\n          selected={selectedFolderIds}\n          onChange={setSelectedFolderIds}\n        />\n      </div>\n      <div className={styles.footer}>\n        <div className=\"dialog-buttons\">\n          <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n            {lang('FilterAddTo')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalContent\":\"EG5lPWY1\",\"root\":\"_fJBBCCE\",\"main\":\"heYMHiUt\",\"footer\":\"_jtqAaUU\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MAX_INT_32 } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useOldLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let mutedUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      mutedUntil = MAX_INT_32;\n    } else {\n      mutedUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, mutedUntil });\n    } else {\n      updateChatMutedState({ chatId, mutedUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectPeerPaidMessagesStars,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport renderText from './helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useSchedule from '../../hooks/useSchedule';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport Loading from '../ui/Loading';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePreviousDeprecated(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          messageList: currentMessageList, sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [currentMessageList, shouldSchedule, requestCalendar, onClose, shouldUpdateStickerSetOrder, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const chatBot = chatId && selectBot(global, chatId);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n\n    const sendOptions = chat\n      ? getAllowedAttachmentOptions(chat, chatFullInfo, Boolean(chatBot), isSavedMessages)\n      : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo)\n      && sendOptions?.canSendStickers,\n    );\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n    const paidMessagesStars = chatId ? selectPeerPaidMessagesStars(global, chatId) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: !paidMessagesStars && selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n      currentMessageList,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nZYT4vJ3\",\"sets\":\"JzkmXjFF\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiSticker } from '../../api/types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSetIds,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useOldLang();\n\n  const customEmojiSets = useMemo(() => {\n    return customEmojiSetIds?.map((id) => getGlobal().stickers.setsById[id]);\n  }, [customEmojiSetIds]);\n\n  const customEmojiModalRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePreviousDeprecated(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useLastCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => {\n          return (\n            <StickerSetCard\n              key={customEmojiSet.id}\n              className={styles.setCard}\n              stickerSet={customEmojiSet}\n              onClick={handleSetClick}\n              observeIntersection={observeIntersectionForCovers}\n              noPlay={!canPlayAnimatedEmojis}\n            />\n          );\n        })}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotCommand, ApiChat, ApiDisallowedGifts,\n} from '../../api/types';\nimport type { IAnchorPosition, ThreadId } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  getIsSavedDialog,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getIsChatMuted } from '../../global/helpers/notifications';\nimport {\n  selectBot,\n  selectCanGift,\n  selectCanManage,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsRightColumnShown,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectTopic,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { disableScrolling } from '../../util/scrollLock';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport Portal from '../ui/Portal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: IconName; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canViewBoosts?: boolean;\n  canViewMonetization?: boolean;\n  canShowBoostModal?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  canTranslate?: boolean;\n  channelMonoforumId?: string;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  botPrivacyPolicyUrl?: string;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  isForumAsMessages?: true;\n  canAddContact?: boolean;\n  canDeleteChat?: boolean;\n  canReportChat?: boolean;\n  canGift?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n  isRightColumnShown?: boolean;\n  canManage?: boolean;\n  canTranslate?: boolean;\n  isBlocked?: boolean;\n  isBot?: boolean;\n  isChatWithSelf?: boolean;\n  savedDialog?: ApiChat;\n  disallowedGifts?: ApiDisallowedGifts;\n  isAccountFrozen?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  botPrivacyPolicyUrl,\n  withForumActions,\n  isTopic,\n  isForum,\n  isForumAsMessages,\n  isChatInfoShown,\n  canStartBot,\n  canSubscribe,\n  canReportChat,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canViewMonetization,\n  canViewBoosts,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  canGift,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  canManage,\n  isRightColumnShown,\n  canTranslate,\n  isBlocked,\n  isBot,\n  isChatWithSelf,\n  savedDialog,\n  canShowBoostModal,\n  disallowedGifts,\n  isAccountFrozen,\n  channelMonoforumId,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    openFrozenAccountModal,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openMonetizationStatistics,\n    openBoostStatistics,\n    openGiftModal,\n    openThreadWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n    openUrl,\n    toggleManagement,\n    togglePeerTranslations,\n    blockUser,\n    unblockUser,\n    setViewForumAsMessages,\n    openBoostModal,\n    reportMessages,\n    showNotification,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [shouldCloseFast, setShouldCloseFast] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransitionDeprecated(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const areAllGiftsDisallowed = useMemo(() => {\n    if (!disallowedGifts) {\n      return undefined;\n    }\n    return Object.values(disallowedGifts).every(Boolean);\n  }, [disallowedGifts]);\n\n  const closeMuteModal = useLastCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  });\n\n  const handleReport = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      setIsMenuOpen(false);\n      reportMessages({ chatId, messageIds: [] });\n    }\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      onClose();\n    } else {\n      setIsDeleteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleViewGroupInfo = useLastCallback(() => {\n    openThreadWithInfo({ chatId, threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      sendBotCommand({ command: '/start' });\n    }\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      restartBot({ chatId });\n    }\n  });\n\n  const handleUnmuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      updateChatMutedState({ chatId, isMuted: false });\n    }\n    closeMenu();\n  });\n\n  const handleMuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      closeMenu();\n    } else {\n      markRenderMuteModal();\n      setIsMuteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const handleCreateTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openCreateTopicPanel({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      toggleManagement({ force: true });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openEditTopicPanel({ chatId, topicId: Number(threadId) });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleViewAsTopicsClick = useLastCallback(() => {\n    openChat({ id: undefined });\n    setViewForumAsMessages({ chatId, isEnabled: false });\n    closeMenu();\n  });\n\n  const handleEnterVoiceChatClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleLinkedChatClick = useLastCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  });\n\n  const handleGiftClick = useLastCallback(() => {\n    if (areAllGiftsDisallowed && chat) {\n      showNotification({ message: lang('SendDisallowError') });\n      return;\n    }\n    openGiftModal({ forUserId: chatId });\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openGiftModal({ forUserId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleAddContactClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openAddContactDialog({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSubscribe = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      onSubscribeChannel();\n    }\n    closeMenu();\n  });\n\n  const handleVideoCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    }\n    closeMenu();\n  });\n\n  const handleCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSearch = useLastCallback(() => {\n    onSearchClick();\n    closeMenu();\n  });\n\n  const handleStatisticsClick = useLastCallback(() => {\n    toggleStatistics();\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleMonetizationClick = useLastCallback(() => {\n    openMonetizationStatistics({ chatId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleBoostClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canViewBoosts) {\n      openBoostStatistics({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    } else {\n      openBoostModal({ chatId });\n    }\n    closeMenu();\n  });\n\n  const handleEnableTranslations = useLastCallback(() => {\n    togglePeerTranslations({ chatId, isEnabled: true });\n    closeMenu();\n  });\n\n  const handleSelectMessages = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      enterMessageSelectMode();\n    }\n    closeMenu();\n  });\n\n  const handleOpenAsMessages = useLastCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  });\n\n  const handleBlock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      blockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      unblockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSendChannelMessage = useLastCallback(() => {\n    openChat({ id: channelMonoforumId });\n    closeMenu();\n  });\n\n  useEffect(disableScrolling, []);\n\n  const botButtons = useMemo(() => {\n    const commandButtons = botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n\n          onClick={handleClick}\n        >\n          {oldLang(cmd.label)}\n        </MenuItem>\n      );\n    });\n\n    const hasPrivacyCommand = botCommands?.some(({ command }) => command === 'privacy');\n\n    const privacyButton = isBot && (\n      <MenuItem\n        icon=\"privacy-policy\"\n\n        onClick={() => {\n          if (hasPrivacyCommand && !botPrivacyPolicyUrl) {\n            sendBotCommand({ command: '/privacy' });\n          } else {\n            openUrl({ url: botPrivacyPolicyUrl || oldLang('BotDefaultPrivacyPolicy') });\n          }\n          closeMenu();\n        }}\n      >\n        {oldLang('BotPrivacyPolicy')}\n      </MenuItem>\n    );\n\n    return [...commandButtons || [], privacyButton].filter(Boolean);\n  }, [botCommands, oldLang, botPrivacyPolicyUrl, isBot]);\n\n  const deleteTitle = useMemo(() => {\n    if (!chat) return undefined;\n\n    if (savedDialog) {\n      return oldLang('Delete');\n    }\n\n    if (isPrivate) {\n      return oldLang('DeleteChatUser');\n    }\n\n    if (canDeleteChat) {\n      return oldLang('GroupInfo.DeleteAndExit');\n    }\n\n    if (isChannel) {\n      return oldLang('LeaveChannel');\n    }\n\n    return oldLang('Group.LeaveGroup');\n  }, [canDeleteChat, chat, isChannel, isPrivate, savedDialog, oldLang]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n          shouldCloseFast={shouldCloseFast}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {oldLang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {oldLang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {channelMonoforumId && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleSendChannelMessage}\n            >\n              {lang('ChannelSendMessage')}\n            </MenuItem>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? oldLang('lng_context_view_topic') : oldLang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canManage && !canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditClick}\n            >\n              {oldLang('Edit')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {oldLang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {oldLang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && !isForumAsMessages && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {oldLang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {oldLang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {oldLang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canShowBoostModal && !canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang(isChannel ? 'BoostingBoostChannelMenu' : 'BoostingBoostGroupMenu')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {oldLang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {oldLang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {oldLang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {oldLang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {oldLang('ChatsMute')}\n                ...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {oldLang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {oldLang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {oldLang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang('Boosts')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {oldLang('Statistics')}\n            </MenuItem>\n          )}\n          {isChannel && canViewMonetization && (\n            <MenuItem\n              icon=\"cash-circle\"\n              onClick={handleMonetizationClick}\n            >\n              {oldLang('lng_channel_earn_title')}\n            </MenuItem>\n          )}\n          {canTranslate && (\n            <MenuItem\n              icon=\"language\"\n              onClick={handleEnableTranslations}\n            >\n              {oldLang('lng_context_translate')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {oldLang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGift && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftClick}\n            >\n              {oldLang('ProfileSendAGift')}\n            </MenuItem>\n          )}\n          {isBot && (\n            <MenuItem\n              icon={isBlocked ? 'bots' : 'hand-stop'}\n              onClick={isBlocked ? handleRestartBot : handleBlock}\n            >\n              {isBlocked ? oldLang('BotRestart') : oldLang('Bot.Stop')}\n            </MenuItem>\n          )}\n          {isPrivate && !isChatWithSelf && !isBot && (\n            <MenuItem\n              icon={isBlocked ? 'user' : 'hand-stop'}\n              onClick={isBlocked ? handleUnblock : handleBlock}\n            >\n              {isBlocked ? oldLang('Unblock') : oldLang('BlockUser')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {deleteTitle}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={savedDialog || chat}\n            isSavedDialog={Boolean(savedDialog)}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n    const canReportChat = isMainThread && !user && (isChatChannel(chat) || isChatGroup(chat)) && !isChatAdmin(chat);\n\n    const chatBot = !isSystemBot(chatId) ? selectBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const fullInfo = userFullInfo || chatFullInfo;\n    const canGift = selectCanGift(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n    const canManage = selectCanManage(global, chatId);\n    // Context menu item should only be displayed if user hid translation panel\n    const canTranslate = selectCanTranslateChat(global, chatId) && fullInfo?.isTranslationDisabled;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const savedDialog = isSavedDialog ? selectChat(global, String(threadId)) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      chat,\n      isMuted: getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      isForumAsMessages: chat?.isForumAsMessages,\n      canAddContact,\n      canDeleteChat: getCanDeleteChat(chat),\n      canReportChat,\n      canGift,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      botPrivacyPolicyUrl: chatBot ? userFullInfo?.botInfo?.privacyPolicyUrl : undefined,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n      canManage,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      canTranslate,\n      isBlocked: userFullInfo?.isBlocked,\n      isBot: Boolean(chatBot),\n      isChatWithSelf,\n      savedDialog,\n      disallowedGifts: userFullInfo?.disallowedGifts,\n      isAccountFrozen,\n    };\n  },\n)(HeaderMenuContainer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vv5ppXel\",\"active\":\"FVgqrSSK\",\"info\":\"DboxqiZd\",\"topRow\":\"Ymu2m1PR\",\"meta\":\"A2rsvUBm\",\"subtitle\":\"qUzmwaIn\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\n\nimport { getMessageSenderName } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport LastMessageMeta from '../../common/LastMessageMeta';\nimport MessageSummary from '../../common/MessageSummary';\n\nimport styles from './MiddleSearchResult.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  message: ApiMessage;\n  senderPeer?: ApiPeer;\n  messageChat?: ApiChat;\n  shouldShowChat?: boolean;\n  query?: string;\n  className?: string;\n  onClick: (message: ApiMessage) => void;\n};\n\nconst TRUNCATE_LENGTH = 200;\n\nconst MiddleSearchResult = ({\n  isActive,\n  message,\n  senderPeer,\n  messageChat,\n  shouldShowChat,\n  query,\n  className,\n  onClick,\n}: OwnProps) => {\n  const lang = useOldLang();\n  const hiddenForwardTitle = message.forwardInfo?.hiddenUserName;\n\n  const peer = shouldShowChat ? messageChat : senderPeer;\n\n  const senderName = shouldShowChat && senderPeer ? getMessageSenderName(lang, message.chatId, senderPeer) : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(message);\n  });\n\n  return (\n    <div\n      role=\"button\"\n      tabIndex={0}\n      className={buildClassName(styles.root, isActive && styles.active, className)}\n      onClick={handleClick}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={peer}\n        text={hiddenForwardTitle}\n        size=\"medium\"\n      />\n      <div className={styles.info}>\n        <div className={styles.topRow}>\n          {(peer && <FullNameTitle peer={peer} withEmojiStatus />) || hiddenForwardTitle}\n          <LastMessageMeta className={styles.meta} message={message} />\n        </div>\n        <div className={styles.subtitle} dir=\"auto\">\n          {senderName && (\n            <>\n              <span className=\"sender-name\">{renderText(senderName)}</span>\n              <span className=\"colon\">:</span>\n            </>\n          )}\n          <MessageSummary message={message} highlight={query} truncateLength={TRUNCATE_LENGTH} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MiddleSearchResult);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FTMljUuX\",\"header\":\"OvmjSMwA\",\"active\":\"DEIUzXQd\",\"avatar\":\"mp1PmoMq\",\"input\":\"z2K8Q7ib\",\"mobile\":\"u0fb78AA\",\"focused\":\"dqF8dYNx\",\"withDropdown\":\"AqhBggrp\",\"adaptSearchBorders\":\"Q9RZQaTu\",\"dropdown\":\"MFGvbICO\",\"dropdownHidden\":\"Alee0CKy\",\"results\":\"RtfTOE72\",\"placeholder\":\"O1HoZFge\",\"separator\":\"_Yy43QLl\",\"savedTags\":\"BcvAfv1E\",\"wrap\":\"JkESCST6\",\"searchTags\":\"rO3pH3LI\",\"savedSearchTag\":\"qA4gov4D\",\"hash\":\"q5NOmUAM\",\"searchTypes\":\"rVYZG__K\",\"searchType\":\"nE1Xwoo7\",\"selectedType\":\"i29dP8iT\",\"footer\":\"jyS1l9yn\",\"keyboard-visible\":\"ao05jKHW\",\"keyboardVisible\":\"ao05jKHW\",\"counter\":\"NmmL_cO3\",\"mobileNavigation\":\"dLO1hlHU\",\"navigationButton\":\"Z4vLAlsu\",\"navigationDisabled\":\"IqA7R2xO\",\"jumpIn\":\"n9kXbTu6\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiReaction, ApiReactionKey, ApiSavedReactionTag,\n} from '../../../api/types';\nimport type {\n  CustomPeer, MiddleSearchParams, MiddleSearchType, ThreadId,\n} from '../../../types';\n\nimport { ANONYMOUS_USER_ID } from '../../../config';\nimport { requestMeasure, requestMutation, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog, getReactionKey, isSameReaction, isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectMonoforumChannel,\n  selectSender,\n  selectTabState,\n} from '../../../global/selectors';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport { getSearchResultKey, parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { debounce, fastRaf } from '../../../util/schedulers';\n\nimport { useClickOutside } from '../../../hooks/events/useOutsideClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport SavedTagButton from '../message/reactions/SavedTagButton';\nimport MiddleSearchResult from './MiddleSearchResult';\n\nimport styles from './MiddleSearch.module.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  monoforumChat?: ApiChat;\n  threadId?: ThreadId;\n  requestedQuery?: string;\n  savedTags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  savedTag?: ApiReaction;\n  totalCount?: number;\n  lastSearchQuery?: string;\n  foundIds?: SearchResultKey[];\n  isHistoryCalendarOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n  isSavedMessages?: boolean;\n  fetchingQuery?: string;\n  isHashtagQuery?: boolean;\n  searchType?: MiddleSearchType;\n  currentUserId?: string;\n};\n\nconst CHANNELS_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'channel-filled',\n  titleKey: 'SearchPublicPosts',\n};\nconst FOCUSED_SEARCH_TRIGGER_OFFSET = 5;\nconst HIDE_TIMEOUT = 200;\nconst RESULT_ITEM_CLASS_NAME = 'MiddleSearchResult';\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MiddleSearch: FC<StateProps> = ({\n  isActive,\n  chat,\n  monoforumChat,\n  threadId,\n  requestedQuery,\n  savedTags,\n  savedTag,\n  totalCount,\n  lastSearchQuery,\n  foundIds,\n  isHistoryCalendarOpen,\n  isCurrentUserPremium,\n  isSavedMessages,\n  fetchingQuery,\n  isHashtagQuery,\n  searchType = 'chat',\n  currentUserId,\n}) => {\n  const {\n    updateMiddleSearch,\n    resetMiddleSearch,\n    performMiddleSearch,\n    focusMessage,\n    closeMiddleSearch,\n    openHistoryCalendar,\n    openPremiumModal,\n    loadSavedReactionTags,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n  const shouldCancelSearchRef = useRef(false);\n\n  const { isMobile } = useAppLayout();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [query, setQuery] = useState(requestedQuery || '');\n  const [focusedIndex, setFocusedIndex] = useState(0);\n  const canFocusNewer = foundIds && focusedIndex > 0;\n  const canFocusOlder = foundIds && focusedIndex < foundIds.length - 1;\n\n  const [isFullyHidden, setIsFullyHidden] = useState(!isActive);\n  const hiddenTimerRef = useRef<number>();\n  const maybeLongPressActiveRef = useRef(true);\n\n  const [isFocused, markFocused, markBlurred] = useFlag();\n  const [isViewAsList, setIsViewAsList] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    if (maybeLongPressActiveRef.current) return;\n    // Ignore clicks inside modals\n    if ((event.target as HTMLElement).closest('.Modal')) return;\n    markBlurred();\n  });\n  useClickOutside([ref], handleClickOutside);\n\n  const hasResultsContainer = Boolean((query && foundIds) || isHashtagQuery);\n  const isOnlyHash = isHashtagQuery && !query;\n  const areResultsEmpty = Boolean(query && foundIds && !foundIds.length && !isLoading && !isOnlyHash);\n  const hasResultsPlaceholder = areResultsEmpty || isOnlyHash;\n  const isNonFocusedDropdownForced = searchType === 'myChats' || searchType === 'channels';\n  const hasResultsDropdown = isActive && (isViewAsList || !isMobile) && (isFocused || isNonFocusedDropdownForced)\n    && Boolean(\n      hasResultsContainer || hasResultsPlaceholder || savedTags,\n    );\n\n  const hasQueryData = Boolean((query && !isOnlyHash) || savedTag);\n  const hasNavigationButtons = searchType === 'chat' && Boolean(foundIds?.length);\n\n  const handleClose = useLastCallback(() => {\n    closeMiddleSearch();\n  });\n\n  const focusInput = useLastCallback(() => {\n    requestMeasure(() => {\n      inputRef.current?.focus();\n    });\n  });\n\n  const blurInput = useLastCallback(() => {\n    inputRef.current?.blur();\n  });\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Reset focus on query result\n  useEffect(() => {\n    setFocusedIndex(-1);\n  }, [lastSearchQuery]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n      setIsViewAsList(true);\n      setFocusedIndex(0);\n      setQuery('');\n      hiddenTimerRef.current = window.setTimeout(() => setIsFullyHidden(true), HIDE_TIMEOUT);\n    } else {\n      setIsFullyHidden(false);\n      clearTimeout(hiddenTimerRef.current);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (!requestedQuery || !chat?.id) return;\n    setQuery(requestedQuery);\n    updateMiddleSearch({ chatId: chat.id, threadId, update: { requestedQuery: undefined } });\n    setIsLoading(true);\n\n    requestNextMutation(() => {\n      const input = inputRef.current;\n      if (!input) return;\n      focusEditableElement(input, true, true);\n      markFocused();\n    });\n  }, [chat?.id, requestedQuery, threadId]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (isActive !== prevIsActive && !query && lastSearchQuery) {\n      setQuery(lastSearchQuery); // Restore query when returning back\n    }\n  }, [isActive, lastSearchQuery, query]);\n\n  useEffectWithPrevDeps(([prevIsCalendarOpen]) => {\n    if (!isActive || prevIsCalendarOpen === isHistoryCalendarOpen) return;\n    if (isHistoryCalendarOpen) {\n      blurInput();\n      markBlurred();\n    } else {\n      focusInput();\n    }\n  }, [isHistoryCalendarOpen, isActive]);\n\n  const handleReset = useLastCallback(() => {\n    if (!query?.length && !savedTag) {\n      handleClose();\n      return;\n    }\n\n    setQuery('');\n    setIsLoading(false);\n    resetMiddleSearch();\n    focusInput();\n  });\n\n  useEffect(() => (isActive ? captureEscKeyListener(handleReset) : undefined), [isActive, handleClose]);\n\n  const savedTagsArray = useMemo(() => {\n    if (!savedTags) return undefined;\n    return Object.values(savedTags);\n  }, [savedTags]);\n\n  const hasSavedTags = Boolean(savedTagsArray?.length);\n  const areSavedTagsDisabled = hasSavedTags && !isCurrentUserPremium;\n\n  useEffect(() => {\n    if (isSavedMessages && isActive) loadSavedReactionTags();\n  }, [isSavedMessages, isActive]);\n\n  const handleSearch = useLastCallback(() => {\n    const chatId = chat?.id;\n    if (!chatId) {\n      return;\n    }\n\n    runDebouncedForSearch(() => {\n      if (shouldCancelSearchRef.current) return;\n      performMiddleSearch({ chatId, threadId, query });\n    });\n  });\n\n  const handleQueryChange = useLastCallback((newQuery: string) => {\n    shouldCancelSearchRef.current = false;\n\n    if (newQuery.startsWith('#') && !isHashtagQuery) {\n      updateMiddleSearch({ chatId: chat!.id, threadId, update: { isHashtag: true } });\n      setQuery(newQuery.slice(1));\n      handleSearch();\n      return;\n    }\n\n    setQuery(newQuery);\n\n    if (!newQuery) {\n      setIsLoading(false);\n      resetMiddleSearch();\n      shouldCancelSearchRef.current = true;\n    }\n  });\n\n  useEffect(() => {\n    if (query) {\n      handleSearch();\n    }\n  }, [query]);\n\n  useEffect(() => {\n    setIsLoading(Boolean(fetchingQuery));\n  }, [fetchingQuery]);\n\n  useEffect(() => {\n    if (!foundIds?.length) return;\n    const isClose = foundIds.length - focusedIndex < FOCUSED_SEARCH_TRIGGER_OFFSET;\n    if (isClose) {\n      handleSearch();\n    }\n  }, [focusedIndex, foundIds?.length]);\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    maybeLongPressActiveRef.current = true;\n\n    function focus() {\n      inputRef.current?.focus();\n      markFocused();\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    function removeListeners() {\n      window.removeEventListener('touchend', focus);\n      window.removeEventListener('mouseup', focus);\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    window.addEventListener('touchend', focus);\n    window.addEventListener('mouseup', focus);\n\n    window.addEventListener('touchstart', removeListeners);\n    window.addEventListener('mousedown', removeListeners);\n\n    return () => {\n      removeListeners();\n      window.removeEventListener('touchstart', removeListeners);\n      window.removeEventListener('mousedown', removeListeners);\n    };\n  }, [isActive]);\n\n  useHistoryBack({\n    isActive,\n    onBack: handleClose,\n  });\n\n  const [viewportIds, getMore, viewportOffset = 0] = useInfiniteScroll(handleSearch, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if ((!query && !savedTag) || !viewportIds?.length) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n\n    return viewportIds.map((searchResultKey) => {\n      const [chatId, id] = parseSearchResultKey(searchResultKey);\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return undefined;\n      }\n\n      const originalSender = (isSavedMessages || isSystemBot(chatId) || chatId === ANONYMOUS_USER_ID)\n        ? selectForwardedSender(global, message) : undefined;\n      const messageSender = selectSender(global, message);\n      const messageChat = selectChat(global, message.chatId);\n\n      const senderPeer = originalSender || messageSender;\n\n      return {\n        searchResultKey,\n        message,\n        messageChat,\n        senderPeer,\n      };\n    }).filter(Boolean);\n  }, [query, savedTag, viewportIds, isSavedMessages]);\n\n  const handleMessageClick = useLastCallback((message: ApiMessage) => {\n    const searchResultKey = getSearchResultKey(message);\n    const index = foundIds?.indexOf(searchResultKey) || 0;\n    const realIndex = index + viewportOffset;\n    setFocusedIndex(realIndex);\n\n    if (searchType === 'chat') {\n      setIsViewAsList(false);\n    }\n\n    focusMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      threadId: !isHashtagQuery ? threadId : undefined,\n    });\n\n    markBlurred();\n  });\n\n  const handleTriggerViewStyle = useLastCallback(() => {\n    setIsViewAsList((prev) => !prev);\n    markFocused();\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, hasResultsContainer, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      handleMessageClick(foundResult.message);\n      setFocusedIndex(index + viewportOffset);\n    }\n  }, `.${RESULT_ITEM_CLASS_NAME}`, true);\n\n  const updateSearchParams = useLastCallback((update: Partial<MiddleSearchParams>) => {\n    updateMiddleSearch({ chatId: chat!.id, threadId, update });\n\n    handleSearch();\n  });\n\n  const activateSearchTag = useLastCallback((tag: ApiReaction) => {\n    if (areSavedTagsDisabled) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n      return;\n    }\n\n    updateSearchParams({ savedTag: tag });\n  });\n\n  const removeSearchSavedTag = useLastCallback(() => {\n    updateSearchParams({ savedTag: undefined });\n  });\n\n  const handleDeleteTag = useLastCallback(() => {\n    if (isHashtagQuery) {\n      updateSearchParams({ isHashtag: false });\n      return;\n    }\n\n    if (savedTag) {\n      removeSearchSavedTag();\n    }\n  });\n\n  const handleChangeSearchType = useLastCallback((type: MiddleSearchType) => {\n    updateSearchParams({ type });\n    setIsViewAsList(true);\n  });\n\n  const handleFocusOlder = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleFocusNewer = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  function renderTypeTag(type: MiddleSearchType, isForTag?: boolean) {\n    const isSelected = !isForTag && searchType === type;\n    switch (type) {\n      case 'chat':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={chat?.id}\n            title={oldLang('SearchThisChat')}\n            clickArg=\"chat\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'myChats':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={currentUserId}\n            forceShowSelf\n            title={oldLang('SearchMyMessages')}\n            clickArg=\"myChats\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'channels':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            customPeer={CHANNELS_PEER}\n            title={oldLang('SearchPublicPosts')}\n            clickArg=\"channels\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n    }\n    return undefined;\n  }\n\n  function renderDropdown() {\n    return (\n      <div className={buildClassName(styles.dropdown, !hasResultsDropdown && styles.dropdownHidden)}>\n        {!isMobile && <div className={styles.separator} />}\n        {hasSavedTags && !isHashtagQuery && (\n          <div\n            className={buildClassName(\n              styles.savedTags,\n              !isMobile && styles.wrap,\n              'no-scrollbar',\n            )}\n          >\n            {savedTagsArray.map((tag) => {\n              const isChosen = isSameReaction(tag.reaction, savedTag);\n              return (\n                <SavedTagButton\n                  containerId=\"local-search\"\n                  key={getReactionKey(tag.reaction)}\n                  reaction={tag.reaction}\n                  tag={tag}\n                  withCount\n                  isDisabled={areSavedTagsDisabled}\n                  isChosen={isChosen}\n                  onClick={isChosen ? removeSearchSavedTag : activateSearchTag}\n                />\n              );\n            })}\n          </div>\n        )}\n        {isHashtagQuery && (\n          <div\n            className={buildClassName(styles.searchTypes, 'no-scrollbar')}\n          >\n            {renderTypeTag('chat')}\n            {renderTypeTag('myChats')}\n            {renderTypeTag('channels')}\n          </div>\n        )}\n        {hasResultsContainer && (\n          <InfiniteScroll\n            ref={containerRef}\n            className={buildClassName(styles.results, 'custom-scroll')}\n            items={viewportResults}\n            itemSelector={`.${RESULT_ITEM_CLASS_NAME}`}\n            preloadBackwards={0}\n            onLoadMore={getMore}\n            onKeyDown={handleKeyDown}\n          >\n            {areResultsEmpty && (\n              <span key=\"nothing\" className={styles.placeholder}>\n                {oldLang('NoResultFoundFor', query)}\n              </span>\n            )}\n            {isOnlyHash && (\n              <span key=\"enterhash\" className={styles.placeholder}>\n                {oldLang('HashtagSearchPlaceholder')}\n              </span>\n            )}\n            {viewportResults?.map(({\n              message, senderPeer, messageChat, searchResultKey,\n            }, i) => (\n              <MiddleSearchResult\n                key={searchResultKey}\n                teactOrderKey={-message.date}\n                className={RESULT_ITEM_CLASS_NAME}\n                query={query}\n                message={message}\n                senderPeer={senderPeer}\n                messageChat={messageChat}\n                shouldShowChat={isHashtagQuery}\n                isActive={focusedIndex - viewportOffset === i}\n                onClick={handleMessageClick}\n              />\n            ))}\n          </InfiniteScroll>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      id=\"MiddleSearch\"\n      className={buildClassName(\n        styles.root,\n        isActive && styles.active,\n        !isActive && isFullyHidden && 'visually-hidden', // `display: none` would prevent focus on iOS\n        isFocused && styles.focused,\n        isMobile && styles.mobile,\n      )}\n      ref={ref}\n    >\n      <div className={styles.header}>\n        {!isMobile && (\n          <Avatar\n            className={styles.avatar}\n            peer={monoforumChat || chat}\n            size=\"medium\"\n            isSavedMessages={isSavedMessages}\n          />\n        )}\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          className={buildClassName(\n            styles.input,\n            hasResultsDropdown && styles.withDropdown,\n            hasResultsDropdown && !isMobile && styles.adaptSearchBorders,\n          )}\n          canClose={!isMobile}\n          isLoading={isLoading}\n          resultsItemSelector={`.${styles.results} .${RESULT_ITEM_CLASS_NAME}`}\n          hasUpButton={hasNavigationButtons && !isMobile}\n          hasDownButton={hasNavigationButtons && !isMobile}\n          placeholder={isHashtagQuery ? oldLang('SearchHashtagsHint') : oldLang('Search')}\n          teactExperimentControlled\n          onChange={handleQueryChange}\n          onStartBackspace={handleDeleteTag}\n          onReset={handleReset}\n          withBackIcon={isMobile}\n          onFocus={markFocused}\n          focused={isFocused}\n          onUpClick={canFocusOlder ? handleFocusOlder : undefined}\n          onDownClick={canFocusNewer ? handleFocusNewer : undefined}\n        >\n          <div className={styles.searchTags}>\n            {savedTag && (\n              <SavedTagButton\n                containerId=\"local-search-tags\"\n                className={styles.savedSearchTag}\n                reaction={savedTag}\n                tag={savedTags![getReactionKey(savedTag)]}\n                onClick={removeSearchSavedTag}\n              />\n            )}\n            {isHashtagQuery && <div className={styles.hash}>#</div>}\n          </div>\n          {!isMobile && renderDropdown()}\n        </SearchInput>\n        {!isMobile && (\n          <div className={styles.icons}>\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel={oldLang('JumpToDate')}\n            >\n              <Icon name=\"calendar\" />\n            </Button>\n          </div>\n        )}\n      </div>\n      {isMobile && renderDropdown()}\n      {isMobile && (\n        <div className={styles.footer}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n\n            onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n            ariaLabel={oldLang('JumpToDate')}\n          >\n            <Icon name=\"calendar\" />\n          </Button>\n          <div className={styles.counter}>\n            {hasQueryData && (\n              foundIds?.length ? (\n                oldLang('Of', [Math.max(focusedIndex + 1, 1), totalCount])\n              ) : foundIds && !foundIds.length && (\n                oldLang('NoResult')\n              )\n            )}\n          </div>\n          {searchType === 'chat' && Boolean(foundIds?.length) && (\n            <Button\n              className={styles.viewStyle}\n              size=\"smaller\"\n              isText\n              fluid\n              noForcedUpperCase\n              onClick={handleTriggerViewStyle}\n            >\n              {isViewAsList ? oldLang('SearchAsChat') : oldLang('SearchAsList')}\n            </Button>\n          )}\n          {hasNavigationButtons && !hasResultsDropdown && (\n            <div className={styles.mobileNavigation}>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusOlder && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusOlder}\n                nonInteractive={!canFocusOlder}\n                ariaLabel={lang('AriaSearchOlderResult')}\n              >\n                <Icon name=\"up\" />\n              </Button>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusNewer && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusNewer}\n                nonInteractive={!canFocusNewer}\n                ariaLabel={lang('AriaSearchNewerResult')}\n              >\n                <Icon name=\"down\" />\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n    const { chatId, threadId } = currentMessageList;\n\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const {\n      requestedQuery, savedTag, results, fetchingQuery, isHashtag, type,\n    } = selectCurrentMiddleSearch(global) || {};\n    const { totalCount, foundIds, query: lastSearchQuery } = results || {};\n\n    const currentUserId = global.currentUserId;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    const savedTags = isSavedMessages && !isSavedDialog ? global.savedReactionTags?.byKey : undefined;\n\n    const monoforumChat = selectMonoforumChannel(global, chatId);\n\n    return {\n      chat,\n      monoforumChat,\n      requestedQuery,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n      savedTags,\n      savedTag,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isSavedMessages,\n      fetchingQuery,\n      isHashtagQuery: isHashtag,\n      currentUserId,\n      searchType: type,\n      lastSearchQuery,\n    };\n  },\n)(MiddleSearch));\n","import type { ElementRef } from '../../lib/teact/teact';\nimport { useEffect } from '../../lib/teact/teact';\n\nimport useLastCallback from '../useLastCallback';\n\n// Fragile\nexport function useClickOutside(\n  refs: ElementRef<HTMLElement>[], callback: (event: MouseEvent) => void,\n) {\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    const clickedOutside = refs.every((ref) => {\n      return ref.current && !ref.current.contains(event.target as Node);\n    });\n\n    if (clickedOutside) callback(event);\n  });\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [handleClickOutside]);\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent, ThreadId } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport {\n  selectChat, selectChatFullInfo, selectIsChatWithSelf, selectIsCurrentUserPremium, selectShouldLoopStickers,\n} from '../../../global/selectors';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { pickTruthy } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport StickerSetCover from './StickerSetCover';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  noContextMenus?: boolean;\n  idPrefix: string;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  isForEffects?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  effectStickers?: ApiSticker[];\n  effectEmojis?: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  effectStickers,\n  effectEmojis,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noContextMenus,\n  idPrefix,\n  onStickerSelect,\n  isForEffects,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat?.id, threadId);\n\n  const prefix = `${idPrefix}-sticker-set`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useOldLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (isForEffects && effectStickers) {\n      const effectSets: StickerSetOrReactionsSetOrRecent[] = [];\n      if (effectEmojis?.length) {\n        effectSets.push({\n          id: EFFECT_EMOJIS_SET_ID,\n          accessHash: '0',\n          title: '',\n          stickers: effectEmojis,\n          count: effectEmojis.length,\n          isEmoji: true,\n        });\n      }\n      if (effectStickers?.length) {\n        effectSets.push({\n          id: EFFECT_STICKERS_SET_ID,\n          accessHash: '0',\n          title: lang('StickerEffects'),\n          stickers: effectStickers,\n          count: effectStickers.length,\n        });\n      }\n      return effectSets;\n    }\n\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    const userSetIds = [...(addedSetIds || [])];\n    if (chatStickerSetId) {\n      userSetIds.unshift(chatStickerSetId);\n    }\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, userSetIds));\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds,\n    stickerSetsById,\n    favoriteStickers,\n    recentStickers,\n    chatStickerSetId,\n    lang,\n    effectStickers,\n    isForEffects,\n    effectEmojis,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents\n    && !noPopulatedSets && (canSendStickers || isForEffects);\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  });\n\n  const handleStickerUnfave = useLastCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  });\n\n  const handleStickerFave = useLastCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  });\n\n  const handleMouseMove = useLastCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  });\n\n  const handleRemoveRecentSticker = useLastCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  });\n\n  if (!chat) return undefined;\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <Icon name=\"recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <Icon name=\"favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar peer={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n              forcePlayback\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n          forcePlayback\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers && !isForEffects ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  return (\n    <div className={fullClassName}>\n      {!isForEffects && (\n        <div ref={headerRef} className={headerClassName}>\n          <div className=\"shared-canvas-container\">\n            <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n            {allSets.map(renderCover)}\n          </div>\n        </div>\n      )}\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        onScroll={handleContentScroll}\n        className={\n          buildClassName(\n            styles.main,\n            IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n            !isForEffects && styles.hasHeader,\n          )\n        }\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            noContextMenus={noContextMenus}\n            index={i}\n            idPrefix={prefix}\n            observeIntersection={observeIntersectionForSet}\n            observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n            observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n            isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            isTranslucent={isTranslucent}\n            isChatStickerSet={stickerSet.id === chatStickerSetId}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n            forcePlayback\n            shouldHideHeader={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      effect,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      effectStickers: effect?.stickers,\n      effectEmojis: effect?.emojis,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo, useRef,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiMessage,\n  ApiReaction,\n  ApiReactionWithPaid,\n} from '../../../../api/types';\n\nimport {\n  getReactionKey, sortReactions,\n} from '../../../../global/helpers';\nimport { selectChatFullInfo } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nimport ReactionEmoji from '../../../common/reactions/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  selectedReactionIds?: string[];\n  message?: ApiMessage;\n  onReactionSelect: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  isWithPaidReaction?: boolean;\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  reactionsLimit?: number;\n  isCurrentUserPremium?: boolean;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  isWithPaidReaction,\n  message,\n  reactionsLimit,\n  onReactionSelect,\n  onReactionContext,\n}) => {\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const currentReactions = message?.reactions?.results;\n\n  const shouldUseCurrentReactions = reactionsLimit && currentReactions\n    && currentReactions.length >= reactionsLimit;\n\n  const allAvailableReactions = useMemo(() => {\n    if (shouldUseCurrentReactions) {\n      const reactions = currentReactions.map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactions.unshift({ type: 'paid' });\n      }\n      return reactions;\n    }\n\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      const reactionsToSort: ApiReactionWithPaid[] = (availableReactions || []).map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactionsToSort.unshift({ type: 'paid' });\n      }\n      return sortReactions(reactionsToSort, topReactions);\n    }\n\n    const reactionsToSort: ApiReactionWithPaid[] = enabledReactions.allowed.slice();\n    if (isWithPaidReaction) {\n      reactionsToSort.unshift({ type: 'paid' });\n    }\n\n    return sortReactions(reactionsToSort, topReactions);\n  }, [\n    availableReactions, enabledReactions, topReactions, shouldUseCurrentReactions, currentReactions, isWithPaidReaction,\n  ]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect}\n                onContextMenu={onReactionContext}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { availableReactions, topReactions } = global.reactions;\n\n    const { maxUniqueReactions } = global.appConfig || {};\n    const { enabledReactions, isPaidReactionAvailable } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n      reactionsLimit: maxUniqueReactions,\n      isWithPaidReaction: isPaidReactionAvailable,\n    };\n  },\n)(ReactionPickerLimited));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"MhpiTAwi\",\"wrapper\":\"NIaqmosK\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiReaction,\n  ApiReactionWithPaid,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n} from '../../../../api/types';\nimport type { IAnchorPosition } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\n\nimport { getReactionKey, getStoryKey } from '../../../../global/helpers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectIsContextMenuTranslucent,\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { isUserId } from '../../../../util/entities/ids';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { buildCustomEmojiHtml } from '../../composer/helpers/customEmoji';\n\nimport { getIsMobile } from '../../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../../../common/CustomEmojiPicker';\nimport Menu from '../../../ui/Menu';\nimport StickerPicker from '../../composer/StickerPicker';\nimport ReactionPickerLimited from './ReactionPickerLimited';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  shouldUseFullPicker?: boolean;\n  message?: ApiMessage;\n  story?: ApiStory | ApiStorySkipped;\n  isCurrentUserPremium?: boolean;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n  sendAsMessage?: boolean;\n  chatId?: string;\n  isForEffects?: boolean;\n  availableEffectById: Record<string, ApiAvailableEffect>;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\nconst REACTION_SELECTOR_WIDTH = 16.375 * REM;\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  story,\n  position,\n  isTranslucent,\n  isCurrentUserPremium,\n  shouldUseFullPicker,\n  sendAsMessage,\n  chatId,\n  isForEffects,\n  availableEffectById,\n}) => {\n  const {\n    toggleReaction, closeReactionPicker, sendMessage, showNotification, sendStoryReaction, saveEffectInDraft,\n    requestEffectInComposer, addLocalPaidReaction, openPaidReactionModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const renderedStoryPeerId = useCurrentOrPrev(story?.peerId, true);\n  const renderedStoryId = useCurrentOrPrev(story?.id);\n  const storedPosition = useCurrentOrPrev(position, true);\n  const menuRef = useRef<HTMLDivElement>();\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    if (renderedStoryId) {\n      return storedPosition;\n    }\n\n    return {\n      x: storedPosition.x + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [renderedStoryId, storedPosition, shouldUseFullPicker]);\n\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({\n    withPortal: true,\n    isDense: !renderedStoryPeerId,\n    deltaX: !getIsMobile() && menuRef.current\n      ? -(menuRef.current.offsetWidth - REACTION_SELECTOR_WIDTH) / 2 - FULL_PICKER_SHIFT_DELTA.x / 2\n      : 0,\n  }));\n\n  const handleToggleCustomReaction = useLastCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction: ApiReaction = sticker.isCustomEmoji\n      ? { type: 'custom', documentId: sticker.id }\n      : { type: 'emoji', emoticon: sticker.emoji! };\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    if (reaction.type === 'paid') {\n      addLocalPaidReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, count: 1,\n      });\n    } else {\n      toggleReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n      });\n    }\n    closeReactionPicker();\n  });\n\n  const handleReactionContextMenu = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (reaction.type !== 'paid') return;\n\n    openPaidReactionModal({\n      chatId: renderedChatId!,\n      messageId: renderedMessageId!,\n    });\n    closeReactionPicker();\n  });\n\n  const handleStoryReactionSelect = useLastCallback((item: ApiReactionWithPaid | ApiSticker) => {\n    if ('type' in item && item.type === 'paid') return; // Not supported for stories\n\n    const reaction = 'id' in item ? { type: 'custom', documentId: item.id } as const : item;\n\n    const sticker = 'type' in item && item.type === 'custom' ? getGlobal().customEmojis.byId[item.documentId]\n      : 'id' in item ? item : undefined;\n\n    if (sticker && !sticker.isFree && !isCurrentUserPremium) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n\n      closeReactionPicker();\n\n      return;\n    }\n\n    if (!sendAsMessage) {\n      sendStoryReaction({\n        peerId: renderedStoryPeerId!,\n        storyId: renderedStoryId!,\n        containerId: getStoryKey(renderedStoryPeerId!, renderedStoryId!),\n        reaction,\n        shouldAddToRecent: true,\n      });\n      closeReactionPicker();\n      return;\n    }\n\n    let text: string | undefined;\n    let entities: ApiMessageEntity[] | undefined;\n\n    if ('type' in item && item.type === 'emoji') {\n      text = item.emoticon;\n    } else {\n      const customEmojiMessage = parseHtmlAsFormattedText(buildCustomEmojiHtml(sticker!));\n      text = customEmojiMessage.text;\n      entities = customEmojiMessage.entities;\n    }\n\n    sendMessage({ text, entities, isReaction: true });\n    closeReactionPicker();\n  });\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker) => {\n    const availableEffects = Object.values(availableEffectById);\n    const effectId = availableEffects.find((effect) => effect.effectStickerId === sticker.id)?.id;\n\n    if (chatId) saveEffectInDraft({ chatId, threadId: MAIN_THREAD_ID, effectId });\n\n    if (effectId) requestEffectInComposer({});\n    closeReactionPicker();\n  });\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push(getReactionKey(reaction));\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(\n        styles.menuContent,\n        !shouldUseFullPicker && !renderedStoryId && styles.onlyReactions,\n        renderedStoryId && styles.storyMenu,\n      )}\n      withPortal\n      noCompact\n      anchor={renderingPosition}\n      positionY={story && 'bottom'}\n      getTriggerElement={getTriggerElement}\n      getRootElement={getRootElement}\n      getMenuElement={getMenuElement}\n      getLayout={getLayout}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      {isForEffects && chatId ? (\n        <StickerPicker\n          className=\"\"\n          isHidden={!isOpen}\n          loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n          idPrefix=\"message-effect\"\n          canSendStickers={false}\n          noContextMenus={false}\n          chatId={chatId}\n          isTranslucent={isTranslucent}\n          onStickerSelect={handleStickerSelect}\n          isForEffects={isForEffects}\n        />\n      ) : (\n        <>\n          <CustomEmojiPicker\n            chatId={renderedChatId}\n            idPrefix=\"message-emoji-set-\"\n            isHidden={!isOpen || !(shouldUseFullPicker || renderedStoryId)}\n            loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n            isReactionPicker\n            className={!shouldUseFullPicker && !renderedStoryId ? styles.hidden : undefined}\n            selectedReactionIds={selectedReactionIds}\n            isTranslucent={isTranslucent}\n            onCustomEmojiSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleCustomReaction}\n            onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n            onReactionContext={handleReactionContextMenu}\n          />\n          {!shouldUseFullPicker && Boolean(renderedChatId) && (\n            <ReactionPickerLimited\n              chatId={renderedChatId}\n              loadAndPlay={isOpen}\n              onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n              onReactionContext={handleReactionContextMenu}\n              selectedReactionIds={selectedReactionIds}\n              message={message}\n            />\n          )}\n        </>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const state = selectTabState(global);\n  const availableEffectById = global.availableEffectById;\n  const {\n    chatId, messageId, storyPeerId, storyId, position, sendAsMessage, isForEffects,\n  } = state.reactionPicker || {};\n  const story = storyPeerId && storyId\n    ? selectPeerStory(global, storyPeerId, storyId) as ApiStory | ApiStorySkipped\n    : undefined;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = isUserId(chatId || storyPeerId || '');\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const { maxUniqueReactions } = global.appConfig || {};\n  const areAllReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  const currentReactions = message?.reactions?.results;\n  const shouldUseCurrentReactions = Boolean(maxUniqueReactions && currentReactions\n    && currentReactions.length >= maxUniqueReactions);\n\n  return {\n    message,\n    story,\n    position,\n    shouldUseFullPicker: (chat?.isForbidden || areSomeReactionsAllowed || shouldUseCurrentReactions) ? false\n      : (areAllReactionsAllowed || isPrivateChat),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    sendAsMessage,\n    isForEffects,\n    chatId,\n    availableEffectById,\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"gBh4WvBC\",\"menuContent\":\"qSfKwMzX\",\"storyMenu\":\"srpBMrqr\",\"onlyReactions\":\"dRNSqkOC\",\"hidden\":\"KVwgF6DG\"};","import { fixImageContent } from '../../../../util/parseHtmlAsFormattedText';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QucaiGVU\",\"preview\":\"SHoF85Vw\",\"duration\":\"nI2M1SBH\",\"single\":\"FjrnqGba\",\"no-grouping\":\"g0cTsM9d\",\"noGrouping\":\"g0cTsM9d\",\"file\":\"B6f6GcvN\",\"overlay\":\"bX7LdgxW\",\"action-item\":\"Zo7u5epf\",\"actionItem\":\"Zo7u5epf\",\"delete-file\":\"CYJwy9T_\",\"deleteFile\":\"CYJwy9T_\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { SUPPORTED_PHOTO_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport File from '../../common/File';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useLastCallback(() => {\n    onToggleSpoiler?.(index);\n  });\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'photo':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <Icon\n                name=\"delete\"\n                className={buildClassName(styles.actionItem, styles.deleteFile)}\n\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          <Icon\n            name={attachment.shouldSendAsSpoiler ? 'spoiler-disable' : 'spoiler'}\n            className={styles.actionItem}\n            onClick={handleSpoilerClick}\n          />\n          {onDelete && (\n\n            <Icon name=\"delete\" className={styles.actionItem} onClick={() => onDelete(index)} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport function getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_PHOTO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'photo';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","export default function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","import { type ElementRef } from '../lib/teact/teact';\n\nimport isFullyVisible from './visibility/isFullyVisible';\nimport animateScroll from './animateScroll';\nimport findInViewport from './findInViewport';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: ElementRef<HTMLElement>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll({\n      container,\n      element: allElements[index],\n      position,\n      margin: SCROLL_MARGIN,\n    });\n  }\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useLastCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  });\n\n  const handleArrowKey = useLastCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  });\n\n  const handleItemSelect = useLastCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (!isActive) return false;\n\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  });\n\n  useEffect(() => {\n    if (!isActive) setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n  }, [isActive, shouldRemoveSelectionOnReset]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useLastCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  });\n\n  const handleSelectMention = useLastCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  });\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePreviousDeprecated(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item smaller-icon\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"a27O2Qlr\",\"mobile\":\"khvUZbGZ\",\"symbolMenuOpen\":\"ir5kkMy1\",\"header-border\":\"Pc1k8G8s\",\"headerBorder\":\"Pc1k8G8s\",\"sendButtonStar\":\"C1OOt81o\",\"attachments\":\"_bxSIFgj\",\"attachments-bottom-padding\":\"RPVunBe2\",\"attachmentsBottomPadding\":\"RPVunBe2\",\"caption-wrapper\":\"EtmiUn2k\",\"captionWrapper\":\"EtmiUn2k\",\"caption-top-border\":\"FjjSKMYe\",\"captionTopBorder\":\"FjjSKMYe\",\"caption\":\"Te7lIfpB\",\"dropTarget\":\"AT_d9l0W\",\"dropOutlineContainer\":\"d9O65j_I\",\"dropOutline\":\"jzCBDWMw\",\"outline\":\"xjNY3Z8u\",\"hovered\":\"AnO3BgVv\",\"send-wrapper\":\"wDqWK9MD\",\"sendWrapper\":\"wDqWK9MD\",\"send\":\"kNlWmBJI\",\"is-pointer-env\":\"rYZmraWo\",\"isPointerEnv\":\"rYZmraWo\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAttachment, ApiChatMember, ApiMessage, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getAttachmentMediaType } from '../../../global/helpers';\nimport { selectChatFullInfo, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { validateFiles } from '../../../util/files';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { removeAllSelections } from '../../../util/selection';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useFlag from '../../../hooks/useFlag';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport MentionTooltip from './MentionTooltip';\nimport MessageInput from './MessageInput';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  attachments: ApiAttachment[];\n  editingMessage?: ApiMessage;\n  messageListType?: MessageListType;\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  isForMessage?: boolean;\n  shouldSchedule?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  forceDarkTheme?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n  canScheduleUntilOnline?: boolean;\n  canSchedule?: boolean;\n  onSendWhenOnline?: NoneToVoidFunction;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  editingMessage?: ApiMessage;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  editingMessage,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  isForMessage,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  forceDarkTheme,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n  canScheduleUntilOnline,\n  canSchedule,\n  onSendWhenOnline,\n  paidMessagesStars,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const svgRef = useRef<SVGSVGElement>();\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const mainButtonRef = useRef<HTMLButtonElement>();\n  const inputRef = useRef<HTMLDivElement>();\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePreviousDeprecated(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const isEditing = editingMessage && Boolean(editingMessage);\n  const isInAlbum = editingMessage && editingMessage?.groupedId;\n  const isEditingMessageFile = isEditing && attachments?.length && getAttachmentMediaType(attachments[0]);\n  const notEditingFile = isEditingMessageFile !== 'file';\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const shouldSendCompressed = attachmentSettings.shouldCompress;\n  const isSendingCompressed = Boolean(\n    (shouldSendCompressed || shouldForceCompression || isInAlbum) && !shouldForceAsFile,\n  );\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n  const isInvertedMedia = attachmentSettings.isInvertedMedia;\n  const [shouldSendInHighQuality, setShouldSendInHighQuality] = useState(\n    attachmentSettings.shouldSendInHighQuality,\n  );\n  const [renderingShouldSendInHighQuality, setRenderingShouldSendInHighQuality] = useState(shouldSendInHighQuality);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  const timerRef = useRef<number | undefined>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n      setShouldSendInHighQuality(attachmentSettings.shouldSendInHighQuality);\n    }\n  }, [attachmentSettings, isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [updateAttachmentSettings, isOpen]);\n\n  function setIsInvertedMedia(value?: true) {\n    updateAttachmentSettings({ isInvertedMedia: value });\n  }\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useLastCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = ((shouldSchedule || shouldSendScheduled) && isForMessage && !editingMessage) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped, isInvertedMedia);\n      updateAttachmentSettings({\n        shouldCompress: isSendingCompressed,\n        shouldSendGrouped,\n        isInvertedMedia,\n        shouldSendInHighQuality,\n      });\n    }\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendAttachments(true);\n  });\n\n  const handleSendClick = useLastCallback(() => {\n    sendAttachments();\n  });\n\n  const handleScheduleClick = useLastCallback(() => {\n    sendAttachments(false, true);\n  });\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  });\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  });\n\n  const handleDelete = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  });\n\n  const handleEnableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: true,\n    })));\n  });\n\n  const handleToggleShouldCompress = useLastCallback(() => {\n    const newValue = !shouldSendCompressed;\n    updateAttachmentSettings({ shouldCompress: newValue });\n  });\n\n  const handleToggleQuality = useLastCallback(() => {\n    const newValue = !shouldSendInHighQuality;\n    setShouldSendInHighQuality(newValue);\n    updateAttachmentSettings({ shouldSendInHighQuality: newValue });\n  });\n\n  const handleDisableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  });\n\n  const handleToggleSpoiler = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  });\n\n  const handleResize = useLastCallback(() => {\n    const svg = svgRef.current;\n    if (!svg) {\n      return;\n    }\n\n    const { width, height } = svg.getBoundingClientRect();\n    svg.viewBox.baseVal.width = width;\n    svg.viewBox.baseVal.height = height;\n  });\n\n  // Can't listen for SVG resize\n  useResizeObserver(ref, handleResize);\n\n  useEffectOnce(handleResize);\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [oldLang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios, hasAnyPhoto] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    const hasAnyPhoto = renderingAttachments.some((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio, hasAnyPhoto];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  useEffect(() => {\n    if (shouldSendInHighQuality === renderingShouldSendInHighQuality) return;\n    if (timerRef.current) clearTimeout(timerRef.current);\n    timerRef.current = window.setTimeout(() => {\n      setRenderingShouldSendInHighQuality(shouldSendInHighQuality);\n    }, CLOSE_MENU_ANIMATION_DURATION);\n    return () => {\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n        timerRef.current = undefined;\n      }\n    };\n  }, [shouldSendInHighQuality, renderingShouldSendInHighQuality]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  const canInvertMedia = (() => {\n    if (isEditing) return false;\n    if (!hasMedia) return false;\n    if (!shouldForceAsFile && !shouldForceCompression && !isSendingCompressed) return false;\n    if (isMultiple && shouldSendGrouped) return false;\n    return true;\n  })();\n\n  let title = '';\n  const attachmentsLength = renderingAttachments.length;\n  if (areAllPhotos) {\n    title = oldLang(isEditing ? 'EditMessageReplacePhoto' : 'PreviewSender.SendPhoto', attachmentsLength, 'i');\n  } else if (areAllVideos) {\n    title = oldLang(isEditing ? 'EditMessageReplaceVideo' : 'PreviewSender.SendVideo', attachmentsLength, 'i');\n  } else if (areAllAudios) {\n    title = oldLang(isEditing ? 'EditMessageReplaceAudio' : 'PreviewSender.SendAudio', attachmentsLength, 'i');\n  } else {\n    title = oldLang(isEditing ? 'EditMessageReplaceFile' : 'PreviewSender.SendFile', attachmentsLength, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        {notEditingFile && !isInAlbum\n          && (\n            <DropdownMenu\n              className=\"attachmeneditingMessaget-modal-more-menu with-menu-transitions\"\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              {Boolean(!editingMessage) && (\n                <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{oldLang('Add')}</MenuItem>\n              )}\n              {hasMedia && (\n                <>\n                  {\n                    canInvertMedia && (!isInvertedMedia ? (\n\n                      <MenuItem icon=\"move-caption-up\" onClick={() => setIsInvertedMedia(true)}>\n                        {oldLang('PreviewSender.MoveTextUp')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"move-caption-down\" onClick={() => setIsInvertedMedia(undefined)}>\n                        {oldLang(('PreviewSender.MoveTextDown'))}\n                      </MenuItem>\n                    ))\n                  }\n                  {\n                    !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n\n                      <MenuItem icon=\"document\" onClick={handleToggleShouldCompress}>\n                        {oldLang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"photo\" onClick={handleToggleShouldCompress}>\n                        {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                      </MenuItem>\n                    ))\n                  }\n                  {isSendingCompressed && !editingMessage && hasAnyPhoto && (\n                    <MenuItem\n                      icon={renderingShouldSendInHighQuality ? 'sd-photo' : 'hd-photo'}\n                      onClick={handleToggleQuality}\n                    >\n                      {lang(renderingShouldSendInHighQuality ? 'SendInStandardQuality' : 'SendInHighQuality')}\n                    </MenuItem>\n                  )}\n                  {isSendingCompressed && hasAnySpoilerable && Boolean(!editingMessage) && (\n                    hasSpoiler ? (\n                      <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                        {oldLang('Attachment.DisableSpoiler')}\n                      </MenuItem>\n                    ) : (\n                      <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                        {oldLang('Attachment.EnableSpoiler')}\n                      </MenuItem>\n                    )\n                  )}\n                </>\n              )}\n              {isMultiple && (\n                shouldSendGrouped ? (\n                  <MenuItem\n                    icon=\"grouped-disable\"\n\n                    onClick={() => setShouldSendGrouped(false)}\n                  >\n                    Ungroup All Media\n                  </MenuItem>\n                ) : (\n\n                  <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                    Group All Media\n                  </MenuItem>\n                )\n              )}\n            </DropdownMenu>\n          )}\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n  const buttonSendCaption = paidMessagesStars ? formatStarsAsIcon(lang,\n    attachmentsLength * paidMessagesStars,\n    {\n      className: styles.sendButtonStar,\n      asFont: true,\n    }) : oldLang('Send');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n        forceDarkTheme && 'component-theme-dark',\n      )}\n      noBackdropClose\n      isLowStackPriority\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={oldLang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <svg className={styles.dropOutlineContainer}>\n          <rect className={styles.dropOutline} x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" rx=\"8\" />\n        </svg>\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n              idPrefix=\"attachment\"\n              forceDarkTheme={forceDarkTheme}\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              customEmojiPrefix=\"attachment\"\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={oldLang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule && !editingMessage ? oldLang('Next')\n                  : editingMessage ? oldLang('Save') : buttonSendCaption}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  canSchedule={canSchedule && isForMessage}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                  onSendWhenOnline={onSendWhenOnline}\n                  canScheduleUntilOnline={canScheduleUntilOnline}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { shouldSuggestCustomEmoji } = global.settings.byKey;\n    const { language } = selectSharedSettings(global);\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent } from 'react';\nimport type { ElementRef } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport TextArea from '../../ui/TextArea';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  maxOptionsCount?: number;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst FALLBACK_MAX_OPTIONS_COUNT = 12;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal = ({\n  isOpen,\n  isQuiz,\n  shouldBeAnonymous,\n  maxOptionsCount = FALLBACK_MAX_OPTIONS_COUNT,\n  onSend,\n  onClear,\n}: OwnProps) => {\n  const questionInputRef = useRef<HTMLInputElement>();\n  const optionsListRef = useRef<HTMLDivElement>();\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useOldLang();\n\n  const handleSolutionChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setSolution(e.target.value);\n  });\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  const addNewOption = useLastCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const isNoCorrectOptionError = isQuizMode && (correctOption === undefined || !options[correctOption].trim());\n\n    const answers = options\n      .map((text, index) => {\n        text = text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          text: {\n            text,\n          },\n          option: String(index),\n          ...(index === correctOption && { correct: true }),\n        };\n      }).filter(Boolean);\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    if (!questionTrimmed || answers.length < 2) {\n      setQuestion(questionTrimmed);\n      if (answers.length) {\n        const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter(Boolean);\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isNoCorrectOptionError) {\n      setHasErrors(true);\n      return;\n    }\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: {\n          text: questionTrimmed,\n        },\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseHtmlAsFormattedText(solution.substring(0, MAX_SOLUTION_LENGTH)))\n        || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  });\n\n  const updateOption = useLastCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < maxOptionsCount) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  });\n\n  const removeOption = useLastCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleCorrectOptionChange = useLastCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  });\n\n  const handleIsAnonymousChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  });\n\n  const handleMultipleAnswersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  });\n\n  const handleQuizModeChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  });\n\n  const handleQuestionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  });\n\n  const getQuestionError = useLastCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  });\n\n  const getOptionsError = useLastCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          maxLength={MAX_OPTION_LENGTH}\n          label={index !== options.length - 1 || options.length === maxOptionsCount\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n\n            onClick={() => removeOption(index)}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: !options[index].trim() }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <div className=\"dialog-checkbox-group\">\n          {!shouldBeAnonymous && (\n            <Checkbox\n              label={lang('PollAnonymous')}\n              checked={isAnonymous}\n              onChange={handleIsAnonymousChange}\n            />\n          )}\n          <Checkbox\n            label={lang('PollMultiple')}\n            checked={isMultipleAnswers}\n            disabled={isQuizMode}\n            onChange={handleMultipleAnswersChange}\n          />\n          <Checkbox\n            label={lang('PollQuiz')}\n            checked={isQuizMode}\n            disabled={isMultipleAnswers || isQuiz !== undefined}\n            onChange={handleQuizModeChange}\n          />\n        </div>\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <TextArea\n              value={solution}\n              onChange={handleSolutionChange}\n              noReplaceNewlines\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import type { ChangeEvent } from 'react';\nimport type { ElementRef } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNewMediaTodo } from '../../../api/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { TabState } from '../../../global/types/tabState';\n\nimport {\n  TODO_ITEM_LENGTH_LIMIT,\n  TODO_ITEMS_LIMIT,\n  TODO_TITLE_LENGTH_LIMIT,\n} from '../../../config';\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectChatMessage } from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { generateUniqueNumberId } from '../../../util/generateUniqueId';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport './ToDoListModal.scss';\n\nexport type OwnProps = {\n  modal: TabState['todoListModal'];\n  onSend: (todoList: ApiNewMediaTodo) => void;\n  onClear: () => void;\n};\n\nexport type StateProps = {\n  editingMessage?: ApiMessage;\n  maxItemsCount?: number;\n  maxTitleLength?: number;\n  maxItemLength?: number;\n};\n\ntype Item = {\n  id: number;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTION_LENGTH = 100;\n\nconst ToDoListModal = ({\n  modal,\n  maxItemsCount = TODO_ITEMS_LIMIT,\n  maxTitleLength = TODO_TITLE_LENGTH_LIMIT,\n  maxItemLength = TODO_ITEM_LENGTH_LIMIT,\n  editingMessage,\n  onSend,\n  onClear,\n}: OwnProps & StateProps) => {\n  const { editTodo, closeTodoListModal, appendTodoList } = getActions();\n\n  const titleInputRef = useRef<HTMLInputElement>();\n  const itemsListRef = useRef<HTMLDivElement>();\n\n  const [title, setTitle] = useState<string>('');\n  const [items, setItems] = useState<Item[]>([{ id: generateUniqueNumberId(), text: '' }]);\n  const [isOthersCanAppend, setIsOthersCanAppend] = useState(true);\n  const [isOthersCanComplete, setIsOthersCanComplete] = useState(true);\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  // Treat \"Add task\" as edit mode for own checklists\n  const isAddTaskMode = renderingModal?.forNewTask && !editingMessage?.isOutgoing;\n\n  const editingTodo = editingMessage?.content.todo?.todo;\n\n  const frozenTasks = useMemo(() => {\n    if (!isAddTaskMode || !editingTodo) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return editingTodo.items.map((item) => ({\n      id: item.id,\n      text: item.title.text,\n      isDisabled: true,\n    }));\n  }, [isAddTaskMode, editingTodo]);\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (editingTodo) {\n      setTitle(editingTodo.title.text);\n      setIsOthersCanAppend(editingTodo.othersCanAppend ?? false);\n      setIsOthersCanComplete(editingTodo.othersCanComplete ?? false);\n      if (!isAddTaskMode) {\n        const editingItems = editingTodo.items.map((item) => ({\n          id: item.id,\n          text: item.title.text,\n        }));\n        if (editingItems.length < maxItemsCount) {\n          editingItems.push({ id: generateUniqueNumberId(), text: '' });\n        }\n        setItems(editingItems);\n      }\n    }\n  }, [editingTodo, isAddTaskMode, maxItemsCount]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setTitle('');\n      setItems([{ id: generateUniqueNumberId(), text: '' }]);\n      setIsOthersCanAppend(true);\n      setIsOthersCanComplete(true);\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (isOpen) {\n      // Wait for the DOM to be updated\n      requestMeasure(() => {\n        if (renderingModal?.forNewTask) {\n          const inputs = itemsListRef.current?.querySelectorAll('input');\n          const lastInput = inputs?.[inputs.length - 1];\n          lastInput?.focus();\n        } else {\n          focusInput(titleInputRef);\n        }\n      });\n    }\n  }, [focusInput, isOpen, renderingModal?.forNewTask]);\n\n  const addNewItem = useLastCallback((newItems: Item[]) => {\n    const id = generateUniqueNumberId();\n    setItems([...newItems, { id, text: '' }]);\n\n    requestNextMutation(() => {\n      const list = itemsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const todoItems = items\n      .map((item) => {\n        const text = item.text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          id: item.id,\n          title: {\n            text: text.substring(0, maxItemLength),\n          },\n        };\n      }).filter(Boolean);\n\n    const titleTrimmed = title.trim().substring(0, maxTitleLength);\n    if (!titleTrimmed || todoItems.length === 0) {\n      setTitle(titleTrimmed);\n      if (todoItems.length) {\n        const itemsTrimmed = items.map((o) => (\n          { ...o, text: o.text.trim().substring(0, maxItemLength) }))\n          .filter((o) => o.text.length);\n        if (itemsTrimmed.length === 0) {\n          addNewItem([]);\n        } else {\n          setItems([...itemsTrimmed, { id: generateUniqueNumberId(), text: '' }]);\n        }\n      } else {\n        addNewItem([]);\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isAddTaskMode && editingMessage) {\n      appendTodoList({\n        chatId: editingMessage.chatId,\n        messageId: editingMessage.id,\n        items: todoItems,\n      });\n      closeTodoListModal();\n      return;\n    }\n\n    const payload: ApiNewMediaTodo = {\n      todo: {\n        title: {\n          text: titleTrimmed,\n        },\n        items: todoItems,\n        othersCanAppend: isOthersCanAppend,\n        othersCanComplete: isOthersCanComplete,\n      },\n    };\n\n    if (editingMessage) {\n      editTodo({\n        chatId: editingMessage.chatId,\n        todo: payload,\n        messageId: editingMessage.id,\n      });\n    } else {\n      onSend(payload);\n    }\n\n    closeTodoListModal();\n  });\n\n  const updateItem = useLastCallback((index: number, text: string) => {\n    const newItems = [...items];\n    newItems[index] = { ...newItems[index], text };\n    if (newItems[newItems.length - 1].text.trim().length && newItems.length < maxItemsCount) {\n      addNewItem(newItems);\n    } else {\n      setItems(newItems);\n    }\n  });\n\n  const removeItem = useLastCallback((index: number) => {\n    const newItems = [...items];\n    newItems.splice(index, 1);\n    setItems(newItems);\n\n    requestNextMutation(() => {\n      if (!itemsListRef.current) {\n        return;\n      }\n\n      itemsListRef.current.classList.toggle('overflown', itemsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleIsOthersCanAppendChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsOthersCanAppend(e.target.checked);\n  });\n  const handleIsOthersCanCompleteChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsOthersCanComplete(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleCreate();\n    }\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  });\n\n  const getTitleError = useLastCallback(() => {\n    if (hasErrors && !title.trim().length) {\n      return lang('ToDoListErrorChooseTitle');\n    }\n\n    return undefined;\n  });\n\n  const getItemsError = useLastCallback((index: number) => {\n    const itemsTrimmed = items.map((o) => o.text.trim()).filter((o) => o.length);\n    if (hasErrors && itemsTrimmed.length < 1 && !items[index].text.trim().length) {\n      return lang('ToDoListErrorChooseTasks');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    const title = isAddTaskMode ? 'TitleAppendToDoList' : editingMessage ? 'TitleEditToDoList' : 'TitleNewToDoList';\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('AriaToDoCancel')} onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang(title)}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang(isAddTaskMode ? 'Add' : editingMessage ? 'Save' : 'Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderItems() {\n    const tasksToRender = [...frozenTasks, ...items];\n    return tasksToRender.map((item, index) => {\n      const stateIndex = index - frozenTasks.length;\n      return (\n        <div className=\"item-wrapper\">\n          <InputText\n            maxLength={MAX_OPTION_LENGTH}\n            label={index !== tasksToRender.length - 1 || tasksToRender.length === maxItemsCount\n              ? lang('TitleTask')\n              : lang('TitleAddTask')}\n            error={getItemsError(stateIndex)}\n            value={item.text}\n            disabled={item.isDisabled}\n            onChange={(e) => updateItem(stateIndex, e.currentTarget.value)}\n            onKeyPress={handleKeyPress}\n          />\n          {index !== tasksToRender.length - 1 && !item.isDisabled && (\n            <Button\n              className=\"item-remove-button\"\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              ariaLabel={lang('Delete')}\n              onClick={() => removeItem(stateIndex)}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          )}\n        </div>\n      );\n    });\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"ToDoListModal\">\n      {!isAddTaskMode && (\n        <InputText\n          ref={titleInputRef}\n          label={lang('InputTitle')}\n          value={title}\n          error={getTitleError()}\n          onChange={handleTitleChange}\n          onKeyPress={handleKeyPress}\n        />\n      )}\n      {isAddTaskMode && (\n        <div className=\"readonly-title\">\n          {title}\n        </div>\n      )}\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={itemsListRef}>\n        <h3 className=\"items-header\">\n          {lang('TitleToDoList')}\n        </h3>\n\n        {renderItems()}\n\n      </div>\n\n      <div className=\"items-count-hint\">\n        {lang('HintTodoListTasksCount', {\n          count: maxItemsCount - items.length - (isAddTaskMode && editingTodo ? editingTodo.items.length : 0),\n        })}\n      </div>\n\n      <div className=\"options-divider\" />\n\n      {!isAddTaskMode && (\n        <div className=\"options-footer\">\n          <div className=\"dialog-checkbox-group\">\n            <Checkbox\n              label={lang('AllowOthersAddTasks')}\n              checked={isOthersCanAppend}\n              onChange={handleIsOthersCanAppendChange}\n            />\n            <Checkbox\n              label={lang('AllowOthersMarkAsDone')}\n              checked={isOthersCanComplete}\n              onChange={handleIsOthersCanCompleteChange}\n            />\n          </div>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { appConfig } = global;\n    const editingMessage = modal?.messageId ? selectChatMessage(global, modal.chatId, modal.messageId) : undefined;\n    return {\n      editingMessage,\n      maxItemsCount: appConfig?.todoItemsMax,\n      maxTitleLength: appConfig?.todoTitleLengthMax,\n      maxItemLength: appConfig?.todoItemLengthMax,\n    };\n  },\n)(ToDoListModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport { BASE_URL, IS_PACKAGED_ELECTRON } from '../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji/emoji';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `${IS_PACKAGED_ELECTRON ? BASE_URL : '.'}/img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n          draggable={false}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransitionDeprecated(shouldRender);\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { IconName } from '../../../types/icons';\nimport type {\n  EmojiData,\n  EmojiModule,\n  EmojiRawData,\n} from '../../../util/emoji/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport animateScroll from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { uncompressEmoji } from '../../../util/emoji/emoji';\nimport { pick } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, IconName> = {\n  recent: 'recent',\n  people: 'smile',\n  nature: 'animals',\n  foods: 'eats',\n  activity: 'sport',\n  places: 'car',\n  objects: 'lamp',\n  symbols: 'language',\n  flags: 'flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule> | undefined;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useOldLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useLastCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector<HTMLElement>(`#emoji-category-${index}`)!;\n    animateScroll({\n      container: containerRef.current!,\n      element: categoryEl,\n      position: 'start',\n      margin: FOCUS_MARGIN,\n      maxDistance: SMOOTH_SCROLL_DISTANCE,\n    });\n  });\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  });\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <Icon name={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <div className={containerClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={buildClassName('EmojiPicker-main', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { getVideoMediaHash, getVideoPreviewMediaHash } from '../../global/helpers';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Spinner from '../ui/Spinner';\nimport Icon from './icons/Icon';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewHash = !gif.hasVideoPreview && gif.thumbnail && getVideoMediaHash(gif, 'pictogram');\n  const previewBlobUrl = useMedia(previewHash, !loadAndPlay);\n\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n\n  const videoHash = getVideoPreviewMediaHash(gif) || getVideoMediaHash(gif, 'full');\n  const videoData = useMedia(videoHash, !loadAndPlay);\n\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.gif-context-menu .bubble'));\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  });\n\n  const handleUnsaveClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  });\n\n  const handleContextDelete = useLastCallback(() => {\n    onUnsaveClick?.(gif);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <Icon name=\"close\" className=\"gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n          draggable={false}\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport GifButton from '../../common/GifButton';\nimport Loading from '../../ui/Loading';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useLastCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  });\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div>\n      <div\n        ref={containerRef}\n        className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {!canSendGifs ? (\n          <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n        ) : canRenderContents && savedGifs && savedGifs.length ? (\n          savedGifs.map((gif) => (\n            <GifButton\n              key={gif.id}\n              gif={gif}\n              observeIntersection={observeIntersection}\n              isDisabled={!loadAndPlay}\n              onClick={canSendGifs ? onGifSelect : undefined}\n              onUnsaveClick={handleUnsaveClick}\n              isSavedMessages={isSavedMessages}\n            />\n          ))\n        ) : canRenderContents && savedGifs ? (\n          <div className=\"picker-disabled\">No saved GIFs.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  canSearch?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  Emoji,\n  CustomEmoji,\n  Stickers,\n  GIFs,\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText, canSearch,\n}) => {\n  const lang = useOldLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useLastCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  });\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && canSearch && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <Icon name=\"search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <Icon name=\"delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\nimport type { ThreadId } from '../../../types';\nimport type { MenuPositionOptions } from '../../ui/Menu';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectIsContextMenuTranslucent, selectTabState } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport GifPicker from './GifPicker';\nimport StickerPicker from './StickerPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  isMessageComposer?: boolean;\n  idPrefix: string;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n}\n& MenuPositionOptions;\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isBackgroundTranslucent?: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isMessageComposer,\n  isLeftColumnShown,\n  idPrefix,\n  isAttachmentModal,\n  canSendPlainText,\n  className,\n  isBackgroundTranslucent,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  ...menuPositionOptions\n}) => {\n  const [activeTab, setActiveTab] = useState<SymbolMenuTabs>(SymbolMenuTabs.Emoji);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, onClose, false, false);\n\n  const lang = useOldLang();\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  });\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleSearch = useLastCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  });\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            idPrefix={idPrefix}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            idPrefix={idPrefix}\n            canSendStickers={canSendStickers}\n            noContextMenus={!isMessageComposer}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name=\"slide\"\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        canSearch={isMessageComposer}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n      isMessageComposer && 'in-middle-column',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n\n      {...(isAttachmentModal ? menuPositionOptions : {\n        positionX: 'left',\n        positionY: 'bottom',\n      })}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n    };\n  },\n)(SymbolMenu));\n","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatCommand.scss';\n\ntype OwnProps<T = undefined> = {\n  command: string;\n  description: string;\n  peer?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  clickArg: T;\n  onClick: (arg: T) => void;\n};\n\nconst ChatCommand = <T,>({\n  withAvatar,\n  focus,\n  command,\n  description,\n  peer,\n  clickArg,\n  onClick,\n}: OwnProps<T>) => {\n  const handleClick = useLastCallback(() => {\n    onClick(clickArg);\n  });\n\n  return (\n    <ListItem\n      key={command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={handleClick}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" peer={peer} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">\n          /\n          {command}\n        </span>\n        <span className=\"subtitle\">{renderText(description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(ChatCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiBotCommand, ApiMessage, ApiQuickReply, ApiUser,\n} from '../../../api/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport freezeWhenClosed from '../../../util/hoc/freezeWhenClosed';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ChatCommand from './ChatCommand';\n\nimport styles from './ChatCommandTooltip.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  quickReplies?: ApiQuickReply[];\n  quickReplyMessages?: Record<number, ApiMessage>;\n  self: ApiUser;\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype QuickReplyWithDescription = {\n  id: number;\n  command: string;\n  description: string;\n};\n\nconst ChatCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  withUsername,\n  botCommands,\n  quickReplies,\n  quickReplyMessages,\n  self,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand, sendQuickReply } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useLastCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${getMainUsername(bot)}` : ''}`,\n    });\n    onClick();\n  });\n\n  const handleSendQuickReply = useLastCallback((id: number) => {\n    sendQuickReply({ chatId, quickReplyId: id });\n    onClick();\n  });\n\n  const quickRepliesWithDescription = useMemo(() => {\n    if (!quickReplies?.length || !quickReplyMessages) return undefined;\n    return quickReplies.map((reply) => {\n      const message = quickReplyMessages[reply.topMessageId];\n      return {\n        id: reply.id,\n        command: reply.shortcut,\n        description: message?.content.text?.text || '',\n      } satisfies QuickReplyWithDescription;\n    });\n  }, [quickReplies, quickReplyMessages]);\n\n  const handleKeyboardSelect = useLastCallback((item: ApiBotCommand | QuickReplyWithDescription) => {\n    if (!item.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    if ('id' in item) {\n      handleSendQuickReply(item.id);\n    } else {\n      handleSendCommand(item);\n    }\n\n    return true;\n  });\n\n  const keyboardNavigationItems = useMemo(() => {\n    if (!botCommands && !quickRepliesWithDescription) return undefined;\n    return ([] as (ApiBotCommand | QuickReplyWithDescription)[])\n      .concat(quickRepliesWithDescription || [], botCommands || []);\n  }, [botCommands, quickRepliesWithDescription]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: keyboardNavigationItems,\n    onSelect: handleKeyboardSelect,\n    onClose,\n  });\n\n  const isEmpty = (botCommands && !botCommands.length) || (quickReplies && !quickReplies.length);\n\n  useEffect(() => {\n    if (isEmpty) {\n      onClose();\n    }\n  }, [isEmpty, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  if (!shouldRender || isEmpty) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {quickRepliesWithDescription?.map((reply, index) => (\n        <ChatCommand\n          key={`quickReply_${reply.id}`}\n          command={reply.command}\n          description={reply.description}\n          peer={self}\n          withAvatar\n          clickArg={reply.id}\n          onClick={handleSendQuickReply}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n      {botCommands?.map((command, index) => (\n        <ChatCommand\n          key={`${command.botId}_${command.command}`}\n          command={command.command}\n          description={command.description}\n          // No need for expensive global updates on users and chats, so we avoid them\n          peer={getGlobal().users.byId[command.botId]}\n          withAvatar\n          clickArg={command}\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex + (quickRepliesWithDescription?.length || 0) === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(freezeWhenClosed(ChatCommandTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iaTB59vy\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport ChatCommand from './ChatCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useLastCallback((command: string) => {\n    sendBotCommand({\n      command: `/${command}`,\n    });\n    onClose();\n  });\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <ChatCommand\n          key={botCommand.command}\n          command={botCommand.command}\n          description={botCommand.description}\n          clickArg={botCommand.command}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ThreadId } from '../../../types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_8sFuAomM\",\"emojiButton\":\"crWzZ2jr\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useLastCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  });\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport ReactionSelector from '../message/reactions/ReactionSelector';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onRemoveEffect?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  chatId?: string;\n  withEffects?: boolean;\n  hasCurrentEffect?: boolean;\n  effectReactions?: ApiReaction[];\n  allAvailableReactions?: ApiAvailableReaction[];\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n  isInSavedMessages?: boolean;\n  isInStoryViewer?: boolean;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst ANIMATION_DURATION = 200;\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canSchedule,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onRemoveEffect,\n  onClose,\n  onCloseAnimationEnd,\n  chatId,\n  withEffects,\n  hasCurrentEffect,\n  effectReactions,\n  allAvailableReactions,\n  onToggleReaction,\n  canBuyPremium,\n  isCurrentUserPremium,\n  isInSavedMessages,\n  isInStoryViewer,\n  canPlayAnimatedEmojis,\n}) => {\n  const {\n    openEffectPicker,\n  } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [areItemsHidden, hideItems, showItems] = useFlag();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      showItems();\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleOpenMessageEffectsPicker = useLastCallback((position: IAnchorPosition) => {\n    hideItems();\n    if (chatId) openEffectPicker({ chatId, position });\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className={buildClassName(\n        'CustomSendMenu', 'fluid', 'with-menu-transitions', withEffects && 'with-effects',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n\n      {withEffects && !isInStoryViewer && (\n        <ReactionSelector\n          allAvailableReactions={allAvailableReactions}\n          effectReactions={effectReactions}\n          currentReactions={undefined}\n          onToggleReaction={onToggleReaction!}\n          isPrivate\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isInSavedMessages={isInSavedMessages}\n          isForEffects\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenMessageEffectsPicker}\n          onClose={onClose}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'CustomSendMenu_items',\n          areItemsHidden && 'CustomSendMenu_items-hidden',\n        )}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{oldLang('SendWithoutSound')}</MenuItem>}\n        {canSchedule && onSendSchedule && (\n          <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n            {oldLang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n        )}\n        {canSchedule && onSendSchedule && displayScheduleUntilOnline && (\n          <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n            {oldLang('SendWhenOnline')}\n          </MenuItem>\n        )}\n        {withEffects && hasCurrentEffect && (\n          <MenuItem icon=\"delete\" onClick={onRemoveEffect}>\n            {lang('RemoveEffect')}\n          </MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { IAnchorPosition } from '../../../types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../../util/getKeyFromEvent';\nimport stopEvent from '../../../util/stopEvent';\nimport { INPUT_CUSTOM_EMOJI_SELECTOR } from './helpers/customEmoji';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport useVirtualBackdrop from '../../../hooks/useVirtualBackdrop';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './TextFormatter.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  anchorPosition?: IAnchorPosition;\n  selectedRange?: Range;\n  setSelectedRange: (range: Range) => void;\n  onClose: () => void;\n};\n\ninterface ISelectedTextFormats {\n  bold?: boolean;\n  italic?: boolean;\n  underline?: boolean;\n  strikethrough?: boolean;\n  monospace?: boolean;\n  spoiler?: boolean;\n}\n\nconst TEXT_FORMAT_BY_TAG_NAME: Record<string, keyof ISelectedTextFormats> = {\n  B: 'bold',\n  STRONG: 'bold',\n  I: 'italic',\n  EM: 'italic',\n  U: 'underline',\n  DEL: 'strikethrough',\n  CODE: 'monospace',\n  SPAN: 'spoiler',\n};\nconst fragmentEl = document.createElement('div');\n\nconst TextFormatter: FC<OwnProps> = ({\n  isOpen,\n  anchorPosition,\n  selectedRange,\n  setSelectedRange,\n  onClose,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const linkUrlInputRef = useRef<HTMLInputElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen);\n  const [isLinkControlOpen, openLinkControl, closeLinkControl] = useFlag();\n  const [linkUrl, setLinkUrl] = useState('');\n  const [isEditingLink, setIsEditingLink] = useState(false);\n  const [inputClassName, setInputClassName] = useState<string | undefined>();\n  const [selectedTextFormats, setSelectedTextFormats] = useState<ISelectedTextFormats>({});\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n  useVirtualBackdrop(\n    isOpen,\n    containerRef,\n    onClose,\n    true,\n  );\n\n  useEffect(() => {\n    if (isLinkControlOpen) {\n      linkUrlInputRef.current!.focus();\n    } else {\n      setLinkUrl('');\n      setIsEditingLink(false);\n    }\n  }, [isLinkControlOpen]);\n\n  useEffect(() => {\n    if (!shouldRender) {\n      closeLinkControl();\n      setSelectedTextFormats({});\n      setInputClassName(undefined);\n    }\n  }, [closeLinkControl, shouldRender]);\n\n  useEffect(() => {\n    if (!isOpen || !selectedRange) {\n      return;\n    }\n\n    const selectedFormats: ISelectedTextFormats = {};\n    let { parentElement } = selectedRange.commonAncestorContainer;\n    while (parentElement && parentElement.id !== EDITABLE_INPUT_ID) {\n      const textFormat = TEXT_FORMAT_BY_TAG_NAME[parentElement.tagName];\n      if (textFormat) {\n        selectedFormats[textFormat] = true;\n      }\n\n      parentElement = parentElement.parentElement;\n    }\n\n    setSelectedTextFormats(selectedFormats);\n  }, [isOpen, selectedRange, openLinkControl]);\n\n  const restoreSelection = useLastCallback(() => {\n    if (!selectedRange) {\n      return;\n    }\n\n    const selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(selectedRange);\n    }\n  });\n\n  const updateSelectedRange = useLastCallback(() => {\n    const selection = window.getSelection();\n    if (selection) {\n      setSelectedRange(selection.getRangeAt(0));\n    }\n  });\n\n  const getSelectedText = useLastCallback((shouldDropCustomEmoji?: boolean) => {\n    if (!selectedRange) {\n      return undefined;\n    }\n    fragmentEl.replaceChildren(selectedRange.cloneContents());\n    if (shouldDropCustomEmoji) {\n      fragmentEl.querySelectorAll(INPUT_CUSTOM_EMOJI_SELECTOR).forEach((el) => {\n        el.replaceWith(el.getAttribute('alt')!);\n      });\n    }\n    return fragmentEl.innerHTML;\n  });\n\n  const getSelectedElement = useLastCallback(() => {\n    if (!selectedRange) {\n      return undefined;\n    }\n\n    return selectedRange.commonAncestorContainer.parentElement;\n  });\n\n  function updateInputStyles() {\n    const input = linkUrlInputRef.current;\n    if (!input) {\n      return;\n    }\n\n    const { offsetWidth, scrollWidth, scrollLeft } = input;\n    if (scrollWidth <= offsetWidth) {\n      setInputClassName(undefined);\n      return;\n    }\n\n    let className = '';\n    if (scrollLeft < scrollWidth - offsetWidth) {\n      className = 'mask-right';\n    }\n    if (scrollLeft > 0) {\n      className += ' mask-left';\n    }\n\n    setInputClassName(className);\n  }\n\n  function handleLinkUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setLinkUrl(e.target.value);\n    updateInputStyles();\n  }\n\n  function getFormatButtonClassName(key: keyof ISelectedTextFormats) {\n    if (selectedTextFormats[key]) {\n      return 'active';\n    }\n\n    if (key === 'monospace' || key === 'strikethrough') {\n      if (Object.keys(selectedTextFormats).some(\n        (fKey) => fKey !== key && Boolean(selectedTextFormats[fKey as keyof ISelectedTextFormats]),\n      )) {\n        return 'disabled';\n      }\n    } else if (selectedTextFormats.monospace || selectedTextFormats.strikethrough) {\n      return 'disabled';\n    }\n\n    return undefined;\n  }\n\n  const handleSpoilerText = useLastCallback(() => {\n    if (selectedTextFormats.spoiler) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.dataset.entityType !== ApiMessageEntityTypes.Spoiler\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        spoiler: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand(\n      'insertHTML', false, `<span class=\"spoiler\" data-entity-type=\"${ApiMessageEntityTypes.Spoiler}\">${text}</span>`,\n    );\n    onClose();\n  });\n\n  const handleBoldText = useLastCallback(() => {\n    setSelectedTextFormats((selectedFormats) => {\n      // Somehow re-applying 'bold' command to already bold text doesn't work\n      document.execCommand(selectedFormats.bold ? 'removeFormat' : 'bold');\n      Object.keys(selectedFormats).forEach((key) => {\n        if ((key === 'italic' || key === 'underline') && Boolean(selectedFormats[key])) {\n          document.execCommand(key);\n        }\n      });\n\n      updateSelectedRange();\n      return {\n        ...selectedFormats,\n        bold: !selectedFormats.bold,\n      };\n    });\n  });\n\n  const handleItalicText = useLastCallback(() => {\n    document.execCommand('italic');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      italic: !selectedFormats.italic,\n    }));\n  });\n\n  const handleUnderlineText = useLastCallback(() => {\n    document.execCommand('underline');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      underline: !selectedFormats.underline,\n    }));\n  });\n\n  const handleStrikethroughText = useLastCallback(() => {\n    if (selectedTextFormats.strikethrough) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'DEL'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        strikethrough: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand('insertHTML', false, `<del>${text}</del>`);\n    onClose();\n  });\n\n  const handleMonospaceText = useLastCallback(() => {\n    if (selectedTextFormats.monospace) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'CODE'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        monospace: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    document.execCommand('insertHTML', false, `<code class=\"text-entity-code\" dir=\"auto\">${text}</code>`);\n    onClose();\n  });\n\n  const handleLinkUrlConfirm = useLastCallback(() => {\n    const formattedLinkUrl = (ensureProtocol(linkUrl) || '').split('%').map(encodeURI).join('%');\n\n    if (isEditingLink) {\n      const element = getSelectedElement();\n      if (!element || element.tagName !== 'A') {\n        return;\n      }\n\n      (element as HTMLAnchorElement).href = formattedLinkUrl;\n\n      onClose();\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    restoreSelection();\n    document.execCommand(\n      'insertHTML',\n      false,\n      `<a href=${formattedLinkUrl} class=\"text-entity-link\" dir=\"auto\">${text}</a>`,\n    );\n    onClose();\n  });\n\n  const handleKeyDown = useLastCallback((e: KeyboardEvent) => {\n    const HANDLERS_BY_KEY: Record<string, AnyToVoidFunction> = {\n      k: openLinkControl,\n      b: handleBoldText,\n      u: handleUnderlineText,\n      i: handleItalicText,\n      m: handleMonospaceText,\n      s: handleStrikethroughText,\n      p: handleSpoilerText,\n    };\n\n    const handler = HANDLERS_BY_KEY[getKeyFromEvent(e)];\n\n    if (\n      e.altKey\n      || !(e.ctrlKey || e.metaKey)\n      || !handler\n    ) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    handler();\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      document.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, handleKeyDown]);\n\n  const lang = useOldLang();\n\n  function handleContainerKeyDown(e: React.KeyboardEvent<HTMLDivElement>) {\n    if (e.key === 'Enter' && isLinkControlOpen) {\n      handleLinkUrlConfirm();\n      e.preventDefault();\n    }\n  }\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'TextFormatter',\n    transitionClassNames,\n    isLinkControlOpen && 'link-control-shown',\n  );\n\n  const linkUrlConfirmClassName = buildClassName(\n    'TextFormatter-link-url-confirm',\n    Boolean(linkUrl.length) && 'shown',\n  );\n\n  const style = anchorPosition\n    ? `left: ${anchorPosition.x}px; top: ${anchorPosition.y}px;--text-formatter-left: ${anchorPosition.x}px;`\n    : '';\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      style={style}\n      onKeyDown={handleContainerKeyDown}\n      // Prevents focus loss when clicking on the toolbar\n      onMouseDown={stopEvent}\n    >\n      <div className=\"TextFormatter-buttons\">\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Spoiler text\"\n          className={getFormatButtonClassName('spoiler')}\n          onClick={handleSpoilerText}\n        >\n          <Icon name=\"eye-crossed\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Bold text\"\n          className={getFormatButtonClassName('bold')}\n          onClick={handleBoldText}\n        >\n          <Icon name=\"bold\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Italic text\"\n          className={getFormatButtonClassName('italic')}\n          onClick={handleItalicText}\n        >\n          <Icon name=\"italic\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Underlined text\"\n          className={getFormatButtonClassName('underline')}\n          onClick={handleUnderlineText}\n        >\n          <Icon name=\"underlined\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Strikethrough text\"\n          className={getFormatButtonClassName('strikethrough')}\n          onClick={handleStrikethroughText}\n        >\n          <Icon name=\"strikethrough\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Monospace text\"\n          className={getFormatButtonClassName('monospace')}\n          onClick={handleMonospaceText}\n        >\n          <Icon name=\"monospace\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button color=\"translucent\" ariaLabel={lang('TextFormat.AddLinkTitle')} onClick={openLinkControl}>\n          <Icon name=\"link\" />\n        </Button>\n      </div>\n\n      <div className=\"TextFormatter-link-control\">\n        <div className=\"TextFormatter-buttons\">\n          <Button color=\"translucent\" ariaLabel={lang('Cancel')} onClick={closeLinkControl}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <div className=\"TextFormatter-divider\" />\n\n          <div\n            className={buildClassName('TextFormatter-link-url-input-wrapper', inputClassName)}\n          >\n            <input\n              ref={linkUrlInputRef}\n              className=\"TextFormatter-link-url-input\"\n              type=\"text\"\n              value={linkUrl}\n              placeholder=\"Enter URL...\"\n              autoComplete=\"off\"\n              inputMode=\"url\"\n              dir=\"auto\"\n              onChange={handleLinkUrlChange}\n              onScroll={updateInputStyles}\n            />\n          </div>\n\n          <div className={linkUrlConfirmClassName}>\n            <div className=\"TextFormatter-divider\" />\n            <Button\n              color=\"translucent\"\n              ariaLabel={lang('Save')}\n              className=\"color-primary\"\n              onClick={handleLinkUrlConfirm}\n            >\n              <Icon name=\"check\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(TextFormatter);\n","export default function getKeyFromEvent(e: KeyboardEvent) {\n  const key = e.key || e.code;\n\n  return key.startsWith('Key') ? key.slice(3).toLowerCase() : key;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/visibility/isFullyVisible';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport CustomEmojiButton from './CustomEmojiButton';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useLastCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  });\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const handleSelect = useLastCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  });\n\n  const handleClick = useLastCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  });\n\n  const handleCustomEmojiClick = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    shouldRemoveSelectionOnReset: true,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getWebDocumentHash } from '../../../../global/helpers';\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? getWebDocumentHash(thumbnail) : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult;\n  onClick: (result: ApiBotInlineResult | ApiBotInlineMediaResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, description,\n  } = inlineResult;\n\n  const url = 'url' in inlineResult ? inlineResult.url : undefined;\n  const webThumbnail = 'webThumbnail' in inlineResult ? inlineResult.webThumbnail : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiVideo } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useLastCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  });\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport { getPhotoMediaHash, getWebDocumentHash } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailBlobUrl = useMedia(getWebDocumentHash(webThumbnail));\n  const mediaBlobUrl = useMedia(photo && getPhotoMediaHash(photo, 'pictogram'));\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl || thumbnailBlobUrl);\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailBlobUrl} alt=\"\" draggable={false} />\n        <img\n          src={mediaBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      thumbUrl={mediaBlobUrl || thumbnail?.dataUri}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport MediaResult from './inlineResults/MediaResult';\nimport StickerResult from './inlineResults/StickerResult';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean,\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useLastCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  });\n\n  const handleOpenWebview = useLastCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n      isFromSwitchWebView: true,\n    });\n  });\n\n  const prevInlineBotResults = usePreviousDeprecated(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useLastCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  });\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = usersById[id];\n        const chat = chatsById[id];\n        const peer = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <Icon name=\"lock-badge\" className=\"send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              peer={peer}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {peer && <FullNameTitle peer={peer} noFake />}\n              <span className=\"subtitle\">\n                {user\n                  ? lang('VoipGroupPersonalAccount')\n                  : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerButton from '../common/StickerButton';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { throttle } from '../../util/schedulers';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiVideo } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf, selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport GifButton from '../common/GifButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n  currentMessageList?: MessageList;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  chatFullInfo,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat\n    && getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (!currentMessageList) {\n        return;\n      }\n\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({\n            messageList: currentMessageList,\n            gif,\n            scheduledAt,\n            isSilent,\n          });\n        });\n      } else {\n        sendMessage({ messageList: currentMessageList, gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, currentMessageList, requestCalendar]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canPostInChat = Boolean(chat) && Boolean(threadId)\n      && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(GifSearch));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OAKzmAva\",\"withImage\":\"BQ6HUOqN\",\"imageContainer\":\"TmJvv2A6\",\"image\":\"U96CW2I7\",\"round\":\"yxjDeIct\",\"circle\":\"cdfiLmXo\",\"withStoryCircle\":\"BOfHPv20\",\"summary\":\"vXi2JQlj\",\"title\":\"bi3fL59p\",\"info\":\"GUK4ajPK\",\"meta\":\"YH6jeZIh\",\"metaWithIcon\":\"q1LnuIUn\",\"metaIcon\":\"PJZzyVLK\",\"date\":\"C7NpG5Y9\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { StatisticsMessageInteractionCounter, StatisticsStoryInteractionCounter } from '../../../api/types';\n\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\ninterface OwnProps {\n  postStatistic: StatisticsStoryInteractionCounter | StatisticsMessageInteractionCounter;\n}\n\nfunction StatisticsRecentPostMeta({ postStatistic }: OwnProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  return (\n    <div className={styles.meta}>\n      {postStatistic.reactionsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"heart-outline\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.reactionsCount)}\n        </span>\n      )}\n\n      {postStatistic.forwardsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"forward\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.forwardsCount)}\n        </span>\n      )}\n\n      {!postStatistic.forwardsCount && !postStatistic.reactionsCount\n        && oldLang('ChannelStats.SharesCount_ZeroValueHolder')}\n    </div>\n  );\n}\n\nexport default memo(StatisticsRecentPostMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsMessageInteractionCounter } from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageRoundVideo,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  postStatistic: StatisticsMessageInteractionCounter;\n  message: ApiMessage;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ postStatistic, message }) => {\n  const lang = useOldLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        Boolean(mediaBlobUrl || mediaThumbnail) && styles.withImage,\n      )}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: OldLangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span>\n      <img\n        src={blobUrl}\n        alt=\"\"\n        draggable={false}\n        className={buildClassName(styles.image, isRoundVideo && styles.round)}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiTypeStory,\n  StatisticsStoryInteractionCounter,\n} from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport { getStoryMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  story?: ApiTypeStory;\n  postStatistic: StatisticsStoryInteractionCounter;\n};\n\nfunction StatisticsRecentStory({ chat, story, postStatistic }: OwnProps) {\n  const lang = useOldLang();\n  const { toggleStoryStatistics } = getActions();\n  const isLoaded = story && 'content' in story;\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const mediaThumbnail = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  const handleClick = useLastCallback(() => {\n    toggleStoryStatistics({ storyId: postStatistic.storyId });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, styles.withImage)}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, chat, imgBlobUrl || mediaThumbnail)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {isLoaded && Boolean(story.date) && formatDateTimeToString(story.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n}\n\nfunction renderSummary(lang: OldLangFn, chat: ApiChat, blobUrl?: string) {\n  return (\n    <span>\n      {blobUrl ? (\n        <span className={styles.imageContainer}>\n          <img\n            src={blobUrl}\n            alt=\"\"\n            draggable={false}\n            className={buildClassName(styles.image, styles.circle, styles.withStoryCircle)}\n          />\n        </span>\n      ) : (\n        <Avatar\n          peer={chat}\n          size=\"small\"\n          className={styles.image}\n          withStorySolid\n          forceUnreadStorySolid\n        />\n      )}\n\n      {lang('Story')}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentStory);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"T1l_4J8z\",\"pie-slim-in\":\"EgyLOizu\",\"pieSlimIn\":\"EgyLOizu\",\"pie-slim-out\":\"TBiNdFb4\",\"pieSlimOut\":\"TBiNdFb4\",\"messages\":\"suY9dEIz\",\"publicForwards\":\"S1x1ovkC\",\"messages-title\":\"evQIkAqx\",\"messagesTitle\":\"evQIkAqx\",\"publicForwards-title\":\"WxL3i5PM\",\"publicForwardsTitle\":\"WxL3i5PM\",\"ready\":\"aUrozL5_\",\"graph\":\"QQHwjG88\",\"hidden\":\"QGctP1Nk\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChannelStatistics,\n  ApiChat,\n  ApiGroupStatistics,\n  ApiMessage,\n  ApiTypeStory,\n} from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStories,\n  selectStatistics,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\nimport StatisticsRecentStory from './StatisticsRecentStory';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n  reactionsByEmotionGraph: 'ChannelStats.Graph.Reactions',\n  storyInteractionsGraph: 'ChannelStats.Graph.Stories',\n  storyReactionsByEmotionGraph: 'ChannelStats.Graph.StoriesReactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  chat?: ApiChat;\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n  messagesById: Record<string, ApiMessage>;\n  storiesById?: Record<string, ApiTypeStory>;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  statistics,\n  dcId,\n  isGroup,\n  messagesById,\n  storiesById,\n}) => {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll', isReady && styles.ready)}>\n      {statistics && (\n        <StatisticsOverview\n          statistics={statistics}\n          type={isGroup ? 'group' : 'channel'}\n          title={lang('StatisticOverview')}\n        />\n      )}\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics)?.recentPosts?.length) && (\n        <div className={styles.messages}>\n          <h2 className={styles.messagesTitle}>{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentPosts.map((postStatistic) => {\n            if ('msgId' in postStatistic) {\n              const message = messagesById[postStatistic.msgId];\n              if (!message || !('content' in message)) return undefined;\n\n              return (\n                <StatisticsRecentMessage\n                  key={`statistic_message_${postStatistic.msgId}`}\n                  message={message}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            if ('storyId' in postStatistic && chat) {\n              const story = storiesById?.[postStatistic.storyId];\n\n              return (\n                <StatisticsRecentStory\n                  key={`statistic_story_${postStatistic.storyId}`}\n                  chat={chat}\n                  story={story}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            return undefined;\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n    const messagesById = selectChatMessages(global, chatId);\n    const storiesById = selectPeerStories(global, chatId)?.byId;\n\n    return {\n      statistics, dcId, isGroup, chat, messagesById, storiesById,\n    };\n  },\n)(Statistics));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oXLpD4Y4\",\"title\":\"paQ2VBe_\",\"views\":\"WvFuOAIf\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsMessagePublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useOldLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => (data.chat ? getMainUsername(data.chat) : undefined), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={data.chat} />\n\n      <div>\n        <div className={styles.title}>\n          {data.title}\n        </div>\n\n        <div className={styles.views}>\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsMessagePublicForward);\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessagePublicForward,\n  ApiPostStatistics,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { STATISTICS_PUBLIC_FORWARDS_LIMIT } from '../../../config';\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nfunction Statistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadMessagePublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards && messageId) {\n      loadMessagePublicForwards({ chatId, messageId });\n    }\n  });\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <StatisticsOverview statistics={statistics} type=\"message\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName(styles.graph, !loadedCharts.current.includes(graph) && styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            preloadBackwards={STATISTICS_PUBLIC_FORWARDS_LIMIT}\n            noFastList\n          >\n            {(statistics.publicForwardsData as ApiMessagePublicForward[]).map((item) => (\n              <StatisticsMessagePublicForward key={item.messageId} data={item} />\n            ))}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiStoryPublicForward, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiStoryPublicForward;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nfunction StatisticsMessagePublicForward({ data, chatsById, usersById }: OwnProps) {\n  const lang = useOldLang();\n  const { openChat } = getActions();\n  const user = usersById[data.peerId];\n  const chat = chatsById[data.peerId];\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: user.id });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={user || chat} withStorySolid forceUnreadStorySolid />\n\n      <div>\n        <div className={styles.title}>\n          {user ? getUserFullName(user) : getChatTitle(lang, chat)}\n        </div>\n\n        <div className={styles.views}>\n          {data.viewsCount ? lang('ChannelStats.ViewsCount', data.viewsCount, 'i') : lang('NoViews')}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(StatisticsMessagePublicForward);\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiPostStatistics,\n  ApiUser,\n  StatisticsGraph,\n} from '../../../api/types';\n\nimport { STATISTICS_PUBLIC_FORWARDS_LIMIT } from '../../../config';\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsStoryPublicForward from './StatisticsStoryPublicForward';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.StoryInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  storyId?: number;\n  dcId?: number;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n};\n\nfunction StoryStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  storyId,\n  chatsById,\n  usersById,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStoryStatistics, loadStoryPublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (storyId) {\n      loadStoryStatistics({ chatId, storyId });\n    }\n  }, [chatId, storyId]);\n\n  useEffect(() => {\n    if (!isActive || storyId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, storyId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, storyId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!storyId) return;\n\n    loadStoryPublicForwards({ chatId, storyId });\n  });\n\n  if (!isReady || !statistics || !storyId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <StatisticsOverview statistics={statistics} type=\"story\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName(styles.graph, !loadedCharts.current.includes(graph) && styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            preloadBackwards={STATISTICS_PUBLIC_FORWARDS_LIMIT}\n            noFastList\n          >\n            {statistics.publicForwardsData!.map((item) => {\n              if ('messageId' in item) {\n                return (\n                  <StatisticsMessagePublicForward key={`message_${item.messageId}`} data={item} />\n                );\n              }\n\n              return (\n                <StatisticsStoryPublicForward\n                  key={`story_${item.storyId}`}\n                  data={item}\n                  chatsById={chatsById}\n                  usersById={usersById}\n                />\n              );\n            })}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentStory;\n    const storyId = tabState.statistics.currentStoryId;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      statistics, dcId, storyId, usersById, chatsById,\n    };\n  },\n)(StoryStatistics));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport ShowMoreButton from '../ui/ShowMoreButton';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePreviousDeprecated<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useOldLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n\n              onClick={() => handleMemberClick(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo\n                  avatarSize=\"tiny\"\n                  userId={id}\n                  forceShowSelf\n                  noStatusOrTyping\n                />\n              ) : (\n                <GroupChatInfo\n                  avatarSize=\"tiny\"\n                  chatId={id}\n                  noStatusOrTyping\n                />\n              )}\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: text.text,\n            entities: text.entities,\n          })}\n        </span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}\n          %\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiPoll } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectPollFromMessage, selectTabState,\n} from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport PollAnswerResults from './PollAnswerResults';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  poll?: ApiPoll;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  message,\n  poll,\n  onClose,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !poll || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = poll;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n        })}\n      </h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${poll.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n    const poll = message && selectPollFromMessage(global, message);\n\n    return {\n      chat,\n      message,\n      poll,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xrnUE4e6\",\"content\":\"z7kF7tij\",\"section\":\"T6wFpdQO\",\"general\":\"YftUWqqw\",\"top\":\"CWsWIKQ1\",\"bottom\":\"KBl0ycLl\",\"iconWrapper\":\"iJ1U9kDD\",\"icon\":\"Rk6PT_yc\",\"clickable\":\"K1CTKtBS\",\"heading\":\"qlo3vSEw\",\"icon-picker\":\"r06zwL42\",\"iconPicker\":\"r06zwL42\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getTopicColors } from '../../util/forumColors';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            pickerListClassName=\"fab-padding-bottom\"\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport {\n  selectChat, selectIsCurrentUserPremium, selectTabState, selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Loading from '../ui/Loading';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top, isGeneral && styles.general)}>\n              <span className={styles.heading}>{lang(isGeneral ? 'CreateGeneralTopicTitle' : 'CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  pickerListClassName=\"fab-padding-bottom\"\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.chatId && editTopicPanel?.topicId\n      ? selectTopic(global, editTopicPanel.chatId, editTopicPanel.topicId) : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotInfo, ApiUser } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  getChatAvatarHash, getMainUsername, getUserFirstOrLastName,\n} from '../../../global/helpers';\nimport {\n  selectBot,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  userId?: string;\n  user?: ApiUser;\n  chatBot?: ApiBotInfo;\n  currentBio?: string;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  maxBioLength: number;\n};\n\nconst ERROR_NAME_MISSING = 'Please provide name';\n\nconst ManageBot: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  onClose,\n  currentBio,\n  isActive,\n  maxBioLength,\n}) => {\n  const {\n    setBotInfo,\n    uploadProfilePhoto,\n    uploadContactProfilePhoto,\n    startBotFatherConversation,\n  } = getActions();\n\n  const [isFieldTouched, markFieldTouched, unmarkProfileTouched] = useFlag(false);\n  const [isAvatarTouched, markAvatarTouched, unmarkAvatarTouched] = useFlag(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useOldLang();\n\n  const username = useMemo(() => (user ? getMainUsername(user) : undefined), [user]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentName = user ? getUserFirstOrLastName(user) : '';\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [name, setName] = useState(currentName || '');\n  const [bio, setBio] = useState(currentBio || '');\n\n  const currentAvatarHash = user && getChatAvatarHash(user);\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  useEffect(() => {\n    unmarkProfileTouched();\n    unmarkAvatarTouched();\n  }, [userId]);\n\n  useEffect(() => {\n    setName(currentName || '');\n    setBio(currentBio || '');\n  }, [currentName, currentBio, user]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkProfileTouched();\n      unmarkAvatarTouched();\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleNameChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    markFieldTouched();\n\n    if (error === ERROR_NAME_MISSING) {\n      setError(undefined);\n    }\n  });\n\n  const handleBioChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    markFieldTouched();\n  });\n\n  const handlePhotoChange = useLastCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n    markAvatarTouched();\n  });\n\n  const handleProfileSave = useLastCallback(() => {\n    const trimmedName = name.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedName.length) {\n      setError(ERROR_NAME_MISSING);\n      return;\n    }\n\n    setBotInfo({\n      ...(isFieldTouched && {\n        bot: user,\n        name: trimmedName,\n        description: trimmedBio,\n      }),\n    });\n\n    if (photo) {\n      uploadProfilePhoto({\n        file: photo,\n        ...(isAvatarTouched && { bot: user }),\n      });\n    }\n  });\n\n  const handleChangeEditIntro = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-intro` });\n  });\n\n  const handleChangeEditCommands = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-commands` });\n  });\n\n  const handleChangeSettings = useLastCallback(() => {\n    startBotFatherConversation({ param: username! });\n  });\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSelectAvatar = useLastCallback((file: File) => {\n    markAvatarTouched();\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  });\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title={lang('ChatSetPhotoOrVideo')}\n            disabled={isLoading}\n          />\n          <InputText\n            id=\"user-name\"\n            label={lang('PaymentCheckoutName')}\n            onChange={handleNameChange}\n            value={name}\n            error={error === ERROR_NAME_MISSING ? error : undefined}\n            teactExperimentControlled\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('DescriptionPlaceholder')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n        </div>\n        <div className=\"section\">\n          <div className=\"dialog-buttons\">\n            <ListItem icon=\"bot-commands-filled\" ripple onClick={handleChangeEditIntro}>\n              <span>{lang('BotEditIntro')}</span>\n            </ListItem>\n            <ListItem icon=\"bot-command\" ripple onClick={handleChangeEditCommands}>\n              <span>{lang('BotEditCommands')}</span>\n            </ListItem>\n            <ListItem icon=\"bots\" ripple onClick={handleChangeSettings}>\n              <span>{lang('BotChangeSettings')}</span>\n            </ListItem>\n            <div className=\"section-info section-info_push\">\n              {renderText(lang('BotManageInfo'), ['links'])}\n            </div>\n          </div>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isFieldTouched || isAvatarTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectBot(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    return {\n      userId,\n      user,\n      progress,\n      currentBio: userFullInfo?.bio,\n      maxBioLength,\n    };\n  },\n)(ManageBot));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  availableReactions?: ApiAvailableReaction[];\n  hasAutoTranslation?: boolean;\n  canToggleAutoTranslation?: boolean;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n  hasAutoTranslation,\n  canToggleAutoTranslation,\n}) => {\n  const {\n    updateChat,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleAutoTranslation,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useOldLang();\n\n  const hasAutoTranslationAvailable = chat && isChatChannel(chat);\n\n  const handleAutoTranslationChange = useLastCallback(() => {\n    toggleAutoTranslation({ chatId, isEnabled: !hasAutoTranslation });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!canInvite) return;\n    loadExportedChatInvites({ chatId });\n    loadExportedChatInvites({ chatId, isRevoked: true });\n    loadChatJoinRequests({ chatId });\n  }, [chatId, canInvite]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateChannel = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickSubscribers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  });\n\n  const handleRemovedUsersClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  });\n\n  const handleDeleteChannel = useLastCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"channel-title\"\n              label={lang('EnterChannelName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"channel-about\"\n              label={lang('DescriptionPlaceholder')}\n              onChange={handleAboutChange}\n              value={about}\n              maxLength={CHANNEL_MAX_DESCRIPTION}\n              maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          {hasAutoTranslationAvailable && (\n            <ListItem\n              icon=\"language\"\n              narrow\n              ripple\n              disabled={!canToggleAutoTranslation}\n              onClick={handleAutoTranslationChange}\n            >\n              <span>{lang('AutomaticTranslation')}</span>\n              <Switcher\n                id=\"auto-translation\"\n                label={lang('AutomaticTranslation')}\n                checked={hasAutoTranslation}\n              />\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{formatInteger(chat.membersCount!)}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const { invites } = management.byChatId[chatId] || {};\n    const minLevelToToggleAutoTranslation = global.appConfig?.channelAutoTranslationLevelMin;\n    const hasAutoTranslation = chat?.hasAutoTranslation;\n    const chatBoostLevel = chat?.level;\n    const canToggleAutoTranslation = chatBoostLevel && minLevelToToggleAutoTranslation\n      ? chatBoostLevel >= minLevelToToggleAutoTranslation : false;\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      availableReactions: global.reactions.availableReactions,\n      hasAutoTranslation,\n      canToggleAutoTranslation,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageChannel));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  isChannel?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n}) => {\n  const { toggleSignatures } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const areSignaturesEnabled = Boolean(chat?.areSignaturesShown);\n  const areProfilesEnabled = Boolean(chat?.areProfilesShown);\n\n  const canAddNewAdmins = Boolean(chat?.isCreator || (chat && getHasAdminRight(chat, 'addAdmins')));\n  const canToggleSignatures = isChannel && getHasAdminRight(chat!, 'postMessages');\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    const [owner, admins] = partition(Object.values(adminMembersById), (member) => member.isOwner);\n\n    return [...owner, ...admins];\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useLastCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  });\n\n  const handleToggleSignatures = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled,\n      areSignaturesEnabled: !areSignaturesEnabled,\n    });\n  });\n\n  const handleToggleProfiles = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled: !areProfilesEnabled,\n      areSignaturesEnabled,\n    });\n  });\n\n  const handleAddAdminClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  });\n\n  const getMemberStatus = useLastCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\" dir=\"auto\">\n            {lang(isChannel\n              ? 'Channel.Management.AddModeratorHelp'\n              : 'Group.Management.AddModeratorHelp')}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <Icon name=\"add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n\n        {canToggleSignatures && (\n          <div className=\"section\">\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={areSignaturesEnabled}\n                label={lang('ChannelSignMessages')}\n                onChange={handleToggleSignatures}\n              />\n            </div>\n            {areSignaturesEnabled && (\n              <>\n                <div className=\"ListItem narrow\">\n                  <Checkbox\n                    checked={areProfilesEnabled}\n                    label={lang('ChannelSignMessagesWithProfile')}\n                    onChange={handleToggleProfiles}\n                  />\n                </div>\n                <p className=\"section-info section-info_push\">\n                  {lang('ChannelSignProfilesInfo')}\n                </p>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: chat && isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo,\n  selectManagement, selectTabState,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Spinner from '../../ui/Spinner';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n    resetManagementError,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n\n    if (error) {\n      resetManagementError({\n        chatId: chat.id,\n      });\n    }\n  }, [chat.id, error]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '', shouldDisableUsernames: true });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useOldLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 0;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <LinkField link={privateInviteLink} className=\"invite-link\" />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <div className=\"settings-input\">\n              <UsernameInput\n                asLink\n                currentUsername={currentUsername}\n                isLoading={isLoading}\n                isUsernameAvailable={isUsernameAvailable}\n                checkedUsername={checkedUsername}\n                onChange={handleUsernameChange}\n              />\n            </div>\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId);\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId) && selectManagement(global, chatId));\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    return filterPeersByQuery({ ids: availableMemberIds, query: search, type: 'user' });\n  }, [chatMembers, currentUserId, search]);\n\n  const handleLoadMore = useLastCallback(() => {\n    loadMoreMembers({ chatId: chat.id });\n  });\n\n  const handleRemoveUser = useLastCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  });\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={handleLoadMore}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useOldLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember): MenuItemContextAction[] | undefined => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <Icon name=\"add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Avatar from '../../common/Avatar';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useOldLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (isChatPublic(linkedGroup)) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat?.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line @stylistic/max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat?.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        {linkedChat && (\n          <ListItem\n            className=\"chat-item-clickable\"\n            inactive\n          >\n            <GroupChatInfo chatId={linkedChat.id} />\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat?.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  const handleNewGroupClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.NewDiscussionGroup);\n  });\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            className=\"create-item\"\n            withPrimaryColor\n            teactOrderKey={0}\n            onClick={handleNewGroupClick}\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={isJoinToSend}\n                onCheck={handleJoinToSendCheck}\n                label={lang('ChannelSettingsJoinToSend')}\n              />\n            </div>\n            {isJoinToSend && (\n              <div className=\"ListItem narrow\">\n                <Checkbox\n                  checked={isJoinRequest}\n                  onCheck={handleJoinRequestCheck}\n                  label={lang('ChannelSettingsJoinRequest')}\n                />\n              </div>\n            )}\n            <p className=\"section-info section-info_push\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId ? selectChat(global, linkedChatId) : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { debounce } from '../../../util/schedulers';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => isChatPublic(chat), [chat]);\n  const lang = useOldLang();\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, canInvite]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickPermissions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateGroup = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickMembers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  });\n\n  const handleTogglePreHistory = useLastCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  });\n\n  const handleForumToggle = useLastCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  });\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useLastCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"group-title\"\n              label={lang('GroupName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === GROUP_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"group-about\"\n              label={lang('DescriptionPlaceholder')}\n              maxLength={GROUP_MAX_DESCRIPTION}\n              maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n              onChange={handleAboutChange}\n              value={about}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}\n              /\n              {TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && !hasLinkedChannel && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                subLabel={\n                  chatFullInfo.isPreHistoryHidden ? lang('ChatHistoryHiddenInfo2') : lang('ChatHistoryVisibleInfo')\n                }\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n    const canChangeInfo = chat.isCreator || getHasAdminRight(chat, 'changeInfo');\n    const canBanUsers = chat.isCreator || getHasAdminRight(chat, 'banUsers');\n    const canInvite = chat.isCreator || getHasAdminRight(chat, 'inviteUsers');\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo,\n      canBanUsers,\n      canInvite,\n      exportedInvites: invites,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.reactions.availableReactions,\n      canEditForum,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isActive,\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"postStories\"\n              checked={Boolean(permissions.postStories)}\n              label={lang('EditAdminPostStories')}\n              blocking\n              disabled={getControlIsDisabled('postStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"editStories\"\n              checked={Boolean(permissions.editStories)}\n              label={lang('EditAdminEditStories')}\n              blocking\n              disabled={getControlIsDisabled('editStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteStories\"\n              checked={Boolean(permissions.deleteStories)}\n              label={lang('EditAdminDeleteStories')}\n              blocking\n              disabled={getControlIsDisabled('deleteStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens, NewChatMembersProgress } from '../../../types';\n\nimport {\n  getHasAdminRight, isChatBasicGroup,\n  isChatChannel, isUserBot, isUserRightBanned, sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport usePeerStoriesPolling from '../../../hooks/polling/usePeerStoriesPolling';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Switcher from '../../ui/Switcher';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  canAddMembers?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  canAddMembers,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement,\n    toggleParticipantsHidden, setNewChatMembersDialogState, toggleManagement,\n  } = getActions();\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  usePeerStoriesPolling(memberIds);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  });\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  const handleToggleParticipantsHidden = useLastCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    toggleManagement();\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"panel-content custom-scroll\">\n        {canHideParticipants && !isChannel && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                  withPortalForMenu\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf withStory />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig?.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n      && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const canAddMembers = chat && ((getHasAdminRight(chat, 'inviteUsers')\n      || (!isChannel && !isUserRightBanned(chat, 'inviteUsers')))\n    || chat.isCreator\n    );\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      canAddMembers,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  progress?: ManagementProgress;\n  currentUserId?: string;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n  arePaidMessagesAvailable?: boolean;\n  groupPeersPaidStars: number;\n  canChargeForMessages?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  progress,\n  currentUserId,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n  arePaidMessagesAvailable,\n  canChargeForMessages,\n  groupPeersPaidStars,\n}) => {\n  const { updateChatDefaultBannedRights, updatePaidMessagesPrice } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  const [isPriceForMessagesChanged, markPriceForMessagesChanged, unmarkPriceForMessagesChanged] = useFlag();\n  const [isPriceForMessagesOpen, setIsPriceForMessagesOpen] = useState(canChargeForMessages);\n  const [chargeForMessages, setChargeForMessages] = useState<number>(groupPeersPaidStars);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkPriceForMessagesChanged();\n    }\n  }, [progress]);\n\n  const handleSavePermissions = useLastCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  });\n\n  const handleUpdatePaidMessagesPrice = useLastCallback(() => {\n    if (!chat) return;\n    updatePaidMessagesPrice({\n      chatId: chat?.id,\n      paidMessagesStars: isPriceForMessagesOpen ? chargeForMessages : 0,\n    });\n  });\n\n  const handleUpdatePermissions = useLastCallback(() => {\n    if (isPriceForMessagesChanged) {\n      handleUpdatePaidMessagesPrice();\n    }\n    if (havePermissionChanged) {\n      handleSavePermissions();\n    }\n  });\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = oldLang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, oldLang]);\n\n  const handleChargeStarsForMessages = useLastCallback(() => {\n    setIsPriceForMessagesOpen(!isPriceForMessagesOpen);\n    markPriceForMessagesChanged();\n  });\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    setChargeForMessages(value);\n    markPriceForMessagesChanged();\n  });\n\n  const arePermissionsChanged = isPriceForMessagesChanged || havePermissionChanged;\n  const arePermissionsLoading = progress === ManagementProgress.InProgress || isLoading;\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            dropdownClassName=\"DropdownListTrap\"\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n          />\n        </div>\n\n        {arePaidMessagesAvailable && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem onClick={handleChargeStarsForMessages}>\n              <span>{lang('GroupMessagesChargePrice')}</span>\n              <Switcher\n                id=\"charge_for_messages\"\n                label={lang('GroupMessagesChargePrice')}\n                checked={isPriceForMessagesOpen}\n              />\n            </ListItem>\n            <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('RightsChargeStarsAbout')}\n            </p>\n          </div>\n        )}\n\n        {isPriceForMessagesOpen && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <PaidMessagePrice\n              canChangeChargeForMessages\n              isGroupChat\n              chargeForMessages={chargeForMessages}\n              onChange={handleChargeForMessagesChange}\n            />\n          </div>\n        )}\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={arePermissionsChanged}\n        onClick={handleUpdatePermissions}\n        ariaLabel={lang('Save')}\n        disabled={arePermissionsLoading}\n      >\n        {arePermissionsLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { progress } = selectTabState(global).management;\n\n    const paidMessagesStars = chat?.paidMessagesStars;\n    const configStarsPaidMessageCommissionPermille = global.appConfig?.starsPaidMessageCommissionPermille;\n\n    return {\n      chat,\n      progress,\n      currentUserId: global.currentUserId,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n      arePaidMessagesAvailable: Boolean(fullInfo?.arePaidMessagesAvailable && configStarsPaidMessageCommissionPermille),\n      canChargeForMessages: Boolean(paidMessagesStars && configStarsPaidMessageCommissionPermille),\n      groupPeersPaidStars: paidMessagesStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{oldLang('UserRestrictionsCanDo')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            dropdownClassName=\"DropdownListTrap\"\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n            getControlIsDisabled={getControlIsDisabled}\n          />\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {oldLang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={oldLang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text={lang('GroupManagementBanUserConfirm')}\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { isChatChannel, sortUserIds } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"section-help hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-heading\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)}\n              {' '}\n              {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"section-help hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-heading\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"section-help hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId] || {};\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useOldLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"section-help\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"section-help\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"panel-content custom-scroll\">\n        {!invite && (\n          <p className=\"section-help\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <LinkField title={invite.title} link={invite.link} className=\"invite-link\" />\n              {Boolean(expireDate) && (\n                <p className=\"section-help\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p className=\"section-heading\">{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId] || {};\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport NothingFound from '../../common/NothingFound';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(forceUpdate, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.hasUsername ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.hasUsername, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: oldLang('LinkCopied'),\n    });\n  }, [oldLang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = oldLang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = oldLang('PeopleJoined', usage);\n    } else {\n      text = oldLang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${oldLang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${oldLang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${oldLang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = expireDate - getServerTime();\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += oldLang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += oldLang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${oldLang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions: MenuItemContextAction[] = [];\n    actions.push({\n      title: oldLang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: oldLang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: oldLang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: oldLang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"section-help\">{isChannel ? oldLang('PrimaryLinkHelpChannel') : oldLang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <LinkField\n              className=\"settings-input\"\n              link={primaryInviteLink}\n              withShare\n              onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n              title={chat?.usernames ? oldLang('PublicLink') : oldLang('lng_create_permanent_link_title')}\n            />\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <ListItem icon=\"add\" withPrimaryColor key=\"create\" className=\"create-item\" onClick={handleCreateNewClick}>\n            {oldLang('CreateNewLink')}\n          </ListItem>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"section-help hint\" key=\"links-hint\">{oldLang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"section-help\" key=\"title\">{oldLang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{oldLang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={oldLang('DeleteAllRevokedLinks')}\n        text={oldLang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={oldLang('RevokeLink')}\n        text={oldLang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={oldLang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={oldLang('DeleteLink')}\n        text={oldLang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId] || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useOldLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            peer={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport JoinRequest from './JoinRequest';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"section-help\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport {\n  MAX_UNIQUE_REACTIONS,\n} from '../../../config';\nimport { isChatChannel, isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions: number;\n  reactionsLimit?: number;\n  isChannel?: boolean;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n  maxUniqueReactions,\n  reactionsLimit,\n  isChannel,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useOldLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  const [localReactionsLimit, setLocalReactionsLimit] = useState(reactionsLimit);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n      reactionsLimit: localReactionsLimit,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions, localReactionsLimit]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n    setLocalReactionsLimit(reactionsLimit);\n  }, [enabledReactions, reactionsLimit]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  useEffect(() => {\n    if (localReactionsLimit !== undefined && localReactionsLimit !== reactionsLimit) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some') {\n      const isReactionsDisabled = enabledReactions?.type !== 'all' && enabledReactions?.type !== 'some';\n\n      if (isReactionsDisabled && localEnabledReactions.allowed.length === 0) {\n        setIsTouched(false);\n        return;\n      }\n    }\n\n    if (localEnabledReactions?.type !== enabledReactions?.type) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some' && enabledReactions?.type === 'some') {\n      const localAllowedReactions = localEnabledReactions.allowed;\n      const enabledAllowedReactions = enabledReactions?.allowed;\n\n      if (localAllowedReactions.length !== enabledAllowedReactions.length\n        || localAllowedReactions.reverse().some(\n          (localReaction) => !enabledAllowedReactions.find(\n            (enabledReaction) => isSameReaction(localReaction, enabledReaction),\n          ),\n        )) {\n        setIsTouched(true);\n        return;\n      }\n    }\n\n    setIsTouched(false);\n  }, [\n    localReactionsLimit,\n    reactionsLimit,\n    localEnabledReactions,\n    enabledReactions,\n  ]);\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n      setLocalReactionsLimit(reactionsLimit);\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n      setLocalReactionsLimit(reactionsLimit);\n    } else {\n      setLocalEnabledReactions(undefined);\n      setLocalReactionsLimit(undefined);\n    }\n  }, [enabledReactions, reactionsLimit]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  const handleReactionsLimitChange = useCallback((value: number) => {\n    setLocalReactionsLimit(value);\n  }, []);\n\n  const renderReactionsMaxCountValue = useCallback((value: number) => {\n    return lang('PeerInfo.AllowedReactions.MaxCountValue', value);\n  }, [lang]);\n\n  const shouldShowReactionsLimit = isChannel\n    && (localEnabledReactions?.type === 'all' || localEnabledReactions?.type === 'some');\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        {Boolean(localReactionsLimit && shouldShowReactionsLimit) && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('MaximumReactionsHeader')}\n            </h3>\n            <RangeSlider\n              min={1}\n              max={maxUniqueReactions}\n              value={localReactionsLimit!}\n              onChange={handleReactionsLimitChange}\n              renderValue={renderReactionsMaxCountValue}\n              isCenteredLayout\n            />\n            <p className=\"section-info section-info_push\">\n              {lang('ChannelReactions.MaxCount.Info')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section section-with-fab\">\n            <h3 className=\"section-heading\">\n              {lang('OnlyAllowThisReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  withIcon\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { maxUniqueReactions = MAX_UNIQUE_REACTIONS } = global.appConfig || {};\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const reactionsLimit = chatFullInfo?.reactionsLimit || maxUniqueReactions;\n    const isChannel = isChatChannel(chat);\n\n    return {\n      enabledReactions: chatFullInfo?.enabledReactions,\n      availableReactions: global.reactions.availableReactions,\n      chat,\n      maxUniqueReactions,\n      reactionsLimit,\n      isChannel,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageReactions));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { isUserBot } from '../../../global/helpers';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            noStatusOrTyping\n            noEmojiStatus\n            withFullInfo\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"user-first-name\"\n              label={lang('UserInfo.FirstNamePlaceholder')}\n              onChange={handleFirstNameChange}\n              value={firstName}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              id=\"user-last-name\"\n              label={lang('UserInfo.LastNamePlaceholder')}\n              onChange={handleLastNameChange}\n              value={lastName}\n            />\n          </div>\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    peer={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"section-help\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { FC } from '../../../lib/teact/teact.ts';\nimport type React from '../../../lib/teact/teact.ts';\nimport { useState } from '../../../lib/teact/teact.ts';\nimport { memo } from '../../../lib/teact/teact.ts';\n\nimport type { ApiChat } from '../../../api/types/index.ts';\nimport type { ManagementScreens } from '../../../types/index.ts';\nimport { ChatCreationProgress } from '../../../types/index.ts';\n\nimport { getActions, withGlobal } from '../../../global/index.ts';\nimport { selectChat, selectTabState } from '../../../global/selectors/index.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack.ts';\nimport useLang from '../../../hooks/useLang.ts';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Icon from '../../common/icons/Icon.tsx';\nimport AvatarEditable from '../../ui/AvatarEditable.tsx';\nimport FloatingActionButton from '../../ui/FloatingActionButton.tsx';\nimport InputText from '../../ui/InputText.tsx';\nimport Spinner from '../../ui/Spinner.tsx';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\nconst NewDiscussionGroup: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  creationProgress,\n  creationError,\n}) => {\n  const { createChannel } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [title, setTitle] = useState(lang('NewDiscussionChatTitle', { name: chat?.title }));\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.trimStart();\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  });\n\n  const renderedError = (creationError && lang('NewChatTitleEmptyError')) || (\n    error !== lang('NewChatTitleEmptyError') && error !== lang('NewChannelTitleEmptyError')\n      ? error\n      : undefined\n  );\n\n  const handleCreateGroup = useLastCallback(() => {\n    if (!title.length) {\n      setError(lang('NewChatTitleEmptyError'));\n      return;\n    }\n    if (!chat) return;\n\n    createChannel({\n      discussionChannelId: chat.id,\n      title,\n      photo,\n      isSuperGroup: true,\n    });\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"NewChat\">\n          <div className=\"NewChat-inner step-2\">\n            <AvatarEditable\n              onChange={setPhoto}\n              title={lang('AddPhoto')}\n            />\n            <InputText\n              value={title}\n              onChange={handleTitleChange}\n              label={lang('GroupName')}\n              error={error === lang('NewChatTitleEmptyError')\n                || error === lang('NewChannelTitleEmptyError') ? error : undefined}\n            />\n\n            {renderedError && (\n              <p className=\"error\">{renderedError}</p>\n            )}\n          </div>\n\n          <FloatingActionButton\n            isShown={title.length !== 0}\n            onClick={handleCreateGroup}\n            disabled={isLoading}\n            ariaLabel={lang('DiscussionCreateGroup')}\n          >\n            {isLoading ? (\n              <Spinner color=\"white\" />\n            ) : (\n              <Icon name=\"arrow-right\" />\n            )}\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewDiscussionGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageBot from './ManageBot';\nimport ManageChannel from './ManageChannel';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvite from './ManageInvite';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageInvites from './ManageInvites';\nimport ManageJoinRequests from './ManageJoinRequests';\nimport ManageReactions from './ManageReactions';\nimport ManageUser from './ManageUser';\nimport NewDiscussionGroup from './NewDiscussionGroup.tsx';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'bot':\n          return (\n            <ManageBot\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.NewDiscussionGroup:\n      return (\n        <NewDiscussionGroup\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType] || '';\n}\n","import type { RegularLangFnParameters } from '../../util/localization';\nimport type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Partial<Record<string, RegularLangFnParameters>>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"maC_9u6e\",\"description\":\"zQ6lEVJ2\",\"checkout-picture\":\"JgWvLdK2\",\"checkoutPicture\":\"JgWvLdK2\",\"text\":\"T2pYH395\",\"checkout-title\":\"HadolzeF\",\"checkoutTitle\":\"HadolzeF\",\"checkout-description\":\"oZW7mUNP\",\"checkoutDescription\":\"oZW7mUNP\",\"price-info\":\"P618Q3yr\",\"priceInfo\":\"P618Q3yr\",\"price-info-item\":\"XNNG_ajy\",\"priceInfoItem\":\"XNNG_ajy\",\"price-info-item-main\":\"D9gYNLVk\",\"priceInfoItemMain\":\"D9gYNLVk\",\"price-info-item-title\":\"NtY5Aah7\",\"priceInfoItemTitle\":\"NtY5Aah7\",\"tipsList\":\"WHO341eB\",\"tipsItem\":\"ksLlzBxw\",\"tipsItem_active\":\"J4yem62L\",\"tipsItemActive\":\"J4yem62L\",\"invoice-info\":\"U2IBOLP1\",\"invoiceInfo\":\"U2IBOLP1\",\"provider\":\"kqWcdro1\",\"stripe\":\"xKztZrna\",\"smartglocal\":\"X_Ge1o4u\",\"checkout-info-item-info-title\":\"ysWuPklS\",\"checkoutInfoItemInfoTitle\":\"ysWuPklS\",\"checkout-info-item-info-data\":\"MpC_P8_c\",\"checkoutInfoItemInfoData\":\"MpC_P8_c\",\"tos-checkbox\":\"OrRb0xG7\",\"tosCheckbox\":\"OrRb0xG7\",\"list\":\"l_wfiFG0\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type {\n  ApiInvoice,\n  ApiLabeledPrice,\n  ApiPaymentCredentials,\n  ApiWebDocument,\n} from '../../api/types';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { IconName } from '../../types/icons';\nimport type { LangFn } from '../../util/localization';\nimport { PaymentStep } from '../../types';\n\nimport { getWebDocumentHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport SafeLink from '../common/SafeLink';\nimport Checkbox from '../ui/Checkbox';\nimport ListItem from '../ui/ListItem';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  title: string;\n  description: string;\n  photo?: ApiWebDocument;\n  invoice: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: ApiLabeledPrice[];\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  title,\n  description,\n  photo,\n  invoice,\n  shippingPrices,\n  checkoutInfo,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    termsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const ref = useMediaTransition<HTMLImageElement>(photoUrl);\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(lang, tipAmount!, invoice.currency)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(lang, tip, invoice.currency, { shouldOmitFractions: true })}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = oldLang('PaymentCheckoutAcceptRecurrent', botName);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, oldLang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && (\n          <img\n            ref={ref}\n            className={styles.checkoutPicture}\n            src={photoUrl}\n            draggable={false}\n            width={photo!.dimensions?.width}\n            height={photo!.dimensions?.height}\n            alt=\"\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {description && (\n            <div className={styles.checkoutDescription}>\n              {renderText(description, ['br', 'links', 'emoji'])}\n            </div>\n          )}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {invoice.prices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang, oldLang('Checkout.TotalAmount'), totalPrice, invoice.currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {!isPaymentFormUrl && renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: oldLang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: oldLang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || (!isInteractive && shippingAddress)) && renderCheckoutItem({\n          title: shippingAddress,\n          label: oldLang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: oldLang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: oldLang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || (!isInteractive && shippingMethod)) && renderCheckoutItem({\n          title: shippingMethod,\n          label: oldLang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {termsUrl && renderTos(termsUrl)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  lang: LangFn, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(lang, value, currency)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title: string | undefined;\n  label: string | undefined;\n  icon?: IconName;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  const isMultiline = Boolean(title && label !== title);\n\n  return (\n    <ListItem\n      className={styles.list}\n      narrow\n      multiline={isMultiline}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n      leftElement={customIcon && <i className={buildClassName('icon', customIcon)} />}\n    >\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n  onPaymentFormSubmit?: (eventData: PaymentFormSubmitEvent['eventData']) => void;\n};\n\nexport interface PaymentFormSubmitEvent {\n  eventType: 'payment_form_submit';\n  eventData: {\n    credentials: {\n      token: string;\n      type: string;\n    };\n    title: string;\n  };\n}\n\ninterface WebAppOpenTgLinkEvent {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full?: string;\n  };\n}\n\ntype IframeCallbackEvent = PaymentFormSubmitEvent | WebAppOpenTgLinkEvent;\n\nconst ConfirmPayment: FC<OwnProps> = ({\n  url, noRedirect, onClose, onPaymentFormSubmit,\n}) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useOldLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n      switch (eventType) {\n        case 'web_app_open_tg_link':\n          if (!noRedirect) {\n            const linkUrl = TME_LINK_PREFIX + eventData.path_full!;\n            openTelegramLink({ url: linkUrl });\n          }\n          onClose();\n          break;\n        case 'payment_form_submit':\n          if (onPaymentFormSubmit) {\n            onPaymentFormSubmit(eventData);\n          }\n          break;\n        default:\n          onClose();\n          break;\n      }\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink, onPaymentFormSubmit]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { RegularLangFnParameters } from '../../util/localization';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport PasswordForm from '../common/PasswordForm';\nimport PasswordMonkey from '../common/PasswordMonkey';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  errorKey?: RegularLangFnParameters;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  errorKey,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={errorKey && lang.withRegular(errorKey)}\n        hint={passwordHint}\n        description={oldLang('PaymentConfirmationMessage', cardName)}\n        placeholder={oldLang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    errorKey: payment.error?.messageKey,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.form?.type === 'regular' ? payment.form.savedCredentials : undefined,\n  };\n})(PasswordConfirm));\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect } from '../lib/teact/teact';\n\nimport { requestMeasure } from '../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst DEFAULT_DURATION = 300;\n\nexport default function useFocusAfterAnimation(\n  ref: ElementRef<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMeasure(() => {\n        ref.current?.focus();\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { CardType, detectCardType } from '../common/helpers/detectCardType';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport mirIconPath from '../../assets/mir.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 19;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n  const cardNumberRef = useRef<HTMLInputElement>();\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} draggable={false} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} draggable={false} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} draggable={false} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport CardInput from './CardInput';\nimport ExpiryInput from './ExpiryInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{oldLang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber && lang.withRegular(formErrors.cardNumber)}\n        />\n        {needCardholderName && (\n          <InputText\n            label={oldLang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder && lang.withRegular(formErrors.cardholder)}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry && lang.withRegular(formErrors.expiry)}\n          />\n          <InputText\n            label={oldLang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv && lang.withRegular(formErrors.cvv)}\n            teactExperimentControlled\n          />\n        </section>\n        {needCountry || needZip ? (\n          <h5>{oldLang('PaymentBillingAddress')}</h5>\n        ) : undefined}\n        <section className=\"inline-inputs\">\n          {needCountry && (\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.billingCountry}\n              hasArrow={Boolean(true)}\n              id=\"billing-country\"\n              error={formErrors.billingCountry && lang.withRegular(formErrors.billingCountry)}\n              tabIndex={0}\n              ref={selectCountryRef}\n            >\n              {\n                countryList.map(({ defaultName, name }) => (\n                  <option\n                    value={defaultName}\n                    className=\"county-item\"\n                    selected={defaultName === state.billingCountry}\n                  >\n                    {defaultName || name}\n                  </option>\n                ))\n              }\n            </Select>\n          )}\n          {needZip && (\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handleBillingPostCodeChange}\n              value={state.billingZip}\n              inputMode=\"text\"\n              tabIndex={0}\n              maxLength={12}\n              error={formErrors.billingZip && lang.withRegular(formErrors.billingZip)}\n            />\n          )}\n        </section>\n        <div className=\"checkbox\">\n          <Checkbox\n            label={oldLang('PaymentCardSavePaymentInformation')}\n            checked={canSaveCredentials ? state.saveCredentials : false}\n            tabIndex={0}\n            subLabel={oldLang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n            onChange={handleChangeSaveCredentials}\n            disabled={!canSaveCredentials}\n          />\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useOldLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\n\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(lang, amount, currency),\n    value,\n  }))), [shippingOptions, currency, lang]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{oldLang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const phoneRef = useRef<HTMLInputElement>();\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{oldLang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={oldLang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1 && lang.withRegular(formErrors.streetLine1)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2 && lang.withRegular(formErrors.streetLine2)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city && lang.withRegular(formErrors.city)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state && lang.withRegular(formErrors.state)}\n            />\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2 && lang.withRegular(formErrors.countryIso2)}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode && lang.withRegular(formErrors.postCode)}\n            />\n          </div>\n        ) : undefined}\n        {needName || needEmail || needPhone ? (\n          <h5>{oldLang('PaymentShippingReceiver')}</h5>\n        ) : undefined}\n        {needName && (\n          <InputText\n            label={oldLang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName && lang.withRegular(formErrors.fullName)}\n          />\n        )}\n        {needEmail && (\n          <InputText\n            label={oldLang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email && lang.withRegular(formErrors.email)}\n          />\n        )}\n        {needPhone && (\n          <InputText\n            label={oldLang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone && lang.withRegular(formErrors.phone)}\n            ref={phoneRef}\n          />\n        )}\n        <Checkbox\n          label={oldLang('PaymentShippingSave')}\n          subLabel={oldLang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiCountry, ApiInvoice, ApiLabeledPrice, ApiPaymentCredentials, ApiPaymentFormRegular,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\nimport type { PaymentFormSubmitEvent } from './ConfirmPayment';\nimport { PaymentStep } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectChat, selectTabState, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatCurrencyAsString } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\n\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport Checkout from './Checkout';\nimport ConfirmPayment from './ConfirmPayment';\nimport PasswordConfirm from './PasswordConfirm';\nimport PaymentInfo from './PaymentInfo';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport Shipping from './Shipping';\nimport ShippingInfo from './ShippingInfo';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst DONATE_PROVIDER_URL = 'https://payment.smart-glocal.com';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  step?: PaymentStep;\n  chat?: ApiChat;\n  nativeProvider?: string;\n  invoice?: ApiInvoice;\n  form?: ApiPaymentFormRegular;\n  error?: TabState['payment']['error'];\n  prices?: ApiLabeledPrice[];\n  isProviderError?: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions?: boolean;\n  shippingOptions?: ShippingOption[];\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  form,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n    setSmartGlocalCardInfo,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n  const prevStep = usePreviousDeprecated(step, true);\n  const prevRequestId = usePreviousDeprecated(requestId);\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error, requestId]);\n\n  // When payment verification occurs and the `step` does not change, the card details must be requested\n  useEffect(() => {\n    if (\n      step === PaymentStep.Checkout\n      && step === prevStep\n      && requestId !== prevRequestId\n      && !paymentState.savedCredentialId\n      && !paymentState.cardNumber\n    ) {\n      setStep(PaymentStep.PaymentInfo);\n    }\n  }, [paymentState.cardNumber, paymentState.savedCredentialId, prevRequestId, prevStep, requestId, setStep, step]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.messageKey,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (form?.savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = form.savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [form, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.descriptionKey ? lang.withRegular(error.descriptionKey) : lang('ErrorUnspecified')}</h4>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {oldLang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handlePaymentFormSubmit = useCallback((eventData: PaymentFormSubmitEvent['eventData']) => {\n    const { credentials } = eventData;\n    setSmartGlocalCardInfo(credentials);\n    sendForm();\n  }, [sendForm]);\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            title={form!.title}\n            description={form!.description}\n            photo={form!.photo}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice!}\n            checkoutInfo={checkoutInfo}\n            isPaymentFormUrl={isPaymentFormUrl}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n            botName={botName}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!form!.isPasswordMissing && form!.canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            needEmail={Boolean(invoice?.isEmailRequested || invoice?.isEmailSentToProvider)}\n            needPhone={Boolean(invoice?.isPhoneRequested || invoice?.isPhoneSentToProvider)}\n            needName={Boolean(invoice?.isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={invoice!.currency}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onPaymentFormSubmit={handlePaymentFormSubmit}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const handleButtonClick = useLastCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (isPaymentFormUrl) {\n          setIsLoading(true);\n          setStep(PaymentStep.ConfirmPayment);\n          return;\n        }\n\n        if (form?.savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (invoice?.isEmailRequested && !email)\n          || (invoice?.isPhoneRequested && !phone)\n          || (invoice?.isNameRequested && !fullName);\n\n        if ((invoice?.isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (invoice?.isShippingAddressRequested && !paymentState.shipping && shippingOptions?.length) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  });\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return oldLang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return oldLang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return oldLang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return oldLang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return oldLang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return oldLang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return oldLang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, oldLang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? oldLang('Checkout.PayPrice', formatCurrencyAsString(totalPrice, invoice!.currency, oldLang.code))\n    : lang('PaymentInfoDone');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.termsUrl) && !isTosAccepted;\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram Web A doesn&apos;t support payments with this provider yet.\n          {' '}\n          <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {oldLang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <Icon name={step === PaymentStep.Checkout ? 'close' : 'arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition\n          name=\"slide\"\n          activeKey={step}\n          shouldCleanup\n          cleanupOnlyKey={PaymentStep.ConfirmPayment}\n        >\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            className=\"button-text\"\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      form,\n      step,\n      shippingOptions,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n      url,\n    } = selectTabState(global).payment;\n\n    const { invoice, nativeParams, nativeProvider } = form || {};\n    const countryList = global.countryList.general;\n\n    let providerName = form?.nativeProvider;\n    if (!providerName && url) {\n      providerName = url.startsWith(DONATE_PROVIDER_URL) ? DONATE_PROVIDER : undefined;\n    }\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!providerName || !SUPPORTED_PROVIDERS.has(providerName)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const bot = form?.botId ? selectUser(global, form.botId) : undefined;\n    const botName = getUserFullName(bot);\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      nativeProvider: providerName,\n      isProviderError,\n      form,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl: confirmPaymentUrl ?? url,\n      isPaymentFormUrl: Boolean(!nativeProvider && url),\n      countryList,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n      botName,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: ApiLabeledPrice[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiReceiptRegular, ApiShippingAddress } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Checkout from './Checkout';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  receipt?: ApiReceiptRegular;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  receipt,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const prevReceipt = usePrevious(receipt);\n  const renderingReceipt = receipt || prevReceipt;\n\n  const checkoutInfo = useMemo(() => {\n    if (!renderingReceipt) return undefined;\n    return getCheckoutInfo(renderingReceipt.credentialsTitle, renderingReceipt.info, renderingReceipt.shippingMethod);\n  }, [renderingReceipt]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      {renderingReceipt && (\n        <>\n          <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            <Button\n              className=\"close-button\"\n              color=\"translucent\"\n              round\n              size=\"smaller\"\n              onClick={closeModal}\n              ariaLabel=\"Close\"\n            >\n              <Icon name=\"close\" />\n            </Button>\n            <h3>\n              {' '}\n              {lang('PaymentReceipt')}\n              {' '}\n            </h3>\n          </div>\n          <div className=\"receipt-content custom-scroll\">\n            <Checkout\n              shippingPrices={renderingReceipt.shippingPrices}\n              totalPrice={renderingReceipt.totalAmount}\n              tipAmount={renderingReceipt.tipAmount}\n              invoice={renderingReceipt.invoice}\n              checkoutInfo={checkoutInfo}\n              title={renderingReceipt.title}\n              description={renderingReceipt.description}\n              photo={renderingReceipt.photo}\n            />\n          </div>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n\n    return {\n      receipt,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?: {\n    phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"n8eENbaR\",\"closeButton\":\"smosGkw9\",\"contentText\":\"Qo4PtFZI\",\"title\":\"wtfpombl\",\"separator\":\"UoMeVIyC\",\"userPicker\":\"nEYyTS_m\",\"sendInvites\":\"Ttkq3nqt\",\"avatarList\":\"Nc3SOtKd\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback,\n  useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './InviteViaLinkModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['inviteViaLinkModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst InviteViaLinkModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n}) => {\n  const { sendInviteMessages, closeInviteViaLinkModal, openPremiumModal } = getActions();\n  const { missingUsers } = modal || {};\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n\n  const userIds = useMemo(() => missingUsers?.map((user) => user.id) || MEMO_EMPTY_ARRAY, [missingUsers]);\n  const [unselectableIds, selectableIds] = useMemo(() => {\n    if (!missingUsers?.length) return [[], []];\n    const [requirePremiumIds, regularIds] = partition(missingUsers, (user) => user.isRequiringPremiumToMessage);\n    return [requirePremiumIds.map((user) => user.id), regularIds.map((user) => user.id)];\n  }, [missingUsers]);\n\n  const invitableWithPremiumIds = useMemo(() => {\n    return missingUsers?.filter((user) => user.isRequiringPremiumToInvite || user.isRequiringPremiumToMessage)\n      .map((user) => user.id);\n  }, [missingUsers]);\n\n  const isEveryPremiumBlocksPm = useMemo(() => {\n    if (!missingUsers) return undefined;\n    return !missingUsers.some((user) => user.isRequiringPremiumToInvite && !user.isRequiringPremiumToMessage);\n  }, [missingUsers]);\n\n  const topListPeers = useMemo(() => {\n    const users = getGlobal().users.byId;\n    return invitableWithPremiumIds?.map((id) => users[id]);\n  }, [invitableWithPremiumIds]);\n\n  useEffect(() => {\n    setSelectedMemberIds(selectableIds);\n  }, [selectableIds]);\n\n  const handleClose = useLastCallback(() => closeInviteViaLinkModal());\n\n  const handleSendInviteLink = useCallback(() => {\n    sendInviteMessages({ chatId: chat!.id, userIds: selectedMemberIds });\n    closeInviteViaLinkModal();\n  }, [selectedMemberIds, chat]);\n\n  const handleOpenPremiumModal = useCallback(() => {\n    openPremiumModal();\n  }, []);\n\n  const canSendInviteLink = useMemo(() => {\n    if (!chat) return undefined;\n    return Boolean(chat?.isCreator || chat?.adminRights?.inviteUsers);\n  }, [chat]);\n\n  const inviteSectionText = useMemo(() => {\n    return canSendInviteLink\n      ? lang(missingUsers?.length === 1 ? 'InviteBlockedOneMessage' : 'InviteBlockedManyMessage')\n      : lang('InviteRestrictedUsers2', missingUsers?.length);\n  }, [canSendInviteLink, lang, missingUsers?.length]);\n\n  const premiumSectionText = useMemo(() => {\n    if (!invitableWithPremiumIds?.length || !topListPeers?.length) return undefined;\n    const prefix = isEveryPremiumBlocksPm ? 'InviteMessagePremiumBlocked' : 'InvitePremiumBlocked';\n    let langKey = `${prefix}One`;\n    let params = [getUserFullName(topListPeers[0])];\n    if (invitableWithPremiumIds.length === 2) {\n      langKey = `${prefix}Two`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1])];\n    } else if (invitableWithPremiumIds.length === 3) {\n      langKey = `${prefix}Three`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1]), getUserFullName(topListPeers[2])];\n    } else if (invitableWithPremiumIds.length > 3) {\n      langKey = `${prefix}Many`;\n      params = [\n        getUserFullName(topListPeers[0]),\n        getUserFullName(topListPeers[1]),\n        (invitableWithPremiumIds.length - 2).toString(),\n      ];\n    }\n\n    return lang(langKey, params, undefined, topListPeers.length);\n  }, [invitableWithPremiumIds, isEveryPremiumBlocksPm, lang, topListPeers]);\n\n  const hasPremiumSection = Boolean(topListPeers?.length);\n  const hasSelectableSection = Boolean(selectableIds?.length);\n\n  return (\n    <Modal\n      isOpen={Boolean(userIds && chat)}\n      contentClassName={styles.content}\n      onClose={handleClose}\n      isSlim\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {premiumSectionText && (\n        <>\n          <AvatarList\n            className={styles.avatarList}\n            peers={topListPeers}\n            size=\"large\"\n          />\n          <h3 className={styles.title}>\n            {canSendInviteLink ? lang('InvitePremiumBlockedTitle') : lang('ChannelInviteViaLinkRestricted')}\n          </h3>\n          <p className={styles.contentText}>\n            {renderText(premiumSectionText, ['simple_markdown'])}\n          </p>\n          <Button\n            withPremiumGradient\n            isShiny\n            size=\"smaller\"\n            onClick={handleOpenPremiumModal}\n          >\n            {lang('InvitePremiumBlockedSubscribe')}\n          </Button>\n        </>\n      )}\n      {hasPremiumSection && hasSelectableSection && (\n        <Separator className={styles.separator}>\n          {lang('InvitePremiumBlockedOr')}\n        </Separator>\n      )}\n      {hasSelectableSection && (\n        <>\n          <h3 className={styles.title}>{lang('InviteBlockedTitle')}</h3>\n          <p className={styles.contentText}>\n            {inviteSectionText}\n          </p>\n          <PeerPicker\n            className={styles.userPicker}\n            itemIds={userIds}\n            selectedIds={selectedMemberIds}\n            lockedUnselectedIds={unselectableIds}\n            lockedUnselectedSubtitle={lang('InvitePremiumBlockedUser')}\n            onSelectedIdsChange={setSelectedMemberIds}\n            isViewOnly={!canSendInviteLink}\n            allowMultiple\n            withStatus\n            itemInputType=\"checkbox\"\n          />\n          {canSendInviteLink && (\n            <Button\n              className={styles.sendInvites}\n              size=\"smaller\"\n              onClick={handleSendInviteLink}\n              disabled={!selectedMemberIds.length}\n            >\n              {lang('SendInviteLink.ActionInvite')}\n            </Button>\n          )}\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal?.chatId ? selectChat(global, modal.chatId) : undefined;\n\n    return {\n      chat,\n    };\n  },\n)(InviteViaLinkModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c3xMWwzW\",\"fade-in-opacity\":\"cHb04cFv\",\"fadeInOpacity\":\"cHb04cFv\",\"closing\":\"_0HkZ8ITm\",\"voice\":\"VLiJWMs0\",\"video\":\"ML2YEpGq\",\"footer\":\"VWy1qXJL\",\"closeBtn\":\"FfMrCmD9\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { isOwnMessage } from '../../../global/helpers';\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Audio from '../../common/Audio';\nimport RoundVideo from '../../middle/message/RoundVideo';\nimport Button from '../../ui/Button';\n\nimport styles from './OneTimeMediaModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['oneTimeMediaModal'];\n};\n\nconst OneTimeMediaModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    closeOneTimeMediaModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const message = useCurrentOrPrev(modal?.message, true);\n\n  const {\n    shouldRender,\n    transitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(modal));\n\n  const handlePlayVoice = useLastCallback(() => {\n    return undefined;\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeOneTimeMediaModal();\n  });\n\n  if (!shouldRender || !message) {\n    return undefined;\n  }\n\n  const isOwn = isOwnMessage(message);\n  const theme = selectTheme(getGlobal());\n  const closeBtnTitle = isOwn ? lang('Chat.Voice.Single.Close') : lang('Chat.Voice.Single.DeleteAndClose');\n\n  function renderMedia() {\n    if (!message?.content) {\n      return undefined;\n    }\n    const { voice, video } = message.content;\n    if (voice) {\n      return (\n        <Audio\n          className={styles.voice}\n          theme={theme}\n          message={message}\n          origin={AudioOrigin.OneTimeModal}\n          autoPlay\n          onPlay={handlePlayVoice}\n          onPause={handleClose}\n        />\n      );\n    } else if (video?.isRound) {\n      return (\n        <RoundVideo\n          className={styles.video}\n          message={message}\n          origin=\"oneTimeModal\"\n          onStop={handleClose}\n        />\n      );\n    }\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, transitionClassNames)}>\n      {renderMedia()}\n      <div className={styles.footer}>\n        <Button\n          faded\n          onClick={handleClose}\n          pill\n          size=\"smaller\"\n          color={theme === 'dark' ? 'dark' : 'secondary'}\n          className={styles.closeBtn}\n        >\n          {closeBtnTitle}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(OneTimeMediaModal);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst WebAppsCloseConfirmationModal: FC<OwnProps> = ({\n  isOpen,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { closeWebAppsCloseConfirmationModal, closeWebAppModal } = getActions();\n\n  const [shouldSkipInFuture, setShouldSkipInFuture] = useState(false);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const onClose = useCallback(() => {\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const confirmHandler = useCallback(() => {\n    closeWebAppModal({ shouldSkipConfirmation: true });\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const handleSelectWithEnter = useCallback((index: number) => {\n    if (index === -1) confirmHandler();\n  }, [confirmHandler]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, handleSelectWithEnter, '.Button');\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      title={lang('CloseMiniApps')}\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <p>{lang('AreYouSureCloseMiniApps')}</p>\n      <Checkbox\n        className=\"dialog-checkbox\"\n        label={lang('DoNotAskAgain')}\n        checked={shouldSkipInFuture}\n        onCheck={setShouldSkipInFuture}\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n        ref={containerRef}\n        onKeyDown={handleKeyDown}\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n          color=\"danger\"\n        >\n          {oldLang('Confirm')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>\n          {oldLang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(WebAppsCloseConfirmationModal);\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport TableAboutModal, { type TableAboutData } from '../common/TableAboutModal';\n\nimport styles from './FrozenAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['isFrozenAccountModalOpen'];\n};\n\ntype StateProps = {\n  freezeAppealUrl?: string;\n  botFreezeAppealUsername?: string;\n  freezeUntilDate?: number;\n};\n\nconst FrozenAccountModal = ({\n  modal,\n  freezeUntilDate,\n  freezeAppealUrl,\n  botFreezeAppealUsername,\n}: OwnProps & StateProps) => {\n  const {\n    closeFrozenAccountModal,\n    openUrl,\n  } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n\n  const handleClose = useLastCallback(() => {\n    closeFrozenAccountModal();\n  });\n\n  const handleAppeal = useLastCallback(() => {\n    closeFrozenAccountModal();\n    if (freezeAppealUrl) {\n      openUrl({ url: freezeAppealUrl });\n    }\n  });\n\n  const header = useMemo(() => {\n    return (\n      <div className={styles.header}>\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.BannedDuck}\n          noLoop\n        />\n        <div className={styles.title}>\n          {lang('FrozenAccountModalTitle')}\n        </div>\n      </div>\n    );\n  }, [lang]);\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          className={styles.buttonAppeal}\n          size=\"smaller\"\n          onClick={handleAppeal}\n          noForcedUpperCase\n        >\n          {lang('ButtonAppeal')}\n        </Button>\n        <Button\n          isText\n          size=\"smaller\"\n          onClick={handleClose}\n          noForcedUpperCase\n        >\n          {lang('ButtonUnderstood')}\n        </Button>\n      </div>\n    );\n  }, [lang, isOpen]);\n\n  if (!freezeUntilDate || !botFreezeAppealUsername) return undefined;\n\n  const date = new Date(freezeUntilDate * 1000);\n\n  const botLink = (\n    <Link onClick={handleAppeal} isPrimary>\n      {formatUsername(botFreezeAppealUsername)}\n    </Link>\n  );\n\n  const listItemData = [\n    ['hand-stop', lang('FrozenAccountViolationTitle'), lang('FrozenAccountViolationSubtitle')],\n    ['lock', lang('FrozenAccountReadOnlyTitle'), lang('FrozenAccountReadOnlySubtitle')],\n    ['frozen-time', lang('FrozenAccountAppealTitle'),\n      lang('FrozenAccountAppealSubtitle', {\n        botLink,\n        date: formatDateToString(date, lang.code),\n      }, {\n        withNodes: true,\n      })],\n  ] satisfies TableAboutData;\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const freezeUntilDate = global.appConfig?.freezeUntilDate;\n    const freezeAppealUrl = global.appConfig?.freezeAppealUrl;\n    const botFreezeAppeal = global.botFreezeAppealId ? selectUser(global, global.botFreezeAppealId) : undefined;\n    const botFreezeAppealUsername = botFreezeAppeal && getMainUsername(botFreezeAppeal);\n\n    return {\n      freezeUntilDate,\n      freezeAppealUrl,\n      botFreezeAppealUsername,\n    };\n  },\n)(FrozenAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"cW2rtp6M\",\"title\":\"qLSm0uyC\",\"footer\":\"Vj3QQ_JQ\",\"buttonAppeal\":\"anvg3JaY\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"KYHkJ9Qf\",\"title\":\"AwnUe4Qk\",\"value\":\"JGH6P9Az\",\"table\":\"DFRB0Ad4\",\"noFooter\":\"cSamlkt9\",\"cell\":\"Cnh5ENvm\",\"fullWidth\":\"UssCZwgy\",\"avatar\":\"SHQbPR5Y\",\"chatItem\":\"aS9U4hiQ\"};","import { memo, type TeactNode } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './TableInfoModal.module.scss';\n\ntype ChatItem = { chatId: string; withEmojiStatus?: boolean };\n\nexport type TableData = [TeactNode | undefined, TeactNode | ChatItem][];\n\ntype OwnProps = {\n  isOpen?: boolean;\n  title?: string;\n  tableData?: TableData;\n  headerAvatarPeer?: ApiPeer | CustomPeer;\n  header?: TeactNode;\n  modalHeader?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  className?: string;\n  hasBackdrop?: boolean;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n  withBalanceBar?: boolean;\n  isLowStackPriority?: true;\n};\n\nconst TableInfoModal = ({\n  isOpen,\n  title,\n  tableData,\n  headerAvatarPeer,\n  header,\n  modalHeader,\n  footer,\n  buttonText,\n  className,\n  hasBackdrop,\n  onClose,\n  onButtonClick,\n  withBalanceBar,\n  isLowStackPriority,\n}: OwnProps) => {\n  const { openChat } = getActions();\n  const handleOpenChat = useLastCallback((peerId: string) => {\n    openChat({ id: peerId });\n    onClose();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton={Boolean(title)}\n      hasAbsoluteCloseButton={!title}\n      absoluteCloseButtonColor={hasBackdrop ? 'translucent-white' : undefined}\n      isSlim\n      header={modalHeader}\n      title={title}\n      className={className}\n      contentClassName={styles.content}\n      onClose={onClose}\n      withBalanceBar={withBalanceBar}\n      isLowStackPriority={isLowStackPriority}\n    >\n      {headerAvatarPeer && (\n        <Avatar peer={headerAvatarPeer} size=\"jumbo\" className={styles.avatar} />\n      )}\n      {header}\n      <div className={styles.table}>\n        {tableData?.map(([label, value]) => (\n          <>\n            {Boolean(label) && <div className={buildClassName(styles.cell, styles.title)}>{label}</div>}\n            <div className={buildClassName(styles.cell, styles.value, !label && styles.fullWidth)}>\n              {typeof value === 'object' && 'chatId' in value ? (\n                <PeerChip\n                  peerId={value.chatId}\n                  className={styles.chatItem}\n                  forceShowSelf\n                  withEmojiStatus={value.withEmojiStatus}\n                  clickArg={value.chatId}\n                  onClick={handleOpenChat}\n                />\n              ) : value}\n            </div>\n          </>\n        ))}\n      </div>\n      {footer}\n      {buttonText && (\n        <Button\n          className={!footer ? styles.noFooter : undefined}\n          size=\"smaller\"\n          onClick={onButtonClick || onClose}\n        >\n          {buttonText}\n        </Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableInfoModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hyRfEyRz\",\"top\":\"p_Ny8jqJ\",\"badge\":\"QRrryqp4\",\"text\":\"I5jdPgFL\"};","import { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiWebDocument } from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport Avatar, { type AvatarSize } from './Avatar';\nimport Icon from './icons/Icon';\n\nimport styles from './PeerBadge.module.scss';\n\ntype OwnProps = {\n  peer?: ApiPeer | CustomPeer;\n  avatarWebPhoto?: ApiWebDocument;\n  avatarSize?: AvatarSize;\n  text?: string;\n  badgeText?: string;\n  badgeIcon?: IconName;\n  className?: string;\n  badgeClassName?: string;\n  badgeIconClassName?: string;\n  textClassName?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst PeerBadge = ({\n  peer: avatarPeer,\n  avatarWebPhoto,\n  avatarSize,\n  text,\n  badgeText,\n  badgeIcon,\n  className,\n  badgeClassName,\n  badgeIconClassName,\n  textClassName,\n  onClick,\n}: OwnProps) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, onClick && styles.clickable, className)}\n      onClick={onClick}\n    >\n      <div className={styles.top}>\n        <Avatar size={avatarSize} peer={avatarPeer} webPhoto={avatarWebPhoto} />\n        {badgeText && (\n          <div className={buildClassName(styles.badge, badgeClassName)} dir={lang.isRtl ? 'rtl' : 'ltr'}>\n            {badgeIcon && <Icon name={badgeIcon} className={badgeIconClassName} />}\n            {badgeText}\n          </div>\n        )}\n      </div>\n      {text && <p className={buildClassName(styles.text, textClassName)}>{text}</p>}\n    </div>\n  );\n};\n\nexport default memo(PeerBadge);\n"],"names":["memo","StarTopupOptionList","isActive","className","options","selectedStarOption","selectedStarCount","starsNeeded","onClick","oldLang","useOldLang","lang","useLang","areOptionsExtended","markOptionsExtended","unmarkOptionsExtended","useFlag","useEffect","renderingOptions","canExtend","useMemo","undefined","maxOption","reduce","max","option","stars","forceShowAll","result","currentStackedStarsCount","canExtendOptions","forEach","index","isExtended","push","starsCount","Math","min","isWide","length","_jsxs","buildClassName","styles","children","map","isOdd","isActiveOption","perUserStarCount","winner","winners","find","opt","users","perUserStars","wideOption","active","optionTop","formatInteger","_jsx","stackedStars","dir","isRtl","Array","from","StarIcon","stackedStar","type","size","optionBottom","formatCurrency","amount","currency","Boolean","renderText","Button","moreOptions","isText","noForcedUpperCase","Icon","iconDown","name","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","PasswordMonkey","isPasswordVisible","isBig","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","isMobile","useAppLayout","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","useTimeout","handleFirstMonkeyLoad","useCallback","id","AnimatedSticker","STICKER_SIZE_TWO_FA","tgsUrl","LOCAL_TGS_URLS","MonkeyClose","playSegment","noLoop","onLoad","MonkeyPeek","TableAboutModal","isOpen","listItemData","headerIconName","header","footer","buttonText","hasBackdrop","withSeparator","onClose","onButtonClick","contentClassName","Modal","hasAbsoluteCloseButton","absoluteCloseButtonColor","icon","title","subtitle","ListItem","isStatic","multiline","iconClassName","Separator","PickerModal","confirmButtonText","isConfirmDisabled","shouldAdaptToSearch","withFixedHeight","onConfirm","withPremiumGradient","modalProps","hasButton","isSlim","headerClassName","color","disabled","getViewableMedia","params","media","mediaIndex","isSingle","avatar","profilePhotos","photos","action","document","photo","video","webPage","paidMedia","getMessageContent","message","isDocumentPhoto","isDocumentVideo","webPagePhoto","webPageVideo","webPageDocument","isDocumentMedia","extendedMedia","extendedPhoto","extendedVideo","isGif","createGhost","source","origin","ghost","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","ProfileAvatar","SettingsAvatar","profileInfo","querySelector","cloneNode","getNodes","containerSelector","mediaSelector","Album","ScheduledAlbum","getMessageHtmlId","PreviewMedia","SharedMedia","SearchResult","MiddleHeaderAvatar","ChannelAvatar","SuggestedAvatar","StarsTransaction","SponsoredMessage","MESSAGE_CONTENT_SELECTOR","ScheduledInline","Inline","container","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","style","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","FALLBACK_DIMENSIONS","AVATAR_FULL_DIMENSIONS","useMediaProps","isAvatar","delay","isPhotoAvatar","mediaType","isVideo","isVideoAvatar","isDocument","isRound","isPhoto","isFromSharedMedia","isFromSearch","getMediaOrAvatarHash","isFull","getVideoProfilePhotoMediaHash","getMediaHash","getProfilePhotoMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","BlobUrl","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","onload","blurredDataUri","clear","set","window","setTimeout","useBlur","useBlurSync","getMediaThumbUri","bestData","mediaSize","getMediaFileSize","isLocal","dimensions","VIDEO_AVATAR_FULL_DIMENSIONS","getPhotoFullDimensions","getVideoDimensions","ReportAvatarModal","peerId","onCloseAnimationEnd","reportProfilePhoto","getActions","selectedReason","setSelectedReason","useState","description","setDescription","handleReport","useLastCallback","chatId","reason","handleSelectReason","value","handleDescriptionChange","e","target","REPORT_OPTIONS","label","onEnter","RadioGroup","onChange","selected","InputText","getZoomChange","setZoomChange","useZoomChange","useUnmountCleanup","DeleteProfilePhotoModal","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","isUserId","withGlobal","global","item","canUpdateMedia","tabState","selectTabState","mediaViewer","avatarOwner","avatarPhoto","chat","selectCurrentChat","currentMessageList","selectCurrentMessageList","threadId","isProtected","selectIsMessageProtected","activeDownloads","selectActiveDownloads","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","selectAllowedMessageActionsSlow","isCurrentAvatar","avatarPhotoId","canDeleteAvatar","canUpdate","messageListType","MediaViewerActions","canReportAvatar","onReportAvatar","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","downloadMedia","cancelMediaDownload","updateProfilePhoto","updateChatPhoto","openMediaViewer","openDeleteMessageModal","isMessage","fileName","getMediaFilename","isDownloading","getIsDownloading","downloadProgress","handleDownloadClick","originMessage","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","isAvatarView","forceOnHeavyAnimation","MenuButton","onTrigger","round","ariaLabel","renderDeleteModal","openDeleteModalHandler","messageIds","isSchedule","menuItems","isForwardingAllowed","content","href","download","destructive","DropdownMenu","trigger","positionX","MenuItem","ProgressSpinner","progress","noCross","renderDownloadButton","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","getCurrentTime","setCurrentTime","useCurrentTimeSignal","MediaViewerFooter","text","isForVideo","handleSponsoredClick","isForceMobileVersion","isMultiline","setIsMultiline","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","stopPropagation","isRectangular","getIsVideoWaiting","setIsVideoWaiting","useVideoWaitingSignal","IS_MOBILE","IS_ANDROID","IS_IOS","PREVIEW_SIZE_RATIO","MAX_FRAMES","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","frames","currentTime","constructor","url","this","connector","request","args","MAX_WORKERS","onFrame","time","frame","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","data","callApi","mediaFormat","Progressive","arrayBuffer","postMessage","cancelAnimation","SeekLine","duration","bufferedRanges","isReady","posterSize","playbackRate","isPlaying","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getCurrentTimeSignal","getIsWaiting","useThrottledSignal","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","floor","renderVideoPreview","createVideoPreviews","remaining","animateNumber","to","onUpdate","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","getPointerPosition","x","t","clamp","preview","clientWidth","stopAnimation","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","start","end","PLAYBACK_RATES","renderTime","VideoPlayerControls","bufferedProgress","fileSize","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","onSeekingChange","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","closeTimeoutRef","setVisibility","isVisible","body","remove","handleSeek","position","handleSeekStart","volumeIcon","ripple","RangeSlider","bold","formatFileSize","Menu","positionY","autoClose","rate","VideoPlayer","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","isSponsoredMessage","timestamp","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","lastMousePosition","y","updateMousePosition","checkMousePositionAndToggleControls","clientX","clientY","bounds","right","top","bottom","handleVideoMove","handleVideoLeave","handleSeekingChange","bufferingHandlers","useBuffering","isUnsupported","useUnsupportedMedia","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransitionDeprecated","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","key","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseLeave","onContextMenu","onDoubleClick","autoPlay","controlsList","playsInline","loop","onWaiting","onPlay","onEnded","onPause","onTimeUpdate","join","sponsoredMessage","textMessage","maxTimestamp","selectMessageTimestampableDuration","MediaViewerContent","withAnimation","isMoving","onFooterClick","updateLastPlaybackTimestamp","toggleControlsOnMove","updatePlaybackTimestamp","useThrottledCallback","MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION","isInAlbum","newTimestamp","PLAYBACK_SAVE_INTERVAL","useSignalEffect","calculateMediaViewerDimensions","ARE_WEBCODECS_SUPPORTED","renderPhoto","textParts","renderMessageText","forcePlayback","isForMediaViewer","hasFooter","shouldForceMobileVersion","imageSize","canDrag","alt","Spinner","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelZoomAnimation","SwipeDirection","MediaViewerSlides","isLoadingMoreMedia","isSynced","loadMoreItemsIfNeeded","getNextItem","selectItem","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveItem","setActiveItem","activeItemRef","isScaled","activeItem","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectItemDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","cActiveItem","nextItem","timing","changeSlideOnClick","closest","calculateOffsetBoundaries","offsetTop","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","withWheelDrag","checkIfControlTarget","event","captureEvent","dragOffsetX","dragOffsetY","cancelDrag","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","SWIPE_DIRECTION_THRESHOLD","SWIPE_DIRECTION_TOLERANCE","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","includes","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","prevItem","hasPrev","hasNext","toFixed","element","selector","matches","messageSender","selectSender","owner","SenderInfo","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","isFallbackAvatar","fallbackPhoto","isPersonalAvatar","personalPhoto","date","formattedDate","formatMediaDateTime","count","currentIndex","countText","parts","isChannel","isChatChannel","isGroup","isChatGroup","senderTitle","getPeerTitle","Avatar","peer","shouldSkipHistoryAnimations","withDynamicLoading","standaloneMedia","selectPerformanceSettingsValue","currentUserId","isChatWithSelf","selectIsChatWithSelf","selectPeer","isChatAdmin","selectPeerPhotos","isLoading","chatMessages","selectScheduledMessage","selectChatMessage","selectSponsoredMessage","selectChatScheduledMessages","selectChatMessages","isOriginInline","isOriginAlbum","collectedMessageIds","currentSearch","selectCurrentChatMediaSearch","foundIds","currentSegment","selectCurrentSharedMediaSearch","resultsByType","selectOutlyingListByMessageId","selectListedIds","MediaViewer","openForwardMenu","searchChatMediaMessages","loadMoreProfilePhotos","clickSponsored","openUrl","animationKey","senderId","prevSenderId","usePreviousDeprecated","headerAnimation","isGhostAnimation","isReportAvatarModalOpen","openReportAvatarModal","closeReportAvatarModal","currentItem","getMediaViewerItem","info","messageMediaIds","getChatMediaMessageIds","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","headerRef","useElectronDrag","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","prevMessage","prevIsHidden","prevOrigin","prevBestImageData","shouldAnimateOpening","beginHeavyAnimation","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","applyStyles","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","imageEl","messageListElement","getOffsetToContainer","scrollTop","offsetHeight","isMessageImageFullyVisible","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","HTMLElement","isFromMedia","isMedia","randomId","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","currentMediaMessageId","fromMedia","fromMediaIndex","nextIndex","fromAvatarOwner","fromProfilePhotos","fromSponsoredMessage","fromSponsoredMessageIndex","fromMessage","getMessagePaidMedia","indexOf","nextMessageId","nextMessage","openMediaViewerItem","itemChatId","itemMessageId","itemStandaloneMedia","handleBeforeDelete","prevMedia","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","avatarOwnerId","OFFSET_BOTTOM","MOBILE_OFFSET","hasBlur","isGhost2","ctx","alpha","IS_CANVAS_FILTER_SUPPORTED","filter","RADIUS","userId","getPeerStoryHtmlId","StoryViewerOrigin","StoryRibbon","storyRibbonStyles","root","ChatList","calculateOffsetX","slideAmount","isActiveSlideSize","isMoveThroughActiveSlide","isBackward","mainOffset","additionalOffset","totalOffset","roundToNearestEven","useSlideSizes","baseWidth","baseHeight","newWidth","newHeight","widthScale","heightScale","calculateScale","activeSlideWidth","slideWidth","activeSlide","slide","toActiveScale","fromActiveScale","calculateSlideSizes","useStoryProps","story","isCurrentUserPremium","isDropdownMenuOpen","isLoadedStory","isDeletedStory","hasText","hasMessageText","hasForwardInfo","forwardInfo","thumbnail","previewHash","getStoryMediaHash","noSound","fullMediaHash","fullMediaData","altMediaHash","altMediaData","hasFullData","hasThumb","canDownload","noForwards","downloadHash","downloadMediaData","storyViewer","isStealthModalOpen","stealthMode","stories","selectIsCurrentUserPremium","StealthModeModal","toggleStealthModal","activateStealthMode","showNotification","openPremiumModal","isOnCooldown","setIsOnCooldown","serverTime","getServerTime","cooldownUntil","handleTimerEnds","handleActivate","initialSection","inactive","leftElement","isShiny","TextTimer","langKey","endsAt","onEnd","deleteStory","openNextStory","handleDeleteStoryClick","storyId","ConfirmDialog","confirmLabel","confirmHandler","confirmIsDestructive","contactListIds","selectedIds","lockedIds","onSelect","searchQuery","setSearchQuery","displayedIds","contactIds","unique","filterPeersByQuery","ids","query","PeerPicker","itemIds","MEMO_EMPTY_ARRAY","lockedSelectedIds","filterValue","filterPlaceholder","searchInputId","isSearchable","withDefaultPadding","forceShowSelf","onSelectedIdsChange","onFilterChange","allowMultiple","withStatus","itemInputType","usersById","saveCloseFriends","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","closeFriendIds","isCloseFriend","useEffectWithPrevDeps","prevIsActive","handleSelectedContactIdsChange","handleSubmit","userIds","_Fragment","FloatingActionButton","isShown","OPTIONS","actions","Screens","selectPeerStory","visibility","contactList","byId","editStoryPrivacy","toggleStoryInProfile","isOpenModal","openModal","closeModal","privacy","setPrivacy","isPinned","setIsPinned","isInProfile","setActiveKey","editingBlockingCategory","setEditingBlockingCategory","isBackButton","allowList","allowUserIds","selectedBlockedIds","blockUserIds","handleAllowUserIdsChange","newIds","handleDenyUserIdsChange","handleCloseButtonClick","handleIsPinnedToggle","modal","noBackdrop","closeButton","headerTitle","closeFriends","denyList","renderHeaderContent","slideClassName","storyLifeTime","getHours","expireDate","section","list","checked","input","handleVisibilityChange","newVisibility","teactExperimentControlled","optionContent","option_name","tabIndex","role","handleActionClick","actionInner","getUserFullName","Switcher","submit","renderPrivacyList","CloseFriends","AllowDenyList","sender","fromPeerId","EmbeddedStoryForward","openStoryViewer","loadPeerStoriesByIds","openChat","storyIds","fromName","openOriginalStory","isDeleted","isSingleStory","handleMouseDown","useFastClick","PeerColorWrapper","getPeerColorClass","onMouseDown","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","renderTextWithEntities","renderTextContent","renderSender","isExpanded","onExpand","onFold","contentRef","textRef","showMoreButtonRef","renderingStory","useCurrentOrPrev","caption","hasOverflow","setHasOverflow","prevIsExpanded","usePrevDuringAnimation","isInExpandedState","addExtraClass","removeExtraClass","canExpand","shouldRenderShowMore","requestMeasure","button","offsetWidth","setProperty","requestForcedReflow","textContainer","textOffsetTop","lineHeight","totalLines","calcTextLineHeightAndCount","isOverflowing","overflowShift","scrollTo","fullClassName","MessageText","messageOrStory","withTranslucentThumbs","StoryFooter","openStoryViewModal","sendStoryReaction","views","isOut","sentReaction","viewsCount","forwardsCount","reactionsCount","isSentStoryReactionHeart","isSameReaction","HEART_REACTION","canForward","isPublic","containerId","getStoryKey","recentViewers","getGlobal","recentViewerIds","handleOpenStoryViewModal","handleForwardClick","handleLikeStory","reaction","AvatarList","peers","nonInteractive","ReactionAnimatedEmoji","withEffectOnly","getReactionKey","isViewed","isPaused","onImageComplete","handleAnimationEnd","animationName","onAnimationEnd","VIDEO_MIN_READY_STATE","IS_SAFARI","appConfig","user","selectUser","selectChat","userFullInfo","selectUserFullInfo","viewModal","isPrivacyModalOpen","storyList","forwardMessages","forwardedStoryId","premiumModal","safeLinkModalUrl","mapModal","reportModal","giftInfoModal","isPaymentMessageConfirmDialogOpen","isPremiumModalOpen","shouldForcePause","reactionPicker","mediaAreas","forwardSenderId","area","channelId","forwardSender","withHeaderAnimation","fromPeer","fromId","paidMessagesStars","selectPeerPaidMessagesStars","isAccountFrozen","selectIsCurrentUserFrozen","orderedIds","storyIdsByPeerId","storyChangelogUserId","viewersExpirePeriod","storyExpirePeriod","storyViewersExpirePeriod","isChatExist","arePeerSettingsLoaded","settings","isArchivedStories","isPrivateStories","getIsAnimating","onDelete","viewStory","setStoryViewerMuted","openPreviousStory","loadPeerSkippedStories","copyStoryLink","openStoryPrivacyEditor","loadPeerSettings","fetchChat","loadStoryViews","isComposerHasFocus","markComposerHasFocus","unmarkComposerHasFocus","isStoryPlaybackRequested","playStory","pauseStory","isStoryPlaying","markStoryPlaying","unmarkStoryPlaying","isAppFocused","markAppFocused","unmarkAppFocused","isCaptionExpanded","expandCaption","foldCaption","isPausedBySpacebar","setIsPausedBySpacebar","isPausedByLongPress","markIsPausedByLongPress","unmarkIsPausedByLongPress","markDropdownMenuOpen","unmarkDropdownMenuOpen","isChangelog","isUserStory","isChatStory","isChannelStory","canPinToProfile","canUnpinFromProfile","areViewsExpired","forwardSenderTitle","canCopyLink","hasUsername","canShare","canPlayStory","shouldShowComposer","shouldShowFooter","shouldRenderSkeleton","skeletonTransitionClassNames","mediaTransitionClassNames","thumbRef","useCanvasBlur","previewTransitionClassNames","useMediaTransitionDeprecated","shouldRenderComposer","composerAppearanceAnimationClassNames","shouldRenderCaptionBackdrop","captionBackdropTransitionClassNames","appearanceAnimationClassNames","shouldRenderCaption","captionAppearanceAnimationClassNames","isStreamingSupported","useStreaming","PRIMARY_VIDEO_MIME","useStoryPreloader","canWrite","handlePauseStory","handlePlayStory","handleLongPressStart","handleLongPressEnd","handleDropdownMenuOpen","handleDropdownMenuClose","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","hasAllData","useBackgroundMode","load","keyCode","prevIsComposerHasFocus","prevIsCaptionExpanded","prevShouldForcePause","prevIsAppFocused","prevIsPausedByLongPress","handleOpenChat","handleForwardPeerClick","handleFromPeerClick","handleOpenPrevStory","handleOpenNextStory","handleVideoStoryTimeUpdate","captureKeyboardListeners","onRight","onLeft","handleCopyStoryLink","handlePinClick","handleUnpinClick","handleReportStoryClick","handleInfoPrivacyEdit","handleInfoPrivacyClick","isForContacts","isForCloseFriends","myName","handleOpenStealthModal","activeUntil","diff","handleDownload","inputPlaceholder","formatStarsAsIcon","asFont","withNodes","StoryProgress","formatRelativePastTime","isEdited","privacyIcon","gradient","renderStoryPrivacyButton","onOpen","Skeleton","OptimizedVideo","canPlay","isPriority","disableRemotePlayback","SECONDARY_VIDEO_MIME","MediaAreaOverlay","withStory","storyViewerMode","StoryCaption","Composer","MAIN_THREAD_ID","getIsMobile","editableInputCssSelector","EDITABLE_STORY_INPUT_CSS_SELECTOR","editableInputId","EDITABLE_STORY_INPUT_ID","inputId","onFocus","onBlur","lastViewedByPeerId","lastViewedByPeerIds","lastViewedId","storyIdsForViewer","peerStories","lastReadId","hasUnreadStories","previewIndexId","isLoaded","imageHash","thumbUrl","currentPeerId","currentStoryId","isSinglePeer","isPrivate","isArchive","byPeerId","orderedPeerIds","peerIds","selectIsStoryViewerOpen","stopActiveReaction","renderingPeerId","setRenderingPeerId","renderingStoryId","setRenderingStoryId","prevPeerId","renderingIsArchive","renderingIsPrivate","renderingIsSinglePeer","renderingIsSingleStory","slideSizes","rendersRef","setIsAnimating","setRef","renderingPeerIds","slice","renderingPeerPosition","currentPeerPosition","calculateTransformX","transformX","getCurrentStoryRef","composer","focusEditableElement","disableScrolling","enableScrolling","Object","entries","String","handleTransitionEnd","Story","onTransitionEnd","buildStyle","renderStory","StoryPreview","renderStoryPreview","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","scrollHeight","DEFAULT_REACTION_SIZE","storyView","availableReactions","reactions","StoryView","closeStoryViewer","unblockUser","blockUser","deleteContact","updateStoryView","closeStoryViewModal","contextActions","areStoriesBlocked","isUserBlocked","isContact","fullName","handler","isOnlyStories","statusIcon","shouldColorStatus","status","isModified","formatDateAtTime","opacityFadeIn","blocked","rightElement","ReactionStaticEmoji","viewReaction","withIconHeart","withPortalForMenu","menuBubbleClassName","menuBubble","PrivateChatInfo","withColoredStatus","noStatusOrTyping","GroupChatInfo","nextOffset","loadStoryViewList","clearStoryViews","areJustContacts","markJustContacts","unmarkJustContacts","areReactionsFirst","markReactionsFirst","unmarkReactionsFirst","setQuery","isExpired","shouldShowJustContacts","STORY_VIEWS_MIN_CONTACTS_FILTER","shouldShowSortByReactions","STORY_MIN_REACTIONS_SORT","shouldShowSearch","STORY_VIEWS_MIN_SEARCH","hasHeader","refetchViews","sortedViews","sort","a","b","reactionA","reactionB","prepareComparator","placeholderCount","notAllAvailable","handleLoadMore","MoreMenuButton","isMenuOpen","fluid","sortButton","topButton","faded","iconSort","viewsList","contactFilter","check","SearchInput","search","topScrolled","onScroll","centeredInfo","InfiniteScroll","items","onLoadMore","view","additionalKeyId","_","i","PlaceholderChatInfo","bottomInfo","closeStoryPrivacyEditor","reportStory","storyToDelete","setStoryToDelete","isPrevOpen","handleOpenDeleteModal","s","handleCloseDeleteModal","openMessageReport","thumb","safeAreaBottom","getComputedStyle","documentElement","getPropertyValue","parseFloat","toTranslateX","toTranslateY","toScaleX","toScaleY","ghost2","ghost2Top","StorySlides","StoryDeleteConfirmModal","StoryViewModal","StorySettings","TOPIC_ICON_SIZE","ITEM_CLASS_NAME","ChatOrUserPicker","chatOrUserIds","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","isLowStackPriority","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","selectTopicsById","selectTopics","forumTopicsById","useSelector","topicIds","topics","chatsById","chats","chatFullInfoById","fullInfoById","searchTitle","toLowerCase","values","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","renderChatItem","monoforumChannel","selectMonoforumChannel","isSelf","isApiPeerChat","subtitleClassName","getGroupStatus","userStatus","selectUserStatus","getUserStatus","isUserOnline","getSubtitle","PickerItem","FullNameTitle","isMonoforum","isSavedMessages","avatarElement","asMessageBubble","PEER_PICKER_ITEM_HEIGHT_PX","onKeyDown","placeholder","withAbsolutePositioning","maxHeight","Loading","topicId","TopicIcon","letterClassName","itemSelector","listIds","orderedPinnedIds","activeListIds","archivedListIds","archived","pinnedIds","RecipientPicker","API_CHAT_TYPES","onSelectRecipient","isForwarding","setSearch","priorityIds","hasAdminRights","getHasAdminRight","isDeletedUser","selectIsMonoforumAdmin","chatFullInfo","selectChatFullInfo","sorted","sortChatIds","filterChatIdsByType","renderingIds","isManyMessages","isStory","ForwardRecipientPicker","openChatOrTopicWithReplyInDraft","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","forwardStory","renderingIsStory","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","toChatId","getUserFirstOrLastName","getChatTitle","DraftRecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","AttachBotRecipientPicker","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","Dialogs","dismissDialog","sendMessage","isModalOpen","dialog","contactRequest","handleConfirm","contact","messageList","getReadableErrorText","pick","Notifications","notifications","notification","Notification","localId","SafeLinkModal","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","withMarkdown","OpenMapModal","closeMapModal","point","geoPoint","googleUrl","bingUrl","appleUrl","osmUrl","google","prepareMapUrl","bing","osm","handleGoogleClick","handleBingClick","handleAppleClick","handleOsmClick","IS_MAC_OS","currentUser","UrlAuthModal","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","isWriteAllowed","handleLoginChecked","Checkbox","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","padStart","formatDay","CalendarModal","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","handleDateSelect","inputMode","historyCalendarSelectedAt","HistoryCalendar","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","phoneCodeList","countryList","phoneCodes","NewContactModal","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","ResizeHandleType","resizeHandleSelectorsMap","Top","Bottom","Left","Right","topLeft","TopLeft","topRight","TopRight","bottomLeft","BottomLeft","bottomRight","BottomRight","resizeHandleSelectors","resizeTimeout","FULLSCREEN_POSITION","webApps","selectActiveWebApp","modalState","openedWebApps","isMinimizedState","activeTabBot","MinimizedWebAppModal","changeWebAppModalState","closeWebAppModal","openedWebAppsValues","openedTabsCount","activeTabBotId","app","handleCloseClick","handleExpandClick","state","activeTabName","botName","pluralValue","renderTitle","isPopularApp","requestMainWebView","theme","extractCurrentThemeParams","activeUserCount","botActiveUsers","badgeText","formatIntegerCompact","PeerBadge","avatarContainer","textClassName","badgeClassName","userCountBadge","badgeIconClassName","userBadgeIcon","badgeIcon","runThrottled","cb","globalSearch","popularBotApps","fetchingStatus","botApps","recentBotIds","topBotApps","MoreAppsTabContent","shouldShowMoreMine","setShouldShowMoreMine","searchPopularBotApps","handleToggleShowMoreMine","prev","filteredFoundIds","LoadMoreDirection","Backwards","handleSearchInputReset","noFastList","preloadBackwards","onReset","sectionTitle","showMoreLink","sectionContent","WebAppGridItem","FULLSCREEN_BUTTONS_AREA_HEIGHT","MAIN_BUTTON_ANIMATION_TIME","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","activeWebApp","activeWebAppKey","selectWebApp","activeBotId","attachBot","attachMenu","bots","botAppSettings","botInfo","appSettings","selectTheme","isPaymentModalOpen","regularPaymentStatus","payment","starsPaymentStatus","inputInvoice","starsInputInvoice","starsPayment","botAppPermissions","selectBotAppPermissions","paymentStatus","WebAppModalTabContent","webApp","registerSendEventCallback","registerReloadFrameCallback","isTransforming","isMultiTabSupported","onContextMenuButtonClick","modalHeight","closeActiveWebApp","sendWebViewData","toggleAttachBot","openTelegramLink","setWebAppPaymentSlug","switchBotInline","sharePhoneWithBot","updateWebApp","resetPaymentStatus","openChatWithInfo","openEmojiStatusAccessModal","openLocationAccessModal","openPreparedInlineMessageModal","mainButton","setMainButton","secondaryButton","setSecondaryButton","markLoaded","markUnloaded","popupParameters","setPopupParameters","isRequestingPhone","setIsRequestingPhone","isRequestingWriteAccess","setIsRequestingWriteAccess","requestedFileDownload","setRequestedFileDownload","bottomBarColor","setBottomBarColor","unlockPopupsAt","handlePopupOpened","handlePopupClosed","setUnlockPopupsAt","sequentialCalls","lastClosedDate","usePopupLimit","headerButtonRef","headerButtonCaptionRef","exitFullScreenCallback","fullscreenElementRef","appName","activeWebAppName","backgroundColor","isBackButtonVisible","placeholderPath","isCloseModalOpen","isRemoveModalOpen","webAppKey","getWebAppKey","isAvailable","IS_GEOLOCATION_SUPPORTED","isAccessRequested","geolocation","isAccessGranted","updateCurrentWebApp","updatedPartialWebApp","update","themeParams","secondary_bg_color","themeBackgroundColor","bg_color","backgroundColorFromEvent","setBackgroundColorFromEvent","backgroundColorFromSettings","backgroundDarkColor","themeHeaderColor","headerColorFromEvent","setHeaderColorFromEvent","headerColorFromSettings","headerColor","headerDarkColor","frameRef","isSimple","reloadFrame","sendEvent","sendFullScreenChanged","sendViewport","sendSafeArea","sendTheme","useWebAppFrame","isSimpleView","onEvent","openInvoice","closeWebApp","openSuggestedStatusModal","isReloadSupported","reloadTimeout","ignoreEventsRef","lastFrameSizeRef","handleLoad","contentWindow","JSON","stringify","eventType","eventData","is_fullscreen","forceReloadFrame","once","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","skipClosingConfirmation","scrollbarColor","reload_supported","req_id","slug","linkUrl","available","custom_emoji_id","BigInt","customEmojiId","plannedEvents","getIsWebAppsFullscreenSupported","exitIfFullscreenCallback","TME_LINK_PREFIX","path_full","shouldIgnoreCache","force_request","is_visible","isSettingsButtonVisible","validateHexColor","color_key","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","shouldConfirmClosing","buttons","handleAppPopupClose","chat_types","convertToApiChatType","isSamePeer","handleRejectPhone","handleRejectWriteAccess","handleRequestWriteAccess","method","requestId","parameters","customMethod","handleInvokeCustomMethod","handleRejectFileDownload","fileUrl","handleCheckDownloadFile","file_name","access_requested","access_granted","geolocationData","getGeolocationStatus","accessRequested","accessGranted","latitude","longitude","altitude","course","heading","speed","horizontal_accuracy","accuracy","vertical_accuracy","altitudeAccuracy","handleRequestLocation","isMainButtonVisible","isSecondaryButtonVisible","handleHideCloseModal","handleConfirmCloseModal","handleHideRemoveModal","handleMainButtonClick","handleSecondaryButtonClick","buttonId","button_id","handleAppPopupModalClose","sendThemeCallback","setFullscreenCallback","checkIfFullscreen","sendFullScreenChangedCallback","visibilityChangedCallBack","prevModalState","prevIsPaymentModalOpen","handleRemoveAttachBot","isEnabled","handleAcceptPhone","shouldCloseActive","handleAcceptWriteAccess","handleDownloadFile","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","secondaryButtonCurrentPosition","secondaryButtonCurrentColor","secondaryButtonCurrentTextColor","secondaryButtonCurrentIsActive","secondaryButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideMainButton","setShouldHideMainButton","shouldHideSecondaryButton","setShouldHideSecondaryButton","shouldShowMainButton","setShouldShowMainButton","shouldShowSecondaryButton","setShouldShowSecondaryButton","shouldShowAppNameInFullscreen","setShouldShowAppNameInFullscreen","backButtonTextWidth","setBackButtonTextWidth","isVerticalLayout","rowsCount","hideDirection","mainButtonChangeTimeout","mainButtonFastTimeout","secondaryButtonChangeTimeout","secondaryButtonFastTimeout","appNameDisplayTimeout","frameStyle","handleBackClick","handleCollapseClick","handleShowContextMenu","backIconClass","backButtonCaption","hasHeaderElement","viewBox","renderDefaultPlaceholder","sandbox","allow","allowFullScreen","hasCloseButton","filename","MINIMIZED_STATE_SIZE","DEFAULT_MAXIMIZED_STATE_SIZE","MAXIMIZED_STATE_MINIMUM_SIZE","miniAppsCachedPosition","miniAppsCachedSize","selectSharedSettings","cachedPosition","cachedSize","WebAppModal","prolongWebView","openWebAppTab","openMoreAppsTab","closeMoreAppsTab","updateMiniAppCachedPosition","updateMiniAppCachedSize","getMaximizedStateSize","setMaximizedStateSize","getSize","openedOrderedKeys","sessionKeys","isMoreAppsTabActive","tabs","isMaximizedState","isFullScreen","supportMultiTabMode","menuRef","getTriggerElement","getRootElement","getMenuElement","isContextMenuOpen","contextMenuAnchor","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isDraggingEnabled","setIsDraggingEnabled","headerElement","containerElement","isDragging","draggableStyle","dragHandleElementRef","isDragEnabled","originalSize","minimumSize","elementCurrentPosition","setElementCurrentPosition","elementCurrentSize","setElementCurrentSize","getElementPositionOnStartTransform","setElementPositionOnStartTransform","getElementSizeOnStartTransform","setElementSizeOnStartTransform","getTransformStartPoint","setTransformStartPoint","elementPositionOnStartTransform","transformStartPoint","dragHandleElement","isInitiated","setIsInitiated","wasElementShown","setWasElementShown","startDragging","stopDragging","startResizing","stopResizing","isWindowsResizing","startWindowResizing","stopWindowResizing","hitResizeHandle","setHitResizeHandle","getVisibleArea","innerWidth","innerHeight","updateCurrentPosition","getActualPosition","getCenteredPosition","visibleArea","centeredPosition","handleStartDrag","MouseEvent","handleStartResize","targetElement","resizeHandle","RESIZE_HANDLE_SELECTOR","getResizeHandleFromTarget","handleDragRelease","handleResizeRelease","ensurePositionInVisibleArea","visibleAreaWidth","visibleAreaHeight","componentWidth","componentHeight","newX","newY","adjustPositionWithinBounds","newPosition","ensureSizeInVisibleArea","sizeForCheck","newSize","originalWidth","originalHeight","adjustSizeWithinBounds","handleWindowResize","handleDrag","sizeOnStartTransform","pageVisibleX","pageVisibleY","maxX","maxY","newBounds","cleanups","resizeHandler","cursorStyle","actualPosition","useDraggable","getMinimumSize","currentSize","currentWidth","currentHeight","queryId","openTabsCount","useInterval","replyInfo","sendEventCallback","reloadFrameCallback","callback","handleSettingsButtonClick","handleRefreshClick","handleModalClose","handleCloseMoreAppsTab","handleTabClose","handleToggleClick","handleFullscreenClick","handleOpenMoreAppsTabClick","handleTabClick","tab","openBotChat","renderMenuItems","isAttachBot","renderMoreMenu","anchor","backButtonClassName","headerTextVar","r","g","hexToRgb","luma","getColorLuma","renderTabCurveBorder","fill","buildResizeHandleClass","handleClassName","RESIZE_HANDLE_CLASS_NAME","useHorizontalScroll","dialogRef","dialogStyle","dialogContent","shortName","renderActiveTab","noBackdropClose","BotTrustModal","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","handleBotTrustAccept","handleBotTrustDecline","AttachBotInstallModal","confirmAttachBotInstall","cancelAttachBotInstall","isTosAccepted","setIsTosAccepted","tosLabel","split","linkText","MINI_APP_TOS_URL","rel","DeleteFolderDialog","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","COLORS","PremiumFeatureItem","isFontIcon","newIndex","colorA","colorB","ceil","lerpRgb","buttonClassName","fontIcon","SliderDots","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","isLast","isPreLast","isFirst","isPreFirst","isInvisible","PremiumLimitsCompare","leftValue","rightValue","floatingBadgeIcon","rightStyle","COLOR_START","COLOR_END","PremiumLimitPreview","colorStepProgress","lerp","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","play","isLowPriority","stickers","premium","PremiumFeaturePreviewStickers","setOffset","setSize","renderedStickers","cycleRestrict","STORY_FEATURE_TITLES","stories_order","stories_stealth","stories_views","stories_timer","stories_save","stories_caption","stories_link","STORY_FEATURE_DESCRIPTIONS","STORY_FEATURE_ICONS","STORY_FEATURE_ORDER","CIRCLE_SIZE","AVATAR_SIZES","giant","PremiumFeaturePreviewVideo","circleRef","dpr","useDevicePixelRatio","drawGradientCircle","segmentsCount","readSegmentsCount","readSegmentColor","maxSize","forPremiumPromo","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","wrapper","reverse","down","DeviceFrame","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","translations","saved_tags","last_seen","message_privacy","effects","todo","PREMIUM_FEATURE_DESCRIPTIONS","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","recommendedChannels","moreAccounts","LIMITS_DESCRIPTIONS","PremiumFeatureModal","promo","isPremium","limits","premiumPromoOrder","subscriptionOption","onClickSubscribe","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","PREMIUM_FEATURE_SECTIONS","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","filteredSections","subscriptionButtonText","months","perMonthPrice","price","handleLimitsScroll","scrollContainer","animateHorizontalScroll","then","handleSelectSlide","currentSection","hasHeaderBackdrop","scrollLeft","scrollLeftOriginal","reverseIndex","prevElement","reverseElement","toString","toggleExtraClass","PREMIUM_LIMITS_ORDER","defaultLimit","premiumLimit","PremiumFeaturePreviewStories","videoSections","shouldUseNewLang","videos","PREMIUM_BOTTOM_VIDEOS","renderTextFilters","PremiumSubscriptionOption","fullMonthlyAmount","isGiveaway","perMonth","isUserCountPlural","discount","handleChange","formatCurrencyAsString","STATUS_EMOJI_SIZE","PREMIUM_FEATURE_COLOR_ICONS","PremiumStatus","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumTranslate","PremiumTags","PremiumLastSeen","PremiumMessagePrivacy","PremiumEffects","fromUser","fromUserId","fromUserStatusEmoji","emojiStatus","customEmojis","documentId","fromUserStatusSet","selectStickerSet","stickerSetInfo","isSuccess","isGift","monthsAmount","toUser","toUserId","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","premiumSlug","premiumInvoiceSlug","premiumBotUsername","PremiumMainModal","closePremiumModal","requestConfetti","loadStickers","openStickerSet","isHeaderHidden","setHeaderHidden","setCurrentSection","selectedSubscriptionOption","setSubscriptionOption","handleOpenSection","handleResetSection","handleClickWithStartParam","handleChangeSubscriptionOption","foundOption","showConfetti","withStars","prevIsPremium","defaultOption","handleOpenStatusSet","monthOption","subscribeButtonText","CustomEmoji","PremiumLogo","template","first","second","emoji","thumbCustomEmojiId","link","getHeaderText","statusText","entities","statusEntities","renderFooterText","ItemPicker","notFoundText","noScrollRestore","isViewOnly","itemClassName","forceRenderAllItems","onDisabledClick","optionalProps","lockedSelectedValues","lockedUnselectedValues","timeoutId","selectedValues","selectedValue","lockedSelectedValuesSet","Set","lockedUnselectedValuesSet","sortedItemValuesList","lockedSelectedBucket","unlockedBucket","lockedUnselectableBucket","has","concat","handleItemClick","newSelectedValues","splice","onSelectedValuesChange","onSelectedValueChange","viewportValuesList","handleFilterChange","renderItem","itemOption","subLabel","isItemLoading","isAlwaysUnselected","isAlwaysSelected","isLocked","isChecked","inputElement","Radio","onlyInput","pickerList","padded","noResults","CountryPickerModal","selectionLimit","selectedCountryIds","setSelectedCountryIds","noPickerScrollRestore","country","iso2","defaultName","handleSelectedIdsChange","newSelectedIds","pickerSelector","pickerTitle","main","picker","GiveawayChannelPickerModal","giveawayChatId","initialSelectedIds","onSelectedIdsConfirmed","pendingChannelId","setPendingChannelId","isConfirmModalOpen","openConfirmModal","closeConfirmModal","setSelectedIds","channelIds","isChatSuperGroup","displayedChannelIds","foundChannelIds","handleSelectedChannelIdsChange","privateLinkChannelId","isChatPublic","confirmPrivateLinkChannelSelection","handleModalConfirm","GiveawayTypeOption","isLink","onClickAction","userNames","selectedMemberIds","displayText","members","adminMembersById","GiveawayUserPickerModal","memberIds","statusesById","adminIdsSet","sortUserIds","displayedMemberIds","filteredUserIds","isUserBot","handleSelectedMemberIdsChange","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","giveawayModal","gifts","selectedMemberList","selectedChannelList","selectedChannelIds","giveawayBoostPerPremiumLimit","giveawayBoostsPerPremium","isStarsGiftEnabled","userSelectionLimit","giveawayAddPeersMax","countrySelectionLimit","giveawayCountriesMax","general","prepaidGiveaway","starsGiftOptions","starOptions","GiveawayModal","GIVEAWAY_BOOST_PER_PREMIUM","GIVEAWAY_MAX_ADDITIONAL_COUNTRIES","GIVEAWAY_MAX_ADDITIONAL_USERS","closeGiveawayModal","launchPrepaidGiveaway","launchPrepaidStarsGiveaway","isCalendarOpened","openCalendar","closeCalendar","isCountryPickerModalOpen","openCountryPickerModal","closeCountryPickerModal","isUserPickerModalOpen","openUserPickerModal","closeUserPickerModal","isChannelPickerModalOpen","openChannelPickerModal","closeChannelPickerModal","TYPE_OPTIONS","GiftStar","customExpireDate","setCustomExpireDate","selectedRandomUserCount","setSelectedRandomUserCount","selectedGiveawayOption","setGiveawayOption","setSelectedStarOption","selectedSubscriberOption","setSelectedSubscriberOption","selectedMonthOption","setSelectedMonthOption","selectedUserIds","setSelectedUserIds","setSelectedChannelIds","shouldShowWinners","setShouldShowWinners","shouldShowPrizes","setShouldShowPrizes","prizeDescription","setPrizeDescription","dataPrepaidGiveaway","setDataPrepaidGiveaway","dataStarsPrepaidGiveaway","setDataStarsPrepaidGiveaway","isPremiumGiveaway","isStarsGiveaway","selectedUserCount","boostQuantity","boostStarsQuantity","yearlyBoosts","SUBSCRIBER_OPTIONS","monthQuantity","isStarsPrepaidGiveaway","isPremiumPrepaidGiveaway","selectedGift","gift","selectedStarsGift","filteredGifts","STARS_CURRENCY_CODE","basicGift","userCountOptions","winnerCountOptions","quantity","handlePremiumClick","boostChannelId","additionalChannelIds","isOnlyForNewSubscribers","countries","areWinnersVisible","untilDate","confirmLaunchPrepaidGiveaway","giveawayId","paymentPurpose","handleRandomUserCountChange","newValue","handleWinnerCountChange","handlePrizeDescriptionChange","handleChangeSubscriberOption","handleChangeTypeOption","handleExpireDateChange","handleSetCountriesListChange","handleSelectedUserIdsChange","handleShouldShowWinnersChange","handleShouldShowPrizesChange","onClickActionHandler","handleStarClick","renderGiveawayOptionList","filteredChannelIds","deleteParticipantsHandler","subLabelClassName","formatDateTimeToString","boosts","RangeSliderWithMarks","rangeCount","marks","match","Link","isPrimary","renderPremiumFeaturesLink","GIVEAWAY_MAX_ADDITIONAL_CHANNELS","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","savedDialogsPinned","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","PremiumLimitReachedModal","closeLimitReachedModal","isClosing","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SLIDE_TRANSITION_DURATION","FOCUS_MARGIN","useStickerPickerObservers","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","stickerSetEl","isClose","animateScroll","maxDistance","StickerSetCover","stickerSet","STICKER_SIZE_PICKER_HEADER","observeIntersection","sharedCanvasRef","hasThumbnail","hasVideoThumb","hasAnimatedThumb","hasStaticThumb","customEmoji","useCustomEmoji","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","colorFilter","useColorFilter","useIsIntersecting","shouldPlay","shouldFallbackToSticker","IS_WEBM_SUPPORTED","firstStickerHash","getStickerMediaHash","firstStickerMediaData","mediaHash","coords","useCoordsInSharedCanvas","observeIntersectionForPlaying","selectIsAlwaysHighPriorityEmoji","sharedCanvas","sharedCanvasCoords","forceAlways","getFirstLetters","contentForStatusMenuContext","arg","StickerButton","noContextMenu","isStatusPicker","canViewSet","observeIntersectionForShowing","isSelected","shouldIgnorePremium","noShowPremium","withTranslucentThumb","clickArg","onFaveClick","onUnfaveClick","onRemoveRecentClick","onContextMenuOpen","onContextMenuClose","onContextMenuClick","isEffectEmoji","withSparkles","setEmojiStatus","isFree","hasEffect","isCustomEmoji","shouldLoad","isIntesectingForShowing","handleBeforeContextMenu","shouldRenderContextMenu","getLayout","withPortal","shouldAvoidNegativePosition","handleRemoveClick","handleContextRemoveRecent","handleContextUnfave","handleContextFave","handleSendQuiet","handleSendScheduled","handleOpenSet","handleEmojiStatusExpiresClick","until","shouldShowCloseButton","contextMenuItems","preventMessageInputBlurWithBubbling","Sparkles","preset","StickerView","isSmall","shouldLoop","shouldPreloadPreview","noLoad","noVideoOnMobile","withSharedAnimation","noFastClick","ReactionEmoji","loadAndPlay","sharedCanvasHqRef","isCustom","availableReaction","staticIcon","animationId","selectAnimation","getDocumentMediaHash","StarReaction","EMOJI_SIZE_PICKER","AnimatedIconWithPreview","collectibleStatuses","collectibleEmojiStatuses","statuses","StickerSet","isNearActive","favoriteStickers","isReactionPicker","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isChatEmojiSet","isChatStickerSet","isTranslucent","noContextMenus","onReactionSelect","onReactionContext","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isStatusCollectible","COLLECTIBLE_STATUS_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","accessHash","isInstalled","installedDate","isArchived","canCut","EFFECT_EMOJIS_SET_ID","EFFECT_STICKERS_SET_ID","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","collectibleEmojiIdsSet","withAddSetButton","addSetButtonText","pill","grey","reactionId","isHqEmoji","canvasRef","HEADER_BUTTON_WIDTH","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","setsById","stickerSetsById","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","defaultTags","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","chatEmojiSetId","emojiSet","isWithPaidReaction","isPaidReactionAvailable","defaultTagReactions","CustomEmojiPicker","pickerListClassName","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","collectibleStatusEmojis","collectibleStatusEmojiIds","prefix","canLoadAndPlay","areAddedLoaded","allSets","defaultSets","TOP_SYMBOL_SET_ID","topReactionsSlice","unshift","cleanRecentReactions","some","topReaction","cleanAvailableReactions","isInactive","allRecentReactions","defaultStatusIconsPack","uniqueByField","defaultTopicIconsPack","userSetIds","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","newLeft","handleEmojiSelect","pickerStyles","listClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","StatusPickerMenu","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CUSTOM_EMOJI_SIZE","SuggestedStatusModal","closeSuggestedStatusModal","sendWebAppEvent","renderingModal","mockPeerWithStatus","formatShortDuration","handleSetStatus","expires","referrerWebAppKey","loopLimit","PeerChip","mockPeer","withEmojiStatus","getFirstAvailableBoost","myBoosts","boost","firstBoost","prevBoostedChat","BoostModal","applyBoost","closeBoostModal","loadFullChat","isReplaceModalOpen","openReplaceModal","closeReplaceModal","isWaitDialogOpen","openWaitDialog","closeWaitDialog","isPremiumDialogOpen","openPremiumDialog","closePremiumDialog","chatTitle","boostedChatTitle","isStatusLoaded","isBoosted","leftText","rightText","descriptionText","canBoostMore","boostStatus","hasMyBoost","areBoostsInDifferentChannels","every","currentLevel","hasNextLevel","levelProgress","remainingBoosts","isMaxLevel","getBoostProgressInfo","hasBoost","moreBoosts","modalTitle","boostsLeftToUnrestrict","boostsToUnrestrict","boostsApplied","boostTimes","isBoostDisabled","isReplacingBoost","handleApplyBoost","slots","slot","handleProceedPremium","handleButtonClick","PremiumProgress","floatingBadgeText","isOnlyConfirm","chatMessage","GiftCodeModal","closeGiftCodeModal","applyGiftCode","canUse","toId","usedAt","handleOpenGiveaway","giveawayMessageId","modalData","LinkField","tableData","isFromGiveaway","TableInfoModal","getClosestEntry","arr","curr","selfDestructAccountDays","DeleteAccountModal","closeDeleteAccountModal","setAccountTTL","selectedOption","setSelectedOption","optionToDays","initialSelectedOption","ACCOUNT_TTL_OPTIONS","days","onCloseHandler","withIcon","ChatlistAlready","invite","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","missingPeerIds","hasChatsToAdd","isNew","alreadyPeerIds","newChatsCount","noCustomEmojiPlayback","noTitleAnimations","handleSelectionToggle","areAllSelected","pickerWrapper","pickerHeader","pickerHeaderInfo","selectionToggle","Badge","buttonBadge","isAlternateColor","ChatlistDelete","suggestedPeerIds","leaveChatlist","ChatlistNew","joinedIds","isNotJoined","selectedCount","removal","selectChatFolder","ChatlistInviteModal","renderingInfo","renderingFolderTitle","folderTabNumber","renderContent","folderTitle","foldersWrapper","folders","Tab","badgeCount","isBadgeActive","ChatInviteModal","acceptChatInvite","closeChatInviteModal","participantsRef","prevModal","usePrevious","hash","inviteInfo","about","isBroadcast","participantIds","participantsCount","isRequestNeeded","handleAccept","acceptLangKey","requestToJoinLangKey","customPeer","getCustomPeerFromInvite","participants","withVideo","participantCount","participant","minLevelToRestrictAds","channelRestrictAdsLevelMin","AboutAdsModal","closeAboutAdsModal","moreMenuRef","canReport","additionalInfo","sponsorInfo","isMonetizationSharing","renderingIsNewDesign","regularAdContent","SafeLink","SponsoredMessageContextMenuContainer","triggerRef","shouldSkipAbout","onItemClick","AboutMonetizationModal","blockchainText","monetizationTitle","specialReplacement","twoFaSettings","hint","passwordHint","VerificationMonetizationModal","closeMonetizationVerificationModal","clearMonetizationVerificationError","processMonetizationRevenueWithdrawalUrl","shouldShowPassword","setShouldShowPassword","password","currentPassword","handleClearError","PasswordForm","shouldShowSubmit","errorKey","withRegular","clearError","shouldResetValue","onChangePasswordVisibility","EmojiStatusAccessModal","closeEmojiStatusAccessModal","toggleUserEmojiStatusPermission","loadDefaultStatusIcons","currentStatusIndex","setCurrentStatusIndex","totalCount","prevIndex","renderPickerItem","chatItem","itemName","isBotAccessEmojiGranted","renderStatusText","LocationAccessModal","closeLocationAccessModal","toggleUserLocationPermission","renderInfo","ReportAdModal","reportSponsored","closeReportAdModal","openPreviousReportAdModal","transitionRef","handleOptionClick","renderingSection","renderingDepth","sectionDepth","sections","bottomText","hasSubtitle","ACTIVE_SLIDE_CLASS_NAME","handleAnimationStart","TO_SLIDE_CLASS_NAME","narrow","secondaryIcon","ReportModal","reportMessages","closeReportModal","openPreviousReportModal","setText","subject","handleTextChange","closeReportMessageModalHandler","sendMessageReportHandler","Report","TextArea","isOptional","maxLengthIndicator","noReplaceNewlines","isBlurred","isBackgroundBlurred","patternColor","background","customBackground","selectThemeValues","PreparedMessageModal","closePreparedInlineMessageModal","openSharePreparedMessageModal","customBackgroundValue","useCustomBackground","handleOpenClick","localMessage","getMockPreparedMessageFromResult","bgClassName","inert","Message","noComments","noReplies","appearanceOrder","isJustAdded","isFirstInGroup","isLastInGroup","isLastInList","isFirstInDocumentGroup","isLastInDocumentGroup","starsBalance","balance","isStarsBalanceModalOpen","starsBalanceModal","SharePreparedMessageModal","closeSharePreparedMessageModal","sendInlineBotResult","updateSharePreparedMessageModalSendArgs","pendingSendArgs","starsForSendMessage","closeConfirmDialog","closeConfirmModalPayForMessage","dialogHandler","paymentMessageConfirmDialogHandler","shouldAutoApprove","shouldPaidMessageAutoApprove","setAutoApprove","setShouldPaidMessageAutoApprove","handleWithConfirmation","handleActionWithPaymentConfirmation","usePaidMessageConfirmation","handleSend","handleSendWithPaymentConfirmation","handleClosePaymentMessageConfirmDialog","peerName","PaymentMessageConfirmDialog","userName","messagePriceInStars","messagesCount","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","setIsLoading","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","sendGifs","checkMedia","mediaPermissions","v","sendMedia","assign","embedLinks","sendPlain","sendMessages","resetPermissions","permissionKeyList","fullInfo","hasLinkedChat","linkedChatId","PermissionCheckboxList","isMediaDropdownOpen","setIsMediaDropdownOpen","shiftedClassName","dropdownClassName","withCheckbox","getControlIsDisabled","permissionGroup","shouldDisablePermissionForPublicGroup","countCheckedPermissions","handleOpenMediaDropdown","handleDisabledClick","blocking","labelText","rightIcon","onClickLabel","sendPhotos","sendVideos","sendStickers","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","deleteMessageModal","canDeleteForAll","selectCanDeleteSelectedMessages","isSuperGroup","contactName","getPrivateChatUserId","chatBot","isSystemBot","selectBot","canBanUsers","isCreator","isChatWithBot","selectIsChatWithBot","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","DeleteMessageModal","closeDeleteMessageModal","deleteMessages","reportChannelSpam","deleteChatMember","deleteScheduledMessages","exitMessageSelectMode","updateChatMemberBannedRights","deleteParticipantHistory","defaultBannedRights","peerIdsToDeleteAll","setPeerIdsToDeleteAll","peerIdsToBan","setPeerIdsToBan","peerIdsToReportSpam","setPeerIdsToReportSpam","isAdditionalOptionsVisible","setIsAdditionalOptionsVisible","shouldDeleteForAll","setShouldDeleteForAll","peerList","senderArray","getSendersFromSelectedMessages","linkedMonoforumId","buildNestedOptionListWithAvatars","member","peerListToDeleteAll","peerListToReportSpam","peerListToBan","isCurrentUserInList","isAdmin","shouldShowOption","peerNames","buildCollectionByCallback","ACTION_SPAM_OPTION","nestedOptions","ACTION_DELETE_OPTION","ACTION_BAN_OPTION","toggleAdditionalOptions","filterMessageIdByPeerId","selectedMessageIdList","msgId","selectSenderFromMessage","handleReportSpam","userMessagesMap","messageIdList","participantId","handleDeleteMessages","filteredMessageIdList","handleDeleteAllPeerMessages","peerIdList","handleDeleteMember","filteredUserIdList","handleUpdateChatMemberBannedRights","bannedRights","handleDeleteMessageList","isNaN","CheckboxGroup","nestedCheckbox","isPrivateChat","canPinForAll","PinMessageModal","pinMessage","shouldPinForAll","setShouldPinForAll","handlePinMessage","isUnpin","isOneSide","isSilent","UnpinAllMessagesModal","pinnedMessagesCount","onUnpin","shouldWarnAboutSvg","selectCanReportSelectedMessages","selectCanDownloadSelectedMessages","selectedMessageIds","selectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectCanForwardMessages","hasSvgs","selectHasSvg","isShareMessageModalOpen","isShareMessageModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","MessageSelectToolbar","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","setSharedSettingOption","handleCopy","useHotkeys","useCopySelectedMessages","isSvgDialogOpen","openSvgDialog","closeSvgDialog","shouldNotWarnAboutSvg","setShouldNotWarnAboutSvg","handleExitMessageSelectMode","handleDelete","onBackspace","onEsc","handleMessageDownload","handleSvgConfirm","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","seenByDates","closeSeenByModal","renderingSeenByDates","leftId","rightId","handleCloseSeenByModal","CLOSE_ANIMATION_DURATION","isReadDate","privacySettingsNoticeModal","PrivacySettingsNoticeModal","updateGlobalPrivacySettings","closePrivacySettingsNoticeModal","setPrivacyVisibility","loadUser","handleShowReadTime","shouldHideReadMarks","handleShowLastSeen","privacyKey","onSuccess","handleOpenPremium","ReadTime","LastSeen","reactorModal","reactors","ReactorListModal","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","allReactions","uniqueReactions","seenByUserIds","flatMap","peerReactions","reactor","seenByUser","addedDate","avatarSize","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","EmojiInteractionAnimation","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","endHeavyAnimation","effectHash","effectTgsUrl","startSize","isReversed","quality","chatLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","ChatLanguageModal","requestMessageTranslation","closeChatLanguageModal","setSettingOption","requestChatTranslation","handleSelect","langCode","toLanguageCode","translationLanguage","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","highlight","CollectibleInfoModal","closeCollectibleInfoModal","isUsername","handleOpenUrl","shouldSkipModal","formatUsername","collectible","copyTextToClipboard","formattedCollectible","purchaseDate","cryptoCurrency","cryptoAmount","Mention","Fragment","chip","createMapStateToProps","props","currentType","isVoice","byChatId","globalMessagesByChatId","messages","searchChatId","AudioResults","searchMessagesGlobal","openAudioPlayer","foundMessages","parseSearchResultKey","handleMessageFocus","handlePlayAudio","canRenderContents","NothingFound","shouldDrawDateDivider","toYearMonth","getMessageDownloadableMedia","formatMonthAndYear","Audio","AudioOrigin","Search","getSenderName","onDateClick","buttonRef","activeElement","selectIsChatPinned","getIsChatMuted","selectNotifyDefaults","selectNotifyException","canChangeFolder","chatFolders","LeftSearchResultChat","withUsername","withOpenAppButton","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","handleChatFolderChange","handleMute","useChatContextActions","handleOpenApp","useSelectWithEnter","storyViewerOrigin","hasMainMiniApp","MuteChatModal","ChatFolderModal","BotAppResults","recentSet","withoutRecent","handleChatClick","shouldReplaceHistory","renderSummary","isRoundVideo","renderMessageSummary","isSpoiler","getMessageIsSpoiler","getMessageVideo","privateChatUserId","privateChatUser","ChatMessage","mediaThumbnail","getMessageSticker","getMessageMediaThumbDataUri","mediaBlobUrl","getMessageMediaHash","getMessageRoundVideo","formatPastTimeShort","DateSuggest","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","selectTopic","LeftSearchResultTopic","foundTopicIds","ChatMessageResults","dateSearchQuery","onSearchDateSelect","openThread","handleTopicClick","nothingFound","LeftSearchResultSponsored","sponsoredPeer","viewSponsored","useOnIntersect","intersectionRatio","handleBadgeClick","handleBadgeMouseDown","BadgeButton","topUserIds","topPeers","recentlyFoundChatIds","RecentContacts","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","handleClearRecentlyFoundChats","isChannelList","globalResults","localResults","globalPeerIds","accountPeerIds","similarChannelIds","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","suggestedChannelIds","ChatResults","setGlobalSearchChatId","loadChannelRecommendations","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","searchContext","setSearchContext","context","handlePickerItemClick","getSearchContextCaption","handleClickContext","itemPlaceholderClass","startsWith","filteredChatIds","getOrderedIds","ALL_FOLDER_ID","localChatIds","contactIdsWithMe","localPeerIds","filteredIds","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","handleClickShowMoreLocal","handleClickShowMoreGlobal","actualFoundIds","isMessagesFetching","shouldRenderTopPeers","shouldRenderMessagesSection","noScrollRestoreOnTop","customIcon","shouldCleanup","CURRENT_TYPE","FileResults","observeIntersectionForMedia","getMessageDocument","Document","withDate","datetime","smaller","LinkResults","WebLink","onMessageClick","MediaResults","handleSelectMedia","isMediaGrid","isMessageList","Media","TABS","GlobalSearchContent","ChannelList","BotApps","Links","Files","Music","Voice","CHAT_TABS","currentContent","LeftSearch","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","handleSearchDateSelect","TabList","onSwitchTab","renderCount","INITIAL_STATE","email","twoFaReducer","payload","maxChats","selectCurrentLimit","SettingsFoldersChatFilters","mode","dispatch","onSaveFilter","openLimitReachedModal","chatFilter","selectedChatIds","selectedChatTypes","selectChatFilters","chatTypes","CUSTOM_PEER_INCLUDED_CHAT_TYPES","CUSTOM_PEER_EXCLUDED_CHAT_TYPES","isTouched","setIsTouched","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","shouldHideChatTypes","isChatList","chatIds","newFilter","includeFilters","includedChatIds","excludeFilters","excludedChatIds","handleSelectedChatTypesChange","newFilters","categories","selectedCategories","categoryPlaceholderKey","withPeerTypes","onSelectedCategoriesChange","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","chatListCount","el","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","maxChatLists","SettingsFoldersEdit","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","includedChatTypes","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","handleEditInviteClick","renderChats","visibleChatIds","leftChatsCount","clickHandler","chatType","typeKey","renderChatType","STICKER_SIZE_FOLDER_SETTINGS","FoldersNew","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","SettingsFoldersMain","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","sortChatFolders","setState","orderedFolderIds","dragOrderIds","draggedIndex","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","getFolderDescriptionText","handleCreateFolderFromRecommended","translation","handleDragEnd","canCreateNewFolder","FoldersAll","isBlocked","isDragged","draggedTop","Draggable","onDragEnd","knobStyle","allowSelection","shareFolderScreen","SettingsShareChatlist","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","pinnedChatIds","unlockedIds","partition","selectCanInviteToChat","isFirstRenderRef","prevUrl","handleClickDisabled","chatsCount","AnimatedIcon","FoldersShare","withShare","onRevoke","lockedUnselectedIds","SettingsFolders","currentScreen","shownScreen","openShareChatFolderModal","editChatFolder","openSettingsScreen","handleReset","SettingsScreens","FoldersCreateFolder","FoldersEditFolder","FoldersEditFolderFromChatList","FoldersEditFolderInvites","FoldersIncludedChats","FoldersExcludedChats","screen","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","FoldersIncludedChatsFromChatList","handleAddExcludedChats","FoldersExcludedChatsFromChatList","handleShareFolder","noRequestNextScreen","handleOpenInvite","Folders","SettingsPasswordForm","shouldDisablePasswordManager","expectedPassword","validationError","setValidationError","newPassword","SettingsPasscodeCongratulations","fullReset","STICKER_SIZE_PASSCODE","Congratulations","SettingsPasscodeEnabled","Lock","previewUrl","lockPreviewUrl","PasscodeChangePasscodeCurrent","PasscodeTurnOff","SettingsPasscodeStart","passcode","SettingsPasscode","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","handleStartWizard","PasscodeNewPasscode","handleNewPassword","PasscodeNewPasscodeConfirm","handleNewPasswordConfirm","PasscodeCongratulations","handleChangePasswordCurrent","currentPasscode","decryptSession","PasscodeChangePasscodeNew","handleChangePasswordNew","PasscodeChangePasscodeConfirm","handleTurnOff","Privacy","PasscodeDisabled","SettingsPasscodeForm","PasscodeEnabled","DEFAULT_POINTS","getProgress","points","pointIndex","findIndex","prevPoint","nextPoint","pointValue","PaidMessageSlider","readOnly","canChangeChargeForMessages","mainClassName","number","formatStarsAsText","step","starsUsdWithdrawRateX1000","starsUsdWithdrawRate","configStarsPaidMessageCommissionPermille","starsPaidMessageCommissionPermille","starsPaidMessageAmountMax","DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES","isGroupChat","chargeForMessages","handleChargeForMessagesChange","handleUnlockWithPremium","MINIMUM_CHARGE_FOR_MESSAGES","percent","formatPercent","premiumSection","handleOpenPremiumModal","nonContactPeersPaidStars","selectNonContactPeersPaidStars","noPaidReactionsForUsersCount","noPaidMessages","shouldNewNonContactPeersRequirePremium","selectNewNoncontactPeersRequirePremium","shouldChargeForMessages","DEFAULT_CHARGE_FOR_MESSAGES","canLimitNewMessagesWithoutPremium","canChargeForMessages","starsPaidMessagesAvailable","canChangeForContactsAndPremium","setChargeForMessages","hasShownNotification","setHasShownNotification","prevSelectedValue","chatInvite","PrivacyGroupChats","actionText","phoneCall","PrivacyPhoneCall","PrivacyLockedOption","hidden","isCanCheckedInDisabled","privacyValue","updateGlobalPrivacySettingsWithDebounced","privacyDescription","PaidMessagePrice","itemSubtitle","PrivacyNoPaidMessages","renderSectionNoPaidMessagesForUsers","PremiumStatusItem","getSessionIcon","session","platform","device","deviceModel","systemVersion","getLocation","region","activeSessions","byHash","SettingsActiveSession","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","headerButton","iconDevice","dateActive","box","appVersion","ip","note","actionHeader","actionName","SettingsActiveSessions","orderedHashes","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","activeWebSessions","SettingsActiveWebsite","terminateWebAuthorization","renderingBot","browser","SettingsActiveWebsites","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","clearHelp","StickerSetCard","handleCardClick","CHAT_HEIGHT_PX","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","byKey","customEmojiSetIds","canPlayAnimatedEmojis","SettingsCustomEmoji","shouldSuggestCustomEmoji","stickerSettingsRef","handleStickerSetClick","handleSuggestCustomEmojiChange","customEmojiSets","SettingsDataStorage","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderContentSizeSlider","renderValue","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","doNotTranslate","SettingsDoNotTranslate","language","displayedOptions","setDisplayedOptions","displayedOptionList","currentLanguageOption","otherOptionList","prevLanguage","ManageUsernames","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","username","prevUsernameList","orderedUsernames","dragOrderUsernames","handleCopyUsername","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","usernameData","LINK_PREFIX_REGEX","runDebouncedForCheckUsername","UsernameInput","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","MIN_UPDATE_USERNAME_LENGTH","MAX_USERNAME_LENGTH","USERNAME_REGEX","test","handleUsernameChange","newUsername","isUsernameValid","success","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","getChatAvatarHash","currentBio","bio","SettingsEditProfile","loadCurrentUser","updateProfile","firstEditableUsername","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","InProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","Complete","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","renderPurchaseLink","shouldForceHttpTransport","shouldAllowHttpTransport","shouldCollectDebugLogs","shouldDebugExportedSenders","SettingsExperimental","requestWave","snapButtonRef","isSnapButtonAnimating","setIsSnapButtonAnimating","isAutoUpdateEnabled","setIsAutoUpdateEnabled","electron","getIsAutoUpdateEnabled","handleDownloadLog","file","File","getDebugLogs","DEBUG_LOG_FILENAME","URL","createObjectURL","handleIsAutoUpdateEnabledChange","handleRequestWave","startX","startY","handleRequestConfetti","handleSnap","animateSnap","Experimental","IS_WAVE_TRANSFORM_SUPPORTED","IS_SNAP_EFFECT_SUPPORTED","IS_ELECTRON","shouldUseSystemTheme","messageSendKeyCombo","messageTextSize","timeFormat","SettingsGeneral","isMobileDevice","timeFormatOptions","appearanceThemeOptions","keyboardSendOptions","handleMessageTextSizeChange","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","isTrayIconEnabled","setIsTrayIconEnabled","getIsTrayIconEnabled","handleIsTrayIconEnabledChange","GeneralChatBackground","IS_WINDOWS","WallpaperTile","wallpaper","localMediaHash","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","loadedWallpapers","SettingsGeneralBackground","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","GeneralChatBackgroundColor","handleResetToDefault","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","SettingsHeader","editedFolderId","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","currentAmountRef","useMultiClick","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","EditProfile","General","QuickReaction","DataStorage","Language","DoNotTranslate","Stickers","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyForwarding","PrivacyVoiceMessages","PrivacyMessages","PrivacyLastSeenAllowedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyBioAllowedContacts","PrivacyGroupChatsAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioDeniedContacts","PrivacyGroupChatsDeniedContacts","PrivacyPhoneNumberAllowedContacts","PrivacyBirthdayAllowedContacts","PrivacyGiftsAllowedContacts","PrivacyForwardingAllowedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsDeniedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PDeniedContacts","Performance","ActiveSessions","ActiveWebsites","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaNewPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaChangePasswordHint","TwoFaNewPasswordEmail","TwoFaRecoveryEmail","TwoFaNewPasswordEmailCode","TwoFaRecoveryEmailCode","TwoFaCongratulations","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","canTranslate","canTranslateChats","languages","SettingsLanguage","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","canTranslateChatsEnabled","oldSetLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","handleShouldTranslateChange","handleShouldTranslateChatsChange","handleShouldTranslateChatsClick","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","sessionCount","SettingsMain","openSupportChat","openGiftRecipientPicker","openStarsBalanceModal","isSupportDialogOpen","openSupportDialog","closeSupportDialog","isPreload","handleOpenSupport","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","isInSettings","languageInfo","formatStarsAmount","FAQ_URL","PRIVACY_URL","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","SettingsNotifications","notifyDefaults","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","handleSettingsChange","peerType","setting","currentIsMuted","mutedUntil","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","groups","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MID","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","handleAnimationLevelChange","newLevel","performance","animationLevel","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","accountDaysTtl","hasPasscode","canDisplayChatInTitle","isCurrentUserFrozen","blockedCount","webAuthCount","canDisplayAutoarchiveSetting","canSetPasscode","selectCanSetPasscode","SettingsPrivacy","openDeleteAccountModal","loadPrivacySettings","loadBlockedUsers","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","loadWebAuthorizations","loadAccountDaysTtl","handleArchiveAndMuteChange","handleChatInTitleChange","handleUpdateContentSettings","handleOpenDeleteAccountModal","dayOption","getVisibilityValue","shouldAllowPremium","botsPrivacy","isVisibilityEverybody","shouldShowBotsString","blockCount","blockChatIds","allowCount","allowChatIds","total","exceptionString","conjunction","lastSeen","profilePhoto","birthday","forwards","allowDisabledClick","voiceMessages","blockedIds","localContactIds","userSearch","localUserIds","BlockUserModal","setUserSearchQuery","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","SettingsPrivacyBlockedUsers","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","userMainUsername","renderContact","getPrivacyKey","PrivacyPhoneP2P","PrivacyAddByPhone","disallowedGifts","SettingsAcceptedGift","handleOpenTelegramPremiumModal","handleLimitedEditionChange","shouldDisallowLimitedStarGifts","handleUnlimitedEditionChange","shouldDisallowUnlimitedStarGifts","handleUniqueChange","shouldDisallowUniqueStarGifts","handlePremiumSubscriptionChange","shouldDisallowPremiumGifts","selectShouldHideReadMarks","SettingsPrivacyLastSeen","canShowHideReadTime","handleChangeShouldHideReadMarks","SettingsPrivacyPublicProfilePhoto","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","PrivacySubsection","isPremiumRequired","visibilityOptions","hasNobody","primaryExceptionLists","shouldShowDenied","shouldShowAllowed","headerText","prepareSubtitle","userIdsCount","chatIdsCount","isAllowBots","userCountString","chatCountString","allowedString","blockString","allowedContactsScreen","deniedContactsScreen","primaryPrivacy","secondaryPrivacy","shouldDisplayGiftsButton","addByPhone","phoneP2P","SettingsPrivacyVisibility","handleShowGiftIconInChats","secondaryScreen","PREMIUM_CATEGORY","CUSTOM_PEER_PREMIUM","getCurrentPrivacySettings","SettingsPrivacyVisibilityExceptionList","isAllowList","withPremiumCategory","withMiniAppsCategory","usersOnly","setPrivacySettings","customPeerBots","isCustomPeer","avatarIcon","isAvatarSquare","peerColorId","miniAppsCategory","selectedContactIds","selectedCategoryTypes","newSelectedCategoryTypes","setNewSelectedCategoryTypes","SERVICE_NOTIFICATIONS_USER_ID","filteredChats","handleSelectedCategoriesChange","updatedIds","isPremiumAllowed","config","selectedReaction","defaultReaction","SettingsQuickReaction","setDefaultReaction","emoticon","addedSetIds","SettingsStickers","shouldSuggestStickers","shouldUpdateStickerSetOrder","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","SettingsTwoFaCongratulations","recoveryEmail","animatedEmoji","selectAnimatedEmoji","codeLength","waitingEmailCodeLength","SettingsTwoFaEmailCode","focusDelayTimeoutMs","setValue","handleInputChange","AnimatedIconFromSticker","SettingsTwoFaEnabled","SettingsTwoFaSkippableForm","shouldConfirm","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleSkip","handleSkipConfirm","SettingsTwoFaStart","SettingsTwoFa","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleNewPasswordHint","handleNewPasswordEmail","handleChangePasswordConfirm","handleChangePasswordHint","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaPassword","TRANSITION_RENDER_COUNT","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_BIO_SCREENS","PRIVACY_BIRTHDAY_SCREENS","PRIVACY_GIFTS_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","PRIVACY_MESSAGES_SCREENS","Settings","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","useMarkScrolled","forceReturnToChatList","isFromSettings","renderCurrentSectionContent","isScreenActive","activeScreen","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","Main","SettingsGeneralBackgroundColor","SettingsPerformance","LAYERS_ANIMATION_NAME","shouldWrap","withSwipeControl","_isFrom","_currentKey","userStatusesById","ContactList","openNewContactDialog","isSearching","NewChatStep1","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","foundContactIds","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","NewChatStep2","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","memberFirstNames","generatedChatName","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","NewChat","openLeftColumnContent","newChatMemberIds","setNewChatMemberIds","contentKey","NewChannelStep2","NewGroupStep2","changeSelectedMemberIdsHandler","isSelection","isStepActive","NewChannelStep1","NewGroupStep1","ArchivedChats","isForumPanelOpen","archiveSettings","isStoryRibbonShown","onTopicSearch","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","shouldRenderStoryRibbon","storyRibbonClassNames","isStoryRibbonClosing","StoryToggler","canShow","folderType","isMainList","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","idsToRemove","idsToAdd","MuteDuration","muteUntilOption","setMuteUntilOption","Forever","updateChatMutedState","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isMessageThread","isCommentsInfo","fromChannelId","canSendStickers","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","StickerSetModal","prevStickerSet","renderingStickerSet","isAdded","requestCalendar","calendar","useSchedule","isScheduleRequested","isPreloadedGlobally","scheduledAt","handleCopyLink","suffix","renderHeader","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","CustomEmojiSetsModal","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","sets","teactFastList","customEmojiSet","setCard","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","currentChatId","currentThreadId","canReportChat","canGift","selectCanGift","canCreateTopic","isUserRightBanned","canEditTopic","getCanManageTopic","canManage","selectCanManage","selectCanTranslateChat","isTranslationDisabled","savedDialog","getIsSavedDialog","isTopic","isForumAsMessages","canDeleteChat","getCanDeleteChat","botCommands","commands","botPrivacyPolicyUrl","privacyPolicyUrl","isChatInfoShown","isRightColumnShown","selectIsRightColumnShown","isBot","HeaderMenuContainer","withExtraActions","withForumActions","canStartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canViewMonetization","canViewBoosts","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","canShowBoostModal","channelMonoforumId","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","openFrozenAccountModal","requestMasterAndRequestCall","toggleStatistics","openMonetizationStatistics","openBoostStatistics","openGiftModal","openThreadWithInfo","openCreateTopicPanel","openEditTopicPanel","toggleManagement","togglePeerTranslations","setViewForumAsMessages","openBoostModal","setIsMenuOpen","shouldCloseFast","setShouldCloseFast","setIsDeleteModalOpen","setIsMuteModalOpen","isViewGroupInfoShown","areAllGiftsDisallowed","closeMenu","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftClick","forUserId","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleMonetizationClick","handleBoostClick","handleEnableTranslations","handleSelectMessages","handleOpenAsMessages","handleBlock","handleUnblock","handleSendChannelMessage","botButtons","commandButtons","cmd","hasPrivacyCommand","deleteTitle","MenuSeparator","DeleteChatModal","isSavedDialog","MiddleSearchResult","senderPeer","messageChat","shouldShowChat","hiddenForwardTitle","hiddenUserName","senderName","getMessageSenderName","topRow","LastMessageMeta","meta","MessageSummary","truncateLength","CHANNELS_PEER","titleKey","RESULT_ITEM_CLASS_NAME","runDebouncedForSearch","requestedQuery","savedTag","fetchingQuery","isHashtag","selectCurrentMiddleSearch","lastSearchQuery","savedTags","savedReactionTags","monoforumChat","isHistoryCalendarOpen","isHashtagQuery","searchType","MiddleSearch","updateMiddleSearch","resetMiddleSearch","performMiddleSearch","closeMiddleSearch","openHistoryCalendar","loadSavedReactionTags","shouldCancelSearchRef","focusedIndex","setFocusedIndex","canFocusNewer","canFocusOlder","isFullyHidden","setIsFullyHidden","hiddenTimerRef","maybeLongPressActiveRef","isFocused","markFocused","markBlurred","isViewAsList","setIsViewAsList","refs","handleClickOutside","useClickOutside","hasResultsContainer","isOnlyHash","areResultsEmpty","hasResultsDropdown","hasQueryData","hasNavigationButtons","focusInput","blurInput","blur","visualViewport","mainEl","pageTop","requestNextMutation","prevIsCalendarOpen","savedTagsArray","hasSavedTags","areSavedTagsDisabled","handleQueryChange","newQuery","removeListeners","fastRaf","viewportResults","searchResultKey","originalSender","ANONYMOUS_USER_ID","selectForwardedSender","handleMessageClick","getSearchResultKey","handleTriggerViewStyle","foundResult","updateSearchParams","activateSearchTag","tag","removeSearchSavedTag","handleDeleteTag","handleChangeSearchType","handleFocusOlder","newFocusIndex","handleFocusNewer","renderTypeTag","isForTag","selectedType","renderDropdown","dropdown","dropdownHidden","separator","wrap","isChosen","SavedTagButton","withCount","searchTypes","teactOrderKey","focused","mobile","withDropdown","adaptSearchBorders","canClose","resultsItemSelector","hasUpButton","hasDownButton","onStartBackspace","withBackIcon","onUpClick","onDownClick","searchTags","savedSearchTag","icons","getDayStartAt","counter","viewStyle","mobileNavigation","navigationButton","navigationDisabled","recent","favorite","effect","chatStickerSetId","effectStickers","effectEmojis","recentStickers","selectShouldLoopStickers","StickerPicker","isForEffects","loadRecentStickers","addRecentSticker","unfaveSticker","faveSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","effectSets","existingAddedSetIds","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleMouseMove","handleRemoveRecentSticker","CHAT_STICKER_SET_ID","maxUniqueReactions","enabledReactions","reactionsLimit","ReactionPickerLimited","isTouchScreen","currentReactions","shouldUseCurrentReactions","allAvailableReactions","reactionsToSort","sortReactions","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","pickerMaxHeight","REACTION_SELECTOR_WIDTH","availableEffectById","storyPeerId","sendAsMessage","areSomeReactionsAllowed","areAllReactionsAllowed","areCustomAllowed","shouldUseFullPicker","isForbidden","ReactionPicker","toggleReaction","closeReactionPicker","saveEffectInDraft","requestEffectInComposer","addLocalPaidReaction","openPaidReactionModal","renderedMessageId","renderedChatId","renderedStoryPeerId","renderedStoryId","storedPosition","renderingPosition","isDense","deltaX","FULL_PICKER_SHIFT_DELTA","handleToggleCustomReaction","shouldAddToRecent","handleToggleReaction","handleReactionContextMenu","handleStoryReactionSelect","customEmojiMessage","parseHtmlAsFormattedText","buildCustomEmojiHtml","isReaction","availableEffects","effectId","effectStickerId","chosenOrder","backdropExcludedSelector","div","BLUR_CANVAS_SIZE","AttachmentModalItem","attachment","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_PHOTO_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","extension","getFileExtension","previewData","shouldSkipGrouping","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","isFullyVisible","isHorizontal","viewportY1","viewportY2","y2","findInViewport","selectorOrElements","shouldContainBottom","allElements","visibleIndexes","isFound","setTooltipItemVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","handleArrowKey","handleItemSelect","altKey","metaKey","shiftKey","isSelectionOutOfRange","onUp","onDown","onTab","MentionTooltip","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","selectedMentionIndex","prevChatMembers","renderedChatMembers","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","keywords","customEmojiForEmoji","forEmoji","captionLimit","AttachmentModal","attachments","getHtml","editingMessage","canShowCustomSendMenu","isForMessage","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","forceDarkTheme","onAttachmentsUpdate","onCaptionUpdate","onSend","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","canSchedule","onSendWhenOnline","svgRef","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isEditing","groupedId","notEditingFile","getAttachmentMediaType","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","isInvertedMedia","shouldSendInHighQuality","setShouldSendInHighQuality","renderingShouldSendInHighQuality","setRenderingShouldSendInHighQuality","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","timerRef","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","setIsInvertedMedia","removeAllSelections","isCustomSendMenuOpen","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleToggleShouldCompress","handleToggleQuality","handleDisableSpoilers","handleToggleSpoiler","svg","baseVal","leftChars","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","hasAnyPhoto","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","canInvertMedia","attachmentsLength","isBottomDividerShown","buttonSendCaption","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","rx","uniqueId","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","customEmojiPrefix","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","onSendSchedule","PollModal","isQuiz","shouldBeAnonymous","maxOptionsCount","questionInputRef","optionsListRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","handleSolutionChange","addNewOption","newOptions","behavior","handleCreate","isNoCorrectOptionError","answers","correct","questionTrimmed","substring","optionsTrimmed","o","summary","multipleChoice","quiz","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","maxItemsCount","todoItemsMax","maxTitleLength","todoTitleLengthMax","maxItemLength","todoItemLengthMax","ToDoListModal","TODO_ITEMS_LIMIT","TODO_TITLE_LENGTH_LIMIT","TODO_ITEM_LENGTH_LIMIT","editTodo","closeTodoListModal","appendTodoList","titleInputRef","itemsListRef","setItems","generateUniqueNumberId","isOthersCanAppend","setIsOthersCanAppend","isOthersCanComplete","setIsOthersCanComplete","isAddTaskMode","forNewTask","isOutgoing","editingTodo","frozenTasks","othersCanAppend","othersCanComplete","editingItems","inputs","lastInput","addNewItem","newItems","todoItems","titleTrimmed","itemsTrimmed","updateItem","removeItem","handleIsOthersCanAppendChange","handleIsOthersCanCompleteChange","getTitleError","getItemsError","tasksToRender","stateIndex","renderItems","EmojiButton","native","IS_PACKAGED_ELECTRON","BASE_URL","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","EmojiCategory","category","allEmojis","emojisPerRow","displayedEmoji","ICONS_BY_CATEGORY","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","EmojiPicker","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","GifButton","gif","onUnsaveClick","hasVideoPreview","getVideoMediaHash","withThumb","videoHash","getVideoPreviewMediaHash","videoData","shouldRenderVideo","isVideoReady","handleUnsaveClick","handleContextDelete","preload","gifs","saved","GifPicker","canSendGifs","onGifSelect","loadSavedGifs","saveGif","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","GIFs","SYMBOL_MENU_TAB_ICONS","SymbolMenuFooter","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","SymbolMenu","isMessageComposer","menuPositionOptions","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","isFrom","mobileClassName","onMouseEnter","ChatCommand","withAvatar","freezeWhenClosed","ChatCommandTooltip","quickReplies","quickReplyMessages","self","sendQuickReply","handleSendCommand","handleSendQuickReply","quickReplyId","quickRepliesWithDescription","reply","topMessageId","shortcut","handleKeyboardSelect","selectedCommandIndex","isEmpty","BotCommandMenu","botCommand","StickerTooltip","prevStickers","displayedStickers","clearCustomEmojiForEmoji","ce","emojiButton","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onRemoveEffect","withEffects","hasCurrentEffect","effectReactions","onToggleReaction","isInSavedMessages","isInStoryViewer","openEffectPicker","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","areItemsHidden","hideItems","showItems","markIsReady","unmarkIsReady","handleOpenMessageEffectsPicker","ReactionSelector","onShowMore","TEXT_FORMAT_BY_TAG_NAME","B","STRONG","I","EM","U","DEL","CODE","SPAN","fragmentEl","TextFormatter","anchorPosition","selectedRange","setSelectedRange","linkUrlInputRef","isLinkControlOpen","openLinkControl","closeLinkControl","setLinkUrl","isEditingLink","setIsEditingLink","inputClassName","setInputClassName","selectedTextFormats","setSelectedTextFormats","useVirtualBackdrop","selectedFormats","parentElement","commonAncestorContainer","EDITABLE_INPUT_ID","textFormat","tagName","restoreSelection","selection","getSelection","removeAllRanges","addRange","updateSelectedRange","getRangeAt","getSelectedText","shouldDropCustomEmoji","replaceChildren","cloneContents","INPUT_CUSTOM_EMOJI_SELECTOR","getAttribute","getSelectedElement","updateInputStyles","scrollWidth","getFormatButtonClassName","fKey","monospace","strikethrough","handleSpoilerText","spoiler","entityType","ApiMessageEntityTypes","Spoiler","execCommand","handleBoldText","handleItalicText","italic","handleUnderlineText","underline","handleStrikethroughText","handleMonospaceText","handleLinkUrlConfirm","formattedLinkUrl","encodeURI","u","m","p","getKeyFromEvent","linkUrlConfirmClassName","autoComplete","CustomEmojiButton","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","BaseResult","thumbnailDataUrl","getWebDocumentHash","decoding","ArticleResult","inlineResult","webThumbnail","GifResult","_gif","MediaResult","isForGallery","thumbnailBlobUrl","getPhotoMediaHash","StickerResult","STICKER_SIZE_INLINE_BOT_RESULT","InlineBotTooltip","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","isFromSwitchWebView","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","SendAsMenu","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","membersCount","StickerSetResult","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","StickerSearch","loadFeaturedStickers","selectCurrentGifSearch","canPostInChat","GifSearch","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","postStatistic","StatisticsRecentMessage","toggleMessageStatistics","StatisticsRecentPostMeta","withStorySolid","forceUnreadStorySolid","toggleStoryStatistics","imgBlobUrl","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","reactionsByEmotionGraph","storyInteractionsGraph","storyReactionsByEmotionGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","statistics","selectStatistics","dcId","statisticsDcId","messagesById","storiesById","selectPeerStories","Statistics","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","isPercentage","ensureLovelyChart","zoomToken","create","zoomOutLabel","StatisticsOverview","recentPosts","StatisticsRecentStory","StatisticsMessagePublicForward","openChatByUsername","GRAPH_TITLES","viewsGraph","reactionsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","loadMessagePublicForwards","publicForwards","publicForwardsData","STATISTICS_PUBLIC_FORWARDS_LIMIT","currentStory","loadStoryStatistics","loadStoryPublicForwards","StatisticsStoryPublicForward","answer","voters","offsets","pollResults","PollAnswerResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","ShowMoreButton","renderViewMoreButton","poll","selectPollFromMessage","PollResults","resultsByOption","buildCollectionByKey","ICON_SIZE","createTopicPanel","CreateTopic","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","noLoopLimit","editTopicPanel","EditTopic","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","ERROR_NAME_MISSING","management","ManageBot","setBotInfo","uploadContactProfilePhoto","startBotFatherConversation","isFieldTouched","markFieldTouched","unmarkProfileTouched","isAvatarTouched","markAvatarTouched","unmarkAvatarTouched","currentName","setName","ManagementProgress","handleNameChange","trimmedName","handleChangeEditIntro","handleChangeEditCommands","handleChangeSettings","isSuggestRef","handleSelectAvatar","isSuggest","CHANNEL_TITLE_EMPTY","minLevelToToggleAutoTranslation","channelAutoTranslationLevelMin","hasAutoTranslation","chatBoostLevel","level","canToggleAutoTranslation","canChangeInfo","canInvite","exportedInvites","ManageChannel","onScreenSelect","updateChat","closeManagement","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleAutoTranslation","currentTitle","currentAbout","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","hasAutoTranslationAvailable","handleAutoTranslationChange","isRevoked","adminsCount","removedUsersCount","kickedMembers","handleClickEditType","ManagementScreens","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickReactions","Reactions","handleClickAdministrators","ChatAdministrators","handleClickInvites","Invites","handleClickRequests","JoinRequests","handleSetPhoto","handleAboutChange","handleUpdateChannel","trimmedTitle","trimmedAbout","handleClickSubscribers","ChannelSubscribers","handleRemovedUsersClick","ChannelRemovedUsers","handleDeleteChannel","chatReactionsDescription","enabledLength","totalLength","isChannelPublic","joinRequests","ManageChatAdministrators","onChatMemberSelect","toggleSignatures","areSignaturesEnabled","areSignaturesShown","areProfilesEnabled","areProfilesShown","canAddNewAdmins","canToggleSignatures","adminMembers","admins","isOwner","handleAdminMemberClick","promotedByUserId","ChatAdminRights","handleToggleSignatures","handleToggleProfiles","handleAddAdminClick","GroupAddAdmins","getMemberStatus","promotedByUser","selectManagement","maxPublicLinks","privateInviteLink","inviteLink","ManageChatPrivacyType","updatePublicLink","updatePrivateLink","toggleIsProtected","resetManagementError","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","shouldDisableUsernames","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","chatMembers","RemoveGroupUserModal","loadMoreMembers","usersId","availableMemberIds","canDeleteMembers","removedMembers","ManageChatRemovedUsers","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","forDiscussionIds","linkedChat","ManageDiscussion","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","Initial","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","handleNewGroupClick","NewDiscussionGroup","DiscussionGroups","STICKER_SIZE_DISCUSSION_GROUPS","withPrimaryColor","linkedGroup","renderLinkGroupHeader","renderLinkGroupConfirmText","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","isChannelsPremiumLimitReached","ManageGroup","togglePreHistoryHidden","deleteChat","toggleForum","isForumEnabled","setIsForumEnabled","isPublicGroup","isPreHistoryHiddenCheckboxRef","handleClickPermissions","GroupPermissions","handleUpdateGroup","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","enabledPermissionsCount","handleDeleteGroup","isForForum","isPromotedByCurrentUser","isFormFullyDisabled","defaultRights","adminRights","hasFullInfo","ManageGroupAdminRights","isNewAdmin","selectedUserId","updateChatAdmin","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedChatMember","selectedAdminMember","handleSavePermissions","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","postStories","editStories","deleteStories","banUsers","addAdmins","manageCall","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","canAddMembers","globalUserIds","ManageGroupMembers","noAdmins","toggleParticipantsHidden","setNewChatMembersDialogState","deletingUserId","setDeletingUserId","adminIds","usePeerStoriesPolling","shouldUseSearchResults","listedIds","ChatNewAdminRights","handleDeleteMembersModalClose","handleToggleParticipantsHidden","handleNewMemberDialogOpen","newChatMembersProgress","NewChatMembersProgress","memberId","DeleteMemberModal","arePaidMessagesAvailable","groupPeersPaidStars","ManageGroupPermissions","updateChatDefaultBannedRights","updatePaidMessagesPrice","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","handleExceptionMemberClick","GroupUserPermissions","isPriceForMessagesChanged","markPriceForMessagesChanged","unmarkPriceForMessagesChanged","isPriceForMessagesOpen","setIsPriceForMessagesOpen","handleUpdatePaidMessagesPrice","handleUpdatePermissions","exceptionMembers","getMemberExceptions","getLangKeyForBannedRightKey","translatedString","handleChargeStarsForMessages","arePermissionsChanged","arePermissionsLoading","ManageGroupUserPermissions","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","ManageGroupUserPermissionsCreate","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","ManageInvite","editExportedChatInvite","exportChatInvite","setIsRequestNeeded","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","usageLimit","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleSaveClick","formatFullDate","n","importers","requesters","ManageInviteInfo","loadChatInviteImporters","loadChatInviteRequesters","usage","adminId","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","BULLET","inviteComparator","i1","i2","isPermanent","i1IsPermanent","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","ManageInvites","setEditingExportedInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","askToRevoke","handleCreateNewClick","EditInvite","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","InviteInfo","deleteInvite","askToDelete","copyLink","prepareUsageText","requested","formatCountdown","getInviteIconClass","prepareContextActions","editInvite","Invite","STICKER_SIZE_INVITES","JoinRequest","hideChatJoinRequest","createClassNameBuilder","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","ManageJoinRequests","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","MAX_UNIQUE_REACTIONS","ManageReactions","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","localReactionsLimit","setLocalReactionsLimit","reactionsOptions","handleSaveReactions","availableActiveReactions","localAllowedReactions","enabledAllowedReactions","localReaction","enabledReaction","handleReactionsOptionChange","handleReactionChange","local","handleReactionsLimitChange","renderReactionsMaxCountValue","shouldShowReactionsLimit","isCenteredLayout","notPersonalPhoto","ManageUser","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","handleNotificationChange","handleDeleteContact","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","canSetPersonalPhoto","noEmojiStatus","withFullInfo","noPersonalPhoto","trimStart","discussionChannelId","managementType","selectCurrentManagementType","Management","GroupRecentActions","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","Checkout","invoice","shippingPrices","checkoutInfo","totalPrice","onAcceptTos","needAddress","hasShippingOptions","savedCredentials","isPaymentFormUrl","setPaymentStep","isInteractive","termsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","useMediaTransition","handleTipsClick","tips","handlePaymentMethodClick","PaymentStep","SavedPayments","PaymentInfo","handleShippingAddressClick","ShippingInfo","handleShippingMethodClick","Shipping","checkoutPicture","forceAspectRatio","checkoutTitle","checkoutDescription","priceInfo","prices","renderPaymentItem","priceInfoItem","priceInfoItemTitle","tipsList","tip","tipsItem","tipsItem_active","shouldOmitFractions","invoiceInfo","renderCheckoutItem","provider","langStringSplit","renderTosLink","tosCheckbox","priceInfoItemMain","checkoutInfoItemInfoTitle","checkoutInfoItemInfoData","ConfirmPayment","noRedirect","onPaymentFormSubmit","messageKey","form","PasswordConfirm","onPasswordChange","clearPaymentError","cardName","onInputChange","useFocusAfterAnimation","animationDuration","CardInput","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","ExpiryInput","endsWith","formatCardExpiry","canSaveCredentials","needCardholderName","needCountry","needZip","selectCountryRef","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleCountryChange","handleBillingPostCodeChange","handleChangeSaveCredentials","Select","hasArrow","SavedPaymentCredentials","onNewCardClick","shippingOptions","handleShippingSelect","needEmail","needPhone","needName","phoneRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","confirmPaymentUrl","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","nativeParams","nativeProvider","providerName","isProviderError","smartGlocalToken","stripeId","passwordValidUntil","validUntil","PaymentModal","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","setSmartGlocalCardInfo","paymentState","paymentDispatch","twoFaPassword","setTwoFaPassword","prevStep","prevRequestId","canRenderFooter","setStep","nextStep","field","savedInfo","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","sendForm","shippingOptionId","handlePaymentFormSubmit","credentials","validateRequest","requestInfo","getRequestInfo","sendCredentials","expiryMonth","expiryYear","zip","getCredentials","ConfirmPassword","shouldFillRequestedData","isEmailRequested","isPhoneRequested","isNameRequested","isShippingAddressRequested","modalHeader","isSubmitDisabled","getIsSubmitDisabled","isRecurring","cleanupOnlyKey","currentStep","isPasswordMissing","isEmailSentToProvider","isPhoneSentToProvider","renderModalContent","descriptionKey","renderError","optionId","receipt","ReceiptModal","prevReceipt","renderingReceipt","fullAddress","credentialsTitle","totalAmount","InviteViaLinkModal","sendInviteMessages","closeInviteViaLinkModal","missingUsers","setSelectedMemberIds","unselectableIds","selectableIds","requirePremiumIds","regularIds","isRequiringPremiumToMessage","invitableWithPremiumIds","isRequiringPremiumToInvite","isEveryPremiumBlocksPm","topListPeers","handleSendInviteLink","canSendInviteLink","inviteSectionText","premiumSectionText","hasPremiumSection","hasSelectableSection","lockedUnselectedSubtitle","OneTimeMediaModal","closeOneTimeMediaModal","handlePlayVoice","isOwn","isOwnMessage","closeBtnTitle","voice","OneTimeModal","RoundVideo","onStop","renderMedia","WebAppsCloseConfirmationModal","closeWebAppsCloseConfirmationModal","shouldSkipInFuture","setShouldSkipInFuture","shouldSkipConfirmation","handleSelectWithEnter","freezeUntilDate","freezeAppealUrl","botFreezeAppeal","botFreezeAppealId","botFreezeAppealUsername","FrozenAccountModal","closeFrozenAccountModal","handleAppeal","BannedDuck","botLink","headerAvatarPeer","withBalanceBar","avatarPeer","avatarWebPhoto","clickable","webPhoto","badge"],"sourceRoot":""}