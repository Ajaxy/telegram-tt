{"version":3,"file":"2859.d75af0584071617e942c.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type {\n  ApiChat, ApiChatFolder, ApiChatlistExportedInvite,\n  ApiChatMember, ApiError, ApiMissingInvitedUser, ApiUser,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType,\n  ChatListType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport {\n  ChatCreationProgress,\n  ManagementProgress,\n  NewChatMembersProgress,\n  SettingsScreens,\n  type ThreadId,\n} from '../../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  CHAT_LIST_LOAD_SLICE,\n  DEBUG,\n  GLOBAL_STATE_CACHE_ARCHIVED_CHAT_LIST_LIMIT,\n  GLOBAL_SUGGESTED_CHANNELS_ID,\n  RE_TG_LINK,\n  SAVED_FOLDER_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatShareText, parseChooseParameter, processDeepLink } from '../../../util/deeplink';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { buildCollectionByKey, omit, pick } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/messageKey';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n  toChannelId,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMembers,\n  addChats,\n  addMessages,\n  addSimilarChannels,\n  addUsers,\n  addUserStatuses,\n  deleteChatMessages,\n  deleteTopic,\n  leaveChat,\n  removeChatFromChatLists,\n  replaceChatFullInfo,\n  replaceChatListIds,\n  replaceChats,\n  replaceThreadParam,\n  replaceUsers,\n  replaceUserStatuses,\n  toggleSimilarChannels,\n  updateChat,\n  updateChatFullInfo,\n  updateChatLastMessageId,\n  updateChatListIds,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateChatsLastMessageId,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updateMissingInvitedUsers,\n  updatePeerFullInfo,\n  updateThread,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n} from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatLastMessageId,\n  selectChatListType,\n  selectChatMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectIsChatWithSelf,\n  selectLastServiceNotification,\n  selectSimilarChannelIds,\n  selectStickerSet,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectUser,\n  selectUserByPhoneNumber,\n  selectVisibleUsers,\n} from '../../selectors';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\nconst CHATLIST_LIMIT_ERROR_LIST = new Set([\n  'FILTERS_TOO_MUCH',\n  'CHATLISTS_TOO_MUCH',\n  'INVITES_TOO_MUCH',\n]);\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\nfunction abortChatRequests(chatId: string, threadId?: ThreadId) {\n  callApi('abortChatRequests', { chatId, threadId });\n}\n\nfunction abortChatRequestsForCurrentChat<T extends GlobalState>(\n  global: T, newChatId?: string, newThreadId?: ThreadId,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const currentChatId = currentMessageList?.chatId;\n  const currentThreadId = currentMessageList?.threadId;\n\n  if (currentChatId && (currentChatId !== newChatId || currentThreadId !== newThreadId)) {\n    const [isChatOpened, isThreadOpened] = Object.values(global.byTabId)\n      .reduce(([accHasChatOpened, accHasThreadOpened], { id: otherTabId }) => {\n        if (otherTabId === tabId || (accHasChatOpened && accHasThreadOpened)) {\n          return [accHasChatOpened, accHasThreadOpened];\n        }\n\n        const otherMessageList = selectCurrentMessageList(global, otherTabId);\n        const isSameChat = otherMessageList?.chatId === currentChatId;\n        const isSameThread = isSameChat && otherMessageList?.threadId === currentThreadId;\n\n        return [accHasChatOpened || isSameChat, accHasThreadOpened || isSameThread];\n      }, [currentChatId === newChatId, false]);\n\n    const shouldAbortChatRequests = !isChatOpened || !isThreadOpened;\n\n    if (shouldAbortChatRequests) {\n      abortChatRequests(currentChatId, isChatOpened ? currentThreadId : undefined);\n    }\n  }\n}\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, type, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  actions.processOpenChatOrThread({\n    chatId: id,\n    type,\n    threadId: MAIN_THREAD_ID,\n    noForumTopicPanel,\n    shouldReplaceHistory,\n    shouldReplaceLast,\n    tabId,\n  });\n\n  abortChatRequestsForCurrentChat(global, id, MAIN_THREAD_ID, tabId);\n\n  if (!id || id === TMP_CHAT_ID) {\n    return;\n  }\n\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  const isChatOnlySummary = !selectChatLastMessageId(global, id);\n\n  if (!chat) {\n    if (selectIsChatWithSelf(global, id)) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatOnlySummary && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openSavedDialog', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId(), ...otherParams } = payload;\n\n  actions.openThread({\n    chatId: global.currentUserId!,\n    threadId: chatId,\n    tabId,\n    ...otherParams,\n  });\n});\n\naddActionHandler('openThread', async (global, actions, payload): Promise<void> => {\n  const {\n    type, isComments, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    focusMessageId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { chatId } = payload;\n  let threadId: ThreadId | undefined;\n  let loadingChatId: string;\n  let loadingThreadId: ThreadId;\n\n  if (!isComments) {\n    loadingChatId = payload.chatId;\n    threadId = payload.threadId;\n    loadingThreadId = threadId;\n\n    const originalChat = selectChat(global, loadingChatId);\n    if (threadId === MAIN_THREAD_ID) {\n      actions.openChat({\n        id: chatId,\n        type,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    } else if (originalChat?.isForum || (chatId && getIsSavedDialog(chatId, threadId, global.currentUserId))) {\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    }\n  } else {\n    const { originChannelId, originMessageId } = payload;\n\n    loadingChatId = originChannelId;\n    loadingThreadId = originMessageId;\n  }\n\n  const chat = selectChat(global, loadingChatId);\n  const threadInfo = selectThreadInfo(global, loadingChatId, loadingThreadId);\n  const thread = selectThread(global, loadingChatId, loadingThreadId);\n  if (!chat) return;\n\n  abortChatRequestsForCurrentChat(global, loadingChatId, loadingThreadId, tabId);\n\n  if (chatId\n    && threadInfo?.threadId\n    && (isComments || (thread?.listedIds?.length && thread.listedIds.includes(Number(threadInfo.threadId))))) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadInfo.threadId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n      tabId,\n    });\n    return;\n  }\n\n  let { loadingThread } = selectTabState(global, tabId);\n  if (loadingThread) {\n    abortChatRequests(loadingThread.loadingChatId, loadingThread.loadingMessageId);\n  }\n\n  global = updateTabState(global, {\n    loadingThread: {\n      loadingChatId,\n      loadingMessageId: Number(loadingThreadId),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const openPreviousChat = () => {\n    // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n    const currentGlobal = getGlobal();\n    if (isComments\n      || selectCurrentMessageList(currentGlobal, tabId)?.chatId !== loadingChatId\n      || selectCurrentMessageList(currentGlobal, tabId)?.threadId !== loadingThreadId) {\n      return;\n    }\n    actions.openPreviousChat({ tabId });\n  };\n\n  if (!isComments) {\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadId!,\n      tabId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n    });\n  }\n\n  const result = await callApi('fetchDiscussionMessage', {\n    chat: selectChat(global, loadingChatId)!,\n    messageId: Number(loadingThreadId),\n  });\n\n  global = getGlobal();\n  loadingThread = selectTabState(global, tabId).loadingThread;\n  if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n    openPreviousChat();\n    return;\n  }\n\n  if (!result) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n\n    actions.showNotification({\n      message: langProvider.oldTranslate(isComments ? 'ChannelPostDeleted' : 'lng_message_not_found'),\n      tabId,\n    });\n\n    openPreviousChat();\n    return;\n  }\n\n  threadId ??= result.threadId;\n  chatId ??= result.chatId;\n\n  if (!chatId) {\n    openPreviousChat();\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  if (isComments) {\n    global = updateThreadInfo(global, loadingChatId, loadingThreadId, {\n      threadId,\n    });\n\n    global = updateThreadInfo(global, chatId, threadId, {\n      isCommentsInfo: false,\n      threadId,\n      chatId,\n      fromChannelId: loadingChatId,\n      fromMessageId: loadingThreadId,\n      ...(threadInfo\n        && pick(threadInfo, ['messagesCount', 'lastMessageId', 'lastReadInboxMessageId', 'recentReplierIds'])),\n    });\n  }\n  global = updateThread(global, chatId, threadId, {\n    firstMessageId: result.firstMessageId,\n  });\n  setGlobal(global);\n\n  if (focusMessageId) {\n    actions.focusMessage({\n      chatId,\n      threadId: threadId!,\n      messageId: focusMessageId,\n      tabId,\n    });\n  }\n\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    onError: () => {\n      global = getGlobal();\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.showNotification({\n        message: langProvider.oldTranslate('Group.ErrorAccessDenied'),\n        tabId,\n      });\n    },\n    onLoaded: () => {\n      global = getGlobal();\n      loadingThread = selectTabState(global, tabId).loadingThread;\n      if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n        return;\n      }\n\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId: threadId!,\n        tabId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n      });\n    },\n  });\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const listType = payload.listType;\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return selectChatLastMessage(global, chat.id, listType === 'saved' ? 'saved' : 'all')?.date || chat.creationDate;\n  };\n\n  while (shouldReplace || !global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n\n    await loadChats(\n      listType,\n      oldestChat?.id,\n      oldestChat ? getOrderDate(oldestChat) : undefined,\n      shouldReplace,\n      true,\n    );\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, force, tabId = getCurrentTabId(), withPhotos,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const loadChat = async () => {\n    await loadFullChat(global, actions, chat, tabId);\n    if (withPhotos) {\n      actions.loadProfilePhotos({ profileId: chatId });\n    }\n  };\n\n  if (force) {\n    void loadChat();\n  } else {\n    runDebouncedForLoadFullChat(loadChat);\n  }\n});\n\naddActionHandler('loadTopChats', (): ActionReturnType => {\n  runThrottledForLoadTopChats(() => {\n    loadChats('active');\n    loadChats('archived');\n  });\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('requestSavedDialogUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat,\n    isSavedDialog: true,\n    limit: 1,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addMessages(global, result.messages);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  if (result.messages.length) {\n    global = updateChatLastMessageId(global, chatId, result.messages[0].id, 'saved');\n    global = updateChatListIds(global, 'saved', [chatId]);\n\n    setGlobal(global);\n  } else {\n    global = removeChatFromChatLists(global, chatId, 'saved');\n\n    setGlobal(global);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      const currentMessageList = selectCurrentMessageList(global, tabId);\n      if (!currentMessageList) return;\n      const { chatId: tabChatId, threadId } = currentMessageList;\n\n      if (selectIsChatWithSelf(global, tabChatId) && threadId === chatId) {\n        actions.openChat({ id: undefined, tabId });\n      }\n    });\n  }\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted, muteUntil });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted, muteUntil,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n  let missingInvitedUsers: ApiMissingInvitedUser[] | undefined;\n  try {\n    const result = await callApi('createChannel', { title, about, users });\n    createdChannel = result?.channel;\n    missingInvitedUsers = result?.missingUsers;\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (missingInvitedUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, channelId, missingInvitedUsers, tabId);\n    setGlobal(global);\n  }\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    await callApi('leaveChannel', { channelId, accessHash });\n    global = getGlobal();\n    const chatMessages = selectChatMessages(global, chatId);\n    const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n    global = deleteChatMessages(global, chatId, localMessageIds);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const { chat: createdChat, missingUsers } = await callApi('createGroupChat', {\n      title,\n      users,\n    }) ?? {};\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (missingUsers) {\n      global = getGlobal();\n      global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n      setGlobal(global);\n    }\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (err) {\n    if ((err as ApiError).message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('toggleSavedDialogPinned', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'savedDialogsPinned');\n\n  const isPinned = selectIsChatPinned(global, id, SAVED_FOLDER_ID);\n\n  const ids = global.chats.orderedPinnedIds.saved;\n  if ((ids?.length || 0) >= limit && !isPinned) {\n    actions.openLimitReachedModal({\n      limit: 'savedDialogsPinned',\n      tabId,\n    });\n    return;\n  }\n  void callApi('toggleSavedDialogPinned', { chat, shouldBePinned: !isPinned });\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  const newId = maxId + 1;\n  const folderUpdate = {\n    id: newId,\n    ...newFolder,\n  };\n  await callApi('editChatFolder', {\n    id: newId,\n    folderUpdate,\n  });\n\n  // Update called from the above `callApi` is throttled, but we need to apply changes immediately\n  actions.apiUpdate({\n    '@type': 'updateChatFolder',\n    id: newId,\n    folder: folderUpdate,\n  });\n\n  actions.requestNextSettingsScreen({\n    foldersAction: {\n      type: 'setFolderId',\n      payload: maxId + 1,\n    },\n    tabId,\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, text, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  } else {\n    actions.openChat({ id: chat.id, tabId });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload): ActionReturnType => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    checkChatlistInvite,\n    openChatByUsername: openChatByUsernameAction,\n    openStoryViewerByUsername,\n    processBoostParameters,\n    checkGiftCode,\n  } = actions;\n\n  if (isDeepLink(url)) {\n    const isProcessed = processDeepLink(url);\n    if (isProcessed || url.match(RE_TG_LINK)) {\n      return;\n    }\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n\n  const adaptedPathname = uri.pathname.replace(/^\\/?s\\//, '');\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${adaptedPathname}` : adaptedPathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const hasStartAttach = params.hasOwnProperty('startattach');\n  const hasStartApp = params.hasOwnProperty('startapp');\n  const choose = parseChooseParameter(params.choose);\n  const storyId = part2 === 's' && (Number(part3) || undefined);\n  const hasBoost = params.hasOwnProperty('boost');\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach: params.startattach,\n      attach: params.attach,\n      text: params.text,\n      tabId,\n    });\n    return;\n  }\n\n  if (storyId) {\n    openStoryViewerByUsername({\n      username: part1,\n      storyId,\n      tabId,\n    });\n\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n    return;\n  }\n\n  if (part1 === 'addlist') {\n    const slug = part2;\n    checkChatlistInvite({ slug, tabId });\n    return;\n  }\n\n  if (part1 === 'giftcode') {\n    const slug = part2;\n    checkGiftCode({ slug, tabId });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'boost') {\n    const username = part2;\n    const id = params.c;\n\n    const isPrivate = !username && Boolean(id);\n\n    processBoostParameters({\n      usernameOrId: username || id,\n      isPrivate,\n      tabId,\n    });\n  } else if (hasBoost) {\n    const isPrivate = part1 === 'c' && Boolean(chatOrChannelPostId);\n    processBoostParameters({\n      usernameOrId: chatOrChannelPostId || part1,\n      isPrivate,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    focusMessage({\n      chatId: toChannelId(chatOrChannelPostId),\n      messageId,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      type: 'slug',\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      type: 'slug',\n      slug: part2,\n      tabId,\n    });\n  } else if ((hasStartAttach && choose) || (!part2 && hasStartApp)) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      startParam: params.startattach || params.startapp,\n      tabId,\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach: params.startattach,\n      attach: params.attach,\n      startApp: params.startapp,\n      originalParts: [part1, part2, part3],\n      tabId,\n    });\n  }\n});\n\naddActionHandler('processBoostParameters', async (global, actions, payload): Promise<void> => {\n  const { usernameOrId, isPrivate, tabId = getCurrentTabId() } = payload;\n\n  let chat: ApiChat | undefined;\n\n  if (isPrivate) {\n    const chatId = toChannelId(usernameOrId);\n    chat = selectChat(global, chatId);\n    if (!chat) {\n      actions.showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n  } else {\n    chat = await fetchChatByUsername(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: 'User does not exist', tabId });\n      return;\n    }\n  }\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    actions.openChat({ id: chat.id, tabId });\n    return;\n  }\n\n  actions.openBoostModal({\n    chatId: chat.id,\n    tabId,\n  });\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId, originalParts, startApp, text,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  const webAppName = originalParts?.[1];\n  const isWebApp = webAppName && !Number(webAppName) && !originalParts?.[2];\n\n  if (!commentId) {\n    if (startAttach === undefined && messageId && !startParam\n      && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    if (!isWebApp) {\n      await openChatByUsername(\n        global, actions, {\n          username,\n          threadId,\n          channelPostId: messageId,\n          startParam,\n          startAttach,\n          attach,\n          text,\n        }, tabId,\n      );\n      return;\n    }\n  }\n\n  const usernameChat = selectChatByUsername(global, username);\n  if (commentId && messageId && usernameChat) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: usernameChat.id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    return;\n  }\n\n  if (!isWebApp) actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  if (isWebApp && chatByUsername) {\n    const theme = extractCurrentThemeParams();\n\n    actions.requestAppWebView({\n      appName: webAppName,\n      botId: chatByUsername.id,\n      tabId,\n      startApp,\n      theme,\n    });\n    return;\n  }\n\n  if (!messageId) return;\n\n  actions.openThread({\n    isComments: true,\n    originChannelId: chatByUsername.id,\n    originMessageId: messageId,\n    tabId,\n    focusMessageId: commentId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: isEnabled });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const updatedFullInfo = selectChatFullInfo(global, chat.id);\n  if (!updatedFullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = updatedFullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChatFullInfo(global, chat.id, {\n    ...(members && isBanned && {\n      members: members.filter((m) => m.userId !== userId),\n    }),\n    ...(members && !isBanned && {\n      members: members.map((m) => (\n        m.userId === userId\n          ? { ...m, bannedRights }\n          : m\n      )),\n    }),\n    ...(isUnblocked && kickedMembers && {\n      kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n    }),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  if (newAdminMembersById) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { adminMembersById: newAdminMembersById });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    fullInfo?.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (photo) {\n    actions.loadFullChat({ chatId, tabId, withPhotos: true });\n  }\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  global = updateChat(global, chatId, { avatarHash: undefined });\n  global = updateChatFullInfo(global, chatId, { profilePhoto: undefined });\n  setGlobal(global);\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId, tabId, withPhotos: true });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    global = updateChat(global, chatId, { avatarHash: undefined });\n    global = updateChatFullInfo(global, chatId, { profilePhoto: undefined });\n    setGlobal(global);\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n\n  const { photos = [] } = chat;\n\n  const newPhotos = photos.filter((p) => photosToDelete.some((toDelete) => toDelete.id !== p.id));\n  global = getGlobal();\n  global = updateChat(global, chatId, { photos: newPhotos });\n\n  setGlobal(global);\n\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId, tabId, withPhotos: true });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let fullInfo = selectChatFullInfo(global, chat.id);\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: false });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, tabId = getCurrentTabId() } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const fullInfo = selectChatFullInfo(global, channelId);\n  let chat: ApiChat | undefined;\n  if (fullInfo?.linkedChatId) {\n    chat = selectChat(global, fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat, tabId);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = selectChatFullInfo(global, chat.id)?.members?.length;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = memberIds.map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  const missingUsers = await callApi('addChatMembers', chat, users);\n  if (missingUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n    setGlobal(global);\n  }\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, enabledReactions, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('fetchChat', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    return;\n  }\n\n  if (selectIsChatWithSelf(global, chatId)) {\n    void callApi('fetchChat', { type: 'self' });\n  } else {\n    const user = selectUser(global, chatId);\n    if (user) {\n      void callApi('fetchChat', { type: 'user', user });\n    }\n  }\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  actions.toggleStoryRibbon({ isShown: false, tabId });\n  actions.toggleStoryRibbon({ isShown: false, isArchived: true, tabId });\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  const isForChat = Boolean(filter);\n\n  if (!isForChat) {\n    actions.callAttachBot({\n      isFromSideMenu: true,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message.startsWith('A wait of')) {\n      actions.showNotification({ message: langProvider.oldTranslate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (result) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, { isForum: isEnabled });\n    setGlobal(global);\n\n    if (!isEnabled) {\n      actions.closeForumPanel({ tabId });\n    } else {\n      actions.openForumPanel({ chatId: chat.id, tabId });\n    }\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = selectChatFullInfo(global, chat.id)?.areParticipantsHidden;\n  global = updateChatFullInfo(global, chatId, { areParticipantsHidden: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { areParticipantsHidden: prevIsEnabled });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openThread({\n      chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('deleteTopic', { chat, topicId });\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\naddActionHandler('checkChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatlistInvite', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_group_invite_bad_link'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateTabState(global, {\n    chatlistModal: {\n      invite: result.invite,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('joinChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { invite, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const peers = peerIds.map((peerId) => selectChat(global, peerId)).filter(Boolean);\n  const notJoinedCount = peers.filter((peer) => peer.isNotJoined).length;\n\n  const folder = 'folderId' in invite ? selectChatFolder(global, invite.folderId) : undefined;\n  const folderTitle = 'title' in invite ? invite.title : folder?.title;\n\n  try {\n    const result = await callApi('joinChatlistInvite', { slug: invite.slug, peers });\n    if (!result) return;\n\n    actions.showNotification({\n      title: langProvider.oldTranslate(folder ? 'FolderLinkUpdatedTitle' : 'FolderLinkAddedTitle', folderTitle),\n      message: langProvider.oldTranslate('FolderLinkAddedSubtitle', notJoinedCount, 'i'),\n      tabId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHATLISTS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'chatlistJoined', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('leaveChatlist', async (global, actions, payload): Promise<void> => {\n  const { folderId, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n\n  const peers = peerIds?.map((peerId) => selectChat(global, peerId)).filter(Boolean) || [];\n\n  const result = await callApi('leaveChatlist', { folderId, peers });\n\n  if (!result) return;\n\n  actions.showNotification({\n    title: langProvider.oldTranslate('FolderLinkDeletedTitle', folder.title),\n    message: langProvider.oldTranslate('FolderLinkDeletedSubtitle', peers.length, 'i'),\n    tabId,\n  });\n});\n\naddActionHandler('loadChatlistInvites', async (global, actions, payload): Promise<void> => {\n  const { folderId } = payload;\n\n  const result = await callApi('fetchChatlistInvites', { folderId });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: result.invites,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('createChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let result: { filter: ApiChatFolder; invite: ApiChatlistExportedInvite | undefined } | undefined;\n\n  try {\n    result = await callApi('createChalistInvite', {\n      folderId,\n      peers: folder.includedChatIds.concat(folder.pinnedChatIds || [])\n        .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean),\n    });\n  } catch (error) {\n    if (CHATLIST_LIMIT_ERROR_LIST.has((error as ApiError).message)) {\n      actions.openLimitReachedModal({ limit: 'chatlistInvites', tabId });\n      actions.requestNextSettingsScreen({ screen: SettingsScreens.Folders, tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result || !result.invite) return;\n\n  const { shareFolderScreen } = selectTabState(global, tabId);\n\n  if (!shareFolderScreen) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      byId: {\n        ...global.chatFolders.byId,\n        [folderId]: {\n          ...global.chatFolders.byId[folderId],\n          ...result.filter,\n        },\n      },\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: [\n          ...(global.chatFolders.invites[folderId] || []),\n          result.invite,\n        ],\n      },\n    },\n  };\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...shareFolderScreen,\n      url: result.invite.url,\n      isLoading: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    folderId, peerIds, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const slug = url.split('/').pop();\n  if (!slug) return;\n\n  const peers = peerIds\n    .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean);\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const result = await callApi('editChatlistInvite', { folderId, slug, peers });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        invites: {\n          ...global.chatFolders.invites,\n          [folderId]: global.chatFolders.invites[folderId]?.map((invite) => {\n            if (invite.url === url) {\n              return result;\n            }\n            return invite;\n          }),\n        },\n      },\n    };\n    setGlobal(global);\n  } catch (error) {\n    actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n  } finally {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      shareFolderScreen: {\n        ...selectTabState(global, tabId).shareFolderScreen!,\n        isLoading: false,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, url } = payload;\n\n  const slug = url.split('/').pop();\n\n  if (!slug) return;\n\n  const result = await callApi('deleteChatlistInvite', { folderId, slug });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: global.chatFolders.invites[folderId]?.filter((invite) => invite.url !== url),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openDeleteChatFolderModal', async (global, actions, payload): Promise<void> => {\n  const { folderId, isConfirmedForChatlist, tabId = getCurrentTabId() } = payload;\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  if (folder.isChatList && (!folder.hasMyInvites || isConfirmedForChatlist)) {\n    const suggestions = await callApi('fetchLeaveChatlistSuggestions', { folderId });\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatlistModal: {\n        removal: {\n          folderId,\n          suggestedPeerIds: suggestions,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatDetectedLanguage', (global, actions, payload): ActionReturnType => {\n  const { chatId, detectedLanguage } = payload;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    detectedLanguage,\n  });\n\n  return global;\n});\n\naddActionHandler('togglePeerTranslations', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('togglePeerTranslations', { chat, isEnabled });\n\n  if (result === undefined) return;\n\n  global = getGlobal();\n  global = updatePeerFullInfo(global, chatId, {\n    isTranslationDisabled: isEnabled ? undefined : true,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('setViewForumAsMessages', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat?.isForum || chat.isForumAsMessages === isEnabled) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isForumAsMessages: isEnabled || undefined });\n  setGlobal(global);\n\n  void callApi('setViewForumAsMessages', { chat, isEnabled });\n});\n\naddActionHandler('loadChannelRecommendations', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  if (chatId && !chat) {\n    return;\n  }\n\n  if (!chatId) {\n    const similarChannelIds = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID);\n    if (similarChannelIds) return; // Already cached\n  }\n\n  const result = await callApi('fetchChannelRecommendations', {\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { similarChannels, count } = result;\n\n  const chatsById = buildCollectionByKey(similarChannels, 'id');\n\n  global = getGlobal();\n  global = addChats(global, chatsById);\n  global = addSimilarChannels(global, chatId || GLOBAL_SUGGESTED_CHANNELS_ID, Object.keys(chatsById), count);\n  setGlobal(global);\n});\n\naddActionHandler('toggleChannelRecommendations', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  global = toggleSimilarChannels(global, chatId);\n  setGlobal(global);\n});\n\naddActionHandler('resolveBusinessChatLink', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('resolveBusinessChatLink', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('BusinessLink.ErrorExpired'),\n      tabId,\n    });\n    return;\n  }\n\n  const { users, chats, chatLink } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n\n  actions.openChatWithDraft({\n    chatId: chatLink.chatId,\n    text: chatLink.text,\n    tabId,\n  });\n});\n\naddActionHandler('requestCollectibleInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    type, collectible, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  let inputCollectible;\n  if (type === 'phone') {\n    inputCollectible = { phone: collectible };\n  }\n  if (type === 'username') {\n    inputCollectible = { username: collectible };\n  }\n  if (!inputCollectible) return;\n\n  const result = await callApi('fetchCollectionInfo', inputCollectible);\n  if (!result) {\n    copyTextToClipboard(collectible);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    collectibleInfoModal: {\n      ...result,\n      type,\n      collectible,\n      peerId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function loadChats(\n  listType: ChatListType,\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal();\n  let lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n  const result = listType === 'saved' ? await callApi('fetchSavedChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    withPinned: shouldReplace,\n  }) : await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    lastLocalServiceMessageId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n  lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  if (shouldReplace) {\n    if (listType === 'active') {\n      // Always include service notifications chat\n      if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n        const result2 = await callApi('fetchChat', {\n          type: 'user',\n          user: SERVICE_NOTIFICATIONS_USER_MOCK,\n        });\n\n        global = getGlobal();\n\n        const notificationsChat = result2 && selectChat(global, result2.chatId);\n        if (notificationsChat) {\n          chatIds.unshift(notificationsChat.id);\n          result.chats.unshift(notificationsChat);\n          if (lastLocalServiceMessageId) {\n            result.lastMessageByChatId[notificationsChat.id] = lastLocalServiceMessageId;\n          }\n        }\n      }\n\n      const tabStates = Object.values(global.byTabId);\n      const topArchivedChats = getOrderedIds(ARCHIVED_FOLDER_ID)\n        ?.slice(0, GLOBAL_STATE_CACHE_ARCHIVED_CHAT_LIST_LIMIT)\n        .map((chatId) => selectChat(global, chatId))\n        .filter(Boolean);\n      const visibleChats = tabStates.flatMap(({ id: tabId }) => {\n        const currentChat = selectCurrentChat(global, tabId);\n        return currentChat ? [currentChat] : [];\n      });\n      const chatsToSave = visibleChats.concat(topArchivedChats || []);\n\n      const visibleUsers = tabStates.flatMap(({ id: tabId }) => {\n        return selectVisibleUsers(global, tabId) || [];\n      });\n\n      if (global.currentUserId && global.users.byId[global.currentUserId]) {\n        visibleUsers.push(global.users.byId[global.currentUserId]);\n      }\n\n      global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n      global = replaceUserStatuses(global, result.userStatusesById);\n      global = replaceChats(global, buildCollectionByKey(chatsToSave.concat(result.chats), 'id'));\n      global = replaceChatListIds(global, listType, chatIds);\n    } else {\n      // Archived and Saved\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addUserStatuses(global, result.userStatusesById);\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = replaceChatListIds(global, listType, chatIds);\n    }\n  } else {\n    const newChats = buildCollectionByKey(result.chats, 'id');\n\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, newChats);\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n  global = addMessages(global, result.messages);\n  global = updateChatsLastMessageId(global, result.lastMessageByChatId, listType);\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  if ((chatIds.length === 0 || chatIds.length === result.totalChatCount) && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    chats, users, userStatusesById, fullInfo, groupCall, membersCount, isForumAsMessages,\n  } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState', 'isLoaded']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  if (membersCount !== undefined) {\n    global = updateChat(global, chat.id, { membersCount });\n  }\n  if (chat.isForum) {\n    global = updateChat(global, chat.id, { isForumAsMessages });\n  }\n  global = replaceChatFullInfo(global, chat.id, fullInfo);\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  const localSet = stickerSet && selectStickerSet(global, stickerSet);\n  if (stickerSet && !localSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  const emojiSet = fullInfo.emojiSet;\n  const localEmojiSet = emojiSet && selectStickerSet(global, emojiSet);\n  if (emojiSet && !localEmojiSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: emojiSet.id,\n        accessHash: emojiSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n  setGlobal(global);\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  params: {\n    username: string;\n    threadId?: ThreadId;\n    channelPostId?: number;\n    startParam?: string;\n    startAttach?: string;\n    attach?: string;\n    text?: string;\n  },\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    username, threadId, channelPostId, startParam, startAttach, attach, text,\n  } = params;\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach !== undefined && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat?.id || bot.id,\n      startParam: startAttach,\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openThread({ chatId: chat.id, threadId: threadId ?? MAIN_THREAD_ID, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.loadFullChat({ chatId: newChat.id, tabId });\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { ApiGroupCall } from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, CallSound, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.oldTranslate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: \"Sorry, your browser doesn't support group calls\",\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat, tabId);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.oldTranslate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { ApiGroupCall } from '../../api/types';\nimport type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\n\nimport { omit } from '../../util/iteratees';\nimport { selectChat } from '../selectors';\nimport { selectGroupCall } from '../selectors/calls';\nimport { updateChatFullInfo } from './chats';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChatFullInfo(global, groupCall.chatId, {\n        groupCallId: undefined,\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["SERVICE_NOTIFICATIONS_USER_MOCK","id","SERVICE_NOTIFICATIONS_USER_ID","accessHash","type","isMin","phoneNumber","CHATLIST_LIMIT_ERROR_LIST","Set","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","abortChatRequests","chatId","threadId","callApi","abortChatRequestsForCurrentChat","global","newChatId","newThreadId","_len","arguments","length","_ref2","Array","_key","tabId","getCurrentTabId","currentMessageList","selectCurrentMessageList","currentChatId","currentThreadId","isChatOpened","isThreadOpened","Object","values","byTabId","reduce","_ref3","_ref4","accHasChatOpened","accHasThreadOpened","otherTabId","otherMessageList","isSameChat","undefined","async","loadChats","listType","offsetId","offsetDate","shouldReplace","isFullDraftSync","getGlobal","lastLocalServiceMessageId","selectLastServiceNotification","result","limit","CHAT_LIST_LOAD_SLICE","withPinned","archived","chatIds","shift","includes","result2","user","notificationsChat","selectChat","unshift","chats","lastMessageByChatId","tabStates","topArchivedChats","getOrderedIds","ARCHIVED_FOLDER_ID","slice","GLOBAL_STATE_CACHE_ARCHIVED_CHAT_LIST_LIMIT","map","filter","Boolean","chatsToSave","flatMap","_ref9","currentChat","selectCurrentChat","concat","visibleUsers","_ref10","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","replaceUserStatuses","userStatusesById","replaceChats","replaceChatListIds","addUsers","addUserStatuses","updateChats","newChats","updateChatListIds","updateChatListSecondaryInfo","addMessages","messages","updateChatsLastMessageId","keys","draftsById","forEach","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","totalChatCount","isFullyLoaded","setGlobal","loadFullChat","actions","chat","_len2","_ref11","_key2","fullInfo","groupCall","membersCount","isForumAsMessages","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","isForum","replaceChatFullInfo","stickerSet","localSet","selectStickerSet","loadStickers","stickerSetInfo","emojiSet","localEmojiSet","fetchChatByUsername","username","localChat","selectChatByUsername","updateUser","getAttachBotOrNotify","_len4","_ref13","_key4","selectUser","isUserBot","bot","showNotification","message","langProvider","openAttachMenuFromLink","attach","startAttach","_len6","_ref15","_key6","callAttachBot","startParam","ensureIsSuperGroup","_len7","_ref16","_key7","isChatBasicGroup","newChat","_len3","_ref12","_key3","error","openLimitReachedModal","showDialog","data","hasErrorKey","migrateChat","openChat","addActionHandler","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","_ref","folderAllOrderedIds","ALL_FOLDER_ID","nextChatId","find","has","add","loadViewportMessages","payload","noForumTopicPanel","shouldReplaceHistory","shouldReplaceLast","processOpenChatOrThread","TMP_CHAT_ID","hasUnreadMark","toggleChatUnread","isChatOnlySummary","selectChatLastMessageId","requestChatUpdate","selectIsChatWithSelf","closeStoryViewer","closeStarsBalanceModal","otherParams","openThread","isComments","focusMessageId","loadingChatId","loadingThreadId","originChannelId","originMessageId","originalChat","getIsSavedDialog","threadInfo","selectThreadInfo","listedIds","Number","updateTabState","loadingThread","selectTabState","loadingMessageId","openPreviousChat","currentGlobal","messageId","addChats","updateThreadInfo","isCommentsInfo","fromChannelId","fromMessageId","pick","updateThread","firstMessageId","focusMessage","onError","onLoaded","chatFullInfo","linkedChatId","selectSupportChat","onReplace","getOrderDate","selectChatLastMessage","date","creationDate","DEBUG","console","connectionState","authState","listIds","oldestChat","selectIsChatPinned","sort","chat1","chat2","force","withPhotos","loadChat","loadProfilePhotos","profileId","lastLocalMessage","isSavedDialog","updateChatLastMessageId","removeChatFromChatLists","_ref5","tabChatId","muteUntil","isMuted","topicId","updateTopic","title","about","photo","memberIds","createdChannel","missingInvitedUsers","chatCreation","progress","ChatCreationProgress","InProgress","channel","missingUsers","Error","channelId","Complete","updateMissingInvitedUsers","userId","leaveChat","chatMessages","selectChatMessages","localMessageIds","isLocalMessageId","deleteChatMessages","createdChat","err","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ids","orderedPinnedIds","isChatArchived","SAVED_FOLDER_ID","saved","chatFolders","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","Math","max","recommendedId","description","newFolder","newId","apiUpdate","requestNextSettingsScreen","foldersAction","_ref6","folderIds","unreadCount","lastTopicMessageId","topics","lastMessageId","lastReadInboxMessageId","hash","text","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","openChatWithDraft","url","openChatByPhoneNumber","openChatByInvite","openStickerSet","joinVoiceChatByLink","openInvoice","processAttachBotParameters","checkChatlistInvite","openChatByUsername","openChatByUsernameAction","openStoryViewerByUsername","processBoostParameters","checkGiftCode","isDeepLink","processDeepLink","match","RE_TG_LINK","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","adaptedPathname","part1","part2","part3","part","decodeURI","params","fromEntries","searchParams","hasStartAttach","hasOwnProperty","hasStartApp","choose","parseChooseParameter","storyId","hasBoost","substr","startattach","shortName","formatShareText","slug","chatOrChannelPostId","commentId","comment","inviteHash","voicechat","livestream","c","usernameOrId","isPrivate","toChannelId","substring","startapp","start","startApp","originalParts","isChatChannel","isChatSuperGroup","openBoostModal","webAppName","isWebApp","usernames","_len5","_ref14","_key5","channelPostId","isCurrentChat","startBot","botId","param","usernameChat","chatByUsername","theme","extractCurrentThemeParams","requestAppWebView","appName","isEnabled","updateChatFullInfo","isPreHistoryHidden","bannedRights","updatedFullInfo","selectChatFullInfo","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","chatAfterUpdate","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","avatarHash","profilePhoto","photosToDelete","nextPhoto","photos","newPhotos","p","toDelete","groups","addedById","group","forDiscussionIds","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","Loading","Closed","isProtected","enabledReactions","settings","toggleStoryRibbon","isShown","isArchived","forumPanelChatId","isFromSideMenu","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","listedTopicIds","topicsCount","offsetTopic","acc","el","topic","accTopic","offsetTopicId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","updateTopics","count","updateListedTopicIds","entries","_ref7","readInboxMessageIdByTopicId","_ref8","shouldCloseChatOnError","openForumPanel","closeForumPanel","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","chatlistModal","invite","peerIds","peers","peerId","notJoinedCount","peer","isNotJoined","folderTitle","invites","shareFolderScreen","screen","SettingsScreens","Folders","pop","isConfirmedForChatlist","isChatList","hasMyInvites","suggestions","removal","suggestedPeerIds","deleteFolderDialogModal","detectedLanguage","updatePeerFullInfo","isTranslationDisabled","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","similarChannels","chatsById","addSimilarChannels","toggleSimilarChannels","chatLink","collectible","inputCollectible","phone","collectibleInfoModal","copyTextToClipboard","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","getTracks","track","stop","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}