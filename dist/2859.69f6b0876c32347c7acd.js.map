{"version":3,"file":"2859.69f6b0876c32347c7acd.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type {\n  ApiChat, ApiChatFolder, ApiChatlistExportedInvite,\n  ApiChatMember, ApiError, ApiMissingInvitedUser,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType,\n  ChatListType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport {\n  ChatCreationProgress,\n  ManagementProgress,\n  NewChatMembersProgress,\n  SettingsScreens,\n  type ThreadId,\n} from '../../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  CHAT_LIST_LOAD_SLICE,\n  DEBUG,\n  GLOBAL_SUGGESTED_CHANNELS_ID,\n  RE_TG_LINK,\n  SAVED_FOLDER_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatShareText, parseChooseParameter, processDeepLink } from '../../../util/deeplink';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { buildCollectionByKey, omit, pick } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n  toChannelId,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMembers,\n  addChats,\n  addMessages,\n  addSimilarChannels,\n  addUsers,\n  addUserStatuses,\n  deleteChatMessages,\n  deletePeerPhoto,\n  deleteTopic,\n  leaveChat,\n  removeChatFromChatLists,\n  replaceChatFullInfo,\n  replaceChatListIds,\n  replaceChatListLoadingParameters,\n  replaceMessages,\n  replaceThreadParam,\n  replaceUserStatuses,\n  toggleSimilarChannels,\n  updateChat,\n  updateChatFullInfo,\n  updateChatLastMessageId,\n  updateChatListIds,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateChatsLastMessageId,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updateMissingInvitedUsers,\n  updatePeerFullInfo,\n  updateThread,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n  updateUsers,\n} from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatListLoadingParameters,\n  selectChatListType,\n  selectChatMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectIsChatWithSelf,\n  selectLastServiceNotification,\n  selectPeer,\n  selectSimilarChannelIds,\n  selectStickerSet,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectTopicsInfo,\n  selectUser,\n  selectUserByPhoneNumber,\n} from '../../selectors';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst CHATLIST_LIMIT_ERROR_LIST = new Set([\n  'FILTERS_TOO_MUCH',\n  'CHATLISTS_TOO_MUCH',\n  'INVITES_TOO_MUCH',\n]);\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\nfunction abortChatRequests(chatId: string, threadId?: ThreadId) {\n  callApi('abortChatRequests', { chatId, threadId });\n}\n\nfunction abortChatRequestsForCurrentChat<T extends GlobalState>(\n  global: T, newChatId?: string, newThreadId?: ThreadId,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const currentChatId = currentMessageList?.chatId;\n  const currentThreadId = currentMessageList?.threadId;\n\n  if (currentChatId && (currentChatId !== newChatId || currentThreadId !== newThreadId)) {\n    const [isChatOpened, isThreadOpened] = Object.values(global.byTabId)\n      .reduce(([accHasChatOpened, accHasThreadOpened], { id: otherTabId }) => {\n        if (otherTabId === tabId || (accHasChatOpened && accHasThreadOpened)) {\n          return [accHasChatOpened, accHasThreadOpened];\n        }\n\n        const otherMessageList = selectCurrentMessageList(global, otherTabId);\n        const isSameChat = otherMessageList?.chatId === currentChatId;\n        const isSameThread = isSameChat && otherMessageList?.threadId === currentThreadId;\n\n        return [accHasChatOpened || isSameChat, accHasThreadOpened || isSameThread];\n      }, [currentChatId === newChatId, false]);\n\n    const shouldAbortChatRequests = !isChatOpened || !isThreadOpened;\n\n    if (shouldAbortChatRequests) {\n      abortChatRequests(currentChatId, isChatOpened ? currentThreadId : undefined);\n    }\n  }\n}\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, type, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  actions.processOpenChatOrThread({\n    chatId: id,\n    type,\n    threadId: MAIN_THREAD_ID,\n    noForumTopicPanel,\n    shouldReplaceHistory,\n    shouldReplaceLast,\n    tabId,\n  });\n\n  abortChatRequestsForCurrentChat(global, id, MAIN_THREAD_ID, tabId);\n\n  if (!id || id === TMP_CHAT_ID) {\n    return;\n  }\n\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  const isChatOnlySummary = !selectChatLastMessageId(global, id);\n\n  if (!chat) {\n    if (selectIsChatWithSelf(global, id)) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatOnlySummary && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n});\n\naddActionHandler('openSavedDialog', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId(), ...otherParams } = payload;\n\n  actions.openThread({\n    chatId: global.currentUserId!,\n    threadId: chatId,\n    tabId,\n    ...otherParams,\n  });\n});\n\naddActionHandler('openThread', async (global, actions, payload): Promise<void> => {\n  const {\n    type, isComments, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    focusMessageId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { chatId } = payload;\n  let threadId: ThreadId | undefined;\n  let loadingChatId: string;\n  let loadingThreadId: ThreadId;\n\n  if (!isComments) {\n    loadingChatId = payload.chatId;\n    threadId = payload.threadId;\n    loadingThreadId = threadId;\n\n    const originalChat = selectChat(global, loadingChatId);\n    if (threadId === MAIN_THREAD_ID) {\n      actions.openChat({\n        id: chatId,\n        type,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    } else if (originalChat?.isForum || (chatId && getIsSavedDialog(chatId, threadId, global.currentUserId))) {\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    }\n  } else {\n    const { originChannelId, originMessageId } = payload;\n\n    loadingChatId = originChannelId;\n    loadingThreadId = originMessageId;\n  }\n\n  const chat = selectChat(global, loadingChatId);\n  const threadInfo = selectThreadInfo(global, loadingChatId, loadingThreadId);\n  const thread = selectThread(global, loadingChatId, loadingThreadId);\n  if (!chat) return;\n\n  abortChatRequestsForCurrentChat(global, loadingChatId, loadingThreadId, tabId);\n\n  if (chatId\n    && threadInfo?.threadId\n    && (isComments || (thread?.listedIds?.length && thread.listedIds.includes(Number(threadInfo.threadId))))) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadInfo.threadId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n      tabId,\n    });\n    return;\n  }\n\n  let { loadingThread } = selectTabState(global, tabId);\n  if (loadingThread) {\n    abortChatRequests(loadingThread.loadingChatId, loadingThread.loadingMessageId);\n  }\n\n  global = updateTabState(global, {\n    loadingThread: {\n      loadingChatId,\n      loadingMessageId: Number(loadingThreadId),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const openPreviousChat = () => {\n    // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n    const currentGlobal = getGlobal();\n    if (isComments\n      || selectCurrentMessageList(currentGlobal, tabId)?.chatId !== loadingChatId\n      || selectCurrentMessageList(currentGlobal, tabId)?.threadId !== loadingThreadId) {\n      return;\n    }\n    actions.openPreviousChat({ tabId });\n  };\n\n  if (!isComments) {\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadId!,\n      tabId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n    });\n  }\n\n  const result = await callApi('fetchDiscussionMessage', {\n    chat: selectChat(global, loadingChatId)!,\n    messageId: Number(loadingThreadId),\n  });\n\n  global = getGlobal();\n  loadingThread = selectTabState(global, tabId).loadingThread;\n  if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n    openPreviousChat();\n    return;\n  }\n\n  if (!result) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n\n    actions.showNotification({\n      message: langProvider.oldTranslate(isComments ? 'ChannelPostDeleted' : 'lng_message_not_found'),\n      tabId,\n    });\n\n    openPreviousChat();\n    return;\n  }\n\n  threadId ??= result.threadId;\n  chatId ??= result.chatId;\n\n  if (!chatId) {\n    openPreviousChat();\n    return;\n  }\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  if (isComments) {\n    global = updateThreadInfo(global, loadingChatId, loadingThreadId, {\n      threadId,\n    });\n\n    global = updateThreadInfo(global, chatId, threadId, {\n      isCommentsInfo: false,\n      threadId,\n      chatId,\n      fromChannelId: loadingChatId,\n      fromMessageId: loadingThreadId,\n      ...(threadInfo\n        && pick(threadInfo, ['messagesCount', 'lastMessageId', 'lastReadInboxMessageId', 'recentReplierIds'])),\n    });\n  }\n  global = updateThread(global, chatId, threadId, {\n    firstMessageId: result.firstMessageId,\n  });\n  setGlobal(global);\n\n  if (focusMessageId) {\n    actions.focusMessage({\n      chatId,\n      threadId: threadId!,\n      messageId: focusMessageId,\n      tabId,\n    });\n  }\n\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    onError: () => {\n      global = getGlobal();\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.showNotification({\n        message: langProvider.oldTranslate('Group.ErrorAccessDenied'),\n        tabId,\n      });\n    },\n    onLoaded: () => {\n      global = getGlobal();\n      loadingThread = selectTabState(global, tabId).loadingThread;\n      if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n        return;\n      }\n\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId: threadId!,\n        tabId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n      });\n    },\n  });\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const { whenFirstBatchDone } = payload;\n  const listType = payload.listType;\n  let isCallbackFired = false;\n  let i = 0;\n\n  while (!global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    await loadChats(\n      listType,\n      true,\n    );\n\n    if (!isCallbackFired) {\n      await whenFirstBatchDone?.();\n      isCallbackFired = true;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, force, withPhotos,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const loadChat = async () => {\n    await loadFullChat(global, actions, chat);\n    if (withPhotos) {\n      actions.loadMoreProfilePhotos({ peerId: chatId, shouldInvalidateCache: true });\n    }\n  };\n\n  if (force) {\n    void loadChat();\n  } else {\n    runDebouncedForLoadFullChat(loadChat);\n  }\n});\n\naddActionHandler('loadTopChats', (): ActionReturnType => {\n  runThrottledForLoadTopChats(() => {\n    loadChats('active', undefined, true);\n    loadChats('archived', undefined, true);\n  });\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('requestSavedDialogUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat,\n    isSavedDialog: true,\n    limit: 1,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addMessages(global, result.messages);\n\n  if (result.messages.length) {\n    global = updateChatLastMessageId(global, chatId, result.messages[0].id, 'saved');\n    global = updateChatListIds(global, 'saved', [chatId]);\n\n    setGlobal(global);\n  } else {\n    global = removeChatFromChatLists(global, chatId, 'saved');\n\n    setGlobal(global);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      const currentMessageList = selectCurrentMessageList(global, tabId);\n      if (!currentMessageList) return;\n      const { chatId: tabChatId, threadId } = currentMessageList;\n\n      if (selectIsChatWithSelf(global, tabChatId) && threadId === chatId) {\n        actions.openChat({ id: undefined, tabId });\n      }\n    });\n  }\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted, muteUntil });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted, muteUntil,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n  let missingInvitedUsers: ApiMissingInvitedUser[] | undefined;\n  try {\n    const result = await callApi('createChannel', { title, about, users });\n    createdChannel = result?.channel;\n    missingInvitedUsers = result?.missingUsers;\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (missingInvitedUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, channelId, missingInvitedUsers, tabId);\n    setGlobal(global);\n  }\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    await callApi('leaveChannel', { channelId, accessHash });\n    global = getGlobal();\n    const chatMessages = selectChatMessages(global, chatId);\n    const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n    global = deleteChatMessages(global, chatId, localMessageIds);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const { chat: createdChat, missingUsers } = await callApi('createGroupChat', {\n      title,\n      users,\n    }) ?? {};\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (missingUsers) {\n      global = getGlobal();\n      global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n      setGlobal(global);\n    }\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (err) {\n    if ((err as ApiError).message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('toggleSavedDialogPinned', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'savedDialogsPinned');\n\n  const isPinned = selectIsChatPinned(global, id, SAVED_FOLDER_ID);\n\n  const ids = global.chats.orderedPinnedIds.saved;\n  if ((ids?.length || 0) >= limit && !isPinned) {\n    actions.openLimitReachedModal({\n      limit: 'savedDialogsPinned',\n      tabId,\n    });\n    return;\n  }\n  void callApi('toggleSavedDialogPinned', { chat, shouldBePinned: !isPinned });\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  const newId = maxId + 1;\n  const folderUpdate = {\n    id: newId,\n    ...newFolder,\n  };\n  await callApi('editChatFolder', {\n    id: newId,\n    folderUpdate,\n  });\n\n  // Update called from the above `callApi` is throttled, but we need to apply changes immediately\n  actions.apiUpdate({\n    '@type': 'updateChatFolder',\n    id: newId,\n    folder: folderUpdate,\n  });\n\n  actions.requestNextSettingsScreen({\n    foldersAction: {\n      type: 'setFolderId',\n      payload: maxId + 1,\n    },\n    tabId,\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const topic = selectTopic(global, chatId, topicId);\n\n  const lastTopicMessageId = topic?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('checkChatInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  if (result.chat) {\n    global = addChats(global, buildCollectionByKey([result.chat], 'id'));\n    setGlobal(global);\n    actions.openChat({ id: result.chat.id, tabId });\n    return;\n  }\n\n  if (result.invite.subscriptionFormId) {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice: {\n          type: 'chatInviteSubscription',\n          hash,\n        },\n        subscriptionInfo: result.invite,\n        status: 'pending',\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    chatInviteModal: {\n      hash,\n      inviteInfo: result.invite,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, text, tabId = getCurrentTabId(),\n  } = payload;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  } else {\n    actions.openChat({ id: chat.id, tabId });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', async (global, actions, payload): Promise<void> => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    checkChatInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    checkChatlistInvite,\n    openChatByUsername: openChatByUsernameAction,\n    openStoryViewerByUsername,\n    processBoostParameters,\n    checkGiftCode,\n  } = actions;\n\n  if (isDeepLink(url)) {\n    const isProcessed = processDeepLink(url);\n    if (isProcessed || url.match(RE_TG_LINK)) {\n      return;\n    }\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n\n  const adaptedPathname = uri.pathname.replace(/^\\/?s\\//, '');\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${adaptedPathname}` : adaptedPathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const hasStartAttach = params.hasOwnProperty('startattach');\n  const hasStartApp = params.hasOwnProperty('startapp');\n  const choose = parseChooseParameter(params.choose);\n  const storyId = part2 === 's' && (Number(part3) || undefined);\n  const hasBoost = params.hasOwnProperty('boost');\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach: params.startattach,\n      attach: params.attach,\n      text: params.text,\n      tabId,\n    });\n    return;\n  }\n\n  if (storyId) {\n    openStoryViewerByUsername({\n      username: part1,\n      storyId,\n      tabId,\n    });\n\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    checkChatInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n    return;\n  }\n\n  if (part1 === 'addlist') {\n    const slug = part2;\n    checkChatlistInvite({ slug, tabId });\n    return;\n  }\n\n  if (part1 === 'giftcode') {\n    const slug = part2;\n    checkGiftCode({ slug, tabId });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  const isWebApp = await checkWebAppExists(global, part1, part2);\n\n  const shouldTryOpenChat = (part1 && !part2) || Number.isInteger(Number(part2)) || isWebApp;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'boost') {\n    const username = part2;\n    const id = params.c;\n\n    const isPrivate = !username && Boolean(id);\n\n    processBoostParameters({\n      usernameOrId: username || id,\n      isPrivate,\n      tabId,\n    });\n  } else if (hasBoost) {\n    const isPrivate = part1 === 'c' && Boolean(chatOrChannelPostId);\n    processBoostParameters({\n      usernameOrId: chatOrChannelPostId || part1,\n      isPrivate,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    focusMessage({\n      chatId: toChannelId(chatOrChannelPostId),\n      messageId,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      type: 'slug',\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      type: 'slug',\n      slug: part2,\n      tabId,\n    });\n  } else if ((hasStartAttach && choose) || (!part2 && hasStartApp)) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      startParam: params.startattach || params.startapp,\n      tabId,\n    });\n  } else if (shouldTryOpenChat) {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach: params.startattach,\n      attach: params.attach,\n      startApp: params.startapp,\n      originalParts: [part1, part2, part3],\n      tabId,\n    });\n  } else {\n    actions.openUrl({\n      url, shouldSkipModal: true, tabId, ignoreDeepLinks: true,\n    });\n  }\n});\n\naddActionHandler('processBoostParameters', async (global, actions, payload): Promise<void> => {\n  const { usernameOrId, isPrivate, tabId = getCurrentTabId() } = payload;\n\n  let chat: ApiChat | undefined;\n\n  if (isPrivate) {\n    const chatId = toChannelId(usernameOrId);\n    chat = selectChat(global, chatId);\n    if (!chat) {\n      actions.showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n  } else {\n    chat = await fetchChatByUsername(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: 'User does not exist', tabId });\n      return;\n    }\n  }\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    actions.openChat({ id: chat.id, tabId });\n    return;\n  }\n\n  actions.openBoostModal({\n    chatId: chat.id,\n    tabId,\n  });\n});\n\naddActionHandler('acceptChatInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId, originalParts, startApp, text,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  const webAppName = originalParts?.[1];\n  const isWebApp = webAppName && !Number(webAppName) && !originalParts?.[2];\n\n  if (!commentId) {\n    if (startAttach === undefined && messageId && !startParam\n      && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    if (startApp !== undefined && !webAppName) {\n      const theme = extractCurrentThemeParams();\n      const chatByUsername = await fetchChatByUsername(global, username);\n      global = getGlobal();\n      const user = chatByUsername && selectUser(global, chatByUsername.id);\n      if (!chatByUsername || !chat || !user?.hasMainMiniApp) return;\n      actions.requestMainWebView({\n        botId: chatByUsername.id,\n        peerId: chat.id,\n        theme,\n        tabId,\n      });\n      return;\n    }\n    if (!isWebApp) {\n      await openChatByUsername(\n        global, actions, {\n          username,\n          threadId,\n          channelPostId: messageId,\n          startParam,\n          startAttach,\n          attach,\n          text,\n        }, tabId,\n      );\n      return;\n    }\n  }\n\n  const usernameChat = selectChatByUsername(global, username);\n  if (commentId && messageId && usernameChat) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: usernameChat.id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    return;\n  }\n\n  if (!isWebApp) actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  if (isWebApp && chatByUsername) {\n    const theme = extractCurrentThemeParams();\n\n    actions.requestAppWebView({\n      appName: webAppName,\n      botId: chatByUsername.id,\n      tabId,\n      startApp,\n      theme,\n    });\n    return;\n  }\n\n  if (!messageId) return;\n\n  actions.openThread({\n    isComments: true,\n    originChannelId: chatByUsername.id,\n    originMessageId: messageId,\n    tabId,\n    focusMessageId: commentId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: isEnabled });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const updatedFullInfo = selectChatFullInfo(global, chat.id);\n  if (!updatedFullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = updatedFullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChatFullInfo(global, chat.id, {\n    ...(members && isBanned && {\n      members: members.filter((m) => m.userId !== userId),\n    }),\n    ...(members && !isBanned && {\n      members: members.map((m) => (\n        m.userId === userId\n          ? { ...m, bannedRights }\n          : m\n      )),\n    }),\n    ...(isUnblocked && kickedMembers && {\n      kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n    }),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  if (newAdminMembersById) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { adminMembersById: newAdminMembersById });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    fullInfo?.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (photo) {\n    actions.loadFullChat({ chatId, withPhotos: true });\n  }\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  actions.loadFullChat({ chatId, withPhotos: true });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  let isDeleted;\n  if (photo.id === chat.avatarPhotoId) {\n    isDeleted = await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n    });\n  } else {\n    isDeleted = await callApi('deleteProfilePhotos', [photo]);\n  }\n  if (!isDeleted) return;\n\n  global = getGlobal();\n  global = deletePeerPhoto(global, chatId, photo.id);\n  setGlobal(global);\n\n  actions.loadFullChat({ chatId, withPhotos: true });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, areProfilesEnabled, areSignaturesEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, areProfilesEnabled, areSignaturesEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let fullInfo = selectChatFullInfo(global, chat.id);\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: false });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const fullInfo = selectChatFullInfo(global, channelId);\n  let chat: ApiChat | undefined;\n  if (fullInfo?.linkedChatId) {\n    chat = selectChat(global, fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = selectChatFullInfo(global, chat.id)?.members?.length;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = memberIds.map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  const missingUsers = await callApi('addChatMembers', chat, users);\n  if (missingUsers) {\n    global = getGlobal();\n    global = updateMissingInvitedUsers(global, chatId, missingUsers, tabId);\n    setGlobal(global);\n  }\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, enabledReactions, reactionsLimit,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n    reactionsLimit,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat);\n});\n\naddActionHandler('fetchChat', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    return;\n  }\n\n  if (selectIsChatWithSelf(global, chatId)) {\n    void callApi('fetchChat', { type: 'self' });\n  } else {\n    const user = selectUser(global, chatId);\n    if (user) {\n      void callApi('fetchChat', { type: 'user', user });\n    }\n  }\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  actions.toggleStoryRibbon({ isShown: false, tabId });\n  actions.toggleStoryRibbon({ isShown: false, isArchived: true, tabId });\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  const isForChat = Boolean(filter);\n\n  if (!isForChat) {\n    actions.callAttachBot({\n      isFromSideMenu: true,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const topicsInfo = selectTopicsInfo(global, chatId);\n\n  if (!force && topicsInfo?.listedTopicIds && topicsInfo.listedTopicIds.length === topicsInfo.totalCount) {\n    return;\n  }\n\n  const offsetTopic = !force ? topicsInfo?.listedTopicIds?.reduce((acc, el) => {\n    const topic = selectTopic(global, chatId, el);\n    const accTopic = selectTopic(global, chatId, acc);\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && selectTopic(global, chatId, offsetTopic)) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message.startsWith('A wait of')) {\n      actions.showNotification({ message: langProvider.oldTranslate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (result) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, { isForum: isEnabled });\n    setGlobal(global);\n\n    if (!isEnabled) {\n      actions.closeForumPanel({ tabId });\n    } else {\n      actions.openForumPanel({ chatId: chat.id, tabId });\n    }\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = selectChatFullInfo(global, chat.id)?.areParticipantsHidden;\n  global = updateChatFullInfo(global, chatId, { areParticipantsHidden: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { areParticipantsHidden: prevIsEnabled });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openThread({\n      chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('deleteTopic', { chat, topicId });\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = selectTopic(global, chatId, topicId);\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  const topics = selectTopics(global, chatId);\n  if (!chat || !topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\naddActionHandler('checkChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatlistInvite', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_group_invite_bad_link'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    chatlistModal: {\n      invite: result.invite,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('joinChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { invite, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const peers = peerIds.map((peerId) => selectChat(global, peerId)).filter(Boolean);\n  const notJoinedCount = peers.filter((peer) => peer.isNotJoined).length;\n\n  const folder = 'folderId' in invite ? selectChatFolder(global, invite.folderId) : undefined;\n  const folderTitle = 'title' in invite ? invite.title : folder?.title;\n\n  try {\n    const result = await callApi('joinChatlistInvite', { slug: invite.slug, peers });\n    if (!result) return;\n\n    actions.showNotification({\n      title: langProvider.oldTranslate(folder ? 'FolderLinkUpdatedTitle' : 'FolderLinkAddedTitle', folderTitle),\n      message: langProvider.oldTranslate('FolderLinkAddedSubtitle', notJoinedCount, 'i'),\n      tabId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHATLISTS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'chatlistJoined', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('leaveChatlist', async (global, actions, payload): Promise<void> => {\n  const { folderId, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n\n  const peers = peerIds?.map((peerId) => selectChat(global, peerId)).filter(Boolean) || [];\n\n  const result = await callApi('leaveChatlist', { folderId, peers });\n\n  if (!result) return;\n\n  actions.showNotification({\n    title: langProvider.oldTranslate('FolderLinkDeletedTitle', folder.title),\n    message: langProvider.oldTranslate('FolderLinkDeletedSubtitle', peers.length, 'i'),\n    tabId,\n  });\n});\n\naddActionHandler('loadChatlistInvites', async (global, actions, payload): Promise<void> => {\n  const { folderId } = payload;\n\n  const result = await callApi('fetchChatlistInvites', { folderId });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: result.invites,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('createChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let result: { filter: ApiChatFolder; invite: ApiChatlistExportedInvite | undefined } | undefined;\n\n  try {\n    result = await callApi('createChalistInvite', {\n      folderId,\n      peers: folder.includedChatIds.concat(folder.pinnedChatIds || [])\n        .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean),\n    });\n  } catch (error) {\n    if (CHATLIST_LIMIT_ERROR_LIST.has((error as ApiError).message)) {\n      actions.openLimitReachedModal({ limit: 'chatlistInvites', tabId });\n      actions.requestNextSettingsScreen({ screen: SettingsScreens.Folders, tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result || !result.invite) return;\n\n  const { shareFolderScreen } = selectTabState(global, tabId);\n\n  if (!shareFolderScreen) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      byId: {\n        ...global.chatFolders.byId,\n        [folderId]: {\n          ...global.chatFolders.byId[folderId],\n          ...result.filter,\n        },\n      },\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: [\n          ...(global.chatFolders.invites[folderId] || []),\n          result.invite,\n        ],\n      },\n    },\n  };\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...shareFolderScreen,\n      url: result.invite.url,\n      isLoading: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    folderId, peerIds, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const slug = url.split('/').pop();\n  if (!slug) return;\n\n  const peers = peerIds\n    .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean);\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const result = await callApi('editChatlistInvite', { folderId, slug, peers });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        invites: {\n          ...global.chatFolders.invites,\n          [folderId]: global.chatFolders.invites[folderId]?.map((invite) => {\n            if (invite.url === url) {\n              return result;\n            }\n            return invite;\n          }),\n        },\n      },\n    };\n    setGlobal(global);\n  } catch (error) {\n    actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n  } finally {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      shareFolderScreen: {\n        ...selectTabState(global, tabId).shareFolderScreen!,\n        isLoading: false,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, url } = payload;\n\n  const slug = url.split('/').pop();\n\n  if (!slug) return;\n\n  const result = await callApi('deleteChatlistInvite', { folderId, slug });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: global.chatFolders.invites[folderId]?.filter((invite) => invite.url !== url),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openDeleteChatFolderModal', async (global, actions, payload): Promise<void> => {\n  const { folderId, isConfirmedForChatlist, tabId = getCurrentTabId() } = payload;\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  if (folder.isChatList && (!folder.hasMyInvites || isConfirmedForChatlist)) {\n    const suggestions = await callApi('fetchLeaveChatlistSuggestions', { folderId });\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatlistModal: {\n        removal: {\n          folderId,\n          suggestedPeerIds: suggestions,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatDetectedLanguage', (global, actions, payload): ActionReturnType => {\n  const { chatId, detectedLanguage } = payload;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    detectedLanguage,\n  }, undefined, true);\n\n  return global;\n});\n\naddActionHandler('togglePeerTranslations', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('togglePeerTranslations', { chat, isEnabled });\n\n  if (result === undefined) return;\n\n  global = getGlobal();\n  global = updatePeerFullInfo(global, chatId, {\n    isTranslationDisabled: isEnabled ? undefined : true,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('setViewForumAsMessages', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat?.isForum || chat.isForumAsMessages === isEnabled) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isForumAsMessages: isEnabled || undefined });\n  setGlobal(global);\n\n  void callApi('setViewForumAsMessages', { chat, isEnabled });\n});\n\naddActionHandler('loadChannelRecommendations', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  if (chatId && !chat) {\n    return;\n  }\n\n  if (!chatId) {\n    const similarChannelIds = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID);\n    if (similarChannelIds) return; // Already cached\n  }\n\n  const result = await callApi('fetchChannelRecommendations', {\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { similarChannels, count } = result;\n\n  const chatsById = buildCollectionByKey(similarChannels, 'id');\n\n  global = getGlobal();\n  global = addSimilarChannels(global, chatId || GLOBAL_SUGGESTED_CHANNELS_ID, Object.keys(chatsById), count);\n  setGlobal(global);\n});\n\naddActionHandler('toggleChannelRecommendations', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  global = toggleSimilarChannels(global, chatId);\n  setGlobal(global);\n});\n\naddActionHandler('resolveBusinessChatLink', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('resolveBusinessChatLink', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('BusinessLink.ErrorExpired'),\n      tabId,\n    });\n    return;\n  }\n\n  const { chatLink } = result;\n\n  actions.openChatWithDraft({\n    chatId: chatLink.chatId,\n    text: chatLink.text,\n    tabId,\n  });\n});\n\naddActionHandler('requestCollectibleInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    type, collectible, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  let inputCollectible;\n  if (type === 'phone') {\n    inputCollectible = { phone: collectible };\n  }\n  if (type === 'username') {\n    inputCollectible = { username: collectible };\n  }\n  if (!inputCollectible) return;\n\n  const result = await callApi('fetchCollectionInfo', inputCollectible);\n  if (!result) {\n    copyTextToClipboard(collectible);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    collectibleInfoModal: {\n      ...result,\n      type,\n      collectible,\n      peerId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function loadChats(\n  listType: ChatListType,\n  isFullDraftSync?: boolean,\n  shouldIgnorePagination?: boolean,\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal();\n  let lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  const params = !shouldIgnorePagination ? selectChatListLoadingParameters(global, listType) : {};\n  const offsetPeer = params.nextOffsetPeerId ? selectPeer(global, params.nextOffsetPeerId) : undefined;\n  const offsetDate = params.nextOffsetDate;\n  const offsetId = params.nextOffsetId;\n\n  const isFirstBatch = !offsetPeer && !offsetDate && !offsetId;\n\n  const result = listType === 'saved' ? await callApi('fetchSavedChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    offsetId,\n    offsetPeer,\n    withPinned: isFirstBatch,\n  }) : await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    offsetId,\n    offsetPeer,\n    archived: listType === 'archived',\n    withPinned: isFirstBatch,\n    lastLocalServiceMessageId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  global = getGlobal();\n  lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  const newChats = buildCollectionByKey(result.chats, 'id');\n\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, newChats);\n  if (isFirstBatch) {\n    global = replaceChatListIds(global, listType, chatIds);\n    global = replaceUserStatuses(global, result.userStatusesById);\n  } else {\n    global = updateChatListIds(global, listType, chatIds);\n    global = addUserStatuses(global, result.userStatusesById);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n  global = replaceMessages(global, result.messages);\n  global = updateChatsLastMessageId(global, result.lastMessageByChatId, listType);\n\n  if (!shouldIgnorePagination) {\n    global = replaceChatListLoadingParameters(\n      global, listType, result.nextOffsetId, result.nextOffsetPeerId, result.nextOffsetDate,\n    );\n  }\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  if ((chatIds.length === 0 || chatIds.length === result.totalChatCount) && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    chats, userStatusesById, fullInfo, groupCall, membersCount, isForumAsMessages,\n  } = result;\n\n  global = getGlobal();\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState', 'isLoaded']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  if (membersCount !== undefined) {\n    global = updateChat(global, chat.id, { membersCount });\n  }\n  if (chat.isForum) {\n    global = updateChat(global, chat.id, { isForumAsMessages });\n  }\n  global = replaceChatFullInfo(global, chat.id, fullInfo);\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  const localSet = stickerSet && selectStickerSet(global, stickerSet);\n  if (stickerSet && !localSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n    });\n  }\n\n  const emojiSet = fullInfo.emojiSet;\n  const localEmojiSet = emojiSet && selectStickerSet(global, emojiSet);\n  if (emojiSet && !localEmojiSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: emojiSet.id,\n        accessHash: emojiSet.accessHash,\n      },\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function checkWebAppExists<T extends GlobalState>(\n  global: T, botName: string, appName: string,\n) {\n  if (!botName || !appName) return false;\n  global = getGlobal();\n  const chatByUsername = await fetchChatByUsername(global, botName);\n  global = getGlobal();\n  const bot = chatByUsername && selectUser(global, chatByUsername.id);\n  const botApp = bot && await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  return Boolean(botApp);\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n  setGlobal(global);\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  params: {\n    username: string;\n    threadId?: ThreadId;\n    channelPostId?: number;\n    startParam?: string;\n    startAttach?: string;\n    attach?: string;\n    text?: string;\n  },\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    username, threadId, channelPostId, startParam, startAttach, attach, text,\n  } = params;\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach !== undefined && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat?.id || bot.id,\n      startParam: startAttach,\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openThread({ chatId: chat.id, threadId: threadId ?? MAIN_THREAD_ID, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n\n  if (text) {\n    actions.openChatWithDraft({ chatId: chat.id, text: { text }, tabId });\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.loadFullChat({ chatId: newChat.id });\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { ApiGroupCall } from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, CallSound, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nfunction requestGroupCallParticipants(\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  return callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await requestGroupCallParticipants(groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: {\n      key: 'LinkCopied',\n    },\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.oldTranslate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: \"Sorry, your browser doesn't support group calls\",\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void requestGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.oldTranslate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { ApiGroupCall } from '../../api/types';\nimport type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\n\nimport { omit } from '../../util/iteratees';\nimport { selectChat } from '../selectors';\nimport { selectGroupCall } from '../selectors/calls';\nimport { updateChatFullInfo } from './chats';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChatFullInfo(global, groupCall.chatId, {\n        groupCallId: undefined,\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["CHATLIST_LIMIT_ERROR_LIST","Set","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","abortChatRequests","chatId","threadId","callApi","abortChatRequestsForCurrentChat","global","newChatId","newThreadId","_len","arguments","length","_ref2","Array","_key","tabId","getCurrentTabId","currentMessageList","selectCurrentMessageList","currentChatId","currentThreadId","isChatOpened","isThreadOpened","Object","values","byTabId","reduce","_ref3","_ref4","accHasChatOpened","accHasThreadOpened","id","otherTabId","otherMessageList","isSameChat","undefined","async","loadChats","listType","isFullDraftSync","shouldIgnorePagination","getGlobal","lastLocalServiceMessageId","selectLastServiceNotification","params","selectChatListLoadingParameters","offsetPeer","nextOffsetPeerId","selectPeer","offsetDate","nextOffsetDate","offsetId","nextOffsetId","isFirstBatch","result","limit","CHAT_LIST_LOAD_SLICE","withPinned","archived","chatIds","newChats","buildCollectionByKey","chats","updateUsers","users","updateChats","replaceChatListIds","replaceUserStatuses","userStatusesById","updateChatListIds","addUserStatuses","updateChatListSecondaryInfo","replaceMessages","messages","updateChatsLastMessageId","lastMessageByChatId","replaceChatListLoadingParameters","keys","draftsById","forEach","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","totalChatCount","isFullyLoaded","setGlobal","loadFullChat","actions","chat","fullInfo","groupCall","membersCount","isForumAsMessages","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","isForum","replaceChatFullInfo","stickerSet","localSet","selectStickerSet","loadStickers","stickerSetInfo","accessHash","emojiSet","localEmojiSet","fetchChatByUsername","username","localChat","selectChatByUsername","isMin","user","updateUser","getAttachBotOrNotify","_len3","_ref10","_key3","selectUser","isUserBot","bot","showNotification","message","langProvider","openAttachMenuFromLink","attach","startAttach","_len5","_ref12","_key5","callAttachBot","startParam","ensureIsSuperGroup","_len6","_ref13","_key6","selectChat","isChatBasicGroup","newChat","_len2","_ref9","_key2","error","openLimitReachedModal","showDialog","data","hasErrorKey","migrateChat","openChat","addActionHandler","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","map","_ref","filter","Boolean","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","includes","has","add","loadViewportMessages","payload","type","noForumTopicPanel","shouldReplaceHistory","shouldReplaceLast","processOpenChatOrThread","TMP_CHAT_ID","hasUnreadMark","toggleChatUnread","isChatOnlySummary","selectChatLastMessageId","requestChatUpdate","selectIsChatWithSelf","otherParams","openThread","currentUserId","isComments","focusMessageId","loadingChatId","loadingThreadId","originChannelId","originMessageId","originalChat","getIsSavedDialog","threadInfo","selectThreadInfo","listedIds","Number","updateTabState","loadingThread","selectTabState","loadingMessageId","openPreviousChat","currentGlobal","messageId","addMessages","updateThreadInfo","isCommentsInfo","fromChannelId","fromMessageId","pick","updateThread","firstMessageId","focusMessage","onError","onLoaded","chatFullInfo","linkedChatId","selectSupportChat","whenFirstBatchDone","isCallbackFired","DEBUG","console","connectionState","authState","force","withPhotos","loadChat","loadMoreProfilePhotos","peerId","shouldInvalidateCache","SERVICE_NOTIFICATIONS_USER_ID","lastLocalMessage","isSavedDialog","updateChatLastMessageId","removeChatFromChatLists","_ref5","tabChatId","muteUntil","isMuted","topicId","updateTopic","title","about","photo","memberIds","createdChannel","missingInvitedUsers","chatCreation","progress","ChatCreationProgress","InProgress","channel","missingUsers","Error","channelId","Complete","updateMissingInvitedUsers","userId","leaveChat","chatMessages","selectChatMessages","localMessageIds","isLocalMessageId","deleteChatMessages","createdChat","err","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","selectIsChatPinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","SAVED_FOLDER_ID","saved","chatFolders","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","concat","emoticon","orderedIds","byId","maxId","Math","max","recommendedId","description","newFolder","newId","apiUpdate","requestNextSettingsScreen","foldersAction","_ref6","folderIds","unreadCount","topic","selectTopic","lastTopicMessageId","lastMessageId","lastReadInboxMessageId","hash","addUsers","addChats","invite","subscriptionFormId","starsPayment","inputInvoice","subscriptionInfo","status","chatInviteModal","inviteInfo","phoneNumber","text","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","openChatWithDraft","url","openChatByPhoneNumber","checkChatInvite","openStickerSet","joinVoiceChatByLink","openInvoice","processAttachBotParameters","checkChatlistInvite","openChatByUsername","openChatByUsernameAction","openStoryViewerByUsername","processBoostParameters","checkGiftCode","isDeepLink","processDeepLink","match","RE_TG_LINK","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","adaptedPathname","part1","part2","part3","part","decodeURI","fromEntries","searchParams","hasStartAttach","hasOwnProperty","hasStartApp","choose","parseChooseParameter","storyId","hasBoost","substr","startattach","shortName","formatShareText","slug","chatOrChannelPostId","commentId","comment","isWebApp","botName","appName","chatByUsername","botApp","checkWebAppExists","shouldTryOpenChat","isInteger","inviteHash","voicechat","livestream","c","usernameOrId","isPrivate","toChannelId","substring","startapp","start","startApp","originalParts","openUrl","shouldSkipModal","ignoreDeepLinks","isChatChannel","isChatSuperGroup","openBoostModal","selectCurrentChat","webAppName","usernames","theme","extractCurrentThemeParams","hasMainMiniApp","requestMainWebView","botId","_len4","_ref11","_key4","channelPostId","currentChat","isCurrentChat","startBot","param","usernameChat","requestAppWebView","isEnabled","updateChatFullInfo","isPreHistoryHidden","bannedRights","updatedFullInfo","selectChatFullInfo","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","chatAfterUpdate","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","isDeleted","avatarPhotoId","deletePeerPhoto","areProfilesEnabled","areSignaturesEnabled","groups","addedById","group","forDiscussionIds","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","Loading","Closed","isProtected","enabledReactions","reactionsLimit","settings","toggleStoryRibbon","isShown","isArchived","forumPanelChatId","isFromSideMenu","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","topicsInfo","selectTopicsInfo","listedTopicIds","totalCount","offsetTopic","acc","el","accTopic","offsetTopicId","date","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","updateTopics","count","topics","updateListedTopicIds","entries","_ref7","readInboxMessageIdByTopicId","_ref8","shouldCloseChatOnError","openForumPanel","closeForumPanel","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","selectTopics","chatlistModal","peerIds","peers","notJoinedCount","peer","isNotJoined","folderTitle","invites","shareFolderScreen","screen","SettingsScreens","Folders","pop","isConfirmedForChatlist","isChatList","hasMyInvites","suggestions","removal","suggestedPeerIds","deleteFolderDialogModal","detectedLanguage","updatePeerFullInfo","isTranslationDisabled","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","similarChannels","chatsById","addSimilarChannels","toggleSimilarChannels","chatLink","collectible","inputCollectible","phone","collectibleInfoModal","copyTextToClipboard","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","requestGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","key","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","getTracks","track","stop","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}