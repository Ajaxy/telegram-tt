{"version":3,"file":"9451.dea3fe10aa82161f4741.js","mappings":"qNAmBA,MACMA,EAAuC,CAAC,EAAG,IAC3CC,EAAwC,CAAC,EAAG,IAC5CC,EAAsC,CAAC,GAAI,GAoCjD,GAAeC,EAAAA,EAAAA,KAlCsBC,EAAGC,oBAAmBC,YACzD,MAAOC,EAAqBC,IAAyBC,EAAAA,EAAAA,IAAQ,IACtDC,EAAaC,IAAiBF,EAAAA,EAAAA,IAAQ,IACvC,SAAEG,IAAaC,EAAAA,EAAAA,MAEfC,EAAaF,EAAWG,EAAAA,IAA2BC,EAAAA,KAEzDC,EAAAA,EAAAA,GAAWN,EAZkB,KAa7B,MAAMO,GAAwBC,EAAAA,EAAAA,IAAYX,EAAuB,CAACA,IAElE,OACEY,EAAAA,EAAAA,IAAA,OAAKC,GAAG,SAASC,UAAWhB,EAAQ,MAAQ,GAAGiB,SAAA,EAC3ChB,IACAiB,EAAAA,EAAAA,GAAA,OAAKF,UAAU,oBAEjBE,EAAAA,EAAAA,GAACC,EAAAA,EAAe,CACdC,KAAMpB,EAAQqB,EAAAA,IAAsBb,EACpCQ,UAAWZ,EAAc,SAAW,QACpCkB,OAAQC,EAAAA,EAAeC,YACvBC,YAAa/B,EACbgC,QAAM,EACNC,OAAQf,KAEVM,EAAAA,EAAAA,GAACC,EAAAA,EAAe,CACdC,KAAMpB,EAAQqB,EAAAA,IAAsBb,EACpCQ,UAAWZ,EAAc,QAAU,SACnCkB,OAAQC,EAAAA,EAAeK,WACvBH,YAAa1B,EAAoBJ,EAAsBC,EACvD8B,QAAM,S,g4ECnBP,SAASG,GAAmB,QACjCC,EAAO,YAAEC,EAAW,cAAEC,EAAa,gBAAEC,EAAe,WAAEC,EAAU,iBAAEC,IASlE,OAAIJ,GAAeC,EACV,CACLI,KAAM,SACNL,cACAC,gBACAE,WAAYA,GAIZD,EACK,CACLG,KAAM,aACNC,MAAOJ,EACPC,WAAYA,GAIZJ,EACK,CACLM,KAAM,UACNN,UACAI,cAIAC,EACK,CACLC,KAAM,mBACNN,QAASK,EACTD,mBAJJ,CASF,CAEe,SAASI,EAAoBC,EAAqBC,GAC/D,IAAKA,EAAQ,OAEb,GAAoB,eAAhBA,EAAOJ,KACT,MAAO,CACLC,MAAOG,EAAOH,MAAMG,EAAON,YAC3BO,SAAkC,IAAxBD,EAAOH,MAAMK,QAI3B,GAAoB,WAAhBF,EAAOJ,KAAmB,CAC5B,MAAMO,EAASH,EAAOR,eAAeY,OAAOJ,EAAON,YACnD,OAAIS,EACK,CACLN,MAAOM,QAGX,CACF,CAEA,MAAM,OACJE,EAAM,SAAEC,EAAQ,MAAEC,EAAK,MAAEC,EAAK,UAAEC,IAC9BC,EAAAA,EAAAA,IAAkBV,EAAOV,SAE7B,GAAqB,kBAAjBe,GAAQT,MAA6C,wBAAjBS,GAAQT,KAC9C,MAAO,CACLC,MAAOQ,EAAOE,MACdN,UAAU,GAId,GAAIK,KAAaK,EAAAA,EAAAA,IAAgBL,KAAaM,EAAAA,EAAAA,IAAgBN,IAC5D,MAAO,CACLT,MAAOS,GAIX,MAAMO,GAAUC,EAAAA,EAAAA,KAAyBf,EAAQC,EAAOV,SACxD,GAA6B,SAAzBuB,GAASE,YAAwB,CACnC,MAAQR,MAAOS,EAAcR,MAAOS,EAAcX,SAAUY,GAAoBL,EAC1EM,EAAkBD,KAAoBP,EAAAA,EAAAA,IAAgBO,KAAoBN,EAAAA,EAAAA,IAAgBM,IAE1FrB,EAAQoB,IADQE,EAAkBD,OAAkBE,IACXJ,EAC/C,GAAInB,EACF,MAAO,CACLA,QACAI,UAAU,EAGhB,CAEA,GAAIQ,EAAW,CACb,MAAMY,EAAgBZ,EAAUY,cAAcrB,EAAON,YAAc,GACnE,KAAM,cAAe2B,GAAgB,CACnC,MAAQd,MAAOe,EAAed,MAAOe,GAAkBF,EACvD,MAAO,CACLxB,MAAQyB,GAAiBC,EAE7B,CACF,CAEA,MAAM1B,EAAQW,GAASD,EAEvB,OAAIV,EACK,CACLA,QACAI,SAAUO,GAAOgB,YAHrB,CAQF,C,sEC+DA,SAASC,EAAYC,EAAsDC,GACzE,MAAMC,EAAQtB,SAASuB,cAAc,OACrCD,EAAME,UAAUC,IAAI,SAEpB,MAAMC,EAAM,IAAIC,MAchB,GAbAD,EAAIE,WAAY,EAChBF,EAAIG,cAAgBC,EAAAA,EAEE,iBAAXV,EACTM,EAAIK,IAAMX,EACDA,aAAkBY,iBAC3BN,EAAIK,IAAMX,EAAOa,OAEjBP,EAAIK,IAAMX,EAAOW,IAGnBT,EAAMY,YAAYR,GAEdL,IAAWc,EAAAA,GAAkBC,eAAiBf,IAAWc,EAAAA,GAAkBE,eAAgB,CAC7Ff,EAAME,UAAUC,IAAI,eAChBJ,IAAWc,EAAAA,GAAkBE,gBAC/Bf,EAAME,UAAUC,IAAI,QAEtB,MAAMa,EAActC,SAASuC,cAC3BlB,IAAWc,EAAAA,GAAkBC,cACzB,kCACA,gCAEFE,GACFhB,EAAMY,YAAYI,EAAYE,WAAU,GAE5C,CAEA,OAAOlB,CACT,CA2CA,SAASmB,EAASpB,EAA2BrC,EAAsB0D,GACjE,IAAIC,EACAC,EAEJ,OAAQvB,GACN,KAAKc,EAAAA,GAAkBU,MACvB,KAAKV,EAAAA,GAAkBW,eAErBH,EAAoB,yDAAwDI,EAAAA,EAAAA,IAAiB/D,EAASf,GAAIyE,KAC1GE,EAAgB,cAChB,MAEF,KAAKT,EAAAA,GAAkBa,aACrBL,EAAoB,iBAAiBD,IACrCE,EAAgB,MAChB,MAEF,KAAKT,EAAAA,GAAkBc,YACrBN,EAAoB,iBAAgBI,EAAAA,EAAAA,IAAiB/D,EAASf,GAAIyE,KAClEE,EAAgB,MAChB,MAEF,KAAKT,EAAAA,GAAkBe,aACrBP,EAAoB,iBAAgBI,EAAAA,EAAAA,IAAiB/D,EAASf,GAAIyE,KAClEE,EAAgB,MAChB,MAEF,KAAKT,EAAAA,GAAkBgB,mBACrBR,EAAoB,2DACpBC,EAAgB,gBAChB,MAEF,KAAKT,EAAAA,GAAkBE,eACrBM,EAAoB,gEACpBC,EAAgB,gBAChB,MAEF,KAAKT,EAAAA,GAAkBC,cACrBO,EAAoB,mEACpBC,EAAgB,gBAChB,MAEF,KAAKT,EAAAA,GAAkBiB,cACvB,KAAKjB,EAAAA,GAAkBkB,gBACrBV,EAAoB,6CAA4CI,EAAAA,EAAAA,IAAiB/D,EAASf,GAAIyE,KAC9FE,EAAgB,cAChB,MAEF,KAAKT,EAAAA,GAAkBmB,iBACrBX,EAAoB,6BACpBC,EAA0B,IAAVF,EAAc,4BAA4BA,yBAA0B5B,EACpF,MAEF,KAAKqB,EAAAA,GAAkBoB,iBACrBZ,EAAoB,mEACpBC,EAAgB,GAAGY,EAAAA,mBAAwCA,EAAAA,kCAC3D,MAEF,KAAKrB,EAAAA,GAAkBsB,gBACvB,KAAKtB,EAAAA,GAAkBuB,OACvB,QACEf,EAAoB,6CAA4CI,EAAAA,EAAAA,IAAiB/D,EAASf,GAAIyE,KAC9FE,EAAgB,GAAGY,EAAAA,mBAAwCA,EAAAA,kCAG/D,MAAMG,EAAY3D,SAASuC,cAA2BI,GAChDiB,EAAWhB,EACbe,GAAWE,iBAAsDjB,QAAiB9B,EAEtF,MAAO,CACL6C,YACAG,QAASF,IAAW,GAExB,CAEA,SAASG,EAAWzC,EAAuBD,GACzC,OAAQA,GACN,KAAKc,EAAAA,GAAkBU,MACvB,KAAKV,EAAAA,GAAkBW,eACvB,KAAKX,EAAAA,GAAkBuB,OACvB,KAAKvB,EAAAA,GAAkBsB,gBACvB,KAAKtB,EAAAA,GAAkBmB,iBACvB,KAAKnB,EAAAA,GAAkBa,aACrB1B,EAAME,UAAUC,IAAI,mBACpB,MAEF,KAAKU,EAAAA,GAAkBc,YACvB,KAAKd,EAAAA,GAAkBE,eACvB,KAAKF,EAAAA,GAAkBC,cACvB,KAAKD,EAAAA,GAAkBe,aACpB5B,EAAM0C,WAA2BC,MAAMC,UAAY,QACpD,MAEF,KAAK/B,EAAAA,GAAkBgB,mBACvB,KAAKhB,EAAAA,GAAkBkB,gBACvB,KAAKlB,EAAAA,GAAkBiB,cACrB9B,EAAME,UAAUC,IAAI,UAG1B,C,4FC1XA,MAAM0C,GAASC,EAAAA,EAAAA,KAAa,GACtBC,EAAwBF,EAAO,GA8ErC,SAASG,EAAuBpE,GAE9B,GAAIA,EAAMqE,gCAA6E,mBAApCrE,EAAMsE,0BAEvD,OAAOtE,EAAMsE,0BAA0BC,KAAKvE,EAGhD,CAeO,SAASwE,IACd,GAAI1E,SAAS2E,wBACX,IACE3E,SAAS4E,sBACX,CAAE,MAAOC,GACHC,EAAAA,KAEFC,QAAQC,IAAI,8BAA+BH,EAE/C,CAEJ,C,2DCrHA,MAIMI,EAAQ,IAAIC,I,yCCclB,MAAMC,EAAsBC,EAAAA,GASfC,EAAgBA,EAC3B9F,QACA+F,WACAjE,SACAkE,YAEA,MAAMC,EAAgBF,GAAiC,UAArB/F,GAAOkG,YAA0BlG,EAAMmG,QACnEC,EAAgBL,GAAiC,UAArB/F,GAAOkG,WAAyBlG,EAAMmG,QAClEE,EAAkC,aAArBrG,GAAOkG,UACpBC,EAAgC,UAArBnG,GAAOkG,YAA0BlG,EAAMsG,SAAaD,IAActF,EAAAA,EAAAA,IAAgBf,GAC7FuG,EAA+B,UAArBvG,GAAOkG,WAA0BG,IAAcvF,EAAAA,EAAAA,IAAgBd,GACzE2B,EAA6B,UAArB3B,GAAOkG,WAAyBlG,EAAM2B,MAC9C6E,EAAoB1E,IAAWc,EAAAA,GAAkBc,YACjD+C,EAAe3E,IAAWc,EAAAA,GAAkBe,aAE5C+C,GAAuBC,EAAAA,EAAAA,KAAQ,IAAOC,IAC1C,GAAK5G,EAEL,OAAKiG,IAAiBG,GAAmBQ,EAIrCR,GAAiBQ,GACZC,EAAAA,EAAAA,IAA8B7G,IAGhC8G,EAAAA,EAAAA,IAAa9G,EAAO4G,EAAS,OAAS,YAPpCG,EAAAA,EAAAA,IAAyB/G,KAQjC,CAACoG,EAAeH,EAAejG,IAE5BgH,GAAmBC,EAAAA,EAAAA,GACvBjH,IAEIwG,GAAqBC,GAAgBJ,KACtCS,EAAAA,EAAAA,IAAa9G,EAAO,kBACvBuB,EACA2F,EAAAA,GAAeC,QACfnB,GAEIoB,EAAmBV,IACnBW,GAAiBJ,EAAAA,EAAAA,GACrBG,OACA7F,EACA2F,EAAAA,GAAeC,QACfnB,IAGAsB,UAAWC,EAAgB,aAC3BC,IACEC,EAAAA,EAAAA,GACFf,GAAqB,QACrBnF,EACAvB,IAAS0H,EAAAA,EAAAA,IAAe1H,EAAO,QAC/BgG,GAGI2B,EAAe3H,GAAS,YAAaA,EAAQA,EAAM4H,aAAUrG,EACnE,IAAIsG,GAAkB1B,IAAYwB,GAAgBJ,IAAsBF,GAAkBL,EAC1F,MAAMc,EChFO,SAAqBC,GAClC,MAAMC,GAAaC,EAAAA,EAAAA,MAEnB,IAAIC,GAAY,GAEhBC,EAAAA,EAAAA,IAAc,KAMZ,GAJAD,GAAY,EAEZF,EAAWI,aAAU7G,GAEhBwG,EACH,OAGF,MAAM5F,EAAM,IAAIC,MAEhB,GADAD,EAAIK,IAAMuF,GACL5F,EAAIkG,MACP,OAGF,MAAMC,GAASC,EAAAA,EAAAA,IAAYpG,IAC3BqG,EAAAA,EAAAA,GAASF,EAAOG,WAAW,MAAO,EAAG,EAAGH,EAAOD,MAAOC,EAAOI,OAzBlD,EACI,GA0BfV,EAAWI,QAAUE,EAAOK,cAC3B,CAACZ,IAIJ,MAAMa,EF3BO,SAAiBb,EAAkBc,GAAa,EAAO7C,GACpE,MAAMgC,GAAaC,EAAAA,EAAAA,IAA2BF,EAAUrC,EAAMoD,IAAIf,QAAWxG,GACvEwH,GAAad,EAAAA,EAAAA,MACbe,GAAcC,EAAAA,EAAAA,KAqCpB,OAnCIF,EAAWX,SAAWS,IACxBK,aAAaH,EAAWX,SACxBW,EAAWX,aAAU7G,IAGvB4H,EAAAA,EAAAA,KAAU,KACR,IAAKpB,GAAWC,EAAWI,SAAWS,EACpC,OAGF,MAAM1G,EAAM,IAAIC,MAEhBD,EAAIiH,OAAS,KACX,MAAMd,GAASC,EAAAA,EAAAA,IAAYpG,IAC3BqG,EAAAA,EAAAA,GAASF,EAAOG,WAAW,MAAO,EAAG,EAAGH,EAAOD,MAAOC,EAAOI,OAzBpD,EACI,GAyBb,MAAMW,EAAiBf,EAAOK,YAE9BX,EAAWI,QAAUiB,EACrBL,IAEItD,EAAM3G,MA7BO,KA8Bf2G,EAAM4D,QAER5D,EAAM6D,IAAIxB,EAASsB,IAGjBrD,EACF+C,EAAWX,QAAUoB,OAAOC,YAAW,KACrCtH,EAAIK,IAAMuF,IACT/B,GAEH7D,EAAIK,IAAMuF,IAEX,CAACA,EAAS/B,EAAOgD,EAAaH,IAE1Bb,EAAWI,OACpB,CEduBsB,CAAQ3B,QAAWxG,EAAWoI,QAAQ3B,EAAWI,UAEtE,OAAOJ,EAAWI,UAAaF,GAAaU,GAAiBb,QAAWxG,CAC1E,CDgDuBqI,EAAa/B,GAAiB7H,IAAS6J,EAAAA,EAAAA,IAAiB7J,IACxE6H,GAAiB/F,IAAWc,EAAAA,GAAkBe,eACjDkE,EAAgBC,GAEd1B,GAAiBiB,IACnBQ,EAAgBR,GAElB,MAAMyC,EAAWnC,GAAgBJ,IAC7BnB,GAAkBD,OAAmE5E,EAAvD8F,GAAkBL,GAAoBa,GAGlEkC,EAAY/J,IAASgK,EAAAA,EAAAA,IAAiBhK,GAEtCiK,EAAUN,QAAQhC,GAElBuC,GAAavD,EAAAA,EAAAA,KAAQ,IACrBZ,EACKK,EAAgB+D,EAAAA,GAA+BtE,EAAAA,GAGpDQ,EACKrG,EAAM+J,UAGXxD,GACK6D,EAAAA,EAAAA,IAAuBpK,GAG5BmG,GACKkE,EAAAA,EAAAA,IAAmBrK,GAGrB4F,GACN,CAACG,EAAUM,EAAYE,EAASJ,EAASC,EAAepG,IAE3D,MAAO,CACL8G,aAAcJ,EACd1G,QACAmG,UACAI,UACA5E,QACA0E,aACAwB,gBACAiC,WACAI,aACA1D,oBACAJ,gBACA6D,UACAzC,eACAuC,c,uEEpHJ,MA6EA,IAAevM,EAAAA,EAAAA,KA7EyB8M,EACtCC,SACAC,SACA9J,QACA+J,UACAC,0BAEA,MAAM,mBAAEC,IAAuBC,EAAAA,EAAAA,OAExBC,EAAgBC,IAAqBC,EAAAA,EAAAA,IAA0B,SAC/DC,EAAaC,IAAkBF,EAAAA,EAAAA,IAAS,IAEzCG,GAAeC,EAAAA,EAAAA,IAAgB,KACnCR,EAAmB,CACjBS,OAAQZ,EAAQ9J,QAAO2K,OAAQR,EAAgBG,gBAEjDP,OAGIa,GAAqBH,EAAAA,EAAAA,IAAiBI,IAC1CT,EAAkBS,MAGdC,GAA0BL,EAAAA,EAAAA,IAAiBM,IAC/CR,EAAeQ,EAAEC,OAAOH,UAGpBI,GAAOC,EAAAA,EAAAA,KAEPC,GAA8DlF,EAAAA,EAAAA,KAAQ,IAAM,CAChF,CAAE4E,MAAO,OAAQO,MAAOH,EAAK,2BAC7B,CAAEJ,MAAO,WAAYO,MAAOH,EAAK,+BACjC,CAAEJ,MAAO,cAAeO,MAAOH,EAAK,kCACpC,CAAEJ,MAAO,aAAcO,MAAOH,EAAK,kCACnC,CAAEJ,MAAO,YAAaO,MAAOH,EAAK,+BAClC,CAAEJ,MAAO,eAAgBO,MAAO,iBAChC,CAAEP,MAAO,kBAAmBO,MAAO,oBACnC,CAAEP,MAAO,QAASO,MAAOH,EAAK,8BAC7B,CAACA,IAEJ,IAAKnB,IAAW9J,EACd,OAGF,MAAMqL,EAAQJ,EAAK,qBAEnB,OACElN,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJzB,OAAQA,EACRE,QAASA,EACTwB,QAAS1B,EAASW,OAAe3J,EACjCmJ,oBAAqBA,EACrB/L,UAAU,SACVoN,MAAOA,EAAMnN,SAAA,EAEbC,EAAAA,GAAAA,GAACqN,GAAAA,EAAU,CACTvN,UAAU,wBACVwN,KAAK,iBACLC,QAASP,EACTQ,SAAUf,EACVgB,SAAUzB,KAEZhM,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRT,MAAOH,EAAK,iCACZJ,MAAOP,EACPqB,SAAUb,KAEZ/M,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACC,MAAM,SAAS9N,UAAU,wBAAwB+N,QAAM,EAACC,QAASzB,EAAatM,SACnF+M,EAAK,wBAER9M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC7N,UAAU,wBAAwB+N,QAAM,EAACC,QAASlC,EAAQ7L,SAAE+M,EAAK,qB,4BC1FjF,MAAOiB,GAAeC,KAAiBhI,EAAAA,EAAAA,IAAa,GAErC,SAASiI,KAKtB,OAJAC,EAAAA,EAAAA,KAAkB,KAChBF,GAAc,MAGT,CAACD,GAAeC,GACzB,CCSA,MA6CA,IAAerP,EAAAA,EAAAA,KA7C+BwP,EAC5CzC,SACA7J,QACAuM,YACAxC,UACAyC,gBAEA,MAAM,mBACJC,EAAkB,gBAClBC,IACExC,EAAAA,EAAAA,MAEEyC,GAAoB7O,EAAAA,EAAAA,KAAY,KACpC0O,OACII,EAAAA,EAAAA,IAASL,GACXE,EAAmB,CAAEzM,UAErB0M,EAAgB,CACd1M,QACA0K,OAAQ6B,IAGZxC,MACC,CAACyC,EAAWD,EAAWxC,EAAS0C,EAAoBzM,EAAO0M,IAExDzB,GAAOC,EAAAA,EAAAA,KAEb,OACE/M,EAAAA,GAAAA,GAACmN,EAAAA,EAAK,CACJzB,OAAQA,EACRE,QAASA,EACTwB,QAASoB,EACT1O,UAAU,+BACVoN,MAAOJ,EAAK,cAAc/M,UAE1BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,sBAAqBC,SAAA,EAClCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACC,MAAM,SAAS9N,UAAU,wBAAwB+N,QAAM,EAACC,QAASU,EAAkBzO,SACxF+M,EAAK,0BAER9M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC7N,UAAU,wBAAwB+N,QAAM,EAACC,QAASlC,EAAQ7L,SAAE+M,EAAK,oB,wCCQjF,MAmUA,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GACCsN,OAAMC,qBAEN,MAAMC,GAAWC,EAAAA,EAAAA,KAAezN,IAC1B,OAAE4B,GAAW4L,EAASE,YAEtBnO,EAAyB,YAAf+N,GAAMzN,KAAqByN,EAAK/N,aAAU8B,EACpD7B,EAA6B,WAAf8N,GAAMzN,KAAoByN,EAAK9N,iBAAc6B,EAC3DsM,EAA6B,WAAfL,GAAMzN,MAAqByN,EAAK7N,cAAcY,OAAOiN,EAAK3N,YAExEiO,GAAOC,EAAAA,EAAAA,KAAkB7N,GACzB8N,GAAqBC,EAAAA,EAAAA,KAAyB/N,IAC9C,SAAEgO,IAAaD,EAAAA,EAAAA,KAAyB/N,IAAW,CAAC,EACpDiO,GAAcC,EAAAA,EAAAA,KAAyBlO,EAAQT,GAC/C4O,GAAkBC,EAAAA,EAAAA,KAAsBpO,GACxCqO,EAAkB9O,IAAW+O,EAAAA,EAAAA,KAAsBtO,EAAQT,GAAS2L,SAClEqD,UAAWC,GAAsBR,GACpCzO,IAAWkP,EAAAA,EAAAA,KAAgCzO,EAAQT,EAASyO,IAAc,CAAC,EAC1EU,EAAkBf,GAAgBA,EAAYnP,KAAOgB,GAAamP,cAClEC,EAAkBrB,GAAkB9D,QAAQkE,GAC5CY,EAAYC,GAAoBI,EAChCC,EAAYtB,GAAkB9D,QAAQkE,KAAiBe,EACvDI,EAAkBhB,GAAoBjO,KAG5C,MAAO,CACLsO,kBACAF,cACAL,OACAS,kBACAE,YACAM,YACAC,kBACAlN,SACAmN,cAXoBhP,EAAoBC,EAAQsN,MAxBlCD,EAnUkC2B,EACpD1B,OACAlG,YACAnB,UACA2H,OACAS,kBACAJ,cACAgB,kBACAV,YACAM,YACAC,kBACAX,kBACAvM,SACAmN,gBACAG,eAAgBC,EAChBC,qBACAC,iBACAC,gBAEA,MAAOC,EAAmBC,EAAiBC,IAAoB7R,EAAAA,EAAAA,IAAQ,IAChE8O,EAAeC,GAAiBC,MACjC,SAAE7O,IAAaC,EAAAA,EAAAA,OAEf,cACJ0R,EAAa,oBACbC,EAAmB,mBACnBC,EAAkB,gBAClBC,EAAe,gBACfC,EAAe,uBACfC,IACErF,EAAAA,EAAAA,MAEEsF,EAA2B,YAAf1C,GAAMzN,MAElB,MAAEC,GAAUiP,GAAiB,CAAC,EAC9BkB,EAAWnQ,IAASoQ,EAAAA,EAAAA,IAAiBpQ,GACrCqQ,EAAgBrQ,IAASsQ,EAAAA,EAAAA,IAAiBjC,EAAiBrO,IAEzDwH,aAAc+I,IAAqB9I,EAAAA,EAAAA,GACzCzH,IAAS8G,EAAAA,EAAAA,IAAa9G,EAAO,aAC5BqQ,EACDrQ,IAAS0H,EAAAA,EAAAA,IAAe1H,EAAO,aAG3BwQ,GAAsBrF,EAAAA,EAAAA,IAAgB,KAC1C,GAAKnL,EAEL,GAAIqQ,EACFR,EAAoB,CAAE7P,cACjB,CACL,MAAMP,EAAyB,YAAf+N,GAAMzN,KAAqByN,EAAK/N,aAAU8B,EAC1DqO,EAAc,CAAE5P,QAAOyQ,cAAehR,GACxC,KAGIiR,GAAgBvF,EAAAA,EAAAA,IAAgB,KACpC,MAAMwF,EAAa/D,IAEnBC,GADe8D,EAAa,EAAIA,EAAa,GACtB,MAGnBC,GAAezF,EAAAA,EAAAA,IAAgB,KACnC,MAAMwF,EAAa/D,IAEnBC,GADe8D,EAAa,EAAIA,EAAa,GACtB,MAGnBE,GAAe1F,EAAAA,EAAAA,IAAgB,KACnC,GAAmB,WAAfqC,GAAMzN,KAAmB,OAC7B,MAAM,YAAEL,EAAW,cAAEC,EAAa,WAAEE,GAAe2N,EAC7CK,EAAclO,GAAeY,OAAOV,IACtCyN,EAAAA,EAAAA,IAAS5N,EAAYhB,IACvBoR,EAAmB,CAAEpP,MAAOmN,IAE5BkC,EAAgB,CAAE3E,OAAQ1L,EAAYhB,GAAIgC,MAAOmN,IAGnDmC,EAAgB,CACdlO,OAAQA,EACRsJ,OAAQ1L,EAAYhB,GACpBmB,WAAY,EACZiR,cAAc,GACb,CACDC,uBAAuB,OAIrBpF,GAAOC,EAAAA,EAAAA,KAEPoF,GAA8DrK,EAAAA,EAAAA,KAAQ,IACnE,EAAGsK,YAAW1G,aACnB1L,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLnS,KAAK,UACL0N,MAAM,cACN9N,UAAW4L,EAAS,cAAWhJ,EAC/BoL,QAASsE,EACTE,UAAU,eAAcvS,UAExBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,YAGd,IAEH,SAASkF,IACP,MAAuB,WAAf7D,GAAMzN,MACZlB,EAAAA,GAAAA,GAACmO,GAAuB,CACtBzC,OAAQkF,EACRhF,QAASkF,EACTzC,UAAWqC,EACXtC,UAAWO,EAAK9N,YAAYhB,GAC5BgC,MAAO8M,EAAK7N,cAAcY,OAAOiN,EAAK3N,mBAEtC0B,CACN,CAmCA,MAAM+P,GAAyBnG,EAAAA,EAAAA,IAAgB,KAC1B,YAAfqC,GAAMzN,MAAsB+N,EAC9BmC,EAAuB,CACrB7E,OAAQ0C,GAAMpP,GACd6S,WAAY,CAAC/D,EAAK/N,QAAQf,IAC1B8S,WAAgC,cAApBxC,EACZ9B,UAAWqC,IAGbG,OAIJ,GAAIzR,EAAU,CACZ,MAAMwT,EAA6B,GAkDnC,GAjDIvB,GAAa1C,EAAK/N,QAAQiS,sBAAwBlE,EAAK/N,QAAQkS,QAAQnR,SAAW+N,GACpFkD,EAAUG,KAAK,CACbC,KAAM,UACNlF,QAAS6C,EACT5Q,SAAU+M,EAAK,aAGdwC,IACChI,EACFsL,EAAUG,KAAK,CACbC,KAAMxB,EAAgB,QAAU,WAChC1D,QAAS6D,EACT5R,SAAUyR,EAAgB,GAAGyB,KAAKZ,MAAyB,IAAnBX,qBAA4C,aAGtFkB,EAAUG,KAAK,CACbC,KAAM,WACNE,KAAMzK,EACN0K,SAAU7B,EACVvR,SAAU+M,EAAK,wBAKjBwD,GACFsC,EAAUG,KAAK,CACbC,KAAM,OACNlF,QAAS0C,EACTzQ,SAAU+M,EAAK,uBAIfoD,GACF0C,EAAUG,KAAK,CACbC,KAAM,aACNlF,QAASkE,EACTjS,SAAU+M,EAAK,+BAIf8C,GACFgD,EAAUG,KAAK,CACbC,KAAM,SACNlF,QAAS2E,EACT1S,SAAU+M,EAAK,UACfsG,aAAa,IAIQ,IAArBR,EAAUpR,OACZ,OAGF,OACE5B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,4BAA2BC,SAAA,EACxCC,EAAAA,GAAAA,GAACqT,GAAAA,EAAY,CACXC,QAASnB,EACToB,UAAU,QAAOxT,SAEhB6S,EAAUY,KAAI,EACbR,OAAMlF,UAASoF,OAAMC,WAAUpT,WAAUqT,kBAEzCpT,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAEPT,KAAMA,EACNE,KAAMA,EACNC,SAAUA,EACVrF,QAASA,EACTsF,YAAaA,EAAYrT,SAExBA,GAPIiT,OAWVxB,IAAiBxR,EAAAA,GAAAA,GAAC0T,GAAAA,EAAe,CAACC,SAAUjC,EAAkBxR,KAAK,IAAI0T,SAAO,IAC9EhE,GAAa4C,MAGpB,CAEA,OACE5S,EAAAA,GAAAA,IAAA,OAAKE,UAAU,qBAAoBC,SAAA,CAChCsR,GAAa1C,EAAK/N,QAAQiS,sBAAwBnD,IACjD1P,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLnS,KAAK,UACL0N,MAAM,oBACN0E,UAAWxF,EAAK,WAChBgB,QAAS6C,EAAU5Q,UAEnBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,cA1InB,WACE,IAAIgC,GAA8B,eAAfX,GAAMzN,KAIzB,MAAsB,qBAAfyN,GAAMzN,OAAgCoG,GAC3CtH,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLnS,KAAK,UACL0N,MAAM,oBACN0E,UAAWxF,EAAK,qBAChBgB,QAAS6D,EAAoB5R,SAE5ByR,GACCxR,EAAAA,GAAAA,GAAC0T,GAAAA,EAAe,CAACC,SAAUjC,EAAkBxR,KAAK,IAAI4N,QAAS6D,KAE/D3R,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,gBAIftN,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLuF,KAAMzK,EACN0K,SAAU7B,EACVe,OAAK,EACLnS,KAAK,UACL0N,MAAM,oBACN0E,UAAWxF,EAAK,qBAAqB/M,UAErCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,eAGjB,CA8GKuG,IACD7T,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLnS,KAAK,UACL0N,MAAM,oBACN0E,UAAWxF,EAAK,gBAChBgB,QAAS+D,EAAc9R,UAEvBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,gBAEbtN,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLnS,KAAK,UACL0N,MAAM,oBACN0E,UAAWxF,EAAK,eAChBgB,QAASiE,EAAahS,UAEtBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,cAEZgD,IACCtQ,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLnS,KAAK,UACL0N,MAAM,oBACN0E,UAAWxF,EAAKxF,EAAU,8BAAgC,+BAC1DwG,QAAS0C,EAASzQ,UAElBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,WAGd4C,IACClQ,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLnS,KAAK,UACL0N,MAAM,oBACN0E,UAAWxF,EAAK,6BAChBgB,QAASkE,EAAajS,UAEtBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,iBAGdsC,IACC5P,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLnS,KAAK,UACL0N,MAAM,oBACN0E,UAAWxF,EAAK,UAChBgB,QAAS2E,EAAuB1S,UAEhCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,cAGftN,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLnS,KAAK,UACL0N,MAAM,oBACN0E,UAAWxF,EAAK,SAChBgB,QAAS2C,EAAmB1Q,UAE5BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,YAEZsC,GAAa4C,W,gHC3Xb,SAASsB,GAAgBC,GAC9B,MAAMC,GAAM5K,EAAAA,EAAAA,IAAU2K,KAQtB,OANAE,EAAAA,GAAAA,IAAc,IACLF,EAASG,WAAU,KACxBF,EAAIzK,QAAUwK,SAIXC,CACT,C,wCCbA,MAAOG,GAAoBC,KAAsBpO,EAAAA,EAAAA,KAAa,IACvDqO,GAAaC,KAAetO,EAAAA,EAAAA,KAAa,GAEjC,SAASuO,KAOtB,MAAO,EANYC,EAAAA,GAAAA,IACjB,IAAML,OAAyBE,MAE/B,CAACF,GAAoBE,KAGHD,GAAoBE,GAC1C,C,4BCXO,MAAOG,GAAgBC,KAAkB1O,EAAAA,EAAAA,IAAa,GAE9C,SAAS2O,KAKtB,OAJAzG,EAAAA,EAAAA,KAAkB,KAChBwG,GAAe,MAGV,CAACD,GAAgBC,GAC1B,C,qCCQA,MAmFA,GAvEwCE,EACtCC,OAAO,GAAIC,aAAYC,aAAYjH,UAASkH,uBAAsB1F,cAAa2F,2BAE/E,MAAOC,EAAaC,IAAkBjJ,EAAAA,EAAAA,KAAS,IACzC,SAAE9M,IAAaC,EAAAA,EAAAA,OACd+V,GAAgBb,KACjBc,GAAWC,EAAAA,GAAAA,IAAgB,MAAOC,EAAAA,KAAgBH,KAAyB,CAACA,KAElF9K,EAAAA,EAAAA,KAAU,KACR,MAAMkL,EAAgB5T,SAASuC,cAAc,kCAEvCsR,EAAmBA,KACvB,MAAM5L,EAAS2L,EAAgBA,EAAcE,aAAe,EAE5DP,EAAetL,EAAe,EAAN8L,EAAAA,IAI1BF,IAEA,MAAMG,GAAeC,EAAAA,GAAAA,IAASJ,EAhCP,KAgC6C,GAIpE,OAFA9K,OAAOmL,iBAAiB,SAAUF,GAAc,GAEzC,KACLjL,OAAOoL,oBAAoB,SAAUH,GAAc,MAEpD,IAQH,MAAMI,GAAgB1J,EAAAA,EAAAA,IAAgB,KACpC0I,OAGIiB,GAAaC,EAAAA,GAAAA,GACjB,oBACAnB,GAAc,eACdM,GAAY,YACZ/F,GAAe,eACf2F,GAAwB,UAG1B,OACErV,EAAAA,GAAAA,IAAA,OAAKE,UAAWmW,EAAYnI,QAnB9B,SAAmBlB,GACbiI,GACFjI,EAAEuJ,iBAEN,EAeiDpW,SAAA,CAC5C+K,QAAQ+J,KACP7U,EAAAA,GAAAA,GAAA,OAAKF,UAAU,8BAA8BgO,QAAU1O,OAAqBsD,EAAVoL,EAAoB/N,UACpFC,EAAAA,GAAAA,GAAA,KAAGF,UAAW,6CAA4CoV,EAAc,YAAc,IAAMkB,IAAI,OAAMrW,SACnG8U,MAIN/J,QAAQgK,KACP9U,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,WAAWoW,EAAAA,GAAAA,GAAe,8BAA+B,uBACzDhW,KAAK,UACL0N,MAAM,UACNyI,eAAa,EACbvI,QAASkI,EAAcjW,SAEtB+U,Q,gEC5FJ,MAAOwB,GAAmBC,KAAqBvQ,EAAAA,EAAAA,KAAa,GAEpD,SAASwQ,KAKtB,OAJAtI,EAAAA,EAAAA,KAAkB,KAChBqI,IAAkB,MAGb,CAACD,GAAmBC,GAC7B,C,2ECLA,MAAME,GAAYC,EAAAA,IAAcC,EAAAA,GAC1BC,GAAsBF,EAAAA,IAAcC,EAAAA,GAAU,GAAM,IACpDE,GAAaJ,GAAY,GAAK,GAC9BK,GAAmB,IAEnBC,IAAcC,EAAAA,GAAAA,MAEpB,IAAIC,GAEG,MAAMC,GACXC,OAAS,IAAIrQ,IAEbsQ,YAAc,EAIdC,WAAAA,CAAYC,EAAa7N,GACvB8N,KAAK9N,OAASA,EACdsN,GAAYS,SAAQ,EAAGC,aAAanT,KAC7BmT,EAAUC,QAAQ,CACrBpK,KAAM,qBACNqK,KAAM,CACJL,EACAT,GACAvS,EACAsT,GAAAA,GACAL,KAAKM,QAAQxR,KAAKkR,WAI1B,CAEQM,OAAAA,CAAQC,EAAcC,GAC5BR,KAAKJ,OAAOzM,IAAIoN,EAAMC,GAClBD,IAASP,KAAKH,aAChBG,KAAKS,OAAOF,EAEhB,CAEQG,UAAAA,GACNV,KAAKJ,OAAOK,SAASO,IACnBA,EAAMG,WAERX,KAAKJ,OAAO1M,OACd,CAEAuN,MAAAA,CAAOF,GACLP,KAAKH,YAAcU,EACnB,MAAMC,EAAQR,KAAKJ,OAAOlN,IAAI6N,GAC9B,QAAKC,KACLI,EAAAA,EAAAA,KAAgB,KACdZ,KAAK9N,OAAOD,MAAQuO,EAAMvO,MAC1B+N,KAAK9N,OAAOI,OAASkO,EAAMlO,OACf0N,KAAK9N,OAAOG,WAAW,MAC/BwO,UAAUL,EAAO,EAAG,EAAGR,KAAK9N,OAAOD,MAAO+N,KAAK9N,OAAOI,YAErD,EACT,CAEAwO,OAAAA,GACEd,KAAKU,aACLlB,GAAYS,SAAQ,EAAGC,gBAChBA,EAAUC,QAAQ,CACrBpK,KAAM,wBACNqK,KAAM,OAGZ,EAkBFZ,GAAYS,SAAQ,EAAGc,aACrBA,EAAOxC,iBAAiB,WAAWyC,UACjC,MAAM,KAAErX,EAAI,UAAEsX,EAAS,OAAElX,GAAWsL,EAAE6L,KAMtC,GAAa,gBAATvX,EACF,OAGF,MAAMwX,QAAeC,EAAAA,GAAAA,IAAQ,gBAAiB,CAAEC,YAAavQ,EAAAA,GAAewQ,eAAgBvX,IAC5F,IAAKoX,EACH,OAGF,MAAM,YAAEI,GAAgBJ,EAExBJ,EAAOS,YAAY,CACjB7X,KAAM,eACNsX,YACAE,OAAQI,GACP,CAACA,U,gBClHR,SAAqJ,WCyCrJ,IAAIE,GAEJ,MA+OA,IAAera,EAAAA,EAAAA,KA/OgBsa,EAC7BC,WACAC,iBACAC,UACAC,aACAC,eACAhC,MACAiC,WACAC,YACAC,oBACAC,SACAC,kBAEA,MAAMC,GAAYxQ,EAAAA,EAAAA,OACXyQ,GAAwBlF,MACxBmF,GAAgBtD,KACjB/B,GAAiBsF,EAAAA,GAAAA,IAAmBF,EAnBvB,MAoBZG,EAAiBC,IAAmBC,EAAAA,EAAAA,IAAUzF,MAC9C0F,EAAkBC,IAAoBF,EAAAA,EAAAA,IAAU,IAChDG,EAAgBC,IAAkBJ,EAAAA,EAAAA,IAAU,GAC7CK,GAAcnR,EAAAA,EAAAA,KAAgB,IAC7BoR,EAAkBC,IAAqBvO,EAAAA,EAAAA,KAAS,IAChDwO,EAAWC,IAAgBzO,EAAAA,EAAAA,KAAS,GACrC0O,GAAmBxR,EAAAA,EAAAA,MACnByR,GAAazR,EAAAA,EAAAA,MACb0R,GAAc1R,EAAAA,EAAAA,MACd2R,GAAiB3R,EAAAA,EAAAA,MAEjB4R,GAAclT,EAAAA,EAAAA,KAAQ,IFKvB,SAA8B0B,EAAeK,GAGlD,MAAMoR,GAFNzR,EAAQyJ,KAAKZ,MAAM7I,EAAQoN,MAC3B/M,EAASoJ,KAAKZ,MAAMxI,EAAS+M,KAU7B,OARIpN,EAAQsN,KACVtN,EAAQsN,GACRjN,EAASoJ,KAAKZ,MAAM7I,EAAQyR,IAE1BpR,EAASiN,KACXjN,EAASiN,GACTtN,EAAQyJ,KAAKZ,MAAMxI,EAASoR,IAEvB,CAAEzR,QAAOK,SAClB,CEjBWqR,CAAqB7B,GAAY7P,OAAS,EAAG6P,GAAYxP,QAAU,IACzE,CAACwP,IAEE8B,GAAa7O,EAAAA,EAAAA,IAAiBwL,IAClCA,EAAO7E,KAAKmI,MAAMtD,GAClBwC,EAAexC,GFoDZ,SAA4BA,GAC5Bb,IACEA,GAAae,OAAOF,EAC7B,CEtDIuD,CAAmBvD,MAqKrB,OAlKAxN,EAAAA,EAAAA,KAAU,KACR,IAAImP,GAAsBnC,GAAQ8B,EAClC,OFmCG,SAA6B9B,EAAa7N,GAK/C,OAJIwN,IACFA,GAAaoB,UAEfpB,GAAe,IAAIC,GAAaI,EAAK7N,GAC9B,KACLwN,IAAcoB,UACdpB,QAAevU,EAEnB,CE5CW4Y,CAAoBhE,EAAKsD,EAAiBrR,WAChD,CAAC+N,EAAK8B,EAASK,KAElBnP,EAAAA,EAAAA,KAAU,KACRmQ,GAAkB,KACjB,CAAClB,KAEJjP,EAAAA,EAAAA,KAAU,KAGR,GAFI0O,IAAiBA,KACrBA,QAAkBtW,GACb6X,EAAYhR,UAAYmR,EAAW,CACtC,MAAM5C,EAAOrD,IACP8G,EAAYrC,EAAWpB,EAC7BkB,IAAkBwC,EAAAA,EAAAA,IAAc,CAC9BC,KAAM3D,EACN4D,GAAIxC,EACJA,SAAuB,IAAZqC,EAAoBjC,EAC/BqC,SAAU1B,GAEd,IACC,CAACxF,EAAgBiG,EAAWT,EAAiBX,EAAcJ,KAE9D5O,EAAAA,EAAAA,KAAU,KACHkP,IAAaM,MACZd,IAAiBA,KACrBA,QAAkBtW,KAEnB,CAAC8W,EAAWQ,EAAiBF,KAEhCxP,EAAAA,EAAAA,KAAU,KACR,GAAIkP,EAAW,CACTR,IAAiBA,KACrBA,QAAkBtW,EAClB,MAAMoV,EAAOrD,IACP8G,EAAYrC,EAAWpB,EAC7BkB,IAAkBwC,EAAAA,EAAAA,IAAc,CAC9BC,KAAM3D,EACN4D,GAAIxC,EACJA,SAAuB,IAAZqC,EAAoBjC,EAC/BqC,SAAU1B,GAEd,IAEC,CAACT,EAAWF,EAAcJ,KAE7B0C,EAAAA,EAAAA,KAAgB,KACd,IAAKd,EAAYvR,QAAS,OAC1B,MAAMoK,GAAWtB,EAAAA,GAAAA,IAAO2H,IAAoBd,EAAY,IAAK,GAC7D4B,EAAYvR,QAAQ1D,MAAM2D,MAAQ,GAAGmK,OACpC,CAACqG,EAAiBd,KAErB0C,EAAAA,EAAAA,KAAgB,KACTf,EAAWtR,UAChBsR,EAAWtR,QAAQ1D,MAAMgW,KAAO,GAAG1B,WAClC,CAACA,KAEJyB,EAAAA,EAAAA,KAAgB,KACTb,EAAexR,UACpBwR,EAAexR,QAAQuS,WAAYC,EAAAA,GAAAA,IAAoB1B,QACtD,CAACA,KAEJ/P,EAAAA,EAAAA,KAAU,KACR,IAAKsP,EAAUrQ,UAAYgQ,EAAU,OACrC,MAAMyC,EAASpC,EAAUrQ,QACzB,IAAI0S,EAAaD,EAAOE,wBAEpBpE,EAAO,EACPqE,EAAS,EAEb,MAAMC,EAAmBxP,IACvB,MAAMyP,GAAQC,EAAAA,GAAAA,GAAmB1P,GAAG2P,EAC9BC,GAAIC,EAAAA,GAAAA,IAAMvD,IAAamD,EAAQJ,EAAWJ,MAAQI,EAAWzS,OAAQ,EAAG0P,GAC9E,GAAIO,EAAmB,MAAO,CAAC+C,EAAG,GAC7BP,EAAWzS,QAAOyS,EAAaD,EAAOE,yBAC3C,MAAMQ,EAAU7B,EAAWtR,QAI3B,MAAO,CAACiT,GAHEC,EAAAA,GAAAA,IACRJ,EAAQJ,EAAWJ,KAAOa,EAAQC,YAAc,GAAI,EAAGV,EAAWzS,MAAQkT,EAAQC,YAAc,KAK9FC,EAAgBA,KAChB5D,IAAiBA,KACrBA,QAAkBtW,GAmBdma,EAAiBA,KACrBD,IACArC,EAAYhR,SAAU,EACtBkR,GAAkB,GAClBE,GAAa,GACbV,EAAgBnC,GAChB4B,EAAO5B,GAEPlN,YAAW,KACT2P,EAAYhR,SAAU,IA1JT,MA8JXuT,GAAUC,EAAAA,GAAAA,IAAcf,EAAQ,CACpCgB,UArBsBC,KACtBL,IACAnC,GAAkB,GAClBE,GAAa,GACbhB,KAkBAuD,UAAWL,EACX/O,QAAS+O,EACTM,OAjCkBvQ,IAClBgQ,IACAnC,GAAkB,IAChB3C,EAAMqE,GAAUC,EAAgBxP,GAC7BuO,EAAWrD,GAChBsC,EAAiB+B,GACjBlC,EAAgBnC,MA8BlB,GAAIvC,EAAAA,IAAgBkE,EAClB,OAAOqD,EAGT,MAAMM,EAAuBxQ,IAC3B6N,GAAkB,IAChB3C,EAAMqE,GAAUC,EAAgBxP,GAClCwN,EAAiB+B,GACZhB,EAAWrD,IAGZuF,EAAuBA,KAC3B5C,GAAkB,IAOpB,OAJAuB,EAAOlG,iBAAiB,YAAasH,GACrCpB,EAAOlG,iBAAiB,aAAcsH,GACtCpB,EAAOlG,iBAAiB,aAAcuH,GAE/B,KACLP,IACAd,EAAOjG,oBAAoB,YAAaqH,GACxCpB,EAAOjG,oBAAoB,aAAcqH,GACzCpB,EAAOjG,oBAAoB,aAAcsH,MAE1C,CACDnE,EACAiC,EACA5B,EACAG,EACAC,EACAS,EACAH,EACAU,EACAlB,EACAH,KAIA1Z,EAAAA,GAAAA,IAAA,OAAKE,UDpPmB,WCoPUkU,IAAK4F,EAAU7Z,SAAA,EAC7C0Z,IACA7Z,EAAAA,GAAAA,IAAC0d,GAAAA,EAAc,CACb5R,QAAM,EACN2J,UAAWmF,EACX1a,UDzPuC,WC0PvC+F,MAAO,UAAUmV,EAAYxR,oBAAoBwR,EAAYnR,WAC7DmK,IAAK6G,EAAW9a,SAAA,EAEhBC,EAAAA,GAAAA,GAAA,UAAQF,UD7P0D,WC6PzBkU,IAAK4G,KAC9C5a,EAAAA,GAAAA,GAAA,OAAKF,UD9PsF,WC8PxDC,UACjCC,EAAAA,GAAAA,GAAA,QAAMF,UD/PgH,WC+P7EkU,IAAK+G,UAIpD/a,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAaxd,SAC1BoZ,EAAe3F,KAAI,EAClBgK,QACAC,UAEAzd,EAAAA,GAAAA,GAAA,OAEEF,UD1Q+J,WC4Q/J+F,MAAO,SAAiB,IAAR2X,cAAwB,IAAY,IAANC,MAHzC,GAAGD,KAASC,UAOvBzd,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAaxd,UAC3BC,EAAAA,GAAAA,GAAA,OACEgU,IAAK8G,EACLhb,WAAWoW,EAAAA,GAAAA,GDnR0K,WCmR5IwE,GDnRiK,sBE8D9MhX,GAAakJ,IACjBA,EAAEuJ,mBAGEuH,GAAiB,CACrB,GACA,EACA,IACA,GA0MF,SAASC,GAAWvG,EAAqB8B,GACvC,OACElZ,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SACzB,IAAGgc,EAAAA,GAAAA,IAAoB3E,SAAkB2E,EAAAA,GAAAA,IAAoB7C,MAGpE,CAEA,UAAeva,EAAAA,EAAAA,KA7M2Bif,EACxCtG,MACA6B,iBACA0E,mBACA3E,WACAE,UACA0E,WACA7I,uBACAuE,YACAuE,wBACAC,eACAC,aACAxE,oBACAyE,SACAC,UACA7E,eACAD,aACA+E,qBACAC,gBACAC,iBACAC,uBACAC,8BACAC,2BACAC,cACAhF,SACAiF,sBAEA,MAAOC,EAAoBC,EAAkBC,IAAqB7f,EAAAA,EAAAA,MAC3DwV,GAAkBE,KACnByC,GAAc9B,EAAAA,GAAAA,IAAgB,IAAMrC,KAAK8L,MAAMtK,MAAmB,CAACA,KAClEuK,EAAcrE,IAAgBT,EAAAA,EAAAA,KAAU,GAEzC+E,GAAkB7V,EAAAA,EAAAA,OAElB,SAAEhK,IAAaC,EAAAA,EAAAA,OACd+V,EAAc8J,GAAiB3K,KAChC4K,GAAY7J,EAAAA,GAAAA,GAAgBF,IAElC9K,EAAAA,EAAAA,KAAU,KACR,GAAKiL,EAAAA,IAAiBN,EAAtB,CACA,GAAKkK,GAAc3F,IAAaoF,IAAsBI,IAOtD,OAHAC,EAAgB1V,QAAUoB,OAAOC,YAAW,KAC1CsU,GAAc,KA/Ca,KAiDtB,KACDD,EAAgB1V,SAASoB,OAAON,aAAa4U,EAAgB1V,UAP7D0V,EAAgB1V,SAASoB,OAAON,aAAa4U,EAAgB1V,QAFP,IAW3D,CAACiQ,EAAW2F,EAAWD,EAAeN,EAAoBI,EAAc/J,KAE3E2G,EAAAA,EAAAA,KAAgB,KACVuD,EACFvd,SAASwd,KAAKhc,UAAUC,IAAI,0BAE5BzB,SAASwd,KAAKhc,UAAUic,OAAO,0BAE1B,KACLzd,SAASwd,KAAKhc,UAAUic,OAAO,6BAEhC,CAACF,KAEJ7U,EAAAA,EAAAA,KAAU,KACH6U,GACHL,MAED,CAACA,EAAmBK,IAEvB,MAAMrS,GAAOC,EAAAA,EAAAA,KAEPuS,GAAahT,EAAAA,EAAAA,IAAiBiT,IAClC5E,GAAa,GACbjB,EAAO6F,GACPZ,GAAgB,MAGZa,GAAkBlT,EAAAA,EAAAA,IAAgB,KACtCqO,GAAa,GACbgE,GAAgB,MAGZc,GAAuB3X,EAAAA,EAAAA,KAAQ,IACpB,IAAXoW,GAAgBC,EAAgB,QAChCD,EAAS,GAAY,WACrBA,EAAS,GAAY,WAClB,YACN,CAACA,EAAQC,IAEZ,OACEve,EAAAA,GAAAA,IAAA,OACEE,WAAWoW,EAAAA,GAAAA,GAAe,sBAAuBjB,GAAwB,SAAUkK,GAAa,UAChGrR,QAASpK,GAAU3D,SAAA,EAEnBC,EAAAA,GAAAA,GAACiZ,GAAQ,CACP3B,IAAKA,EACL4B,SAAUA,EACVE,QAASA,EACTI,UAAWA,EACXC,kBAAmBA,EACnBJ,WAAYA,EACZF,eAAgBA,EAChBG,aAAcA,EACdI,OAAQ4F,EACR3F,YAAa6F,EACbjG,SAAU4F,KAEZvf,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL2E,UAAWxF,EAAK,iBAChB5M,KAAK,OACLwf,QAAStgB,EACTwO,MAAM,oBACN9N,UAAU,OACVuS,OAAK,EACLvE,QAAS4Q,EAAY3e,UAErBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAMkM,EAAY,QAAU,YAEpCxZ,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL2E,UAAU,SACVpS,KAAK,OACL0N,MAAM,oBACN9N,UAAU,SACVuS,OAAK,EACLvE,QAASuQ,EAActe,UAEvBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAMmS,OAEZ9I,EAAAA,KACA3W,EAAAA,GAAAA,GAAC2f,GAAAA,EAAW,CAACC,MAAI,EAAC9f,UAAU,gBAAgB4M,MAAOyR,EAAU,EAAa,IAATD,EAAc1Q,SAAU8Q,IAE1FX,GAAWvG,EAAa8B,IACvB+E,IACAje,EAAAA,GAAAA,GAAA,OAAKF,UAAU,mBAAkBC,SAC9B,IAAG8f,EAAAA,GAAAA,IAAe/S,EAAMgR,EAAWD,SAAuBgC,EAAAA,GAAAA,IAAe/S,EAAMgR,QAGpF9d,EAAAA,GAAAA,GAAA,OAAKF,UAAU,YACfE,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL2E,UAAU,gBACVpS,KAAK,OACL0N,MAAM,oBACN9N,UAAU,gBACVuS,OAAK,EACLvE,QAAS+Q,EAAiB9e,SAEzB,GAAGuZ,OAELkF,IACCxe,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL2E,UAAU,qBACVpS,KAAK,OACL0N,MAAM,oBACN9N,UAAU,aACVuS,OAAK,EACLvE,QAAS2Q,EAAyB1e,UAElCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,UAGdyQ,IACC/d,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL2E,UAAU,aACVpS,KAAK,OACL0N,MAAM,oBACN9N,UAAU,aACVuS,OAAK,EACLvE,QAASsQ,EAAmBre,UAE5BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAM0Q,EAAe,cAAgB,qBAIjDhe,EAAAA,GAAAA,GAAC8f,GAAAA,EAAI,CACHpU,OAAQkT,EACR9e,WAAWoW,EAAAA,GAAAA,GACT,sBACC6H,GAAyB,iBACzBS,GAA+B,UAElCjL,UAAU,QACVwM,UAAU,SACVC,WAAS,EACTpU,QAASkT,EAAkB/e,SAE1B2d,GAAelK,KAAKyM,IAEnBjgB,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACyM,SAAU5G,IAAiB2G,EAAMnS,QAASA,IAAMyQ,EAAqB0B,GAAMlgB,SAClF,GAAGkgB,iBCqJhB,IAAethB,EAAAA,EAAAA,KAhWmBwhB,EAChC7I,MACAxU,QACAsd,aACA/G,aACA1Q,eACAmV,WACAuC,oBACAC,SACApC,SACAC,UACA7E,eACArE,uBACAsL,qBACAjR,cACAkR,kBACA/G,oBACAgH,qBACAC,YACA1L,uBACApJ,cAEA,MAAM,qBACJ+U,EAAoB,oBACpBC,EAAmB,2BACnBC,EAA0B,qBAC1BC,IACE/U,EAAAA,EAAAA,MACEgV,GAAW3X,EAAAA,EAAAA,OACVoQ,EAAWwH,IAAgB9U,EAAAA,EAAAA,KAAUqJ,EAAAA,KAAiBoB,EAAAA,KACtDqH,EAAciD,EAAeC,IAAkBC,EAAAA,GAAAA,IAAcJ,EAAUC,IACxE,SAAE5hB,IAAaC,EAAAA,EAAAA,MACf6Z,EAAW6H,EAASxX,SAAS2P,UAAY,EACzCkI,EAAWte,GAASoW,GArCF,GAuClBmI,GAAwB/U,EAAAA,EAAAA,IAAgB,KAExCgV,EAAAA,IACJR,EAAqB,CAAEzL,UAAU,OAG7BkM,GAAwBjV,EAAAA,EAAAA,IAAgB,KACxCgV,EAAAA,IACJR,EAAqB,CAAEzL,UAAU,QAIjCmJ,EACAgD,EACAC,GjB7FW,SACbC,EACAtU,EACAuU,GAEA,MAAOC,EAAaC,IAAkB3V,EAAAA,EAAAA,KAAS,IACxCqN,EAAUuI,IAAe5V,EAAAA,EAAAA,KAAS,IAEzC0P,EAAAA,EAAAA,KAAgB,KAEd,GAAKjF,EAAAA,IAAUoL,EAAAA,KAAYL,EAAMnY,QAAS,OAC1C,MAAMzH,EAAQ4f,EAAMnY,QACdyY,EAAU9b,EAAuBpE,GAGvC,KAFmBF,SAASqgB,yBAA4BP,EAAMnY,SAAS2Y,+BACtDxf,IAAZsf,EACW,OAEhBlgB,EAAMqgB,sBAAuB,EAC7BN,GAAe,GACf,MAAMO,EAAkBA,KACtBhV,IACA0U,GAAY,GACZ7b,GAAsB,IAElBoc,EAAkBA,KACtBpc,GAAsB,GACtB6b,GAAY,GACZH,KAIF,OAFA7f,EAAMgU,iBAAiB,wBAAyBsM,GAChDtgB,EAAMgU,iBAAiB,wBAAyBuM,GACzC,KACLvgB,EAAMiU,oBAAoB,wBAAyBqM,GACnDtgB,EAAMiU,oBAAoB,wBAAyBsM,MAEpD,CAACX,EAAOtU,EAASuU,IAEpB,MAAMnb,GAAuB7G,EAAAA,EAAAA,KAAY,KACvC,IAAK+hB,EAAMnY,QAAS,OACpB,MACMyY,EAAU9b,EADFwb,EAAMnY,SAEhByY,EACFA,EAAQ,UAER1b,MAED,CAACob,IAEEF,GAAwB7hB,EAAAA,EAAAA,KAAY,KACxC,IAAK+hB,EAAMnY,QAAS,OACpB/C,IACA,MAAM1E,EAAQ4f,EAAMnY,QACdiQ,GAAY8I,EAAAA,EAAAA,GAAkBxgB,GAC9BkgB,EAAU9b,EAAuBpE,GACnCkgB,EACFA,EAAQ,sBA0Bd,SAAiClgB,GAC/B,GAAIA,EAAMygB,wBACR,IACEzgB,EAAMygB,yBACR,CAAE,MAAO9b,GACHC,EAAAA,KAEFC,QAAQC,IAAI,8BAA+BH,EAE/C,CAEJ,CAnCM8b,CAAwBzgB,GAGtB0X,IACFgJ,EAAAA,EAAAA,GAAS1gB,KAEV,CAAC4f,EAAOlb,IAEX,OAAKob,EAIE,CAACA,EAAaJ,EAAuBjI,GAHnC,EAAC,EAIZ,CiBwBMkJ,CAAoB1B,EAAUM,EAAuBE,IAElD,CAAEmB,EAAgBC,GAAgBpO,MAClCyK,EAAcrE,KAAgBT,EAAAA,EAAAA,KAAU,GACzC0I,IAAoBxZ,EAAAA,EAAAA,IAAO,CAAEmT,EAAG,EAAGsG,EAAG,KAE5CvY,EAAAA,EAAAA,KAAU,KACR,MAAMwY,EAAuBlW,IAC3BgW,GAAkBrZ,SAAU+S,EAAAA,GAAAA,GAAmB1P,IAMjD,OAHAjC,OAAOmL,iBAAiB,YAAagN,GACrCnY,OAAOmL,iBAAiB,YAAagN,GAE9B,KACLnY,OAAOoL,oBAAoB,YAAa+M,GACxCnY,OAAOoL,oBAAoB,YAAa+M,MAEzC,IAEH,MAAMC,IAAsCzW,EAAAA,EAAAA,IAAgB,CAAC0W,EAAiBC,KAC5E,MAAMC,EAASnC,EAASxX,SAAS2S,wBAC5BgH,IACDF,GAAWE,EAAOrH,MAAQmH,GAAWE,EAAOC,OAC3CF,GAAWC,EAAOE,KAAOH,GAAWC,EAAOG,UACzCrE,KACH0D,GAAe,OAKfY,IAAkBhX,EAAAA,EAAAA,IAAgB,KACtCoW,GAAe,MAGXa,IAAmBjX,EAAAA,EAAAA,IAAiBM,IACxCmW,GAAoCnW,EAAEoW,QAASpW,EAAEqW,YAG7CO,IAAsBlX,EAAAA,EAAAA,IAAiBoO,IAE3C,GADAC,GAAaD,IACRA,EAAW,CACd,MAAM,EAAE6B,EAAC,EAAEsG,GAAMD,GAAkBrZ,QACnCwZ,GAAoCxG,EAAGsG,EACzC,MAGI,QACJzJ,GAAO,WAAE6E,GAAU,eAAE9E,GAAc,kBAAEsK,GAAiB,iBAAE5F,KACtD6F,EAAAA,GAAAA,KACEC,IAAgBC,EAAAA,GAAAA,GAAoB7C,OAAUre,GAAY4U,IAG9DuM,aAAcC,GACdC,qBAAsBC,KACpBC,EAAAA,GAAAA,IACDhG,KAAe0F,QAAejhB,OAAWA,EAAW,SAGrDmhB,aAAcK,GACdH,qBAAsBI,KACpBF,EAAAA,GAAAA,GACFtN,EAAAA,KAAW6C,IAAcsK,KAAwBH,QAAejhB,OAAWA,EAAW,SAGjF,CAAEgS,IAAkBC,MACpB,CAAE4B,IAAqBC,MAE9BlM,EAAAA,EAAAA,KAAU,KACRqY,EAAamB,MACZ,CAACnB,EAAcmB,MAElBxZ,EAAAA,EAAAA,KAAU,KACJgW,IAAWD,GAAqBsD,GAClC5C,EAASxX,QAAS6a,QACT9M,IAAQ/B,EAAAA,KAIjBiN,EAAAA,EAAAA,GAASzB,EAASxX,WAEnB,CAAC+W,EAAQD,EAAmB/I,EAAKsJ,EAAqB+C,MAEzDrZ,EAAAA,EAAAA,KAAU,KACRyW,EAASxX,QAAS2U,OAASA,IAC1B,CAACA,KAEJ5T,EAAAA,EAAAA,KAAU,KACRyW,EAASxX,QAAS+P,aAAeA,IAChC,CAACA,KAEJhP,EAAAA,EAAAA,KAAU,KACHoW,IACLK,EAASxX,QAAS6N,YAAcsJ,EAChChM,GAAegM,MACd,CAAChM,GAAgBgM,IAEpB,MAAM2D,IAAkB/X,EAAAA,EAAAA,IAAiBM,IACvCA,EAAEuJ,kBACEqD,GACFuH,EAASxX,QAAS6a,QAClBpD,GAAa,MAEbwB,EAAAA,EAAAA,GAASzB,EAASxX,SAClByX,GAAa,OAIXsD,IAAchY,EAAAA,EAAAA,IAAiBM,IAC/B6T,IACFzL,KAAuB,GACvBpJ,EAAQgB,IAEN4T,IAGAD,EACF3U,EAAQgB,GAERyX,GAAgBzX,QAIpB2X,EAAAA,GAAAA,GAAgBxD,EAAU0C,IAE1B,MAAMe,IAAmBlY,EAAAA,EAAAA,IAAiBM,IACxC,MAAM9K,EAAQ8K,EAAE6X,cACZ3iB,EAAM4iB,YApLU,IAqLlBnO,IAAkB,GAClB7B,GAAe5S,EAAMsV,cAElBgK,GAAYtf,EAAMsV,cAAgBtV,EAAMoX,WAC3CxE,GAAe,GACfsM,GAAa,OAIX2D,IAAcrY,EAAAA,EAAAA,IAAgB,KAC9B8U,IACJ1M,GAAe,GACfsM,GAAa,GACb0B,GAAe,OAGXkC,IAAyBtY,EAAAA,EAAAA,IAAgB,KACzC0R,GAAgBkD,EAClBA,KACUlD,GAAgBiD,GAC1BA,OAIE3B,IAAahT,EAAAA,EAAAA,IAAiBiT,IAClCwB,EAASxX,QAAS6N,YAAcmI,KAG5BsF,IAAqBvY,EAAAA,EAAAA,IAAiBwY,IAC1CnE,EAAqB,CAAEzC,OAAQ4G,EAAY,SAGvCC,IAAoBzY,EAAAA,EAAAA,IAAgB,KAExCyU,EAASxX,QAASyb,OAASjE,EAASxX,QAASyb,MAC7CpE,EAAoB,CAAEzC,SAAUA,OAG5B8G,IAA2B3Y,EAAAA,EAAAA,IAAiB4Y,IAChDrE,EAA2B,CAAEvH,aAAc4L,QAG7C5a,EAAAA,EAAAA,KAAU,KACR,IAAK+V,EAAmB,OACxB,MAAM8E,EAAU/O,IACd,IAAK4H,EAAc,OACnB,MAAMlc,EAAQif,EAASxX,QACjB6b,GAAU3I,EAAAA,GAAAA,IAAM3a,EAAMsV,YAnOd,EAmO4BhB,EAAmB,EAAGtU,EAAMoX,UAClEmM,OAAOC,SAASF,KAClBtjB,EAAMsV,YAAcgO,IAGlBG,EAAiB3Y,IACrB,IAAI6U,EACJ,OAAQ7U,EAAE4Y,KACR,IAAK,IACL,IAAK,QACH5Y,EAAE6Y,iBACFpB,GAAgBzX,GAChB,MACF,IAAK,OACL,IAAK,YACHA,EAAE6Y,iBACFN,GAAQ,GACR,MACF,IAAK,QACL,IAAK,aACHvY,EAAE6Y,iBACFN,EAAO,KAOb,OAFAvjB,SAASkU,iBAAiB,UAAWyP,GAAe,GAE7C,KACL3jB,SAASmU,oBAAoB,UAAWwP,GAAe,MAExD,CAAClB,GAAiBhE,EAAmBrC,EAAcyD,IAEtD,MAAMiE,GAAerM,GAAc,UAAUA,EAAW7P,oBAAoB6P,EAAWxP,WACjF8b,GAAa,yBAAyBvF,KACtCwF,IAAwBrQ,EAAAA,KAAiBN,EAE/C,OACErV,EAAAA,GAAAA,IAAA,OACEE,UAAU,cACV+lB,YAAaD,GAAuBtC,QAAkB5gB,EACtDojB,aAAcF,GAAuBrC,QAAmB7gB,EAAU3C,SAAA,EAElEH,EAAAA,GAAAA,IAAA,OACEiG,MAAO6f,GAAa3lB,SAAA,CAEnBuP,IACCtP,EAAAA,GAAAA,GAAA,OACE+lB,cAAeriB,EAAAA,EACfsiB,cAAgBzQ,EAAAA,QAAwC7S,EAAzBkiB,GAC/B9W,QAAU1O,OAA6BsD,EAAlB2hB,GACrBvkB,UAAU,eAGdE,EAAAA,GAAAA,GAAA,SACEgU,IAAK+M,EACLkF,SAAU1Q,EAAAA,GACV2Q,aAAa,aACbC,aAAW,EACXC,KAAMhF,EAEN4D,MAAOliB,GAASqb,EAChBte,GAAG,qBACHgG,MAAO8f,GACPU,UAAWA,IAAM9P,IAAkB,GACnC+P,OAAQA,IAAMtF,GAAa,GAC3BuF,QAAS5B,GACT7W,QAAU1O,GAAa4e,OAA6Btb,EAAd4hB,GACtC0B,cAAgBzQ,EAAAA,QAAwC7S,EAAzBkiB,MAE3BnB,GACJ+C,QAAU5Z,IACRoU,GAAa,GACbyC,GAAkB+C,QAAQ5Z,IAE5B6Z,aAAcjC,GACd7gB,IAAK2T,OAGR4M,KACClkB,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC0E,OAAK,EAACvS,UAAW,eAAeqkB,KAAwBrW,QAASuW,GAAgBtkB,UACvFC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,WAGdwW,KACClkB,EAAAA,GAAAA,IAAA,OAAKE,UAAW,CAAC,oBAAqBkkB,IAAmB0C,KAAK,KAAK3mB,SAAA,EAC/Dke,KAAcje,EAAAA,GAAAA,GAAA,OAAKF,UAAU,YAAWC,SAAC,kBAC3CC,EAAAA,GAAAA,GAAC0T,GAAAA,EAAe,CACdxT,KAAK,KACLyT,SAAUsK,GAAa,EAAItV,EAC3BmF,QAASlC,QAIb9I,IAAU2d,IAAuBkD,KACjC3jB,EAAAA,GAAAA,GAAC4d,GAAmB,CAClBtG,IAAKA,EACLkC,UAAWA,EACXL,eAAgBA,GAChB0E,iBAAkBA,GAClBI,WAAYA,GACZF,sBAAuBjT,QAAQmW,GAC/BzC,4BAA6BA,EAC7BR,aAAcA,EACdvE,kBAAmBA,EACnBqE,SAAUA,EACV5E,SAAUA,EACVE,QAASA,GACTC,WAAYA,EACZpE,qBAAsBA,EACtByE,OAAQ4F,GACRlB,mBAAoBwG,GACpBnG,yBAA0B+C,EAC1B9C,YAAa2F,GACbnG,OAAQA,EACR5E,aAAcA,EACd6E,QAASA,EACTE,cAAe0G,GACfzG,eAAgBuG,GAChBtG,qBAAsB0G,GACtBtG,gBAAiB6E,WClK3B,IAAe7kB,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUsN,WACT,MAAM,OACJuP,EAAM,QACNC,EAAO,aACP7E,EAAY,SACZjE,EAAQ,OACRpS,EAAM,UACNyd,EAAS,SACTrR,IACEP,EAAAA,EAAAA,KAAezN,GAAQ0N,YACrBnO,EAAwB,YAAd+N,EAAKzN,KAAqByN,EAAK/N,aAAU8B,EACnDzB,EAAiC,qBAAd0N,EAAKzN,KAA8ByN,EAAK/N,aAAU8B,EACrEikB,EAAc/lB,GAAWK,EACzBmP,EAAgBhP,EAAoBC,EAAQsN,GAE5CiY,EAAehmB,IAAWimB,EAAAA,GAAAA,IAAmCxlB,EAAQT,GAAS,GAEpF,MAAO,CACLqC,SACA0jB,cACArX,YAAa1O,IAAW2O,EAAAA,EAAAA,KAAyBlO,EAAQT,GACzDsd,SACAC,UACA9I,WACAiE,eACAjK,WACAqR,YACAkG,eACAxW,mBA7Bc1B,EAnLOoY,EACzBnY,OACAyB,gBACAmJ,WACAoN,cACA1jB,SACA8jB,gBACAzX,cACA4O,SACA5E,eACA6E,UACA9I,WACA2R,WACA3X,WACAqR,YACAkG,eACAhb,UACAqb,gBACAjS,2BAEA,MAAM,4BAAEkS,IAAgCnb,EAAAA,EAAAA,MAElCe,GAAOC,EAAAA,EAAAA,KAEP7F,EAAyB,WAAdyH,EAAKzN,KAChBuf,EAAmC,qBAAd9R,EAAKzN,MAC1B,MAAEC,GAAUiP,GAAiB,CAAC,GAE9B,QACJ9I,EAAO,QACPI,EAAO,cACPsB,EAAa,SACbiC,EAAQ,WACRI,EAAU,MACVvI,EAAK,QACLsI,EAAO,cACP7D,EAAa,UACb2D,EAAS,aACTvC,GACE1B,EAAc,CAChB9F,QAAO+F,WAAUjE,SAAQkE,QAAO4f,GA5CT,OA+ClB,CAAErE,GAAkBnO,MACpBE,GAAkBE,KAEnBjJ,EAASZ,QAAQ3J,IACjB,SAAE/B,IAAaC,EAAAA,EAAAA,MAEf8nB,GAAuB7a,EAAAA,EAAAA,IAAgB,KAC3CoW,GAAe,MAGX0E,GAA0BC,EAAAA,GAAAA,IAAqB,KACnD,IAAK9N,IAAaoN,GAAoC,UAArBxlB,GAAOkG,UAAuB,OAC/D,GAAIlG,EAAM+X,SAAWoO,EAAAA,IAAuC,OAE5D,MAAM1mB,EAAU,OAAQ+lB,EAAcA,OAAcjkB,EAC9C0U,EAAc3C,IACpB,IAAK2C,IAAgBxW,GAAWA,EAAQ2mB,UAAW,OAGnD,MAAMC,EAAermB,EAAM+X,SAAW9B,EAAcqQ,EAAgCrQ,OAAc1U,EAClGwkB,EAA4B,CAAE3a,OAAQ3L,EAAQ2L,OAAQiM,UAAW5X,EAAQf,GAAI6gB,UAAW8G,MACvF,CAAC/S,EAAgB8E,EAAUpY,EAAOwlB,GAlER,KAsE7B,IAFAe,EAAAA,GAAAA,GAAgBN,EAAyB,CAAC3S,KAErCtT,EAAO,OAEZ,GAAkB,WAAdwN,EAAKzN,KACP,OAAKqG,GAaDvH,EAAAA,GAAAA,GAAA,OAAoBF,UAAU,qBAAoBC,UAChDC,EAAAA,GAAAA,GAACmgB,GAAW,CAEV7I,IAAKrM,EACLnI,OAAK,EACLsd,WAAYpX,EACZqQ,YAAYsO,EAAAA,EAAAA,IAA+Btc,GAAa,GAAO,GAC/D1C,aAAcA,EACdmV,SAAU5S,EACVmV,kBAAmB3U,GAAU6N,EAC7BjK,YAAaA,EACbmK,mBAAoBmO,GAAAA,IAA2Bxc,EAC/CkV,QAAS/G,EACT3N,QAASA,EACTuS,SAAO,EACPoC,oBAAkB,EAClBrC,OAAQ,EACRsC,gBAAiBwG,EACjB1N,aAAc,EACdmH,mBAAoBA,EACpBzL,qBAAsBA,GAlBjB7T,EAAMtB,KAFLsB,EAAMtB,KAXhBG,EAAAA,GAAAA,GAAA,OAAoBF,UAAU,qBAAoBC,SAC/C8nB,GACC5c,GACA0c,EAAAA,EAAAA,IAA+Btc,GAAa,IAC3CjM,IAAakQ,EACdA,IALMnO,EAAMtB,IAsCtB,MAAMioB,EAAYnB,IAChBA,EAAY7T,QAAQnR,OACqB,wBAApCglB,EAAY7T,QAAQnR,OAAOT,KAC1B4L,EAAK,yCAAsCpK,GAC7CqlB,EAAAA,EAAAA,GAAkB,CAClBnnB,QAAS+lB,EAAaC,eAAcvX,WAAU2Y,eAAe,EAAMC,kBAAkB,KAErFnT,EAAa6R,GAAe,eAAgBA,EAAcA,EAAY7R,gBAAapS,EACnFwlB,EAAYpd,QAAQgd,GACpBzO,GAAasO,EAAAA,EAAAA,IAA+Btc,EAAa6c,EAAW5gB,GACpE2N,EAAuB7V,GAkJ/B,SAAkCia,GAChC,QAAKA,GACEA,EAAW7P,MAhRiB,GAiRrC,CArJ2C2e,CAAyB9O,GAElE,OACEzZ,EAAAA,GAAAA,IAAA,OACEE,WAAWoW,EAAAA,GAAAA,GAAe,qBAAsBgS,GAAa,cAC7DrC,YAAa5Q,IAAyBM,EAAAA,GAAe4R,OAAuBzkB,EAAU3C,SAAA,CAErF2H,GAAWmgB,GACV5c,EACAoO,GACCja,IAAakQ,EACdA,GAEDhI,IAAaiS,GAMZvZ,EAAAA,GAAAA,GAACmgB,GAAW,CAEV7I,IAAKrM,EACLnI,MAAOA,EACPsd,WAAYpX,EACZqQ,WAAYA,EACZ1Q,aAAcA,EACdmV,SAAU5S,EACVmV,kBAAmB3U,GAAU6N,EAC7B+G,QAAS/G,EACTE,mBAAoBmO,GAAAA,IAA2Bxc,EAC/CQ,QAASA,EACTuS,QAASA,EACT9I,SAAUA,EACVJ,qBAAsBA,EACtB3F,YAAaA,EACb4O,OAAQA,EACRsC,gBAAiBwG,EACjB1N,aAAcA,EACdmH,mBAAoBA,EACpBzL,qBAAsBA,EACtB0L,UAAWA,GApBNvf,EAAMtB,IAPUwb,GACvBrS,EACAqQ,GACCja,IAAakQ,EACdA,IA0BDwY,IACC9nB,EAAAA,GAAAA,GAAC4U,GAAiB,CAChBC,KAAMiT,EACNhT,WAAYA,EACZhH,QAASmZ,EACT3X,YAAaA,EACb2F,qBAAsBA,EACtBF,WAAYzN,IAAYxE,EACxBkS,qBAAsBA,WAyChC,SAAS6S,GAAY9e,EAAkBqf,EAA2BC,EAAmB/Y,GACnF,OAAOvG,GAEHnJ,EAAAA,GAAAA,IAAA,OAAKiG,MAAM,sBAAqB9F,SAAA,CAC7BuP,IAAetP,EAAAA,GAAAA,GAAA,OAAK+lB,cAAeriB,EAAAA,EAAW5D,UAAU,eACzDE,EAAAA,GAAAA,GAAA,OACE2D,IAAKoF,EACLuf,IAAI,GACJxoB,WAAWoW,EAAAA,GAAAA,GAAe5G,GAAe,gBACzCzJ,MAAOuiB,EAAY,UAAUA,EAAU5e,UAAY,GACnDhG,UAAWsH,QAAQud,SAKvBroB,EAAAA,GAAAA,GAAA,OACEF,UAAU,kBACV+F,MAAOuiB,EAAY,UAAUA,EAAU5e,UAAY,GAAGzJ,UAEtDC,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,CAAC3a,MAAM,WAGvB,CAEA,SAASyN,GAAmBtS,EAAkBqf,EAA2BC,EAAmB/Y,GAC1F,MAAMoW,EAAe0C,GAAa,UAAUA,EAAU5e,oBAAoB4e,EAAUve,WAC9E8b,EAAa,yBAAyB5c,KAC5C,OAAOA,GAEHnJ,EAAAA,GAAAA,IAAA,OACEE,UAAU,cAAaC,SAAA,CAEtBuP,IAAetP,EAAAA,GAAAA,GAAA,OAAK+lB,cAAeriB,EAAAA,EAAW5D,UAAU,eACzDE,EAAAA,GAAAA,GAAA,OACE6F,MAAO6f,EAAa3lB,UAEpBC,EAAAA,GAAAA,GAAA,SACE6F,MAAO8f,EACP7lB,WAAWoW,EAAAA,GAAAA,GAAe5G,GAAe,gBACzC9L,UAAWsH,QAAQud,WAMzBroB,EAAAA,GAAAA,GAAA,OACEF,UAAU,kBACV+F,MAAOuiB,EAAY,UAAUA,EAAU5e,UAAY,GAAGzJ,UAEtDC,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,CAAC3a,MAAM,WAGvB,CCrSA,MAAM,aAAE4a,GAAY,aAAEC,IAAiBC,EAAAA,GA2BjCC,GAAapT,EAAAA,GAAe,GAAK,EACjCqT,GAAqB,IAS3B,IAAI5P,GACA6P,GAAkE,IAQjEC,GAAc,SAAdA,GAAc,OAAdA,EAAAA,EAAc,2BAAdA,EAAAA,EAAc,uBAAdA,CAAc,EAAdA,IAAc,IAKnB,MAwrBA,IAAenqB,EAAAA,EAAAA,KAxrByBoqB,EACtCpa,OACArH,UACAxE,QACA4I,SACAqb,gBACA1R,WACA2T,qBACAC,WACAC,wBACAC,cACAC,aACAxd,UACAqb,gBACAjS,2BAEA,MAAMqU,GAAejgB,EAAAA,EAAAA,MACfkgB,GAAiBlgB,EAAAA,EAAAA,MACjBmgB,GAAengB,EAAAA,EAAAA,MACfogB,GAAgBpgB,EAAAA,EAAAA,MAChBqgB,GAAmBrgB,EAAAA,EAAAA,IAAkB,CAAEmT,EAAG,EAAGsG,EAAG,EAAG6G,MAAO,IAC1DC,GAAoBvgB,EAAAA,EAAAA,SAAmC1G,GACvDknB,GAAwBxgB,EAAAA,EAAAA,SAA4B1G,GACpDmnB,GAAgBzgB,EAAAA,EAAAA,KAAO,IACtBmQ,EAAUuI,IAAe5V,EAAAA,EAAAA,KAAS,IAClC6B,GAAiBE,KAClB6b,GAAoB1gB,EAAAA,EAAAA,IAAO2E,KAC3BiQ,GAAe+L,EAAAA,GAAAA,OACdC,EAAaC,IAAkB/d,EAAAA,EAAAA,KAAS,IACxCge,EAAcC,IAAgBjQ,EAAAA,EAAAA,IAAqB,CAAEqC,EAAG,EAAGsG,EAAG,EAAG6G,MAAO,IACzEU,EAAetW,GAAaoW,IAC3BG,EAAeC,IAAiBpQ,EAAAA,EAAAA,IAAuCvL,GACxE4b,EAAgBzW,GAAauW,GAC7BG,GAAWlV,EAAAA,GAAAA,IAAgB,IAA+B,IAAzB4U,IAAeR,OAAa,CAACQ,IAC9DO,GAAanV,EAAAA,GAAAA,GAAgB+U,IAC3BxgB,OAAQ6gB,EAAclhB,MAAOmhB,EAAW,WAAEC,IAAeC,EAAAA,GAAAA,MAC1D1W,EAAoBC,EAAoBuO,GAAgBpO,KAEzDzH,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,SAAU7N,EACVqf,OAAQnf,EACRof,kBAAkB,IAGpB,MAAMC,GAAsBC,EAAAA,GAAAA,GAAqB9B,EAAY,CAACA,GApElC,KAoEsE,GAC5F+B,GAA+BD,EAAAA,GAAAA,IAAqB,KACxDvB,EAAkBpgB,aAAU7G,IAC3B,GAtEkB,KAsEE,GAEjB0oB,GAAuBF,EAAAA,GAAAA,IAAsBxe,GAAUoV,EAAYpV,IAAQ,GAvE3D,KAuEgF,GAEhG2e,EAAqBvgB,QAAQhI,IAAU6T,EAAAA,IACvC2U,EAAkB/V,EAAAA,GAAe,GAAKoV,EAAc,GAEpDY,IAA2Bjf,EAAAA,EAAAA,IAAiBM,IAChD,IAAK2I,EAAAA,GAAc,OACnB,MAAMiW,EAAWd,EAAe9d,EAAE6e,MA5EZ,IA6EjBD,GAAY5e,EAAEyP,MAAQiP,IACtBE,GAAY5e,EAAEyP,MAAQsO,EAAcW,GACzClX,GAAoBD,SAGtB1U,EAAAA,GAAAA,IAAW,IAAM2U,GAAmB,IAAOwU,KAE3Cte,EAAAA,EAAAA,KAAU,KACR,MAAM,MAAEof,EAAK,EAAEnN,EAAC,EAAEsG,GAAMuH,EAAa7gB,QAE3B,IAANgT,GAAiB,IAANsG,GAAqB,IAAV6G,GACxBY,EAAc3b,KAEf,CAACA,EAAM2b,EAAeF,KAEzB9f,EAAAA,EAAAA,KAAU,KACH2e,GAAawB,IAAczB,GAChCE,EAAsBuB,KACrB,CAACA,EAAYvB,EAAuBD,EAAUD,KAEjDpN,EAAAA,EAAAA,KAAgB,KACd,MAAM,EAAEW,EAAC,EAAEsG,EAAC,MAAE6G,GAAUQ,IACxBvH,EAAuB,IAAV+G,GACTH,EAAahgB,UACfggB,EAAahgB,QAAQ1D,MAAM6lB,UAAYC,IAAmBhB,EAAcpO,EAAIoM,KAE1EW,EAAe/f,UACjB+f,EAAe/f,QAAQ1D,MAAM6lB,UAAYC,GAAkBpP,EAAGsG,EAAG6G,IAE/DF,EAAcjgB,UAChBigB,EAAcjgB,QAAQ1D,MAAM6lB,UAAYC,GAAkBhB,EAAcpO,EAAIoM,OAE7E,CAACuB,EAAcvH,EAAcgI,KAEhCrgB,EAAAA,EAAAA,KAAU,KACR,IAAK+e,EAAa9f,cAAqC7G,IAA1B6nB,EAAchhB,SAAyB8L,GAAY2I,EAC9E,OAEF,IAAI4N,EAAgBnC,EAAiBlgB,QACrC,MAAMsiB,EAAiB,CACrBtP,EAAG,EACHsG,EAAG,GAECiJ,EAAiB,CACrBvP,EAAG,EACHsG,EAAG,GAECkJ,EAAW,CACfxP,EAAG,EACHsG,EAAG,GAEL,IACI/P,EADAkZ,EAAkBC,KAAKC,MAE3B,MAAMC,GAAqBC,EAAAA,GAAAA,KAAS,KAClCJ,EAAkBC,KAAKC,QACtB,KAAK,GAAO,GAETG,EAAeC,IACnB,MAAMC,EAAchC,EAAchhB,QAClC,QAAoB7G,IAAhB6pB,EAA2B,OAAO,EACtC,MAAMC,EAAWrD,EAAYoD,EAAaD,GAC1C,QAAiB5pB,IAAb8pB,EAAwB,CAC1B,MAAMrQ,GAAUwO,EAAchC,IAAc2D,EAEtC/P,EADY6N,EAAa7gB,QACXgT,EAAIJ,EAMxB,OALA2F,GAAY,GACZwI,EAAckC,GACdvB,EAAoBuB,GACpBpB,GAAqB,GACrBQ,EAAgB,CAAErP,EAAG,EAAGsG,EAAG,EAAG6G,MAAO,GAChC3C,GAIL/N,IAAkBwC,EAAAA,EAAAA,IAAc,CAC9BC,KAAMc,EACNb,GAAI,EACJxC,SAAU0P,GACV6D,OAAQjE,GACR7M,SAAWjP,GAAUyd,EAAa,CAChCtH,EAAG,EACHtG,EAAG7P,EACHgd,MAAO,OAGJ,IAdLS,EAAayB,IACN,EAcX,CACA,OAAO,GAGHc,EAAsB9f,IAC1B,MAAM,MAAE8c,GAAUU,EAAa7gB,QAC/B,GAAc,IAAVmgB,EAAa,MAAO,EAAC,GAAO,GAChC,GAAK9c,EAAEC,OAAuB8f,QAAQ,2BACpC,MAAO,EAAC,GAAO,GAEjB,IAAIL,EAAY,EAChB,OAAI5B,EAAe9d,EAAE6e,MA9KD,GA+KX,EAAC,GAAO,IAEb7e,EAAEyP,MAAQiP,EACZgB,GAAa,EACJ1f,EAAEyP,MAAQsO,EAAcW,IACjCgB,EAAY,GAIP,CAD6B,IAAdA,EADDD,EAAYC,MAK7B/G,EAAiB3Y,IACrB,MAAM,MAAE8c,GAAUU,EAAa7gB,QAC/B,GAAc,IAAVmgB,EACJ,OAAQ9c,EAAE4Y,KACR,IAAK,OACL,IAAK,YACH6G,GAAa,GACb,MAEF,IAAK,QACL,IAAK,aACHA,EAAY,KAKZO,EAA4BA,EAC9BrQ,IAAGsG,IAAG6G,SACRmD,EAAY,KAEZ,MAAMC,EAAqBlD,EAAsBrgB,QACjD,IAAKujB,EAAoB,MAAO,CAAC,CAAEvQ,IAAGsG,IAAG6G,UAAS,GAAM,GAExD,IAAIqD,GAAY,EACZC,GAAY,EAEhB,MAAMC,GAAWtC,EAAcA,EAAcjB,GAAS,EAChDwD,GAAWxC,EAAeA,EAAehB,GAAS,EAIlDyD,EAAala,KAAKma,KAAKN,EAAmBjR,KAAO6N,EAAOuD,GACxDI,EAAa1C,EAAcmC,EAAmB3J,MAAQuG,EAC5DqD,GAAYO,EAAAA,GAAAA,IAAU/Q,EAAG8Q,EAAYF,GACrC5Q,GAAIE,EAAAA,GAAAA,IAAMF,EAAG8Q,EAAYF,GAEzB,MAAMI,EAAata,KAAKma,KAAKN,EAAmB1J,IAAMsG,EAAQmD,EAAWK,GACnEM,EAAa9C,EAAeoC,EAAmBzJ,OAASqG,EAI9D,OAHAsD,GAAYM,EAAAA,GAAAA,IAAUzK,EAAG2K,EAAYD,GAG9B,CAAC,CAAEhR,IAAGsG,EAFbA,GAAIpG,EAAAA,GAAAA,IAAMoG,EAAG2K,EAAYD,GAET7D,SAASqD,EAAWC,IAGhC9P,EAAatQ,IAGjB,GAAIid,EAActgB,QAEhB,YADAsgB,EAActgB,SAAU,GAGX,YAAXqD,EAAE1L,MACJ+oB,GAAe,GAEjB,MAAMyB,EAAYtB,EAAa7gB,SACzB,EAAEsZ,EAAC,MAAE6G,GAAUgC,EACrB,IAAInP,EAAImP,EAAUnP,EAClB,MAAMkR,EAAOxa,KAAKya,IAAInR,GAChBoR,EAAO1a,KAAKya,IAAI7K,GAMtB,GAJAsI,IACAC,GAAqB,GAGjB1B,EAAQ,EAaV,OAZAkC,EAAgB,CAAErP,EAAG,EAAGsG,EAAG,EAAG6G,MAAO,QACrC1Q,IAAkBwC,EAAAA,EAAAA,IAAc,CAC9BC,KAAM,CAACc,EAAGsG,EAAG6G,GACbhO,GAAI,CAAC,EAAG,EAAG,GACXxC,SAAU0P,GACV6D,OAAQjE,GACR7M,SAAWjP,GAAUyd,EAAa,CAChC5N,EAAG7P,EAAM,GACTmW,EAAGnW,EAAM,GACTgd,MAAOhd,EAAM,QAKnB,GAAIgd,EAAQ,EAAG,CAEb,MAAMkE,EAAK3a,KAAK4a,IAAInE,EA1QX,GA2QHoE,EAAcF,EAAKlE,EAIzB,IAAIqE,EAAKxR,EAAIuR,GAAehC,EAAevP,EAAIuR,EAAchC,EAAevP,GACxEyR,EAAKnL,EAAIiL,GAAehC,EAAejJ,EAAIiL,EAAchC,EAAejJ,GAG5E,MAAMoL,EAAI,IAGV,GAAe,UAAXrhB,EAAE1L,MAAoB0qB,EAAclC,QAAUA,EAAO,CAEvD,MAAMwE,EAAKjb,KAAKya,IAAI7B,EAAetP,IAAM0P,KAAKC,MAAQF,GAChDmC,EAAKlb,KAAKya,IAAI7B,EAAehJ,IAAMoJ,KAAKC,MAAQF,GAGtD+B,GAAM9a,KAAKya,IAAI7B,EAAetP,GAAK2R,EAAKD,EAAIlC,EAASxP,EACrDyR,GAAM/a,KAAKya,IAAI7B,EAAehJ,GAAKsL,EAAKF,EAAIlC,EAASlJ,CACvD,CAcA,OAZC+I,GAAiBgB,EAA0B,CAAErQ,EAAGwR,EAAIlL,EAAGmL,EAAItE,MAAOkE,GAjSrD,SAkSd5U,IAAkBwC,EAAAA,EAAAA,IAAc,CAC9BC,KAAM,CAACc,EAAGsG,EAAG6G,GACbhO,GAAI,CAACkQ,EAAcrP,EAAGqP,EAAc/I,EAAG+I,EAAclC,OACrDxQ,SAAU0P,GACV6D,OAAQjE,GACR7M,SAAWjP,GAAUyd,EAAa,CAChC5N,EAAG7P,EAAM,GACTmW,EAAGnW,EAAM,GACTgd,MAAOhd,EAAM,OAInB,CAMA,GALAkf,EAAgB,CACdrP,IACAsG,IACA6G,SAEEiE,GA5TgB,GA8TlB,YADA/hB,IAIF,GAAI+hB,EAAO,EAYT,YAXA3U,IAAkBwC,EAAAA,EAAAA,IAAc,CAC9BC,KAAMoH,EACNnH,GAAI,EACJxC,SAAU0P,GACV6D,OAAQjE,GACR7M,SAAWjP,GAAUyd,EAAa,CAChC5N,EAAG,EACHsG,EAAGnW,EACHgd,aAMN,MAAM4C,EAAY/P,EAAI,EAAI,GAAK,EACzBgQ,EAAchC,EAAchhB,QAC5BijB,EAAWD,GAAepD,EAAYoD,EAAahQ,EAAI,EAAI,GAAK,GAKhE6R,EAAOrC,EAASxP,EAAI,GAAK,EAAI,OAClB7Z,IAAb8pB,GAA0BiB,GAzVV,IAyVuCnB,IAAc8B,IAIvE7R,IAHgBoO,EAAchC,IAAc2D,EAI5ChC,EAAckC,GACdvB,EAAoBuB,IAGtBxT,IAAkBwC,EAAAA,EAAAA,IAAc,CAC9BC,KAAMc,EACNb,GAAI,EACJxC,SAAU0P,GACV6D,OAAQjE,GACR7M,SAAWjP,GAAUyd,EAAa,CAChCtH,EAAG,EACHtG,EAAG7P,EACHgd,MAAOA,GAAS,OAKhB5M,GAAUC,EAAAA,GAAAA,IAAcsM,EAAa9f,QAAS,CAClD8kB,cAAc,EACdC,gBAAgB,EAChBC,wBAAyB,0DACzBC,QAxWW,EAyWXC,QA1WW,EA2WXC,cA9WkB,EA+WlBC,eAAe,EACf3R,UAAYpQ,IACV,GAAIgiB,GAAqBhiB,GAAI,OAC7B,MAAM,EAAE2P,EAAC,EAAEsG,EAAC,MAAE6G,GAAUU,EAAa7gB,QACrC,GAAe,cAAXqD,EAAE1L,OACJ+oB,GAAe,GACD,IAAVP,IAMN,GADAsC,EAAkBC,KAAKC,MACb,IAAN3P,GAAiB,IAANsG,GAAqB,IAAV6G,EAAa,CACrC,IAAKJ,EAAe/f,QAAS,OAE7B,GADAuJ,EAAUwW,EAAe/f,QAAQpF,cAAc,eAC1C2O,EAAS,OAEd8W,EAAsBrgB,QAAUuJ,EAAQoJ,uBAC1C,OAXItP,EAAE6Y,kBAaRtI,OAAQA,CAAC0R,EAAOC,GACdC,cACAC,eACCC,KACD,GAAIpF,EAActgB,SAAWqlB,GAAqBC,GAAQ,OAE1D,GAAIlY,EAAAA,IAAgC,eAAtBmY,EAAa5tB,KAAuB,CAChD,MAAM,MAAEmb,GAAWyS,EAAgCI,QAAQ,GAC3D,GAAI7S,GAAS8S,GAAAA,IAA6B9S,GAASsO,EAAcwE,GAAAA,GAC/D,MAEJ,CACInW,KACFA,KACAA,QAAkBtW,GAEpBqpB,EAASxP,EAAIsP,EAAetP,EAAIwS,EAChChD,EAASlJ,EAAIgJ,EAAehJ,EAAImM,EAChCnD,EAAetP,EAAIwS,EACnBlD,EAAehJ,EAAImM,EACnB,MAAMI,EAAanc,KAAKya,IAAIqB,GACtBM,EAAapc,KAAKya,IAAIsB,IACtB,EAAEzS,EAAC,EAAEsG,EAAC,MAAE6G,GAAUU,EAAa7gB,QAOrC,GAHA4iB,IAGc,IAAVzC,GAkBJ,GAAmB,cAAfmF,EAAM3tB,KAAV,CACA,GAAIyoB,EAAkBpgB,UAAYuf,GAAewG,WAG3C3F,EAAkBpgB,UAAYuf,GAAeyG,YAC5Ctc,KAAKya,IAAInR,GAAKiT,GAAAA,IAA6BJ,EAAaC,EAAaI,GAAAA,IAA2B,CACnG9F,EAAkBpgB,QAAUuf,GAAeyG,WAC3CzN,GAAY,GACZ,MAAM4N,EAAQ/E,EAAchC,GACtBoF,GAAKtR,EAAAA,GAAAA,IAAMsS,GAAcW,EAAOA,GAatC,OAZAvF,EAAa,CACX5N,EAAGwR,EACHlL,EAAG,EACH6G,eAKiB,UAAfmF,EAAM3tB,MAAoB+R,KAAKya,IAAIK,GAAM4B,MAC3CzS,EAAU2R,GACVhF,EAActgB,SAAU,GAG5B,CAGF,GAAIogB,EAAkBpgB,UAAYuf,GAAewG,UAC5Crc,KAAKya,IAAI7K,GAAK2M,GAAAA,IAA6BH,EAAaD,EAAaK,GAAAA,GAA2B,CACnG9F,EAAkBpgB,QAAUuf,GAAewG,SAC3C,MAAMI,EAAQhF,EACRsD,GAAKvR,EAAAA,GAAAA,IAAMuS,GAAcU,EAAOA,GACtCvF,EAAa,CACX5N,EAAG,EACHsG,EAAGmL,EACHtE,UAEiB,UAAfmF,EAAM3tB,MAAoB+R,KAAKya,IAAIM,GAAM4B,MAC3C1S,EAAU2R,GACVhF,EAActgB,SAAU,EAE5B,CAxCsC,MAlBtC,CACE,MAAMwkB,EAAKnC,EAAcrP,EAAIwS,EACvBf,EAAKpC,EAAc/I,EAAImM,EAC7B,GAAI,CAAC,QAAS,aAAaa,SAAShB,EAAM3tB,MAAO,CAC/C,MAAOwqB,EAAWqB,EAAWC,GAAaJ,EAA0B,CAAErQ,EAAGwR,EAAIlL,EAAGmL,EAAItE,SAla1E,IAqaV,OAFIuF,GAAYA,GAAYlC,GAAYC,QACxC7C,EAAauB,EAEf,CACI,YAAamD,GAAkC,IAAzBA,EAAMK,QAAQ1tB,QACtC2oB,EAAa,CACX5N,EAAGwR,EACHlL,EAAGmL,EACHtE,SAIN,GA2CFoG,OAAQA,CAACljB,GACPmjB,OACAC,aACAC,iBACAC,iBACAnB,cACAC,cACAmB,iBACAC,qBAEIpX,IAAiBA,KACrBiX,EAAiBA,GAAkBtF,EAAc,EACjDuF,EAAiBA,GAAkBxF,EAAe,EAClDyF,EAAiBA,GAAkBxF,EAAc,EACjDyF,EAAiBA,GAAkB1F,EAAe,EAGlD,MAAMhB,EAAQqG,IAAQtT,EAAAA,GAAAA,IAAMmP,EAAclC,MAAQsG,EAAaK,GAAgBC,IACzExC,EAAcpE,EAAQkC,EAAclC,MACpC6G,EAAUtd,KAAKya,IAAIza,KAAK4a,IAAIjC,EAAcrP,EAAG,IAC7CiU,EAAUvd,KAAKya,IAAIza,KAAK4a,IAAIjC,EAAc/I,EAAG,IAGnDiJ,EAAevP,EAAI4T,EACnBrE,EAAejJ,EAAIuN,EAGnB,MAAMK,EAAgBF,EAAUN,EAC1BS,EAAgBF,EAAUN,EAG1BS,EAAgBF,EAAgB3C,EAAc2C,EAC9CG,EAAgBF,EAAgB5C,EAAc4C,GAE7ChF,GAAakB,EAA0B,CAC5CrQ,EAAGqP,EAAcrP,EAAIoU,EAAe5B,EACpClM,EAAG+I,EAAc/I,EAAI+N,EAAe5B,EACpCtF,UAGFS,EAAauB,IAEf5d,OAAAA,CAAQlB,GACNqd,GAAe,GACf,MAAO4G,EAAeC,GAAgBpE,EAAmB9f,GACzD,GAAIikB,EAAJ,CAGE,GAFAjkB,EAAE6Y,iBACF7Y,EAAEuJ,kBACEZ,EAAAA,GAAc,OACbub,GAAcllB,GAErB,MAC4B,IAAxBggB,EAAclC,OAAenU,EAAAA,KAC7B8V,GAAuB0F,GAAsBnkB,EAAEC,OAAuB,iBACxEjB,GAEJ,EACAoa,aAAAA,CAAcpZ,GAAG,QACfqgB,EAAO,QACPC,IAEA,MAAO2D,GAAiBnE,EAAmB9f,GAC3C,GAAIikB,EAGF,OAFAjkB,EAAE6Y,sBACF7Y,EAAEuJ,kBAGJ,IAAKZ,EAAAA,IAA2B,UAAX3I,EAAE1L,KAAkB,OACzC,MAAM,EAAEqb,EAAC,EAAEsG,EAAC,MAAE6G,GAAUU,EAAa7gB,QAIrC,GAAc,IAAVmgB,EAAa,CACf,GAAU,IAANnN,GAAiB,IAANsG,EAAS,OACxB+I,EAAgBgB,EAA0B,CACxCrQ,EALkB0Q,EAliBN,EAkiBkCA,EAM9CpK,EALkBqK,EAniBN,EAmiBkCA,EAM9CxD,MAziBY,IA0iBX,EACL,MACEkC,EAAgB,CACdrP,EAAG,EACHsG,EAAG,EACH6G,MAAO,GAGX1Q,IAAkBwC,EAAAA,EAAAA,IAAc,CAC9BC,KAAM,CAACc,EAAGsG,EAAG6G,GACbhO,GAAI,CAACkQ,EAAcrP,EAAGqP,EAAc/I,EAAG+I,EAAclC,OACrDxQ,SAAU0P,GACV6D,OAAQjE,GACR7M,SAAWjP,IACT,MAAMgf,EAAY,CAChBnP,EAAG7P,EAAM,GACTmW,EAAGnW,EAAM,GACTgd,MAAOhd,EAAM,IAEfyd,EAAauB,KAGnB,EACAxO,cAGF,OADAtb,SAASkU,iBAAiB,UAAWyP,GAAe,GAC7C,KACLzI,IACAlb,SAASmU,oBAAoB,UAAWwP,GAAe,MAG3D,CACEgF,EACAY,EACAG,EACAnC,EACAnL,EACA3I,EACAzJ,EACAqf,EACAX,EACAc,EACAjB,EACAkB,EACAjB,EACAM,EACAC,EACA5D,KAGFzc,EAAAA,EAAAA,KAAU,KACR,MAAMwH,EAAa/D,IACbijB,OAA+CtuB,IAA9BonB,EAAkBvgB,SACpCugB,EAAkBvgB,UAAYuI,EACnC,IAAKuX,EAAa9f,UAAYynB,GAAkB3b,GAAY2I,EAAc,OAC1E8L,EAAkBvgB,QAAUuI,EAC5B,MAAM,MAAE4X,GAAUU,EAAa7gB,QACzB6M,EAAMtE,EAAa,GAAK,EAAI,EAGlC,IAAImf,EAAQ,IACRC,EAAY,EACZxH,GAJY2G,IAIQja,EAAM,GAC1BsT,GAJY4G,IAIQla,EAAM,IAChB,IAAVsT,GAAetT,EAAM,IAAG6a,EAAQ,IAChCpI,IAAqBA,KACzBA,IAAsBrN,EAAAA,EAAAA,IAAc,CAClCC,KAAMrF,EACNsF,GAAItF,EAAM6a,EACV/X,SAAU0P,GACV6D,OAAQhE,GACR9M,SAAWjP,IACT,IAAK2c,EAAa9f,QAAS,OAC3B,MAAM4nB,GAAQ9e,EAAAA,GAAAA,IAAM3F,EAAQwkB,EAAW,GACvCA,EAAYxkB,EAEZ,MAAM0kB,EAAa,IAAIC,WAAW,QAAS,CACzCC,OAAQH,EACRI,SAAS,IAEXlI,EAAa9f,QAAQioB,cAAcJ,SAGtC,CAACrjB,EAAesH,EAAU2I,EAAcoM,IAE3C,MAAOqH,GAAUjF,KAAY1kB,EAAAA,EAAAA,KAAQ,SAChBpF,IAAf+nB,EAAiC,MAAC/nB,OAAWA,GAC1C,CAACymB,EAAYsB,GAAa,GAAItB,EAAYsB,EAAY,KAC5D,CAACA,EAAYtB,IAEhB,QAAmBzmB,IAAf+nB,EAA0B,OAE9B,MAAMiH,QAAuBhvB,IAAb+uB,GACVE,QAAuBjvB,IAAb8pB,GACVxF,GAAWgD,GAAeQ,EAEhC,OACE5qB,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oBAAoBkU,IAAKqV,EAAatpB,SAAA,EACnDC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,mBAAmBkU,IAAKuV,EAAaxpB,SACjD2xB,KAAYlH,IAAaI,IACxB5qB,EAAAA,GAAAA,GAAC8mB,GAAkB,CACjBC,cAAeA,EACfC,SAAUA,GACVrY,KAAM8iB,GACN7lB,QAASA,EACTqb,cAAeA,EACfjS,qBAAsBA,OAI5BhV,EAAAA,GAAAA,GAAA,OACEF,WAAWoW,EAAAA,GAAAA,GACT,mBACA,2BACA8Q,IAAY,4BAEdlZ,QAASyd,GACTvX,IAAKsV,EAAevpB,UAEpBC,EAAAA,GAAAA,GAAC8mB,GAAkB,CACjBnY,KAAM8b,EACN1D,cAAeA,EACfxN,SAAUA,EACVyN,SAAUA,GACVpb,QAASA,EACTqb,cAAeA,EACfjS,qBAAsBA,OAG1BhV,EAAAA,GAAAA,GAAA,OAAKF,UAAU,mBAAmBkU,IAAKwV,EAAczpB,SAClD4xB,KAAYnH,IAAaI,IACxB5qB,EAAAA,GAAAA,GAAC8mB,GAAkB,CACjBC,cAAeA,EACfC,SAAUA,GACVrY,KAAM6d,GACN5gB,QAASA,EACTqb,cAAeA,EACfjS,qBAAsBA,MAI3B0c,KAAYlH,IAAajV,EAAAA,KACxBvV,EAAAA,GAAAA,GAAA,UACEkB,KAAK,SACLpB,UAAW,mBAAmBwH,IAAYxE,GAAS,WACnD,aAAYgK,EAAK,oBACjBsJ,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,IAG7BivB,KAAYnH,IAAajV,EAAAA,KACxBvV,EAAAA,GAAAA,GAAA,UACEkB,KAAK,SACLpB,UAAW,mBAAmBwH,IAAYxE,GAAS,WACnD,aAAYgK,EAAK,QACjBsJ,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,UASpC,SAASipB,GAAkBpP,EAAI,EAAGsG,EAAI,EAAG6G,EAAQ,GAC/C,MAAO,eAAenN,EAAEsV,QAAQ,SAAShP,EAAEgP,QAAQ,oBAAoBnI,EAAMmI,QAAQ,KACvF,CAEA,SAASd,GAAsBe,EAAsBC,GACnD,QAAKD,MACDA,EAAQE,QAAQD,IACbjnB,QAAQgnB,EAAQnF,QAAQoF,IACjC,CAEA,SAASnD,GAAqBhiB,GAC5B,MAAMC,EAASD,EAAEC,OACjB,QAAIkkB,GAAsBlkB,EAAQ,0BAC5BkkB,GACFlkB,EACA,gGAIFD,EAAE6Y,kBAFO,EAMb,C,uCCxwBA,MA8FA,IAAe/W,EAAAA,EAAAA,KACb,CAACrN,GAAUsN,WACT,MAAM/N,EAAyB,YAAf+N,GAAMzN,KAAqByN,EAAK/N,aAAU8B,EACpDuvB,EAAgBrxB,IAAWsxB,EAAAA,EAAAA,KAAa7wB,EAAQT,GAItD,MAAO,CACLuxB,MAH2B,WAAfxjB,GAAMzN,KAAoByN,EAAK9N,YAAcoxB,KAL/D,EA3F8CG,EAC5CD,QACAxjB,WAEA,MAAM,iBACJ0jB,EAAgB,aAChBC,EAAY,eACZC,IACExmB,EAAAA,EAAAA,OAEE,SAAE3M,IAAaC,EAAAA,EAAAA,MAEfmzB,GAAqBlmB,EAAAA,EAAAA,IAAgB,KAGzC,GAFA+lB,IAEmB,YAAf1jB,GAAMzN,KAAoB,OAE9B,MAAMN,EAAU+N,EAAK/N,QAEjBxB,EACFwL,YAAW,KACT2nB,EAAe,CAAEE,OAAO,GAAS,CAAEC,gBAAgB,IACnDJ,EAAa,CAAE/lB,OAAQ3L,EAAQ2L,OAAQiM,UAAW5X,EAAQf,OAxBvC,KA2BrByyB,EAAa,CAAE/lB,OAAQ3L,EAAQ2L,OAAQiM,UAAW5X,EAAQf,QAIxDiN,GAAOC,EAAAA,EAAAA,KAEP4lB,GAAW7qB,EAAAA,EAAAA,KAAQ,KACvB,IAAK6G,GAAsB,eAAdA,EAAKzN,KAAuB,OAEzC,MAAML,EAA4B,WAAd8N,EAAKzN,KAAoByN,EAAK9N,iBAAc6B,EAC1D5B,EAA8B,WAAd6N,EAAKzN,KAAoByN,EAAK7N,mBAAgB4B,EAC9DjB,EAASX,GAAeY,OAAOiN,EAAK3N,YACpC4xB,EAAmBnxB,GAAQ5B,KAAOiB,GAAe+xB,eAAehzB,GAChEizB,EAAmBrxB,GAAQ5B,KAAOiB,GAAeiyB,eAAelzB,GAChEmzB,EAAqB,YAAdrkB,EAAKzN,KAAqByN,EAAK/N,QAAQoyB,KAAOvxB,GAAQuxB,KACnE,IAAKA,EAAM,OAEX,MAAMC,GAAgBC,EAAAA,GAAAA,IAAoBpmB,EAAa,IAAPkmB,GAAa,GACvDG,EAAQryB,GAAeqyB,OACvBryB,EAAcqyB,OAASryB,GAAe+xB,cAAgB,EAAI,GAC1DO,EAAezkB,EAAK3N,WAAc,GAAKF,GAAeiyB,eAAiB,EAAI,GAC3EM,EAAYF,GAASrmB,EAAK,KAAM,CAACsmB,EAAcD,IAE/CG,EAAkB,GACxB,GAAI7xB,EAAQ,CACV,MAAMwN,GAAQR,EAAAA,EAAAA,IAAS5N,EAAahB,SAA+B6C,EAAzB7B,EACpC0yB,EAAYtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,GAClCwkB,EAAUxkB,IAAQykB,EAAAA,EAAAA,IAAYzkB,GACpCqkB,EAAMvgB,KAAKjG,EACTgmB,EAAmB,qCACfF,EAAmB,qCACjBW,EAAY,8BACVE,EAAU,4BAA8B,+BAEpD,CAQA,OANIJ,GAAcP,GAAqBF,GACrCU,EAAMvgB,KAAKsgB,GAGbC,EAAMvgB,KAAKkgB,GAEJK,EAAM5M,KAAK,SACjB,CAAC/X,EAAM7B,IAEV,IAAKqlB,EACH,OAGF,MAAMwB,GAAcC,EAAAA,GAAAA,IAAa9mB,EAAMqlB,GAEvC,OACEvyB,EAAAA,GAAAA,IAAA,OAAKE,UAAU,aAAagO,QAAS0kB,EAAmBzyB,SAAA,EACtDC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CAAgB3zB,KAAK,SAAS4zB,KAAM3B,GAA9BA,EAAMtyB,KACnBD,EAAAA,GAAAA,IAAA,OAAKE,UAAU,OAAMC,SAAA,EACnBC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,QAAQsW,IAAI,OAAMrW,SAC9B4zB,IAAeI,EAAAA,GAAAA,GAAWJ,MAE7B3zB,EAAAA,GAAAA,GAAA,OAAKF,UAAU,OAAOsW,IAAI,OAAMrW,SAC7B4yB,aC1BL/J,GAAqB,IAwY3B,IAAejqB,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM,YAAE0N,EAAW,4BAAEilB,IAAgCllB,EAAAA,EAAAA,KAAezN,IAC9D,OACJkL,EAAM,SACN8C,EAAQ,UACRmJ,EAAS,OACTvV,EAAM,SACNoS,EAAQ,mBACR4e,EAAkB,gBAClBlzB,EAAe,WACfC,EAAU,aACViR,EAAY,mBACZwO,GACE1R,EACEgY,GAAgBmN,EAAAA,EAAAA,KAA+B7yB,EAAQ,0BAEvD,cAAE8yB,EAAa,SAAElL,GAAa5nB,EAC9B+yB,EAAiBtpB,QAAQyB,KAAW8nB,EAAAA,EAAAA,KAAqBhzB,EAAQkL,GAEvE,GAAI0F,EAAc,CAChB,MAAMpR,GAAcyzB,EAAAA,EAAAA,KAAWjzB,EAAQkL,GACvC,IAAIqC,GAAiB,EACjB/N,IACF+N,GAAiBH,EAAAA,EAAAA,IAAS5N,EAAYhB,IAClCgB,EAAYhB,KAAOs0B,GAAgBI,EAAAA,EAAAA,IAAY1zB,IAGrD,MAAMC,GAAgB0zB,EAAAA,EAAAA,KAAiBnzB,EAAQkL,GAEzCkoB,EAAc9zB,EAAmB,CACrCE,cAAaE,kBAAiBD,gBAAeE,eAEzCoP,EAAgBhP,EAAoBC,EAAQozB,GAElD,MAAO,CACL3zB,gBACAW,OAAQX,GAAeY,OAAOV,GAC9BH,cACAmoB,mBAAoBloB,GAAe4zB,UACnCN,iBACAxlB,iBACAmY,gBACA9jB,SACA+wB,8BACA3e,WACAtU,kBACAC,aACAioB,WACAwL,cACArkB,gBAEJ,CAEA,IAAIxP,EASAK,EAOA0zB,EAfApoB,GAAUiM,IAEV5X,EADEqC,GAAU,CAACc,EAAAA,GAAkBW,eAAgBX,EAAAA,GAAkBsB,iBAAiBwqB,SAAS5sB,IACjF2xB,EAAAA,EAAAA,KAAuBvzB,EAAQkL,EAAQiM,IAEvCqc,EAAAA,EAAAA,KAAkBxzB,EAAQkL,EAAQiM,IAK5CiI,GAAsBlU,GACpBtJ,IAAWc,EAAAA,GAAkBoB,mBAC/BlE,GAAmB6zB,EAAAA,EAAAA,KAAuBzzB,EAAQkL,IAMlDA,IAEAooB,EADE1xB,GAAU,CAACc,EAAAA,GAAkBW,eAAgBX,EAAAA,GAAkBsB,iBAAiBwqB,SAAS5sB,IAC5E8xB,EAAAA,EAAAA,KAA4B1zB,EAAQkL,IAEpCyoB,EAAAA,EAAAA,KAAmB3zB,EAAQkL,IAI9C,IAAIyc,GAAqB,EACzB,MAAMiM,EAAiBhyB,IAAWc,EAAAA,GAAkBuB,OAC9C4vB,EAAgBjyB,IAAWc,EAAAA,GAAkBU,MACnD,IAAI0wB,EAEJ,GAAI5oB,GAAU8C,GAAYmJ,EACxB,GAAIyb,IAAuBgB,GAAkBC,GAAgB,CAC3D,MAAME,GAAgBC,EAAAA,EAAAA,KAA6Bh0B,GACnD2nB,EAAqBle,QAAQsqB,GAAeV,WAC5C,MAAM,SAAEY,GAAcF,GAAeG,gBAAmB,CAAC,EACzDJ,EAAsBG,CACxB,MAAO,GAAIryB,IAAWc,EAAAA,GAAkBc,YAAa,CACnD,MAAMuwB,GAAgBI,EAAAA,EAAAA,KAA+Bn0B,IAC/C,SAAEi0B,GAAcF,GAAiBA,EAAcK,eAAiBL,EAAcK,cAAct0B,OAAU,CAAC,EAC7Gg0B,EAAsBG,CACxB,MAAWL,GAAkBC,KAE3BC,GADqBO,EAAAA,EAAAA,KAA8Br0B,EAAQkL,EAAQ8C,EAAUmJ,KACvCmd,EAAAA,EAAAA,KAAgBt0B,EAAQkL,EAAQ8C,IAI1E,MAAMolB,EAAc9zB,EAAmB,CACrCC,UAASG,kBAAiBC,aAAYC,qBAIxC,MAAO,CACLsL,SACA8C,WACAmJ,YACA4b,iBACAnxB,SACArC,UACA+zB,eACA1zB,mBACAk0B,sBACApO,gBACA1R,WACA2e,8BACAC,qBACAlzB,kBACAC,aACAgoB,qBACAC,WACAwL,cACArkB,cArBoBhP,EAAoBC,EAAQozB,MAxGlC/lB,EArYAknB,EAClBrpB,SACA8C,WACAmJ,YACA5X,UACAu0B,sBACAf,iBACAxlB,iBACA3L,SACAxB,SACAZ,cACAC,gBACA6zB,eACA1zB,mBACAF,kBACAC,aACA+lB,gBACA1R,WACA2e,8BACAC,qBACAjL,qBACAC,WACAwL,eACArkB,qBAEA,MAAM,gBACJe,GAAe,iBACfkhB,GAAgB,gBAChBwD,GAAe,aACfvD,GAAY,eACZC,GAAc,wBACduD,GAAuB,sBACvBC,GAAqB,eACrBC,GAAc,QACdC,KACElqB,EAAAA,EAAAA,MAEEL,GAASZ,QAAQjK,GAAeD,GAAWG,GAAmBE,IAC9D,SAAE7B,KAAaC,EAAAA,EAAAA,OAEf,MAAE8B,GAAK,SAAEI,IAAa6O,IAAiB,CAAC,EAGxC8lB,IAAe9sB,EAAAA,EAAAA,MACf+sB,GAAWv1B,GAASu1B,UAAYt1B,GAAahB,IAAMe,GAAS2L,OAC5D6pB,IAAeC,EAAAA,EAAAA,GAA0CF,IACzDG,GAAkBvP,EAAgB,YAAc,OAChDwP,GAAmBzrB,QAAQic,IAAkBiN,IAG5CwC,GAAyBC,GAAuBC,KAA0Bz3B,EAAAA,EAAAA,MAE3E,QACJqI,GAAO,QACPI,GAAO,cACPsB,GAAa,SACbiC,GAAQ,WACRI,GAAU,MACVvI,GAAK,kBACL6E,IACEV,EAAc,CAChB9F,SAAO+F,SAAU4D,QAAQjK,GAAcoC,SAAQkE,MAAOovB,IAAoB3N,KAGtEtY,GAAkB,MACtB,GAAI8jB,EAAgB,OAAO,EAC3B,GAA0B,WAAtBK,IAAavzB,OAAsBL,EAAa,OAAO,EAC3D,MAAM81B,EAAOlC,GAAY3zB,cACzB,OAAIK,KAAUw1B,EAAK5D,aAEpB,EANuB,GAOlB5T,IAAa9J,GAAY3J,GAEzBkrB,IAAkB9uB,EAAAA,EAAAA,KAAQ,IACvBmsB,EACHkB,GACA0B,EAAAA,EAAAA,IAAuBlC,GAAgB,CAAC,EAAGQ,GAAuB,GAAIxtB,KACzE,CAACgtB,EAAcQ,EAAqBxtB,GAAmBssB,KAEtDvoB,IAAY0qB,IAAgBA,KAAiBD,SAAqCzzB,IAAzBwzB,GAAa3sB,UACxE2sB,GAAa3sB,QAAUhI,GAAW,EAAKiX,GAAaxX,GAGtD,MAAO81B,IrBtKA/wB,GqBwKPuE,EAAAA,EAAAA,KAAU,KACR,IAAKoB,IAAUorB,KACb,QAGFC,EAAAA,EAAAA,MACA,MAAMC,GAAuBC,EAAAA,EAAAA,MAE7B,MAAO,KACLD,KACAE,EAAAA,EAAAA,SAED,CAACxrB,GAAQorB,MAEZxsB,EAAAA,EAAAA,KAAU,KACJ6U,IACF7Y,MAED,CAAC6Y,MAEJ7U,EAAAA,EAAAA,KAAU,KACJlL,KACF+Y,EAAAA,EAAAA,KAAgB,KACdvW,SAASwd,KAAKhc,UAAU+zB,OAAO,uBAAwBzrB,SAG1D,CAACtM,GAAUsM,KAEd,MAAM0rB,IAAYhuB,EAAAA,EAAAA,OAClBiuB,EAAAA,EAAAA,GAAgBD,IAEhB,MAAMjtB,IAAcC,EAAAA,EAAAA,MACpBE,EAAAA,EAAAA,KAAU,KACR,MAAMgtB,EAAM3sB,OAAO4sB,WAAWC,EAAAA,IAG9B,OAFAF,EAAIxhB,iBAAiB,SAAU3L,IAExB,KACLmtB,EAAIvhB,oBAAoB,SAAU5L,OAEnC,CAACA,KAEJ,MAAMstB,IAAcpB,EAAAA,EAAAA,GAA8Cz1B,GAC5D82B,IAAerB,EAAAA,EAAAA,GAA2ChhB,GAC1DsiB,IAAatB,EAAAA,EAAAA,GAAsBpzB,GACnCwuB,IAAW4E,EAAAA,EAAAA,GAAsB5B,IACjCmD,IAAoBvB,EAAAA,EAAAA,GAAsBrtB,IAC1C8e,GAAYlnB,GAAUmnB,EAAAA,EAAAA,GAAkB,CAAEnnB,UAASonB,eAAe,EAAMC,kBAAkB,SAAUvlB,EACpGwlB,GAAYpd,QAAQgd,IACpB+P,GAAuBH,IAAgBjG,KAAagD,IAE1DnqB,EAAAA,EAAAA,KAAU,KACJisB,IAAoB7qB,KAAWmsB,KAAyBpG,OAC1DqG,EAAAA,EAAAA,IAAoBlP,GAAqBmP,EAAAA,KtBtNxC,SACL7P,EACAjlB,EACA+F,EACAqC,EACA/D,EACA1G,EACAI,GAEA,MAAQ0E,QAASsyB,GAAc3zB,EAASpB,EAAQrC,EAASI,GACzD,IAAKg3B,EACH,OAGF,MAAQxuB,MAAOmhB,GAAgBsN,EAAAA,EAAWhuB,OAExCT,MAAO0uB,EAAgBruB,OAAQsuB,IAC7BC,EAAAA,EAAAA,IAAkClQ,EAAW5gB,IACzCkC,MAAO6uB,EAASxuB,OAAQyuB,IAAaC,EAAAA,EAAAA,IAC3CL,EAAgBC,EAAiB9sB,EAAW7B,MAAO6B,EAAWxB,QAE1D2uB,GAAU7N,EAAc0N,GAAW,EACnCI,EA6OR,SAAsBvQ,GACpB,MAAMoP,EAAM3sB,OAAO4sB,WAAWC,EAAAA,IAC9B,IAAIkB,EAAe,MAKnB,OAJIxQ,IAAc3S,EAAAA,KAChBmjB,GAAgBpB,EAAItF,QAAU,KAAQ,OAGjC0G,EAAe/iB,EAAAA,CACxB,CArPgBgjB,CAAazQ,IAAciQ,EAAkBG,GAAY,EAEvE,IACElV,IAAKwV,EAAS/c,KAAMgd,EAAUrvB,MAAOsvB,EAAWjvB,OAAQkvB,GACtDf,EAAU9b,wBAEd,GAAI,CACFnY,EAAAA,GAAkBc,YAClBd,EAAAA,GAAkBU,MAClBV,EAAAA,GAAkBW,eAClBX,EAAAA,GAAkBe,cAClB+qB,SAAS5sB,GAAS,CAClB,MAAM+1B,EAkMV,SAAiBC,EAAmBC,EAAoB9V,EAAavH,EAAcrS,EAAeK,GAChG,GAAIovB,IAAcC,EAAY,CAC5B,MAAMh5B,EAAO+S,KAAKma,IAAI5jB,EAAOK,IAAWovB,EAAYC,GACpDrd,IAAS3b,EAAOsJ,GAAS,EACzB4Z,IAAQljB,EAAO2J,GAAU,EACzBL,EAAQtJ,EACR2J,EAAS3J,CACX,MAAO,GAAI+4B,EAAYC,EAAY,CACjC,MAAMC,EAAW3vB,EAEjBqS,KADArS,EAAQK,GAAUovB,EAAYC,IACbC,GAAY,CAC/B,MAAO,GAAID,EAAaD,EAAW,CACjC,MAAMG,EAAYvvB,EAElBuZ,KADAvZ,EAASL,GAAS0vB,EAAaD,IACdG,GAAa,CAChC,CAEA,MAAO,CACLhW,MAAKvH,OAAMrS,QAAOK,SAEtB,CAtNsBwvB,CAAQhB,EAASC,EAAUM,EAASC,EAAUC,EAAWC,GAC3EH,EAAUI,EAAU5V,IACpByV,EAAWG,EAAUnd,KACrBid,EAAYE,EAAUxvB,MACtBuvB,EAAaC,EAAUnvB,MACzB,CAEA,MAAMyvB,EAAkBT,EAAWC,EAAY,GAAMN,EAASH,EAAU,GAClEkB,EAAkBX,EAAUG,EAAa,GAAMN,EAAQH,EAAW,GAClEkB,EAAaV,EAAYT,EACzBoB,EAAaV,EAAaT,GAEhCngB,EAAAA,EAAAA,KAAgB,KACd,MAAMjV,EAAQH,EAAYiG,GAAiBgvB,IAC3C0B,EAAAA,EAAAA,IAAYx2B,EAAO,CACjBkgB,IAAK,GAAGqV,MACR5c,KAAM,GAAG2c,MACThvB,MAAO,GAAG6uB,MACVxuB,OAAQ,GAAGyuB,MACX5M,UAAW,eAAe4N,QAAqBC,iBAA8BC,MAAeC,OAE9F9zB,EAAWzC,EAAOD,GAElBrB,SAASwd,KAAKtb,YAAYZ,GAC1BtB,SAASwd,KAAKhc,UAAUC,IAAI,oBAE5B8U,EAAAA,EAAAA,KAAgB,KACdjV,EAAM2C,MAAM6lB,UAAY,GAqT9B,SAAoBxoB,GACjBA,EAAM0C,WAA2BC,MAAMC,UAAY,UACpD5C,EAAME,UAAUic,OAAO,kBAAmB,SAC5C,CAvTMsa,CAAWz2B,GAEX0H,YAAW,MACTuN,EAAAA,EAAAA,KAAgB,KACVvW,SAASwd,KAAKwa,SAAS12B,IACzBtB,SAASwd,KAAKya,YAAY32B,GAE5BtB,SAASwd,KAAKhc,UAAUic,OAAO,wBAvEd,IAyEG0Y,EAAAA,UAG9B,CsB6IM+B,CAAe5R,GAAWjlB,EAAS+F,GAAgBqC,GAAa/D,GAAS1G,EAASI,IAGhFu1B,KAAqB7qB,IAAU+lB,MACjCqG,EAAAA,EAAAA,IAAoBlP,GAAqBmP,EAAAA,KtB/IxC,SACL90B,EAA2B+F,EAAuBpI,EAAsBI,GAExE,MAAM,UAAEuE,EAAWG,QAASq0B,GAAY11B,EAASpB,EAAQrC,EAASI,GAClE,IAAK+4B,EACH,OAGF,MAAM/B,EAAYp2B,SAASo4B,eAAe,eAAgB71B,cACxD,kEAEF,IAAK6zB,EACH,OAGF,MACE5U,IAAKwV,EAAS/c,KAAMgd,EAAUrvB,MAAOsvB,EAAWjvB,OAAQkvB,GACtDf,EAAU9b,yBAEZkH,IAAK6W,EAAWpe,KAAM2c,EAAQhvB,MAAO6uB,EAASxuB,OAAQyuB,GACpDyB,EAAQ7d,wBAEZ,IAAIuc,EAAQwB,EACZ,KAAKC,EAAAA,EAAAA,GAAoB30B,GAAY,CACnC,MAAQsE,OAAQ6gB,GAAiBuN,EAAAA,EAAWhuB,MAC5CwuB,EAAQwB,EAAYrB,GAAWN,EAAW5N,CAC5C,CAEA,MAAM4O,EAAkBT,EAAWC,EAAY,GAAMN,EAASH,EAAU,GAClEkB,EAAkBX,EAAUG,EAAa,GAAMN,EAAQH,EAAW,GACxE,IAAIkB,EAAaV,EAAYT,EACzBoB,EAAaV,EAAaT,EAE9B,MAAM6B,EACJ,CACEp2B,EAAAA,GAAkBuB,OAClBvB,EAAAA,GAAkBsB,gBAClBtB,EAAAA,GAAkBU,MAClBV,EAAAA,GAAkBW,gBAClBmrB,SAAS5sB,KAuIf,SAAoCm3B,GAClC,MAAMC,EAAqBz4B,SAASuC,cAA8B,4CAE5D,IAAEif,IAAQkX,EAAAA,EAAAA,GAAqBF,EAASC,GAE9C,OAAOjX,EAAMiX,EAAmBE,WAC3BnX,EAAMgX,EAAQI,aAAeH,EAAmBE,UAAYF,EAAmBG,YACtF,CA7IQC,CAA2BV,GAG7B,CACFh2B,EAAAA,GAAkBc,YAClBd,EAAAA,GAAkBU,MAClBV,EAAAA,GAAkBW,eAClBX,EAAAA,GAAkBe,cAClB+qB,SAAS5sB,KACLu2B,EAAaC,EACfD,EAAaC,EACJA,EAAaD,IACtBC,EAAaD,IAIjB,MAAMkB,EAAgB94B,SAAS+4B,uBAAuB,SAAS,GACzDz3B,EAAQw3B,GAAiB33B,EAAYiG,GAAiB+wB,EAAS92B,GAErE,IAAIsa,EACJ,GAAImd,EAAe,CACjB,MAAM,IACJtX,EAAG,KAAEvH,EAAI,MAAErS,EAAK,OAAEK,GAChB6wB,EAAcxe,wBAIlBqB,EAAS,CACPqd,WAAY,OACZxX,IAAK,GAAGqV,MACR5c,KAAM,GAAG2c,MACTqC,gBAAiB,WACjBnP,UAAW,eAAe7P,EAAO2c,QAAapV,EAAMqV,iBARvCjvB,EAAQ6uB,MACRxuB,EAASyuB,KAQtB9uB,MAAO,GAAG6uB,MACVxuB,OAAQ,GAAGyuB,MAEf,MACE/a,EAAS,CACP6F,IAAK,GAAGqV,MACR5c,KAAM,GAAG2c,MACThvB,MAAO,GAAG6uB,MACVxuB,OAAQ,GAAGyuB,MACX5M,UAAW,eAAe4N,QAAqBC,iBAA8BC,MAAeC,OAIhGthB,EAAAA,EAAAA,KAAgB,MACduhB,EAAAA,EAAAA,IAAYx2B,EAAOqa,GACdmd,GAAe94B,SAASwd,KAAKtb,YAAYZ,GAC9CtB,SAASwd,KAAKhc,UAAUC,IAAI,oBAE5B8U,EAAAA,EAAAA,KAAgB,KACVuiB,IACFA,EAAc70B,MAAM+0B,WAAa,IAGnC13B,EAAM2C,MAAM6lB,UAAY,GAEpByO,IACFj3B,EAAM2C,MAAMi1B,QAAU,KAGxBn1B,EAAWzC,EAAOD,GAElB2H,YAAW,MACTuN,EAAAA,EAAAA,KAAgB,KACVvW,SAASwd,KAAKwa,SAAS12B,IACzBtB,SAASwd,KAAKya,YAAY32B,GAE5BtB,SAASwd,KAAKhc,UAAUic,OAAO,wBA3Ld,IA6LG0Y,EAAAA,UAG9B,CsB8BMgD,CAAepD,GAAaC,GAAoBH,GAAahG,IAAUzwB,eAExE,CACDgI,GAAeqC,GAAY6c,GAAWqO,GAAkB7qB,GAAQpE,GAAS1G,EAASqC,EAClF20B,GAAmBnG,GAAUgG,GAAaE,GAAYE,GAAsB72B,IAG9E,MAAMg6B,IAAc1uB,EAAAA,EAAAA,IAAgB,IAAM+lB,OAEpC4I,IAAoB3uB,EAAAA,EAAAA,IAAiBM,IACrCA,EAAEC,kBAAkBquB,aAAetuB,EAAEC,OAAO8f,QAAQ,OAExDqO,KAEKzuB,GAAWiM,IAEZpZ,GACFwL,YAAW,KACT2nB,GAAe,CAAEE,OAAO,GAAS,CAAEC,gBAAgB,IACnDJ,GAAa,CAAE/lB,SAAQ8C,WAAUmJ,gBAChCoQ,IAEH0J,GAAa,CAAE/lB,SAAQ8C,WAAUmJ,mBAI/BxD,IAAuB1I,EAAAA,EAAAA,IAAiB6uB,IACvCl6B,GAAqBsL,IAE1BypB,GAAe,CAAEoF,QAASD,EAAand,cAAc,EAAMqd,SAAUp6B,EAAiBo6B,WACtFpF,GAAQ,CAAE3e,IAAKrW,EAAiBqW,MAChC+a,SAGIiJ,IAAgBhvB,EAAAA,EAAAA,IAAgB,KACpCupB,GAAgB,CACd0F,WAAYhvB,EACZmG,WAAY,CAAC8F,SAIjBlO,EAAAA,EAAAA,KAAU,IAAOoB,IAAS8vB,EAAAA,EAAAA,IAAsB,KAC9CR,aACGt4B,GAAY,CAACs4B,GAAatvB,MAE/BpB,EAAAA,EAAAA,KAAU,KACJhD,KAAYxE,KACd24B,EAAAA,EAAAA,QAED,CAAC34B,GAAOwE,KAEX,MAAM4hB,IAAwB5c,EAAAA,EAAAA,IAAiBqC,IAC7C,GAAKA,IAAQqa,EAAb,CAEA,GAAkB,WAAdra,EAAKzN,KAAmB,CAE1B,KADkByN,EAAK3N,YAAc2N,EAAK7N,cAAcY,OAAOF,OAxMzC,GAyMN,OAChBu0B,GAAsB,CAAEpqB,OAAQgD,EAAK9N,YAAYhB,IACnD,CAEkB,YAAd8O,EAAKzN,MAAsB+yB,GAC7B6B,GAAwB,CAAEvpB,SAAQ8C,WAAUqsB,sBAAuB/sB,EAAK/N,QAAQf,IAT3C,KAanCspB,IAAc7c,EAAAA,EAAAA,IAAgB,CAACmP,EAAuB6Q,KAC1D,GAAkB,IAAdA,GAAmB/qB,GAAU,OAEjC,GAAkB,eAAdka,EAAKva,KAAuB,CAC9B,MAAQC,MAAOw6B,EAAW36B,WAAY46B,GAAmBngB,EACnDogB,EAAYD,EAAiBtP,EACnC,OAAIuP,GAAa,GAAKA,EAAYF,EAAUn6B,OACnC,CAAEN,KAAM,aAAcC,MAAOw6B,EAAW36B,WAAY66B,QAG7D,CACF,CAEA,GAAkB,WAAdpgB,EAAKva,KAAmB,CAC1B,MAAQL,YAAai7B,EAAiBh7B,cAAei7B,EAAmB/6B,WAAY46B,GAAmBngB,EACjGogB,EAAYD,EAAiBtP,EACnC,OAAIuP,GAAa,GAAKE,GAAqBF,EAAYE,EAAkBr6B,OAAOF,OACvE,CACLN,KAAM,SACNL,YAAai7B,EACbh7B,cAAei7B,EACf/6B,WAAY66B,QAIhB,CACF,CAEA,GAAkB,qBAAdpgB,EAAKva,KAA6B,CACpC,MAAQN,QAASo7B,EAAsBh7B,WAAYi7B,GAA8BxgB,EAC3EogB,EAAYI,EAA6B3P,EAC/C,OAAIuP,GAAa,GAAKG,EACb,CAAE96B,KAAM,mBAAoBN,QAASo7B,EAAsBh7B,WAAY66B,QAGhF,CACF,CAEA,MAAQj7B,QAASs7B,EAAal7B,WAAY46B,GAAmBngB,EAEvD1Z,GAAYo6B,EAAAA,EAAAA,IAAoBD,GACtC,GAAIn6B,EAAW,CACb,MAAM85B,EAAYD,EAAkBtP,EAEpC,GAAIuP,GAAa,GAAKA,EAAY95B,EAAUY,cAAcnB,OACxD,MAAO,CAAEN,KAAM,UAAWN,QAASs7B,EAAal7B,WAAY66B,EAEhE,CAEA,MAAMv3B,EAAQsyB,IAAiBwF,QAAQF,EAAYr8B,IACnD,QAAc6C,IAAV4B,EAAqB,OACzB,MACM+3B,EAAgBzF,GADJtyB,EAAQgoB,GAEpBgQ,EAAc3H,IAAe0H,GACnC,OAAIC,EACK,CAAEp7B,KAAM,UAAWN,QAAS07B,QADrC,KAOIC,IAAsBjwB,EAAAA,EAAAA,IAAiBqC,IAC3C,IAAKA,EAEH,YADAqsB,KAIF,MAAMwB,EAA2B,WAAd7tB,EAAKzN,KACpByN,EAAK9N,YAAYhB,GAAmB,YAAd8O,EAAKzN,KACzByN,EAAK/N,QAAQ2L,YAAS7J,EACtB+5B,EAA8B,YAAd9tB,EAAKzN,KAAqByN,EAAK/N,QAAQf,QAAK6C,EAC5Dg6B,EAAoC,eAAd/tB,EAAKzN,KAAwByN,EAAKxN,WAAQuB,EAEtEyO,GAAgB,CACdlO,OAAQA,EACRsJ,OAAQiwB,EACRhkB,UAAWikB,EACX17B,gBAAiB27B,EACjB17B,WAAY2N,EAAK3N,WACjBiR,aAA4B,WAAdtD,EAAKzN,KACnB+yB,sBACC,CACD/hB,uBAAuB,OAIrByqB,IAAqBrwB,EAAAA,EAAAA,IAAgB,KAGzC,IAFmBxL,GAAeY,OAAOF,QACpCT,GAAiBS,QAAUo1B,IAAiBp1B,QAAU,IACzC,IAAMizB,GAEtB,YADAuG,KAIF,MAAM4B,EAAYzT,GAAYsL,IAAc,GACxCmI,EACFL,GAAoBK,GAII,WAArBnI,GAAYvzB,OAAqBuN,EAAAA,EAAAA,IAASgmB,GAAY5zB,YAAYhB,KAA6B,eAArB40B,GAAYvzB,MAK3F85B,QAGIluB,IAAOC,EAAAA,EAAAA,KAEb,OACEnN,EAAAA,GAAAA,IAAC0d,GAAAA,EAAc,CACbzd,GAAG,cACH6L,OAAQA,GACR2J,SAAUA,EACVwnB,0BAAwB,EACxBC,kBAAmB9I,EAA4Bj0B,SAAA,EAE/CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oBAAoBsW,IAAKtJ,GAAK8kB,MAAQ,WAAQlvB,EAAWsR,IAAKojB,GAAUr3B,SAAA,CACpFX,KACCY,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,qBACVuS,OAAK,EACLnS,KAAK,UACL0N,MAAM,oBACN0E,UAAWxF,GAAK,SAChBgB,QAASktB,GAAYj7B,UAErBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAGftN,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CAACC,UAAW9G,GAAa3sB,QAAU+D,KAAMgpB,GAAgBv2B,UAClEC,EAAAA,GAAAA,GAACoyB,GAAU,CAETzjB,KAAM8lB,IADDtzB,IAAOtB,OAIhBG,EAAAA,GAAAA,GAACqQ,GAAkB,CACjB5H,UAAWwC,GACX3D,QAASA,GACTqH,KAAM8lB,GACN7lB,eAAgBA,EAChB0B,gBAAiBA,GACjBI,eAAgBisB,GAChBpsB,eAAgBkmB,GAChBhmB,mBAAoBuqB,GACpBrqB,UAAW2qB,MAEbt7B,EAAAA,GAAAA,GAACyL,GAAiB,CAChBC,OAAQ8qB,GACR5qB,QAAS8qB,GACT70B,MAAOJ,EACPkK,OAAQ9K,GAAahB,SAGzBG,EAAAA,GAAAA,GAAC+oB,GAAiB,CAChBpa,KAAM8lB,GACNvL,sBAAuBA,GACvBF,mBAAoBA,EACpBC,SAAUA,EACVE,YAAaA,GACb5c,OAAQA,EACR7E,QAASA,GACT5E,MAAOA,GACPuM,SAAUA,EACV4tB,cAAep8B,GAAahB,GAC5BoD,OAAQA,EACRyI,OAAQA,GACRwc,UAAWA,GACX5gB,QAASA,GACTyf,cAAeA,EACfnb,QAASovB,GACT5R,WAAYmT,GACZlnB,SAAUA,EACV4R,cAAegU,GACfjmB,qBAAsBA,Y,eChe9B,SAA6C,WAA7C,GAA4K,WAA5K,GAAwM,WAAxM,GAA4O,WAA5O,GAAiQ,WAAjQ,GAAuS,WAAvS,GAA2Z,WAA3Z,GAA+c,WAA/c,GAAie,WAAje,GAAof,WAApf,GAA6gB,WAA7gB,GAAgkB,WAAhkB,GAAwlB,WAAxlB,GAAm1B,WAAn1B,GAAy+B,WAAz+B,GAAopC,WAAppC,GAAiuC,WAAjuC,GAA+yC,WAA/yC,GAAy7C,WCgBn7CkoB,GAAgB,IAAMvnB,EAAAA,EACtBwnB,GAAgB,GAAMxnB,EAAAA,EAsJ5B,SAAS5S,GAAYC,EAAgBo6B,GAAU,EAAOC,GAAW,GAC/D,MAAMn6B,EAAQtB,SAASuB,cAAc,OACrCD,EAAME,UAAUC,IAAKg6B,EDzK+zC,WAApB,YC2Kh0C,MAAM/5B,EAAM,IAAIC,MAKhB,GAJAD,EAAIE,WAAY,EAChBF,EAAIG,cAAgBC,EAAAA,EACpBJ,EAAIF,UAAUC,ID9K81C,YCgLx2C+5B,EAAS,CACX,MAAM3zB,EAAS7H,SAASuB,cAAc,UACtCsG,EAAOrG,UAAUC,IAAIka,IACrBja,EAAIiH,OAAS,KACX,MAAM+yB,EAAM7zB,EAAOG,WAAW,KAAM,CAAE2zB,OAAO,KACvC,MACJ/zB,EAAK,OACLK,GACEvG,GAEJ6U,EAAAA,EAAAA,KAAgB,KACd1O,EAAOD,MAAQA,EACfC,EAAOI,OAASA,EAEZ2zB,EAAAA,KACFF,EAAIG,OAAS,aAGfH,EAAIllB,UAAU9U,GAAK,GAAa,EAAakG,EAAQk0B,EAAY7zB,EAAS6zB,GAErEF,EAAAA,KACH7zB,EAAAA,EAAAA,GAAS2zB,EAAK,EAAG,EAAG9zB,EAAOK,EAjCtB,EACI,OAoCfvG,EAAIK,IAAMX,EACVE,EAAMY,YAAY2F,EACpB,MACEnG,EAAIK,IAAMX,EACVE,EAAMY,YAAYR,GAGpB,OAAOJ,CACT,CAEA,SAASmB,GAASpB,EAA2B06B,GAC3C,IAAIp5B,EACJ,MAAMC,EAAgB,KAAIo5B,EAAAA,EAAAA,IAAmBD,KAE7C,OAAQ16B,GACN,KAAK46B,EAAAA,GAAkBC,YACrBv5B,EAAoB,gBAAgBw5B,GAAAA,EAAkBC,OACtD,MACF,KAAKH,EAAAA,GAAkB94B,mBACrBR,EAAoB,mDACpB,MACF,KAAKs5B,EAAAA,GAAkBI,SACrB15B,EAAoB,yBACpB,MACF,KAAKs5B,EAAAA,GAAkB/4B,aACrBP,EAAoB,qCAIxB,MAAMgB,EAAY3D,SAASuC,cAA2BI,GAChDiB,EAAWD,GAAaA,EAAUE,iBAAmC,GAAGjB,SAE9E,MAAO,CACLe,YACAG,QAASF,IAAW,GAExB,CCrMO,SAAS04B,IAAiB,MAC/BxU,EAAK,YACLyU,EAAW,kBACXC,EAAiB,yBACjBC,EAAwB,WACxBC,IAQA,MAAMC,EA1Ce,IA0CgBH,EA9CP,IAEP,KA6CjBI,GAAoBvrB,KAAKya,IAAIyQ,GAAe,IA3C7B,IA4CfE,EAhDwB,IAEP,MA+CjBI,GAAcC,EAAAA,GAAAA,KAAoBH,EAAaC,GAAoB9U,GAEzE,OAAO4U,GAAcG,EAAcA,CACrC,CCtDe,SAASE,KACtB,MAAQn1B,MAAOmhB,EAAa9gB,OAAQ6gB,IAAiBG,EAAAA,GAAAA,KACrD,OAAO/iB,EAAAA,EAAAA,KAAQ,IDMV,SAA6B6iB,EAAqBD,GAOvD,MAAMhB,EAyCR,SAAwBkV,EAAmBC,EAAoBC,EAAkBC,GAC/E,MAAMC,EAAaF,EAzDK,KA0DlBG,EAAcF,EAzDK,IA2DzB,OAAO9rB,KAAK4a,IAAImR,EAAYC,EAC9B,CA9CgBC,CAfU,EACC,EAc2CvU,EAAaD,GAE3EyU,GAAmBT,EAAAA,GAAAA,IAfK,IAewChV,GAChE0V,GAAaV,EAAAA,GAAAA,IAdI,IAckChV,GAEzD,MAAO,CACL2V,YAAa,CACX71B,MAAO21B,EACPt1B,QAAQ60B,EAAAA,GAAAA,IApBmB,IAoB2BhV,IAExD4V,MAAO,CACL91B,MAAO41B,EACPv1B,QAAQ60B,EAAAA,GAAAA,IAtBY,IAsB2BhV,IAEjDA,QACA6V,cAAeJ,EAAmBC,EAClCI,gBAAiBJ,EAAaD,EAElC,CC/BuBM,CAAoB9U,EAAaD,IAAe,CAACC,EAAaD,GACrF,CCFe,SAASgV,GACtBC,EAAsBC,GAAuB,EAAOC,GAAqB,GAEzE,MAAMC,EAAgBH,GAAS,YAAaA,EACtCI,EAAiBJ,GAAS,cAAeA,EACzCK,IAAUF,IAAgBG,EAAAA,EAAAA,IAAeN,GACzCO,EAAiBJ,GAAiBh1B,QAAQ60B,EAAMQ,aAEtD,IAAIC,EACAN,IACEH,EAAM7sB,QAAQjR,OAAOu+B,YACvBA,EAAYT,EAAM7sB,QAAQjR,MAAMu+B,UAAUl3B,SAExCy2B,EAAM7sB,QAAQhR,OAAOs+B,WAAWl3B,UAClCk3B,EAAYT,EAAM7sB,QAAQhR,MAAMs+B,UAAUl3B,UAI9C,MAAMm3B,EAAcP,GAAgBQ,EAAAA,EAAAA,IAAkBX,QAASj9B,EACzD8F,GAAiBJ,EAAAA,EAAAA,GAASi4B,GAC1B/4B,EAAUwD,QAAQg1B,GAAiBH,EAAM7sB,QAAQhR,OACjDy+B,EAAUT,GAAiBH,EAAM7sB,QAAQhR,OAAOy+B,QAChDC,EAAgBV,GAAgBQ,EAAAA,EAAAA,IAAkBX,EAAO,aAAUj9B,EACnE+9B,GAAgBr4B,EAAAA,EAAAA,GAASo4B,GAAgBb,EAAOr4B,EAAUe,EAAAA,GAAewQ,YAAcxQ,EAAAA,GAAeC,SACtGo4B,EAAep5B,GAAWw4B,GAAgBQ,EAAAA,EAAAA,IAAkBX,EAAO,QAAQ,QAAQj9B,EACnFi+B,GAAev4B,EAAAA,EAAAA,GAASs4B,GAAef,EAAOt3B,EAAAA,GAAewQ,aAE7D+nB,EAAc91B,QAAQ21B,GAAiBE,GACvC33B,EAAgB1B,EAAUkB,EAAiBi4B,GAAiBj4B,EAC5Dq4B,GAAYr4B,IAAmBo4B,EAE/BE,EAAclB,GAAwBE,IAAkBH,EAAMoB,WAC9DC,EAAelB,GAAgBQ,EAAAA,EAAAA,IAAkBX,EAAO,iBAAcj9B,EAG5E,MAAO,CACLo9B,gBACAC,iBACAC,UACAE,iBACAE,YACAC,cACA73B,iBACAlB,UACAi5B,UACAC,gBACAC,gBACAC,eACAC,eACAC,cACA53B,gBACA63B,WACAC,cACAG,mBApBwB74B,EAAAA,EAAAA,GAAS44B,GAAeF,IAAgBjB,GAsBpE,C,wCC7DA,SAA2I,WAA3I,GAA6J,WAA7J,GAAuM,WC8HvM,IAAelhC,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAYrN,IAC9B,MAAMwN,GAAWC,EAAAA,EAAAA,KAAezN,GAEhC,MAAO,CACLqK,OAAQmD,EAASqyB,aAAaC,mBAC9BC,YAAa//B,EAAOggC,QAAQD,YAC5BxB,sBAAsB0B,EAAAA,EAAAA,KAA2BjgC,MANjCqN,EArGK6yB,EAAG71B,SAAQ01B,cAAaxB,2BAC/C,MAAM,mBACJ4B,EAAkB,oBAClBC,EAAmB,iBACnBC,EAAgB,iBAChBC,IACE51B,EAAAA,EAAAA,OACG61B,EAAcC,IAAmB31B,EAAAA,EAAAA,KAAS,IAEjD5B,EAAAA,EAAAA,KAAU,KACR,IAAK82B,EAAa,OAClB,MAAMU,GAAaC,EAAAA,GAAAA,MACfX,EAAYY,eAAiBZ,EAAYY,cAAgBF,GAC3DD,GAAgB,KAEjB,CAACT,EAAa11B,IAEjB,MAAMoB,GAAOC,EAAAA,EAAAA,KAEPk1B,GAAkB31B,EAAAA,EAAAA,IAAgB,KACtCu1B,GAAgB,MAGZ7G,GAAc1uB,EAAAA,EAAAA,IAAgB,KAClCk1B,EAAmB,CAAE91B,QAAQ,OAGzBw2B,GAAiB51B,EAAAA,EAAAA,IAAgB,KAChCszB,GAKL6B,IACAC,EAAiB,CACfx0B,MAAOJ,EAAK,iBACZlM,QAASkM,EAAK,uBAEhB00B,EAAmB,CAAE91B,QAAQ,KAT3Bi2B,EAAiB,CAAEQ,eAAgB,eAYvC,OACEviC,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJrN,UAAU,uBACVsiC,iBDrEiB,WCsEjB12B,OAAQA,EACR22B,QAAM,EACNz2B,QAASovB,EAAYj7B,SAAA,EAErBC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLzE,MAAM,cACN1N,KAAK,UACLJ,UD9EwC,WC+ExCwS,UAAWxF,EAAK,SAChBgB,QAASktB,EAAYj7B,UAErBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAEbtN,EAAAA,GAAAA,GAAA,OAAKF,UDpF8D,WCoFhCC,UACjCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,2BAEbtN,EAAAA,GAAAA,GAAA,OAAKF,UDvFiF,WCuFzDC,SAAE+M,EAAK,kBACpC9M,EAAAA,GAAAA,GAAA,OAAKF,UDxF0G,WCwF5EC,SAChC+M,EAAK8yB,EAAuB,kBAAoB,6BAEnDhgC,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPxiC,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAiB,gBAC3CglB,WAAS,EACTC,UAAQ,EACRC,aAAaziC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,eAAexN,UAAWyd,KAAgBxd,SAAA,EAElEC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAE+M,EAAK,sBAC9B9M,EAAAA,GAAAA,GAAA,QAAMF,WAAWoW,EAAAA,GAAAA,GAAe,WAAYqH,IAAiBxd,SAAE+M,EAAK,oCAEtElN,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPxiC,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAiB,gBAC3CglB,WAAS,EACTC,UAAQ,EACRC,aAAaziC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,iBAAiBxN,UAAWyd,GAAa,mBAAexd,SAAA,EAEhFC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAE+M,EAAK,oBAC9B9M,EAAAA,GAAAA,GAAA,QAAMF,WAAWoW,EAAAA,GAAAA,GAAe,WAAYqH,IAAiBxd,SAAE+M,EAAK,kCAEtE9M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UD9GyK,WC+GzKI,KAAK,UACLggB,SAAU0hB,EACVc,SAAU9C,EACV+C,qBAAsB/C,EACtB9xB,QAASo0B,EAAeniC,SAEtB6/B,EACEgC,GACG5hC,EAAAA,GAAAA,GAAC4iC,GAAAA,EAAS,CAACC,QAAQ,cAAcC,OAAQ1B,EAAaY,cAAgBe,MAAOd,IAC9En1B,EAAK,qBAHcA,EAAK,8B,gBCxEtC,UAAenO,EAAAA,EAAAA,KA/Bf,UAAiC,OAC/B+M,EAAM,MAAEi0B,EAAK,QAAE/zB,IAEf,MAAM,YAAEo3B,EAAW,cAAEC,IAAkBl3B,EAAAA,EAAAA,MAEjCe,GAAOC,EAAAA,EAAAA,KAEPm2B,GAAyBvjC,EAAAA,EAAAA,KAAY,KACpCggC,IAILsD,IACAD,EAAY,CAAEr3B,OAAQg0B,EAAMh0B,OAAQw3B,QAASxD,EAAM9/B,KACnD+L,OACC,CAACA,EAAS+zB,IAEb,OACE3/B,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQA,EACRE,QAASA,EACTsB,MAAOJ,EAAK,oBACZ+H,KAAM/H,EAAK,uBACXu2B,aAAcv2B,EAAK,UACnBw2B,eAAgBJ,EAChBK,sBAAoB,EACpBzjC,UAAU,wBAGhB,I,gECYA,UAAenB,EAAAA,EAAAA,KArCf,UAAuB,GACrBkB,EAAE,eACF2jC,EAAc,cACdrP,EAAa,YACbsP,EAAW,UACXC,EAAS,SACTC,IAEA,MAAM72B,GAAOC,EAAAA,EAAAA,MAEN62B,EAAaC,IAAkB33B,EAAAA,EAAAA,IAAiB,IACjD43B,GAAeh8B,EAAAA,EAAAA,KAAQ,KAC3B,MAAMi8B,GAAcP,GAAkB,IAAI/F,QAAQE,GAAWA,IAAWxJ,IACxE,OAAO6P,EAAAA,GAAAA,KAAOC,EAAAA,GAAAA,IAAmB,CAAEC,IAAK,IAAIT,GAAe,MAAOM,GAAaI,MAAOP,EAAa1iC,KAAM,YACxG,CAACsiC,EAAgBrP,EAAeyP,EAAaH,IAEhD,OACEzjC,EAAAA,GAAAA,GAACokC,GAAAA,EAAU,CAETC,QAASP,EACTL,YAAaA,GAAea,GAAAA,EAC5BC,kBAAmBb,EACnBc,YAAaZ,EACba,kBAAmB33B,EAAK,UACxB43B,cAAe,GAAG7kC,kBAClB8kC,cAAY,EACZC,oBAAkB,EAClBC,eAAa,EACbC,oBAAqBnB,EACrBoB,eAAgBlB,EAChBmB,eAAa,EACbC,YAAU,EACVC,cAAc,YAdTrlC,EAiBX,I,4BCrDA,MC8FA,IAAelB,EAAAA,EAAAA,KAlEf,UAAsB,SACpB4a,EAAQ,eAAEiqB,EAAc,UAAE2B,EAAS,cAAEhR,EAAa,QAAEvoB,IAEpD,MAAM,iBAAEw5B,IAAqBr5B,EAAAA,EAAAA,MAEvBe,GAAOC,EAAAA,EAAAA,MACN62B,EAAaC,IAAkB33B,EAAAA,EAAAA,IAAiB,KAChDm5B,EAAeC,IAAoBp5B,EAAAA,EAAAA,KAAkB,IACrDq5B,EAAuBC,IAA4Bt5B,EAAAA,EAAAA,IAAmB,IAEvEu5B,GAAiB39B,EAAAA,EAAAA,KAAQ,KACrB07B,GAAkB,IAAI/F,QAAQE,GAAWwH,EAAUxH,IAAS+H,iBACnE,CAAClC,EAAgB2B,IAEdrB,GAAeh8B,EAAAA,EAAAA,KAAQ,KAC3B,MAAMi8B,GAAcP,GAAkB,IAAI/F,QAAQ59B,GAAOA,IAAOs0B,IAChE,OAAO6P,EAAAA,GAAAA,KAAOC,EAAAA,GAAAA,IAAmB,CAAEC,IAAK,IAAIuB,KAAmB1B,GAAaI,MAAOP,EAAa1iC,KAAM,YACrG,CAACukC,EAAgBjC,EAAgBrP,EAAeyP,KAEnD+B,EAAAA,GAAAA,IAAsB,EAAEC,OACjBA,GAAgBrsB,IACnB+rB,GAAiB,GACjBE,EAAyBC,MAE1B,CAAClsB,EAAUksB,IAEd,MAAMI,GAAiClmC,EAAAA,EAAAA,KAAa+M,IAClD84B,EAAyB94B,GACzB44B,GAAiB,KAChB,IAEGQ,GAAex5B,EAAAA,EAAAA,IAAgB,KACnC84B,EAAiB,CAAEW,QAASR,IAC5B35B,OAGF,OACEhM,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAACokC,GAAAA,EAAU,CACTC,QAASP,GAAgB,GACzBL,YAAa8B,EACbf,YAAaZ,EACba,kBAAmB33B,EAAK,UACxB43B,cAAc,8BACdC,cAAY,EACZC,oBAAkB,EAClBE,oBAAqBe,EACrBd,eAAgBlB,EAChBmB,eAAa,EACbC,YAAU,EACVC,cAAc,cAGhBllC,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GDjFS,WCiF2BmvB,GDjFP,YCiFuCtlC,UAClFC,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,QAASb,EACTv3B,QAASg4B,EACTxzB,UAAWxF,EAAK,QAAQ/M,UAExBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,gBAKrB,IC5FA,IAAgB,MAAQ,WAAW,OAAS,WAAW,YAAc,WAAW,YAAc,WAAW,QAAU,WAAW,QAAU,WAAW,MAAQ,WAAW,KAAO,WAAW,OAAS,WAAW,QAAU,WAAW,MAAQ,WAAW,KAAO,WAAW,OAAS,WAAW,cAAgB,WAAW,OAAS,WAAW,KAAO,WAAW,OAAS,YCuD9V64B,GAA2B,CAAC,CAChC74B,KAAM,6BACNZ,MAAO,YACPkB,MAAO,CAAC,UAAW,WACnBoF,KAAM,iBACNozB,QAAS,gBACR,CACD94B,KAAM,6BACNZ,MAAO,WACPkB,MAAO,CAAC,UAAW,WACnBoF,KAAM,cACNozB,QAAS,uBACR,CACD94B,KAAM,iCACNZ,MAAO,eACPkB,MAAO,CAAC,UAAW,WACnBoF,KAAM,kBACNozB,QAAS,gBACR,CACD94B,KAAM,qCACNZ,MAAO,SACPkB,MAAO,CAAC,UAAW,WACnBoF,KAAM,eACNozB,QAAS,iBACR,IAEEC,GAAO,SAAPA,GAAO,OAAPA,EAAAA,EAAO,qBAAPA,EAAAA,EAAO,yBAAPA,EAAAA,EAAO,+BAAPA,EAAAA,EAAO,uBAAPA,CAAO,EAAPA,IAAO,IAgUZ,UAAe1nC,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAsBrN,IACxC,MACE6/B,aAAa,QACXiC,EAAO,OAAEx3B,KAETmD,EAAAA,EAAAA,KAAezN,GACbs+B,EAASh0B,GAAUw3B,GACrBmD,EAAAA,EAAAA,KAAgBjlC,EAAQsK,EAAQw3B,QAChCzgC,EAEJ,MAAO,CACLi9B,MAAOA,GAAS,YAAaA,EAAQA,OAAQj9B,EAC7C6jC,WAAY5G,GAAS,eAAgBA,EAAQA,EAAM4G,gBAAa7jC,EAChE8gC,eAAgBniC,EAAOmlC,aAAaT,QACpCZ,UAAW9jC,EAAOolC,MAAMC,KACxBvS,cAAe9yB,EAAO8yB,iBAfNzlB,EAzTpB,UAAuB,OACrBhD,EAAM,MACNi0B,EAAK,WACL4G,EAAU,eACV/C,EAAc,UACd2B,EAAS,cACThR,EAAa,QACbvoB,IAEA,MAAM,iBAAE+6B,EAAgB,qBAAEC,IAAyB76B,EAAAA,EAAAA,MAE7Ce,GAAOC,EAAAA,EAAAA,MACN85B,EAAaC,EAAWC,IAAc9nC,EAAAA,EAAAA,IAAQ,IAC9C+nC,EAASC,IAAc/6B,EAAAA,EAAAA,IAAyCq6B,IAChEW,EAAUC,IAAej7B,EAAAA,EAAAA,IAASyzB,GAAOyH,cACzCpK,EAAWqK,IAAgBn7B,EAAAA,EAAAA,IAAkBm6B,GAAQW,UACrDM,EAAyBC,IAA8Br7B,EAAAA,EAAAA,IAA4B,aACpFs7B,EAAexK,IAAcqJ,GAAQW,QAErCvB,GAAiB39B,EAAAA,EAAAA,KAAQ,KACrB07B,GAAkB,IAAI/F,QAAQE,GAAWwH,EAAUxH,IAAS+H,iBACnE,CAAClC,EAAgB2B,IAEdzB,GAAY57B,EAAAA,EAAAA,KAAQ,KACxB,GAAIk1B,IAAcqJ,GAAQoB,aACnBT,GAASU,cAAclmC,QAAUwlC,EAAQU,aAAa,KAAOvT,GAElE,MAAO,CAACA,KAIT,CAAC6I,EAAW7I,EAAe6S,GAASU,eAEjCC,GAAqB7/B,EAAAA,EAAAA,KAAQ,IAC7Bw/B,IAA4BN,GAAST,WAAmB,GACrDS,GAASY,cAAgB,IAC/B,CAACN,EAAyBN,GAASY,aAAcZ,GAAST,aAEvDsB,GAA2Bv7B,EAAAA,EAAAA,IAAiBw7B,IAChDb,EAAW,IACND,EACHU,aAAcI,GAAQtmC,OAASsmC,GAAQrK,QAAQ59B,GAAOA,IAAOs0B,IAAiB,CAACA,QAI7E4T,GAA0Bz7B,EAAAA,EAAAA,IAAiBw7B,IAC/Cb,EAAW,IACND,EACHY,aAAcE,EACdvB,WAAYe,QAIhBh9B,EAAAA,EAAAA,KAAU,KACJoB,IACF27B,EAAahB,GAAQW,SACrBF,OAED,CAACp7B,KAEJpB,EAAAA,EAAAA,KAAU,KACR28B,EAAWV,KACV,CAACA,IAEJ,MAAMyB,GAAyB17B,EAAAA,EAAAA,IAAgB,KACzC0wB,IAAcqJ,GAAQW,QAK1BK,EAAahB,GAAQW,SAJnBD,OAmCEkB,GAAuB37B,EAAAA,EAAAA,IAAgB,KAC3C66B,GAAaD,MAKTpB,GAAex5B,EAAAA,EAAAA,IAAgB,KACnCq6B,EAAiB,CACfh7B,OAAQg0B,EAAOh0B,OACfw3B,QAASxD,EAAO9/B,GAChBmnC,QAASA,IAEPrH,EAAOyH,cAAgBF,GACzBN,EAAqB,CAAEj7B,OAAQg0B,EAAOh0B,OAAQw3B,QAASxD,EAAO9/B,GAAIunC,YAAaF,IAEjFH,OAkKF,OACEnnC,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJzB,OAAQm7B,EACR/mC,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAO2qB,MAAO,wBACxCt8B,QAASm7B,EACToB,YAAU,EACVt8B,oBAAqBD,EAAQ7L,SAAA,EAE7BH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAO6qB,OAAOroC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAO8qB,YAAa,gBAC9Ch2B,OAAK,EACLzE,MAAM,cACN1N,KAAK,UACL4N,QAASk6B,EACT11B,UAA0BxF,EAAf06B,EAAoB,cAAsB,gBAAgBznC,UAErEC,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAe,sBAAuBsxB,GAAgB,mBAExExnC,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CAACzvB,KAAK,YAAY0vB,UAAWA,EAAUj9B,SA7IxD,WACE,OAAQi9B,GACN,KAAKqJ,GAAQW,QACX,OAAOhnC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAO+qB,YAAYvoC,SAAE+M,EAAK,gCAClD,KAAKu5B,GAAQoB,UACX,OAAOznC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAO+qB,YAAYvoC,SAAE+M,EAAK,0CAClD,KAAKu5B,GAAQkC,aACX,OAAOvoC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAO+qB,YAAYvoC,SAAE+M,EAAK,kBAClD,KAAKu5B,GAAQmC,SACX,OAAOxoC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAO+qB,YAAYvoC,SAAE+M,EAAK,4CAEtD,CAmIS27B,SAGLzoC,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CACTC,UAAWA,EACX1vB,KAAK,YACLo7B,eAAe,yBACf5oC,UAAWyd,GAAOzK,QAAQ/S,SAxIhC,SAAuBwZ,GACrB,OAAQyjB,GACN,KAAKqJ,GAAQW,QACX,OAsCN,WACE,MAAM2B,EAAgBhJ,GAAQiJ,EAAAA,GAAAA,IAASjJ,EAAMkJ,WAAalJ,EAAM3M,MAAQ,EAExE,OACEpzB,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOurB,QAAQ/oC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAOrQ,MAAMnN,SAAE+M,EAAK,uCACnC9M,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOwrB,KAAKhpC,SACzBomC,GAAQ3yB,KAAKw1B,IACZppC,SAAAA,GAAAA,IAAA,SAEEE,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAOyrB,OAAQA,EAAOt8B,QAAUs6B,GAAST,YAAchpB,GAAO0rB,SAASlpC,SAAA,EAEjGC,EAAAA,GAAAA,GAAA,SACEkB,KAAK,QACLoM,KAAK,gBACLxN,UAAWyd,GAAO2rB,MAClBx8B,MAAOs8B,EAAOt8B,MACdu8B,QAASD,EAAOt8B,QAAUs6B,GAAST,WACnC/4B,SAAUA,KAAM27B,OA5JAC,EA4JuBJ,EAAOt8B,WA3J5Du6B,EAAW,IACND,EACHT,WAAY6C,IAHhB,IAAgCA,GA6JhBC,2BAAyB,KAE3BrpC,EAAAA,GAAAA,GAAA,QACEF,UAAWyd,GAAOvK,KAClBnN,MAAO,iBAAiBmjC,EAAOp7B,MAAM,mBAAmBo7B,EAAOp7B,MAAM,KAAK7N,UAE1EC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAM07B,EAAOh2B,UAErBpT,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAO+rB,cAAcvpC,SAAA,EACnCC,EAAAA,GAAAA,GAAA,QAAMF,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAOgsB,aAAaxpC,SAAE+M,EAAKk8B,EAAO17B,QACjE07B,EAAO5C,UACNxmC,EAAAA,GAAAA,IAAA,OACE4pC,SAAU,EACVC,KAAK,SACL3pC,UAAWyd,GAAO5b,OAClB,aAAYmL,EAAK,QACjBgB,QAAUlB,KAtK9B,SAA2BA,EAAqCjL,GAG9D,QAFA+B,EAAAA,EAAAA,GAAUkJ,GAEFjL,GACN,IAAK,eACH0lC,EAAahB,GAAQkC,cACrB,MACF,IAAK,eACHlB,EAAahB,GAAQoB,WACrB,MACF,IAAK,eACHJ,EAAahB,GAAQmC,UACrBjB,EAA2B,aAC3B,MACF,IAAK,sBACHF,EAAahB,GAAQmC,UACrBjB,EAA2B,YAGjC,CAmJsCmC,CAAkB98B,EAAGo8B,EAAO5C,UAAarmC,SAAA,EAE3DC,EAAAA,GAAAA,GAAA,QAAMF,UAAWyd,GAAOosB,YAAY5pC,UAjI9B4B,EAiIiDqnC,EAAO5C,QAhIjE,iBAAXzkC,EAC4B,IAA1B8jC,EAAejkC,OACVsL,EAAK,wCAGgB,IAA1B24B,EAAejkC,QACVoyB,EAAAA,GAAAA,IAAa9mB,EAAMq4B,EAAUM,EAAe,KAG9C34B,EAAK,2BAA4B24B,EAAejkC,OAAQ,KAGjD,iBAAXG,GAAqD,cAAxBqlC,GAAST,YAC1B,wBAAX5kC,GAA4D,aAAxBqlC,GAAST,WAC5CS,GAASY,cAAcpmC,OAIQ,IAAhCwlC,EAAQY,aAAapmC,OAChBsL,EAAK,mCAAmC88B,EAAAA,EAAAA,IAAgBzE,EAAU6B,EAAQY,aAAa,MAGzF96B,EAAK,kCAAmCk6B,EAAQY,aAAapmC,OAAQ,KAPnEsL,EAAK,oCAUXk6B,GAASU,cAAgD,IAAhCV,EAAQU,aAAalmC,OAIf,IAAhCwlC,EAAQU,aAAalmC,QAChBooC,EAAAA,EAAAA,IAAgBzE,EAAU6B,EAAQU,aAAa,KAGjD56B,EAAK,2BAA4Bk6B,EAAQU,aAAalmC,OAAQ,KAP5DsL,EAAK,gDAuGI9M,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,iBA7BZ07B,EAAOt8B,OArG1B,IAA0B/K,WA0IpB3B,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOurB,QAAQ/oC,UAC7BH,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CAAC5iB,QAAM,EAAC5R,QAASm6B,EAAqBloC,SAAA,EAC7CC,EAAAA,GAAAA,GAAA,QAAAD,SAAO+M,EAAK,gBACZ9M,EAAAA,GAAAA,GAAC6pC,GAAAA,EAAQ,CACPhqC,GAAG,sBACHoN,MAAOH,EAAK,aACZm8B,QAAS/B,EACT1E,UAAQ,UAId5iC,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOusB,OAAO/pC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOoZ,KAAK52B,SAAE+M,EAAK,gBAAiB67B,MACpD3oC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOwsB,OAAOhqC,UAC5BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACG,QAASg4B,EAAa/lC,SAAE+M,EAAK,mCAK/C,CAxGak9B,GACT,KAAK3D,GAAQkC,aACX,OACEvoC,EAAAA,GAAAA,GAACiqC,GAAY,CAEX1wB,SAAUA,EACViqB,eAAgBA,EAChBrP,cAAeA,EACfgR,UAAWA,EACXv5B,QAASo8B,GALL,iBAQV,KAAK3B,GAAQmC,SACX,OACExoC,EAAAA,GAAAA,GAACkqC,GAAa,CAEZrqC,GAAG,YACH2jC,eAAgBA,EAChBrP,cAAeA,EACfsP,YAAakE,EACbhE,SAAUoE,GALN,aAQV,KAAK1B,GAAQoB,UACX,OACEznC,EAAAA,GAAAA,GAACkqC,GAAa,CAEZrqC,GAAG,aACH2jC,eAAgBA,EAChBE,UAAWA,EACXvP,cAAeA,EACfsP,YAAauD,GAASU,aACtB/D,SAAUkE,GANN,cAUd,MAuGF,K,qUCzWA,MAgGA,IAAelpC,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAU8+B,kBAIF,CACLgK,OAJahK,EAAYiK,YAAa9V,EAAAA,EAAAA,KAAWjzB,EAAQ8+B,EAAYiK,iBAAc1nC,EAKnFi9B,MAJYQ,EAAYgD,SAAWhD,EAAYiK,YAC7C9D,EAAAA,EAAAA,KAAgBjlC,EAAQ8+B,EAAYiK,WAAYjK,EAAYgD,cAAWzgC,KAJ3DgM,EAhGoC27B,EACtDvqC,YACAqgC,cACAgK,SACAxK,YAEA,MAAM,gBAAE2K,EAAe,qBAAEC,EAAoB,SAAEC,IAAaz+B,EAAAA,EAAAA,MACtDiI,GAAM5K,EAAAA,EAAAA,MAEN0D,GAAOC,EAAAA,EAAAA,MAEbzC,EAAAA,EAAAA,KAAU,MACHq1B,GAASQ,EAAYiK,YAAcjK,EAAYgD,SAClDoH,EAAqB,CACnB5+B,OAAQw0B,EAAYiK,WACpBK,SAAU,CAACtK,EAAYgD,aAG1B,CAAChD,EAAaR,IAEjB,MAAMhM,EAAcwW,GAASvW,EAAAA,GAAAA,IAAa9mB,EAAMq9B,GAAUhK,EAAYuK,SAEhEC,GAAoBr+B,EAAAA,EAAAA,IAAgB,KACxC,MAAM,WAAE89B,EAAU,QAAEjH,GAAYhD,EAC3BiK,KAEgBzK,GAAW,cAAeA,GAASA,EAAMiL,UAS5DJ,EAAS,CAAE3qC,GAAIuqC,IANfE,EAAgB,CACd3+B,OAAQy+B,EACRjH,UACA0H,eAAe,SAOf,YAAEvmB,EAAW,gBAAEwmB,IAAoBC,EAAAA,GAAAA,GAAaJ,GA6BtD,OACE/qC,EAAAA,GAAAA,IAACorC,GAAAA,EAAgB,CACfh3B,IAAKA,EACLlU,WAAWoW,EAAAA,GAAAA,GACT,kBACApW,GACAmrC,EAAAA,GAAAA,GAAkBd,GAAQ,GAAM,IAElC/zB,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAC1BoL,QAASwW,EACT4mB,YAAaJ,EAAgB/qC,SAAA,CAE5BoqC,GAAQv8B,OAAOu9B,oBACdnrC,EAAAA,GAAAA,GAACorC,GAAAA,EAAmB,CAClBC,gBAAiBlB,EAAOv8B,MAAMu9B,kBAC9BrrC,UAAU,uCAGdF,EAAAA,GAAAA,IAAA,OAAKE,UAAU,eAAcC,SAAA,CA7CjC,WACE,GAAI4/B,GAAS,YAAaA,GAASA,EAAM7sB,QAAQ+B,KAC/C,OACE7U,EAAAA,GAAAA,GAAA,KAAGF,UAAU,wBAAuBC,UACjCurC,EAAAA,GAAAA,IAAuB3L,EAAM7sB,QAAQ+B,OAM9C,CAoCO02B,IACDvrC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,gBAAeC,SAnCpC,WACE,IAAKoqC,IAAWxW,EACd,OAGF,MAAM3gB,GAA8BvE,EAAAA,EAAAA,IAAS07B,EAAOtqC,IAAyB,cAAnB,iBAE1D,OACED,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,CACGiT,IAAQhT,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAM0F,EAAMlT,UAAU,uBACpC6zB,IAAeI,EAAAA,GAAAA,GAAWJ,KAGjC,CAuBS6X,e,gBCmCX,UAAe7sC,EAAAA,EAAAA,KAnIf,UAAsB,MACpBghC,EAAK,WAAE8L,EAAU,UAAE3rC,EAAS,SAAE4rC,EAAQ,OAAEC,IAExC,MAAM7+B,GAAOC,EAAAA,EAAAA,KACPiH,GAAM5K,EAAAA,EAAAA,MACNwiC,GAAaxiC,EAAAA,EAAAA,MACbyiC,GAAUziC,EAAAA,EAAAA,MACV0iC,GAAoB1iC,EAAAA,EAAAA,MACpB2iC,GAAiBC,EAAAA,GAAAA,GAAiBrM,GAAO,GAEzCsM,EAAUF,GAAgBj5B,QAAQ+B,MAEjCq3B,EAAaC,IAAkBjgC,EAAAA,EAAAA,KAAS,GACzCkgC,GAAiBC,EAAAA,GAAAA,GAAuBZ,QAAc/oC,EAhBzB,KAiB7B4pC,EAAoBb,GAAcW,GAExC9hC,EAAAA,EAAAA,KAAU,MACR6N,EAAAA,EAAAA,KAAgB,KACTyzB,EAAWriC,UAIZkiC,GACFc,EAAAA,GAAAA,IAAcX,EAAWriC,QAASgU,KAElCivB,EAAAA,GAAAA,IAAiBZ,EAAWriC,QAASgU,UAGxC,CAACkuB,IAEJ,MAAMgB,EAAYP,IAAgBI,GAC1BzoB,aAAc6oB,EAAoB,qBAAE3oB,IAAyBE,EAAAA,GAAAA,GACnEwoB,OAAW/pC,GAAW,EAAM,QAAQ,IAItCkZ,EAAAA,EAAAA,KAAgB,MACd+wB,EAAAA,EAAAA,KAAe,KACb,MAAMpnC,EAAYqmC,EAAWriC,QACvBqjC,EAASd,EAAkBviC,QACjC,IAAKhE,IAAcqnC,EACjB,OAGF,MAAM,YAAEC,GAAgBD,GAExBz0B,EAAAA,EAAAA,KAAgB,KACd5S,EAAUM,MAAMinC,YAAY,wBAAyB,GAAGD,eAG3D,CAACH,EAAsB5/B,KAE1B8O,EAAAA,EAAAA,KAAgB,MACdmxB,EAAAA,EAAAA,KAAoB,KAClB,IAAKnB,EAAWriC,UAAYsiC,EAAQtiC,QAClC,OAGF,MAAMhE,EAAYqmC,EAAWriC,QACvByjC,EAAgBnB,EAAQtiC,QAExB0jC,EAAgBD,EAAcngB,WAC9B,WAAEqgB,EAAU,WAAEC,IAAeC,EAAAA,GAAAA,GAA2BJ,GACxDK,EAAgBF,EAjEN,EAkEVG,EAAgBL,EAlEN,EAkEsBC,EAEtC,MAAO,KACDG,KACFd,EAAAA,GAAAA,IAAchnC,EdnGilC,YcoG/lC4mC,GAAe,IAGjB5mC,EAAUM,MAAMinC,YAAY,oBAAqB,GAAGQ,aAGvD,CAACrB,KAEJ3hC,EAAAA,EAAAA,KAAU,KACHmhC,GACHz3B,EAAIzK,SAASgkC,SAAS,CAAEnqB,IAAK,MAE9B,CAACqoB,IAEJ,MAAM+B,GAAgBt3B,EAAAA,GAAAA,GdlH+hC,WcoHnjCo2B,GdpH2nC,WcqH3nCI,GdrH0qC,YcwH5qC,OACE9sC,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GdzHuV,WcyHxTpW,GAAWC,SAAA,EACxDC,EAAAA,GAAAA,GAAA,OACEgU,IAAK43B,EACL9rC,UAAW0tC,EACX/D,KAAMgD,EAAY,cAAW/pC,EAC7BoL,QAAS2+B,EAAYf,EAAWC,EAAO5rC,UAEvCH,EAAAA,GAAAA,IAAA,OACEoU,IAAKA,EACLlU,WAAWoW,EAAAA,GAAAA,GdlIsgC,WckIl+B,kBAAmB,iBAAiBnW,SAAA,CAElFgsC,GAAgB5L,cACfngC,EAAAA,GAAAA,GAACqqC,GAAoB,CACnBlK,YAAa4L,EAAe5L,YAC5BrgC,UdvIo8C,ac0Iv8CisC,GAAkBE,IACjBjsC,EAAAA,GAAAA,GAAA,OAAKgU,IAAK63B,EAAS/rC,Ud3IijC,Wc2InhCC,UAC/CC,EAAAA,GAAAA,GAACytC,GAAAA,EAAW,CACVC,eAAgB3B,EAChB4B,uBAAqB,EACrB3lB,eAAa,WAMtB0kB,IACC1sC,EAAAA,GAAAA,GAAA,OACEgU,IAAK83B,EACLhsC,WAAWoW,EAAAA,GAAAA,GdxJsrC,WcwJ/oC6N,GAClDjW,QAAS49B,EAAS3rC,SAEjB+M,EAAK,6BAKhB,I,4BChKA,SAAuB,WAAvB,GAAkM,WAAlM,GAAqN,WCmLrN,IAAenO,EAAAA,EAAAA,KAzJKivC,EAClBjO,QACA7/B,gBAEA,MAAM,mBAAE+tC,EAAkB,gBAAEhY,EAAe,kBAAEiY,IAAsB/hC,EAAAA,EAAAA,MAC7De,GAAOC,EAAAA,EAAAA,MAEP,MACJghC,EAAK,MAAEC,EAAK,OAAEriC,EAAQ9L,GAAIsjC,EAAO,aAAE8K,GACjCtO,GACE,WAAEuO,EAAU,cAAEC,EAAa,eAAEC,GAAmBL,GAAS,CAAC,EAC1Dxa,IAAa9kB,EAAAA,EAAAA,IAAS9C,GAEtB0iC,EAA2BJ,IAAgBK,EAAAA,EAAAA,IAAeL,EAAcM,EAAAA,KAExEC,EAAa1jC,SAChBkjC,GAASza,IACPoM,EAAM8O,WACL9O,EAAMoB,YAGN2N,GAAcC,EAAAA,EAAAA,IAAYhjC,EAAQw3B,GAElCyL,GAAgB9mC,EAAAA,EAAAA,KAAQ,KAC5B,MAAQ2+B,OAASC,KAAMvB,KAAgB0J,EAAAA,EAAAA,MAEjCC,EAAkBf,GAAS,oBAAqBA,EAAQA,EAAMe,qBAAkBpsC,EACtF,GAAKosC,EAEL,OAAOA,EAAgBt7B,KAAK3T,GAAOslC,EAAUtlC,KAAK49B,OAAO3yB,WACxD,CAACijC,IAEEgB,GAA2BziC,EAAAA,EAAAA,IAAgB,KAC/CuhC,EAAmB,CAAE1K,eAGjB6L,GAAqB1iC,EAAAA,EAAAA,IAAgB,KACzCupB,EAAgB,CAAE0F,WAAY5vB,EAAQw3B,eAGlC8L,GAAkB3iC,EAAAA,EAAAA,IAAgB,KACtC,MAAM4iC,EAAWjB,OAAevrC,EAAY6rC,EAAAA,IAC5CT,EAAkB,CAChBniC,SACAw3B,UACAuL,cACAQ,gBAIJ,OAAKhB,GASHtuC,EAAAA,GAAAA,IAAA,OACEE,WAAWoW,EAAAA,GAAAA,GACTqH,GACAzd,GACAC,SAAA,EAEFH,EAAAA,GAAAA,IAAA,OACEE,WAAWoW,EAAAA,GAAAA,GD5F0B,YC4FOqd,GD5FkB,YC6F9DzlB,QAAUylB,OAAuC7wB,EAA3BqsC,EAAqChvC,SAAA,CAE1D+K,QAAQ8jC,GAAeptC,UACtBxB,EAAAA,GAAAA,GAACmvC,GAAAA,EAAU,CACTjvC,KAAK,QACLkvC,MAAOR,EACP9uC,UDnG+E,aCuGlFyzB,GACC3zB,EAAAA,GAAAA,IAAA,QAAME,UAAWyd,GAAaxd,SAAA,EAC5BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,eAAexN,UDzGqM,aC0G9NouC,MAGHluC,EAAAA,GAAAA,GAAA,QAAMF,UAAWyd,GAAaxd,SAAE+M,EAAK,QAASohC,EAAY,OAE3DpjC,QAAQsjC,KAAoB7a,IAC3B3zB,EAAAA,GAAAA,IAAA,QAAME,UDhH0H,WCgH1FC,SAAA,EACpCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,QAAQxN,UDjH2I,aCkH7JsuC,SAIPpuC,EAAAA,GAAAA,GAAA,OAAKF,UDtHoG,aCuHxG0uC,IACCxuC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLC,MAAM,cACN1N,KAAK,UACLmS,OAAK,EACLvE,QAASkhC,EACT18B,UAAWxF,EAAK,WAChBhN,UAAWyd,GAAkBxd,UAE7BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,cAGdimB,IACC3zB,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,CACG+K,QAAQqjC,KACPvuC,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAkBxd,SAAA,EAChCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLzE,MAAM,cACN1N,KAAK,UACLmvC,gBAAc,EACd/8B,UAAWxF,EAAK,gBAAgB/M,UAEhCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,YAEbtN,EAAAA,GAAAA,GAAA,QAAAD,SAAOouC,QAGXvuC,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAkBxd,SAAA,EAChCH,EAAAA,GAAAA,IAAC+N,EAAAA,EAAM,CACL0E,OAAK,EACLvS,UDtJyP,WCuJzP8N,MAAM,cACN1N,KAAK,UACL4N,QAASmhC,EACT38B,UAAWxF,EAAK,gBAAgB/M,SAAA,CAE/BkuC,IACCjuC,EAAAA,GAAAA,GAACsvC,GAAAA,EAAqB,CAEpBZ,YAAaA,EACbQ,SAAUjB,EACVsB,eAAgBlB,IAHXmB,EAAAA,EAAAA,IAAevB,MAMrBA,GAAgBI,KACjBruC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CACHjF,KAAM+gC,EAA2B,QAAU,gBAC3CvuC,WAAWoW,EAAAA,GAAAA,GAAem4B,GDvKsP,iBC2KrRvjC,QAAQsjC,KAAoBpuC,EAAAA,GAAAA,GAAA,QAAAD,SAAOquC,cA7F1CpuC,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAazd,GAAWC,SACpD+M,EAAK,qBC9Bd,IAAenO,EAAAA,EAAAA,KA5Bf,UAAuB,SACrB4a,EAAQ,SAAEk2B,EAAQ,QAAEnoC,EAAO,SAAE4R,EAHE,EAGiC,SAAEw2B,EAAQ,gBAAEC,IAE5E,MAAMC,GAAqBtjC,EAAAA,EAAAA,IAAiBuiB,IACrCvnB,GCzB+F,aDyBpFunB,EAAMghB,eACpBF,OAIE15B,GAAaC,EAAAA,GAAAA,GC9BE,WDgCnBu5B,GChCuC,WDiCvCl2B,GCjC2D,WDkC3Dm2B,GClCwH,YDqC1H,OACE1vC,EAAAA,GAAAA,GAAA,QACEF,UAAWmW,EACX,iBAAWlW,SAEVwZ,IACCvZ,EAAAA,GAAAA,GAAA,KAAG6F,MAAO,wBAAwBqT,KAAapZ,UC3C2B,WD2CFgwC,eAAgBF,KAIhG,IEgEMG,GAAwBC,EAAAA,GAAY,EAAI,EAgzB9C,IAAerxC,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAqB,CAACrN,GACxCsK,SACAw3B,UACAvyB,wBAEA,MAAM,UAAEq/B,GAAc5uC,EAChB6uC,GAAOC,EAAAA,EAAAA,KAAW9uC,EAAQsK,GAC1BsD,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQsK,GAC1B0kC,GAAeC,EAAAA,EAAAA,KAAmBjvC,EAAQsK,GAC1CkD,GAAWC,EAAAA,EAAAA,KAAezN,IAE9B6/B,aAAa,QACX/iB,EAAO,UACPoyB,EAAS,mBACTC,EAAkB,mBAClBrP,EAAkB,UAClBsP,GAEFC,iBAAmBvN,QAASwN,GAAkB,aAC9CC,EAAY,iBACZC,EAAgB,SAChBC,EAAQ,YACRC,EAAW,cACXC,EAAa,kCACbC,GACEpiC,GACInD,OAAQwlC,GAAuBN,GAAgB,CAAC,EAClDjR,GAAQ2G,EAAAA,EAAAA,KAAgBjlC,EAAQsK,EAAQw3B,GACxCrD,EAAgBH,GAAS,YAAaA,EACtCwR,EAAmBrmC,QACvBmmC,GACGV,GAAaI,GAAoB9hC,EAASuiC,gBAAgBjO,SAAW4N,GAAeP,GACpFU,GAAsBtgC,GAAqBigC,GAAoB1P,GAAsB2P,GAAYE,GAGhG7Q,EAAcL,EAAgBH,EAAMQ,iBAAcz9B,EAClD2uC,EAAavR,EAAgBH,EAAM0R,gBAAa3uC,EAChD4uC,EAAkBnR,GAAaiK,YAChCiH,GAAYE,MAAMC,GAAwD,gBAAdA,EAAKtwC,QAAyBuwC,UACzFC,EAAgBJ,GAAkBhd,EAAAA,EAAAA,KAAWjzB,EAAQiwC,QAAmB5uC,EACxEivC,GAAsBzd,EAAAA,EAAAA,KAA+B7yB,EAAQ,yBAE7DuwC,EAAW9R,GAAiBH,EAAMkS,QAASvd,EAAAA,EAAAA,KAAWjzB,EAAQs+B,EAAMkS,aAAUnvC,EAC9EovC,GAAoBC,EAAAA,EAAAA,KAA4B1wC,EAAQsK,GACxDqmC,GAAkBC,EAAAA,EAAAA,KAA0B5wC,GAElD,MAAO,CACLyyB,KAAOoc,GAAQjhC,EACfyiC,gBACAE,WACAjS,QACAuS,WAAYzB,GAAW0B,iBAAiBxmC,GACxCwS,UACAyhB,sBAAsB0B,EAAAA,EAAAA,KAA2BjgC,GACjD8vC,mBACAiB,qBAAsBnC,EAAWmC,qBACjCC,oBAAqBpC,EAAWqC,kBAAoBrC,EAAWsC,yBAC/DC,YAAa1nC,QAAQmE,GACrBwjC,sBAAuB3nC,QAAQulC,GAAcqC,UAC7CtR,YAAa//B,EAAOggC,QAAQD,YAC5BuQ,sBACAG,oBACAE,qBA9DgBtjC,EA3yBpB,UAAe,OACb/C,EAAM,QACNw3B,EAAO,KACPrP,EAAI,cACJ4d,EAAa,SACbE,EAAQ,QACRzzB,EAAO,kBACPw0B,EAAiB,iBACjBC,EAAgB,MAChBjT,EAAK,WACLuS,EAAU,cACVrH,EAAa,WACbx/B,EAAU,iBACV8lC,EAAgB,qBAChBiB,EAAoB,oBACpBC,EAAmB,YACnBG,EAAW,sBACXC,EAAqB,eACrBI,EAAc,qBACdjT,EAAoB,YACpBwB,EAAW,oBACXuQ,EAAmB,SACnBmB,EAAQ,QACRlnC,EAAO,SACP4E,EAAQ,kBACRshC,EAAiB,gBACjBE,IAEA,MAAM,UACJe,EAAS,oBACTC,EAAmB,kBACnBC,EAAiB,cACjBhQ,EAAa,uBACbiQ,EAAsB,gBACtBrd,EAAe,cACfsd,EAAa,qBACbvM,EAAoB,SACpB4D,EAAQ,iBACR9I,EAAgB,uBAChB0R,EAAsB,iBACtBC,EAAgB,UAChBC,EAAS,eACTC,EAAc,mBACd/R,IACEz1B,EAAAA,EAAAA,MACE+1B,GAAaC,EAAAA,GAAAA,MAEbyR,IAAUzmC,EAAAA,EAAAA,KACVD,IAAO2mC,EAAAA,GAAAA,MACP,SAAEr0C,KAAaC,EAAAA,EAAAA,OACdq0C,GAAoBC,GAAsBC,KAA0B30C,EAAAA,EAAAA,IAAQ,IAC5E40C,GAA0BC,GAAWC,KAAc90C,EAAAA,EAAAA,IAAQ,IAC3D+0C,GAAgBC,GAAkBC,KAAsBj1C,EAAAA,EAAAA,IAAQ,IAChEk1C,GAAcC,GAAgBC,KAAoBp1C,EAAAA,EAAAA,IAAQ,IAC1Dq1C,GAAmBC,GAAeC,KAAev1C,EAAAA,EAAAA,IAAQ,IACzDw1C,GAAoBC,KAAyBxoC,EAAAA,EAAAA,KAAS,IACtDyoC,GAAqBC,GAAyBC,KAA6B51C,EAAAA,EAAAA,IAAQ,IACnF4gC,GAAoBiV,GAAsBC,KAA0B91C,EAAAA,EAAAA,IAAQ,GAC7E8hB,IAAW3X,EAAAA,EAAAA,OACX,eACJ22B,GAAc,QACdC,GAAO,eACPE,GAAc,UACdE,GAAS,eACT53B,GAAc,QACdlB,GAAO,QACPi5B,GAAO,cACPE,GAAa,aACbC,GAAY,aACZC,GAAY,YACZC,GAAW,SACXC,GAAQ,YACRC,GAAW,kBACXG,IACEvB,GAAcC,EAAOC,EAAsBC,IAEzCC,GAAgBH,GAAS,YAAaA,EACtCqV,GAAcrpC,IAAWymC,EACzB6C,IAAcxmC,EAAAA,EAAAA,IAAS9C,GACvBupC,IAAeD,GACfE,GAAiBD,KAAe1hB,EAAAA,EAAAA,IAAcM,GAC9Cka,GAAQlO,IAAiBH,EAAMqO,MAE/BoH,IAAkBpJ,EAAAA,GAAAA,GACtBgC,IAASrO,EAAMyH,iBAAc1kC,GAC7B,GAEI2yC,IAAsBrJ,EAAAA,GAAAA,GAC1BgC,GAAQrO,EAAMyH,iBAAc1kC,GAC5B,GAEI4yC,GAAkBxqC,QACtBkjC,IAAUrO,EAAM3M,KAAOqf,GAAuBtQ,EAAAA,GAAAA,OAG1CwT,GAAqB7D,GAAgB9d,EAAAA,GAAAA,IAAa4f,GAAS9B,GAC5D5R,IAAiBH,EAAMQ,aAAauK,SAEnC8K,GAAc1qC,QAClBg1B,IACGH,EAAM8O,WACLuG,IACDlhB,GAAM2hB,aAGLC,GAAW5qC,QACfg1B,IACGH,EAAM8O,WACL9O,EAAMoB,aACNiU,KACAV,IAGAqB,GAAe7qC,QACnB81B,KAAgBuQ,GAAoBgD,KAAiBT,KAAuBY,KACxEG,KAAuBE,IAGvBz7B,GAAW4mB,IAAiBH,EAAM7sB,QAAQhR,OAAOoX,SACnDymB,EAAM7sB,QAAQhR,MAAMoX,cACpBxW,EAEEkzC,KAAuB5H,IAASiH,IAAiBD,IAAgBG,IAAmBnD,GACpF6D,GAAmB/V,KAAkB8V,KAAuB5H,IAASmH,IACrE7e,GAAkBl3B,IAAYuyC,EAAsB,YAAc,QAGtE9tB,aAAciyB,GACd/xB,qBAAsBgyB,KACpB9xB,EAAAA,GAAAA,IAA6B2c,KAG/B7c,qBAAsBiyB,KACpB/xB,EAAAA,GAAAA,GAA4BnZ,QAAQ21B,KAElCwV,IAAWC,EAAAA,GAAAA,GAAc9V,IAAYS,IACrCsV,IAA8BC,EAAAA,GAAAA,GAA6B5tC,KAG/Dqb,aAAcwyB,GACdtyB,qBAAsBuyB,KACpBryB,EAAAA,GAAAA,GAA4B2xB,KAG9B/xB,aAAc0yB,GACdxyB,qBAAsByyB,KACpBvyB,EAAAA,GAAAA,GAA4B+b,IAAWsU,KAEnCvwB,qBAAsB0yB,KAAkCxyB,EAAAA,GAAAA,IAA4B,IAE1FJ,aAAc6yB,GACd3yB,qBAAsB4yB,KACpB1yB,EAAAA,GAAAA,GAA4B+b,IAAWE,IAErC0W,IAAuBC,EAAAA,GAAAA,GAAa91B,GAAU0f,GAAeqW,GAAAA,IAEnEC,EAAAA,GAAAA,GAAkBprC,EAAQw3B,IAE1B74B,EAAAA,EAAAA,KAAU,KACJ64B,GACF4P,EAAU,CAAEpnC,SAAQw3B,cAErB,CAACA,EAASx3B,KAEbrB,EAAAA,EAAAA,KAAU,KACR4oC,EAAuB,CAAEvnC,aACxB,CAACA,KAGJrB,EAAAA,EAAAA,KAAU,KACR,MAAM0sC,GAAWvoC,EAAAA,EAAAA,IAAS9C,IACrB6mC,GAAewE,GAClB1D,EAAU,CAAE/mC,OAAQZ,MAErB,CAAC6mC,EAAa7mC,KACjBrB,EAAAA,EAAAA,KAAU,KACJkoC,IAAgBC,GAClBY,EAAiB,CAAE1nC,aAEpB,CAAC8mC,EAAuBD,EAAa7mC,IAExC,MAAMsrC,IAAmB3qC,EAAAA,EAAAA,IAAgB,KACnChF,IACFyZ,GAASxX,SAAS6a,QAGpB8vB,KACAH,QAGImD,IAAkB5qC,EAAAA,EAAAA,IAAgB,KACjCqpC,KAEL7B,KACKxsC,IAAS2sC,SAGVkD,IAAuB7qC,EAAAA,EAAAA,IAAgB,KAC3CsoC,QAEIwC,IAAqB9qC,EAAAA,EAAAA,IAAgB,KACzCuoC,QAGIwC,IAAyB/qC,EAAAA,EAAAA,IAAgB,KAC7CwoC,KACAmC,QAGIK,IAA0BhrC,EAAAA,EAAAA,IAAgB,KAC9CyoC,KACAmC,SAIAhM,YAAaqM,GACbC,UAAWC,GACX3xB,aAAc4xB,GACdC,aAAcC,GACdC,WAAYC,KACVC,EAAAA,GAAAA,GAAa,CACfC,QAASb,GACTpU,MAAOqU,KAGHzzB,IAAgBC,EAAAA,GAAAA,GACpB7C,QACAre,GACC4E,KAAYm5B,IAAiBmW,IAG1BqB,GAAaxX,MAAmBC,IAAgBC,KAEtDr2B,EAAAA,EAAAA,KAAU,KACJ2tC,KAAet0B,IAAeuzB,OACjC,CAACe,GAAYt0B,MAEhBu0B,EAAAA,GAAAA,IAAkB7D,GAAkBD,KAEpC9pC,EAAAA,EAAAA,KAAU,KACH2tC,IACLl3B,GAASxX,SAAS4uC,SACjB,CAACF,MAEJ3tC,EAAAA,EAAAA,KAAU,MACHw1B,IAAiBC,IAAkBuV,KAEnCtH,IAAUmH,KAGf5B,EAAe,CAAE5nC,SAAQw3B,cACxB,CAACpD,GAAgBuV,GAAiBxV,GAAen0B,EAAQw3B,EAAS6K,GAAOmH,MAE5E7qC,EAAAA,EAAAA,KAAU,KAEN6mC,IAAqBgD,IAAgBT,IAClCY,IAAqBG,IAAsBE,GAE9CsC,KAEAC,OAED,CACDA,GAAiB/C,GAAcG,GAAmBZ,GAClDvC,EAAkBsD,GAAoBE,MAGxCrqC,EAAAA,EAAAA,KAAU,KACR,KAAIopC,IAAsBvC,GAAoBmD,IAa9C,OAFA1yC,SAASkU,iBAAiB,UAAWyP,GAE9B,KACL3jB,SAASmU,oBAAoB,UAAWwP,IAV1C,SAASA,EAAc3Y,GApRL,KAqRZA,EAAEwrC,UACJxrC,EAAE6Y,iBACFivB,IAAuBD,IAE3B,IAOC,CAACH,GAAmBZ,GAAoBe,GAAoBtD,KAG/DxL,EAAAA,GAAAA,IAAsB,EACpB0S,EACAC,EACAC,EACAC,EACAC,OAGGhE,IAAsBH,IAAqBZ,IACzCvC,IAAqBgD,IAAgBQ,IAMxC2D,IAA0BhE,IACvB+D,IAA2B3E,IAC3B6E,IAAyBpH,GACzBqH,IAAqBrE,IACrBsE,IAA4B9D,IAE/BD,IAAsB,KAEvB,CAAChB,GAAoBY,GAAmBnD,EAAkBgD,GAAcQ,GAAqBF,KAEhG,MAAMiE,IAAiBpsC,EAAAA,EAAAA,IAAgB,KACrCV,IACA4+B,EAAS,CAAE3qC,GAAI8L,OAGXgtC,IAAyBrsC,EAAAA,EAAAA,IAAgB,KAC7CV,IACA4+B,EAAS,CAAE3qC,GAAI6xC,EAAe7xC,QAG1B+4C,IAAsBtsC,EAAAA,EAAAA,IAAgB,KAC1CV,IACA4+B,EAAS,CAAE3qC,GAAI+xC,EAAU/xC,QAGrBg5C,IAAsBvsC,EAAAA,EAAAA,IAAgB,KAC1C2mC,OAGI6F,IAAsBxsC,EAAAA,EAAAA,IAAgB,KAC1C22B,OAGI8V,IAA6BzsC,EAAAA,EAAAA,IAAiBM,IAClD,MAAM9K,EAAQ8K,EAAE6X,cACZ3iB,EAAM4iB,YAAcqrB,GACtBkE,KAEAC,KAEEh7B,KAAY7G,EAAAA,GAAAA,IAAMvQ,EAAMsV,YAAa,KAAM/E,EAAAA,GAAAA,IAAM6G,GAAU,IAC7D4/B,SAIJxuC,EAAAA,EAAAA,KAAU,IACAuoC,KAAqBa,QAGxBhxC,GAH6Cs2C,EAAAA,GAAAA,GAAyB,CACzEC,QAASH,GACTI,OAAQL,MAET,CAAChG,EAAgBa,KAEpB,MAAMyF,IAAsB7sC,EAAAA,EAAAA,IAAgB,KAC1C6mC,EAAc,CAAExnC,SAAQw3B,eAGpBiW,IAAiB9sC,EAAAA,EAAAA,IAAgB,KACrCs6B,EAAqB,CAAEj7B,SAAQw3B,UAASiE,aAAa,OAGjDiS,IAAmB/sC,EAAAA,EAAAA,IAAgB,KACvCs6B,EAAqB,CAAEj7B,SAAQw3B,UAASiE,aAAa,OAGjDlE,IAAyB52B,EAAAA,EAAAA,IAAgB,KAC7CwmC,EAASnT,MAGL2Z,IAAyBhtC,EAAAA,EAAAA,IAAgB,KAC7CkE,OAGIw+B,IAAqB1iC,EAAAA,EAAAA,IAAgB,KACzCupB,EAAgB,CAAE0F,WAAY5vB,EAAQw3B,eAGlCoW,IAAwBjtC,EAAAA,EAAAA,IAAgB,KAC5C8mC,OAGIoG,IAAyBltC,EAAAA,EAAAA,IAAgB,KAC7C,MAAMi6B,GAAczG,IAAiBH,EAAM8O,cACvC/rC,EACAi9B,EAAM8Z,cAAgB,WAAc9Z,EAAM+Z,kBAAoB,eAAiB,SAEnF,IAAI94C,EACJ,MAAM+4C,GAAS/lB,EAAAA,GAAAA,IAAa4f,GAAS1f,GACrC,OAAQyS,GACN,IAAK,SACH3lC,EAAU4yC,GAAQ,4BAA6BmG,GAC/C,MACF,IAAK,WACH/4C,EAAU4yC,GAAQ,oBAAqBmG,GACvC,MACF,IAAK,eACH/4C,EAAU4yC,GAAQ,wBAAyBmG,GAC3C,MACF,QACE,OAEJjY,EAAiB,CAAE9gC,eAGfmkB,IAAoBzY,EAAAA,EAAAA,IAAgB,KACpCi0B,GACFmB,EAAiB,CACf9gC,QAAS4yC,GAAQ,mCAKrBzyB,GAASxX,QAASyb,OAASjE,GAASxX,QAASyb,MAC7CguB,EAAoB,CAAE70B,SAAUA,QAG5By7B,IAAyBttC,EAAAA,EAAAA,IAAgB,KAC7C,GAAI80B,EAAYyY,cAAe9X,EAAAA,GAAAA,MAAkBX,EAAYyY,YAA7D,CACE,MAAMC,EAAO1Y,EAAYyY,aAAc9X,EAAAA,GAAAA,MACvCL,EAAiB,CACfx0B,MAAOsmC,GAAQ,iBACf5yC,QAAS4yC,GAAQ,oCAAoCz3B,EAAAA,GAAAA,IAAoB+9B,IACzE5gC,SAzamC,KA4avC,MAEAsoB,EAAmB,CAAE91B,QAAQ,OAGzBquC,IAAiBztC,EAAAA,EAAAA,IAAgB,KAChC20B,KACL9tB,EAAAA,GAAAA,GAAS8tB,GAAmB,SAASt1B,KAAUw3B,KAAW77B,GAAU,MAAQ,aAG9EgD,EAAAA,EAAAA,KAAU,KACHy1B,IAEL2B,EAAiB,CACf9gC,QAAS4yC,GAAQ,qBAElB,CAACA,GAASzT,KAEb,MAAM5tB,IAA8DrK,EAAAA,EAAAA,KAAQ,IACnE,EAAGsK,YAAW1G,aAEjB1L,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLqN,QAAStgB,GACTc,KAAK,OACL0N,MAAM,oBACNE,QAASsE,EACTtS,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAe7R,GAAU,UACnD4G,UAAWkhC,GAAQ,qBAAqBzzC,UAExCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,YAIhB,CAAClO,GAAUo0C,KAqMd,MAAMwG,GAAmBlI,EACrBhlC,GAAK,+BAAgC,CACrCmtC,QAAQC,EAAAA,GAAAA,IAAkBptC,GAAMglC,EAAmB,CAAEqI,QAAQ,EAAMr6C,UAAW,2BAC7E,CACDs6C,WAAW,IAEX5G,GAAQ0B,GAAc,oBAAsB,kBAEhD,OACEt1C,EAAAA,GAAAA,IAAA,OACEE,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAmB,wBAC7C2tB,YAAaqM,GACbC,UAAWC,GACX3xB,aAAc4xB,GACdC,aAAcC,GACdC,WAAYC,GAAwB/3C,SAAA,EAEpCH,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GnBtxB0S,WmBsxBvQugC,IAA+B12C,SAAA,EAlNlFC,EAAAA,GAAAA,GAAA,OAAKF,UnBpkBypB,WmBokBvnBC,UACnC8qC,EAAgB,CAAC1H,GAAW+O,GAAc,IAAI1+B,KAAK3T,IACnDG,EAAAA,GAAAA,GAACq6C,GAAa,CAEZ9gC,SAAU1Z,IAAO8/B,GAAO9/B,GACxByH,QAASA,GACTmoC,SAAU3kC,QAAQ60B,GAAO9/B,KAAQ+yC,GAAoBD,EAAqB9yC,EAAK8/B,GAAO9/B,GAAKA,EAAK8/B,GAAO9/B,KACvG6vC,UAAWsE,GACX96B,SAAUA,GACVy2B,gBAAiBmJ,IANZ,YAAYj5C,UAmHvBD,EAAAA,GAAAA,IAAA,OAAKE,UnB1rB6qB,WmB0rBppBC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CAACC,UAAW3X,OAAO1Z,GAAS2B,KAAMgpB,GAAiBx2B,UnB3rBopB,WmB2rB7mBC,UApDvGH,EAAAA,GAAAA,IAAA,OAAKE,UnBvoBuuB,WmBuoB1sBC,SAAA,EAChCC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CACLC,KAAMA,EACN5zB,KAAK,OACL4N,QAAS4qC,MAEX94C,EAAAA,GAAAA,IAAA,OAAKE,UnB7oB6vB,WmB6oBhuBC,SAAA,EAChCC,EAAAA,GAAAA,GAAA,QAAM8N,QAAS4qC,GAAgB54C,UnB9oByvB,WmB8oB5tBC,UACzDg0B,EAAAA,GAAAA,IAAWH,EAAAA,GAAAA,IAAa4f,GAAS1f,IAAS,OAE7Cl0B,EAAAA,GAAAA,IAAA,OAAKE,UnBjpB6yB,WmBipB9wBC,SAAA,CACjCw1C,KACC31C,EAAAA,GAAAA,IAAA,QACEE,WAAWoW,EAAAA,GAAAA,GACTqH,GnBrpBu3C,WmBqpB/0Cm0B,GnBrpBs2C,YmBupBh5C5jC,QAAS4jC,EAAgBiH,QAAyBj2C,EAAU3C,SAAA,EAE5DC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,UACXtN,EAAAA,GAAAA,GAAA,QAAMF,UAAWyd,GAAmBxd,UACjCg0B,EAAAA,GAAAA,GAAWwhB,SAIjB3D,IACChyC,EAAAA,GAAAA,IAAA,QACEE,WAAWoW,EAAAA,GAAAA,GACTqH,GnBlqBs9C,YmBoqBx9CzP,QAAS8qC,GAAoB74C,SAAA,EAE7BC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CAACC,KAAM8d,EAAU1xC,KAAK,WAC7BF,EAAAA,GAAAA,GAAA,QAAMF,UAAWyd,GAAmBxd,UACjCg0B,EAAAA,GAAAA,IAAWH,EAAAA,GAAAA,IAAa4f,GAAS5B,IAAa,SAIpDjS,GAAS,SAAUA,IAClB3/B,EAAAA,GAAAA,GAAA,QAAMF,UAAWyd,GAAiBxd,UAAEu6C,EAAAA,GAAAA,IAAuB9G,GAAS1R,EAAYnC,EAAM3M,QAEvF8M,IAAiBH,EAAM4a,WACtBv6C,EAAAA,GAAAA,GAAA,QAAMF,UAAWyd,GAAiBxd,SAAEyzC,GAAQ,oCAelD5zC,EAAAA,GAAAA,IAAA,OAAKE,UnB/rBo3B,WmB+rB11BC,SAAA,CA3GrC,WACE,IAAKk1C,GAAa,OAElB,IAAIuF,EAAwB,iBAC5B,MAAMC,EAA6C,CACjD,iBAAkB,CAAC,UAAW,WAC9B,cAAe,CAAC,UAAW,WAC3B,kBAAmB,CAAC,UAAW,WAC/B,eAAgB,CAAC,UAAW,YAG9B,GAAIzM,GAAO,CACT,MAAM,WAAEzH,GAAgB5G,GAAS,eAAgBA,GAASA,EAAM4G,YAAe,CAAC,EAEhF,OAAQA,GACN,IAAK,YACHiU,EAAc,iBACd,MACF,IAAK,WACHA,EAAc,cACd,MACF,IAAK,eACHA,EAAc,kBACd,MACF,IAAK,SACHA,EAAc,eAEpB,KAAO,CACL,IAAK7a,KAAW,YAAaA,IAAUA,EAAM8O,SAC3C,OAGF+L,EAAc7a,EAAM+Z,kBAChB,kBACC/Z,EAAM8Z,cAAgB,cAAgB,cAC7C,CAEA,OACE75C,EAAAA,GAAAA,IAAA,OACEE,WAAWoW,EAAAA,GAAAA,GnB3nBg6B,WmB2nBx3B83B,InB3nB05B,YmB4nB78BlgC,QAASkgC,GAAQuL,GAAwBC,GACzC3zC,MAAO,iBAAiB40C,EAASD,GAAa,mBAAmBC,EAASD,GAAa,KAAKz6C,SAAA,EAE5FC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAMktC,IACXxM,KAAShuC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,WAG3B,CA6DSotC,GACApzC,KACCtH,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAWyd,GACXlL,OAAK,EACLqN,QAAStgB,GACTc,KAAK,OACL0N,MAAM,oBACNsS,UAAW0gB,GACX9yB,QAASiX,GACTzS,UAAWkhC,GAAQ,UAAUzzC,UAE7BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAO6Q,GAAWoiB,GAAW,sBAAwB,qBAG/D3gC,EAAAA,GAAAA,IAACyT,GAAAA,EAAY,CACXvT,UnBhtBq/B,WmBitBr/BwT,QAASnB,GACToB,UAAU,QACVonC,OAAQtD,GACRzrC,QAAS0rC,GAAwBv3C,SAAA,CAEhCy1C,KAAex1C,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,OAAOlF,QAASqrC,GAAoBp5C,SAAEyzC,GAAQ,cAC5E4B,KACCp1C,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,aAAalF,QAASsrC,GAAer5C,SACjDyzC,GAAQyB,GAAc,YAAc,iBAGxCI,KACCr1C,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,SAASlF,QAASurC,GAAiBt5C,SAC/CyzC,GAAQyB,GAAc,eAAiB,qBAG3CnU,KACC9gC,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,WAAWkN,UAAW+gB,GAAmBnzB,QAASisC,GAAeh6C,SAC7EyzC,GAAQ,yBAGXxF,IAASiH,KACTj1C,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,sBAAsBlF,QAAS8rC,GAAuB75C,SAClEyzC,GAAQ,kBAGXxF,KAAShuC,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,OAAOlF,QAASwrC,GAAuBv5C,SAAEyzC,GAAQ,sBAC1ExF,KACChuC,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,SACLI,aAAW,EACXtF,QAASo1B,GAAuBnjC,SAE/ByzC,GAAQ,gBAIfxzC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,WAAWoW,EAAAA,GAAAA,GAAeqH,GnBvvBs0B,YmBwvBh2BlL,OAAK,EACLnS,KAAK,OACL0N,MAAM,oBACN0E,UAAWkhC,GAAQ,SACnB1lC,QAASlC,EAAQ7L,UAEjBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,sBA6BjB1N,EAAAA,GAAAA,IAAA,OACEE,UnB5xB0mB,WmB6xB1mB+F,MAAO,UAAUwF,EAAW7B,oBAAoB6B,EAAWxB,WAAW9J,SAAA,EAEtEC,EAAAA,GAAAA,GAAA,UAAQgU,IAAKiiC,GAAUn2C,UAAWyd,KACjC/U,KACCxI,EAAAA,GAAAA,GAAA,OAEE2D,IAAK6E,GACLhF,WAAW,EACX8kB,IAAI,GACJxoB,WAAWoW,EAAAA,GAAAA,GAAeqH,GnBtyB+Y,WmBsyB5W44B,KAJxD,WAAWhT,KAOnB2S,KACC91C,EAAAA,GAAAA,GAAC46C,GAAAA,EAAQ,CAAC96C,WAAWoW,EAAAA,GAAAA,GAAe6/B,GAA8Bx4B,OAElEjW,IAAWm5B,KACXzgC,EAAAA,GAAAA,GAAA,OACE2D,IAAK88B,GACLnY,IAAI,GACJxoB,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAcy4B,IACxCxyC,WAAW,IAGd8D,IAAWm5B,KACV7gC,EAAAA,GAAAA,IAACi7C,GAAAA,EAAc,CACb7mC,IAAK+M,GAELjhB,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAcy4B,IACxC8E,QAASjH,GACT7uB,MAAO7G,EACP3U,MjBxzBoB,IiByzBpBK,OjBxzBqB,KiByzBrBrG,WAAW,EACX2iB,aAAW,EACXjE,yBAAuB,EACvB64B,YAAU,EACVv0B,QAAS0tB,GACT7tB,UAAW6tB,GACX8G,uBAAqB,EACrBv0B,aAAcsyB,GAA2Bh5C,SAAA,EAEzCC,EAAAA,GAAAA,GAAA,UAAQ2D,IAAK88B,GAAev/B,KAAM41C,GAAAA,EAAoBttC,MAAM,QAC3Dm3B,KAAgB3gC,EAAAA,GAAAA,GAAA,UAAQ2D,IAAKg9B,GAAcz/B,KAAM+5C,GAAAA,EAAsBzxC,MAAM,UAhBzE,SAAS25B,MAoBhBwR,KAAwBjB,KACxB9zC,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,UACEkB,KAAK,SACLpB,WAAWoW,EAAAA,GAAAA,GAAeqH,GnB/0B2sC,YmBg1BruCzP,QAAS+qC,GACT,aAAYrF,GAAQ,eAEtBxzC,EAAAA,GAAAA,GAAA,UACEkB,KAAK,SACLpB,WAAWoW,EAAAA,GAAAA,GAAeqH,GnBr1B6tC,YmBs1BvvCzP,QAASgrC,GACT,aAAYtF,GAAQ,aAIzB1T,IAAiBW,KAChBzgC,EAAAA,GAAAA,GAACk7C,GAAAA,EAAgB,CAEfvb,MAAOA,EACPpmB,UAAQ,EACRy6B,eAAgBnU,IAHX,gBAAgBsD,KAAWx3B,MAMlCvM,KACAY,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAexd,UAC7BH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAoBxd,SAAA,EAClCC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CACLC,KAAMA,EACNqnB,WAAS,EACTC,gBAAgB,cAElBp7C,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAYxd,UAAEg0B,EAAAA,GAAAA,IAAWH,EAAAA,GAAAA,IAAa4f,GAAS1f,IAAS,cAM/E+hB,KACC71C,EAAAA,GAAAA,GAAC4tC,GAAW,CAACjO,MAAOA,EAAO7/B,UAAW22C,KAEvCF,KACCv2C,EAAAA,GAAAA,GAAA,OACEwpC,SAAU,EACVC,KAAK,SACL3pC,WAAWoW,EAAAA,GAAAA,GnBx3B2E,WmBw3BpCsgC,IAClD1oC,QAASA,IAAM0mC,KACf,aAAYhB,GAAQ,WAGvBxT,KAAWhgC,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GnB73BsW,WmB63B/TygC,MAClED,KACC12C,EAAAA,GAAAA,GAACq7C,GAAY,CAEX1b,MAAOA,EACP8L,WAAY6I,GACZ5I,SAAU6I,GACV5I,OAAQ6I,GACR10C,UAAW62C,IALN,WAAWxT,KAAWx3B,KAQ9B0qC,KACCr2C,EAAAA,GAAAA,GAACs7C,GAAAA,EAAQ,CACPp6C,KAAK,QACLqL,OAAQZ,EACR0D,SAAUksC,EAAAA,GACVpY,QAASA,EACT/pB,SAAU40B,GACV79B,gBAAgB,SAChB/Q,UAAUo8C,EAAAA,EAAAA,MACVC,yBAA0BC,EAAAA,IAC1BC,gBAAiBC,EAAAA,IACjBC,QAAQ,mBACR/7C,WAAWoW,EAAAA,GAAAA,GnBp5BiU,WmBo5BjSogC,IAC3C0D,iBAAkBA,GAClBrpC,UAAW+kC,GAAW1G,QAAqBtsC,EAC3Co5C,QAASnI,GACToI,OAAQnI,OAKlB,KC9zBA,IAAej1C,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAqB,CAACrN,GAAUyyB,WAClD,MACEoN,aACE8a,mBAAoBC,EAAmB,OACvCh5C,EAAM,UACNwtC,KAEA3hC,EAAAA,EAAAA,KAAezN,GAEnB,MAAO,CACL66C,aAAcpoB,GAAMj0B,GAAKo8C,IAAsBnoB,EAAKj0B,SAAM6C,EAC1DO,SACAk5C,kBAAmBroB,GAAMj0B,GAAK4wC,GAAW0B,iBAAiBre,EAAKj0B,SAAM6C,KAZrDgM,EAhEpB,UAAsB,KACpBolB,EAAI,YAAEsoB,EAAW,aAAEF,EAAY,kBAAEC,EAAiB,OAAEl5C,IAEpD,MAAM,gBAAEqnC,EAAe,uBAAE4I,IAA2BnnC,EAAAA,EAAAA,MAC9Ce,GAAOC,EAAAA,EAAAA,KAEP4yB,GAAQ73B,EAAAA,EAAAA,KAAkC,KAC9C,IAAKs0C,EACH,OAGF,MAAM,WACJlK,EAAU,WAAEmK,EAAU,KAAE3V,GACtB0V,EACEE,EAAmBpK,EAAWA,EAAW1wC,OAAS,KAAO66C,EACzDE,EAAiBL,GAAgBC,GAAmBtsB,SAASqsB,GAC/DA,IAAiBI,EAAoBD,IAAe,GAAM,IACzD,EAGL,OAAO3V,EAFUA,EAAK6V,IAAiB18C,IAAMs8C,IAAoB,IAAMjK,EAAW,MAGjF,CAACgK,EAAcE,EAAaD,IAEzBK,EAAW7c,GAAS,YAAaA,GAEvCr1B,EAAAA,EAAAA,KAAU,KACJq1B,IAAU6c,GACZtJ,EAAuB,CAAEvnC,OAAQg0B,EAAMh0B,WAExC,CAACg0B,EAAO6c,IAEX,MAAM16C,EAAQ06C,EAAW7c,EAAM7sB,QAAQhR,WAAQY,EACzC+5C,EAAYD,GAAWlc,EAAAA,EAAAA,IAAkBX,QAASj9B,EAElDg6C,GADat0C,EAAAA,EAAAA,GAASq0C,IACG36C,GAAOs+B,WAAWl3B,QAEjD,GAAK4qB,GAAS6L,KAAS,cAAeA,GAItC,OACE//B,EAAAA,GAAAA,IAAA,OACEE,UAAWyd,GACXzP,QAASA,KAAQw8B,EAAgB,CAAE3+B,OAAQg0B,EAAMh0B,OAAQw3B,QAASxD,EAAM9/B,GAAIoD,YAAalD,SAAA,CAExF28C,IACC18C,EAAAA,GAAAA,GAAA,OAAK2D,IAAK+4C,EAAUp0B,IAAI,GAAGxoB,UAAWyd,GAAc/Z,WAAW,IAEhEg5C,IAAYx8C,EAAAA,GAAAA,GAACk7C,GAAAA,EAAgB,CAACvb,MAAOA,KAEtC3/B,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAexd,UAC7BH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAoBxd,SAAA,EAClCC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CACLC,KAAMA,EACNqnB,WAAS,EACTC,gBAAgB,cAElBp7C,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAYxd,UAAEg0B,EAAAA,GAAAA,IAAWH,EAAAA,GAAAA,IAAa9mB,EAAMgnB,IAAS,aAK/E,KC7BkC,IAE7BhL,GAAc,SAAdA,GAAc,OAAdA,EAAAA,EAAc,2BAAdA,EAAAA,EAAc,uBAAdA,CAAc,EAAdA,IAAc,IAkZnB,UAAenqB,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAsBrN,IACxC,MACE6/B,aACEv1B,OAAQgxC,EAAexZ,QAASyZ,EAAc,aAAEC,EAAY,cAAEhS,EAAa,UAAEiS,EAAS,UAAEC,EAAS,UAAEtM,KAEnG3hC,EAAAA,EAAAA,KAAezN,IACb,SAAE27C,EAAUC,gBAAgB,OAAEC,IAAa77C,EAAOggC,QAExD,MAAO,CACL2b,WACAG,QAAS1M,GAAW0M,SAAWD,EAC/BP,gBACAC,iBACAC,eACAhS,gBACAiS,YACAC,gBAEA17C,IAAW+7C,EAAAA,EAAAA,KAAwB/7C,IAlBnBqN,EA7YpB,UAAqB,QACnByuC,EAAO,cACPR,EAAa,eACbC,EAAc,OACdlxC,EAAM,aACNmxC,EAAY,cACZhS,EAAa,UACbiS,EAAS,UACTC,EAAS,SACTC,EAAQ,kBACRpsC,EAAiB,SACjBkiC,EAAQ,QACRlnC,EAAO,SACP4E,IAEA,MAAM,mBAAE6sC,IAAuBtxC,EAAAA,EAAAA,MACzBsd,GAAejgB,EAAAA,EAAAA,OACdk0C,EAAiBC,IAAsBrxC,EAAAA,EAAAA,IAASywC,IAChDa,EAAkBC,IAAuBvxC,EAAAA,EAAAA,IAAS0wC,GACnDc,GAAarnB,EAAAA,EAAAA,GAAsBsmB,GACnCgB,GAAqB3R,EAAAA,GAAAA,GAAiB+Q,GAAW,GACjDa,GAAqB5R,EAAAA,GAAAA,GAAiB8Q,GAAW,GACjDe,GAAwB7R,EAAAA,GAAAA,GAAiB6Q,GAAc,GACvDiB,GAAyB9R,EAAAA,GAAAA,GAAiBnB,GAAe,GACzDkT,EAAapf,MACX90B,OAAQ6gB,EAAclhB,MAAOmhB,IAAgBE,EAAAA,GAAAA,KAC/ClB,GAAoBvgB,EAAAA,EAAAA,SAAmC1G,GACvDmnB,GAAgBzgB,EAAAA,EAAAA,KAAO,IACvB,SAAEhK,IAAaC,EAAAA,EAAAA,MAEf2+C,GAAa50C,EAAAA,EAAAA,IAAoD,CAAC,IACjEypC,EAAgBoL,IAAkB/jC,EAAAA,EAAAA,KAAU,GAQnD,SAASgkC,EAAOlqC,EAAiCrI,GAC1CqI,IAGAgqC,EAAWz0C,QAAQoC,GAGtBqyC,EAAWz0C,QAAQoC,GAAQpC,QAAUyK,EAFrCgqC,EAAWz0C,QAAQoC,GAAU,CAAEpC,QAASyK,GAI5C,EAfA8W,EAAAA,GAAAA,GAAe,CACbvR,SAAU7N,EACVqf,OAAQnf,EACRof,kBAAkB,IAcpB,MAAMmzB,GAAmBr2C,EAAAA,EAAAA,KAAQ,KAC/B,GAAIw1C,IAAoBO,GAAyBC,GAC/C,MAAO,CAACR,GAGV,MAAMh5C,EAAQg5C,EAAkBH,EAAQ/gB,QAAQkhB,IAAoB,EACpE,IAAKA,IAA8B,IAAXh5C,EACtB,MAAO,GAGT,MAAMkZ,EAAQvK,KAAKma,IAAI9oB,EAAQ,EAAG,GAC5BmZ,EAAMxK,KAAK4a,IAAIvpB,EAAQ,EAAG64C,EAAQ37C,QAExC,OAAO27C,EAAQiB,MAAM5gC,EAAOC,KAC3B,CAACqgC,EAAwBD,EAAuBP,EAAiBH,IAE9DkB,GAAwBv2C,EAAAA,EAAAA,KAAQ,IAC/Bq2C,EAAiB38C,QAAW87C,EAI1Ba,EAAiB/hB,QAAQkhB,IAHtB,GAIT,CAACA,EAAiBa,IAEfG,GAAsBx2C,EAAAA,EAAAA,KAAQ,IAC7Bq2C,EAAiB38C,QAAWm7C,EAG1BwB,EAAiB/hB,QAAQugB,IAFtB,GAGT,CAACA,EAAewB,KAEnB7zC,EAAAA,EAAAA,KAAU,KACHlL,GAGLm+C,EAAmBZ,KAClB,CAACA,EAAev9C,KAGnBkL,EAAAA,EAAAA,KAAU,KACJgzC,IAAoBX,GAAiBC,IAAmBY,GAC1DC,EAAoBb,KAErB,CAACD,EAAeC,EAAgBU,EAAiBE,KAEpDlzC,EAAAA,EAAAA,KAAU,KACR,IAAIlL,EAKJ,OAJIs+C,GAAcA,IAAef,GAC/BsB,GAAe,GAGV,KACLA,GAAe,MAEhB,CAACP,EAAYf,EAAesB,EAAgB7+C,KAE/CkL,EAAAA,EAAAA,KAAU,IACD,KACAsyC,GAAmBD,GACxBU,EAAmB,CACjB3O,aAAaC,EAAAA,EAAAA,IAAYgO,EAAeC,OAG3C,CAACA,EAAgBD,IAEpB,MAAMxe,EAAcmgB,EAAsBD,EACpC/f,EAAa+f,EAAwBC,EAErCC,GAAsBjyC,EAAAA,EAAAA,IAAgB,IACnC6wC,EAAQqB,QAA+B,CAACC,EAAY9yC,EAAQrH,KACjE,GAAIqH,IAAW2xC,EACbmB,EAAW9yC,GAAUuyB,GAAiB,CACpCxU,MAAOq0B,EAAWr0B,MAClByU,cACAG,aACAF,kBAAmBE,QAEhB,CACL,IAAID,GAA2B,GAC1BC,GAAch6B,EAAQ,GAAK64C,EAAQ74C,EAAQ,KAAOg5C,IACrDjf,GAA2B,GAEzBC,GAAch6B,EAAQ64C,EAAQ37C,OAAS,GAAK27C,EAAQ74C,EAAQ,KAAOg5C,IACrEjf,GAA2B,GAG7BogB,EAAW9yC,GAAUuyB,GAAiB,CACpCxU,MAAOq0B,EAAWr0B,MAClByU,cACAG,aACAF,kBAAmBue,IAAkBhxC,IAAW2yB,EAChDD,4BAEJ,CAEA,OAAOogB,IACN,CAAC,MAGNn0C,EAAAA,EAAAA,KAAU,KACR,IAAK+e,EAAa9f,UAAYmC,EAC5B,OAGF,IAAI8kB,EAAU,EAEd,MAAMkuB,EAAqBA,IAClBpB,EAAkBU,EAAWz0C,QAAQ+zC,IAAkB/zC,aAAU7G,EAGpEwa,EAAa2R,IAGjB,GAAIhF,EAActgB,QAEhB,YADAsgB,EAActgB,SAAU,GAG1B,MAAMA,EAAUm1C,IAChB,GAAKn1C,EAEL,GAAIinB,GAlLgB,GAkLpB,CACE,MAAMmuB,EAAW/8C,SAASo4B,eAAe4hB,EAAAA,KACrC+C,IACFxmC,EAAAA,EAAAA,KAAgB,MACdymC,EAAAA,GAAAA,GAAqBD,KAI3B,MAEInuB,EA5LgB,IA6LlB5kB,IACmB,UAAfijB,EAAM3tB,QACR29C,EAAAA,GAAAA,MACAj0C,WAAWk0C,GAAAA,GA/LQ,SAkMrB3mC,EAAAA,EAAAA,KAAgB,KACd5O,EAAQ1D,MAAMinC,YAAY,sBAAuB,WAKvD,OAAO/vB,EAAAA,GAAAA,IAAcsM,EAAa9f,QAAS,CACzC8kB,cAAc,EACdC,gBAAgB,EAChBK,eAAe,EACfJ,wBAAyB,YACzBpR,OAAQA,CAAC0R,EAAOC,GACdC,cAAaC,kBAEb,GAAInF,EAActgB,QAAS,OAE3B,GAAIoN,EAAAA,IAAgC,eAAtBmY,EAAa5tB,KAAuB,CAChD,MAAM,MAAEmb,GAAWyS,EAAgCI,QAAQ,GAC3D,GAAI7S,GAAS8S,GAAAA,IAA6B9S,GAASsO,EAAcwE,GAAAA,GAC/D,MAEJ,CACA,GAAmB,cAAfN,EAAM3tB,KAAsB,OAChC,MAAMkuB,EAAanc,KAAKya,IAAIqB,GACtBM,EAAapc,KAAKya,IAAIsB,GACtBzlB,EAAUm1C,IAChB,GAAKn1C,IAEDogB,EAAkBpgB,UAAYuf,GAAewG,UAC5Crc,KAAKya,IAAI2B,GAAcG,GAAAA,IAA6BH,EAAaD,EAAaK,GAAAA,IAA2B,CAC5G9F,EAAkBpgB,QAAUuf,GAAewG,SAC3C,MAAMI,EAAQhF,EACd8F,GAAU/T,EAAAA,GAAAA,IAAMuS,GAAcU,EAAOA,GACjCc,EAAU,IACZrY,EAAAA,EAAAA,KAAgB,KACd5O,EAAQ1D,MAAMinC,YAAY,sBAA0Btc,GAAWpxB,EAAW,GAAK,GAA9B,SAGlC,UAAfyvB,EAAM3tB,MAAoB+R,KAAKya,IAAI8C,GAAWZ,MAChD1S,EAAU2R,GACVhF,EAActgB,SAAU,EAE5B,GAEF2T,gBAED,CAACxR,EAAQE,EAAS+e,EAAaD,EAActrB,EAAUk+C,KAE1D1hC,EAAAA,EAAAA,KAAgB,KACd,GAAIxc,EAAU,OACd,MAAMq/C,EAAaF,IAEnBQ,OAAOC,QAAQhB,EAAWz0C,SAASiO,SAAQ,EAAE7L,GAAUpC,eACrD,IAAKA,EAAS,OAEd,IAAKspC,IAOH,OANAtpC,EAAQnG,UAAUic,OAAO9B,GAAuBA,GAA+BA,IAC/EhU,EAAQ1D,MAAMinC,YAAY,sBAAuB,OACjDvjC,EAAQ1D,MAAMinC,YAAY,sBAAuB,OACjDvjC,EAAQ1D,MAAMinC,YAAY,0BAA2B,UACrDvjC,EAAQ1D,MAAMinC,YAAY,wBAAyBmS,OAAOlB,EAAWxe,gBAevE,IAAI/O,EAAU,EACV7kB,IAAW2xC,IACb9sB,GAjRqC,KAiRautB,EAAWve,gBAC7Dj2B,EAAQnG,UAAUC,IAAIka,KAEpB5R,IAAWgxC,IACbnsB,EArRqC,KAsRrCjnB,EAAQnG,UAAUC,IAAIka,KAGxBhU,EAAQnG,UAAUC,IAAIka,IACtBhU,EAAQ1D,MAAMinC,YAAY,sBAAuB,GAAG2R,EAAW9yC,IAAW,OAC1EpC,EAAQ1D,MAAMinC,YAAY,sBAAuB,GAAGtc,QACpDjnB,EAAQ1D,MAAMinC,YAAY,0BAtBpB6P,IAAkBhxC,EACbszC,OAAOlB,EAAWxe,eAEvB5zB,IAAW2xC,EACN2B,OAAOlB,EAAWve,iBAEpB,UAkBV,CAACmd,EAAe9J,EAAgByK,EAAiBS,EAAY3+C,IAEhE,MAAM8/C,GAAsB5yC,EAAAA,EAAAA,IAAiBuiB,IAE3C,MAAMhiB,EAASgiB,EAAMhiB,OAEhBA,GAAWA,EAAOzJ,UAAUw2B,SAASrc,MAEtC+/B,IAAoBX,GACtBY,EAAmBZ,GACnBc,EAAoBb,IACXA,IAAmBY,GAC5BC,EAAoBb,GAEtBqB,GAAe,OAGjB,OAAI7+C,GAEAY,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAgBvJ,IAAKqV,EAAatpB,UAChDC,EAAAA,GAAAA,GAAA,OACEF,UAAWyd,GACXvJ,IAAMA,GAAQkqC,EAAOlqC,EAAKspC,GAAkBv9C,UAE5CC,EAAAA,GAAAA,GAACm/C,GAAK,CACJxzC,OAAQ2xC,EACRna,QAASqa,EACT1K,SAAUA,EACVznC,WAAY0yC,EAAW1e,YACvBuT,iBAAkBgL,EAClBjL,kBAAmBgL,EACnB/sC,kBAAmBA,EACnBi6B,cAAeA,EACfgI,eAAgBA,EAChBjnC,QAASA,EACT4E,SAAUA,SAgElB5Q,EAAAA,GAAAA,IAAA,OACEE,UAAWyd,GACXvJ,IAAKqV,EACLxjB,MAAO,yBAAyBk4C,EAAWr0B,QAC3C01B,gBAAiBF,EAAoBn/C,SAAA,EAErCC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAiBzP,QAASlC,IACzCuyC,EAAiB38C,OAAS,IACzBxB,EAAAA,GAAAA,GAAA,OAAKF,UrBvcuH,WqBuc7E+F,MAAO,WAAWk4C,EAAWze,MAAMz1B,aAEnFs0C,EAAiB3qC,KAAI,CAAC7H,EAAQrH,IACzBqH,IAAW2xC,EA1CrB,SAAqB3xC,GACnB,MAAM9F,EAAQzG,OAAWsD,GAAY28C,EAAAA,GAAAA,GACnC,UAAUtB,EAAW1e,YAAY71B,UACjC,yBAAyBu0C,EAAW1e,YAAYx1B,YAGlD,OACE7J,EAAAA,GAAAA,GAAA,OAEEgU,IAAMA,GAAQkqC,EAAOlqC,EAAKrI,GAC1B7L,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAcA,IACxC1X,MAAOA,EAAM9F,UAEbC,EAAAA,GAAAA,GAACm/C,GAAK,CACJxzC,OAAQA,EACRw3B,QAASqa,EACT1K,SAAUA,EACVznC,WAAY0yC,EAAW1e,YACvBuT,iBAAkBgL,EAClBjL,kBAAmBgL,EACnB/sC,kBAAmBA,EACnBi6B,cAAeA,EACfgI,eAAgBA,EAChBjnC,QAASA,EACT4E,SAAUA,KAhBP7E,EAoBX,CAee2zC,CAAYhC,GArE3B,SAA4B3xC,EAAgBrH,EAAeib,GACzD,MAAM1Z,GAAQw5C,EAAAA,GAAAA,GACZ,UAAUtB,EAAWze,MAAM91B,UAC3B,WAAWu0C,EAAWze,MAAMz1B,YAExB/J,GAAYoW,EAAAA,GAAAA,GAChBqH,GrB5YiiB,WqB8YjiB,SAASgC,KAGX,OACEvf,EAAAA,GAAAA,GAAA,OAEEgU,IAAMA,GAAQkqC,EAAOlqC,EAAKrI,GAC1B7L,UAAWA,EACX+F,MAAOA,EAAM9F,UAEbC,EAAAA,GAAAA,GAACu/C,GAAY,CACXzrB,MAAMQ,EAAAA,EAAAA,MAAWua,EAAAA,EAAAA,MAAaljC,GAC9BywC,YAAaY,IAAWrxC,MAPrBA,EAWX,CAgDa6zC,CAAmB7zC,EAAQrH,EAAOA,EAAQ+5C,OAIzD,KC7ce,SAASoB,GAAiBC,EAFvB,GAGhB,MAAOC,EAAeC,IAAoB1zC,EAAAA,EAAAA,KAAS,IAC5C2zC,EAASC,IAAc5zC,EAAAA,EAAAA,KAAS,GASvC,MAAO,CAAEyzC,gBAAeE,UAASE,cAPZzzC,EAAAA,EAAAA,IAAiBM,IACpC,MAAM,aAAEozC,EAAY,UAAEzlB,EAAS,aAAE7kB,GAAiB9I,EAAEC,OAEpD+yC,EAAiBrlB,EAAYmlB,GAC7BI,EAAWE,EAAezlB,EAAY7kB,EAAegqC,MAIzD,C,0ECjBA,UAAgB,aAAa,WAAW,UAAY,WAAW,qBAAqB,WAAW,iBAAmB,WAAW,KAAO,WAAW,aAAe,WAAW,gBAAgB,WAAW,aAAe,WAAW,OAAS,WAAW,QAAU,WAAW,aAAa,WAAW,UAAY,WAAW,iBAAiB,WAAW,cAAgB,WAAW,SAAW,WAAW,KAAO,WAAW,cAAc,WAAW,WAAa,WAAW,YAAY,WAAW,SAAW,WAAW,YAAY,WAAW,SAAW,WAAW,OAAS,WAAW,cAAc,WAAW,WAAa,WAAW,SAAW,WAAW,OAAS,WAAW,YAAc,WAAW,kBAAkB,WAAW,cAAgB,WAAW,OAAS,WAAW,QAAU,WAAW,MAAQ,WAAW,WAAa,WAAW,sBAAsB,WAAW,kBAAoB,YCkCn2BO,GAAwB,IAAMtqC,EAAAA,EAoKpC,IAAehX,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAqB,CAACrN,GAAU6+C,gBAG3C,CACLpsB,MAHWQ,EAAAA,EAAAA,KAAWjzB,EAAQ6+C,EAAUv0C,QAIxCw0C,mBAAoB9+C,EAAO++C,UAAUD,sBALrBzxC,EAjKF2xC,EAChBH,YACApsB,OACAqsB,yBAEA,MAAM,SACJ3V,EAAQ,iBACR8V,EAAgB,YAChBC,EAAW,UACXC,EAAS,cACTC,EAAa,gBACbC,EAAe,aACfpuB,EAAY,gBACZgY,EAAe,oBACfqW,IACE50C,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,KAEPuX,GAAchY,EAAAA,EAAAA,IAAgB,KAClC,MAAM,KAAEpL,GAASg/C,EAEjB,GAAa,WAATh/C,EAMF,OALAy/C,SACArW,EAAgB,CACd3+B,OAAQu0C,EAAUv0C,OAClBw3B,QAAS+c,EAAU/c,UAKvBmd,IAEA11C,YAAW,KACI,SAAT1J,EACFspC,EAAS,CAAE3qC,GAAIqgD,EAAUv0C,SACP,YAATzK,GACToxB,EAAa,CAAE/lB,OAAQ2zC,EAAUv0C,OAAQ6M,UAAW0nC,EAAU1nC,cAzCrC,QA8CzBooC,GAAiB94C,EAAAA,EAAAA,KAAQ,KAC7B,KAAK2G,EAAAA,EAAAA,IAASyxC,EAAUv0C,QAAS,OACjC,MAAM,OAAEA,EAAM,kBAAEk1C,EAAiB,cAAEC,GAAkBZ,EAC/ChQ,EAAOpc,GACP,UAAEitB,GAAc7Q,GAAQ,CAAC,EACzB8Q,GAAWpX,EAAAA,EAAAA,IAAgBsG,GAE3B9J,EAAmC,GAkDzC,OAhDK0a,IACED,EAUHza,EAAQrzB,KAAK,CACXkuC,QAASA,KACPV,EAAY,CAAE5iB,OAAQhyB,EAAQu1C,eAAe,IAC7CR,EAAgB,CAAE/iB,OAAQhyB,EAAQk1C,mBAAmB,KAEvD3zC,MAAOJ,EAAK,kBAAmBk0C,GAC/BhuC,KAAM,eAfRozB,EAAQrzB,KAAK,CACXkuC,QAASA,KACPT,EAAU,CAAE7iB,OAAQhyB,EAAQu1C,eAAe,IAC3CR,EAAgB,CAAE/iB,OAAQhyB,EAAQk1C,mBAAmB,KAEvD3zC,MAAOJ,EAAK,gBAAiBk0C,GAC7BhuC,KAAM,eAcR+tC,EACF3a,EAAQrzB,KAAK,CACXkuC,QAASA,KACPR,EAAc,CAAE9iB,OAAQhyB,KAE1BuB,MAAOJ,EAAK,iBACZkG,KAAM,cACNI,aAAa,IAGfgzB,EAAQrzB,KAAK,CACXkuC,QAASA,KACHH,GACFP,EAAY,CAAE5iB,OAAQhyB,IACtB+0C,EAAgB,CAAE/iB,OAAQhyB,EAAQm1C,eAAe,MAEjDN,EAAU,CAAE7iB,OAAQhyB,IACpB+0C,EAAgB,CAAE/iB,OAAQhyB,EAAQm1C,eAAe,MAGrD5zC,MAAOJ,EAAKg0C,EAAgB,UAAY,aACxC9tC,KAAM8tC,EAAgB,OAAS,cAC/B1tC,aAAc0tC,IAIX1a,IACN,CAACt5B,EAAMozC,EAAWpsB,IAEfqtB,EAA0C,SAAnBjB,EAAUh/C,KAAkB,eAClC,YAAnBg/C,EAAUh/C,KAAqB,UAAY,OACzCkgD,EAAuC,YAAnBlB,EAAUh/C,MAAyC,WAAnBg/C,EAAUh/C,KAE9DmgD,GAASv5C,EAAAA,EAAAA,KAAQ,KACrB,MAAMw5C,EAAgC,WAAnBpB,EAAUh/C,MAAqBg/C,EAAUvgB,MAAMQ,aAAamhB,WACzEhuB,EAAQ,EAACiuB,EAAAA,GAAAA,GAAiBz0C,EAAuB,IAAjBozC,EAAUltB,OAKhD,OAJIsuB,GACFhuB,EAAMvgB,KAAKjG,EAAK,eAGXwmB,EAAM5M,KAAK,SACjB,CAAC5Z,EAAMozC,IAEV,OACElgD,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAEPxiC,WAAWoW,EAAAA,GAAAA,GACT,iCACAqH,GAAOikC,eACNtB,EAAUY,eAAiBZ,EAAUW,oBAAsBtjC,GAAOkkC,SAErE3zC,QAASwW,EACTo9B,aAAiC,SAAnBxB,EAAUh/C,MAAmBg/C,EAAUhR,UACnDlvC,EAAAA,GAAAA,GAAC2hD,GAAAA,EAAmB,CAClBzS,SAAUgR,EAAUhR,SACpBpvC,UAAWyd,GAAOqkC,aAClB1hD,KAAM+/C,GACNE,mBAAoBA,EACpB0B,eAAa,SAEbn/C,EACJk+C,eAAgBA,EAChBkB,mBAAiB,EACjBC,oBAAqBxkC,GAAOykC,WAAWjiD,UAEtC0O,EAAAA,EAAAA,IAASyxC,EAAUv0C,SAClB3L,EAAAA,GAAAA,GAACiiD,GAAAA,EAAe,CACdniD,WAAWoW,EAAAA,GAAAA,GAAekrC,GAAqB7jC,GAAO2kC,mBACtDvkB,OAAQuiB,EAAUv0C,OAClBw2C,kBAAgB,EAChBd,OAAQA,EACRF,WAAYA,EACZhG,WAAS,EACTtW,eAAa,KAGf7kC,EAAAA,GAAAA,GAACoiD,GAAAA,EAAa,CACZtiD,WAAWoW,EAAAA,GAAAA,GAAekrC,GAAqB7jC,GAAO2kC,mBACtD31C,OAAQ2zC,EAAUv0C,OAClB01C,OAAQA,EACRF,WAAYA,EACZhG,WAAS,KApCR+E,EAAUv0C,YCkHrB,IAAehN,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAYrN,IAC9B,MAAM,UAAE4uC,GAAc5uC,GACd6/B,aAAa,UAAEqP,KAAgBzhC,EAAAA,EAAAA,KAAezN,IAChD,QACJ8hC,EAAO,MAAE4K,EAAK,WAAEsU,EAAU,UAAE3tB,GAC1B6b,GAAa,CAAC,EACZ5Q,EAAQwD,GAAUmD,EAAAA,EAAAA,KAAgBjlC,EAAQA,EAAO8yB,cAAgBgP,QAAWzgC,EAElF,MAAO,CACLygC,UACA4K,QACAsE,oBAAqBpC,EAAWqC,kBAAoBrC,EAAWsC,yBAC/D5S,MAAOA,GAAS,YAAaA,EAAQA,OAAQj9B,EAC7C2/C,aACA3tB,YACAyrB,mBAAoB9+C,EAAO++C,UAAUD,mBACrCvgB,sBAAsB0B,EAAAA,EAAAA,KAA2BjgC,MAhBjCqN,EA1NpB,UAAwB,MACtBixB,EAAK,oBACL0S,EAAmB,MACnBtE,EAAK,WACLsU,EAAU,UACV3tB,EAAS,qBACTkL,IAEA,MAAM,kBACJ0iB,EAAiB,oBAAE3B,EAAmB,gBAAE4B,IACtCx2C,EAAAA,EAAAA,OAEGy2C,EAAiBC,EAAkBC,IAAsBzjD,EAAAA,EAAAA,IAAQ,IACjE0jD,EAAmBC,EAAoBC,IAAwB5jD,EAAAA,EAAAA,IAAQ,IACvEklC,EAAO2e,IAAY52C,EAAAA,EAAAA,IAAS,IAE7BY,GAAOC,EAAAA,EAAAA,KAEPrB,EAASZ,QAAQ60B,GACjBojB,EAAYj4C,QAAQ60B,GAAO3M,OAAU2M,EAAM3M,KAAOqf,GAAuBtQ,EAAAA,GAAAA,OACzE,WAAEmM,EAAa,EAAC,eAAEE,EAAiB,GAAMzO,GAAOoO,OAAS,CAAC,EAE1DiV,EAAyBrjB,GAAO8O,UAAYP,EAAa+U,EAAAA,IACzDC,EAA4B9U,EAAiB+U,EAAAA,IAC7CC,EAAmBlV,EAAamV,EAAAA,IAChCC,EAAYN,GAA0BE,GAA6BE,GAEzE94C,EAAAA,EAAAA,KAAU,KACHoB,IACHo3C,EAAS,IACTJ,IACAE,OAED,CAACl3C,IAEJ,MAAM63C,GAAer4B,EAAAA,GAAAA,IAAqB,KACxCq3B,EAAgB,CAAE7tB,WAAW,MAC5B,GAvCoB,KAuCE,IAEzBpqB,EAAAA,EAAAA,KAAU,KACRi5C,MACC,CAACf,EAAiBG,EAAmBxe,EAAOof,IAE/C,MAAMC,GAAc17C,EAAAA,EAAAA,KAAQ,IACnBimC,GAAO0V,KA6JlB,SAA2Bd,GACzB,MAAO,CAACe,EAAqBC,KAC3B,GAAIhB,EAAmB,CACrB,MAAMiB,EAAuB,SAAXF,EAAExiD,MAAmBwiD,EAAExU,SACnC2U,EAAuB,SAAXF,EAAEziD,MAAmByiD,EAAEzU,SACzC,GAAI0U,IAAcC,EAChB,OAAQ,EAEV,IAAKD,GAAaC,EAChB,OAAO,CAEX,CAEA,OAAOF,EAAE3wB,KAAO0wB,EAAE1wB,KAEtB,CA5KuB8wB,CAAkBnB,KACpC,CAACA,EAAmB5U,IAEjBgW,EAAoBP,GAAahiD,OAAmC,EAA1ByR,KAAK4a,IAAIqgB,EAAY,GAE/D8V,EAAkBl5C,QAAQ04C,GAAahiD,SAAWgiD,EAAYhiD,OAAS0sC,GAAc6U,EAErFkB,GAAiB33C,EAAAA,EAAAA,IAAgB,KAChCqzB,GAAO9/B,SAAqB6C,IAAf2/C,GAClBC,EAAkB,CAChB32C,OAAQg0B,EAAMh0B,OACdw3B,QAASxD,EAAM9/B,GACfsc,OAAQkmC,EACRM,kBAAmBA,QAAqBjgD,EACxC8/C,gBAAiBA,QAAmB9/C,EACpCyhC,cAIE,aAAE4b,EAAY,cAAEJ,GAAkBF,KAElCzkB,GAAc1uB,EAAAA,EAAAA,IAAgB,KAClCq0C,OAGIuD,GAAkEp8C,EAAAA,EAAAA,KAAQ,IACvE,EAAGsK,YAAW1G,OAAQy4C,MAC3BvkD,EAAAA,GAAAA,IAAC+N,EAAAA,EAAM,CACLy2C,OAAK,EACLlkD,KAAK,OACL0N,MAAM,cACN9N,WAAWoW,EAAAA,GAAAA,IAAgBiuC,GAAc,SAAU5mC,GAAO8mC,WAAY9mC,GAAO+mC,WAC7EC,MAAOJ,EACPr2C,QAASsE,EACTE,UAAWxF,EAAK,UAAU/M,SAAA,EAE1BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAMq1C,EAAoB,gBAAkB,SAAU7iD,UAAWyd,GAAOinC,YAC9ExkD,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,OAAOxN,UAAWyd,GAAOknC,eAGvC,CAAC9B,EAAmB71C,IAEvB,OACElN,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJzB,OAAQA,EACRE,QAASovB,EACTl7B,UAAU,uBACVsiC,iBAAkB7kB,GAAOmnC,UACzBriB,QAAM,EAAAtiC,SAAA,CAELujD,IACC1jD,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAO6qB,OAAOroC,SAAA,CAC3BijD,IACCpjD,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOonC,cAAc5kD,SAAA,EACnCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,WAAWoW,EAAAA,GAAAA,IAAgBssC,GAAmBjlC,GAAO9P,SAAU8P,GAAO+mC,WACtEpkD,KAAK,OACL0N,MAAM,oBACNw2C,OAAK,EACLt2C,QAAS40C,EAAmB3iD,SAE3B+M,EAAK,iBAER9M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,WAAWoW,EAAAA,GAAAA,GAAessC,GAAmBjlC,GAAO9P,SAAU8P,GAAO+mC,WACrEpkD,KAAK,OACL0N,MAAM,oBACNw2C,OAAK,EACLt2C,QAAS20C,EAAiB1iD,SAEzB+M,EAAK,iBAIXo2C,IACCtjD,EAAAA,GAAAA,IAACyT,GAAAA,EAAY,CACXvT,UAAWyd,GAAOkmC,KAClBnwC,QAAS4wC,EACT3wC,UAAU,QAAOxT,SAAA,EAEjBH,EAAAA,GAAAA,IAAC6T,GAAAA,EAAQ,CAACT,KAAK,gBAAgBlF,QAAS80C,EAAmB7iD,SAAA,CACxD+M,EAAK,mBACL61C,IACC3iD,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,QAAQxN,UAAWyd,GAAOqnC,YAGzChlD,EAAAA,GAAAA,IAAC6T,GAAAA,EAAQ,CAACT,KAAK,SAASlF,QAAS+0C,EAAqB9iD,SAAA,CACnD+M,EAAK,eACJ61C,IACA3iD,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,QAAQxN,UAAWyd,GAAOqnC,cAK5CxB,IACCpjD,EAAAA,GAAAA,GAAC6kD,GAAAA,EAAW,CAAC/kD,UAAWyd,GAAOunC,OAAQp4C,MAAOy3B,EAAO32B,SAAUs1C,QAIrEljD,EAAAA,GAAAA,IAAA,OACEE,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAOzK,SAAU6sC,GAAiBpiC,GAAOwnC,YAAa,iBAChFC,SAAUjF,EAAahgD,SAAA,CAEtBgjD,IAAcruB,IAAcyP,GAASr5B,SAAS04C,GAAahiD,UAC1DxB,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAOoZ,KAAMpZ,GAAO0nC,cAAcllD,UAC9Dg0B,EAAAA,GAAAA,GACCjnB,EAAK8yB,EAAuB,qBAAuB,oBACnD,CAAC,kBAAmB,aAIxBlL,GAAa5pB,QAAQq5B,EAAM3iC,UAAYgiD,GAAahiD,SACpDxB,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOoZ,KAAK52B,SACzB+M,EAAK,qCAGVlN,EAAAA,GAAAA,IAACslD,GAAAA,EAAc,CACbC,MAAO3B,EACP4B,WAAYnB,EAAelkD,SAAA,CAE1ByjD,GAAahwC,KAAK6xC,IACjB,MAAMC,EAAgC,YAAdD,EAAKnkD,KAAqBmkD,EAAK7sC,UACrC,WAAd6sC,EAAKnkD,KAAoBmkD,EAAKliB,QAAU,OAC5C,OACEnjC,EAAAA,GAAAA,GAACqgD,GAAS,CAAwDH,UAAWmF,GAA7D,GAAGA,EAAK15C,UAAU05C,EAAKryB,QAAQsyB,QAGlD5wB,GAAa6wB,MAAM9pC,KAAK,CAAEja,OAAQuiD,IAAoBvwC,KAAI,CAACgyC,EAAGC,KAC7DzlD,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAGPxiC,UAAU,+DACVogB,UAAQ,EAAAngB,UAERC,EAAAA,GAAAA,GAAC0lD,GAAAA,EAAmB,KAJf,eAAeD,OAOvBzB,IACChkD,EAAAA,GAAAA,GAAA,OAA6BF,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAOoZ,KAAMpZ,GAAOooC,YAAY5lD,SACpF+M,EAAK,oCADC,4BAMf9M,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAOusB,OAAQ,kBAAkB/pC,UAC9DC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,WAAWoW,EAAAA,GAAAA,GAAe,wBAAyBqH,GAAOrF,OAC1DrK,QAAM,EACNC,QAASktB,EAAYj7B,SAEpB+M,EAAK,eAKhB,KCpEA,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAYrN,IAC9B,MAAM,4BACJ2yB,EAA6BkN,aAAa,QACxCiC,EAAO,OAAEx3B,EAAM,mBAAE6kC,EAAkB,OAAEvtC,KAErC6L,EAAAA,EAAAA,KAAezN,GACbs+B,EAAQh0B,GAAUw3B,GAAUmD,EAAAA,EAAAA,KAAgBjlC,EAAQsK,EAAQw3B,QAAWzgC,EACvEqkB,GAAgBmN,EAAAA,EAAAA,KAA+B7yB,EAAQ,yBAE7D,MAAO,CACLqK,QAAQ0xC,EAAAA,EAAAA,KAAwB/7C,GAChC2yB,8BACAroB,OAAQA,EACRw3B,UACAxD,QACA18B,SACA8jB,gBACAypB,wBAjBgB9hC,EAnIpB,UAAqB,OACnBhD,EAAM,OACNC,EAAM,QACNw3B,EAAO,MACPxD,EAAK,OACL18B,EAAM,4BACN+wB,EAA2B,cAC3BjN,EAAa,mBACbypB,IAEA,MAAM,iBAAE8P,EAAgB,wBAAEsF,EAAuB,YAAEC,IAAgB95C,EAAAA,EAAAA,MAE7De,GAAOC,EAAAA,EAAAA,MACN+4C,EAAeC,IAAoB75C,EAAAA,EAAAA,SAAmCxJ,IACtEkO,EAAmBC,EAAiBC,IAAoB7R,EAAAA,EAAAA,IAAQ,IAEjE,cAAE+J,EAAa,UAAEo3B,GAAcV,GAAcC,GAC7Coe,EAAapf,KACbqnB,GAAa3vB,EAAAA,EAAAA,GAAsB3qB,GACnCksB,GAAoBvB,EAAAA,EAAAA,GAAsBrtB,GAC1C00C,GAAarnB,EAAAA,EAAAA,GAAsB1qB,GACnCgsB,GAAatB,EAAAA,EAAAA,GAAsBpzB,GACnCszB,EAAmBzrB,QAAQic,IAAkBiN,IAEnD1pB,EAAAA,EAAAA,KAAU,KACHoB,IACHq6C,OAAiBrjD,GACjBoO,OAED,CAACpF,KAEJpB,EAAAA,EAAAA,KAAU,KACR,IAAKoB,EACH,QAGFqrB,EAAAA,EAAAA,MACA,MAAMC,GAAuBC,EAAAA,EAAAA,MAE7B,MAAO,MACLC,EAAAA,EAAAA,MACAF,OAED,CAACtrB,IAEJ,MAAMsvB,GAAcr7B,EAAAA,EAAAA,KAAY,KAC9B2gD,MACC,CAACA,IAEE2F,GAAwB35C,EAAAA,EAAAA,IAAiB45C,IAC7CH,EAAiBG,GACjBr1C,OAGIs1C,GAAyB75C,EAAAA,EAAAA,IAAgB,KAC7CwE,IACAi1C,OAAiBrjD,MAGb0jD,GAAoB95C,EAAAA,EAAAA,IAAgB,KACnC62B,GACL0iB,EAAY,CAAE1iB,UAASx3B,cA8BzB,OA3BArB,EAAAA,EAAAA,KAAU,IAAOoB,GAAS8vB,EAAAA,EAAAA,IAAsB,KAC9CR,YACGt4B,GAAY,CAACs4B,EAAatvB,KAE/BpB,EAAAA,EAAAA,KAAU,KACJisB,IAAqByvB,GAAct6C,GAAUC,GAAUy0B,QAAwB19B,IAAXO,KACtE60B,EAAAA,EAAAA,IAnFqB,IAmFoBC,EAAAA,KzBrGxC,SACL4F,EACA16B,EACAojD,EACAr9C,EACAqC,GAEA,MAAQ3F,QAASsyB,GAAc3zB,GAASpB,EAAQ06B,GAChD,IAAK3F,EACH,OAEF,MAAQxuB,MAAOmhB,EAAa9gB,OAAQ6gB,GAAiBuN,EAAAA,EAAWhuB,MAChE,IAAMT,MAAO6uB,EAASxuB,OAAQyuB,GAAajtB,EAE3C,MAAMjM,EAAWurB,GAhBE,IAkBnB,GAAIvrB,EAAU,CACZi5B,EAAU1N,EAAc,EAAIwS,GAC5B7E,EAAW5N,EAAewS,GAAgB,EAAIC,GAE9C,MAAMmpB,EAAiBC,iBAAiB3kD,SAAS4kD,iBAAiBC,iBAAiB,sBAC/EH,IACFhuB,GAAYouB,WAAWJ,GAE3B,CAEA,MAAM9tB,EAASp5B,EAAW+9B,IAAiBxS,EAAc0N,GAAW,EAC9DI,EAAQr5B,EAAW+9B,IAAiBzS,GAAgB4N,EAAW4E,KAAkB,GAGrF9Z,IAAKwV,EAAS/c,KAAMgd,EAAUrvB,MAAOsvB,EAAWjvB,OAAQkvB,GACtDf,EAAU9b,wBAERod,EAAkBT,EAAWC,EAAY,GAAMN,EAASH,EAAU,GAClEkB,EAAkBX,EAAUG,EAAa,GAAMN,EAAQH,EAAW,GAClEkB,EAAaV,EAAYT,EACzBoB,EAAaV,EAAaT,GAEhCngB,EAAAA,EAAAA,KAAgB,KACd,MAAMjV,EAAQH,GAAYiG,GAAiBq9C,GAAQr9C,IACnD0wB,EAAAA,EAAAA,IAAYx2B,EAAO,CACjBkgB,IAAK,GAAGqV,MACR5c,KAAM,GAAG2c,MACThvB,MAAO,GAAG6uB,MACVxuB,OAAQ,GAAGyuB,MACX5M,UAAW,eAAe4N,QAAqBC,iBAA8BC,MAAeC,OAG9F,MAAMl0B,EAAY3D,SAASo4B,eAAe,eAC1Cz0B,EAAUzB,YAAYZ,GACtBtB,SAASwd,KAAKhc,UAAUC,IAAI,oBAE5B8U,EAAAA,EAAAA,KAAgB,MACduhB,EAAAA,EAAAA,IAAYx2B,EAAO,CACjBwoB,UAAW,KAGb9gB,YAAW,MACTuN,EAAAA,EAAAA,KAAgB,KACV5S,EAAUq0B,SAAS12B,IACrBqC,EAAUs0B,YAAY32B,GAExBtB,SAASwd,KAAKhc,UAAUic,OAAO,wBAnEd,IAqEG0Y,EAAAA,UAG9B,CyBmCM+B,CAAenuB,EAAQ1I,EAAQm9B,EAAWp3B,EAAe+0C,EAAW1e,cAElE9I,GAAoByvB,IAAet6C,GAAUgyC,GAAc9lB,QAAoCl1B,IAAfi1B,KAClFG,EAAAA,EAAAA,IAvFqB,IAuFoBC,EAAAA,KzBpCxC,SACL4F,EACA16B,EACA+F,GAEA,MAAQtD,QAASq0B,GAAY11B,GAASpB,EAAQ06B,GAExC3F,EAAYp2B,SAASo4B,eAAe,eAAgB71B,cACxD,IAAIoZ,OAAuBA,QAAkBA,OAAuBA,MAEtE,IAAKya,IAAc+B,EACjB,OAEF,MACE3W,IAAKwV,EAAS/c,KAAMgd,EAAUrvB,MAAOsvB,EAAWjvB,OAAQkvB,GACtDf,EAAU9b,yBAEZkH,IAAKqV,EAAO5c,KAAM2c,EAAQhvB,MAAO6uB,EAASxuB,OAAQyuB,GAChDyB,EAAQ7d,wBAENyqC,EAAgBnuB,EAASH,EAAU,GAAMQ,EAAWC,EAAY,GAChE8tB,EAAgBnuB,EAAQH,EAAW,GAAMM,EAAUG,EAAa,GAChE8tB,EAAWxuB,EAAUS,EACrBguB,EAAWxuB,EAAWS,GAE5B5gB,EAAAA,EAAAA,KAAgB,KACd,MAAMjV,EAAQH,GAAYiG,IAC1B0wB,EAAAA,EAAAA,IAAYx2B,EAAO,CACjBkgB,IAAK,GAAGwV,MACR/c,KAAM,GAAGgd,MACTrvB,MAAO,GAAGsvB,MACVjvB,OAAQ,GAAGkvB,QAGb,MAAMguB,EAAShkD,GAAYg3B,EAAQp2B,SAAKjB,GAAW,GAC7CskD,EAAapuB,EAAUG,EAAa,EAAKD,EAAY,GAC3DY,EAAAA,EAAAA,IAAYqtB,EAAQ,CAClB3jC,IAAK,GAAG4jC,MACRnrC,KAAM,GAAGgd,MACTrvB,MAAO,GAAGsvB,MACVjvB,OAAQ,GAAGivB,QAGb,MAAMvzB,EAAY3D,SAASo4B,eAAe,eAC1Cz0B,EAAUzB,YAAYZ,GACtBtB,SAASwd,KAAKtb,YAAYijD,GAC1BnlD,SAASwd,KAAKhc,UAAUC,IAAI,oBAE5B8U,EAAAA,EAAAA,KAAgB,MACduhB,EAAAA,EAAAA,IAAYx2B,EAAO,CACjBwoB,UAAW,eAAei7B,QAAmBC,iBAA4BC,MAAaC,QAGxFptB,EAAAA,EAAAA,IAAYqtB,EAAQ,CAClBr7B,UAAW,eAAei7B,QAAmBC,iBAA4BC,KACzE/rB,QAAS,MAGXlwB,YAAW,MACTuN,EAAAA,EAAAA,KAAgB,KACV5S,EAAUq0B,SAAS12B,IACrBqC,EAAUs0B,YAAY32B,GAGpBtB,SAASwd,KAAKwa,SAASmtB,IACzBnlD,SAASwd,KAAKya,YAAYktB,GAG5BnlD,SAASwd,KAAKhc,UAAUic,OAAO,wBA9Id,IAgJG0Y,EAAAA,UAG9B,CyBpCMgD,CAAe2iB,EAAY/lB,EAAYC,MAExC,CACDrB,EACAvtB,EACA4uB,EACAlsB,EACAs6C,EACAjI,EAAW1e,YACXe,EACAz0B,EACA+xC,EACAz6C,EACA00B,KAIA/3B,EAAAA,GAAAA,IAAC0d,GAAAA,EAAc,CACbzd,GAAG,cACHC,U1BjJiB,W0BkJjB4L,OAAQA,EACRmxB,0BAAwB,EACxBC,kBAAmB9I,EAA4Bj0B,SAAA,EAE/CC,EAAAA,GAAAA,GAAA,OAAKF,U1BtJwD,W0BsJ5BgO,QAASktB,KAC1Ch7B,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,U1BxJ+I,W0ByJ/IuS,OAAK,EACLnS,KAAK,UACL0N,MAAM,oBACN0E,UAAWxF,EAAK,SAChBgB,QAASktB,EAAYj7B,UAErBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAGbtN,EAAAA,GAAAA,GAACinD,GAAW,CACVv7C,OAAQA,EACRkF,kBAAmBA,EACnBJ,SAAU41C,EACVx6C,QAASovB,EACT8X,SAAUmT,KAGZjmD,EAAAA,GAAAA,GAACknD,GAAuB,CACtBx7C,OAAQkF,EACR+uB,MAAOmmB,EACPl6C,QAASu6C,KAEXnmD,EAAAA,GAAAA,GAACmnD,GAAc,KACfnnD,EAAAA,GAAAA,GAACuhC,GAAgB,KACjBvhC,EAAAA,GAAAA,GAAConD,GAAa,CAAC17C,OAAQ8kC,EAAoB5kC,QAASg6C,MAG1D,K,gHC5HA,MAEMyB,GAAkB,KAAO1xC,EAAAA,EACzB2xC,GAAkB,wBAkSxB,IAAe3oD,EAAAA,EAAAA,KA/RwB4oD,EACrC77C,SACAyoB,gBACAqzB,gBACA1C,SACA2C,oBACA3nD,YACA4nD,WACAC,iBACAC,qBACAh8C,UACAC,sBACAg8C,yBAEA,MAAM,WAAEC,IAAe/7C,EAAAA,EAAAA,MAEjBynC,GAAUzmC,EAAAA,EAAAA,KACVsc,GAAejgB,EAAAA,EAAAA,MACf2+C,GAAoB3+C,EAAAA,EAAAA,MACpB4+C,GAAY5+C,EAAAA,EAAAA,MACZ6+C,GAAiB7+C,EAAAA,EAAAA,OAChB8+C,EAAaC,IAAWC,EAAAA,GAAAA,GAAkBV,EAAUF,EAAe18C,QAAQg6C,KAC3EuD,EAASC,IAAcp8C,EAAAA,EAAAA,SAA6BxJ,IACpD6lD,EAAaC,IAAkBt8C,EAAAA,EAAAA,IAAiB,IACjD8wB,EAAYqrB,EA7BK,EADD,EA+BhBI,EAAiBjB,EAAcprB,QAAQ8rB,EAAa,IAEpDQ,GAAcp8C,EAAAA,EAAAA,IAAgB,KAClCq7C,EAAe,QAEjBgB,EAAAA,GAAAA,GAAoBX,EAAWt8C,GApCT,IAoCmBsxB,EAA+B0rB,IACxEC,EAAAA,GAAAA,GAAoBV,EAAgBv8C,GApCb,IAoCuBsxB,GAE9C,MAAM4rB,GAAmBt8C,EAAAA,EAAAA,IAAiBjL,IACxC,GAAKgnD,EAIL,OAAOQ,EAAAA,EAAAA,KAAaxnD,EAAQgnD,MAGxBS,GAAkBC,EAAAA,GAAAA,GAAYH,IAE7BI,EAAUC,IAAUnhD,EAAAA,EAAAA,KAAQ,KACjC,MAAMzG,GAASwtC,EAAAA,EAAAA,MACTqa,EAAY7nD,EAAO8nD,MAAMziB,KACzB0iB,EAAmB/nD,EAAO8nD,MAAME,aAEhCp6C,EAAOi6C,EAAUb,GAEvB,IAAKp5C,IAAS65C,EACZ,MAAO,MAACpmD,OAAWA,GAGrB,MAAM4mD,EAAcf,EAAYgB,cAE1B7wC,EAASowC,EACX/J,OAAOyK,OAAOV,GAAiBtK,QAAO,CAACiL,EAAKC,OAE1CC,EAAAA,EAAAA,IAAiB16C,EAAMy6C,OAAOhnD,EAAW0mD,EAAiBf,KACrDiB,IAAeI,EAAMx8C,MAAMq8C,cAAc15B,SAASy5B,KAEvDG,EAAIC,EAAM7pD,IAAM6pD,GAGXD,IACN,CAAC,GACFX,EAEJ,MAAO,CAAC/J,OAAO6K,KAAKlxC,GAAQlF,IAAI6R,QAAS3M,KACxC,CAAC2vC,EAASE,EAAaO,IAEpBe,GAAwBv9C,EAAAA,EAAAA,IAAgB,KAC5Cg8C,OAAW5lD,GACX8lD,EAAe,OAGXsB,GAAqBx9C,EAAAA,EAAAA,IAAiBM,IAC1C+6C,EAAe/6C,EAAE6X,cAAc/X,UAG3Bq9C,GAA0Bz9C,EAAAA,EAAAA,IAAiBM,IAC/C47C,EAAe57C,EAAE6X,cAAc/X,UAG3B6Y,GAAgBykC,EAAAA,GAAAA,GAA0B3gC,EAAc3d,GAASpH,IACrE,GAAI4jD,GAAeA,EAAY1mD,OAAS,EAAG,CACzC,MAAM0nD,GAAYra,EAAAA,EAAAA,MAAYsa,MAAMziB,KAE9Bn6B,EAAS27C,GAAuB,IAAX5jD,EAAe,EAAIA,GACxC2K,EAAOi6C,EAAU38C,GACnB0C,GAAMg7C,SACHnB,GAAiBhB,EAAW,CAAEv7C,WACnC+7C,EAAW/7C,IAEXq7C,EAAmBr7C,EAEvB,IACC,IAAI+6C,MAAmB,GAEpB4C,GAAqBF,EAAAA,GAAAA,GAA0BjC,EAAmBr8C,GAASpH,IAC3E0kD,GAAUxnD,QACZomD,EAAmBS,EAAUW,GAAoB,IAAX1kD,EAAe,EAAIA,MAE1D,IAAIgjD,MAAmB,GAEpBhjC,GAAchY,EAAAA,EAAAA,IAAiBC,IACnC,MAAM28C,GAAYra,EAAAA,EAAAA,MAAYsa,MAAMziB,KAC9Bz3B,EAAOi6C,IAAY38C,GACrB0C,GAAMg7C,SACHnB,GAAiBhB,EAAW,CAAEv7C,WACnC+7C,EAAW/7C,GACXm8C,KAEAd,EAAmBr7C,MAIjB49C,GAAiBxqD,EAAAA,EAAAA,KAAY,CAACE,EAAYyE,KAC9C,MAAMjD,GAASwtC,EAAAA,EAAAA,MACf,IAAI/a,GAAOQ,EAAAA,EAAAA,KAAWjzB,EAAQxB,GAC9B,IAAKi0B,EACH,OAGF,MAAMs2B,GAAmBC,EAAAA,EAAAA,KAAuBhpD,EAAQxB,GACpDuqD,IACFt2B,EAAOs2B,GAGT,MAAME,EAASx2B,KAASy2B,EAAAA,GAAAA,IAAcz2B,GAAQA,EAAKw2B,YAAS5nD,GAgBrDiwB,EAAU63B,GAdjB,WACE,IAAK12B,EAAM,OACX,GAAIA,EAAKj0B,KAAOs0B,EAAe,MAAO,CAACqf,EAAQ,sBAC/C,IAAI+W,EAAAA,GAAAA,IAAcz2B,GAChB,MAAO,EAAC22B,EAAAA,EAAAA,IAAejX,EAAS1f,IAGlC,MAAM42B,GAAaC,EAAAA,EAAAA,KAAiBtpD,EAAQyyB,EAAKj0B,IACjD,MAAO,EACL+qD,EAAAA,EAAAA,IAAcpX,EAAS1f,EAAM42B,IAC7Bx0C,EAAAA,GAAAA,IAAe20C,EAAAA,EAAAA,IAAa/2B,EAAM42B,GAAY,IAAS,UAE3D,CAEsCI,IAAiB,GAEvD,OACE9qD,EAAAA,GAAAA,GAAC+qD,GAAAA,EAAU,CAETjrD,UAAWwnD,GACXp6C,OACElN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,gBAAeC,UAC5BC,EAAAA,GAAAA,GAACgrD,GAAAA,EAAa,CACZlrD,UAAU,aACVg0B,KAAMA,EACNm3B,YAAangD,QAAQs/C,GACrBc,gBAAiBZ,MAIvBa,eACEnrD,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CACLC,KAAMA,EACNs3B,gBAAiBtgD,QAAQs/C,GACzBc,gBAAiBZ,EACjBpqD,KAAK,WAGTyyB,SAAUA,EACV63B,kBAAmBA,EACnB9qC,QAAM,EACN7Z,MAAO,SAAS4iD,EAAiBnkD,GAAS+mD,EAAAA,SAE1Cv9C,QAASA,IAAMwW,EAAYzkB,IAzBtBA,KA4BR,CAACs0B,EAAeqf,EAASiV,IA4F5B,OACEzoD,EAAAA,GAAAA,GAACmN,EAAAA,EAAK,CACJzB,OAAQA,EACR5L,WAAWoW,EAAAA,GAAAA,GAAe,mBAAoBpW,GAC9C8L,QAASA,EACTC,oBAAqBA,EACrBg8C,mBAAoBA,EAAmB9nD,UAEvCC,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CAACC,UAAWA,EAAW1vB,KAAK,YAAYo7B,eAAe,yBAAwB3oC,SACvFA,IA5RgB,IA6RRi9B,GAlGXp9B,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,eAAesW,IAAKo9B,EAAQ5hB,MAAQ,WAAQlvB,EAAU3C,SAAA,EACnEC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC0E,OAAK,EAACzE,MAAM,cAAc1N,KAAK,UAAUoS,UAAWkhC,EAAQ,QAAS1lC,QAAS+7C,EAAsB9pD,UAC1GC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,kBAEbtN,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRsG,IAAKi0C,EACLv7C,MAAO67C,EACP/6C,SAAUu8C,EACVuB,UAAWpB,EACXqB,YAAa9D,QAGjB7nD,EAAAA,GAAAA,IAACslD,GAAAA,EAAc,CACblxC,IAAK+zC,EACLjoD,UAAU,4BACVqlD,MAAO6D,EACPwC,yBAAuB,EACvBC,UA1MmB,IA0MPzC,GAAUxnD,QAAU,GAChC8pD,UAAWpB,EAAmBnqD,SAAA,EAE5BipD,IAAYhpD,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,IACrB1C,GAAUx1C,KAAI,CAACm4C,EAASlG,KACvBzlD,EAAAA,GAAAA,GAAC+qD,GAAAA,EAAU,CAETjrD,UAAWwnD,GAEXx5C,QAASA,IAAM85C,EAAmBS,EAAUsD,GAC5C9lD,MAAO,QApNQ,IAoNC4iD,EAAiBhD,QACjC0F,eACEnrD,EAAAA,GAAAA,GAAC4rD,GAAAA,EAAS,CACR1rD,KAAMmnD,GACNqC,MAAOT,EAAO0C,GACd7rD,UAAU,aACV+rD,gBAAgB,sBAGpB3+C,OAAO6mB,EAAAA,GAAAA,GAAWk1B,EAAO0C,GAASz+C,QAb7B,GAAGm7C,KAAWsD,cAuB3B/rD,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,eAAesW,IAAKo9B,EAAQ5hB,MAAQ,WAAQlvB,EAAU3C,SAAA,EACnEC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLzE,MAAM,cACN1N,KAAK,UACLoS,UAAWkhC,EAAQ,SACnB1lC,QAASlC,EAAQ7L,UAEjBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAEbtN,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRsG,IAAKg0C,EACLt7C,MAAOo4C,EACPt3C,SAAUs8C,EACVwB,UAAW/lC,EACXgmC,YAAa9D,OAGhBS,GAAa1mD,QACZxB,EAAAA,GAAAA,GAACklD,GAAAA,EAAc,CACblxC,IAAKqV,EACLvpB,UAAU,4BACVqlD,MAAO+C,EACP4D,aAAc,IAAIxE,KAClBlC,WAAY+C,EACZqD,yBAAuB,EACvBC,UAAWjE,EAAchmD,OAAS6pD,EAAAA,IAClCC,UAAW/lC,EAAcxlB,SAExBmoD,EAAY10C,IAAI22C,KAEjBjC,IAAgBA,EAAY1mD,QAC9BxB,EAAAA,GAAAA,GAAA,KAAGF,UAAU,aAAYC,SAAEyzC,EAAQ,iCAEnCxzC,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,cCvLlB,IAAe/sD,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MACE8nD,OAAO,QACL4C,EAAO,iBACPC,GACD,cACD73B,GACE9yB,EAEJ,MAAO,CACL4qD,cAAeF,EAAQ7O,OACvBgP,gBAAiBH,EAAQI,SACzBC,UAAWJ,EAAiB9O,OAC5BnZ,WAAY1iC,EAAOmlC,aAAaT,QAChC5R,mBAfczlB,EAlG+B29C,EACjD3gD,SACAyoB,gBACA83B,gBACAC,kBACAE,YACAroB,aACAtG,SAAS6uB,EAAAA,IACTxsD,YACA2nD,oBACAC,WACA6E,oBACA3gD,UACAC,sBACAg8C,qBACA2E,mBAEA,MAAO1H,EAAQ2H,IAAavgD,EAAAA,EAAAA,IAAS,IAC/Bg4B,GAAMp8B,EAAAA,EAAAA,KAAQ,KAClB,IAAK4D,EAAQ,OAEb,IAAIghD,EAAcN,GAAa,GAC3Bj4B,IACFu4B,GAAc1oB,EAAAA,GAAAA,IAAO,CAAC7P,KAAkBu4B,KAI1C,MAAMrrD,GAASwtC,EAAAA,EAAAA,MAETsO,EAAU,IACV8O,GAAiB,MAChBnH,GAAUoH,GAAoB,IACnCzuB,QAAQ59B,IACR,MAAMoP,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQxB,GAC1BqwC,GAAOC,EAAAA,EAAAA,KAAW9uC,EAAQxB,GAC1B8sD,EAAiB19C,IAAQ29C,EAAAA,EAAAA,IAAiB39C,EAAM,gBAChDskB,EAAYtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,GACxC,GAAIu9C,GAAgBj5B,IAAco5B,EAAgB,OAAO,EACzD,GAAIzc,KAAS2c,EAAAA,EAAAA,IAAc3c,GAAO,OAAO,EAEzC,IAAKjhC,EAAM,OAAO,EAElB,GAAIA,EAAKg8C,cAAe6B,EAAAA,EAAAA,KAAuBzrD,EAAQxB,GACrD,OAAO,EAGT,MAAMktD,GAAeC,EAAAA,EAAAA,KAAmB3rD,EAAQxB,GAEhD,OAAQktD,IAAgBpD,EAAAA,EAAAA,IAAiB16C,OAAMvM,OAAWA,EAAWqqD,MAGjEE,GAASC,EAAAA,GAAAA,IACbjpB,EAAAA,GAAAA,IAAmB,CACjBC,KAAKF,EAAAA,GAAAA,IAAO,IACN7P,EAAgB,CAACA,GAAiB,MACnCgpB,KACCpZ,GAAc,KAEpBI,MAAO2gB,SAETpiD,EACAgqD,EACAv4B,GAGF,OAAOg5B,EAAAA,EAAAA,KAAoB9rD,EAAQ4rD,EAAQxvB,KAC1C,CACD/xB,EACA0gD,EACAj4B,EACA83B,EACAnH,EACAoH,EACAnoB,EACAtG,EACA+uB,IAGIY,GAAephB,EAAAA,GAAAA,GAAiB9H,GAAK,GAE3C,OACElkC,EAAAA,GAAAA,GAACunD,GAAgB,CACf77C,OAAQA,EACR5L,UAAWA,EACX0nD,cAAe4F,EACfj5B,cAAeA,EACfszB,kBAAmBA,EACnB3C,OAAQA,EACR6C,eAAgB8E,EAChB/E,SAAUA,EACVE,mBAAoB2E,EACpB3gD,QAASA,EACTC,oBAAqBA,EACrBg8C,mBAAoBA,QCd1B,IAAelpD,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAsBrN,IACxC,MAAM,WAAEqR,EAAU,QAAEywB,IAAYr0B,EAAAA,EAAAA,KAAezN,GAAQqvC,gBACjD8b,EAAgB95C,GAAcA,EAAWlR,OAAS,EACxD,MAAO,CACL2yB,cAAe9yB,EAAO8yB,cACtBk5B,gBAAiB36C,GAAYlR,QAAU,GAAK,EAC5C8rD,QAASxiD,QAAQq4B,GACjBqpB,kBAPgB99C,EA5FsC6+C,EACxD7hD,SACAyoB,gBACAk5B,iBACAC,UACAd,mBAEA,MAAM,gCACJgB,EAA+B,sBAC/BC,EAAqB,gBACrBC,EAAe,uBACfC,EAAsB,aACtBC,EAAY,iBACZlsB,IACE31B,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,KAEP8gD,GAAmBx3B,EAAAA,EAAAA,GAAsBi3B,GAAS,IACjDpnB,EAAS4nB,EAAaC,IAAiB9uD,EAAAA,EAAAA,MAC9CqL,EAAAA,EAAAA,KAAU,KACJoB,GACFoiD,MAED,CAACpiD,EAAQoiD,IAEZ,MAAME,GAAwBruD,EAAAA,EAAAA,KAAY,CAACsuD,EAAqB5+C,KAC9D,MAAMi7C,EAAS2D,IAAgB95B,EAC/B,GAAIm5B,EAAJ,CACEM,EAAa,CAAEM,SAAUD,IACzB,MAAM5sD,GAASwtC,EAAAA,EAAAA,MACf,IAAIpgC,EAAAA,EAAAA,IAASw/C,GACXvsB,EAAiB,CACf9gC,QAAS0pD,EACLx9C,EAAK,sDACLA,EACA,iBACAqhD,EAAAA,EAAAA,KAAuBhe,EAAAA,EAAAA,KAAW9uC,EAAQ4sD,WAG3C,CACL,MAAMh/C,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQ4sD,GAChC,IAAKh/C,EAAM,OAEXyyB,EAAiB,CACf9gC,QAASkM,EAAK,iBAAiBshD,EAAAA,EAAAA,IAAathD,EAAMmC,KAEtD,CAEF,MAEA,GAAIq7C,EAAQ,CACV,MAAM1pD,EAAUkM,EACdugD,EACI,iDACA,iDAGNM,IACAjsB,EAAiB,CAAE9gC,WACrB,KAAO,CACL,MAAM2L,EAAS0hD,EACTtC,EAAUt8C,EAAWgW,OAAOhW,QAAY3M,EAC1C8pD,EACFiB,EAAsB,CAAElhD,SAAQo/C,YAEhC6B,EAAgC,CAAEjhD,SAAQo/C,WAE9C,IACC,CAACx3B,EAAek5B,EAAgBC,EAASxgD,EAAM0/C,IAE5CxxB,GAAcr7B,EAAAA,EAAAA,KAAY,KAC9B+tD,MACC,CAACA,IAEJ,GAAKhiD,GAAWw6B,EAIhB,OACElmC,EAAAA,GAAAA,GAACqsD,GAAe,CACd3gD,OAAQA,EACR5L,UAAW+tD,EAAmB,4BAAyBnrD,EACvD+kD,kBAAmB36C,EAAK0/C,EAAe,YAAc,iBACrDD,kBAAmByB,EACnBpiD,QAASovB,EACTnvB,oBAAqBkiD,EACrBvB,aAAcA,QCvDpB,IAAe7tD,EAAAA,EAAAA,KA/C4B0vD,EACzCC,qBAEA,MAAM5iD,EAASZ,QAAQwjD,IAAmBA,EAAe/hD,SACnD,kBACJgiD,EAAiB,uBACjBC,IACEziD,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,MAENm5B,EAAS4nB,EAAaC,IAAiB9uD,EAAAA,EAAAA,MAC9CqL,EAAAA,EAAAA,KAAU,KACJoB,GACFoiD,MAED,CAACpiD,EAAQoiD,IAEZ,MAAME,GAAwBruD,EAAAA,EAAAA,KAAY,CAACsuD,EAAqB5+C,KAC9Dk/C,EAAkB,CAChBhiD,OAAQ0hD,EACR5+C,WACAwF,KAAMy5C,EAAgBz5C,KACtB45C,MAAOH,EAAgBG,UAExB,CAACF,EAAmBD,IAEjBtzB,GAAcr7B,EAAAA,EAAAA,KAAY,KAC9B6uD,MACC,CAACA,IAEJ,GAAK9iD,GAAWw6B,EAIhB,OACElmC,EAAAA,GAAAA,GAACqsD,GAAe,CACd3gD,OAAQA,EACR+7C,kBAAmB36C,EAAK,aACxB2wB,OAAQ6wB,GAAgB7wB,OACxB8uB,kBAAmByB,EACnBpiD,QAASovB,EACTnvB,oBAAqBkiD,OCR3B,IAAepvD,EAAAA,EAAAA,KArCgC+vD,EAC7CC,+BAEA,MAAM,sBAAEC,EAAqB,cAAEC,IAAkB9iD,EAAAA,EAAAA,MAC3Ce,GAAOC,EAAAA,EAAAA,KAEPrB,EAASZ,QAAQ6jD,IAChBzoB,EAAS4nB,EAAaC,IAAiB9uD,EAAAA,EAAAA,MAC9CqL,EAAAA,EAAAA,KAAU,KACJoB,GACFoiD,MAED,CAACpiD,EAAQoiD,IAEZ,MAAM,IAAEgB,EAAG,OAAErxB,EAAM,WAAEsxB,GAAeJ,GAA4B,CAAC,EAE3DK,GAAsBrvD,EAAAA,EAAAA,KAAasuD,IACvCY,EAAc,CAAEC,IAAKA,EAAMviD,OAAQ0hD,EAAac,eAChDH,MACC,CAACE,EAAKD,EAAeD,EAAuBG,IAE/C,GAAKrjD,GAAWw6B,EAIhB,OACElmC,EAAAA,GAAAA,GAACqsD,GAAe,CACd3gD,OAAQA,EACR+7C,kBAAmB36C,EAAK,UACxB2wB,OAAQA,EACR8uB,kBAAmByC,EACnBpjD,QAASgjD,EACT/iD,oBAAqBkiD,O,gBC8D3B,SAASkB,GAAeC,GACtB,OAAIA,EAAMC,WACD,mBAGJD,EAAME,YAIJ,uBAHE,UAIX,CAEA,UAAezwD,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACQ,CACLguD,SAASvgD,EAAAA,EAAAA,KAAezN,GAAQguD,QAChClgD,oBAAoBC,EAAAA,EAAAA,KAAyB/N,MAJ/BqN,EAjGY4gD,EAAGD,UAASlgD,yBAC1C,MAAM,cACJogD,EAAa,YACbC,IACEzjD,EAAAA,EAAAA,OACG0jD,EAAa3oB,EAAWC,IAAc9nC,EAAAA,EAAAA,KAEvC6N,GAAOC,EAAAA,EAAAA,KAmES2iD,MAvDQC,EAqCTT,EAzCrB,IANA5kD,EAAAA,EAAAA,KAAU,KACJ+kD,EAAQ7tD,OAAS,GACnBslC,MAED,CAACuoB,EAASvoB,IAERuoB,EAAQ7tD,OAmEb,OAAOsJ,QAAQukD,EAAQ7tD,UAPjB,gBADgBkuD,EAQyBL,EAAQA,EAAQ7tD,OAAS,KA/D1CmuD,EAyDED,GA3C5B9vD,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJzB,OAAQ+jD,EACR7jD,QAASm7B,EACTjnC,UAAU,UACVoN,MAAOJ,EAAK,4BACZjB,oBAAqB0jD,EAAcxvD,SAAA,CAElC+M,EAAK,oCACNlN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,sBAAqBC,SAAA,EAClCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,wBACV+N,QAAM,EAENC,QA1Bc8hD,KACfzgD,IAILqgD,EAAY,CACVK,QAASF,EACTG,YAAa3gD,IAEf43B,MAiB6BhnC,SAEtB+M,EAAK,SAER9M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC7N,UAAU,wBAAwB+N,QAAM,EAACC,QAASi5B,EAAWhnC,SAAE+M,EAAK,oBAM/DoiD,EAuBAQ,GArBjB9vD,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJzB,OAAQ+jD,EACR7jD,QAASm7B,EACTl7B,oBAAqB0jD,EACrBzvD,UAAU,QACVoN,MAAO+hD,GAAeC,GAAOnvD,SAAA,CAE5BmvD,EAAME,aAAcW,EAAAA,GAAAA,IAAqBb,IACtCn7B,EAAAA,GAAAA,GAAWm7B,EAAMtuD,QAAS,CAAC,kBAAmB,QAAS,QAC3DZ,EAAAA,GAAAA,GAAA,OAAKF,UAAU,sBAAqBC,UAClCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACE,QAAM,EAACC,QAASi5B,EAAWhnC,SAAE+M,EAAK,mB,gBC7EpD,MAcA,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IAAuB2uD,EAAAA,GAAAA,KAAKlhD,EAAAA,EAAAA,KAAezN,GAAS,CAAC,mBADpCqN,EAdkBuhD,EAAGC,oBACvC,GAAKA,EAAc1uD,OAInB,OACExB,EAAAA,GAAAA,GAAA,OAAKH,GAAG,gBAAeE,SACpBmwD,EAAc18C,KAAK28C,IAClBnwD,EAAAA,GAAAA,GAACowD,GAAAA,EAAY,CAA4BD,aAAcA,GAApCA,EAAaE,iB,gBCPxC,MAgCA,IAAe1xD,EAAAA,EAAAA,KAhCqB2xD,EAAGh5C,UACrC,MAAM,oBAAEi5C,IAAwBxkD,EAAAA,EAAAA,MAE1Be,GAAO2mC,EAAAA,GAAAA,KAEP+c,GAAa7wD,EAAAA,EAAAA,KAAY,KACxB2X,IAIL3M,OAAO8lD,MAAKC,EAAAA,GAAAA,IAAep5C,GAAM,SAAU,uBAC3Ci5C,EAAoB,CAAEj5C,SAAK5U,OAC1B,CAAC6tD,EAAqBj5C,IAEnBq5C,GAAgBhxD,EAAAA,EAAAA,KAAY,KAChC4wD,EAAoB,CAAEj5C,SAAK5U,MAC1B,CAAC6tD,IAEEK,GAAe5kB,EAAAA,GAAAA,GAAiB10B,GAEtC,OACEtX,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQZ,QAAQwM,GAChB1L,QAAS+kD,EACTzjD,MAAOJ,EAAK,gBACZgb,WAAWiM,EAAAA,GAAAA,GAAWjnB,EAAK,cAAe,CAAEwK,IAAKs5C,GAAgB,CAAExW,WAAW,EAAMyW,cAAc,KAClGxtB,aAAcv2B,EAAK,kBACnBw2B,eAAgBktB,O,gBC1CtB,MCmGA,IAAe7xD,EAAAA,EAAAA,KAhFMmyD,EAAG5oB,YACtB,MAAM,cAAE6oB,IAAkBhlD,EAAAA,EAAAA,OAElBilD,MAAOC,EAAQ,KAAElhC,GAASmY,GAAS,CAAC,EAEtCp7B,GAAOC,EAAAA,EAAAA,KAEPrB,EAASZ,QAAQmmD,GAEjBj2B,GAAc1uB,EAAAA,EAAAA,IAAgB,KAClCykD,QAGKG,EAAWC,EAASC,EAAUC,IAAUvpD,EAAAA,EAAAA,KAAQ,KACrD,IAAKmpD,EACH,MAAO,GAGT,MAAMK,GAASC,EAAAA,GAAAA,IAAc,SAAUN,EAAUlhC,GAC3CyhC,GAAOD,EAAAA,GAAAA,IAAc,OAAQN,EAAUlhC,GACvC0hC,GAAMF,EAAAA,GAAAA,IAAc,MAAON,EAAUlhC,GAG3C,MAAO,CAACuhC,EAAQE,GAFFD,EAAAA,GAAAA,IAAc,QAASN,EAAUlhC,GAElB0hC,KAC5B,CAACR,EAAUlhC,IAERkG,GAAU3pB,EAAAA,EAAAA,IAAiBgL,IAC/By5C,IACApmD,OAAO8lD,KAAKn5C,EAAK,SAAU,eAGvBo6C,GAAoBplD,EAAAA,EAAAA,IAAgB,KACxC2pB,EAAQi7B,MAGJS,GAAkBrlD,EAAAA,EAAAA,IAAgB,KACtC2pB,EAAQk7B,MAGJS,GAAmBtlD,EAAAA,EAAAA,IAAgB,KACvC2pB,EAAQm7B,MAGJS,GAAiBvlD,EAAAA,EAAAA,IAAgB,KACrC2pB,EAAQo7B,MAGV,OACEzxD,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJi1B,iBDpEiB,WCqEjBl1B,MAAOJ,EAAK,eACZpB,OAAQA,EACRE,QAASovB,EACTqH,QAAM,EAAAtiC,SAAA,EAENH,EAAAA,GAAAA,IAAA,OAAKE,UD1EiC,WC0EPC,SAAA,EAC3B4W,EAAAA,IAAUm7C,EAAAA,MACV9xD,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACy2C,OAAK,EAAClkD,KAAK,UAAU4N,QAAS8jD,EAAiB7xD,SAAC,gBAI1DC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACy2C,OAAK,EAAClkD,KAAK,UAAU4N,QAAS4jD,EAAkB3xD,SAAC,iBAGzDC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACy2C,OAAK,EAAClkD,KAAK,UAAU4N,QAAS6jD,EAAgB5xD,SAAC,eAGvDC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACy2C,OAAK,EAAClkD,KAAK,UAAU4N,QAAS+jD,EAAe9xD,SAAC,sBAIxDC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,sBAAqBC,UAClCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC7N,UAAU,wBAAwB+N,QAAM,EAACC,QAASktB,EAAYj7B,SACnE+M,EAAK,oB,gBCjEhB,MAsFA,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IAEQ,CACL0wD,aAFkB5hB,EAAAA,EAAAA,KAAW9uC,EAAQA,EAAO8yB,kBAF9BzlB,EAtF4BsjD,EAC9C9pB,QAAO6pB,kBAEP,MAAM,kBAAEE,EAAiB,iBAAEC,EAAgB,kBAAEC,IAAsBpmD,EAAAA,EAAAA,OAC5DqmD,EAAgBC,IAAmBnmD,EAAAA,EAAAA,KAAS,IAC5ComD,EAAsBC,IAAyBrmD,EAAAA,EAAAA,KAAS,GACzDsmD,GAAcxmB,EAAAA,GAAAA,GAAiB9D,GAAO,IACtC,OAAEuqB,EAAM,MAAEC,EAAK,yBAAEC,GAA6BH,GAAa96C,SAAW,CAAC,EACvEo3C,EAAM4D,GAAQ7jB,EAAAA,EAAAA,MAAYpI,MAAMC,KAAKgsB,QAAShwD,EAE9CoK,GAAOC,EAAAA,EAAAA,KAEPyjD,GAAa7wD,EAAAA,EAAAA,KAAY,KACzBuoC,GAAO5wB,KAAO86C,GACKlqB,EAAM0E,OAASslB,EAAmBC,GAC1C,CACXS,eAAgBN,IAETE,GAAal7C,KACtB3M,OAAO8lD,MAAKC,EAAAA,GAAAA,IAAe8B,EAAYl7C,KAAM,SAAU,YAEzD26C,MACC,CACD/pB,EAAOkqB,EAAgBH,EAAmBC,EAAkBC,EAAmBG,EAAsBE,IAGjG7B,GAAgBhxD,EAAAA,EAAAA,KAAY,KAChCsyD,MACC,CAACA,IAEEY,GAAqBlzD,EAAAA,EAAAA,KAAa+M,IACtC2lD,EAAgB3lD,GAChB6lD,EAAsB7lD,KACrB,CAAC2lD,IAUJ,OAPA/nD,EAAAA,EAAAA,KAAU,KACJmoD,IACFJ,GAAgB,GAChBE,EAAsBznD,QAAQ6nD,OAE/B,CAACA,EAA0BF,KAG5B7yD,EAAAA,GAAAA,IAACwjC,GAAAA,EAAa,CACZ13B,OAAQZ,QAAQo9B,GAAO5wB,KACvB1L,QAAS+kD,EACTzjD,MAAOJ,EAAK,gBACZu2B,aAAcv2B,EAAK,gBACnBw2B,eAAgBktB,EAAWzwD,SAAA,EAE1Bg0B,EAAAA,GAAAA,GAAWjnB,EAAK,gBAAiB0lD,GAAal7C,KAAM,CAAC,UACrDm7C,IACCzyD,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPhzD,UAAU,kBACVmpC,QAASmpB,EACTnlD,OACEjN,EAAAA,GAAAA,GAAAgmC,GAAAA,GAAA,CAAAjmC,UACGg0B,EAAAA,GAAAA,GACCjnB,EAAK,gCAAiC,CAAC2lD,GAAQ7oB,EAAAA,EAAAA,IAAgBmoB,KAC/D,CAAC,sBAIPgB,QAASF,IAGZF,IACC3yD,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPhzD,UAAU,kBACVmpC,QAASqpB,EACTrlD,OACEjN,EAAAA,GAAAA,GAAAgmC,GAAAA,GAAA,CAAAjmC,UACGg0B,EAAAA,GAAAA,GACCjnB,EAAK,yCAAyC88B,EAAAA,EAAAA,IAAgBklB,IAC9D,CAAC,sBAIPiE,QAASR,EACTryC,UAAWkyC,WCtFfY,GAA6B,IAAbC,EAAAA,IAoBhBC,GAAkB,CACtB,eACA,eACA,eACA,eACA,eACA,eACA,gBA0VF,SAASC,GAAcC,EAAcC,EAAeC,EAAaC,EAAgBC,GAC/E,MAAMC,EAAc,IAAIxnC,KAAKmnC,EAAMC,EAAOC,GACpCI,EAAeH,IAAWI,EAAAA,GAAAA,IAAYJ,GACtCK,EAAeJ,IAAWG,EAAAA,GAAAA,IAAYH,GAE5C,SAAII,GAAgBH,EAAcG,OAEvBF,GAAgBD,EAAcC,EAK3C,CAEA,SAASG,GAAgBnnD,GACvB,OAAOuyC,OAAOvyC,GAAOonD,SAAS,EAAG,IACnC,CAEA,SAASC,GAAUX,EAAcC,EAAeC,GAC9C,MAAO,GAAGF,KAAQC,EAAQ,KAAKC,GACjC,CAaA,UAAe30D,EAAAA,EAAAA,KAxXqBq1D,EAClCC,aACAC,QACAC,QACAC,eACAC,aACA3oD,SACA4oD,iBACAC,oBACAC,oBACAroD,cACAP,UACA6oD,WACAC,eACAC,0BAEA,MAAM7nD,GAAOC,EAAAA,EAAAA,KACPmf,EAAM,IAAID,KAEVsnC,GAAUzrD,EAAAA,EAAAA,KAAQ,IAClBssD,IAAiBF,EAAc,IAAIjoC,KAChC,IAAIA,KAAKhZ,KAAKma,IAAI8mC,GAlDP,OAmDjB,CAACE,EAAcF,IACZV,GAAU1rD,EAAAA,EAAAA,KAAQ,IAClBusD,IAAeF,EAAc,IAAIloC,KAC9B,IAAIA,KAAKhZ,KAAK4a,IAAIsmC,GAASnB,GAAeA,MAChD,CAACqB,EAAYF,IAEVS,GAAqB9sD,EAAAA,EAAAA,KAAQ,IAAOmsD,EAAa,IAAIhoC,KAAKgoC,GAAc,IAAIhoC,MAAS,CAACgoC,IACtFY,GAAax+B,EAAAA,EAAAA,GAAsB3qB,IAClCopD,EAAoBC,IAA0B91D,EAAAA,EAAAA,IAAQ,IAEtD+1D,EAAcC,IAAmB/oD,EAAAA,EAAAA,IAAe0oD,IAChDM,EAAqBC,IAA0BjpD,EAAAA,EAAAA,IACpD,IAAI+f,KAAK+oC,EAAaI,cAAeJ,EAAaK,WAAY,KAEzDC,EAAeC,IAAoBrpD,EAAAA,EAAAA,IACxC2nD,GAAgBe,EAAmBhsB,cAE9B4sB,EAAiBC,IAAsBvpD,EAAAA,EAAAA,IAC5C2nD,GAAgBe,EAAmBc,eAG/BjC,EAAcM,GAAUiB,EAAaI,cAAeJ,EAAaK,WAAYL,EAAaW,WAC1FC,EAAcV,EAAoBE,cAClCS,EAAeX,EAAoBG,WAEnCrrD,EAAcoqD,GAAgBY,EAAac,UAAYvC,EAAQuC,WAC/DzB,GAAcW,EAAac,UAAYtC,EAAQsC,WAErDxrD,EAAAA,EAAAA,KAAU,MACHuqD,GAAcnpD,IACjBupD,EAAgBL,GAChBO,EAAuB,IAAIlpC,KAAK2oC,EAAmBQ,cAAeR,EAAmBS,WAAY,IAC7Ff,IACFiB,EAAiB1B,GAAgBe,EAAmBhsB,aACpD6sB,EAAmB5B,GAAgBe,EAAmBc,mBAGzD,CAACd,EAAoBlpD,EAAQmpD,EAAYP,KAE5ChqD,EAAAA,EAAAA,KAAU,KACJ8pD,IAAiBU,GAAsBE,EAAac,UAAYvC,EAAQuC,YAC1Eb,EAAgB1B,GAChBgC,EAAiB1B,GAAgBN,EAAQ3qB,aACzC6sB,EAAmB5B,GAAgBN,EAAQmC,kBAE5C,CAACtB,EAAcU,EAAoBvB,EAASyB,KAE/C1qD,EAAAA,EAAAA,KAAU,KACJ+pD,IAAeS,GAAsBE,EAAac,UAAYtC,EAAQsC,YACxEb,EAAgBzB,GAChB+B,EAAiB1B,GAAgBL,EAAQ5qB,aACzC6sB,EAAmB5B,GAAgBL,EAAQkC,kBAE5C,CAACtB,EAAcC,EAAYS,EAAoBtB,EAASD,EAASyB,KAEpE1qD,EAAAA,EAAAA,KAAU,KACR,GAAI2pD,EAAY,CACd,MAAM8B,EAAkB,IAAI9pC,KAAKgoC,GACjCgB,EAAgBc,GAChBR,EAAiB1B,GAAgBkC,EAAgBntB,aACjD6sB,EAAmB5B,GAAgBkC,EAAgBL,cACrD,IACC,CAACzB,IAEJ,MAAM+B,EAA0B3B,GAAcuB,GAAe1pC,EAAIkpC,eAAiBS,GAAgB3pC,EAAImpC,YAChG7B,GAAWoC,GAAepC,EAAQ4B,eAAiBS,GAAgBrC,EAAQ6B,WAC3EY,EAAyB7B,GAAgBwB,GAAe1pC,EAAIkpC,eAAiBS,GAAgB3pC,EAAImpC,YAEjG,cAAEa,EAAa,iBAAEC,EAAgB,cAAEC,IAAkBtuD,EAAAA,EAAAA,KAAQ,IA6NrE,SAA2BsrD,EAAcC,GACvC,MAAM6C,EAA0B,GAC1BC,EAA6B,GAC7BC,EAA0B,GAE1BpjC,EAAO,IAAI/G,KACjB+G,EAAKqjC,QAAQ,GACbrjC,EAAKsjC,SAASjD,GACdrgC,EAAKujC,YAAYnD,GACjB,MAAMoD,EAAWxjC,EAAKyjC,UAAY,EAC5BC,EAAuB,IAAIzqC,KAAKmnC,EAAMC,EAAO,GAAGsC,UAEtD,IAAK,IAAIlQ,EAAI,EAAGA,EAAI+Q,EAAU/Q,IAC5ByQ,EAAcnjD,KAAK2jD,EAAuBF,EAAW/Q,EAAI,GAG3D,KAAOzyB,EAAKqiC,aAAehC,GAAO,CAChC,MAAMsD,EAAW3jC,EAAK2iC,UACtBQ,EAAiBpjD,KAAK4jD,GACtB3jC,EAAKqjC,QAAQM,EAAW,EAC1B,CAEA,MAAMC,GAAoBT,EAAiB30D,OAAS00D,EAAc10D,QAAU,EAC5E,GAAIo1D,EAAmB,EACrB,IAAK,IAAInR,EAAI,EAAGA,GAAK,EAAImR,EAAkBnR,IACzC2Q,EAAcrjD,KAAK0yC,GAIvB,MAAO,CAAEyQ,gBAAeC,mBAAkBC,gBAC5C,CA1PIS,CAAkBjB,EAAaC,IAC9B,CAACA,EAAcD,IAEZkB,GAAchvD,EAAAA,EAAAA,KAAQ,IACnBysD,GA8QX,SAA2BznD,EAAiBkmB,GAC1C,MAAMsgC,GAAMyD,EAAAA,GAAAA,GAAmB/jC,EAAMlmB,EAAKkqD,MAG1C,OAAI1D,KAFUyD,EAAAA,GAAAA,GAAmB,IAAI9qC,KAAQnf,EAAKkqD,MAGzClqD,EAAK,0CAA0CmqD,EAAAA,GAAAA,IAAWnqD,EAAMkmB,IAGlElmB,EAAK,sCAAuC,CAACwmD,GAAK2D,EAAAA,GAAAA,IAAWnqD,EAAMkmB,IAC5E,CAvRgCkkC,CAAkBpqD,EAAMkoD,IACnD,CAACloD,EAAMkoD,EAAcT,IAgClBzuB,GAAenmC,EAAAA,EAAAA,KAAY,KAE7B80D,EADEL,GAAgBY,EAAezB,EACxBA,EACAc,GAAcW,EAAexB,EAC7BA,EAEAwB,KAEV,CAACZ,EAAcC,EAAYd,EAASC,EAASiB,EAAUO,IAEpDmC,GAAoBx3D,EAAAA,EAAAA,KAAaiN,IACrC,MAAMF,EAAQE,EAAEC,OAAOH,MAAM0qD,QAAQ,UAAW,IAChD,IAAK1qD,EAAMlL,OAGT,OAFA+zD,EAAiB,SACjB3oD,EAAEC,OAAOH,MAAQ,IAInB,MAAM2qD,EAAQpkD,KAAKma,IAAI,EAAGna,KAAK4a,IAAIxI,OAAO3Y,GAAQ,KAE5CsmB,EAAO,IAAI/G,KAAK+oC,EAAac,WACnC9iC,EAAKskC,SAASD,GACdpC,EAAgBjiC,GAChB0hC,IAAe1hC,GAEf,MAAMukC,EAAW1D,GAAgBwD,GACjC9B,EAAiBgC,GACjB3qD,EAAEC,OAAOH,MAAQ6qD,IAChB,CAACvC,EAAcN,IAEZ8C,GAAsB73D,EAAAA,EAAAA,KAAaiN,IACvC,MAAMF,EAAQE,EAAEC,OAAOH,MAAM0qD,QAAQ,UAAW,IAChD,IAAK1qD,EAAMlL,OAGT,OAFAi0D,EAAmB,SACnB7oD,EAAEC,OAAOH,MAAQ,IAInB,MAAM+qD,EAAUxkD,KAAKma,IAAI,EAAGna,KAAK4a,IAAIxI,OAAO3Y,GAAQ,KAE9CsmB,EAAO,IAAI/G,KAAK+oC,EAAac,WACnC9iC,EAAK0kC,WAAWD,GAChBxC,EAAgBjiC,GAChB0hC,IAAe1hC,GAEf,MAAM2kC,EAAa9D,GAAgB4D,GACnChC,EAAmBkC,GACnB/qD,EAAEC,OAAOH,MAAQirD,IAChB,CAAC3C,EAAcN,IA0BlB,OACE90D,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJzB,OAAQA,EACRE,QAASA,EACT9L,UAAU,gBACVsN,QAAS04B,EAAa/lC,SAAA,EAEtBC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,YAAWC,UACxBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLnS,KAAK,UACL0N,MAAM,cACNE,QAASlC,EAAQ7L,UAEjBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAGb1N,EAAAA,GAAAA,IAAA,MAAAG,SAAA,CACG+M,EAAK,YAAY+oD,EAAe,KAChC,IACAD,MAGH51D,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLnS,KAAK,UACL0N,MAAM,cACNsS,SAAU+1C,EACVnoD,QAAUmoD,OAA2CvzD,EArI/D,WACEyyD,GAAwByC,IACtB,MAAMC,EAAW,IAAI5rC,KAAK2rC,GAG1B,OAFAC,EAASvB,SAASuB,EAASxC,WAAa,GAEjCwC,IAEX,EA8HyE93D,UAE/DC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,gBAGbtN,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLnS,KAAK,UACL0N,MAAM,cACNsS,SAAU81C,EACVloD,QAAUkoD,OAA2CtzD,EAtI/D,WACEyyD,GAAwByC,IACtB,MAAMC,EAAW,IAAI5rC,KAAK2rC,GAG1B,OAFAC,EAASvB,SAASuB,EAASxC,WAAa,GAEjCwC,IAEX,EA+HyE93D,UAE/DC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,iBAKjBtN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,mBAAkBC,UAC/BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,CAC3BmzD,GAAgB1/C,KAAK8/C,IACpBtzD,EAAAA,GAAAA,GAAA,OAAKF,UAAU,2BAA0BC,UACvCC,EAAAA,GAAAA,GAAA,QAAAD,SAAO+M,EAAKwmD,SAGf4C,EAAc1iD,KAAKmjD,IAClB32D,EAAAA,GAAAA,GAAA,OAAKF,UAAU,sBAAqBC,UAACC,EAAAA,GAAAA,GAAA,QAAAD,SAAO42D,QAE7CR,EAAiB3iD,KAAKmjD,IACrB32D,EAAAA,GAAAA,GAAA,OACEypC,KAAK,SACLD,SAAU,EACV17B,QAASA,KAAMgqD,OAlJD9kC,EAkJkB2jC,OAjJ1C1B,GAAiB2C,IACf,MAAMC,EAAW,IAAI5rC,KAAK2rC,GAM1B,OALAC,EAASxB,QAAQrjC,GACjB6kC,EAASvB,SAAST,GAClBgC,EAAStB,YAAYX,GAErBlB,IAAemD,GACRA,KARX,IAA0B7kC,GAmJdlzB,WAAWoW,EAAAA,GAAAA,GACT,aACA,aACAi9C,GACEyC,EAAaC,EAAcc,EAAUpD,EAASC,GAE5C,WACAmD,EAAW,YAAc,GAC7BlD,IAAgBM,GAAU6B,EAAaC,EAAcc,IAAa,YAClE52D,SAED+K,QAAQ6rD,KACP32D,EAAAA,GAAAA,GAAA,QAAAD,SAAO42D,QAIZP,EAAc5iD,KAAKmjD,IAClB32D,EAAAA,GAAAA,GAAA,OAAKF,UAAU,sBAAqBC,UAACC,EAAAA,GAAAA,GAAA,QAAAD,SAAO42D,aAKjDrC,IAzGD10D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,aAAYC,SAAA,EACzBC,EAAAA,GAAAA,GAAA,SACEkB,KAAK,OACLpB,UAAU,eACVi4D,UAAU,UACVrrD,MAAO4oD,EACP9nD,SAAU2pD,EACVrb,QAASiZ,IACT,KAEF/0D,EAAAA,GAAAA,GAAA,SACEkB,KAAK,OACLpB,UAAU,eACVi4D,UAAU,UACVrrD,MAAO8oD,EACPhoD,SAAUgqD,EACV1b,QAASiZ,QA2Fbn1D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,SAAQC,SAAA,CACpBoM,IACCnM,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SACzBoM,KAGLvM,EAAAA,GAAAA,IAAA,OAAKE,UAAU,SAAQC,SAAA,EACrBC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLG,QAASg4B,EACT5lB,SAAUlW,EAAWjK,SAEpB+2D,IAEFtC,IACCx0D,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACG,QAAS6mD,EAAqB9mD,QAAM,EAAA9N,SACzCy0D,gBCxTf,IAAe71D,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACQ,CAAE4yD,YAAYnlD,EAAAA,EAAAA,KAAezN,GAAQ22D,6BAF5BtpD,EAxB+BupD,EACjDvsD,SAAQuoD,iBAER,MAAM,qBAAEiE,EAAoB,qBAAEC,IAAyBpsD,EAAAA,EAAAA,MAEjDqsD,GAAmBz4D,EAAAA,EAAAA,KAAaqzB,IACpCklC,EAAqB,CAAEx3C,UAAWsS,EAAK8iC,UAAY,MACnDqC,MACC,CAACA,EAAsBD,IAEpBprD,GAAOC,EAAAA,EAAAA,KAEb,OACE/M,EAAAA,GAAAA,GAACg0D,GAAa,CACZtoD,OAAQA,EACRuoD,WAAYA,EACZI,YAAU,EACVE,kBAAmBznD,EAAK,cACxBlB,QAASusD,EACT1D,SAAU2D,Q,gBCVhB,MAgNA,IAAez5D,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUs8B,aAEF,CACLuS,KAFWvS,GAASwS,EAAAA,EAAAA,KAAW9uC,EAAQs8B,QAAUj7B,EAGjDgoD,WAAY/sB,GAASgtB,EAAAA,EAAAA,KAAiBtpD,EAAQs8B,QAAUj7B,EACxD21D,cAAeh3D,EAAOi3D,YAAYC,cANpB7pD,EAlM+B8pD,EACjD9sD,SACAiyB,SACA86B,kBACAvoB,OACAwa,aACA2N,oBAEA,MAAM,cAAEK,EAAa,cAAEC,EAAa,sBAAEC,IAA0B7sD,EAAAA,EAAAA,MAE1De,GAAOC,EAAAA,EAAAA,KACP8rD,GAAgB7sB,EAAAA,GAAAA,GAAiBkE,GACjC4oB,GAA2B9sB,EAAAA,GAAAA,GAAiBysB,GAC5CM,GAAW3vD,EAAAA,EAAAA,OAEV88B,EAAS4nB,EAAaC,IAAiB9uD,EAAAA,EAAAA,MACvC+5D,EAAWC,IAAgB/sD,EAAAA,EAAAA,IAAiB2sD,GAAeG,WAAa,KACxEE,EAAUC,IAAejtD,EAAAA,EAAAA,IAAiB2sD,GAAeK,UAAY,KACrEE,EAAOC,IAAYntD,EAAAA,EAAAA,IAAiB2sD,GAAeS,aAAe,KAClEC,EAAwBC,IAA6BttD,EAAAA,EAAAA,KAAkB,GACxEutD,EAAiB3uD,QAAQkuD,KAAeP,GAAmBW,KAEjE9uD,EAAAA,EAAAA,KAAU,KACJoB,IACFoiD,IACAmL,EAAaJ,GAAeG,WAAa,IACzCG,EAAYN,GAAeK,UAAY,IACvCG,EAASR,GAAeS,aAAe,IACvCE,GAA0B,MAE3B,CAAC9tD,EAAQoiD,EAAa+K,GAAeG,UAAWH,GAAeK,SAAUL,GAAeS,eAE3FhvD,EAAAA,EAAAA,KAAU,MACHiL,EAAAA,IAAgB2wB,GACnBt7B,YAAW,KACTmuD,EAASxvD,SAASmwD,UAjDC,OAoDtB,CAACxzB,IAEJ,MAAMyzB,GAAwBh6D,EAAAA,EAAAA,KAAaiN,IACzCqsD,EAAarsD,EAAEC,OAAOH,SACrB,IAEGktD,GAAoBj6D,EAAAA,EAAAA,KAAaiN,IACrCysD,GAASQ,EAAAA,GAAAA,IAA0BxB,EAAezrD,EAAEC,OAAOH,UAC1D,CAAC2rD,IAEEyB,GAAuBn6D,EAAAA,EAAAA,KAAaiN,IACxCusD,EAAYvsD,EAAEC,OAAOH,SACpB,IAEGsuB,GAAcr7B,EAAAA,EAAAA,KAAY,KAC9Bi5D,IACAK,EAAa,IACbE,EAAY,IACZE,EAAS,MACR,CAACT,IAEE9yB,GAAenmC,EAAAA,EAAAA,KAAY,KAC3B84D,IAAoB96B,EACtBg7B,EAAc,CACZK,YACAE,WACAI,YAAaF,IAGfV,EAAc,CACZ/6B,SACAq7B,YACAE,WACAK,6BAGH,CAACP,EAAWL,EAAeF,EAAiBS,EAAUE,EAAOG,EAAwBb,EAAe/6B,IAEvG,GAAKjyB,GAAWw6B,EAuFhB,OACEtmC,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJrN,UAAU,kBACVoN,MAAOJ,EAAK,cACZpB,OAAQA,EACRE,QAASovB,EACTnvB,oBAAqBkiD,EAAchuD,SAAA,CAElC84D,IAzFDj5D,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2BAA2BsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAA,EAC5EC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CACL3zB,KAAK,QACL4zB,KAAM+kC,EACNhkD,KAAM,GAAGmkD,KAAaE,OAExBt5D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gCAA+BC,SAAA,EAC5CC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,gCAA+BC,SACzC84D,GAAeS,aACZO,EAAAA,GAAAA,IAA0BxB,EAAeQ,EAAcS,aACvDxsD,EAAK,mBAEX9M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,+BAA+BsW,IAAI,OAAMrW,UACtD6qD,EAAAA,EAAAA,IAAc99C,EAAM+rD,EAAgBnO,YAI3C1qD,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRsG,IAAK+kD,EACLrsD,MAAOssD,EACP/rD,MAAOH,EAAK,aACZ08B,SAAU,EACVh8B,SAAUmsD,KAEZ35D,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRhB,MAAOwsD,EACPjsD,MAAOH,EAAK,YACZ08B,SAAU,EACVh8B,SAAUssD,KAEZ95D,EAAAA,GAAAA,GAAA,KAAGF,UAAU,6BAA4BC,UACtCg0B,EAAAA,GAAAA,GACCjnB,EAAK,+BAAgC+rD,GAAeG,WAAa,IACjE,CAAC,QAAS,uBAGdh5D,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPhzD,UAAU,kBACVmpC,QAASswB,EACT/vB,SAAU,EACVupB,QAASyG,EACTvsD,MAAOH,EAAK,4BAEd9M,EAAAA,GAAAA,GAAA,KAAGF,UAAU,kEAAiEC,UAC3Eg0B,EAAAA,GAAAA,GAAWjnB,EAAK,wCAAyC+rD,GAAeG,iBA6C5EF,IArCDl5D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,+BAA+BsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAA,EAChFC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CAAC3zB,KAAK,QAAQ2U,KAAM,GAAGmkD,KAAaE,OAC3Ct5D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,wCAAuCC,SAAA,EACpDC,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRsG,IAAK+kD,EACLrsD,MAAO0sD,EACPrB,UAAU,MACV9qD,MAAOH,EAAK,qBACZ08B,SAAU,EACVh8B,SAAUosD,KAEZ55D,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRhB,MAAOssD,EACP/rD,MAAOH,EAAK,aACZ08B,SAAU,EACVh8B,SAAUmsD,KAEZ35D,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRhB,MAAOwsD,EACPjsD,MAAOH,EAAK,YACZ08B,SAAU,EACVh8B,SAAUssD,WAiBhBl6D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLE,QAAM,EACN/N,UAAU,wBACVogB,UAAWu5C,EACX3rD,QAASg4B,EAAa/lC,SAErB+M,EAAK,WAER9M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLE,QAAM,EACN/N,UAAU,wBACVgO,QAASktB,EAAYj7B,SAEpB+M,EAAK,sB,4ECrNT,IAAKitD,GAAgB,SAAhBA,GAAgB,OAAhBA,EAAAA,EAAgB,aAAhBA,EAAAA,EAAgB,mBAAhBA,EAAAA,EAAgB,eAAhBA,EAAAA,EAAgB,iBAAhBA,EAAAA,EAAgB,qBAAhBA,EAAAA,EAAgB,uBAAhBA,EAAAA,EAAgB,2BAAhBA,EAAAA,EAAgB,6BAAhBA,CAAgB,MAc5B,MAAMC,GAA+E,CACnF52C,IAAK22C,GAAiBE,IACtB52C,OAAQ02C,GAAiBG,OACzBr+C,KAAMk+C,GAAiBI,KACvBh3C,MAAO42C,GAAiBK,MACxBC,QAASN,GAAiBO,QAC1BC,SAAUR,GAAiBS,SAC3BC,WAAYV,GAAiBW,WAC7BC,YAAaZ,GAAiBa,aAG1BC,GAAwB9b,OAAO6K,KAAKoQ,IAE1C,IAAIc,GACJ,MAAMC,GAAsB,CAAEx+C,EAAG,EAAGsG,EAAG,G,gBC1CvC,MCyHA,IAAelkB,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MACM25D,GADWlsD,EAAAA,EAAAA,KAAezN,GACP25D,SAEnB,MAAEtI,IAAUuI,EAAAA,EAAAA,KAAmB55D,IAAW,CAAC,GAC3C,WAAE65D,EAAU,cAAEC,GAAkBH,GAAW,CAAC,EAC5CI,EAAkC,cAAfF,EAGzB,MAAO,CACLG,aAHmB3I,GAAQviB,EAAAA,EAAAA,KAAW9uC,EAAQqxD,QAAShwD,EAIvD04D,mBACAD,mBAbczsD,EA7FS4sD,EAC3BD,eAAcD,mBAAkBD,oBAEhC,MAAM,uBACJI,EAAsB,iBACtBC,IACEzvD,EAAAA,EAAAA,MAEEynC,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,KACPz/B,GAAM5K,EAAAA,EAAAA,MAENqyD,GAAsB3zD,EAAAA,EAAAA,KAAQ,IAC3BqzD,GAAiBpc,OAAOyK,OAAO2R,IACrC,CAACA,IAEEO,EAAkBD,GAAqBj6D,OAEvC4tC,GAAQtnC,EAAAA,EAAAA,KAAQ,KACpB,IAAK4zD,EAAiB,MAAO,GAE7B,MAAMr6D,GAASwtC,EAAAA,EAAAA,MACT8sB,EAAiBN,GAAcx7D,GAGrC,OAFmBmkC,EAAAA,GAAAA,IAAO,CAAC23B,KAAmBF,EAAoBjoD,KAAKooD,GAAQA,EAAIlJ,UAC3Dl/C,KAAK3T,GAAOA,IAAMswC,EAAAA,EAAAA,KAAW9uC,EAAQxB,KAAK49B,OAAO3yB,SAASszC,MAAM,EAAG,KAE1F,CAACsd,EAAiBL,EAAcI,IAE7BI,GAAmBvvD,EAAAA,EAAAA,IAAgB,KACvCkvD,OAGIM,GAAoBxvD,EAAAA,EAAAA,IAAgB,KACxCivD,EAAuB,CAAEQ,MAAO,iBAGlC,GAAKX,EAsBL,OACEx7D,EAAAA,GAAAA,IAAA,OACEoU,IAAKA,EACLlU,WAAWoW,EAAAA,GAAAA,GDzFM,YC2FfnW,SAAA,EAEFC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UD9FmG,WC+FnGuS,OAAK,EACLzE,MAAM,cACN1N,KAAK,OACLoS,UAAWkhC,EAAQ,SACnB1lC,QAAS+tD,EAAiB97D,UAE1BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACzS,UDrGmL,WCqG3JwN,KAAK,aAErCtN,EAAAA,GAAAA,GAACmvC,GAAAA,EAAU,CAACrvC,UDvG8G,WCuGnFI,KAAK,OAAOkvC,MAAOA,IArC9D,WACE,MAAM4sB,EAAgB5sB,EAAM5tC,OAAS,GAAK4tC,EAAM,IAAI4pB,UAC9C9rD,EAAQwuD,GAAmBM,GAAiBN,EAAkB,EAChE5uD,EAAK,mBACL,CACEmvD,QAASD,EACT7oC,MAAOuoC,EAAkB,GAE3B,CACEQ,YAAaR,EAAkB,IAEjCM,EAEJ,OACEh8D,EAAAA,GAAAA,GAAA,OAAKF,UDhFyM,WCgFjLC,SAC1BmN,GAGP,CAoBKivD,IACDn8D,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,WAAWoW,EAAAA,GAAAA,GD1GoE,WC4G7E,WAEF7D,OAAK,EACLzE,MAAM,cACN1N,KAAK,OACL4N,QAASguD,EAAkB/7D,UAE3BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACzS,UDnHiK,WCmHpIwN,KAAK,0B,4BCnHhD,UAAgB,UAAY,WAAW,mBAAmB,WAAW,eAAiB,WAAW,kBAAkB,WAAW,cAAgB,WAAW,KAAO,YC8EhK,IAAe3O,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aAGF,CACL2jC,MAHWC,EAAAA,EAAAA,KAAW9uC,EAAQkL,MAFhBmC,EAhDpB,UAAwB,KAAEwhC,EAAI,aAAEksB,IAC9B,MAAM,mBACJC,IACEtwD,EAAAA,EAAAA,MAEEe,GAAO2mC,EAAAA,GAAAA,KAEPnvB,GAAchY,EAAAA,EAAAA,IAAgB,KAClC,IAAK4jC,EACH,OAEF,MAAMwiB,EAAQxiB,GAAMrwC,GACpB,IAAK6yD,EACH,OAEF,MAAM4J,GAAQC,EAAAA,GAAAA,KACdF,EAAmB,CACjB3J,QACA/mD,OAAQ+mD,EACR4J,aAIJ,IAAKpsB,EAAM,OAEX,MAAMhjC,EAAQgjC,GAAM8oB,UACdwD,EAAkBtsB,GAAMusB,eACxBC,EAAYF,GAAmBJ,GAAeO,EAAAA,GAAAA,IAAqB7vD,EAAM0vD,QAAmB95D,EAElG,OACE1C,EAAAA,GAAAA,GAAA,OACEF,UAAWyd,GAAOhY,UAClBuI,QAASwW,EAAYvkB,UAErBC,EAAAA,GAAAA,GAAC48D,GAAAA,EAAS,CACR98D,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAOs/C,gBAAiBT,GAAgB,sBAClEU,cAAev/C,GAAOjQ,KACtByvD,eAAgBx/C,GAAOy/C,eACvBC,mBAAoB1/C,GAAO2/C,cAC3BppC,KAAMoc,EACNr7B,KAAM3H,EACNwvD,UAAWA,EACXS,UAAU,iBAIlB,KC5EA,IAAgB,KAAO,WAAW,OAAS,WAAW,gBAAgB,WAAW,aAAe,WAAW,kBAAkB,WAAW,eAAiB,WAAW,aAAe,YCiC7KC,IAAevnD,EAAAA,GAAAA,KAAUwnD,GAAOA,KAAM,KAAK,GA+FjD,IAAe1+D,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAYrN,IAC9B,MAAMi8D,GAAexuD,EAAAA,EAAAA,KAAezN,GAAQi8D,aACtChoC,EAAWgoC,EAAaC,gBAAgBpgB,QAE9C,MAAO,CACLzoB,WAAYY,GAAYgoC,EAAaE,gBAAgBC,QACrDnoC,WACAooC,aAAcr8D,EAAOs8D,WAAW53B,WAPhBr3B,EA7FuBkvD,EACzCtoC,WACAooC,mBAEA,MAAMlqB,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,MACNoqB,EAAoBC,IAAyB5xD,EAAAA,EAAAA,KAAkB,IAChE,qBACJ6xD,IACEhyD,EAAAA,EAAAA,MAEEiyD,GAA2B1xD,EAAAA,EAAAA,IAAgB,KAC/CwxD,GAAuBG,IAAUA,QAG5Br6B,EAAaC,IAAkB33B,EAAAA,EAAAA,IAAS,IAEzCgyD,GAAmBp2D,EAAAA,EAAAA,KAAQ,IAC1BwtB,GAEE2O,EAAAA,GAAAA,IAAmB,CAAEC,IAAK5O,EAAU6O,MAAOP,EAAa1iC,KAAM,SAF/C,IAGrB,CAACo0B,EAAUsO,IAERqgB,GAAiBtkD,EAAAA,EAAAA,KAAY,EAAG2sB,gBAChCA,IAAc6xC,EAAAA,GAAkBC,WAClChB,IAAa,KACXW,SAGH,IAEGM,GAAyB1+D,EAAAA,EAAAA,KAAY,KACzCkkC,EAAe,MACd,IAEH,OACEjkC,EAAAA,GAAAA,IAACslD,GAAAA,EAAc,CACbplD,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAOygB,KAAM,iBACvCmnB,MAAO+Y,EACP9Y,WAAYnB,EACZ6H,aAAa,sBACbwS,YAAU,EACVC,iBApDqB,GAoDgBx+D,SAAA,EAErCC,EAAAA,GAAAA,GAAC6kD,GAAAA,EAAW,CACV/kD,UAAWyd,GAAOunC,OAClBp4C,MAAOk3B,EACPp2B,SAAUq2B,EACV26B,QAASH,EACT9S,YAAaz+C,EAAK,gBAEnB4wD,IAAiB95B,IAChBhkC,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOurB,QAAQ/oC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOkhD,aAAa1+D,SAAA,EAClCC,EAAAA,GAAAA,GAAA,QAAAD,SAAOyzC,EAAQ,qBACfxzC,EAAAA,GAAAA,GAAA,QAAMF,UAAWyd,GAAOmhD,aAAc5wD,QAASkwD,EAAyBj+D,SACrEyzC,EAAQqqB,EAAqB,2BAA6B,kCAG/D79D,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOohD,eAAe5+D,SACnC29D,EAAalqD,KAAI,CAAC3T,EAAIyE,KACrB,GAAKu5D,KAAsBv5D,GAhEV,GAoEjB,OACEtE,EAAAA,GAAAA,GAAC4+D,GAAc,CACbryD,OAAQ1M,aAOpBD,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOurB,QAAQ/oC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOkhD,aAAa1+D,SACnB+M,EAAd82B,EAAmB,OAAe,kBAErC5jC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOohD,eAAe5+D,SACnCm+D,GAAoBA,EAAiB1qD,KAAK3T,IAEvCG,EAAAA,GAAAA,GAAC4+D,GAAc,CACbryD,OAAQ1M,EACRu8D,cAAex4B,kBCpFzBi7B,GAAiC,MAAQlpD,EAAAA,EClC/C,GAAoG,WAApG,GAAmO,WAAnO,GAAqP,WAArP,GAA6U,WAA7U,GAA8c,WAA9c,GAAk/B,WAAl/B,GAAiwC,WAAjwC,GAA0zC,WC0FpzCmpD,GAA6B,IAM7BC,GAAqB,CACzB,gBACA,oBACA,eACA,cACA,eACA,2CACAr4C,KAAK,KAEDs4C,GAA8C,CAClDC,GAAI,KACJC,OAAQ,SACRhnD,MAAO,SA4jCT,IAAevZ,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAU6mC,YACT,MAAMi3B,EAAej3B,GAAOk3B,iBAAkBC,EAAAA,EAAAA,KAAah+D,EAAQ6mC,EAAMk3B,sBAAmB18D,GACpFgwD,MAAO4M,GAAgBH,GAAgB,CAAC,EAC1CjE,EAAahzB,GAAOgzB,WAEpBqE,EAAYD,EAAcj+D,EAAOm+D,WAAWC,KAAKH,QAAe58D,EAChEosD,EAAMwQ,GAAcnvB,EAAAA,EAAAA,KAAW9uC,EAAQi+D,QAAe58D,EACtD2tC,EAAeivB,GAAchvB,EAAAA,EAAAA,KAAmBjvC,EAAQi+D,QAAe58D,EACvEg9D,EAAiBrvB,GAAcsvB,SAASC,YACxC7N,EAAc1wD,EAAO8yB,eAAgBgc,EAAAA,EAAAA,KAAW9uC,EAAQA,EAAO8yB,oBAAiBzxB,EAChF45D,GAAQuD,EAAAA,EAAAA,KAAYx+D,IACpB,mBAAEy+D,EAAoBze,OAAQ0e,IAAyBjxD,EAAAA,EAAAA,KAAezN,GAAQ2+D,SAC5E3e,OAAQ4e,EAAoBC,aAAcC,IAAsBrxD,EAAAA,EAAAA,KAAezN,GAAQ++D,aACzFC,EAAoBvR,GAAMwR,EAAAA,EAAAA,KAAwBj/D,EAAQytD,EAAIjvD,SAAM6C,EAEpE69D,EAAgBN,GAAsBF,EAE5C,MAAO,CACLR,YACAzQ,MACAiD,cACAuK,QACAwD,mBAAoBA,GAAsBh1D,QAAQq1D,GAClDI,gBACArF,aACAmF,oBACAX,oBA3BchxD,EAzjCqC8xD,EACvDt4B,QACAu4B,SACA3R,MACAwN,QACAwD,qBACAS,gBACAG,4BACAC,8BACAC,iBACA1F,aACA2F,sBACAC,2BACAT,oBACAX,iBACAqB,kBAEA,MAAM,kBACJC,EAAiB,gBACjBC,EAAe,gBACfC,EAAe,iBACfC,EAAgB,qBAChBC,EAAoB,gBACpBC,EAAe,kBACfC,EAAiB,aACjBC,EAAY,mBACZC,EAAkB,iBAClBC,EAAgB,iBAChB//B,EAAgB,2BAChBggC,EAA0B,wBAC1BC,EAAuB,uBACvBpG,EAAsB,iBACtBC,EAAgB,+BAChBoG,IACE71D,EAAAA,EAAAA,OACG81D,EAAYC,IAAiB51D,EAAAA,EAAAA,OAC7B61D,EAAiBC,IAAsB91D,EAAAA,EAAAA,OAEvCswC,EAAUylB,EAAYC,IAAgBjjE,EAAAA,EAAAA,IAAQ,IAE9CkjE,EAAiBC,IAAsBl2D,EAAAA,EAAAA,OACvCm2D,EAAmBC,KAAwBp2D,EAAAA,EAAAA,KAAS,IACpDq2D,GAAyBC,KAA8Bt2D,EAAAA,EAAAA,KAAS,IAChEu2D,GAAuBC,KAA4Bx2D,EAAAA,EAAAA,OACnDy2D,GAAgBC,KAAqB12D,EAAAA,EAAAA,OACtC,eACJ22D,GAAc,kBAAEC,GAAiB,kBAAEC,IC1JxB,WACb,MAAOF,EAAgBG,IAAqB92D,EAAAA,EAAAA,IAAS,GAC/C+2D,GAAkB75D,EAAAA,EAAAA,IAAO,GACzB85D,GAAiB95D,EAAAA,EAAAA,IAAO,GAExB05D,GAAoBx2D,EAAAA,EAAAA,IAAgB,KACxC,MAAM4f,EAAMD,KAAKC,MAEbA,EAAMg3C,EAAe35D,QDmFH,MClFpB05D,EAAgB15D,QAAU,GAG5B05D,EAAgB15D,SAAW,EAEvB05D,EAAgB15D,SD4EO,GC3EzBy5D,EAAkB92C,ED4EE,QCxElB62C,GAAoBz2D,EAAAA,EAAAA,IAAgB,KACpCu2D,EAAiB52C,KAAKC,QACxBg3C,EAAe35D,QAAU0iB,KAAKC,UAIlC,MAAO,CACL22C,iBACAC,oBACAC,oBAEJ,CD6HMI,GAEE95C,IAAejgB,EAAAA,EAAAA,MAEfg6D,IAAkBh6D,EAAAA,EAAAA,MAElBi6D,IAAyBj6D,EAAAA,EAAAA,MAEzB4U,GAA8B,eAAfk9C,EACfE,GAAkC,cAAfF,EAEnBoI,IAAyBh3D,EAAAA,EAAAA,IAAgB,KAC7C1B,YAAW,KACT2wD,EAAuB,CAAEQ,MAAO,gBA/Ed,QAmFhBwH,IAAuBn6D,EAAAA,EAAAA,OAE7BkB,EAAAA,EAAAA,KAAU,KACRi5D,GAAqBh6D,QAAU3H,SAASuC,cAAc,cACrD,IAEH,MAAO,CAAE8c,GAAeC,KAAkBC,EAAAA,GAAAA,IAAcoiD,GAAsBD,IAExEnE,GAAej3B,GAAOk3B,gBAAkBl3B,EAAMizB,cAAcjzB,EAAMk3B,sBAAmB18D,GACnF8gE,QAASC,GAAgB,gBAAEC,IAAoBvE,IAAgB,CAAC,GAClE,IACJ7nD,GAAG,WAAExC,GAAU,oBAAE6uD,IACflD,GAAU,CAAC,GAET,gBACJmD,IACElE,GAAkB,CAAC,EAEjBmE,GAAmB/4D,QAAQ21D,GAAQoD,kBACnCC,GAAoBh5D,QAAQ21D,GAAQqD,mBAEpCC,GAAYtD,IAAUuD,EAAAA,GAAAA,IAAavD,GACnCrB,GAAkBD,KAAgB6E,EAAAA,GAAAA,IAAa7E,IAE/C5lD,GAAY4lD,IAAgBsB,GAAWrB,KAAoB2E,GAE3DE,GAAcC,EAAAA,GACdC,QAAuDzhE,IAAnC29D,GAAmB+D,YACvCC,GAAkBv5D,QAAQu1D,GAAmB+D,aAE7CE,IAAsBh4D,EAAAA,EAAAA,IAAiBi4D,IACtCR,IACLxC,EAAa,CAAE/7C,IAAKu+C,GAAWS,OAAQD,OAGnCE,IAAc38D,EAAAA,EAAAA,KAAQ,KACnBy0D,EAAAA,GAAAA,MAEN,CAACD,KAEJhyD,EAAAA,EAAAA,KAAU,KACRs4D,GAAkB6B,GAAYC,sBAC7B,CAACD,KAEJ,MAAME,GAAuBF,GAAYG,UAClCC,GAA0BC,KAA+B54D,EAAAA,EAAAA,MAC1D64D,GAAwC,UAAVzI,EAAoBoD,GAAgBgE,gBACpEhE,GAAgBsF,qBAEpB16D,EAAAA,EAAAA,KAAU,KAGRg6D,GAAoB,CAAEZ,gBAFRmB,IAA4BE,IAA+BJ,OAGxE,CAACA,GAAsBE,GAA0BE,KAEpD,MAAME,GAAmBR,GAAYG,UAC9BM,GAAsBC,KAA2Bj5D,EAAAA,EAAAA,MAClDk5D,GAAoC,UAAV9I,EAAoBoD,GAAgB2F,YAChE3F,GAAgB4F,iBAEpBh7D,EAAAA,EAAAA,KAAU,KAGRg6D,GAAoB,CAAEe,YAFRH,IAAwBE,IAA2BH,OAGhE,CAACA,GAAkBC,GAAsBE,KAE5C,MAAMG,IAAWn8D,EAAAA,EAAAA,MAEXoqC,IAAUzmC,EAAAA,EAAAA,KACVD,IAAO2mC,EAAAA,GAAAA,KACP/nC,GAASw8B,GAAOunB,cAAe,EAC/B+V,GAAW16D,QAAQgK,KAEnB,YACJ2wD,GAAW,UAAEC,GAAS,sBAAEC,GAAqB,aAAEC,GAAY,aAAEC,GAAY,UAAEC,IFrNxDC,EACrB/xD,EACAtI,EACAsS,EACAgoD,EACAC,EACAxF,EACAhgE,KAEA,MAAM,iBACJihC,EAAgB,qBAChB0/B,EAAoB,YACpB8E,EAAW,YACXC,EAAW,yBACXC,EAAwB,aACxB7E,EAAY,sBACZ8E,IACEt6D,EAAAA,EAAAA,MAEEu6D,GAAoBl9D,EAAAA,EAAAA,KAAgB,GACpCm9D,GAAgBn9D,EAAAA,EAAAA,MAChBo9D,GAAkBp9D,EAAAA,EAAAA,KAAgB,GAClCq9D,GAAmBr9D,EAAAA,EAAAA,MACnB6uB,GAAapN,EAAAA,GAAAA,MAEnBvgB,EAAAA,EAAAA,KAAU,KACR,IAAK0J,EAAIzK,UAAYmC,EAAQ,OAE7B,MAAMg7D,EAAaA,KACjBjmE,OAGIsX,EAAQ/D,EAAIzK,QAElB,OADAwO,EAAMjC,iBAAiB,OAAQ4wD,GACxB,KACL3uD,EAAMhC,oBAAoB,OAAQ2wD,MAEnC,CAACjmE,EAAQuT,EAAKtI,IAEjB,MAAMg6D,GAAY/lE,EAAAA,EAAAA,KAAakvB,IACxB7a,EAAIzK,SAASo9D,eAClB3yD,EAAIzK,QAAQo9D,cAAc5tD,YAAY6tD,KAAKC,UAAUh4C,GAAQ,OAC5D,CAAC7a,IAEE2xD,GAAwBhmE,EAAAA,EAAAA,KAAa+M,IACzCg5D,EAAU,CACRoB,UAAW,qBACXC,UAAW,CACTC,cAAet6D,OAGlB,CAACg5D,IAEEuB,GAAmB36D,EAAAA,EAAAA,IAAiBgL,IACxC,IAAKtD,EAAIzK,QAAS,OAClB,MAAMwO,EAAQ/D,EAAIzK,QAClBwO,EAAMpU,IAAM,cACZoU,EAAMjC,iBAAiB,QAAQ,KAC7BiC,EAAMpU,IAAM2T,IACX,CAAE4vD,MAAM,OAGPzB,GAAc9lE,EAAAA,EAAAA,KAAa2X,IAC/B,GAAIgvD,EAAkB/8D,QAOpB,OANAm8D,EAAU,CACRoB,UAAW,uBAEbP,EAAch9D,QAAUqB,YAAW,KACjCq8D,EAAiB3vD,KAvEF,MA4EnB2vD,EAAiB3vD,KAChB,CAACouD,IAEEE,GAAejmE,EAAAA,EAAAA,KAAawnE,IAChC,IAAKnzD,EAAIzK,QACP,OAEF,MAAM,MAAEC,EAAK,OAAEK,GAAWmK,EAAIzK,QAAQ2S,wBACtCwpD,EAAU,CACRoB,UAAW,mBACXC,UAAW,CACTv9D,QACAK,SACAu9D,aAAa,EACbC,iBAAkBF,OAGrB,CAACzB,EAAW1xD,IAET6xD,GAAelmE,EAAAA,EAAAA,KAAY,KAC1BqU,EAAIzK,UAGTm8D,EAAU,CACRoB,UAAW,oBACXC,UAAW,CACTlrD,KAAM,EACNsH,MAAO,EACPC,IAAK,EACLC,OAAQ,KAIZqiD,EAAU,CACRoB,UAAW,4BACXC,UAAW,CACTlrD,KAAM,EACNsH,MAAO,EACPC,IAAKpF,EAAe6gD,GAAiC,EACrDx7C,OAAQ,QAGX,CAACqiD,EAAW1nD,EAAchK,IAEvB8xD,GAAYnmE,EAAAA,EAAAA,KAAY,KAC5B+lE,EAAU,CACRoB,UAAW,gBACXC,UAAW,CACTO,cAAc/K,EAAAA,GAAAA,UAGjB,CAACmJ,IAEE6B,GAAkB5nE,EAAAA,EAAAA,KAAakG,IACnC6/D,EAAU,CACRoB,UAAW,mBACXC,UAAWlhE,MAEZ,CAAC6/D,IAEE8B,GAAgB7nE,EAAAA,EAAAA,KAAakvB,IACjC,GAAI23C,EAAgBj9D,QAClB,OAEF,MAAMo9D,EAAgB3yD,EAAIzK,SAASo9D,cAGnC,GAAIA,IAFiB93C,EAAM7rB,OAM3B,IACE,MAAMyV,EAAOmuD,KAAKa,MAAM54C,EAAMpW,OACxB,UAAEquD,EAAS,UAAEC,GAActuD,EAMjC,GAJkB,kBAAdquD,GACFrmE,MAGgB,kBAAdqmE,GACErG,EAAQ,CACV,MAAMj7C,GAAMw+C,EAAAA,EAAAA,IAAavD,GACzB0F,EAAY,CAAE3gD,MAAKkiD,yBAAyB,GAC9C,CAmBF,GAhBkB,6BAAdZ,GACFlB,EAAa3tC,EAAWrN,YAGR,8BAAdk8C,GACFjB,IAGgB,sCAAdiB,GACFjB,IAGgB,0BAAdiB,GACFhB,IAGgB,iBAAdgB,EAA8B,CAChC,MAAMa,EAAiBphB,iBAAiB3kD,SAASwd,MAAMqnC,iBAAiB,qBACxE8gB,EAxMgB,4VAwMgBnQ,QAAQ,qBAAsBuQ,IAC9DrB,EAAkB/8D,QAAUuB,QAAQi8D,EAAUa,iBAChD,CAMA,GAJkB,uBAAdd,GACFz8D,aAAak8D,EAAch9D,SAGX,sBAAdu9D,EAAmC,CACrC,IAAKd,EAAc,OACnBQ,EAAgBj9D,SAAU,CAC5B,CA8BA,GA3BkB,qCAAdu9D,GACFpB,EAAU,CACRoB,UAAW,0BACXC,UAAW,CACTc,OAAQd,EAAUc,OAElBpvD,KAAM,QAKM,+BAAdquD,GACFplC,EAAiB,CACf9gC,QAAS,yDAIK,yBAAdkmE,IACF1F,EAAqB,CACnB0G,KAAMf,EAAUe,OAElB5B,EAAY,CACVhlE,KAAM,OACN4mE,KAAMf,EAAUe,QAIF,sBAAdhB,EAAmC,CACrC,MAAMiB,EAAUhB,EAAUzvD,IAC1B3M,OAAO8lD,KAAKsX,EAAS,SAAU,aACjC,CAWA,GATkB,8BAAdjB,GACFpB,EAAU,CACRoB,UAAW,yBACXC,UAAW,CACTiB,WAAW,KAKC,iCAAdlB,GACe,mCAAdA,GACc,oCAAdA,EAAiD,CACpD,MAAM,OAAEe,GAAWd,EACnBrB,EAAU,CACRoB,UAAW,wBACXC,UAAW,CACTc,SACA3Y,MAAO,gBAGb,CAEA,GAAkB,iCAAd4X,GACe,mCAAdA,GACc,uCAAdA,GACc,oCAAdA,EAAiD,CACpD,MAAM,OAAEe,GAAWd,EACnBrB,EAAU,CACRoB,UAAW,wBACXC,UAAW,CACTc,SACA3Y,MAAO,gBAGb,CA+CA,GA7CkB,gCAAd4X,GACFpB,EAAU,CACRoB,UAAW,uBACXC,UAAW,CACT7X,MAAO,iBAKK,4BAAd4X,GACFpB,EAAU,CACRoB,UAAW,mBACXC,UAAW,CACT7X,MAAO,iBAKK,qCAAd4X,GACFpB,EAAU,CACRoB,UAAW,4BACXC,UAAW,CACT7X,MAAO,iBAKK,+BAAd4X,GACFpB,EAAU,CACRoB,UAAW,qBACXC,UAAW,CACT7X,MAAO,iBAKK,8BAAd4X,GACFpB,EAAU,CACRoB,UAAW,sBACXC,UAAW,CACT1lB,OAAQ,iBAKI,6BAAdylB,EAA0C,CAC5C,MAAM,gBAAEmB,EAAe,SAAE/uD,GAAa6tD,EAEtC,IAAKkB,GAA8C,iBAApBA,EAO7B,YANAvC,EAAU,CACRoB,UAAW,sBACXC,UAAW,CACT7X,MAAO,6BAMb,GAAIh2C,EACF,IACEgvD,OAAOhvD,EACT,CAAE,MAAOtM,GAOP,YANA84D,EAAU,CACRoB,UAAW,sBACXC,UAAW,CACT7X,MAAO,qBAIb,CAGF,IAAKuR,EAOH,YANAiF,EAAU,CACRoB,UAAW,sBACXC,UAAW,CACT7X,MAAO,mBAMbkX,EAAyB,CACvBrC,WAAWC,EAAAA,EAAAA,IAAavD,GACxB0H,cAAeF,EACf/uD,SAAUmM,OAAOnM,GACjBw5C,MAAO+N,EAAO/N,OAElB,CAEA,GAAkB,uBAAdoU,EAAoC,CACtC,MAAM,OAAEsB,GAAWrB,EACbsB,GAASx5B,EAAAA,EAAAA,MAAYoB,WAAWq4B,cAAgBC,EAAAA,IAChDC,EAAezB,EAAU0B,KAAO,EAElCL,GAAUI,GAAgBH,GAC5B3mC,EAAiB,CACf9gC,QAAS,CACP4kB,IAAK,0BAGT6gD,EAAsB,CAAEqC,oBAAoB,KAE5ChnC,EAAiB,CACf9gC,QAAS,CACP4kB,IAAK,wBAIb,CAEAygD,EAAQxtD,EACV,CAAE,MAAOhS,GACP,IAED,CACDu/D,EAAcN,EAAWO,EAASsB,EAAiB9G,EACnDqF,EAAWF,EAAcC,EAAcplE,EAAQw3B,EAAWrN,WAC1D5W,IAyCF,OAtCA1J,EAAAA,EAAAA,KAAU,KACR,MAAM,MAAEd,EAAK,OAAEK,EAAM,WAAE+gB,GAAeqN,EAClCwuC,EAAiBl9D,SAAWk9D,EAAiBl9D,QAAQC,QAAUA,GAC9Di9D,EAAiBl9D,QAAQM,SAAWA,IAAW48D,EAAiBl9D,QAAQqhB,aAC7E67C,EAAiBl9D,QAAU,CAAEC,QAAOK,SAAQ+gB,cAC5Cg7C,EAAah7C,MACZ,CAACg7C,EAAcC,EAAc5tC,KAEhC3tB,EAAAA,EAAAA,KAAU,KACHm2D,GAAQkI,eAAennE,SACbi/D,EAAOkI,cACfnxD,SAASqX,IACd62C,EAAU72C,MAGZ0yC,EAAa,CACX/7C,KAAKw+C,EAAAA,EAAAA,IAAavD,GAClB+D,OAAQ,CACNmE,cAAe,SAGlB,CAACjD,EAAWjF,KAEfn2D,EAAAA,EAAAA,KAAU,KACRK,OAAOmL,iBAAiB,UAAW0xD,GAC5B,IAAM78D,OAAOoL,oBAAoB,UAAWyxD,KAClD,CAACA,EAAexzD,KAEnB1J,EAAAA,EAAAA,KAAU,KACJoB,GAAUsI,EAAIzK,SAASo9D,eACzBf,IACAC,IACAW,EAAgBj9D,SAAU,GAE1Bk9D,EAAiBl9D,aAAU7G,IAE5B,CAACgJ,EAAQsS,EAAc4nD,EAAcC,EAAc7xD,IAE/C,CACL0xD,YAAWC,wBAAuBF,cAAaG,eAAcC,eAAcC,cE7MzEC,CAAeR,GAAU75D,GAAQsS,GAAcwnD,IA0SnD,SAAqB32C,GACnB,MAAM,UAAEi4C,EAAS,UAAEC,GAAcl4C,EAmBjC,GAjBkB,+BAAdi4C,KACE8B,EAAAA,EAAAA,MACFrN,EAAuB,CAAEQ,MAAO,eAEhC2J,GAAU,CACRoB,UAAW,oBACXC,UAAW,CACT7X,MAAO,kBAMG,4BAAd4X,GACF+B,KAGgB,yBAAd/B,EAAsC,CACxC,MAAMiB,EAAUe,EAAAA,IAAkB/B,EAAUgC,UAC5C5H,EAAiB,CAAE7pD,IAAKywD,EAASiB,kBAAmBjC,EAAUkC,gBAC9DjI,GACF,CAcA,GAZkB,8BAAd8F,GACFxC,GAAoB,CAAEX,oBAAqBoD,EAAUmC,aAGrC,kCAAdpC,GACFxC,GAAoB,CAAE6E,wBAAyBpC,EAAUmC,aAGzC,iCAAdpC,GACFhC,IAA4BsE,EAAAA,GAAAA,IAAiBrC,EAAUn5D,OAASm5D,EAAUn5D,WAAQlL,GAGlE,6BAAdokE,EAA0C,CAC5C,MAAMthD,EAAMuhD,EAAUsC,UACtBlE,GAAwB4B,EAAUn5D,QAAU4X,EAAMi/C,GAAYj/C,QAAO9iB,GACvE,CAeA,GAbkB,iCAAdokE,GACFlE,GAAkBmE,EAAUn5D,OAGZ,sBAAdk5D,IACF9F,IACAC,EAAgB,CACdnS,IAAKA,EACLh6C,WAAYA,GACZ2D,KAAMsuD,EAAUtuD,QAIF,8BAAdquD,EAA2C,CAC7C,MAAMl5D,EAAQm5D,EAAUn5D,MAClB07D,EAAYvC,EAAUwC,WAC5BzH,EAAc,CACZ3iD,UAAW4nD,EAAUmC,YAAcp+D,QAAQi8D,EAAUlyD,MAAM20D,OAAOhoE,QAClE+X,SAAUwtD,EAAU0C,UACpB50D,KAAMkyD,EAAUlyD,KAChBjH,QACA07D,YACAI,kBAAmB3C,EAAU4C,qBAEjC,CAEA,GAAkB,mCAAd7C,EAAgD,CAClD,MAAMl5D,EAAQm5D,EAAUn5D,MAClB07D,EAAYvC,EAAUwC,WAC5BvH,EAAmB,CACjB7iD,UAAW4nD,EAAUmC,YAAcp+D,QAAQi8D,EAAUlyD,MAAM20D,OAAOhoE,QAClE+X,SAAUwtD,EAAU0C,UACpB50D,KAAMkyD,EAAUlyD,KAChBjH,QACA07D,YACAI,kBAAmB3C,EAAU4C,oBAC7BpqD,SAAUwnD,EAAUxnD,UAExB,CAMA,GAJkB,mCAAdunD,GACFxC,GAAoB,CAAEsF,sBAAsB,IAG5B,uBAAd9C,EAAoC,CACtC,GAAI3E,IAAoB4E,EAAUnmE,QAAQ4oE,OAAOhoE,SAAWulE,EAAU8C,SAASroE,QAC1EulE,EAAU8C,QAAQroE,OAAS,GAAK6gE,GAAqBE,IACrDM,GAAiB52C,KAAKC,MAEzB,YADA49C,QAAoBpnE,GAItB0/D,EAAmB2E,GACnBjE,IACF,CAEA,GAAkB,gCAAdgE,EAA6C,CAC/C,MAAMrpC,EAASspC,EAAUgD,YAAYv2D,IAAIw2D,EAAAA,IAAsBvsC,OAAO3yB,SAChEm/D,GAAcxsC,GAAQj8B,OAE5B6/D,EAAgB,CACd3O,MAAO5D,EAAKjvD,GACZskC,MAAO4iC,EAAU5iC,MACjB1G,SACAwsC,eAGFjJ,GACF,CAEA,GAAkB,0BAAd8F,EAAuC,CACzC,GAAI3E,GAAmBI,IAA2BM,GAAiB52C,KAAKC,MAEtE,YADAg+C,KAIF5H,IAAqB,GACrBQ,IACF,CAEA,GAAkB,iCAAdgE,EAA8C,CAChD,GAAI3E,GAAmBE,GAAqBQ,GAAiB52C,KAAKC,MAEhE,YADAi+C,MAvNN5xD,iBACE,IAAKu2C,EAAK,OACV,MAAM9X,QAAiBr+B,EAAAA,GAAAA,IAAQ,yBAA0B,CACvDm2C,QAGE9X,GACF0uB,GAAU,CACRoB,UAAW,yBACXC,UAAW,CACT1lB,OAAQ,aAIdmhB,IAA4BxrB,EAC9B,CA4MIozB,GACAtH,IACF,CAEA,GAAkB,iCAAdgE,EAA8C,CAChD,MAAM,OAAEuD,EAAM,OAAE/oE,EAAQumE,OAAQyC,GAAcvD,GA5KlDxuD,eAAwC+xD,EAAmBD,EAAgBE,GACzE,MAAM7xD,QAAeC,EAAAA,GAAAA,IAAQ,4BAA6B,CACxDm2C,IAAKA,EACL0b,aAAcH,EACdE,eAGF7E,GAAU,CACRoB,UAAW,wBACXC,UAAW,CACTc,OAAQyC,KACL5xD,IAGT,CA+JI+xD,CAAyBH,EAAWD,EAAQzD,KAAKC,UAAUvlE,GAC7D,CAEA,GAAkB,kCAAdwlE,EAA+C,CACjD,GAAIrE,IAAyBI,GAAiB52C,KAAKC,MAEjD,YADAw+C,MArNNnyD,eAAuCoyD,EAAiBr5D,SAC5BqH,EAAAA,GAAAA,IAAQ,6BAA8B,CAC9Dm2C,IAAKA,EACLx3C,IAAKqzD,EACLr5D,cAaFoxD,GAAyB,CAAEprD,IAAKqzD,EAASr5D,aACzCwxD,MAVE4C,GAAU,CACRoB,UAAW,0BACXC,UAAW,CACT1lB,OAAQ,cAQhB,CAqMIupB,CAAwB7D,EAAUzvD,IAAKyvD,EAAU8D,UACnD,CAEA,GAAkB,kCAAd/D,EAA+C,CACjD,IAAKhY,IAAQiV,GAAW,OACxB,MAAM,GAAElkE,GAAOknE,EACfnF,EAA+B,CAAElP,MAAO5D,EAAIjvD,GAAI2Y,UAAW3Y,EAAIkkE,cACjE,CAEA,GAAkB,wCAAd+C,EAAqD,CACvD,IAAKhY,EAAK,OACV4S,EAA2B,CAAE5S,MAAKiV,cACpC,CAEkB,2BAAd+C,GAEApB,GAAU,CACRoB,UAAW,mBACXC,UAAW,CACTiB,UAAW/D,GACX6G,iBAAkB3G,GAClB4G,eAAgB1G,MAQN,6BAAdyC,GAC4BvuD,WAC5B,MAAMyyD,QAAwBC,EAAAA,EAAAA,OACxB,gBAAEC,EAAe,cAAEC,EAAa,YAAE/G,GAAgB4G,EAExD,IAAKG,IAAkBD,EASrB,OARAxF,GAAU,CACRoB,UAAW,qBACXC,UAAW,CACTiB,WAAW,KAGftmC,EAAiB,CAAE9gC,QAAS4yC,GAAQ,uCACpCs2B,QAAoBpnE,GAIlBuhE,GACEE,GACFuB,GAAU,CACRoB,UAAW,qBACXC,UAAW,CACTiB,UAAWl9D,QAAQu1D,GAAmB+D,aACtCgH,SAAUhH,GAAagH,SACvBC,UAAWjH,GAAaiH,UACxBC,SAAUlH,GAAakH,SACvBC,OAAQnH,GAAaoH,QACrBC,MAAOrH,GAAaqH,MACpBC,oBAAqBtH,GAAauH,SAClCC,kBAAmBxH,GAAayH,oBAIpClK,EAAwB,CAAE7S,MAAKiV,gBAGjCriC,EAAiB,CAAE9gC,QAAS4yC,GAAQ,kCACpCs2B,QAAoBpnE,KAIxBopE,GAGgB,mCAAdhF,GACFpuB,IAEJ,GArgB0E+nB,EAAQwB,IAElF33D,EAAAA,EAAAA,KAAU,KACJiP,IAAUmnD,EAA0BgF,MACvC,CAACA,GAAWhF,EAA2BnnD,MAE1CjP,EAAAA,EAAAA,KAAU,KACJiP,IAAUonD,EAA4B8E,MACzC,CAACA,GAAa9E,EAA6BpnD,KAE9C,MAAMwyD,GAAsBvvB,GAAYqlB,GAAY1iD,WAAa0iD,EAAWhtD,KAAK20D,OAAOhoE,OAAS,EAC3FwqE,GAA2BxvB,GAAYulB,GAAiB5iD,WAAa4iD,EAAgBltD,KAAK20D,OAAOhoE,OAAS,EAE1GyqE,IAAuB3/D,EAAAA,EAAAA,IAAgB,KAC3Cg4D,GAAoB,CAAET,kBAAkB,OAEpCqI,IAA0B5/D,EAAAA,EAAAA,IAAgB,KAC9Cg4D,GAAoB,CAAEsF,sBAAsB,EAAO/F,kBAAkB,IACrEj5D,YAAW,KACTo2D,MAlLiB,QAsLfmL,IAAwB7/D,EAAAA,EAAAA,IAAgB,KAC5Cg4D,GAAoB,CAAER,mBAAmB,OAGrCsI,IAAwB9/D,EAAAA,EAAAA,IAAgB,KAC5Co5D,GAAU,CACRoB,UAAW,2BAITuF,IAA6B//D,EAAAA,EAAAA,IAAgB,KACjDo5D,GAAU,CACRoB,UAAW,gCAITgD,IAAsBx9D,EAAAA,EAAAA,IAAiBggE,IAC3ClK,OAAmB1/D,GACnBqgE,KACA2C,GAAU,CACRoB,UAAW,eACXC,UAAW,CACTwF,UAAWD,QAKXE,IAA2BlgE,EAAAA,EAAAA,IAAgB,KAC/Cw9D,QAGI2C,IAAoBngE,EAAAA,EAAAA,IAAgB,KACxCw5D,SAIFx8D,EAAAA,EAAAA,IAAc,KACZsB,YAAW,KACT6hE,OA5NiB,OA8NlB,CAACnQ,IAEJ,MAAMoQ,IAAwBpgE,EAAAA,EAAAA,IAAgB,OACvCqgE,EAAAA,GAAAA,OAAuBpzD,IAC1B0H,UAIE4nD,IAA2Bv8D,EAAAA,EAAAA,IAAgB,MAC3CqgE,EAAAA,GAAAA,OAAuBpzD,IACzB2H,UAIE0rD,IAAgCtgE,EAAAA,EAAAA,IACnCI,IACK6M,IAAUosD,GAAsBj5D,OAIxCpC,EAAAA,EAAAA,KAAU,KACJ0T,IACF0uD,KACAE,IAA8B,KAE9B/D,KACA+D,IAA8B,MAE/B,CAAC5uD,KAEJ,MAAM6uD,IAA4BvgE,EAAAA,EAAAA,IAAiBi6B,IACjDm/B,GAAU,CACRoB,UAAW,qBACXC,UAAW,CACTmC,WAAY3iC,SAKlBj8B,EAAAA,EAAAA,KAAU,KACJkyC,GACFqwB,GAA0B/hE,QAAQyO,OAEnC,CAACA,GAAUijC,KAEd7W,EAAAA,GAAAA,IAAsB,EAAEmnC,MACH,cAAf5R,GACF2R,IAA0B,GAExB3R,GAAiC,cAAnB4R,GAChBD,IAA0B,KAE3B,CAAC3R,KAEJ5xD,EAAAA,EAAAA,IAAc,EAAEyjE,MACVjN,IAAuBiN,GACvBtM,GAAQqH,OAAShI,GAAsBS,IACzCmF,GAAU,CACRoB,UAAW,iBACXC,UAAW,CACTe,KAAMrH,EAAOqH,KACbzmB,OAAQkf,KAGZa,EAAqB,CACnB0G,UAAMplE,IAER8+D,OAED,CAAC1B,EAAoBS,EAAemF,GAAWjF,GAAQqH,OAE1D,MAAMkF,IAAwB1gE,EAAAA,EAAAA,IAAgB,KAC5C40D,EAAgB,CACdxO,MAAO5D,EAAKjvD,GACZotE,WAAW,IAEbjM,OAGIkJ,IAAoB59D,EAAAA,EAAAA,IAAgB,KACxCg2D,IAAqB,GACrBS,KACA2C,GAAU,CACRoB,UAAW,kBACXC,UAAW,CACT1lB,OAAQ,kBAKR6rB,IAAoB5gE,EAAAA,EAAAA,IAAgB,KACxCg1D,EAAkB,CAAE5O,MAAO5D,EAAKjvD,KAChCyiE,IAAqB,GACrBS,KACA2C,GAAU,CACRoB,UAAW,kBACXC,UAAW,CACT1lB,OAAQ,aAKRqpB,IAA2Bp+D,EAAAA,EAAAA,IAAiB6gE,IAC5CA,IACFzK,QAAyBhgE,GACzBqgE,MAGF2C,GAAU,CACRoB,UAAW,0BACXC,UAAW,CACT1lB,OAAQ,kBAKR8oB,IAA0B79D,EAAAA,EAAAA,IAAgB,KAC9Co5D,GAAU,CACRoB,UAAW,yBACXC,UAAW,CACT1lB,OAAQ,eAGZmhB,IAA2B,GAC3BO,QAGIqK,IAA0B9gE,EAAAA,EAAAA,IAAgBiM,UACzCu2C,UACgBn2C,EAAAA,GAAAA,IAAQ,uBAAwB,CAAEm2C,SAMvD4W,GAAU,CACRoB,UAAW,yBACXC,UAAW,CACT1lB,OAAQ,aAGZmhB,IAA2B,GAC3BO,MAXEoH,SAoDEkD,IAAqB/gE,EAAAA,EAAAA,IAAgB,KACpCm2D,KACLC,QAAyBhgE,GACzBqgE,MAEA5vD,EAAAA,GAAAA,GAASsvD,GAAsBnrD,IAAKmrD,GAAsBnxD,UAC1Do0D,GAAU,CACRoB,UAAW,0BACXC,UAAW,CACT1lB,OAAQ,sBAqBd/2C,EAAAA,EAAAA,KAAU,KACHoB,KACH02D,OAAmB1/D,GACnB4/D,IAAqB,GACrBE,IAA2B,GAC3BV,OAAcp/D,GACds/D,OAAmBt/D,GACnB4hE,GAAoB,CAClB6E,yBAAyB,EACzBS,sBAAsB,EACtBjG,qBAAqB,EACrBE,kBAAkB,EAClBC,mBAAmB,IAErB5B,OAED,CAACx2D,KAEJ,MAAMgtC,IAAiBpsC,EAAAA,EAAAA,IAAgB,KACrCm1D,EAAiB,CAAE5hE,GAAIivD,EAAKjvD,QAgOxBytE,IAAyBthC,EAAAA,GAAAA,GAAiB61B,GAAYj0D,OAAO,GAC7D2/D,IAA6BvhC,EAAAA,GAAAA,GAAiB61B,GAAYyH,WAAW,GACrEkE,IAA4BxhC,EAAAA,GAAAA,GAAiB61B,GAAc/2D,QAAQ+2D,EAAWtoD,WAAW,GACzFk0D,IAAwBzhC,EAAAA,GAAAA,GAAiB61B,GAAYhtD,MAAM,GAE3D64D,IAAiC1hC,EAAAA,GAAAA,GAAiB+1B,GAAiBxiD,UAAU,GAC7EouD,IAA8B3hC,EAAAA,GAAAA,GAAiB+1B,GAAiBn0D,OAAO,GACvEggE,IAAkC5hC,EAAAA,GAAAA,GAAiB+1B,GAAiBuH,WAAW,GAC/EuE,IAAiC7hC,EAAAA,GAAAA,GAAiB+1B,GAAmBj3D,QAAQi3D,EAAgBxoD,WAAW,GACxGu0D,IAA6B9hC,EAAAA,GAAAA,GAAiB+1B,GAAiBltD,MAAM,IAEpEk5D,GAA4BC,KAAiC9hE,EAAAA,EAAAA,KAAS,IACtE+hE,GAAsBC,KAA2BhiE,EAAAA,EAAAA,KAAS,IAC1DiiE,GAA2BC,KAAgCliE,EAAAA,EAAAA,KAAS,IACpEmiE,GAAsBC,KAA2BpiE,EAAAA,EAAAA,KAAS,IAC1DqiE,GAA2BC,KAAgCtiE,EAAAA,EAAAA,KAAS,IAEpEuiE,GAA+BC,KAAoCxiE,EAAAA,EAAAA,KAAS,IAE5EyiE,GAAqBC,KAA0B1iE,EAAAA,EAAAA,IAAS,IAG/D5C,EAAAA,EAAAA,IAAc,KACZsB,YAAW,KACTg7D,KACAC,OACCjF,EAAiB,EAhsBD,OAisBlB,CAAC2N,GAA2BJ,GAC7BE,GAAsBA,GACtBtM,GAAiBxiD,SAAUqmD,GAAchF,EAAgBG,EACzD8E,KAEF,MAAMgJ,GAAsD,QAAnCnB,IAA+E,WAAnCA,GAG/DoB,GAAaD,IAAoBR,IAAwBE,GAA6B,EACxFF,IAAwBE,GAA4B,EAAI,EAEtDQ,GALsBF,IAMrBZ,IAAyBE,GAA6C,WAAf,aAExDa,IAA0B5lE,EAAAA,EAAAA,MAC1B6lE,IAAwB7lE,EAAAA,EAAAA,MACxB8lE,IAA+B9lE,EAAAA,EAAAA,MAC/B+lE,IAA6B/lE,EAAAA,EAAAA,MAC7BgmE,IAAwBhmE,EAAAA,EAAAA,OAE9BkB,EAAAA,EAAAA,KAAU,KACJ0T,IAAgBtS,IAAUZ,QAAQ24D,KACpCiL,IAAiC,GAE7BU,GAAsB7lE,SACxBc,aAAa+kE,GAAsB7lE,SAGrC6lE,GAAsB7lE,QAAUqB,YAAW,KACzC8jE,IAAiC,GACjCU,GAAsB7lE,aAAU7G,IA3tBN,QA8tB5BgsE,IAAiC,GAE7BU,GAAsB7lE,UACxBc,aAAa+kE,GAAsB7lE,SACnC6lE,GAAsB7lE,aAAU7G,IAI7B,KACD0sE,GAAsB7lE,SACxBc,aAAa+kE,GAAsB7lE,YAGtC,CAACyU,GAActS,GAAQ+3D,MAE1Bn5D,EAAAA,EAAAA,KAAU,KACJ0kE,GAAwBzlE,SAASc,aAAa2kE,GAAwBzlE,SACtE0lE,GAAsB1lE,SAASc,aAAa4kE,GAAsB1lE,SAElEwiE,KACFkD,GAAsB1lE,QAAUqB,YAAW,KACzC0jE,IAAwB,KACvB,IACHJ,IAAwB,GACxBc,GAAwBzlE,QAAUqB,YAAW,KAC3CojE,IAA8B,KAC7BlP,KAGAiN,KACHuC,IAAwB,GACxBU,GAAwBzlE,QAAUqB,YAAW,KAC3CsjE,IAAwB,KACvBpP,OAEJ,CAACiN,MAEJzhE,EAAAA,EAAAA,KAAU,KACJ4kE,GAA6B3lE,SAASc,aAAa6kE,GAA6B3lE,SAChF4lE,GAA2B5lE,SAASc,aAAa8kE,GAA2B5lE,SAE5EyiE,KACFmD,GAA2B5lE,QAAUqB,YAAW,KAC9C4jE,IAA6B,KAC5B,IACHJ,IAA6B,GAC7Bc,GAA6B3lE,QAAUqB,YAAW,KAChDojE,IAA8B,KAC7BlP,KAGAkN,KACHwC,IAA6B,GAC7BU,GAA6B3lE,QAAUqB,YAAW,KAChDwjE,IAA6B,KAC5BtP,OAEJ,CAACkN,MAEJ1hE,EAAAA,EAAAA,KAAU,KACHikE,IAA8BF,IACjCL,IAA8B,KAE/B,CAACA,GAA+BO,GAA2BF,KAE9D,MAAMgB,IAAahwB,EAAAA,GAAAA,GACjB,qBAAqBqkB,IAAmB,4BACxC9C,GAAkB,yBAGd0O,IAAkBhjE,EAAAA,EAAAA,IAAgB,KAClCq3D,GACF+B,GAAU,CACRoB,UAAW,yBAGb+B,KACAlD,IAAsB,GACtBpK,EAAuB,CAAEQ,MAAO,cAChCP,QAIE+T,IAAsBjjE,EAAAA,EAAAA,IAAgB,KAC1Cu8D,QAGI2G,IAAwBljE,EAAAA,EAAAA,IAAiBM,IAC7Ck0D,EAAyBl0D,MAGrB6iE,IAAgBv5D,EAAAA,GAAAA,GDx5B0lC,WC05B9mCytD,ID15B6pC,YC45BzpC+L,GAAoBjB,GAAgChL,GACtDjwB,GAAQmwB,GAAsB,OAAS,SAErCgM,GAAmBtM,IAAwB95D,QA8GjD,OA5GAe,EAAAA,EAAAA,KAAU,KAERskE,GADcvL,IAAwB95D,SAASoT,aAAe,KAE7D,CAAC+yD,GAAmBC,MA0GrB/vE,EAAAA,GAAAA,IAAA,OACEoU,IAAKqV,GACLvpB,WAAWoW,EAAAA,GAAAA,GDhhCM,YCkhCdqD,IAAYgE,GACbsjD,GDnhC4D,YCohC5D9gE,SAAA,CAEDie,KAAgB4qD,EAAAA,EAAAA,QAlFjBhpE,EAAAA,GAAAA,IAAA,OAAKE,UDp8BouC,WCo8BtsCC,SAAA,EACjCH,EAAAA,GAAAA,IAAA,OAAKoU,IAAKovD,GAAiBtjE,UAAWyd,GAAqBzP,QAASwhE,GAAgBvvE,SAAA,EAClFC,EAAAA,GAAAA,GAAA,OAAKF,UDt8BirC,WCs8B7oCC,UACvCC,EAAAA,GAAAA,GAAA,OAAKF,UAAW2vE,QA1BtBzvE,EAAAA,GAAAA,GAAA,QACEF,UD96B23C,WC+6B33C+F,MACE,UAAU8oE,QACX5uE,UAEDC,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CACTC,UAbFyxC,GAAsC,EACnC9K,GAAsB,EAAI,EAa3Br2D,KAAK,YAAWvN,UAEhBC,EAAAA,GAAAA,GAAA,OACEgU,IAAKqvD,GACLvjE,UDz7Bs5C,WCy7Bl3CC,SAEnC2vE,aAgBL9vE,EAAAA,GAAAA,IAAA,OAAKE,UD38BmxC,WC28B/uCC,SAAA,EACvCC,EAAAA,GAAAA,GAAA,OACEF,WAAWoW,EAAAA,GAAAA,GACTqH,GD98B8zC,YCi9Bh0CisB,SAAU,EACVC,KAAK,SACL,aAAY38B,GAAK,kBACjBgB,QAASyhE,GAAoBxvE,UAE7BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CACHjF,KAAK,OACLxN,UAAWyd,QAGfvd,EAAAA,GAAAA,GAAA,OACEF,WAAWoW,EAAAA,GAAAA,GACTqH,GD79Bi1C,YCg+Bn1CisB,SAAU,EACVC,KAAK,SACL,gBAAc,OACd,aAAY38B,GAAK,kBACjBgB,QAAS0hE,GAAsBzvE,UAE/BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CACHjF,KAAK,OACLxN,WAAWoW,EAAAA,GAAAA,GACTqH,GDz+BssC,uBCuhC9sC69C,KAvBCwI,IAIH5jE,EAAAA,GAAAA,GAAA,OACEF,WAAWoW,EAAAA,GAAAA,GAAeqH,GAA2Bi/B,GAAYj/B,IACjEqyD,QAAQ,cAAa7vE,UAErBC,EAAAA,GAAAA,GAAA,QAAMF,UDxgCmH,WCwgChF83D,EAAGgM,OArBlD,WACE,MAAM9jE,GAAYoW,EAAAA,GAAAA,GAAeqH,GDp/B+J,WCo/BrGi/B,GAAYj/B,IACvG,OACE3d,EAAAA,GAAAA,IAAA,OAAKE,UAAWA,EAAUC,SAAA,EACxBC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,MAChBvd,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,MAChBvd,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,MAChBvd,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,OAGtB,CAIWsyD,KAuBP7vE,EAAAA,GAAAA,GAAA,UACEF,WAAWoW,EAAAA,GAAAA,GDzhCqP,WC2hC9P63D,ID3hC+S,YC4hC9SvxB,GAAYj/B,IAEf1X,MAAOwpE,GACP1rE,IAAK2T,GACLpK,MAAO,GAAG4hD,GAAKkK,oBACf8W,QAAS/Q,GACTgR,MAAM,oDACNC,iBAAe,EACfh8D,IAAKuxD,MAELnK,KACAx7D,EAAAA,GAAAA,IAAA,OACEiG,MAAO,qBAAqB88D,MAC5B7iE,WAAWoW,EAAAA,GAAAA,GDziCsf,WC2iC5d,SAAnCw3D,ID3iCuoB,WC4iCpmB,UAAnCA,ID5iC2rB,WC6iCxpB,QAAnCA,ID7iC+uB,WC8iC5sB,WAAnCA,ID9iCmyB,WC+iCjxB,eAAlBqB,ID/iC41B,WCgjC90B,IAAdD,IDhjCwiB,WCijC1hB,IAAdA,IDjjCmlB,YCkjCnlB/uE,SAAA,EAEFH,EAAAA,GAAAA,IAAC+N,EAAAA,EAAM,CACL7N,WAAWoW,EAAAA,GAAAA,GDrjCiX,WCujC1Xq4D,KAA8BJ,IAA6B5wD,GAC3D4wD,IAA6B5wD,IAE/B6mC,OAAK,EACLv+C,MAAO,qBAAqB8nE,cAAuCC,KACnE1tD,UAAW2tD,KAAmC9L,GAAiB2H,kBAC/Dr6B,eAAgB0yB,GAAiB2H,kBACjC57D,QAASu+D,GACTnsE,KAAK,UAASH,SAAA,EAEZgiE,GAAiB2H,mBAAqBoE,GACvC/L,GAAiB2H,oBACb1pE,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,CAACzoB,UAAWyd,GAA0B3P,MAAM,aAE3DhO,EAAAA,GAAAA,IAAC+N,EAAAA,EAAM,CACL7N,WAAWoW,EAAAA,GAAAA,GDtkCka,WCwkC3am4D,KAAyBJ,IAAwB1wD,GACjD0wD,IAAwB1wD,IAE1B6mC,OAAK,EACLv+C,MAAO,qBAAqBynE,cAAkCC,KAC9DrtD,UAAWstD,KAA8B3L,GAAY6H,kBACrDr6B,eAAgBwyB,GAAY6H,kBAC5B57D,QAASs+D,GACTlsE,KAAK,UAASH,SAAA,EAEZ8hE,GAAY6H,mBAAqB+D,GAClC5L,GAAY6H,oBAAqB1pE,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,CAACzoB,UAAWyd,GAA0B3P,MAAM,gBAI3Fu0D,IACCviE,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJzB,OAAQZ,QAAQq3D,GAChBj1D,MAAOi1D,EAAgBj1D,OAlgCpB,IAmgCHtB,QAAS4gE,GACTyD,gBAAc,EACdnwE,WACEoW,EAAAA,GAAAA,GD9lC0hC,YC8lCt/BisD,EAAgBj1D,OAAOs8D,OAAOhoE,QD9lC6gC,YC+lChlCzB,SAAA,CAEAoiE,EAAgBvhE,SACjBZ,EAAAA,GAAAA,GAAA,OAAKF,UAAU,sBAAqBC,SACjCoiE,EAAgB0H,QAAQr2D,KAAKo5B,IAC5B5sC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAEL7N,UAAU,wBACV8N,MAAuB,gBAAhBg/B,EAAO1rC,KAAyB,SAAW,UAClD2M,QAAM,EACN3N,KAAK,UAEL4N,QAASA,IAAMg8D,GAAoBl9B,EAAO/sC,IAAIE,SAE7C6sC,EAAO/3B,MAAQ2+B,GAAQwrB,GAAoBpyB,EAAO1rC,QAR9C0rC,EAAO/sC,IAAM+sC,EAAO1rC,cAenClB,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQ22D,EACRz2D,QAASs+D,GACTh9D,MAAOsmC,GAAQ,4BACf3+B,KAAM2+B,GAAQ,mCACdlQ,eAAgB4pC,GAChB7pC,aAAcmQ,GAAQ,mBAExBxzC,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQ62D,GACR32D,QAASu+D,GACTj9D,MAAOsmC,GAAQ,6BACf3+B,KAAM2+B,GAAQ,uBACdlQ,eAAgB8pC,GAChB/pC,aAAcmQ,GAAQ,kCAExBxzC,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQZ,QAAQ23D,IAChBv1D,MAAOsmC,GAAQ,wBACf1rB,UAAWhb,GAAK,6BAA8B,CAC5CgiD,IAAKA,GAAKkK,UACVkX,SAAUzN,IAAuBnxD,UAChC,CACD8oC,WAAW,EACXyW,cAAc,IAEhBxtB,aAAcmQ,GAAQ,yBACtB5nC,QAAS8+D,GACTpnC,eAAgB+pC,MAGlBrtE,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQm4D,GACRj4D,QAASqgE,GACT/+D,MAAOsmC,GAAQ,+BACf3+B,KAAM2+B,GAAQ,yBACdlQ,eAAgB4oC,GAChB3oC,sBAAoB,EACpBF,aAAcmQ,GAAQ,iCAExBxzC,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQo4D,GACRl4D,QAASugE,GACTj/D,MAAOsmC,GAAQ,0BACf1rB,WAAWiM,EAAAA,GAAAA,GAAWyf,GAAQ,oBAAqBsb,GAAKkK,WAAY,CAAC,oBACrE11B,eAAgB0pC,GAChBzpC,sBAAoB,WElqC5B,GAA6R,WAA7R,GAA4U,WAA5U,GAAkY,WAAlY,GAA4b,WAA5b,GAAkkB,WAAlkB,GAAuoB,WAAvoB,GAAi0B,WAAj0B,GAAoiC,WAApiC,GAA6qC,WAA7qC,GAA4tC,WAA5tC,GAA8uC,WCsExuC4sC,GAAuB,CAAE3mE,MAAO,IAAKK,OAAQ,IAC7CumE,GAA+B,CAAE5mE,MAAO,IAAKK,OAAQ,KACrDwmE,GAA+B,CAAE7mE,MAAO,IAAKK,OAAQ,KAuoB3D,IAAelL,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAU6mC,YACT,MAAMi3B,EAAej3B,GAAOk3B,iBAAkBC,EAAAA,EAAAA,KAAah+D,EAAQ6mC,EAAMk3B,sBAAmB18D,GACpFgwD,MAAO4M,GAAgBH,GAAgB,CAAC,EAE1CI,EAAYD,EAAcj+D,EAAOm+D,WAAWC,KAAKH,QAAe58D,EAChEosD,EAAMwQ,GAAcnvB,EAAAA,EAAAA,KAAW9uC,EAAQi+D,QAAe58D,EACtDuM,GAAOC,EAAAA,EAAAA,KAAkB7N,GACzBi7D,GAAQuD,EAAAA,EAAAA,KAAYx+D,IACpB,uBAAEivE,EAAsB,mBAAEC,IAAuBC,EAAAA,GAAAA,GAAqBnvE,GAE5E,MAAO,CACLk+D,YACAzQ,MACA7/C,OACAqtD,QACAmU,eAAgBH,EAChBI,WAAYH,KAjBE7hE,EAroB2BiiE,EAC7CzoC,QACAj5B,OACA6/C,MACAyQ,YACAjD,QACAoU,aACAD,qBAEA,MAAM,kBACJzP,EAAiB,iBACjBxF,EAAgB,eAChBoV,EAAc,gBACd1P,EAAe,SACf12B,EAAQ,uBACR+wB,EAAsB,cACtBsV,EAAa,aACbtP,EAAY,gBACZuP,EAAe,iBACfC,EAAgB,4BAChBC,EAA2B,wBAC3BC,IACEllE,EAAAA,EAAAA,OAEGmlE,EAAuBC,IAAyBj3D,EAAAA,EAAAA,IAAUw2D,GAAcN,IAE/E,SAASgB,IACP,MAA0B,eAAtBlpC,GAAOgzB,WAAoCjjC,EAAAA,EAAWhuB,MAChC,cAAtBi+B,GAAOgzB,WAAmCgW,IACvCf,EACT,CAMA,MAAM,cACJhV,EAAa,gBAAEiE,EAAe,kBAAEiS,EAAiB,YAAEC,EAAW,oBAAEC,GAC9DrpC,GAAS,CAAC,EACRi3B,EAAeC,EAAkBjE,IAAgBiE,QAAmB18D,GACpE,oBACJihE,EAAmB,YAAE0B,EAAW,gBAAE3B,EAAe,wBAAEyF,GACjDhK,GAAgB,CAAC,EAEfqS,GAAO1pE,EAAAA,EAAAA,KAAQ,IACZupE,GAAmB79D,KAAKgS,IAC7B,MAAMi7C,EAAStF,EAAe31C,GAC9B,MAAO,CACLspC,KAAKjgB,EAAAA,EAAAA,MAAYpI,MAAMC,KAAK+5B,EAAO/N,OACnC+N,SACA/0D,OAAQZ,QAAQq0D,GAAiB35C,KAAQw+C,EAAAA,GAAAA,IAAa7E,SAGzD,CAACkS,EAAmBlW,EAAegE,KAEhC,SAAE//D,IAAaC,EAAAA,EAAAA,MACfqM,EAASw8B,GAAOunB,cAAe,EAC/BgiB,EAAyC,cAAtBvpC,GAAOgzB,WAC1BE,EAAyC,cAAtBlzB,GAAOgzB,WAC1BwW,EAAqC,eAAtBxpC,GAAOgzB,WAEtByW,GAAuBvyE,EACvB4U,GAAM5K,EAAAA,EAAAA,MACNguB,GAAYhuB,EAAAA,EAAAA,MACZwoE,GAAUxoE,EAAAA,EAAAA,MAEVyoE,GAAoBvlE,EAAAA,EAAAA,IAAgB,IAAM0H,EAAIzK,UAE9CuoE,IAAiBxlE,EAAAA,EAAAA,IACrB,IAAM0H,EAAIzK,UAGNwoE,IAAiBzlE,EAAAA,EAAAA,IACrB,IAAMslE,EAAQroE,WAGV,kBACJyoE,GAAiB,kBACjBC,GAAiB,kBACjBC,GAAiB,uBACjBC,GAAsB,sBACtBC,KACEC,EAAAA,GAAAA,GAAuBr+D,IAEpBs+D,GAAmBC,KAAwBrmE,EAAAA,EAAAA,KAAS,GAErDsmE,GAAgBp7C,EAAU7tB,QAC1BkpE,GAAmBz+D,EAAIzK,SAE7Be,EAAAA,EAAAA,KAAU,KACRioE,GAAqBznE,QAAQ6mE,GAAuBa,IAAiBC,KAAqBf,MACzF,CAACC,EAAqBa,GAAeC,GAAkBf,KAE1DpnE,EAAAA,EAAAA,KAAU,KACRixD,EAAuB,CAAEQ,MAAO,gBAC/B,CAAC4V,IAEJ,MAAM,WACJe,GAAU,WACV9nD,GACA/kB,MAAO8sE,GAAc,KACrBzyE,GAAI,SACJqf,IZpIW,SACbvL,EACA4+D,EACAC,GAAyB,EACzBC,EACA90D,GAAwB,EACxB+0D,EAAoB,CAAEvpE,MAAO,EAAGK,OAAQ,GACxC4mE,GAEA,MAAOuC,EAAwBC,IAA6B/mE,EAAAA,EAAAA,IAA4BukE,IACjFyC,EAAoBC,IAAyBjnE,EAAAA,EAAAA,SAA2BxJ,IAExE0wE,EAAoCC,IAAsCn5D,EAAAA,EAAAA,IAAU,CAAEqC,EAAG,EAAGsG,EAAG,KAC/FywD,EAAgCC,IAAkCr5D,EAAAA,EAAAA,IAAU,CAAE1Q,MAAO,EAAGK,OAAQ,KAChG2pE,EAAwBC,IAA0Bv5D,EAAAA,EAAAA,IAAU,CAAEqC,EAAG,EAAGsG,EAAG,IAExE6wD,EAAkCN,IAClCO,EAAsBH,IAEtB1hD,EAAU9d,EAAIzK,QACdqqE,EAAoBhB,EAAqBrpE,SAExCsqE,EAAaC,IAAkB70E,EAAAA,EAAAA,IAAQ,IACvC80E,EAAiBC,IAAsB/0E,EAAAA,EAAAA,IAAQ,IAC/CyzE,EAAYuB,EAAeC,IAAgBj1E,EAAAA,EAAAA,IAAQ,IACnD2rB,EAAYupD,EAAeC,IAAgBn1E,EAAAA,EAAAA,IAAQ,IACnDo1E,EAAmBC,EAAqBC,IAAsBt1E,EAAAA,EAAAA,IAAQ,IAEtEu1E,EAAiBC,IAAsBvoE,EAAAA,EAAAA,SAAuCxJ,GAErF,SAASgyE,IACP,MAAO,CACLlrE,MAAOmB,OAAOgqE,WACd9qE,OAAQc,OAAOiqE,YAEnB,CAEA,MAAMC,GAAwBvoE,EAAAA,EAAAA,IAAiBiT,IACxCvB,GAAci1D,EAA0B,CAAE12D,EAAGgD,EAAShD,EAAGsG,EAAGtD,EAASsD,OAGtEiyD,GAAoBxoE,EAAAA,EAAAA,IAAgB,IACjC0R,EAAe+8C,GAAsBiY,IAGxC+B,GAAsBzoE,EAAAA,EAAAA,IAAgB,KAC1C,IAAK4mE,EAAoB,OACzB,MAAM,MAAE1pE,EAAK,OAAEK,GAAWqpE,EAEpB8B,EAAcN,IAOpB,MAAO,CAAEn4D,GANay4D,EAAYxrE,MAGCA,GAAS,EAGrBqZ,GALAmyD,EAAYnrE,OAGCA,GAAU,OAKhDS,EAAAA,EAAAA,KAAU,KACJwnB,GAASkiD,MACZ,CAACliD,KAEJxnB,EAAAA,EAAAA,KAAU,KACR,IAAKupE,GAAeX,EAAoB,CACtC,MAAM+B,EAAmBF,IACzB,IAAKE,EAAkB,OAEvBJ,EAAsBI,GACtBnB,GACF,IACC,CAACZ,EAAoBW,EAAa/hD,IAErC,MAAMojD,GAAkB5oE,EAAAA,EAAAA,IAAiBuiB,IACvC,GAAIA,aAAiBsmD,YAA+B,IAAjBtmD,EAAM+d,OACvC,OAIF,GADsB/d,EAAMhiB,OACV8f,QAAQ,cAAgBmF,EACxC,OAEF,MAAM,EAAEvV,EAAC,EAAEsG,IAAMvG,EAAAA,GAAAA,GAAmBuS,IAE9B,KAAEhT,EAAI,IAAEuH,GAAQ0O,EAAQ5V,wBAC9Bm3D,EAAmC,CAAE92D,EAAGV,EAAMgH,EAAGO,IACjDqwD,EAAuB,CAAEl3D,IAAGsG,MAE5BoxD,OAeImB,GAAoB9oE,EAAAA,EAAAA,IAAiBuiB,IACzC,GAAIA,aAAiBsmD,YAA+B,IAAjBtmD,EAAM+d,OACvC,OAGF,MAAMyoC,EAAgBxmD,EAAMhiB,OAC5B,IAAKilB,IAAYujD,EACf,OAEF,MAAMC,EArBR,SAAmCD,GACjC,MAAM1oD,EAAWoF,GAAqBsjD,EAAc1oD,QAAQoF,GAE5D,GAAKpF,EAAQ4oD,EAAAA,KACb,IAAK,MAAMxjD,KAAY8oC,GACrB,GAAIluC,EAAQ,IAAIoF,KACd,OAAOioC,GAAyBjoC,EAItC,CAWuByjD,CAA0BH,GAE/C,QAAqB3yE,IAAjB4yE,EAA4B,OAChCb,EAAmBa,GAEnB,MAAM,EAAE/4D,EAAC,EAAEsG,IAAMvG,EAAAA,GAAAA,GAAmBuS,IAE9B,KACJhT,EAAI,MAAEsH,EAAK,IAAEC,EAAG,OAAEC,GAChByO,EAAQ5V,wBACZm3D,EAAmC,CAAE92D,EAAGV,EAAMgH,EAAGO,IACjDmwD,EAA+B,CAAE/pE,MAAO2Z,EAAQtH,EAAMhS,OAAQwZ,EAASD,IACvEqwD,EAAuB,CAAEl3D,IAAGsG,MAE5BsxD,OAGIsB,GAAoBnpE,EAAAA,EAAAA,IAAgB,KACxC4nE,OAGIwB,GAAsBppE,EAAAA,EAAAA,IAAgB,KAC1C8nE,QAGF9pE,EAAAA,EAAAA,KAAU,KACHuoE,GACHqB,MAED,CAACrB,IAEJ,MAAM8C,EAA8BA,CAACp5D,EAAWsG,KAC9C,MAAMmyD,EAAcN,IAEdkB,EAAmBZ,EAAYxrE,MAC/BqsE,EAAoBb,EAAYnrE,OAEhCisE,EAAiB5C,EAAoB1pE,MACrCusE,EAAkB7C,EAAoBrpE,OAE5C,IAAImsE,EAAOz5D,EACP05D,EAAOpzD,EAOX,OALImzD,EAAO,IAAGA,EAAO,GACjBC,EAAO,IAAGA,EAAO,GACjBD,EAAOF,EAAiBF,IAAkBI,EAAOJ,EAAmBE,GACpEG,EAAOF,EAAkBF,IAAmBI,EAAOJ,EAAoBE,GAEpE,CAAEx5D,EAAGy5D,EAAMnzD,EAAGozD,IAGjBC,GAA6B5pE,EAAAA,EAAAA,IAAgB,KACjD,GAAI0R,EAAc,OAClB,MAAMuB,EAAYw0D,GAAoBtD,EAAyCuC,EAAxB+B,IACvD,IAAK7B,IAAuB3zD,EAAU,OACtC,MAAM42D,EAAcR,EAA4Bp2D,EAAShD,EAAGgD,EAASsD,GACrEgyD,EAAsBsB,MAGlBC,GAA0B9pE,EAAAA,EAAAA,IAAiB+pE,IAC/C,MAAMC,EAAUD,EAEVrB,EAAcN,IAEd6B,EAAgBzD,EAAatpE,MAC7BgtE,EAAiB1D,EAAajpE,OAIpC,OAHAysE,EAAQ9sE,MAAQyJ,KAAK4a,IAAImnD,EAAYxrE,MAAOyJ,KAAKma,IAAImpD,EAAeD,EAAQ9sE,QAC5E8sE,EAAQzsE,OAASoJ,KAAK4a,IAAImnD,EAAYnrE,OAAQoJ,KAAKma,IAAIopD,EAAgBF,EAAQzsE,SAExEysE,MAGThsE,EAAAA,EAAAA,KAAU,KACR,GAAIsgB,EAAY,OAChB,MAAM0rD,EAAUF,EAAwB,CAAE5sE,MAAOspE,EAAatpE,MAAOK,OAAQipE,EAAajpE,SACtFysE,GAASnD,EAAsBmD,KAClC,CAACxD,EAAcloD,IAElB,MAAM6rD,GAAyBnqE,EAAAA,EAAAA,IAAgB,KAC7C,IAAK4mE,GAAsBtoD,EAAY,OACvC,MAAM0rD,EAAUF,EAAwBlD,GACpCoD,GAASnD,EAAsBmD,OAGrChsE,EAAAA,EAAAA,KAAU,KACJsgB,GACJsrD,MACC,CAAChD,EAAoBtoD,KAExBtgB,EAAAA,EAAAA,KAAU,KACR,MAAMosE,EAAqBA,KACzBpC,IACAmC,IACAP,IACIpb,KACFzwD,aAAaywD,IACbA,QAAgBp4D,GAElBo4D,GAAgBnwD,OAAOC,YAAW,KAChCkwD,QAAgBp4D,EAChB6xE,MACC,MAKL,OAFA5pE,OAAOmL,iBAAiB,SAAU4gE,GAE3B,KACLrsE,aAAaywD,IACbA,QAAgBp4D,EAChBiI,OAAOoL,oBAAoB,SAAU2gE,MAEtC,CAACR,IAEJ,MAAMS,GAAarqE,EAAAA,EAAAA,IAAiBuiB,IAClC,IAAK6jD,IAAe5gD,EAAS,OAC7B,MAAM,EAAEvV,EAAC,EAAEsG,IAAMvG,EAAAA,GAAAA,GAAmBuS,GAE9B0B,EAAUhU,EAAIo3D,EAAoBp3D,EAClCiU,EAAU3N,EAAI8wD,EAAoB9wD,EAElCmzD,EAAOtC,EAAgCn3D,EAAIgU,EAC3C0lD,EAAOvC,EAAgC7wD,EAAI2N,EAE7C0iD,GAAoBD,EAA0B0C,EAA4BK,EAAMC,OAGhFrgE,GAAetJ,EAAAA,EAAAA,IAAiBuiB,IACpC,IAAKjE,IAAekH,QAA+BpvB,IAApB8xE,EAA+B,OAC9D,MAAM,EAAEj4D,EAAC,EAAEsG,IAAMvG,EAAAA,GAAAA,GAAmBuS,GAC9B+nD,EAAuBtD,IAEvBuD,EAAe5jE,KAAK4a,IAAI5a,KAAKma,IAAI,EAAG7Q,GAAIm4D,IAAiBlrE,OACzDstE,EAAe7jE,KAAK4a,IAAI5a,KAAKma,IAAI,EAAGvK,GAAI6xD,IAAiB7qE,QAEzD0mB,EAAUsmD,EAAelD,EAAoBp3D,EAC7CiU,EAAUsmD,EAAenD,EAAoB9wD,EAE7Ck0D,EAAOrD,EAAgCn3D,EAAIq6D,EAAqBptE,MAAQupE,EAAYvpE,MACpFwtE,EAAOtD,EAAgC7wD,EAAI+zD,EAAqB/sE,OAASkpE,EAAYlpE,OASrFotE,EAAY,CANhB16D,EAAGm3D,EAAgCn3D,EACnCsG,EAAG6wD,EAAgC7wD,EACnCrZ,MAAOotE,EAAqBptE,MAC5BK,OAAQ+sE,EAAqB/sE,QAK3B2qE,IAAoBza,GAAiBI,MACpCqa,IAAoBza,GAAiBO,SACrCka,IAAoBza,GAAiBW,aAExCuc,EAAUztE,MAAQyJ,KAAKma,IAAIwpD,EAAqBptE,MAAQ+mB,EAASwiD,EAAYvpE,OAC7EytE,EAAU16D,EAAItJ,KAAK4a,IAAIopD,EAAU16D,EAAIgU,EAASwmD,IAG5CvC,IAAoBza,GAAiBK,OACpCoa,IAAoBza,GAAiBS,UACrCga,IAAoBza,GAAiBa,cAExCqc,EAAUztE,MAAQyJ,KAAKma,IAAIwpD,EAAqBptE,MAAQ+mB,EAASwiD,EAAYvpE,QAG3EgrE,IAAoBza,GAAiBE,KACpCua,IAAoBza,GAAiBO,SACrCka,IAAoBza,GAAiBS,WAExCyc,EAAUptE,OAASoJ,KAAKma,IAAIwpD,EAAqB/sE,OAAS2mB,EAASuiD,EAAYlpE,QAC/EotE,EAAUp0D,EAAI5P,KAAK4a,IAAIopD,EAAUp0D,EAAI2N,EAASwmD,IAG5CxC,IAAoBza,GAAiBG,QACpCsa,IAAoBza,GAAiBW,YACrC8Z,IAAoBza,GAAiBa,cAExCqc,EAAUptE,OAASoJ,KAAKma,IAAIwpD,EAAqB/sE,OAAS2mB,EAASuiD,EAAYlpE,SAGjFspE,EAAsB,CAAE3pE,MAAOytE,EAAUztE,MAAOK,OAAQotE,EAAUptE,SAClEopE,EAA0B,CAAE12D,EAAG06D,EAAU16D,EAAGsG,EAAGo0D,EAAUp0D,QAG3DvY,EAAAA,EAAAA,KAAU,KACR,IAAIwS,EAUJ,OATI82D,GAAqBf,IACvB/1D,GAAUC,EAAAA,GAAAA,IAAc62D,EAAmB,CACzC52D,UAAWk4D,EACX/3D,OAAQw5D,EACRz5D,UAAWu4D,EACX3nE,QAAS2nE,EACTzvD,cAAeyvD,KAGZ34D,IACN,CAAC+1D,EAAee,KAEnBtpE,EAAAA,EAAAA,KAAU,KACR,MAAM4sE,EAAiC,GACvC,GAAIplD,GAAW+gD,EACb,IAAK,MAAM9gD,KAAY8oC,GAAuB,CAC5C,MAAMsc,EAAgBrlD,EAAQ3tB,cAAc,iBAAiB4tB,KAE7D,GAAIolD,EAAe,CACjB,MAAMr6D,GAAUC,EAAAA,GAAAA,IAAco6D,EAAe,CAC3Cn6D,UAAWo4D,EACXj4D,OAAQvH,EACRsH,UAAWw4D,EACX5nE,QAAS4nE,EACT1vD,cAAe0vD,IAGb54D,GACFo6D,EAASnkE,KAAK+J,EAElB,CACF,CAGF,MAAO,KACLo6D,EAAS1/D,SAASsF,GAAYA,SAE/B,CAAC+1D,EAAe/gD,IAEnB,MAAMslD,GAAc1E,EAAa,gCAAkC,GAE7D2E,GAAiBvC,IAEvB,IAAKjB,IAAgBX,IAAuBmE,GAC1C,MAAO,CACL3E,YAAY,EACZ7sE,MAAOuxE,IAIX,MAAMvxE,IAAQw5C,EAAAA,GAAAA,GACZ,SAASg4B,GAAe96D,OACxB,QAAQ86D,GAAex0D,QACtB7E,GAAgB,cAAck1D,EAAmB1pE,YACjDwU,GAAgB,eAAek1D,EAAmBrpE,YACnD,oBACC6oE,GAAc9nD,GAAcypD,IAAsB,+BACnD+C,IAGF,MAAO,CACL73D,SAAUyzD,EACV9yE,KAAMgzE,EACNR,aACA9nD,aACA/kB,SAEJ,CYvOMyxE,CACFtjE,EACAojB,EACAk7C,GACAlB,IACAM,EA7EF,WACE,GAA0B,cAAtBxpC,GAAOgzB,WAA4B,OAAOmV,EAEhD,CA2EEkH,GACA9G,GAGIl0D,GAAIgD,IAAUhD,EACdsG,GAAItD,IAAUsD,GACpBvY,EAAAA,EAAAA,KAAU,KACHooE,SAAoBhwE,IAAN6Z,SAAyB7Z,IAANmgB,IACpCmuD,EAA4B,CAAEzxD,SAAU,CAAEhD,KAAGsG,UAE9C,CAAC6vD,GAAYn2D,GAAGsG,MAEnBvY,EAAAA,EAAAA,KAAU,MACHooE,IAAcxyE,IAAQuxE,GACzBR,EAAwB,CAAE/wE,YAE3B,CAACwyE,GAAYjB,EAAkBvxE,KAElC,MAAMs3E,GAAct3E,IAAQkxE,IAEtBqG,GAAeD,GAAYhuE,MAC3BkuE,GAAgBF,GAAY3tE,QAElCS,EAAAA,EAAAA,KAAU,KACJsgB,IACFumD,EAAsB,CAAE3nE,MAAOiuE,GAAc5tE,OAAQ6tE,OAEtD,CAACA,GAAeD,GAAc7sD,GAAYumD,IAE7C,MAAM39B,IAAUzmC,EAAAA,EAAAA,KACVD,IAAO2mC,EAAAA,GAAAA,MACP,QACJkkC,IACExY,GAAgB,CAAC,EAEfyY,GAAgBzc,EAAgBpc,OAAOyK,OAAO2R,GAAe35D,OAAS,GAE5Eq2E,EAAAA,GAAAA,IAAY,KACL1c,GACLpc,OAAO6K,KAAKuR,GAAe3jD,SAASgO,IAClC,MAAMi7C,EAAStF,EAAc31C,GACzBi7C,EAAOkX,SACT/G,EAAe,CACble,MAAO+N,EAAO/N,MACdilB,QAASlX,EAAOkX,QAChBhsE,OAAQ80D,EAAO90D,QAAUsD,EAAMpP,GAC/Bi4E,UAAWrX,EAAOqX,iBAIvBH,GAtKoB,UAsKSj1E,GAAW,GAG3C,MAAMq1E,IAAoB3uE,EAAAA,EAAAA,IAAsD,MAE1E4uE,IAAsB5uE,EAAAA,EAAAA,IAAuC,MAE7Ds3D,IAA4Bp0D,EAAAA,EAAAA,IAAiB2rE,IACjDF,GAAkBxuE,QAAU0uE,KAGxBvS,IAAYp5D,EAAAA,EAAAA,IAAiBuiB,IAC7BkpD,GAAkBxuE,SACpBwuE,GAAkBxuE,QAAQslB,MAIxB8xC,IAA8Br0D,EAAAA,EAAAA,IAAiB2rE,IACnDD,GAAoBzuE,QAAU0uE,KAG1BxS,IAAcn5D,EAAAA,EAAAA,IAAiBgL,IAC/B0gE,GAAoBzuE,SACtByuE,GAAoBzuE,QAAQ+N,MAI1B4gE,IAA4B5rE,EAAAA,EAAAA,IAAgB,KAChDo5D,GAAU,CACRoB,UAAW,+BAITqR,IAAqB7rE,EAAAA,EAAAA,IAAgB,KACzCm5D,GAAYtG,EAAc7nD,QAGtB8gE,IAAmB9rE,EAAAA,EAAAA,IAAgB,KACvCkvD,OAGI6c,IAAyB/rE,EAAAA,EAAAA,IAAgB,KAC7CykE,OAGIuH,IAAiBhsE,EAAAA,EAAAA,IAAgB,KACjCsrE,GAAgB,EAClB5W,IAEAxF,OAIE+c,IAAoBjsE,EAAAA,EAAAA,IAAgB,KACxC,GAAIizD,EAAJ,CACE,MAAM/5C,GAAMw+C,EAAAA,GAAAA,IAAa7E,GACzBoC,EAAa,CACX/7C,MACAg/C,OAAQ,CACNV,mBAAmB,IAIzB,MAEA5C,EAAgB,CACdxO,MAAO5D,EAAKjvD,GACZotE,WAAW,OAITqC,IAAkBhjE,EAAAA,EAAAA,IAAgB,KAClCq3D,EACF+B,GAAU,CACRoB,UAAW,wBAGbsR,QAIE7I,IAAsBjjE,EAAAA,EAAAA,IAAgB,KAC1CivD,EAAuB,CAAEQ,MAAO,iBAG5Byc,IAAwBlsE,EAAAA,EAAAA,IAAgB,KAC5CivD,EAAuB,CAAEQ,MAAO,kBAG5B0c,IAA6BnsE,EAAAA,EAAAA,IAAgB,KACjDwkE,OAGI4H,IAAiBpsE,EAAAA,EAAAA,IAAiBqsE,IACtC9H,EAAc,CAAEpQ,OAAQkY,EAAIlY,YAGxBmY,IAActsE,EAAAA,EAAAA,IAAgB,KAClCk+B,EAAS,CACP3qC,GAAIivD,EAAKjvD,QAIPqkD,IAC6Fp8C,EAAAA,EAAAA,KAAQ,IAClG,EAAGsK,YAAW1G,OAAQy4C,MAC3BnkD,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,WACEoW,EAAAA,GAAAA,GACEy7D,EDtV85B,WAAxD,WCuVt2BxtB,GAAc,UAGlB9xC,OAAK,EACLqN,QAAStgB,EACTc,KAAMyxE,EAAsB,OAAS,UACrC/jE,MAAM,cACNE,QAASsE,EACTE,UAAU,eAAcvS,UAExBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,YAGd,CAAClO,EAAUuyE,IAEd,SAASkH,KACP,OACEj5E,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,CACGkP,GAAQ6/C,GAAO7/C,EAAKpP,KAAOivD,EAAIjvD,KAC9BG,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,OAAOlF,QAAS8qE,GAAY74E,SAAEyzC,GAAQ,wBAEvDxzC,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,SAASlF,QAASqqE,GAAmBp4E,SAAEyzC,GAAQ,uBAC7D21B,IACCnpE,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,WAAWlF,QAASoqE,GAA0Bn4E,SAC1DyzC,GAAQ,cAGZsb,GAAKgqB,cACJ94E,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAMusD,EAAY,OAAS,UAC3BzxD,QAASyqE,GACTnlE,YAAatI,QAAQy0D,GAAWx/D,SAE/ByzC,GAAQ+rB,EAAY,mBAAqB,iCAKpD,CAEA,SAASwZ,KACP,OACE/4E,EAAAA,GAAAA,GAAC8f,GAAAA,EAAI,CACHpU,OAAQsmE,GACRgH,OAAQ/G,GACRj+D,IAAK49D,EACL9xE,WAAWoW,EAAAA,GAAAA,GACTy7D,EAAsBp0D,GAA2B,oBACjD,yBAEFs0D,kBAAmBA,EACnBE,eAAgBA,GAChBD,eAAgBA,GAChB9xD,WAAS,EACTpU,QAASumE,GACTtmE,oBAAqBumE,GAAsBryE,SAE1C84E,MAGP,CAiBA,MAAMI,IAAsB/iE,EAAAA,GAAAA,GDpaqF,WCsa/GytD,GDtaw0C,YCyap0CuV,IAAgBpxE,EAAAA,EAAAA,KAAQ,KAC5B,GAAIypE,EAAqB,MAAO,aAChC,IAAKlM,EAAa,OAClB,MAAM,EAAE8T,EAAC,EAAEC,EAAC,EAAEz1B,IAAM01B,EAAAA,GAAAA,IAAShU,GACvBiU,GAAOC,EAAAA,GAAAA,IAAa,CAACJ,EAAGC,EAAGz1B,IAEjC,OAD8B,SAAV2Y,EAAmB,IAAMgd,EAAOA,GA1WjC,IA2WmB,aAAe,qBACpD,CAACjU,EAAa/I,EAAOiV,IAExB,SAASiI,GAAqB15E,GAC5B,OACEE,EAAAA,GAAAA,GAAA,OACEF,UAAWA,EACX0J,MAAM,KACNK,OAAO,KACP+lE,QAAQ,YACR6J,KAAK,OAAM15E,UAEXC,EAAAA,GAAAA,GAAA,QACEF,UD5bqf,WC6brf,YAAU,UACV,YAAU,UACV83D,EAAE,mCAIV,CAwFA,MAAMvuC,IAAejgB,EAAAA,EAAAA,MA2HrB,SAASswE,GAAuBC,GAC9B,OAAOzjE,EAAAA,GAAAA,GAAe0jE,EAAAA,IAA0BD,EAClD,CAiBA,OA7IAE,EAAAA,GAAAA,GAAoBxwD,IAAe3d,GAAU0vD,IAAsB/xC,GAAa9f,UA8I9E3J,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJ2sE,UAAW9lE,EACXlU,WAAWoW,EAAAA,GAAAA,GD5qBM,WC8qBfy7D,GD9qB4D,WC+qB5DvW,GD/qBkI,WCgrBlIsW,GDhrB0J,YCkrB5JqI,YAAapI,EAAsBgB,QAAiBjwE,EACpDs3E,cAAe1H,KAAsBlX,GAvBrCx7D,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,OAAKF,UAAW45E,GAAuB,UACvC15E,EAAAA,GAAAA,GAAA,OAAKF,UAAW45E,GAAuB,aACvC15E,EAAAA,GAAAA,GAAA,OAAKF,UAAW45E,GAAuB,WACvC15E,EAAAA,GAAAA,GAAA,OAAKF,UAAW45E,GAAuB,YACvC15E,EAAAA,GAAAA,GAAA,OAAKF,UAAW45E,GAAuB,cACvC15E,EAAAA,GAAAA,GAAA,OAAKF,UAAW45E,GAAuB,eACvC15E,EAAAA,GAAAA,GAAA,OAAKF,UAAW45E,GAAuB,iBACvC15E,EAAAA,GAAAA,GAAA,OAAKF,UAAW45E,GAAuB,yBAeuCh3E,EAChFgJ,OAAQA,EACRm8C,oBAAkB,EAClBj8C,QAASwsE,GACThwC,QA/HApoC,EAAAA,GAAAA,GAAA,OACEgU,IAAKojB,EAAUr3B,SAEb4xE,EAEGF,GAOP7xE,EAAAA,GAAAA,IAAA,OACEE,WAAWoW,EAAAA,GAAAA,GACT,eACA,YAEFrQ,OAAOw5C,EAAAA,GAAAA,GACL65B,IAAiB,8BAA8BA,OAC/Cn5E,SAAA,EAEFC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UD9kB+kC,WC+kB/kCuS,OAAK,EACLzE,MAAM,cACN1N,KAAK,OACLoS,UAAWkhC,GAAQmwB,EAAsB,OAAS,SAClD71D,QAASwhE,GAAgBvvE,UAEzBC,EAAAA,GAAAA,GAAA,OAAKF,UAAWm5E,QArDpBr5E,EAAAA,GAAAA,IAAA,OACEE,UDjiB4K,WCkiB5KkU,IAAKqV,GAAatpB,SAAA,CAEjByxE,GAAMh+D,KAAKmlE,GACVA,EAAIjtE,OAhGZ,WACE,MAAM7F,GAAQw5C,EAAAA,GAAAA,GACZ65B,IAAiB,8BAA8BA,MAC/C7T,GAAe,4BAA4BA,KAE7C,OACEzlE,EAAAA,GAAAA,IAAA,OACEE,UAAWyd,GACX1X,MAAOA,EAAM9F,SAAA,CAEZy5E,GAAqBj8D,KACtB3d,EAAAA,GAAAA,IAAA,OACEE,UAAWyd,GAAiBxd,SAAA,EAE5BH,EAAAA,GAAAA,IAAA,OAAKE,UDndgvB,WCmd9sBC,SAAA,EACrCC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CACL3zB,KAAK,OACL4zB,KAAMg7B,KAER9uD,EAAAA,GAAAA,GAACkkD,GAAc,CAAC9xC,UAAW8/D,GAAmBxmE,OAAQsmE,QAEvDzS,GAAW0a,WAAanrB,GAAKkK,WAC9Bh5D,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,MAChBvd,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAWyd,GACXlL,OAAK,EACLzE,MAAM,cACN1N,KAAK,OACLoS,UAAWkhC,GAAQ,SACnB1lC,QAASwqE,GAAev4E,UAExBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACzS,UAAWyd,GAAqBjQ,KAAK,eAG9CksE,GAAqBj8D,MAG5B,CA4DU28D,IAEAl6E,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CACL/zB,UDziB+wC,WC0iB/wCI,KAAK,OACL4zB,KAAM6kD,EAAI7pB,IAEVhhD,QAASA,IAAM4qE,GAAeC,OAInCpH,IAnEH3xE,EAAAA,GAAAA,IAAA,OACEE,UAAWyd,GAAwBxd,SAAA,CAElCy5E,GAAqBj8D,KACtB3d,EAAAA,GAAAA,IAAA,OACEE,UAAWyd,GAAiBxd,SAAA,EAE5BC,EAAAA,GAAAA,GAAA,OAAKF,UDrfqrB,WCqfnpBC,UACrCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACzS,UAAWyd,GAAajQ,KAAK,UAEpCR,GAAK,YACN9M,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,MAChBvd,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAWyd,GACXlL,OAAK,EACLzE,MAAM,cACN1N,KAAK,OACLoS,UAAWkhC,GAAQ,SACnB1lC,QAASuqE,GAAuBt4E,UAEhCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACzS,UAAWyd,GAAqBjQ,KAAK,eAG9CksE,GAAqBj8D,UAmFrBw7D,MAEDn5E,EAAAA,GAAAA,IAAA,OAAKE,UD1lBkN,WC0lBxLC,SAAA,EAC3BwxE,IA/ENvxE,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,WAAWoW,EAAAA,GAAAA,GD7gBi9B,WC+gB19B,WAEF7D,OAAK,EACLzE,MAAM,cACN1N,KAAK,OACL4N,QAAS2qE,GAA2B14E,UAEpCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACzS,UAAWyd,GAAajQ,KAAK,WAuE/BikE,IACAvxE,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,WAAWoW,EAAAA,GAAAA,GACTqH,GDhmBumC,WCkmBvmC,WAEFlL,OAAK,EACLzE,MAAM,cACN1N,KAAK,OACL4N,QAAS0qE,GAAsBz4E,UAE/BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACzS,UAAWyd,GAAkBjQ,KAAK,oBAI5CtN,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,WAAWoW,EAAAA,GAAAA,GACTqH,GACA,WAEFlL,OAAK,EACLzE,MAAM,cACN1N,KAAK,OACL4N,QAASyhE,GAAoBxvE,UAE7BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACzS,UAAWyd,GAAkBjQ,KAAK,4BA1DKtN,EAAAA,GAAAA,GAACs7D,GAAoB,KAmExE17D,EAAAA,GAAAA,IAAA,OACEE,UAAU,eACV+F,OAAOw5C,EAAAA,GAAAA,GACLgmB,GAAe,qBAAqBA,IACpC6T,IAAiB,8BAA8BA,OAC/Cn5E,SAAA,EAEFC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLzE,MAAM,cACN1N,KAAK,UACLoS,UAAWkhC,GAAQmwB,EAAsB,OAAS,SAClD71D,QAASwhE,GAAgBvvE,UAEzBC,EAAAA,GAAAA,GAAA,OAAKF,UAAWm5E,QAElBj5E,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SAAEw/D,GAAW0a,WAAanrB,GAAKkK,aACzDuY,IA1PJvxE,EAAAA,GAAAA,GAACqT,GAAAA,EAAY,CACXvT,WAAWoW,EAAAA,GAAAA,GACTy7D,EAAsBp0D,GAA2B,oBACjD,yBAEFjK,QAAS4wC,GACT3wC,UAAWo+D,EAAsB,OAAS,QAAQ5xE,SAEjD84E,YAyRHhzE,MAAO,qBAAqB69D,GAAmB,4BAC/Cv7B,YAAU,EACVgyC,iBAAe,EAAAp6E,SAAA,CAEd2xE,GAAgBqH,KAChB5d,GAAiBmW,GAAa99D,KAAKgS,IAClCxlB,EAAAA,GAAAA,GAACwgE,GAAqB,CAEpBt4B,MAAOA,EACPw4B,0BAA2BA,GAC3BC,4BAA6BA,GAC7BF,OAAQtF,EAAc31C,GACtBo7C,eAAgB8R,IAAc9nD,GAC9Bk2C,yBAA0BoR,GAC1BrR,oBAAqB8Q,EACrB5Q,YAAa2W,IARRlyD,KAWR+rD,IAAwBvxE,EAAAA,GAAAA,GAAC49D,GAAkB,WCloBlD,IAAej/D,EAAAA,EAAAA,KAnDqBy7E,EAAGtrB,MAAK5tD,OAAMyxD,+BAChD,MAAM,sBAAE0nB,EAAqB,eAAEC,IAAmBvuE,EAAAA,EAAAA,OAE3C6mD,EAAgB2nB,IAAqBruE,EAAAA,EAAAA,IAASymD,IAA4B,GAE3E7lD,GAAOC,EAAAA,EAAAA,KAEPytE,GAAuB76E,EAAAA,EAAAA,KAAY,KACvC26E,EAAe,CAAE5nB,MAAO5D,EAAKjvD,GAAI+yD,qBAChC,CAAC0nB,EAAgB1nB,EAAgB9D,IAE9B2rB,GAAwB96E,EAAAA,EAAAA,KAAY,KACxC06E,MACC,IAEGntE,EAA0BJ,EAAT,SAAT5L,EAAuB,UAAkB,oBACjD2T,GAAO/M,EAAAA,EAAAA,KAAQ,KACnB,OAAQ5G,GACN,IAAK,OACH,OAAO4L,EAAK,0BAA0B88B,EAAAA,EAAAA,IAAgBklB,IACxD,IAAK,SACH,OAAOhiD,EAAK,sBAAsB88B,EAAAA,EAAAA,IAAgBklB,IAEpD,QACE,OAAOhiD,EAAK,gCAEf,CAACgiD,EAAK5tD,EAAM4L,IAEf,OACElN,EAAAA,GAAAA,IAACwjC,GAAAA,EAAa,CACZ13B,OAAQZ,QAAQgkD,GAChBljD,QAAS6uE,EACTvtE,MAAOA,EACPo2B,eAAgBk3C,EAAqBz6E,SAAA,EAEpCg0B,EAAAA,GAAAA,GAAWlf,EAAM,CAAC,oBAClB89C,IACC3yD,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPhzD,UAAU,kBACVmpC,QAAS2pB,EACT3lD,OAAO8mB,EAAAA,GAAAA,GACLjnB,EAAK,sCAAuCgiD,GAAKkK,WACjD,CAAC,oBAEHjG,QAASwnB,UCQnB,IAAe57E,EAAAA,EAAAA,KAtD6B+7E,EAC1CxyC,YAEA,MAAM,wBAAEyyC,EAAuB,uBAAEC,IAA2B7uE,EAAAA,EAAAA,MACtD+iD,EAAM5mB,GAAO4mB,KAEZ+rB,EAAeC,IAAoB5uE,EAAAA,EAAAA,KAAS,GAE7CY,GAAOC,EAAAA,EAAAA,KAEP6iD,GAAgBjwD,EAAAA,EAAAA,KAAY,KAChCg7E,EAAwB,CACtB/nB,eAAgB9nD,QAAQgkD,GAAK6D,8BAE9B,CAACgoB,EAAyB7rB,KAG7BxkD,EAAAA,EAAAA,KAAU,KACJwkD,GACFgsB,GAAiB,KAElB,CAAChsB,IAEJ,MAAMisB,GAAWjzE,EAAAA,EAAAA,KAAQ,KACvB,MACMkzE,EADOluE,EAAK,mCACCkuE,MAAM,UACnBC,EAAWnuE,EAAK,iCACtB,MAAO,CACLkuE,EAAM,IACNh7E,EAAAA,GAAAA,GAAA,KAAGkT,KAAMgoE,EAAAA,IAAkBruE,OAAO,SAASsuE,IAAI,sBAAqBp7E,SAAEk7E,IACtED,EAAM,MAEP,CAACluE,IAEJ,OACElN,EAAAA,GAAAA,IAACwjC,GAAAA,EAAa,CACZ13B,OAAQZ,QAAQgkD,GAChBljD,QAASgvE,EACT1tE,MAAOJ,EAAK,kCACZw2B,eAAgBssB,EAChBwrB,mBAAoBP,EAAc96E,SAAA,EAEjCg0B,EAAAA,GAAAA,GAAWjnB,EAAK,gCAAiCgiD,GAAKmrB,WAAY,CAAC,qBACpEj6E,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPhzD,UAAU,kBACVmpC,QAAS4xC,EACT5tE,MAAO8tE,EACPhoB,QAAS+nB,KAEV/mD,EAAAA,GAAAA,GAAWjnB,EAAK,iCAAkCgiD,GAAKmrB,WAAY,CAAC,0BCtB3E,IAAet7E,EAAAA,EAAAA,KAhC0B08E,EACvCC,aAEA,MAAM,2BAAEC,EAA0B,iBAAEC,EAAgB,0BAAEC,IAA8B1vE,EAAAA,EAAAA,MAC9Ee,GAAOC,EAAAA,EAAAA,KAEPrB,EAASZ,QAAQwwE,GAEjBI,GAAkBrlD,EAAAA,EAAAA,GAAsBilD,IAAWA,EACnDK,EAAeD,GAAiBE,aAEhCC,GAA4Bl8E,EAAAA,EAAAA,KAAY,KAC5C47E,IACII,EACFF,EAA0B,CAAEK,SAAUJ,EAAgB77E,GAAIk8E,wBAAwB,IAElFP,EAAiB,CAAE37E,GAAI67E,EAAiB77E,OAEzC,CAAC87E,EAAcD,IAElB,OACE17E,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQA,EACRE,QAAS2vE,EACT1mE,KAAqB/H,EAAf6uE,EAAoB,yBAAiC,qBAC3Dt4C,aAAcv2B,EAAK,UACnBw2B,eAAgBu4C,EAChBt4C,sBAAoB,O,gECzC1B,UAAgB,KAAO,WAAW,KAAO,WAAW,OAAS,WAAW,YAAc,WAAW,KAAO,WAAW,YAAY,WAAW,SAAW,YC4B/Iy4C,GAAS,CACb,UAAW,UAAW,UAAW,UAAW,UAAW,UACvD,UAAW,UAAW,UAAW,UAAW,UAAW,WACvDxoE,IAAI6lE,GAAAA,IAoCN,IAAe16E,EAAAA,EAAAA,KAlCYs9E,EACzBjpE,OACAkpE,aACAhvE,QACA2H,OACAvQ,QACA6uB,QACA2V,UACAh7B,cAEA,MAAMquE,EAAY73E,EAAQ6uB,EAAS6oD,GAAOx6E,OACpC46E,EAASJ,GAAO/oE,KAAKmI,MAAM+gE,IAC3BE,EAASL,GAAO/oE,KAAKqpE,KAAKH,KAAcC,GACxC,EAAEjD,EAAC,EAAEC,EAAC,EAAEz1B,IAAM44B,EAAAA,GAAAA,IAAQH,EAAQC,EAAQ,IAEtC/3D,GAAchY,EAAAA,EAAAA,IAAgB,KAClCwB,IAAUg7B,MAGZ,OACElpC,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CAACk6C,gBAAiBj/D,GAAOygB,KAAMlwB,QAASwW,EAAake,UAAW10B,EAAQ/N,SAAA,CAC9Em8E,GACCl8E,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAM0F,EAAMlT,UAAWyd,GAAOk/D,SAAU52E,MAAO,qBAAqBszE,KAAKC,KAAKz1B,QAEpF3jD,EAAAA,GAAAA,GAAA,OAAK2D,IAAKqP,EAAMlT,UAAWyd,GAAOvK,KAAMsV,IAAI,GAAGziB,MAAO,qBAAqBszE,KAAKC,KAAKz1B,KAAMngD,WAAW,KAExG5D,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAO1I,KAAK9U,SAAA,EAC1BC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOrQ,MAAMnN,UAAEg0B,EAAAA,GAAAA,GAAW7mB,EAAO,CAAC,UAClDlN,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOpR,YAAYpM,SAAE8U,a,gBC7D7C,SAA0C,WAA1C,GAAgH,WC0FhH,IAAelW,EAAAA,EAAAA,KA1EkB+9E,EAC/Bl7E,SACA07C,SACAy/B,oBAEA,MAAMC,EAAY3pE,KAAKma,IAAI,EAAGna,KAAK4a,IAAIrsB,EAAS,EAAG07C,EAAS,IACtD2/B,EAAiBD,IAAcp7E,EAAS,EAAI,EAC5Cs7E,EAAcF,IAAcp7E,EAAS,EACrCu7E,EAA6B,IAAdH,EACfI,EAAgC,IAAdJ,EAClBK,EAAiBhqE,KAAK4a,IAAIrsB,EAAQ,GAElC07E,GAAkBv9E,EAAAA,EAAAA,KAAY,KAClCg9E,EAAcz/B,EAAS,KACtB,CAACA,EAAQy/B,IAENQ,GAAex9E,EAAAA,EAAAA,KAAY,KAC/Bg9E,EAAcz/B,EAAS,KACtB,CAACA,EAAQy/B,IAENxpD,EAAQlgB,KAAK4a,IAAI,EAAGrsB,GAE1B,OACE5B,EAAAA,GAAAA,IAAA,OAAAG,SAAA,EACIwV,EAAAA,KACAvV,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAyB,IAAX2/B,GAAgB3/B,IACxD3P,MAAM,cACNsS,SAAqB,IAAXg9B,EACV7qC,OAAK,EACLvE,QAASqvE,EAAap9E,UAEtBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,gBAGftN,EAAAA,GAAAA,GAAA,OAAKF,UDnDY,WCmDY+F,MAAO,iBAAiB+2E,gBAAwBp7E,eAAoB2xB,KAASpzB,SACvGwlD,MAAM/jD,GAAQi4E,UAAK/2E,GAAW8Q,KAAI,CAACgyC,EAAGC,KACrC,MAAMnhD,EAAQmhD,EACR23B,EAAU33B,IAAMm3B,EAAYK,EAAiB,IAAMH,IAAgBD,EACnEQ,EAAa53B,IAAMm3B,EAAYK,EAAiB,IAAMJ,IAAmBC,GACzEr3B,IAAMm3B,EAAYK,EAAiB,GAAKJ,EACxCS,EAAW73B,IAAMm3B,IAAeG,IAAiBC,EACjDO,EAAe93B,IAAMm3B,EAAY,IAAOG,IAAiBC,GACzDv3B,IAAMm3B,GAAaI,EACnBQ,EAAc/3B,EAAIm3B,GAAan3B,GAAKm3B,EAAYK,EACtD,OACEj9E,EAAAA,GAAAA,GAAA,OACE8N,QAASA,IAAM6uE,EAAcl3B,GAC7B3lD,WAAWoW,EAAAA,GAAAA,GDhEwG,WCkEjH5R,IAAU44C,GDlEyL,YCmElMmgC,GAAaE,IDnEuH,YCoEpIH,GAAUE,GAAWE,IDpEkI,WCqExJA,GDrE+K,oBC2EvLjoE,EAAAA,KACAvV,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAc2/B,IAAW17C,EAAS,GAAK+b,GD7Ed,YC8EnD3P,MAAM,cACNyE,OAAK,EACL6N,SAAUg9B,IAAW17C,EAAS,EAC9BsM,QAASovE,EAAgBn9E,UAEzBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,iBCnFrB,GAAsnB,WCsDtnB,IAAe3O,EAAAA,EAAAA,KAlC4B8+E,EACzCC,YACAC,aACA79E,YACA89E,oBACAC,iBAEA,MAAM/wE,GAAOC,EAAAA,EAAAA,KAEb,OACEnN,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GD9BG,WC8ByBpW,GAAWC,SAAA,CACpD69E,IACCh+E,EAAAA,GAAAA,IAAA,OAAKE,UDhCiE,WCgCjCC,SAAA,EACnCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAMswE,EAAmB99E,UDjC6K,cCkC5ME,EAAAA,GAAAA,GAAA,OAAKF,UDlC2R,WCkCrPsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAE29E,KACjF19E,EAAAA,GAAAA,GAAA,OAAKF,UDnCuI,WCmC/FC,UAC3CC,EAAAA,GAAAA,GAAA,OAAKwJ,MAAM,KAAKK,OAAO,IAAI+lE,QAAQ,WAAW6J,KAAK,OAAM15E,UACvDC,EAAAA,GAAAA,GAAA,QAAM43D,EAAE,oLAAoL6hB,KAAK,oBAKzM75E,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAeqH,GD1CmmB,YC0CzkBxd,SAAA,EACvDC,EAAAA,GAAAA,GAAA,OAAKF,UD3C4V,6BC2ChUsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAE+M,EAAK,gBAC1E8wE,IAAqB59E,EAAAA,GAAAA,GAAA,OAAKF,UD5CujB,oBC4C3hBC,SAAE29E,QAE5D99E,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAeqH,GD9CsnB,YC8C1lB1X,MAAOg4E,EAAW99E,SAAA,EAC3EC,EAAAA,GAAAA,GAAA,OAAKF,UD/C+a,6BC+ClZsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAE+M,EAAK,mBAC7E9M,EAAAA,GAAAA,GAAA,OAAKF,UDhDogB,6BCgDveC,SAAE49E,aChCtCG,GAAc,CAAC,GAAI,IAAK,KACxBC,GAAY,CAAC,IAAK,IAAK,KA0B7B,IAAep/E,EAAAA,EAAAA,KAxB2Bq/E,EACxC9wE,QACAf,cACAuxE,YACAC,aACAM,wBAEA,MAAMrwE,GAAQ9F,EAAAA,EAAAA,KAAQ,IACbg2E,GAAYtqE,KAAI,CAACgK,EAAOioC,KAAMy4B,EAAAA,GAAAA,IAAK1gE,EAAOugE,GAAUt4B,GAAIw4B,MAC9D,CAACA,IAEJ,OACEr+E,EAAAA,GAAAA,IAAA,OAAKE,UC/Bc,WD+BSC,SAAA,EAC1BC,EAAAA,GAAAA,GAAA,OAAKF,UChC+B,WDgCPC,SAAEmN,KAC/BlN,EAAAA,GAAAA,GAAA,OAAKF,UCjCwD,WDiC1BC,SAAEoM,KACrCnM,EAAAA,GAAAA,GAACy9E,GAAoB,CACnBC,UAAWA,EACXC,WAAYA,EACZE,WAAY,mBAAmBjwE,EAAM8Y,KAAK,gB,4BErClD,MC+BMy3D,GASDA,EACHj+E,OAAMk+E,YAAWtjC,UACjBujC,UAAS/5E,QAAOg6E,YAAWxwE,UAASyY,cAEpC,MAAM9d,GAAYL,EAAAA,EAAAA,GAAS,UAAUi2E,EAAQx+E,MACvC0+E,GAAkBn2E,EAAAA,EAAAA,GAAS,UAAUi2E,EAAQx+E,aAE7C2+E,EAAwB,IAAVl6E,GACbm6E,EAAYC,EAASC,IAAa1/E,EAAAA,EAAAA,GAAQu/E,GAE3CI,EAAa1+E,EAxBS,GAwBFA,EACpBsJ,EAAqB,EAAbo1E,EACR/0E,EAAsB,IAAb+0E,EAITC,EAFIv6E,EAAQg6E,GAEW,EAAVrrE,KAAK6rE,IAClBp1D,EAAQ80D,EAAc,EAAI,IAE1BjiE,EAAItJ,KAAK8rE,IAAIF,GAASr1E,EAAqB,IAAbo1E,EAC9B/7D,EAAI5P,KAAK+rE,IAAIH,GAASh1E,EAEtBya,GAAchY,EAAAA,EAAAA,IAAgB,KAClCwB,EAAQswE,MAGJz5D,GAAcrY,EAAAA,EAAAA,IAAgB,KAClCqyE,IACAp4D,EAAQ63D,MASV,OANA9zE,EAAAA,EAAAA,KAAU,KACJk0E,GACFE,MAED,CAACF,EAAaE,KAGf9+E,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,CACGy+E,IACCx+E,EAAAA,GAAAA,GAACC,GAAAA,EAAe,CACdH,UDjFkG,oBCkFlGM,OAAQm+E,EACRU,KAAMnkC,EACNokC,eAAa,EACb1+E,QAAM,EACNN,KA3DqB,GA2DUA,EAC/B2F,MAAO,aAAa0W,oBAAoBsG,UAG5C7iB,EAAAA,GAAAA,GAACC,GAAAA,EAAe,CACdH,UD3FoC,WC4FpCM,OAAQqI,EACRw2E,KAAMnkC,GAAW2jC,EACjBj+E,QAAM,EACNN,KArEsB,GAqEQA,EAC9B2F,MAAO,QAAQ0W,aAAasG,mBAAmB6G,IAC/C5b,QAASwW,EACTiC,QAAS5B,QA4DjB,IAAehmB,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACQ,CACL89E,SAAU99E,EAAO89E,SAASC,QAAQD,YAHpBzwE,EAtD6C2wE,EAC/DF,WAAU5lE,eAEV,MAAM8P,GAAejgB,EAAAA,EAAAA,OACd+S,EAAQmjE,IAAapzE,EAAAA,EAAAA,IAAS,IAC9BhM,EAAMq/E,IAAWrzE,EAAAA,EAAAA,IAAS,GAE3BszE,EAAmBL,GAAU/gC,MAAM,EAnFxB,IAqFX95B,GAAchY,EAAAA,EAAAA,IAAiBm5C,IACnC65B,GAAW75B,MAGP9gC,GAAcrY,EAAAA,EAAAA,IAAiBm5C,IAEd,KADAg6B,EAAAA,GAAAA,GAAcD,EAAiBh+E,OAAQikD,EAAItpC,IAGhEvR,YAAW,KACT00E,GAAW/1E,IACFk2E,EAAAA,GAAAA,GAAcD,EAAiBh+E,OAAQ+H,EAAU,OA9F5C,QA0GlB,OAPAe,EAAAA,EAAAA,KAAU,KACR,MAAM/E,EAAY8jB,EAAa9f,QAC1BhE,GAELg6E,EAAQh6E,EAAUonB,QAAQ,iBAAkBhQ,eAC3C,KAGD3c,EAAAA,GAAAA,GAAA,OACEF,UDzIiB,WC0IjBkU,IAAKqV,EAAatpB,SAEjB+K,QAAQ5K,IAASs/E,GAAkBhsE,KAAI,CAAC6qE,EAAS54B,KAE9CzlD,EAAAA,GAAAA,GAACm+E,GAAqB,CACpBj+E,KAAMA,EACNm+E,QAASA,EACTD,UAAW34B,EACXnhD,OAAQmhD,EAAItpC,EAASqjE,EAAiBh+E,QAAUg+E,EAAiBh+E,OACjE88E,UAAWkB,EAAiBh+E,OAC5BsM,QAASwW,EACTiC,QAAS5B,EACTm2B,QAASvhC,Y,4BCtJrB,MCuBMmmE,GAAuB,CAC3BC,cAAe,yBACfC,gBAAiB,wBACjBC,cAAe,sBACfC,cAAe,0CACfC,aAAc,8BACdC,gBAAiB,uCACjBC,aAAc,sCAGVC,GAA6B,CACjCP,cAAe,oCACfC,gBAAiB,mCACjBC,cAAe,iCACfC,cAAe,sCACfC,aAAc,yCACdC,gBAAiB,mCACjBC,aAAc,uCAGVE,GAAgD,CACpDR,cAAe,iBACfC,gBAAiB,sBACjBC,cAAe,cACfC,cAAe,QACfC,aAAc,oBACdC,gBAAiB,gBACjBC,aAAc,cAGVG,GAAsBrhC,OAAO6K,KAAK81B,IAElCW,GAAcC,GAAAA,EAAaC,MAAQ,IAAO5qE,EAAAA,EAgEhD,IAAehX,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACQ,CACL0wD,aAAa5hB,EAAAA,EAAAA,KAAW9uC,EAAQA,EAAO8yB,kBAHzBzlB,EA5De8xE,EACjCzuB,kBAEA,MAAM0uB,GAAYr3E,EAAAA,EAAAA,MAEZ0D,GAAOC,EAAAA,EAAAA,KAEP2zE,GAAMC,EAAAA,GAAAA,MAEZ/kE,EAAAA,EAAAA,KAAgB,KACT6kE,EAAUl3E,UAIfq3E,EAAAA,GAAAA,GAAmB,CACjBn3E,OAAQg3E,EAAUl3E,QAClBrJ,KAAMmgF,GAAcK,EACpBG,cApBkB,EAqBlBjzE,MAAO,SACPkzE,kBArBuB,EAsBvBC,iBAAkB,cAClBL,UAED,CAACA,IAEJ,MAAM,aAAE3gC,EAAY,cAAEJ,GAAkBF,KAElCuhC,EAAUX,GAEhB,OACEzgF,EAAAA,GAAAA,IAAA,OAAKE,UDzFc,WCyFSC,SAAA,EAC1BH,EAAAA,GAAAA,IAAA,OAAKE,UD1FgC,WC0FPC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CAACotD,iBAAe,EAACntD,KAAMi+B,EAAa7xD,KAAK,WAChDF,EAAAA,GAAAA,GAAA,UAAQF,UD5F+C,WC4FrBkU,IAAKysE,EAAW56E,MAAO,cAAcm7E,oBAA0BA,YAEnGhhF,EAAAA,GAAAA,GAAA,OAAKF,UD9FuE,WC8F/CC,SAAE+M,EAAK,sBACpClN,EAAAA,GAAAA,IAAA,OACEE,WAAWoW,EAAAA,GAAAA,GDhGqF,YCgGpDypC,GDhG8F,WCgG5D,iBAC9EqF,SAAUjF,EAAahgD,SAAA,CAEtBqgF,GAAoB5sE,KAAI,CAACs1B,EAASxkC,KAE/BtE,EAAAA,GAAAA,GAACi8E,GAAkB,CAEjB/uE,MAAOJ,EAAK4yE,GAAqB52C,IACjCj0B,KAAM/H,EAAKozE,GAA2Bp3C,IACtC91B,KAAMmtE,GAAoBr3C,GAC1BozC,YAAU,EACV53E,MAAOA,EACP6uB,MAAOitD,GAAoB5+E,OAC3BsnC,QAASA,GAPJA,MAWX9oC,EAAAA,GAAAA,GAAA,OAAKF,UDjH+G,WCiHtFC,SAAE+M,EAAK,gDCjH7C,IAAgB,KAAO,WAAW,QAAU,WAAW,KAAO,WAAW,MAAQ,WAAW,MAAQ,Y,8CC+DpG,IAAenO,EAAAA,EAAAA,KAtCkC6hF,EAC/CU,UACAC,qBACAC,SACAC,iBACA/8E,QACAiV,eAEA,MAAM9Q,GAAYL,EAAAA,EAAAA,GAAS,WAAW84E,KAChCI,GAAeprC,EAAAA,GAAAA,GAAcmrC,EAAen4E,SAC5C6a,GAAuBqyB,EAAAA,GAAAA,GAA6B3tC,GAE1D,OACEzI,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOygB,KAAKj+B,UAC1BH,EAAAA,GAAAA,IAAA,OACEE,WAAWoW,EAAAA,GAAAA,GACTqH,GAAOgkE,QACPJ,GAAsB5jE,GAAOikE,QAC7BJ,GAAU7jE,GAAOkkE,MAEnB5hF,GAAI,iCAAiCyE,IAAQvE,SAAA,EAE7CC,EAAAA,GAAAA,GAAA,OAAK2D,IAAK+9E,GAAap5D,IAAI,GAAGxoB,UAAWyd,GAAOxF,MAAOvU,WAAW,KAClExD,EAAAA,GAAAA,GAAA,UAAQgU,IAAKstE,EAAcxhF,UAAWyd,GAAOzb,SAC7C9B,EAAAA,GAAAA,GAAC66C,GAAAA,EAAc,CACbC,QAASvhC,EACTzZ,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAOzb,MAAOiiB,GACxCpgB,IAAK8E,EACLyZ,yBAAuB,EACvBiE,aAAW,EACXnB,OAAK,EACLoB,MAAI,YCxDd,GAAuP,WAAvP,GAA0Q,WAA1Q,GAAge,WAAhe,GAAyf,WCsC5eu7D,GAA4D,CACvEC,cAAe,uBACfC,mBAAoB,2BACpBC,iBAAkB,yBAClBC,eAAgB,sBAChBC,OAAQ,sBACRC,cAAe,4BACfC,cAAe,6BACfC,gBAAiB,8BACjBC,YAAa,wBACbC,yBAA0B,uCAC1BC,kBAAmB,iCACnBC,aAAc,4BACdC,aAAc,6BACdnhD,QAAS,wBACTohD,WAAY,sBACZC,UAAW,yBACXC,gBAAiB,+BACjBC,QAAS,yBACTC,KAAM,sBAGKC,GAAkE,CAC7ElB,cAAe,kCACfC,mBAAoB,sCACpBC,iBAAkB,oCAClBE,OAAQ,iCACRD,eAAgB,iCAChBE,cAAe,uCACfC,cAAe,wCACfC,gBAAiB,yCACjBC,YAAa,mCACbC,yBAA0B,kDAC1BC,kBAAmB,4CACnBC,aAAc,uCACdC,aAAc,wCACdnhD,QAAS,mCACTohD,WAAY,iCACZC,UAAW,oCACXC,gBAAiB,0CACjBC,QAAS,6BACTC,KAAM,iCAGFE,GAAsD,CAC1DC,SAAU,8BACVC,mBAAoB,qBACpBC,eAAgB,wBAChBC,UAAW,sBACXC,cAAe,6BACfC,YAAa,gBACbC,cAAe,qBACfC,cAAe,oBACfC,mBAAoB,0BACpBC,oBAAqB,4BACrBC,aAAc,+BAGVC,GAA4D,CAChEX,SAAU,iCACVC,mBAAoB,wBACpBC,eAAgB,2BAChBC,UAAW,yBACXC,cAAe,gCACfC,YAAa,mBACbC,cAAe,wBACfC,cAAe,uBACfC,mBAAoB,6BACpBC,oBAAqB,+BACrBC,aAAc,kCA2PhB,IAAe/kF,EAAAA,EAAAA,KA3O2BilF,EACxCC,QACA1hD,iBACA2hD,YACAC,SACAC,oBACAC,qBACAl5D,SACAm5D,uBAEA,MAAM1wC,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,KACP0wC,GAAqB/6E,EAAAA,EAAAA,OACpBg7E,EAAmBC,IAAwBn4E,EAAAA,EAAAA,IAASo4E,EAAAA,IAAyBloD,QAAQ+F,KACrFoiD,EAA4BC,IAAiCt4E,EAAAA,EAAAA,IAAS,IACtEu4E,EAAaC,EAAgBC,IAAiB1lF,EAAAA,EAAAA,MAE9C2lF,EAAiBC,IAAsB34E,EAAAA,EAAAA,KAAS,IAChD44E,EAAoBC,IAAyB74E,EAAAA,EAAAA,KAAS,GAEvD84E,GAAqB3uD,EAAAA,EAAAA,GAAsB8L,GAE3C8iD,GAAmBn9E,EAAAA,EAAAA,KAAQ,IAC1Bk8E,EACEA,EAAkBvmD,QAAQqL,GAAYw7C,EAAAA,IAAyBz0D,SAASiZ,KADhDw7C,EAAAA,KAE9B,CAACN,IAEEkB,GAAyBp9E,EAAAA,EAAAA,KAAQ,KACrC,IAAKm8E,EAAoB,OAEzB,MAAM,OAAEhqC,EAAM,OAAEkrC,EAAM,SAAEC,GAAanB,EAC/BoB,EAAgBpyE,KAAKmI,MAAM6+B,EAASkrC,GAE1C,OAAOrB,EACHh3E,EAAK,MACLA,EAAK,qBAAsB,CAAEw4E,OAAOC,EAAAA,GAAAA,IAAez4E,EAAMu4E,EAAeD,IAAa,CAAEhrC,WAAW,MACrG,CAAC0pC,EAAWh3E,EAAMm3E,IAEf3/D,GAAchY,EAAAA,EAAAA,IAAgB,KAClC43E,EAAiB/hD,MAgCnB,SAASqjD,EAAmB54E,GAC1B,MAAM,UAAE2tB,EAAS,aAAE7kB,EAAY,aAAEsqC,GAAiBpzC,EAAE6X,cACpDogE,EAAmBtqD,GAtFE,IAuFrBwqD,EAAsBxqD,GAAaylB,EAAetqC,EAvF7B,GAwFvB,EAEApL,EAAAA,EAAAA,KAAU,KACR,MAAMm7E,EAAkBtB,EAAmB56E,QAC3C,IAAKk8E,GAAoBT,IAAuB7iD,EAAiB,OAEjE,MAAM79B,EAAQ2gF,EAAiB7oD,QAAQ+F,GACvCkiD,EAAqB//E,GACrBogF,KACAgB,EAAAA,GAAAA,GAAwBD,EAAiBA,EAAgB9oE,YAAcrY,EAAO,GAC3EqhF,KAAKhB,KACP,CAACP,EAAmBa,EAAkB9iD,EAAgB6iD,IAEzD,MAAMY,GAAoBt5E,EAAAA,EAAAA,IAAgBiM,UACxC,MAAMktE,EAAkBtB,EAAmB56E,QACtCk8E,IAELpB,EAAqB//E,GAErBogF,UACMgB,EAAAA,GAAAA,GAAwBD,EAAiBA,EAAgB9oE,YAAcrY,EAAO,KACpFqgF,QAGIkB,EAAiBZ,EAAiBb,GAClC0B,EAAuC,kBAAnBD,GAAyD,YAAnBA,EAEhE,OACEjmF,EAAAA,GAAAA,IAAA,OAAKE,UDlOc,WCkOSC,SAAA,EAC1BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLnS,KAAK,UACLJ,WAAWoW,EAAAA,GAAAA,GDtOgI,WCsO9F4vE,GDtO0J,YCuOvMl4E,MAAOk4E,EAAoB,oBAAsB,cACjDh4E,QAASid,EACTzY,UAAWkhC,EAAQ,QAAQzzC,UAE3BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,kBAGbtN,EAAAA,GAAAA,GAAA,OAAKF,UD9Okc,cCgPvcE,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GDhP8M,WCgP/K,gBAAiB8uC,SA3EpE,SAAsBp4C,GACpB,MAAMC,EAASD,EAAE6X,eACX,YAAE9H,EAAaopE,WAAYC,GAAuBn5E,EAElDk5E,EAAa9yE,KAAKZ,MAAM2zE,GAGxBryE,EADOoyE,EAAcppE,EACFA,EAEnBspE,EAAehzE,KAAKqpE,MAAMyJ,EAAa,GAAKppE,GAElD6nE,EAA8ByB,GAE9B,MAAMC,EAAcr5E,EAAO1I,cAA8B,mCAAkC8hF,EAAe,IACpGE,EAAiBt5E,EAAO1I,cAA8B,kCAAkC8hF,KAU9F,IARA9tE,EAAAA,EAAAA,KAAgB,KACdtL,EAAOhH,MAAMinC,YAAY,oBAAqBn5B,EAASyyE,YACvDv5E,EAAOhH,MAAMinC,YAAY,wBAAyB75B,KAAKya,IAAI/Z,GAAUyyE,YAEjEF,IAAaG,EAAAA,GAAAA,IAAiBH,EAAa,WAAW,GACtDC,IAAgBE,EAAAA,GAAAA,IAAiBF,EAAgB,WAAW,MAG9D1B,EAAa,OACjB,MAAMnlD,EAAQrsB,KAAKZ,MAAM0zE,EAAappE,GACtC0nE,EAAqB/kD,EACvB,EAgD4FtrB,IAAKmwE,EAAmBpkF,SAE7GklF,EAAiBzxE,KAAI,CAACs1B,EAASxkC,KAC9B,GAAgB,kBAAZwkC,EACF,OACElpC,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAeqH,GDrPiP,YCqPpNxd,SAAA,EAC1DC,EAAAA,GAAAA,GAAA,MAAIF,WAAWoW,EAAAA,GAAAA,GDtP+V,WCsPjU0uE,GDtP2X,YCsPjV7kF,SACpFyzC,EAAQmuC,GAAuBC,kBAElC5hF,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GDzP0U,WCyPrS,iBAAkB8uC,SAAUwgC,EAAmBzlF,SACjGumF,EAAAA,IAAqB9yE,KAAI,CAACkc,EAAO+1B,KAChC,MAAM8gC,EAAexC,IAASr0D,GAAO,GAAG02D,WAClCI,EAAezC,IAASr0D,GAAO,GAAG02D,WACxC,OACEpmF,EAAAA,GAAAA,GAACg+E,GAAmB,CAClB9wE,MAAOsmC,EAAQuvC,GAAcrzD,IAC7BvjB,YAAaqnC,EAAQmwC,GAAoBj0D,GAAQ82D,GACjD9I,UAAW6I,EACX5I,WAAY6I,EACZvI,kBAAmBx4B,GAAK6gC,EAAAA,IAAqB9kF,OAAS,aASpE,GAAgB,qBAAZsnC,EACF,OACElpC,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAaxd,SAAA,EAC3BC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAaxd,UAC3BC,EAAAA,GAAAA,GAACq/E,GAA6B,CAAC9lE,SAAU6qE,IAAsB9/E,OAEjEtE,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAaxd,SACzByzC,EAAQmuC,GAAuBG,qBAElC9hF,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAmBxd,UAChCg0B,EAAAA,GAAAA,GAAWyf,EAAQsvC,GAA6BhB,kBAAmB,CAAC,YAM7E,GAAgB,YAAZh5C,EACF,OACE9oC,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAeqH,GD9RsQ,YC8RxOxd,UAC3DC,EAAAA,GAAAA,GAACymF,GAA4B,MAKnC,MAAMhhC,EAAIo+B,EAAM6C,cAActqD,QAAQ0M,GACtC,IAAW,IAAP2c,EAAU,OACd,MAAMkhC,EAA8C,SAA3B9C,EAAM6C,cAAcjhC,GAC7C,OACE7lD,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAaxd,SAAA,EAC3BC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAaxd,UAC3BC,EAAAA,GAAAA,GAACwgF,GAA0B,CACzBjnE,SAAU6qE,IAAsB9/E,EAChC48E,QAAS2C,EAAM+C,OAAOnhC,GAAG5lD,GACzBwhF,eAAgBwC,EAAM+C,OAAOnhC,GAAGrlB,UAChCghD,OAAQyF,EAAAA,IAAsBh3D,SAASiZ,GACvCxkC,MAAOA,EACP68E,mBAAoB78E,IAAUigF,OAGlCvkF,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAaxd,SACzB4mF,EACG75E,EACA60E,GAAuBkC,EAAM6C,cAAcjhC,SAC3C/iD,EACA,CAAE03C,WAAW,EAAM0sC,kBAAmB,CAAC,QAEvCtzC,EAAQmuC,GAAuBkC,EAAM6C,cAAcjhC,QAEzDzlD,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAmBxd,UAChCg0B,EAAAA,GAAAA,GAAW4yD,EACR75E,EACAg2E,GAA6Be,EAAM6C,cAAcjhC,SACjD/iD,EACA,CAAE03C,WAAW,EAAM0sC,kBAAmB,CAAC,QAEvCtzC,EAAQsvC,GAA6Be,EAAM6C,cAAcjhC,KAAM,CAAC,kBAS9E7lD,EAAAA,GAAAA,IAAA,OACEE,WAAWoW,EAAAA,GAAAA,GD7U0f,YC+UlgB4uE,GAA4C,IAAtBV,ID/UsiB,YCgV7jBrkF,SAAA,EAEFC,EAAAA,GAAAA,GAAC08E,GAAU,CACTl7E,OAAQ8iF,EAAAA,IAAyB9iF,OACjC07C,OAAQknC,EACRzH,cAAeiJ,IAEhB96E,QAAQo6E,KACPllF,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,WAAWoW,EAAAA,GAAAA,GDzVoB,YC0V/BwsB,SAAUohD,EACVnhD,qBAAsBmhD,EACtBh2E,QAASg2E,EAAY/4D,EAASzG,EAAYvkB,SAEzCmlF,aCpQb,IAAevmF,EAAAA,EAAAA,KArEiCooF,EAC9C/9C,SAAQC,UAAS+9C,oBACjBx5E,WAAU1N,YAAWmnF,iBAErB,MAAMzzC,GAAUzmC,EAAAA,EAAAA,MAEV,OACJo4E,EAAM,OAAElrC,EAAM,SAAEmrC,GACdp8C,EACEvC,EAAQ,UAAWuC,EAASA,EAAOvC,WAAQ/jC,EAC3CwkF,EAAWj0E,KAAKmI,MAAM6+B,EAASkrC,GAC/BgC,EAAoB1gD,EAAQA,EAAQ,OAAI/jC,EAExC0kF,GAAWt/E,EAAAA,EAAAA,KAAQ,IAChBk/E,GAAqBA,EAAoBE,EAC5Cj0E,KAAKqpE,KAAK,IAAM4K,GAAYF,EAAoB,WAChDtkF,GACH,CAACskF,EAAmBE,IAEjBG,GAAe1nF,EAAAA,EAAAA,KAAaiN,IAC5BA,EAAEC,OAAOo8B,SACXz7B,EAAS23E,KAEV,CAACA,EAAQ33E,IAEZ,OACE5N,EAAAA,GAAAA,IAAA,SACEE,WAAWoW,EAAAA,GAAAA,GACT+wE,ECjD+C,WAA7B,WDkDjBh+C,IAAYg+C,GClDsD,WDmDnEnnF,GAEFsW,IAAKo9B,EAAQ5hB,MAAQ,WAAQlvB,EAAU3C,SAAA,EAEvCC,EAAAA,GAAAA,GAAA,SACEF,UCxDsF,WDyDtFoB,KAAK,QACLoM,KAAK,sBACLZ,MAAOy4E,EACPl8C,QAASA,EACTz7B,SAAU65E,KAEZznF,EAAAA,GAAAA,IAAA,OAAKE,UC/DwG,WD+D9EC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,OAAKE,UChEyH,WDgEjGC,SAAA,CAC1B+K,QAAQs8E,KACPxnF,EAAAA,GAAAA,IAAA,QACEE,WAAWoW,EAAAA,GAAAA,GCnE2M,WAA9B,YDoExLhJ,MAAOsmC,EAAQ,gBAAgBzzC,SAAA,CAE9B,IAAI,IAEJqnF,EAAS,OAIb5zC,EAAQ,SAAU2xC,OAErBnlF,EAAAA,GAAAA,GAAA,OAAKF,UC9E+I,WD8EpHC,SAC5BknF,GAAcE,EAAqB,IAAGG,EAAAA,GAAAA,IAAuBrtC,EAAQmrC,EAAU5xC,EAAQwjB,WAAWvwB,IAChG+M,EAAQ,iBAAiB8zC,EAAAA,GAAAA,IAAuBJ,EAAU9B,EAAU5xC,EAAQwjB,UAElFh3D,EAAAA,GAAAA,GAAA,OAAKF,UClFmK,WDkF1IC,UAC3BunF,EAAAA,GAAAA,IAAuBrtC,EAAQmrC,EAAU5xC,EAAQwjB,iBEnF5D,GAAujB,W,szBC8DjjBuwB,GAAoB,EAAI5xE,EAAAA,EAExB6xE,GAAiE,CACrEnmD,QAASomD,GACT7F,cAAe8F,GACf7F,mBAAoB8F,GACpB7F,iBAAkB8F,GAClB7F,eAAgB8F,GAChB7F,OAAQ8F,GACR7F,cAAe8F,GACf7F,cAAe8F,GACf7F,gBAAiB8F,GACjB7F,YAAa8F,GACb7F,yBAA0B8F,GAC1B7F,kBAAmB8F,GACnB7F,aAAckF,GACdjF,aAAc6F,GACd5F,WAAY6F,GACZ5F,UAAW6F,GACX5F,gBAAiB6F,GACjB5F,QAAS6F,GACT5F,KAAMmF,IAoaR,IAAerpF,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAsBrN,IACxC,MAAM,aACJuvC,IACE9hC,EAAAA,EAAAA,KAAezN,GAEbqnF,EAAW93C,GAAc+3C,YAAax4C,EAAAA,EAAAA,KAAW9uC,EAAQuvC,EAAa+3C,iBAAcjmF,EACpFkmF,EAAsBF,GAAUG,YAAcxnF,EAAOynF,aAAapiD,KAAKgiD,EAASG,YAAYE,iBAC9FrmF,EACEsmF,EAAoBJ,GAAsBK,EAAAA,EAAAA,KAAiB5nF,EAAQunF,EAAoBM,qBACzFxmF,EAEJ,MAAO,CACLyxB,cAAe9yB,EAAO8yB,cACtB0vD,MAAOjzC,GAAcizC,MACrBsF,UAAWv4C,GAAcu4C,UACzBC,OAAQx4C,GAAcw4C,OACtBC,aAAcz4C,GAAcy4C,aAC5BC,KAAM14C,GAAc04C,KACpBZ,WACAE,sBACAI,oBACAO,OAAQ34C,GAAc44C,UAAWr5C,EAAAA,EAAAA,KAAW9uC,EAAQuvC,EAAa44C,eAAY9mF,EAC7Ey/B,eAAgByO,GAAczO,eAC9B2hD,WAAWxiD,EAAAA,EAAAA,KAA2BjgC,GACtCooF,eAAeC,EAAAA,GAAAA,GAAmBroF,EAAQ,YAC1CsoF,cAAcD,EAAAA,GAAAA,GAAmBroF,EAAQ,iBACzCuoF,WAAWF,EAAAA,GAAAA,GAAmBroF,EAAQ,sBACtCwoF,YAAYH,EAAAA,GAAAA,GAAmBroF,EAAQ,kBACvC0iF,OAAQ1iF,EAAO4uC,WAAW8zC,OAC1B+F,YAAazoF,EAAO4uC,WAAW85C,mBAC/BC,mBAAoB3oF,EAAO4uC,WAAW+5C,mBACtChG,kBAAmB3iF,EAAO4uC,WAAW+zC,qBA/BrBt1E,EAtYgCu7E,EAClDv+E,SACAyoB,gBACAu0D,WACAE,sBACAI,oBACAnF,QACA1hD,iBACA2hD,YACA2F,gBACAI,aACAF,eACAC,YACA7F,SACA+F,cACAE,qBACAb,YACAC,SACAG,SACAF,eACArF,oBACAsF,WAEA,MAAMxP,GAAY1wE,EAAAA,EAAAA,OACZ,kBACJ8gF,EAAiB,YAAEhkB,EAAW,gBAAEikB,EAAe,iBAAEhpB,EAAgB,aAAEipB,EAAY,eAAEC,IAC/Et+E,EAAAA,EAAAA,MAEEynC,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,MACN62C,EAAgBC,IAAmBr+E,EAAAA,EAAAA,KAAS,IAC5C25E,EAAgB2E,IAAqBt+E,EAAAA,EAAAA,IAAwCi2B,IAC7EsoD,EAA4BC,IAAyBx+E,EAAAA,EAAAA,OAE5D5B,EAAAA,EAAAA,KAAU,KACHoB,EAGMy2B,GACTqoD,EAAkBroD,IAHlBooD,GAAgB,GAChBC,OAAkB9nF,MAInB,CAACgJ,EAAQy2B,IAEZ,MAAMwoD,GAAoBr+E,EAAAA,EAAAA,IAAiBw8B,IACzC0hD,EAAkB1hD,MAGd8hD,GAAqBt+E,EAAAA,EAAAA,IAAgB,KACzCk+E,OAAkB9nF,MASdmoF,GAA4Bv+E,EAAAA,EAAAA,IAAiByiD,IAClC+qB,EAAUvwE,UAGrBugF,EACF5jB,EAAY,CACVhlE,KAAM,OACN4mE,KAAMgiB,IAECE,IACT7oB,EAAiB,CACf7pD,IAAK,GAAGwxD,EAAAA,MAAkBkhB,WAA4Bj7B,GAAc,YAEtEm7B,SAIE5lE,GAAchY,EAAAA,EAAAA,IAAgB,KAC9Bm+E,EACFI,EAA0B5rC,OAAOwrC,EAA2BtF,SAE5D0F,OAIEC,GAAiCx+E,EAAAA,EAAAA,IAAiB64E,IACtD,MAAM4F,EAAclH,GAAOt2E,QAAQgkC,MAAMvI,GAAWA,EAAOm8C,SAAWA,IACtEuF,EAAsBK,MAGlBC,GAAe1+E,EAAAA,EAAAA,IAAgB,KACnC,MAAMojD,EAASoqB,EAAUvwE,QACzB,GAAKmmD,GACDhkD,EAAQ,CACV,MAAM,IACJ0X,EAAG,KAAEvH,EAAI,MAAErS,EAAK,OAAEK,GAChB6lD,EAAOvrD,cAAc,kBAAmB+X,wBAC5CiuE,EAAgB,CACd/mE,MACAvH,OACArS,QACAK,SACAohF,WAAW,GAEf,MAGF3gF,EAAAA,EAAAA,KAAU,KACJ6+E,GACF6B,MAED,CAAC7B,EAAW6B,KAEf1hF,EAAAA,EAAAA,IAAc,EAAE4hF,MACVA,IAAkBpH,GAEtBkH,MACC,CAAClH,EAAWkH,IAEf,MAAM/F,GAAmBn9E,EAAAA,EAAAA,KAAQ,IAC1Bk8E,EACEA,EAAkBvmD,QAAQqL,GAAYw7C,EAAAA,IAAyBz0D,SAASiZ,KADhDw7C,EAAAA,KAE9B,CAACN,KAEJ15E,EAAAA,EAAAA,KAAU,KACHs+E,IAAuBI,GAC5BoB,EAAa,CACXlB,eAAgBN,EAAoBM,mBAErC,CAACkB,EAAcxB,EAAqBI,KAEvC1+E,EAAAA,EAAAA,KAAU,KACR,MAAO6gF,GAAiBtH,GAAOt2E,SAAW,GAC1Cm9E,EAAsBS,KACrB,CAACtH,IAEJ,MAAMuH,GAAsB9+E,EAAAA,EAAAA,IAAgB,KACrC08E,GAELqB,EAAe,CACbnB,eAAgBF,OAIdhC,IAAoBl/E,EAAAA,EAAAA,KAAQ,KAChC,MAAMujF,EAAcxH,GAAOt2E,QAAQgkC,MAAMvI,GAA6B,IAAlBA,EAAOm8C,SAC3D,GAAKkG,EAGL,OAAOhmE,OAAOgmE,EAAYpxC,UACzB,CAAC4pC,IAEEyH,IAAsBxjF,EAAAA,EAAAA,KAAQ,KAClC,IAAK2iF,EACH,OAEF,MAAM,OAAExwC,EAAM,OAAEkrC,EAAM,SAAEC,GAAaqF,EAC/BpF,EAAgBpyE,KAAKmI,MAAM6+B,EAASkrC,GAC1C,OAAOI,EAAAA,GAAAA,IACLz4E,EACAu4E,EACAD,KAED,CAACqF,EAA4B39E,IAEhC,GAAK+2E,KAAU+E,GAAwBI,GA4IvC,OACEhpF,EAAAA,GAAAA,GAACmN,EAAAA,EAAK,CACJrN,UDjaiB,WCkajB8L,QAASs+E,EACTx+E,OAAQA,EACRouE,UAAWA,EAAU/5E,UAErBC,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CAACzvB,KAAK,QAAQ0vB,UAAW6oD,EAAiB,EAAI,EAAG/lF,UDtanB,WCsagDC,SACrF8lF,GAgEA7lF,EAAAA,GAAAA,GAAC4jF,GAAmB,CAClBzhD,eAAgB0jD,EAChB96D,OAAQ6/D,EACR/G,MAAOA,EACPK,iBAAkB2G,EAClB/G,UAAWA,EACXC,OAAQA,EACRC,kBAAmBA,EACnBC,mBAAoBwG,KAvEtB7qF,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GDxa2D,WCwa/B,iBAAkB8uC,SApQtE,SAAsBp4C,GACpB,MAAM,UAAE2tB,GAAc3tB,EAAE6X,cAExB8lE,EAAgBhwD,GAAa,IAC/B,EAgQ6Fx6B,SAAA,EACnFC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLnS,KAAK,UACLJ,UD5awb,WC6axb8N,MAAM,cACNE,QAASA,IAAMo8E,IACf53E,UAAWkhC,EAAQ,SAASzzC,UAE5BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,YAjGvB,WACE,GAAIg8E,EAAM,CACR,MAAMiC,GAAcC,EAAAA,GAAAA,IAAmBlC,GACvC,OACEtpF,EAAAA,GAAAA,GAACyrF,GAAAA,EAAe,CACdC,MAAM,UACNrN,QAASkN,EACT39E,MAAM,SACNV,MAAOy+E,KACPx/E,aAAa4nB,EAAAA,GAAAA,GAAW63D,KAAwB,CAAC,kBAAmB,UACpE9rF,UD1V41B,YC6Vl2B,CAEA,OAAK8oF,GAaHhpF,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAC6rF,GAAAA,EAAW,CACV/rF,UD9W8H,WC+W9HgO,QAASs9E,EACTrC,WAAYH,EAAoB/oF,GAChCf,OAAK,EACLoB,KAAMqnF,MAERvnF,EAAAA,GAAAA,GAAA,MAAIF,WAAWoW,EAAAA,GAAAA,GDpX2N,WCoXzL8yE,GDpX8mB,YCoXlkBjpF,SAC1F4rF,QAEH3rF,EAAAA,GAAAA,GAAA,OAAKF,UDvX8P,WCuXhOC,UAChCg0B,EAAAA,GAAAA,GAAW63D,KAAwB,CAAC,kBAAmB,gBAvB1D5rF,EAAAA,GAAAA,GAACyrF,GAAAA,EAAe,CACdC,MAAM,eACN99E,MAAM,SACNV,MAAOy+E,KACPx/E,aAAa4nB,EAAAA,GAAAA,GAAW63D,KAAwB,CAAC,kBAAmB,UACpE9rF,UDtW2zB,YC4Xn0B,CAuDWgsF,IACChI,IAAcsF,IArCtBppF,EAAAA,GAAAA,GAAA,OAAKF,UD/YyvB,WC+YntBC,SACxC8jF,GAAOt2E,QACLiG,KAAKw1B,IACJhpC,EAAAA,GAAAA,GAAC+mF,GAAyB,CACxBjnF,UDnZsxB,WCqZtxBkpC,OAAQA,EACRx7B,SAAUs9E,EACV9D,kBAAmBA,GACnB/9C,QAASwhD,GAA4BtF,SAAWn8C,EAAOm8C,QAJlDn8C,EAAOiR,aAiCdj6C,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GDrbkU,WCqbpSo0E,GDrbyV,YCqblTvqF,UACnFC,EAAAA,GAAAA,GAAA,MAAIF,UDtbof,WCsbhdC,SACrCyzC,EAAQ,wBAGb5zC,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GD1biQ,WC0brO4tE,GD1bkR,YC0bpP/jF,SAAA,CACvEklF,EAAiBzxE,KAAI,CAACs1B,EAASxkC,KAC9B,MAAMqiF,EAA+B,SAAZ79C,EACzB,OACE9oC,EAAAA,GAAAA,GAACi8E,GAAkB,CAEjB/uE,MAAOy5E,EACH75E,EAAK60E,GAAuB74C,IAC5B0K,EAAQmuC,GAAuB74C,IACnCj0B,KAAkB,kBAAZi0B,EACF0K,EAAQsvC,GAA6Bh6C,GACrC,CAAC2gD,EAAeE,EAAcC,EAAWC,EAxY1C,IAyYClD,EACE75E,EAAKg2E,GAA6Bh6C,IAClC0K,EAAQsvC,GAA6Bh6C,IAC3C91B,KAAMw0E,GAA4B1+C,GAClCxkC,MAAOA,EACP6uB,MAAO8xD,EAAiBzjF,OACxBsnC,QAASA,EACTh7B,QAAS68E,GAdJ7hD,OAkBXlpC,EAAAA,GAAAA,IAAA,OACEE,WAAWoW,EAAAA,GAAAA,GAAeqH,GDld6kB,YCmdvmBnH,IAAKo9B,EAAQ5hB,MAAQ,WAAQlvB,EAAU3C,SAAA,EAEvCC,EAAAA,GAAAA,GAAA,KAAAD,UACGg0B,EAAAA,GAAAA,GAAWyf,EAAQ,2BAA4B,CAAC,uBAEnDxzC,EAAAA,GAAAA,GAAA,KAAAD,UACGg0B,EAAAA,GAAAA,GAAWyf,EAAQ,4BAA6B,CAAC,yBA3FlE,WACE,GAAKqwC,KAAUuF,GAAUV,GAAU7oF,KAAOs0B,GAI1C,OACEn0B,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAmBnH,IAAKo9B,EAAQ5hB,MAAQ,WAAQlvB,EAAU3C,UACvEurC,EAAAA,GAAAA,IAAuB,CACtBz2B,KAAMgvE,EAAMkI,WACZC,SAAUnI,EAAMoI,kBAIxB,CAiFaC,OAEDpI,GAAa2G,IACbzqF,EAAAA,GAAAA,GAAA,OAAKF,UD/dwnB,WC+d/lBC,UAC5BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC7N,UDhe2C,WCgejB4iC,SAAO,EAACC,qBAAmB,EAAC70B,QAASwW,EAAYvkB,SAChFyzC,EAAQ,qBAAsB83C,eA5M/C,SAASK,KACP,GAAIrC,EACF,OAAOx8E,EAAK,qBAGd,GAAIs8E,EACF,OAAOr1D,EAAAA,GAAAA,GACL20D,GAAU7oF,KAAOs0B,EACbqf,EAAQ,sDAAuD,EAAC5J,EAAAA,EAAAA,IAAgB2/C,GAASF,IACzF71C,EAAQ,8CAA+C,EAAC5J,EAAAA,EAAAA,IAAgB8+C,GAAWW,IACvF,CAAC,kBAAmB,UAIxB,GAAIL,GAAqBN,EAAU,CACjC,MAAMyD,EAAW34C,EAAQ,kCAAkC4jB,QAAQ,UAAUxtB,EAAAA,EAAAA,IAAgB8+C,KACtF0D,EAAOC,GAAUF,EAASnR,MAAM,UAEjCsR,EAAQtD,EAAkBuD,oBAC9BvsF,EAAAA,GAAAA,GAAC6rF,GAAAA,EAAW,CAAC/rF,UDxS8sB,WCwSxqBipF,WAAYC,EAAkBuD,0BAC/E7pF,EACE8pF,GACJ5sF,EAAAA,GAAAA,IAAA,QAAME,UD3SqrB,WC2SnpBgO,QAASs9E,EAAoBrrF,SAAA,CAClEusF,GACAv4D,EAAAA,GAAAA,GAAWi1D,EAAkB97E,UAGlC,MAAO,EAAC6mB,EAAAA,GAAAA,GAAWq4D,GAAQI,GAAMz4D,EAAAA,GAAAA,GAAWs4D,GAC9C,CAEA,OAAOt4D,EAAAA,GAAAA,GACL20D,EACIl1C,EAAQ,kCAAkC5J,EAAAA,EAAAA,IAAgB8+C,IAC1Dl1C,EAAQswC,EAAY,iCAAmC,mBAC3D,CAAC,kBAAmB,SAExB,CAEA,SAAS8H,KACP,GAAItC,EAAM,CACR,MAAMmD,EAA6B,mBAAdnD,EAAKpoF,KAA4BooF,EAAKmD,aAAe,EAC1E,OAAO3/E,EAAK,iCAAkC,CAAEqmB,MAAOs5D,GACzD,CAEA,OAAIrD,EACKV,GAAU7oF,KAAOs0B,EACpBqf,EAAQ,0DAA0D5J,EAAAA,EAAAA,IAAgB2/C,IAClF/1C,EAAQ,kDAILA,EADLw1C,EACa,0CAGVN,EACK,oCACA5E,EAAY,oCAAsC,0BAChE,M,4BCvQF,MAEMx8B,GAAkB,iBAgLxB,IAAe3oD,EAAAA,EAAAA,KA9KI+tF,EACjB5sF,YACA6kC,eACAD,gBACAygB,QACA3gB,cACAmoD,eACAj4D,YACAk4D,kBACAnoD,oBACAooD,aACA3nD,gBACA4nD,gBACAloD,qBACAmoD,sBACAhoD,iBACAioD,kBACA5nC,gBACG6nC,MAEH,MAAMngF,GAAOC,EAAAA,EAAAA,KACPgsD,GAAW3vD,EAAAA,EAAAA,MAEX47B,EAAgBioD,EAAcjoD,cAC9BkoD,EAAuBloD,EAAgBioD,EAAcC,0BAAuBxqF,EAC5EyqF,EAAyBnoD,EAAgBioD,EAAcE,4BAAyBzqF,GAEtF4H,EAAAA,EAAAA,KAAU,KACR,IAAKq6B,EAAc,OACnB,MAAMyoD,EAAYziF,OAAOC,YAAW,MAClC+hC,EAAAA,EAAAA,KAAe,KACbosB,EAASxvD,SAASmwD,aAnCH,KAuCnB,MAAO,KACL/uD,OAAON,aAAa+iF,MAErB,CAACzoD,IAEJ,MAAM0oD,GAAiBvlF,EAAAA,EAAAA,KAAQ,IACzBk9B,EACKioD,EAAcI,eAGhBJ,EAAcK,cAAgB,CAACL,EAAcK,eAAiBhpD,GAAAA,GACpE,CAACU,EAAeioD,EAAcK,cAAeL,EAAcI,iBAExDE,GAA0BzlF,EAAAA,EAAAA,KAAQ,IAAM,IAAI0lF,IAAIN,IAAuB,CAACA,IACxEO,GAA4B3lF,EAAAA,EAAAA,KAAQ,IAAM,IAAI0lF,IAAIL,IAAyB,CAACA,IAE5EO,GAAuB5lF,EAAAA,EAAAA,KAAQ,KACnC,GAAI08B,EACF,OAAO2gB,EAAM3xC,KAAK7E,GAASA,EAAKjC,QAGlC,MAAMihF,EAA2C,GAC3CC,EAAqC,GACrCC,EAA+C,GAYrD,OAVA1oC,EAAM3tC,SAAS7I,IACT4+E,EAAwBO,IAAIn/E,EAAKjC,OACnCihF,EAAqB56E,KAAKpE,GACjB8+E,EAA0BK,IAAIn/E,EAAKjC,OAC5CmhF,EAAyB96E,KAAKpE,GAE9Bi/E,EAAe76E,KAAKpE,MAIjBg/E,EAAqBI,OAAOH,EAAgBC,GAA0Br6E,KAAK7E,GAASA,EAAKjC,UAC/F,CAAC83B,EAAa2gB,EAAOooC,EAAyBE,IAE3CO,GAAkB1hF,EAAAA,EAAAA,IAAiBI,IACvC,GAAIs4B,EAAe,CACjB,MAAMipD,EAAoBZ,EAAejvC,QACnC95C,EAAQ2pF,EAAkB7xD,QAAQ1vB,GAQxC,OAPIpI,GAAS,EACX2pF,EAAkBC,OAAO5pF,EAAO,GAEhC2pF,EAAkBl7E,KAAKrG,QAGzBugF,EAAckB,yBAAyBF,EAEzC,CAEAhB,EAAcmB,wBAAwB1hF,OAGjC2hF,EAAoBlmC,IAAWC,EAAAA,GAAAA,GACpChD,EAAYsoC,EAAsB5iF,QAAQiiF,GAAuBvoD,IAG7D8pD,GAAqBhiF,EAAAA,EAAAA,IAAiBM,IAC1C,MAAM,MAAEF,GAAUE,EAAE6X,cACpBsgB,IAAiBr4B,MAGb6hF,GAAa5uF,EAAAA,EAAAA,KAAa+M,IAC9B,MAAMiC,EAAOw2C,EAAM5T,MAAMi9C,GAAeA,EAAW9hF,QAAUA,IAC7D,IAAKiC,EAAM,OAEX,MAAM,MAAE1B,EAAK,SAAEwhF,EAAU/5D,UAAWg6D,GAAkB//E,EAChDggF,EAAqBlB,EAA0BK,IAAIphF,GACnDkiF,EAAmBrB,EAAwBO,IAAIphF,GAC/CmiF,EAAWF,GAAsBC,EACjCE,EAAYzB,EAAex9D,SAASnjB,GAa1C,OACE1M,EAAAA,GAAAA,GAAC+qD,GAAAA,EAAU,CAETjrD,WAAWoW,EAAAA,GAAAA,GAAeoxC,GAAiBwlC,GAC3C5/E,MAAOD,EACP0lB,SAAU87D,EACVvuE,SAAU2uE,EACVrsD,SAAUqqD,EACVntE,QAAM,EACNqvE,aAnBEF,GAAiB7uF,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,eACV,UAAlB43B,GACKllC,EAAAA,GAAAA,GAACgvF,GAAAA,EAAK,CAAC/lD,QAAS6lD,EAAW5uE,SAAU2uE,EAAUn6D,UAAWg6D,EAAeO,WAAS,IAErE,aAAlB/pD,GACKllC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CAAC7pB,QAAS6lD,EAAW5uE,SAAU2uE,EAAUn6D,UAAWg6D,EAAeO,WAAS,SAD9F,EAiBEnhF,QAASA,IAAMkgF,EAAgBthF,GAE/BsgF,gBAAiBA,GAAmB,KAAOA,EAAgBtgF,EAAOkiF,KAX7DliF,KAcR,CACDy4C,EAAOsoC,EAA2BF,EAAyBF,EAAgBR,EAAYG,EACvF9nD,EAAe4nD,IAGjB,OACEltF,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAAA,EAAOhY,UAAWzF,GAAWC,SAAA,CACzD4kC,IACC3kC,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAAA,EAAO6qB,OAAQ,iBAAkBhyB,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,UAClGC,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACR7N,GAAI6kC,EACJ1wB,IAAK+kD,EACLrsD,MAAO83B,EACPh3B,SAAU8gF,EACV/iC,YAAa9mB,GAAqB33B,EAAK,cAK5CuhF,GAAoB7sF,QACnBxB,EAAAA,GAAAA,GAACklD,GAAAA,EAAc,CACbplD,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAAA,EAAO2xE,WAAYtqD,GAAsBrnB,GAAAA,EAAO4xE,OAAQ,iBAClFhqC,MAAOkpC,EACPviC,aAAc,IAAIxE,KAClBlC,WAAY+C,EACZykC,gBAAiBA,EAAgB7sF,SAEhCsuF,EAAmB76E,KAAK9G,GAAU6hF,EAAW7hF,OAE7CgoB,IAAa25D,GAAuBA,EAAmB7sF,QAG1DxB,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,KAFR1rD,EAAAA,GAAAA,GAAA,KAAGF,UAAWyd,GAAAA,EAAO6xE,UAAUrvF,SAAE4sF,GAAgB7/E,EAAK,gCCjP9D,IAAgB,KAAO,WAAW,eAAiB,WAAW,YAAc,WAAW,OAAS,WAAW,OAAS,YCwHpH,IAAenO,EAAAA,EAAAA,KA5F0B0wF,EACvC3jF,SACAE,UACA6oD,WACA6D,cACAg3B,qBAEA,MAAM,iBAAE5tD,IAAqB31B,EAAAA,EAAAA,MAEvBe,GAAOC,EAAAA,EAAAA,MAENwiF,EAAoBC,IAAyBtjF,EAAAA,EAAAA,IAAmB,IAEjEujF,GADyBp5D,EAAAA,EAAAA,GAAsBk5D,KACIA,EAEnDzrD,GAAeh8B,EAAAA,EAAAA,KAAQ,IACtBwwD,EAIEA,EAAY76B,QAAQiyD,IAAaA,EAAQr6E,UAA6B,OAAjBq6E,EAAQC,OACjEn8E,KAAI,EACHm8E,OAAMC,kBACF,CACJljF,MAAOijF,EACP1iF,MAAO2iF,MARF,IAUR,CAACt3B,IAEEu3B,GAA0BvjF,EAAAA,EAAAA,IAAiBwjF,IAC3CR,GAAkBQ,EAAetuF,OAAS8tF,EAC5C5tD,EAAiB,CACf9gC,QAASkM,EAAK,qCAAsCwiF,KAIxDE,EAAsBM,MAGlBhqD,GAAex5B,EAAAA,EAAAA,IAAgB,KACnCmoD,EAAS86B,GACT3jF,OAGF,OACEhM,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJrN,UAAWyd,GAAOygB,KAClBtyB,OAAQA,EACRE,QAASA,EACTwB,QAAS04B,EAAa/lC,SAAA,EAEtBC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOhY,UAAUxF,UAC/BH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOwyE,eAAehwF,SAAA,EACpCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLnS,KAAK,UACL0N,MAAM,cACNE,QAASlC,EAAQ7L,UAEjBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAGbtN,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAOyyE,YAAYjwF,SAC/B+M,EAAK,iCAKZ9M,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAO0yE,KAAM,iBAAiBlwF,UAC3DC,EAAAA,GAAAA,GAAC0sF,GAAU,CACT5sF,UAAWyd,GAAO2yE,OAClB/qC,MAAOrhB,EACPupD,eAAgBkC,EAChBpB,uBAAwB0B,EACxBjD,gBAAiB6C,EACjBzqD,eAAa,EACbE,cAAc,gBAIlBllC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOusB,OAAO/pC,UAC5BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLzN,KAAK,UACL4N,QAASg4B,EAAa/lC,SAErB+M,EAAK,gC,mDCrFhB,MAkHA,IAAenO,EAAAA,EAAAA,KAlHoBwxF,EACjCzkF,SACA0kF,iBACAd,iBACAe,qBACAC,yBACA1kF,cAEA,MAAM,iBAAE81B,IAAqB31B,EAAAA,EAAAA,MACvBe,GAAOC,EAAAA,EAAAA,MAENwjF,EAAkBC,IAAuBtkF,EAAAA,EAAAA,SAA6BxJ,IACtEkhC,EAAaC,IAAkB33B,EAAAA,EAAAA,IAAiB,KAChDukF,EAAoBC,EAAkBC,IAAqB1xF,EAAAA,EAAAA,MAC3DwkC,EAAamtD,IAAkB1kF,EAAAA,EAAAA,IAAmBmkF,IAEzD/lF,EAAAA,EAAAA,KAAU,KACRsmF,EAAeP,KACd,CAACA,IAEJ,MAAMQ,GAAa/oF,EAAAA,EAAAA,KAAQ,KACzB,MAAMzG,GAASwtC,EAAAA,EAAAA,MACTqa,EAAY7nD,EAAO8nD,MAAMziB,MACzB,OAAEwW,EAAM,SAAEiP,GAAa9qD,EAAO8nD,MAAM4C,QACpC7nB,GAAOgZ,GAAU,IAAI6wC,OAAO5hC,GAAY,IAE9C,OAAOnoB,EAAAA,GAAAA,IAAOE,GAAK1wB,KAAK3T,GAAOqpD,EAAUrpD,KACtC49B,QAAQxuB,GACPA,KACEukB,EAAAA,EAAAA,IAAcvkB,KAAS6hF,EAAAA,EAAAA,IAAiB7hF,KACrCA,EAAKpP,KAAOuwF,IAChB58E,KAAKvE,GAASA,EAAKpP,OACvB,CAACuwF,IAEEW,GAAsBjpF,EAAAA,EAAAA,KAAQ,KAClC,MAAMkpF,EAAkBH,GAAa5sD,EAAAA,GAAAA,IAAmB,CAAEC,IAAK2sD,EAAY1sD,MAAOP,EAAa1iC,KAAM,SAAY,GAEjH,OAAOgsD,EAAAA,GAAAA,GAAY8jC,GACjB,EACAvtD,KACD,CAACotD,EAAYjtD,EAAaH,IAEvBwtD,GAAiC3kF,EAAAA,EAAAA,IAAiBwjF,IACtD,MAAM5mC,GAAYra,EAAAA,EAAAA,MAAYsa,MAAMziB,KAE9BwqD,EADgBpB,EAAeryD,QAAQ59B,IAAQ4jC,EAAY5T,SAAShwB,KAC/B0xC,MAAM1xC,IAC/C,MAAMoP,EAAOi6C,EAAUrpD,GACvB,OAAOoP,KAASkiF,EAAAA,EAAAA,IAAaliF,MAG3Bw0B,GAAajiC,QAAU8tF,EACzB5tD,EAAiB,CACf9gC,QAASkM,EAAK,0CAA2CwiF,KAKzD4B,GACFV,EAAoBU,GACpBR,KAEAE,EAAed,MAIbsB,GAAqC9kF,EAAAA,EAAAA,IAAgB,KACrDikF,GACFK,GAAe5sD,EAAAA,GAAAA,IAAO,IAAIP,EAAa8sD,KAEzCI,OAGIU,GAAqB/kF,EAAAA,EAAAA,IAAgB,KACzCgkF,EAAuB7sD,GACvB73B,OAGF,OACEhM,EAAAA,GAAAA,IAAC0xF,GAAAA,EAAW,CACV5lF,OAAQA,EACRE,QAASA,EACTsB,MAAOJ,EAAK,kCACZmjE,gBAAc,EACdshB,qBAAmB,EACnBC,iBAAe,EACfC,kBAAmB3kF,EAAK,QACxBuB,UAAWgjF,EACXjkF,QAASikF,EAAmBtxF,SAAA,EAE5BC,EAAAA,GAAAA,GAACokC,GAAAA,EAAU,CACTC,QAAS0sD,EACTttD,YAAaA,EACbe,YAAaZ,EACba,kBAAmB33B,EAAK,UACxBg4B,oBAAqBmsD,EACrBlsD,eAAgBlB,EAChBc,cAAY,EACZC,oBAAkB,EAClBK,YAAU,EACVD,eAAa,EACbE,cAAc,cAEhBllC,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZl2B,MAAOJ,EAAK,kCACZ+H,KAAM/H,EAAK,yCACXu2B,aAAcv2B,EAAK,OACnBpB,OAAQ+kF,EACR7kF,QAAS+kF,EACTrtD,eAAgB8tD,UCjDxB,IAAezyF,EAAAA,EAAAA,KA3D0B+yF,EACvC1oD,SAAQC,UACR37B,OAAMuH,OAAMvR,MACZquF,SAAQnkF,WAAUokF,gBAAe9xF,YACjC+xF,YAAWC,wBAEX,MAAMhlF,GAAOC,EAAAA,EAAAA,KAEb,IAAIglF,EAAkCjlF,EAAK+H,GACvC88E,GAAUG,GAAmBtwF,SAC/BuwF,EAAcD,EAAkBtwF,OAAS,EAAIswF,EAAkBtwF,OAAO4kF,WAAayL,GAGrF,MAAMxK,GAAe/6E,EAAAA,EAAAA,IAAiBM,IAChCA,EAAEC,OAAOo8B,SACXz7B,EAASw7B,MAIP1kB,GAAchY,EAAAA,EAAAA,IAAgB,KAClCslF,SAGF,OACEhyF,EAAAA,GAAAA,IAAA,SACEE,WAAWoW,EAAAA,GAAAA,GCrDS,WDqDsBpW,GAC1CsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAC1B+mC,KAAK,SACLD,SAAU,EAAEzpC,SAAA,EAEZC,EAAAA,GAAAA,GAAA,SACEF,UC3DqC,WD4DrCoB,KAAK,QACLoM,KAAK,kBACLZ,MAAOs8B,EACPC,QAASA,EACTz7B,SAAU65E,EACVv5E,QAAUlB,GAAMA,EAAEuJ,qBAEpBvW,EAAAA,GAAAA,IAAA,OAAKE,UCnEuD,WDmE7BC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,OAAKF,UCpE+J,WDoElI6D,IAAKL,EAAKglB,IAAI,GAAG9kB,WAAW,KAC9D5D,EAAAA,GAAAA,IAAA,OAAKE,UCrEmG,WDqExEC,SAAA,EAC9BC,EAAAA,GAAAA,GAAA,MAAIF,UCtEqH,WDsE7FC,SACzB+M,EAAKQ,KAEPqkF,GACC/xF,EAAAA,GAAAA,IAAA,OAAKE,UC1EoI,WD0E5GgO,QAASwW,EAAYvkB,SAAA,EAChDC,EAAAA,GAAAA,GAAA,QAAAD,SAAOgyF,KACP/xF,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAGbtN,EAAAA,GAAAA,GAAA,QAAMF,UC/EmL,WD+ErJC,SAAEgyF,gBEqDlD,IAAepzF,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAqB,CAACrN,GAAU+uF,qBAClD,MAAMrjC,EAAeqjC,GAAiBpjC,EAAAA,EAAAA,KAAmB3rD,EAAQ+uF,QAAkB1tF,EACnF,OAAKqqD,EAIE,CACLilC,QAASjlC,EAAailC,QACtBC,iBAAkBllC,EAAaklC,kBALxB,CAAC,IAHQvjF,EAhGYwjF,EAC9BxmF,SACA4jF,iBACA0C,UACAC,mBACA5B,qBACAC,yBACA1kF,cAEA,MAAM,iBAAE81B,IAAqB31B,EAAAA,EAAAA,MACvBe,GAAOC,EAAAA,EAAAA,MAEN62B,EAAaC,IAAkB33B,EAAAA,EAAAA,IAAiB,KAChDu3B,EAAamtD,IAAkB1kF,EAAAA,EAAAA,IAAmBmkF,IAEzD/lF,EAAAA,EAAAA,KAAU,KACRsmF,EAAeP,KACd,CAACA,IAEJ,MAAM8B,GAAYrqF,EAAAA,EAAAA,KAAQ,KACxB,MAAMzG,GAASwtC,EAAAA,EAAAA,OACT,KAAEnI,EAAI,aAAE0rD,GAAiB/wF,EAAOolC,MACtC,IAAKurD,GAASxwF,OACZ,MAAO,GAGT,MAAM6wF,EAAcJ,GAAoB,IAAIzE,IAAIzuC,OAAO6K,KAAKqoC,IAEtDlsD,GAAUusD,EAAAA,EAAAA,IACdN,EAAQx+E,KAAI,EAAGmqB,YAAaA,IAC5B+I,EACA0rD,GAGF,OAAOC,EAActsD,EAAQtI,QAAQE,IAAY00D,EAAYvE,IAAInwD,KAAWoI,IAC3E,CAACksD,EAAkBD,IAEhBO,GAAqBzqF,EAAAA,EAAAA,KAAQ,KACjC,MAAMq9B,GAAY0J,EAAAA,EAAAA,MAAYpI,MAAMC,KAC9B8rD,EAAkBL,GACpBluD,EAAAA,GAAAA,IAAmB,CAAEC,IAAKiuD,EAAWhuD,MAAOP,EAAa1iC,KAAM,SAAY,GAE/E,OAAOgsD,EAAAA,GAAAA,IAAYlpB,EAAAA,GAAAA,IAAOwuD,GAAiB/0D,QAAQE,IACjD,MAAMuS,EAAO/K,EAAUxH,GACvB,OAAKuS,KAIGuiD,EAAAA,EAAAA,IAAUviD,SAEnB,CAACiiD,EAAWvuD,IAET8uD,GAAgCpmF,EAAAA,EAAAA,IAAiBwjF,IACjDA,EAAetuF,OAAS8tF,EAC1B5tD,EAAiB,CACf9gC,QAASkM,EAAK,iCAAkCwiF,KAIpDsB,EAAed,MAGXuB,GAAqB/kF,EAAAA,EAAAA,IAAgB,KACzCgkF,EAAuB7sD,GACvB73B,OAGF,OACE5L,EAAAA,GAAAA,GAACsxF,GAAAA,EAAW,CACV5lF,OAAQA,EACRE,QAASA,EACTsB,MAAOJ,EAAK,8BACZmjE,gBAAc,EACdshB,qBAAmB,EACnBC,iBAAe,EACfC,kBAAmB3kF,EAAK,QACxBuB,UAAWgjF,EACXjkF,QAASikF,EAAmBtxF,UAE5BC,EAAAA,GAAAA,GAACokC,GAAAA,EAAU,CACTC,QAASkuD,EACT9uD,YAAaA,EACbe,YAAaZ,EACba,kBAAmB33B,EAAK,UACxBg4B,oBAAqB4tD,EACrB3tD,eAAgBlB,EAChBc,cAAY,EACZC,oBAAkB,EAClBK,YAAU,EACVD,eAAa,EACbE,cAAc,mBC9HtB,GAA0a,WAA1a,GAAse,WAAte,GAAigB,WAAjgB,GAA2hB,WAA3hB,GAA+rB,WAA/rB,GAA0tB,WAA1tB,GAA0vB,WAA1vB,GAA+zB,WAA/zB,GAA+1B,WAA/1B,GAA+3B,WAA/3B,GAAu8B,WAAv8B,GAAo+B,WAAp+B,GAA+kC,W,wGCyGzkCytD,GAAqD,CACzD,EAAGC,GACH,EAAGC,GACH,GAAIC,IA+xBN,IAAen0F,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAsBrN,IACxC,MAAM,cACJ0xF,IACEjkF,EAAAA,EAAAA,KAAezN,GACbkL,EAASwmF,GAAexmF,OACxB0C,EAAO1C,GAAS6jC,EAAAA,EAAAA,KAAW/uC,EAAQkL,QAAU7J,EAC7C6wB,EAAYtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,GAExC,MAAO,CACL1C,SACAymF,MAAOD,GAAeC,MACtBC,mBAAoBF,GAAejB,kBACnCoB,oBAAqBH,GAAeI,mBACpCC,6BAA8B/xF,EAAO4uC,WAAWojD,yBAChDC,mBAAoBjyF,EAAO4uC,WAAWqjD,mBACtCC,mBAAoBlyF,EAAO4uC,WAAWujD,oBACtCC,sBAAuBpyF,EAAO4uC,WAAWyjD,qBACzCp7B,YAAaj3D,EAAOi3D,YAAYq7B,QAChCC,gBAAiBb,GAAea,gBAChCrgE,YACAsgE,iBAAkBd,GAAee,eApBjBplF,EA5xB6BqlF,EAC/CxnF,SACAymF,QACAtnF,SACA6nB,YACA0/D,qBACAC,sBACAE,+BAA+BY,EAAAA,IAC/B17B,cACAs7B,kBACAH,wBAAwBQ,EAAAA,IACxBV,qBAAqBW,EAAAA,IACrBZ,qBACAO,uBAEA,MAAM/Z,GAAY1wE,EAAAA,EAAAA,OACZ,mBACJ+qF,EAAkB,YAAEjuB,EAAW,iBAAEvkC,EAAgB,sBACjDyyD,EAAqB,2BAAEC,IACrBtoF,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,MACNunF,EAAkBC,EAAcC,IAAiBv1F,EAAAA,EAAAA,MACjDw1F,EAA0BC,EAAwBC,IAA2B11F,EAAAA,EAAAA,MAC7EwxF,EAAoBC,EAAkBC,IAAqB1xF,EAAAA,EAAAA,MAC3D21F,EAAuBC,EAAqBC,IAAwB71F,EAAAA,EAAAA,MACpE81F,EAA0BC,EAAwBC,IAA2Bh2F,EAAAA,EAAAA,KAE9Ei2F,EAA6B,CAAC,CAClC5nF,KAAM,gBACNuH,KAAM,0BACNnI,MAAO,mBACPpJ,IAAKuvF,GACLzsD,QAAS,wBACTurD,QAAQ,EACRC,cAAeA,KACbiD,OAIAvB,GACF4B,EAAaniF,KAAK,CAChBzF,KAAM,gBACNuH,KAAM,0BACNnI,MAAO,iBACPpJ,IAAK6xF,GACL/uD,QAAS,sBACTurD,QAAQ,IAIZ,MAAOyD,EAAkBC,IAAuBnpF,EAAAA,EAAAA,IAAiB+f,KAAKC,MA7DrC,SA8D1Bo+D,EAAgBC,IAAmBr+E,EAAAA,EAAAA,KAAS,IAC5CopF,EAAyBC,IAA8BrpF,EAAAA,EAAAA,IA7DpC,IA8DnBspF,EAAwBC,KAAqBvpF,EAAAA,EAAAA,IAA0BgpF,EAAa,GAAGxoF,QACvFgpF,GAAoBC,KAAyBzpF,EAAAA,EAAAA,OAC7C0pF,GAA0BC,KAA+B3pF,EAAAA,EAAAA,IAA0B,QACnF4pF,GAAqBC,KAA0B7pF,EAAAA,EAAAA,OAC/C8pF,GAAiBC,KAAsB/pF,EAAAA,EAAAA,IAAmB,KAC1DinF,GAAoB+C,KAAyBhqF,EAAAA,EAAAA,IAAmB,KAChEqjF,GAAoBC,KAAyBtjF,EAAAA,EAAAA,IAA+B,KAC5EiqF,GAAmBC,KAAwBlqF,EAAAA,EAAAA,KAAkB,IAC7DmqF,GAAkBC,KAAuBpqF,EAAAA,EAAAA,KAAkB,IAC3DqqF,GAAkBC,KAAuBtqF,EAAAA,EAAAA,SAA6BxJ,IACtE+zF,GAAqBC,KAA0BxqF,EAAAA,EAAAA,SAAyCxJ,IAE7Fi0F,GAA0BC,KACxB1qF,EAAAA,EAAAA,SAA8CxJ,GAE5Cm0F,GAA+C,qBAA3BrB,EACpBsB,GAA6C,mBAA3BtB,EAClBuB,GAAoBF,KACpBb,GAAgBx0F,OAAS8zF,EAA0BU,GAAgBx0F,OACnEw1F,GAAgBD,GAAoB3D,EACpC6D,GAAqBvB,IAAoBwB,aAEzCC,IAAqBrvF,EAAAA,EAAAA,KAAQ,IAAM,CACvC,CACE4E,MAAO,MACPO,MAAOH,EAAKymB,EAAY,yBAA2B,sBACnDk7D,SAAUc,IAAsBA,GAAmB/tF,OAAS,EACxDsL,EAAK,kCAAmCyiF,GAAmB/tF,QAC3DsL,EAAK,6BAEX,CACEJ,MAAO,MACPO,MAAOH,EAAKymB,EAAY,yBAA2B,sBACnDk7D,SAAUc,IAAsBA,GAAmB/tF,OAAS,EACxDsL,EAAK,kCAAmCyiF,GAAmB/tF,QAC3DsL,EAAK,+BAEV,CAACymB,EAAWzmB,EAAMyiF,KAEf6H,GAAgBtqF,EAAK,SAAUgpF,IAC/BuB,GAAmD,kBAA1BzD,GAAiB1yF,KAC1Co2F,GAAqD,aAA1B1D,GAAiB1yF,KAE5Cq2F,IAAezvF,EAAAA,EAAAA,KAAQ,IACpBkrF,GAAOzhD,MAAM+3C,GAASA,EAAKnE,SAAW2Q,IAAuBxM,EAAK7iD,QAAUswD,MAClF,CAAC/D,EAAO8C,GAAqBiB,KAE1BS,IAAoB1vF,EAAAA,EAAAA,KAAQ,IACzB+rF,GAAkBtiD,MAAM+3C,GACtB+N,IAA0B/N,EAAKmO,QAAWd,IAA0Bc,SAE5E,CAACd,GAA0B9C,EAAkBwD,KAE1CK,IAAgB5vF,EAAAA,EAAAA,KAAQ,IACrBkrF,GAAOv1D,QAAQ6rD,GAASA,EAAK7iD,QAAUswD,IAAqBzN,EAAKlE,WAAauS,EAAAA,OACpF,CAAC3E,EAAO+D,KAEL/P,IAAoBl/E,EAAAA,EAAAA,KAAQ,KAChC,MAAM8vF,EAAYF,IAAel5C,QAAO,CAACiL,EAAK6/B,IACrCA,EAAKrvC,OAASwP,EAAIxP,OAASqvC,EAAO7/B,GACxCiuC,GAAc,IAEjB,OAAOE,GAAa3kF,KAAKmI,MAAMw8E,EAAU39C,OAAS29C,EAAUzS,UAC3D,CAACuS,KAEEG,IAAmB/vF,EAAAA,EAAAA,KAAQ,KACxBk8B,EAAAA,GAAAA,IAAQgvD,GAAOv1D,QAAQ6rD,GAASA,EAAKlE,WAAauS,EAAAA,OACrDnkF,KAAKskF,GAAWA,EAAOrxD,SAAU,IAAKgd,MAAK,CAACC,EAAGC,IAAMD,EAAIC,KAC5D,CAACqvC,IAEE+E,IAAqBjwF,EAAAA,EAAAA,KAAQ,KAC1Bk8B,EAAAA,GAAAA,IAAQ0xD,IAAoBsC,SAASxkF,KAAKskF,GAAWA,EAAOrxD,SAAU,IAAKgd,MAAK,CAACC,EAAGC,IAAMD,EAAIC,KACpG,CAAC+xC,MAEJprF,EAAAA,EAAAA,KAAU,KACJoB,GAAUsnF,GAAOxxF,SAAW61F,IAC9BtB,GAAuB/C,IAAQ,GAAG7N,UAEnC,CAACz5E,EAAQsnF,EAAOqE,MAEnB/sF,EAAAA,EAAAA,KAAU,KACJoB,GAAUmoF,GAAkBryF,SAAW81F,IACzC3B,GAAsB9B,IAAmB,MAE1C,CAACnoF,EAAQmoF,EAAkByD,MAE9BhtF,EAAAA,EAAAA,KAAU,KACJoB,GAAU2rF,KACZ9B,EAA2B3B,EAAgBqE,UAC3CrB,GAA4BhD,MAE7B,CAACloF,EAAQ2rF,GAAwBzD,KAEpCtpF,EAAAA,EAAAA,KAAU,KACJoB,GAAU4rF,KACZ/B,EAA2B3B,EAAgBqE,UAC3CvB,GAAuB9C,GACvBmC,GAAuBnC,EAAgBzO,WAExC,CAACz5E,EAAQ4rF,GAA0B1D,KAEtCtpF,EAAAA,EAAAA,KAAU,KACJ2oF,GACFgD,GAAmBhD,KAEpB,CAACA,KAEJ3oF,EAAAA,EAAAA,KAAU,KACJ4oF,GACFgD,GAAsBhD,KAEvB,CAACA,IAEJ,MAAMgF,IAAqB5rF,EAAAA,EAAAA,IAAgB,KACzCq1B,OAGI3G,IAAc1uB,EAAAA,EAAAA,IAAgB,KAClCsqF,QAA4Bl0F,GAC5Bg0F,QAAuBh0F,GACvBizF,QAAsBjzF,GACtBqzF,QAAuBrzF,GACvB6yF,EAxLwB,GAyLxBpB,OAGI7vE,IAAchY,EAAAA,EAAAA,IAAgB,KAG9B45D,EAFA2wB,GACEb,IAAiBx0F,OACP,CACVN,KAAM,WACNi3F,eAAgB5rF,EAChBw5B,QAASiwD,GACT5Q,SAAUmS,GAAcnS,SACxBnrC,OAAQs9C,GAAct9C,OACtBjR,OAAQuuD,IAGE,CACVr2F,KAAM,WACNqL,OAAQA,EACR6rF,qBAAsBjF,GACtBkF,wBAAsD,QAA7BzC,GACzB0C,UAAW/I,GACXgJ,kBAAmBpC,GACnBI,oBACAiC,UAAWpD,EAAmB,IAC9BhQ,SAAUmS,GAAcnS,SACxBnrC,OAAQs9C,GAAct9C,OACtBjR,OAAQuuD,IAIA,CACVr2F,KAAM,gBACNqL,OAAQA,EACR6rF,qBAAsBjF,GACtBkF,wBAAsD,QAA7BzC,GACzB0C,UAAW/I,GACXgJ,kBAAmBpC,GACnBI,oBACAiC,UAAWpD,EAAmB,IAC9BhQ,SAAUsQ,GAAoBtQ,SAC9BnrC,OAAQy7C,GAAoBz7C,OAC5Bw9C,MAAO/B,GAAoB+B,MAC3BhxD,MAAO6uD,IAIXt6D,QAGIy9D,IAA+BnsF,EAAAA,EAAAA,IAAgB,KAC/C+qF,GACFhD,EAA2B,CACzB9nF,OAAQA,EACRmsF,WAAY/B,GAA0B92F,GACtC84F,eAAgB,CACdP,qBAAsBjF,GACtBmF,UAAW/I,GACXgH,oBACAgC,kBAAmBpC,GACnBqC,UAAWpD,EAAmB,IAC9BqC,MAAOd,GAA0Bc,MACjCrS,SAAUoS,GAAmBpS,SAC7BnrC,OAAQu9C,GAAmBv9C,OAC3BxT,MAAOkwD,GAA0BsB,YAIrC7D,EAAsB,CACpB7nF,OAAQA,EACRmsF,WAAYjC,GAAqB52F,GACjC84F,eAAgB,CACdP,qBAAsBjF,GACtBmF,UAAW/I,GACXgH,oBACAgC,kBAAmBpC,GACnBqC,UAAWpD,EAAmB,IAC9BhQ,SAAUmS,GAAcnS,SACxBnrC,OAAQs9C,GAAct9C,UAK5B02C,IACA31D,QAGI49D,IAA8BtsF,EAAAA,EAAAA,IAAiBusF,IACnDtD,EAA2BsD,MAGvBC,IAA0BxsF,EAAAA,EAAAA,IAAiBusF,IAC/CtD,EAA2BsD,MAGvBE,IAA+BzsF,EAAAA,EAAAA,IAAiBM,IACpD4pF,GAAoB5pF,EAAEC,OAAOH,UAGzBmlF,IAAY/pF,EAAAA,EAAAA,KAAQ,KACxB,MAAMq9B,GAAY0J,EAAAA,EAAAA,MAAYpI,MAAMC,KACpC,OAAOsvD,IAAiBxiF,KAAKmqB,IAAWiM,EAAAA,EAAAA,IAAgBzE,EAAUxH,MAAUjX,KAAK,QAChF,CAACsvE,KAQEgD,IAA+B1sF,EAAAA,EAAAA,IAAiBI,IACpDmpF,GAA4BnpF,MAGxBusF,IAAyB3sF,EAAAA,EAAAA,IAAiBI,IAC9C+oF,GAAkB/oF,GAClBupF,GAAmB,IACnBV,EA7SwB,MAgTpB2D,IAAyB5sF,EAAAA,EAAAA,IAAiB0mB,IAC9CqiE,EAAoBriE,EAAK8iC,WACzB0+B,OAGI2E,IAA+B7sF,EAAAA,EAAAA,IAAiBI,IACpD8iF,GAAsB9iF,MAGlB0sF,IAA8B9sF,EAAAA,EAAAA,IAAiBwjF,IACnDmG,GAAmBnG,GACdA,EAAetuF,QAClBi0F,GAAkB,uBAIhBxE,IAAiC3kF,EAAAA,EAAAA,IAAiBwjF,IACtDoG,GAAsBpG,MAGlBuJ,IAAgC/sF,EAAAA,EAAAA,IAAiBM,IACrDwpF,GAAqBxpF,EAAEC,OAAOo8B,YAG1BqwD,IAA+BhtF,EAAAA,EAAAA,IAAiBM,IACpD0pF,GAAoB1pF,EAAEC,OAAOo8B,YAGzBswD,IAAuBjtF,EAAAA,EAAAA,IAAgB,KAC3CooF,OAGI8E,IAAkBltF,EAAAA,EAAAA,IAAiB08B,IACvC2sD,GAAsB3sD,MA8FxB,SAASywD,KACP,OACE75F,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAexd,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAqBxd,SACjC+M,EAAK,6CAGR9M,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPE,UAAQ,EACR1iC,UAAU,wCAAuCC,UAEjDC,EAAAA,GAAAA,GAACoiD,GAAAA,EAAa,CACZ71C,OAAQA,EACR80C,OAAQv0C,EAAKymB,EAAY,kCACrB,gCAAiCyjE,IAAiBC,GAAoB,SAI7E9D,IAAoB3/E,KAAKi+B,IAEtBzxC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACP5iB,QAAM,EAEN5f,UAAU,wCAEVgO,QAASA,IA3CvB,SAAmCjO,GACjC,MAAM65F,EAAqBvG,GAAmB11D,QAAQgU,GAAcA,IAAc5xC,IAClFq2F,GAAsBwD,EACxB,CAwC6BC,CAA0BloD,GACzCiQ,cAAe1hD,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,QAAQxN,UDjjBumC,aCijBlkCC,UAEvEC,EAAAA,GAAAA,GAACoiD,GAAAA,EAAa,CACZ71C,OAAQklC,EAAU20C,cAPf30C,KAaV0hD,GAAmB3xF,OApdE,IAqdpBxB,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,MACL0M,QAAM,EACN5R,QAASknF,EACTl1F,UD/jBwlC,WCgkBxlC85F,cDhkBgnC,WCgkB/kC75F,SAEhC+M,EAAK,mCAKZlN,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAexd,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAqBxd,SACjC+M,EAAK,4BApHZ9M,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAexd,UAC7BC,EAAAA,GAAAA,GAACqN,GAAAA,EAAU,CACTC,KAAK,cACLC,QAAS4pF,GACT1pF,SAAUmoF,GACVpoF,SAAUwrF,GACVpH,cAAe2H,GACfM,kBD5d6iC,WC6d7iClI,QAAM,UAkHR3xF,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAoBxd,UACjCg0B,EAAAA,GAAAA,GAAWjnB,EAAKymB,EAAY,iCAAmC,sCAGlE3zB,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAexd,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAuBxd,SAAA,EACrCC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAaxd,SACzB+M,EAAK,uCAGR9M,EAAAA,GAAAA,GAAC6pC,GAAAA,EAAQ,CACP58B,MAAOH,EAAK,oCACZm8B,QAASotD,GACT7oF,SAAU8rF,QAIbjD,KACCz2F,EAAAA,GAAAA,IAAA,OAAKE,UDjmB8+B,WCimB98BC,SAAA,EACnCC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAaxd,SACzBu1F,KAEHt1F,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACR5N,UDtmBwgC,WCumBxgC4M,MAAO6pF,GACP/oF,SAAUurF,GACV9rF,MAAOH,EAAK,0CAMnBupF,GACES,IAAoBO,QAcjB30F,GAbF1C,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAoBxd,SACjCw2F,IAAkB/0F,QAASuyB,EAAAA,GAAAA,GAAWjnB,EAAK,6CAC1C2pF,GACI,CAACA,GAAoBwB,SAAU1B,GAAkBa,IACjD,CAACL,GAAmBR,GAAkBa,SAC1C10F,EACAozF,IAAsB,CAAC,qBAAsB/hE,EAAAA,GAAAA,GAAWjnB,EAAK,yCAC7D2pF,GACI,CAACA,GAAoBwB,SAAUb,IAC/B,CAACL,GAAmBK,SACxB10F,EACAozF,IAAsB,CAAC,uBAI7B91F,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAoBxd,UACjCg0B,EAAAA,GAAAA,GAAWjnB,EAAK,yCAIrB9M,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAexd,UAC7BH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAuBxd,SAAA,EACrCC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAaxd,SACzB+M,EAAK,kCAGR9M,EAAAA,GAAAA,GAAC6pC,GAAAA,EAAQ,CACP58B,MAAOH,EAAK,oCACZm8B,QAASktD,GACT3oF,SAAU6rF,WAKhBr5F,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAoBxd,UACjCg0B,EAAAA,GAAAA,GAAWjnB,EAAK,uCAGnBlN,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAeqH,IAC5Bk5E,IAAuBE,IAA4BG,KAAoBv5E,IAA2Bxd,SAAA,EAEnGC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAqBxd,SACjC+M,EAAK,mCAGRlN,EAAAA,GAAAA,IAAC+N,EAAAA,EAAM,CACL2E,UAAWxF,EAAK,sBAChBhN,WAAWoW,EAAAA,GAAAA,GDhqB65B,WCgqB33B,gBAC7CrI,QAAM,EACNC,QAASymF,EAAax0F,SAAA,EAEtBC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAaxd,SACzB+M,EAAK,yBAEPgtF,EAAAA,GAAAA,IAAuB1E,EAAkBtoF,EAAKkqD,cAKzD,CAEA,OACEp3D,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJrN,UDhrBiB,WCirBjB8L,QAASovB,GACTtvB,OAAQA,EACRouE,UAAWA,EACX1sE,QAAUqpF,IAAuBE,GAA4BjG,EAAmBpsE,GAAYvkB,SAAA,EAE5FH,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GDtrBuC,WCsrBX,iBAAkB8uC,SA/SlE,SAAsBp4C,GACpB,MAAM,UAAE2tB,GAAc3tB,EAAE6X,cAExB8lE,EAAgBhwD,GAAa,IAC/B,EA2SyFx6B,SAAA,EACnFC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLnS,KAAK,UACLJ,UD1rB2Q,WC2rB3Q8N,MAAM,cACNE,QAASktB,GACT1oB,UAAWxF,EAAK,SAAS/M,UAEzBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAEbtN,EAAAA,GAAAA,GAAA,OAAKF,UDjsBkE,WCisB1C6D,IAAKo2F,GAAazxE,IAAI,GAAG9kB,WAAW,KACjExD,EAAAA,GAAAA,GAAA,MAAIF,UDlsBoH,WCksBvFC,UAC9Bg0B,EAAAA,GAAAA,GAAWjnB,EAAK,8BAEnB9M,EAAAA,GAAAA,GAAA,OAAKF,UDrsB4I,WCqsB9GC,UAChCg0B,EAAAA,GAAAA,GAAWjnB,EAAKymB,EAAY,uBAAyB,kCAExDvzB,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GDxsBqJ,WCwsBvHo0E,GDxsB4K,YCwsBrIvqF,UACnFC,EAAAA,GAAAA,GAAA,MAAIF,UDzsBuU,WCysBnSC,SACrC+M,EAAK,8BAGR2pF,IAAuBE,IACvB/2F,EAAAA,GAAAA,IAAA,OAAKE,UD9sB8lB,WC8sBrkBC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,OAAAD,SACG42F,IACC32F,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAmB5Z,IAAKwxF,GAAU7sE,IAAI,MAEtDtoB,EAAAA,GAAAA,GAAA,OACEF,UAAWyd,GACX5Z,IAAKgvF,GAAkB8D,GAAqBtR,SAAWwN,GAAkB,GACzErqE,IAAI,QAIV1oB,EAAAA,GAAAA,IAAA,OAAKE,UD1tB8mB,WC0tBvlBC,SAAA,EAC1BC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAaxd,SACzB42F,GAA2B7pF,EAAK,+BAAgC6pF,IAA0Bc,OACvF3qF,EAAK,qCAAsC2pF,GAAqBwB,aAEtEj4F,EAAAA,GAAAA,GAAA,KAAGF,UD/tBwpB,WC+tBhoBC,SACxB42F,GAA2B7pF,EAAK,8BAA+B6pF,IAA0BsB,UACtFnrF,EAAK,wBAAyB2pF,IAAqBtR,cAG3DnlF,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAgBxd,UAC9BH,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAsBA,IAA2Bxd,SAAA,EAC9EC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,QAAQxN,UAAWyd,MAC9Bvd,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAA2BnH,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAC5E42F,GAA2BA,IAA0BqD,OAClDvD,GAAqBwB,UAAY7E,GAAgCY,EAAAA,gBAM7Eh0F,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAeqH,GD/uBoZ,YC+uBtXxd,UAlTjEC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAexd,SAC5Bm1F,EAAa1hF,KAAKw1B,IAEfhpC,EAAAA,GAAAA,GAAC0xF,GAAkB,CAEjBpkF,KAAM07B,EAAO17B,KACbuH,KAAMm0B,EAAOn0B,KACbm0B,OAAQA,EAAOt8B,MACfpJ,IAAK0lC,EAAO1lC,IACZkK,SAAUyrF,GACVhwD,QAASusD,IAA2BxsD,EAAOt8B,MAC3CilF,OAAQ3oD,EAAO2oD,OACfE,UAAWA,GACXC,kBAAmBkE,GACnBpE,cAAe5oD,EAAO4oD,eAVjB5oD,EAAO17B,YAmTjBupF,KAAsBb,IAAiBx0F,SACtC5B,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACI02F,KAAwBE,KACxB/2F,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAexd,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAgBxd,SAAA,EAC9BC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAqBxd,SACjC+M,EAAK,6BAERlN,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAsBA,IAA2Bxd,SAAA,EAC9EC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,QAAQxN,UAAWyd,MAC9Bvd,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAA2BnH,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAC5Ei3F,YAKPh3F,EAAAA,GAAAA,GAACi6F,GAAAA,EAAoB,CACnBC,WAAYnD,GACZoD,MAAOtC,GACPrqF,SAAUorF,SAId54F,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAoBxd,UACjCg0B,EAAAA,GAAAA,GAAWjnB,EAAK,+BAKtB2sF,QAIJ3C,KACCl3F,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACI42F,KAA6BF,KAC7B72F,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAexd,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAgBxd,SAAA,EAC9BC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAqBxd,SACjC+M,EAAK,2BAERlN,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAsBA,IAA2Bxd,SAAA,EAC9EC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,QAAQxN,UAAWyd,MAC9Bvd,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAA2BnH,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAC5Ek3F,YAtRnBj3F,EAAAA,GAAAA,GAACo6F,GAAAA,EAAmB,CAClBt6F,UD7gB0qC,WC8gB1qCyN,QAASsmF,EACTwG,kBAAmB/E,EACnBI,mBAAoBA,GACpB5nF,QAAS0rF,SAyRDx5F,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAeqH,GD1yB0gB,YC0yB5dxd,UAC1Eg0B,EAAAA,GAAAA,GAAWjnB,EAAK,4BAGnBlN,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAexd,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAqBxd,SACjC+M,EAAK,kCAGR9M,EAAAA,GAAAA,GAACi6F,GAAAA,EAAoB,CACnBC,WAAY5E,EACZ6E,MAAOpC,GACPvqF,SAAUsrF,MAGZ94F,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAoBxd,UACjCg0B,EAAAA,GAAAA,GAAWjnB,EAAK,4CAMxB2sF,SAIHhD,KAAwBE,IAA4BE,KACpDj3F,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAexd,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAqBxd,SACjC+M,EAAK,gCAnWhB9M,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAexd,SAC5B23F,IAAelkF,KAAK81E,IACnBtpF,EAAAA,GAAAA,GAAC+mF,GAAyB,CACxBE,YAAU,EAEVj+C,OAAQsgD,EACRtC,kBAAmBA,GACnB/9C,QAASqgD,EAAKnE,SAAW2Q,GACzBtoF,SAAUuoF,IAJLzM,EAAKnE,gBAqWVnlF,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAqBA,IAA2Bxd,SA1VzF,WACE,MACMuzB,EADOxmB,EAAK,mCACCwtF,MAAM,0BAEzB,GAAKhnE,KAASA,EAAM9xB,OAAS,GAI7B,OACE5B,EAAAA,GAAAA,IAAA,KAAGE,UD7fm5B,WC6fj3BC,SAAA,CAClCuzB,EAAM,IACPtzB,EAAAA,GAAAA,GAACu6F,GAAAA,EAAI,CAACC,WAAS,EAAC1sF,QAASoqF,GAAmBn4F,SAAEuzB,EAAM,KACnDA,EAAM,KAGb,CA4UamnE,QAKNjF,IACCx1F,EAAAA,GAAAA,GAAA,OAAKF,UDr1Bkc,WCq1BzaC,UAC5BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UDv1B6B,WCw1B7BgO,QAAU2oF,IAAuBE,GAA4BjG,EAAmBpsE,GAAYvkB,SAE3F+M,EAAK,iCAKd9M,EAAAA,GAAAA,GAACg0D,GAAa,CACZtoD,OAAQ4oF,EACRlgC,cAAY,EACZE,gBAAc,EACd1oD,QAAS4oF,EACT//B,SAAUykC,GACVjlC,WAAYmhC,EACZ7gC,kBAAmBznD,EAAK,WAE1B9M,EAAAA,GAAAA,GAACqvF,GAAkB,CACjB3jF,OAAQ+oF,EACR7oF,QAAS+oF,EACTr8B,YAAaA,EACb7D,SAAU0kC,GACV7J,eAAgBmE,KAElBzzF,EAAAA,GAAAA,GAACkyF,GAAuB,CACtBxmF,OAAQkpF,EACRhpF,QAASkpF,EACTxE,uBAAwB8I,GACxB/I,mBAAoB2F,GACpB1G,eAAgBiE,EAChBnD,eAAgB7jF,KAElBvM,EAAAA,GAAAA,GAACmwF,GAA0B,CACzBzkF,OAAQqpF,EACRnpF,QAASqpF,EACT5E,mBAAoB8C,GACpB7C,uBAAwBW,GACxB3B,eAAgBoL,EAAAA,IAChBtK,eAAgB7jF,KAElBvM,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZl2B,MAAOJ,EAAK,qCACZ+H,KAAM/H,EAAK,oCACXu2B,aAAcv2B,EAAK,SACnBpB,OAAQ+kF,EACR7kF,QAAS+kF,EACTrtD,eAAgBm1D,YC92BlBkC,GAA2D,CAC/DnX,mBAAoB,4BACpBoX,mBAAoB,uBACpBrX,cAAe,sBACfN,mBAAoB,yBACpBC,eAAgB,0BAChBF,SAAU,0BACV6X,gBAAiB,0BACjBC,eAAgB,4BAChBC,mBAAoB,+BAGhBC,GAAmE,CACvExX,mBAAoB,kCACpBoX,mBAAoB,6BACpBrX,cAAe,4BACfN,mBAAoB,+BACpBC,eAAgB,gCAChBF,SAAU,gCACV6X,gBAAiB,gCACjBC,eAAgB,kCAChBC,mBAAoB,qCAGhBE,GAAmE,CACvEzX,mBAAoB,mCACpBoX,mBAAoB,8BACpBrX,cAAe,6BACfN,mBAAoB,gCACpBC,eAAgB,iCAChBF,SAAU,iCACV6X,gBAAiB,iCACjBC,eAAgB,mCAChBC,mBAAoB,sCAGhBG,GAAsD,CAC1D1X,mBAAoB,aACpBoX,mBAAoB,aACpBrX,cAAe,eACfN,mBAAoB,YACpBC,eAAgB,aAChBF,SAAU,cACV6X,gBAAiB,aACjBC,eAAgB,eAChBC,mBAAoB,aAGhBI,GAA4F,CAChGP,mBAAoBA,CAAC9tF,EAAiBJ,IAEtB,MAAVA,EAAuBI,EAAK,cAAe,KACjC,MAAVJ,EAAuBI,EAAK,cAAe,MACxC+S,EAAAA,GAAAA,IAAe/S,EAAMJ,EAAQ0uF,EAAAA,MA8IxC,IAAez8F,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUquB,YACT,MAAM,OAAEq0D,GAAW1iF,EAAO4uC,WAAa,CAAC,EAClC6zC,GAAYxiD,EAAAA,EAAAA,KAA2BjgC,GAE7C,MAAO,CACLg6F,aAAc3rE,EAAQq0D,IAASr0D,GAAO,QAAKhtB,EAC3C44F,aAAc5rE,EAAQq0D,IAASr0D,GAAO,QAAKhtB,EAC3C64F,gBAAgBC,EAAAA,EAAAA,KAA+Bn6F,GAC/CyiF,eATcp1E,EA7FwC+sF,EAC1DJ,eACAC,eACA5rE,QACAo0D,YACAyX,oBAEA,MAAM,uBAAEG,EAAsB,iBAAE/5D,IAAqB51B,EAAAA,EAAAA,MAC/Ce,GAAOC,EAAAA,EAAAA,MAEN4uF,EAAWC,EAAcC,IAAe58F,EAAAA,EAAAA,KAEzCqlB,GAAc3kB,EAAAA,EAAAA,KAAY,KAC9BgiC,IACAi6D,MACC,CAACj6D,EAAkBi6D,KAEtBtxF,EAAAA,EAAAA,KAAU,MACHolB,GAASisE,GAAWE,MACxB,CAACF,EAAWjsE,EAAOmsE,IAEtB,MAAM3uF,EAAQJ,EAAK,gBACbgvF,EAAiBpsE,GAASyrE,GAAsBzrE,GAChDvjB,EApER,UAA+B,KAC7BW,EAAI,UACJivF,EAAS,UACTjY,EAAS,cACTyX,EAAa,aACbF,EAAY,aACZC,EAAY,eACZQ,IAUA,IAAKC,EACH,OAGF,MAAMC,EAAwBF,EAAiBA,EAAehvF,EAAMuuF,GAAgBA,EAC9EY,EAAwBH,EAAiBA,EAAehvF,EAAMwuF,GAAgBA,EAEpF,OAAIxX,EACKh3E,EAAKmuF,GAA0Bc,GAAYE,GAG7CV,EACHzuF,EAAK6tF,GAAkBoB,GACT,mBAAdA,EAAiCE,EAAwB,CAACD,EAAuBC,IACjFnvF,EAAKkuF,GAA0Be,GAAYC,EACjD,CAoCsBE,CAAsB,CACxCpvF,OACAivF,UAAWrsE,EACXo0D,YACAyX,gBACAF,eACAC,eACAQ,mBAEI9oF,EAAO0c,GAASwrE,GAAWxrE,GAC3BysE,EAAaZ,IAAkBzX,EAErC,OACElkF,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJvB,QAASgwF,EACT/vF,oBAAqB6vF,EACrBhwF,OAAQZ,QAAQ4kB,KAAWisE,EAC3BzuF,MAAOA,EACPpN,UCtKiB,WDsKMC,SAAA,EAErBo8F,IACAv8F,EAAAA,GAAAA,IAAA,OAAKE,UCzKgH,WDyKnFC,SAAA,EAChCC,EAAAA,GAAAA,GAAA,KAAGF,WAAWoW,EAAAA,GAAAA,GC1KqM,WD0KpKlD,EAAM,WACrDhT,EAAAA,GAAAA,GAAA,OAAKF,UC3K+J,WD2KlIC,SAC/B+7F,IACChvF,EAAMg3E,EAAYwX,EAAeD,KAC7BvX,EAAYwX,EAAeD,QAKtCc,IACCn8F,EAAAA,GAAAA,GAACy9E,GAAoB,CACnB39E,UCrLkE,WDsLlE49E,UAAWoe,IAAiBhvF,EAAMuuF,IAAiBA,GAAcjV,WACjEzI,WAAYme,IAAiBhvF,EAAMwuF,IAAiBA,GAAclV,WAClExI,kBAAmB5qE,KAIvBhT,EAAAA,GAAAA,GAAA,OAAAD,UACGg0B,EAAAA,GAAAA,GAAW5nB,GAAe,GAAI,CAAC,kBAAmB,UAGrDvM,EAAAA,GAAAA,IAAA,OAAKE,UChMyQ,WDgMzOC,SAAA,EACnCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,wBACV+N,QAAM,EACNC,QAAS8tF,EACThuF,MAAM,UAAS7N,SAEd+M,EAAKqvF,EAAa,SAAW,QAE/BA,IAEGv8F,EAAAA,GAAAA,IAAC+N,EAAAA,EAAM,CACL7N,UAAU,wBACV+N,QAAM,EACNC,QAASwW,EACT1W,MAAM,UAAS7N,SAAA,CAEd+M,EAAK,kBACN9M,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,eAAexN,UClN4P,0B,uCCUpS,MAEMs8F,GAA4B,IAAMrkE,EAAAA,IAGlCskE,GAAe,GAAM1mF,EAAAA,EAEpB,SAAS2mF,GACdjzE,EACA+N,EACAmlE,EACAlnF,GAEA,MAAMmnF,GAA6BpzF,EAAAA,EAAAA,IAAkB,KAE9CqzF,EAAgBC,IAAqBxwF,EAAAA,EAAAA,IAAiB,IAG3DywF,QAASC,EACTC,OAAQC,EACRC,SAAUC,IACRC,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS7zE,IACP21B,IACF,MAAMm+C,EAA0BX,EAA2BjzF,QAE3Dy1C,EAAQxnC,SAAS4lF,IACf,MAAM94F,EAAQ+gB,OAAO+3E,EAAMvwF,OAAOhN,GAAGu3D,QAAQ,GAAGmlC,KAAa,KAC7DY,EAAwB74F,GAAS84F,EAAMC,kBAGzC,MAAMC,EAAuBH,EAAwB3+C,QAAO,CAAC++C,EAAaF,EAAgB/4F,IACjF+4F,GAAkB/4F,EAAQi5F,EAAcj5F,EAAQi5F,GACtDC,KAECF,IAAyBE,KAI7Bd,EAAkBY,OAIlBX,QAASc,EACTZ,OAAQa,EACRX,SAAUY,IACRV,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS7zE,EACTu0E,WAhDkC,IAiDlCC,OAhDgC,OAoDhClB,QAASmB,IACPb,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS7zE,EACTu0E,WAxDkC,IAyDlCC,OAxDgC,OA4DhClB,QAASoB,IACPd,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS9lE,IAgCX,OA7BA9tB,EAAAA,EAAAA,IAAc,KACR+L,GACFynF,IACAY,KAEA9yF,YAAW,KACT+yF,IACAX,MACCZ,MAEJ,CAACU,EAAcY,EAAuBroF,EAAU2nF,EAAgBW,IAmB5D,CACLlB,iBACAG,4BACAa,qCACAK,qCACAC,+BACA9U,kBAvBuB38E,EAAAA,EAAAA,IAAiBhI,IACxCo4F,GAAmBtpE,IACjB,MAAM4qE,EAAep8F,SAASo4B,eAAe,GAAGuiE,KAAYj4F,KACtD25F,EAA6C,IAAnChrF,KAAKya,IAAI0F,EAAe9uB,GAUxC,OARA45F,EAAAA,GAAAA,IAAc,CACZ34F,UAAW8jB,EAAa9f,QACxBuoB,QAASksE,EACTz+E,SAAU,QACVs+E,OAAQxB,GACR8B,YAAaF,EArFkB,IACF,KAuFxB35F,QAYb,C,oDCjHA,MCmIA,IAAe3F,EAAAA,EAAAA,KA/FuBy/F,EACpCC,aACAn+F,OAAOo+F,EAAAA,IACPh+E,SACA0H,gBACAu2E,sBACAC,sBAEA,MAAM,aAAEpU,IAAiBr+E,EAAAA,EAAAA,MACnBsd,GAAejgB,EAAAA,EAAAA,OAEf,aACJq1F,EAAY,cAAEC,EAAa,iBAAEC,EAAgB,eAAEC,EAAc,mBAAErS,GAC7D8R,GAEE,YAAEQ,IAAgBC,EAAAA,GAAAA,GAAevS,GACjCwS,EAAiBF,GAAaG,mBAC9BC,GAAcC,EAAAA,GAAAA,GAAwB71E,OAAc3mB,GAAYq8F,GAChEI,GAAcC,EAAAA,GAAAA,GAAeH,GAE7B5B,GAAiBgC,EAAAA,GAAAA,IAAkBh2E,EAAck1E,GACjDe,EAAajC,IAAmB/8E,EAEhCi/E,GAA2Bd,GAC3BC,IAAkBc,EAAAA,KAAsBb,IAAqBC,EAC7Da,EAAmBF,GAA2BlB,EAAWlf,WAAW,KACrEugB,EAAAA,EAAAA,IAAoBrB,EAAWlf,SAAS,GAAI,WAC3CwgB,GAAwBv3F,EAAAA,EAAAA,GAASq3F,GAAmBpC,GAEpDuC,GAAcnB,IAAiBgB,GAAqBd,IAAqB,aAAaN,EAAWx+F,KACjG4I,GAAYL,EAAAA,EAAAA,GAASw3F,GAAYvC,GACjCjkF,EAAUmzE,GAAsB9jF,GAAak3F,EAC7C57E,GAAuBqyB,EAAAA,GAAAA,GAA6Bh9B,GAEpDymF,GAASC,EAAAA,GAAAA,GAAwBz2E,EAAcm1E,GAUrD,OARAl0F,EAAAA,EAAAA,KAAU,KACJ+yF,IAAmBgB,EAAWlf,UAAU39E,QAC1C4oF,EAAa,CACXlB,eAAgBmV,MAGnB,CAAChB,EAAgBjT,EAAciU,KAGhCr+F,EAAAA,GAAAA,GAAA,OACEgU,IAAKqV,EACLvpB,WAAWoW,EAAAA,GAAAA,GDnFM,WCmFsB,qBACvCrQ,MAAO,YAAY3F,MAASH,SAE3BqZ,EACCmzE,GACEvsF,EAAAA,GAAAA,GAAC6rF,GAAAA,EAAW,CACV9C,WAAYwD,EACZrsF,KAAMA,EACN6/F,8BAA+BxB,EAC/Bj+E,OAAQA,IAERq+E,GACF3+F,EAAAA,GAAAA,GAACC,GAAAA,EAAe,CACdH,UAAWikB,EACX3jB,OAAQqI,EACRvI,KAAMA,EACN++E,KAAMqgB,EACNpgB,gBAAgB8gB,EAAAA,EAAAA,MAAgCnxD,EAAAA,EAAAA,MAAawvD,GAC7D4B,aAAczB,GAAiBj1F,cAAW7G,EAC1Cw9F,mBAAoBL,EACpBM,YAAan4E,IAEZ02E,IAAkBa,GACrBv/F,EAAAA,GAAAA,GAAC66C,GAAAA,EAAc,CACb/6C,WAAWoW,EAAAA,GAAAA,GD3GmB,WC2GU6N,GACxCpgB,IAAK8E,EACLqyC,QAASwkD,EACTz5F,MAAOs5F,EACPpkD,WAAY/yB,EACZ5B,MAAI,EACJlE,yBAAuB,KAGzBliB,EAAAA,GAAAA,GAAA,OACE2D,IAAK8E,GAAak3F,EAClB95F,MAAOs5F,EACPr/F,WAAWoW,EAAAA,GAAAA,GDvHsC,WCuHT6N,GACxCuE,IAAI,GACJ9kB,WAAW,KAIf48F,EAAAA,GAAAA,IAAgB/B,EAAWnxF,MAAO,Q,wCC/D1C,MAAMmzF,GAA8B,CAClC,CAAEnzF,MAAO,sBAAuBR,MAAO,EAAG4zF,IAAK,MAC/C,CAAEpzF,MAAO,sBAAuBR,MAAO,EAAG4zF,IAAK,MAC/C,CAAEpzF,MAAO,sBAAuBR,MAAO,EAAG4zF,IAAK,OAC/C,CAAEpzF,MAAO,qBAAsBR,MAAO,EAAG4zF,IAAK,OAC9C,CAAEpzF,MAAO,qBAAsBR,MAAO,EAAG4zF,IAAK,SAkShD,IAAe3hG,EAAAA,EAAAA,KA/RO4hG,EACpBliB,UACAn+E,OACAogB,SACApT,QACApN,YACA0gG,gBACAt1C,kBACAu1C,iBACAC,aACAnC,sBACAoC,gCACAC,aACAhhE,uBACAihE,sBACAC,gBACAtC,kBACAuC,uBACA/4E,gBACAla,UACAkzF,WACAC,cACAC,gBACAC,sBACAC,oBACAC,qBACAC,qBACAC,gBACAC,mBAEA,MAAM,eAAEnX,EAAc,iBAAE1oD,EAAgB,eAAE8/D,IAAmB11F,EAAAA,EAAAA,MACvDiI,GAAM5K,EAAAA,EAAAA,MACNwoE,GAAUxoE,EAAAA,EAAAA,MACV0D,GAAOC,EAAAA,EAAAA,KACPgyF,EAAiB1gB,EAAQ2gB,mBACzBC,GAAcC,EAAAA,GAAAA,GAAwBlrF,OAAKtR,GAAYq8F,IAEvD,GACJl/F,EAAE,eAAEqpF,GACF7K,EAEEyF,GAAczF,EAAQqjB,QAAUH,GAAkBljB,EAAQsjB,UAC1DC,EAAgBvjB,EAAQujB,eAAiBL,EACzC1S,GAAYjvD,GAAwBkkD,IAAc+c,EAElDxD,GAAiBgC,EAAAA,GAAAA,IAAkBrrF,EAAKuqF,GACxCsD,EAAaxE,EACbiC,EAAajC,IAAmB/8E,EAEhCwhF,GAA0BzC,EAAAA,GAAAA,IAAkBrrF,EAAK2sF,IAEjD,kBACJ3uB,EAAiB,kBAAEC,EAAiB,wBACpC8vB,GAAuB,kBAAE7vB,GAAiB,uBAC1CC,GAAsB,sBAAEC,KACtBC,EAAAA,GAAAA,GAAuBr+D,GACrBguF,GAA0Bl3F,SAAS01F,GAAiBvuB,GAEpDJ,IAAoBvlE,EAAAA,EAAAA,IAAgB,IAAM0H,EAAIzK,UAC9CuoE,IAAiBxlE,EAAAA,EAAAA,IAAgB,IAAM0H,EAAIzK,QAASojB,QAAQ,mCAC5DolD,IAAiBzlE,EAAAA,EAAAA,IAAgB,IAC9Bm0F,EAAiB7uB,EAAQroE,QAAUyK,EAAIzK,QAASpF,cAAc,mCAEjE89F,IAAY31F,EAAAA,EAAAA,IAAgB,KAAM,CAAG41F,WAAYzB,EAAgB0B,6BAA6B,OAEpG73F,EAAAA,EAAAA,KAAU,KACJ0nE,EACFovB,MAEAC,QAED,CAACrvB,EAAmBqvB,EAAoBD,KAE3C92F,EAAAA,EAAAA,KAAU,KACH+yF,GAAgBlrB,OACpB,CAACA,GAAwBkrB,IAE5B,MAkBM+E,IAAoB91F,EAAAA,EAAAA,IAAiBM,IACzCA,EAAEuJ,kBACFvJ,EAAE6Y,iBAEF07E,EAAqB9iB,MAGjBgkB,IAA4B/1F,EAAAA,EAAAA,IAAgB,KAChD60F,EAAqB9iB,MAGjBikB,IAAsBh2F,EAAAA,EAAAA,IAAgB,KAC1C40F,EAAe7iB,MAGXkkB,IAAoBj2F,EAAAA,EAAAA,IAAgB,KACxC20F,EAAa5iB,MAGTmkB,IAAkBl2F,EAAAA,EAAAA,IAAgB,KACtCwB,IAAUkzF,GAAU,MAGhByB,IAAsBn2F,EAAAA,EAAAA,IAAgB,KAC1CwB,IAAUkzF,OAAUt+F,GAAW,MAG3BggG,IAAgBp2F,EAAAA,EAAAA,IAAgB,KACpC+9E,EAAe,CAAEnB,sBAGbyZ,IAAgCr2F,EAAAA,EAAAA,IAAgB,CAACM,EAAyBsM,EAAW,KACzFtM,EAAE6Y,iBACF7Y,EAAEuJ,kBAEFg8D,KACAmvB,MACAG,EAAe,CACb5Y,YAAa,CAAE3nF,KAAM,UAAW6nF,WAAY1K,EAAQx+E,GAAI+iG,OAAO7gE,EAAAA,GAAAA,MAAkB7oB,QAI/E2pF,IAAyBttF,EAAAA,IAAgB4rF,EAEzC3zD,IAAgBt3B,EAAAA,GAAAA,GACpB,gBACApI,GAAW,cACX8yF,GAAc,WACdgB,GAAiB,eACjBL,GAAiB,eACjBzhG,GAGIgjG,IAAmBh7F,EAAAA,EAAAA,KAAQ,KAC/B,IAAKk6F,IAA2BxB,GAAkBoB,IAAkBnB,EAAiB,MAAO,GAE5F,MAAMt7C,EAAqB,GAE3B,OAAIy8C,GACFvB,GAA4B7oF,SAAS7I,IACnCw2C,EAAMpyC,MACJ/S,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAAC3F,QAAS60F,GAA+B3B,SAAUryF,EAAK2xF,IAAIvgG,SAClE+M,EAAK6B,EAAKzB,MAAOyB,EAAKjC,MAAO,WAK7By4C,IAGL+7C,GACF/7C,EAAMpyC,MACJ/S,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,WAAWlF,QAASw0F,GAAoBviG,SACpD+M,EAAK,mCAKRm0F,GACF97C,EAAMpyC,MACJ/S,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,WAAWlF,QAASy0F,GAAkBxiG,SAClD+M,EAAK,+BAKP+hF,GAAY/gF,IACVo9C,GACH/F,EAAMpyC,MAAK/S,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAAC3F,QAAS00F,GAAiBxvF,KAAK,QAAOjT,SAAE+M,EAAK,uBAEpEq4C,EAAMpyC,MACJ/S,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAAC3F,QAAS20F,GAAqBzvF,KAAK,WAAUjT,SACpD+M,EAAKo+C,EAAkB,cAAgB,uBAK1Cw1C,GACFv7C,EAAMpyC,MACJ/S,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAAC3F,QAAS40F,GAAe1vF,KAAK,WAAUjT,SAC9C+M,EAAK,sBAIRq0F,GACFh8C,EAAMpyC,MACJ/S,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,SAASlF,QAASu0F,GAA0BtiG,SACxD+M,EAAK,uBAILq4C,KACN,CACD68C,GAAyBxB,EAAeoB,EAAenB,EAAgBS,EAAeD,EAAapS,EACnG/gF,EAAS4yF,EAAYS,EAAqBwB,GAA+B71F,EAAMw1F,GAC/EC,GAAmBr3C,EAAiBu3C,GAAqBD,GAAiBE,GAAeL,KAG3F,OACEziG,EAAAA,GAAAA,IAAA,OACEoU,IAAKA,EACLlU,UAAW0tC,GACXtgC,MAAOA,GAAUmxE,GAASiO,MAC1B,kBAAiBzsF,EACjBqrC,YAjIqBt+B,KACvBm2F,EAAAA,GAAAA,GAAoCn2F,GACpCm1F,GAAwBn1F,IAgItBkB,QA/IgBwW,KACd0tD,IACA6c,EAEAltD,EADE4/D,EACe,CAAEp/D,eAAgB,WAElB,CAAEA,eAAgB,qBAIvCr0B,IAAUkzF,KAsIRj7E,cAAemsD,GAAkBnyE,SAAA,CAEhCyhG,IAAgBxhG,EAAAA,GAAAA,GAACgjG,GAAAA,EAAQ,CAACC,OAAO,WACjCnB,IACC9hG,EAAAA,GAAAA,GAACkjG,GAAAA,EAAW,CACV75E,aAAcrV,EACdqqE,QAASA,EACT8kB,SAAO,EACPjjG,KAAMA,EACNkjG,YAAU,EACVC,sBAAoB,EACpBC,QAASzB,EACTvhF,QAASg/E,EACTiE,iBAAe,EACfC,qBAAmB,EACnBhF,gBAAiBA,EACjBuC,qBAAsBA,EACtB9B,YAAaA,EACbkB,YAAan4E,KAGf84E,GAAiBjS,IACjB7uF,EAAAA,GAAAA,GAAA,OACEF,UAAU,iBAAgBC,UAE1BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,kBAGbwzF,GAAiBhd,IAAc+K,IAC/B7uF,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kBAAiBC,UAC9BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,WAGdu1F,KACC7iG,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,wBACV8N,MAAM,OACNyE,OAAK,EACLoxF,aAAW,EACX31F,QAASs0F,GAAkBriG,UAE3BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,YAGdxC,QAAQg4F,GAAiBthG,UACxBxB,EAAAA,GAAAA,GAAC8f,GAAAA,EAAI,CACH9L,IAAK49D,EACLlmE,OAAQsmE,EACRgH,OAAQ/G,EACRJ,kBAAmBA,GACnBC,eAAgBA,GAChBC,eAAgBA,GAChBkwB,UAAWA,GACXniG,UAAU,uBACVkgB,WAAS,EACTkiF,WAAYzB,EACZ70F,QAASumE,GACTtmE,oBAAqBumE,GAAsBryE,SAE1C+iG,W,wCC9VX,MCmIA,IAAenkG,EAAAA,EAAAA,KA9FqB+kG,EAClCx0D,WACAiR,qBACAygD,aACA+C,cACApF,sBACAC,kBACAoF,oBACA57E,gBACAla,UACAiY,oBAEA,MAAM/R,GAAM5K,EAAAA,EAAAA,MACNy6F,EAA6B,WAAlB30D,EAAShuC,KACpB4iG,GAAoBh8F,EAAAA,EAAAA,KAAQ,IAChCq4C,GAAoB5O,MAAMy2B,IAAc15B,EAAAA,EAAAA,IAAe05B,EAAU94B,SAAUA,MAC1E,CAACiR,EAAoBjR,IAClBjmC,EAAe66F,GAAmBC,YAAY3jE,WAAWl3B,QACzD86F,EAAcF,GAAmBG,iBAAiBpkG,GAClDggG,GAASC,EAAAA,GAAAA,GAAwB9rF,EAAKwqF,GACtC/1F,GAAYL,EAAAA,EAAAA,GAChB07F,GAAmBG,iBAAkBC,EAAAA,EAAAA,IAAqBJ,EAAkBG,gBAAiB,aAAUvhG,GACtGshG,IAGG,kBACJhyB,EAAiB,wBACjB+vB,EAAuB,kBACvB7vB,EAAiB,uBACjBC,EAAsB,sBACtBC,IACEC,EAAAA,GAAAA,GAAuBr+D,EAAuB,SAAlBk7B,EAAShuC,UAAiBwB,OAAWA,OAAWA,GAAW,IAE3F4H,EAAAA,EAAAA,KAAU,KACJ0nE,IACFjsD,IAAgBmpB,GAEhBijC,IACAC,OAED,CAACD,EAAwBpsD,EAAeqsD,EAAuBJ,EAAmB9iC,IAErF,MAAM9uC,EAA2B,SAAlB8uC,EAAShuC,KAAkBb,GAAAA,EAAe8jG,aAAe17F,EAClE6b,GAAchY,EAAAA,EAAAA,IAAgB,KAClCwB,EAAQohC,MAGJnrB,GAAuBqyB,EAAAA,GAAAA,GAA6B3tC,GACpD+kC,GAAgBt3B,EAAAA,GAAAA,GDrFD,WCuFnB0qF,GDvFyC,YCwFxCiD,GAAY,oBAGf,OACE7jG,EAAAA,GAAAA,GAAA,OACEgU,IAAKA,EACLlU,UAAW0tC,EACX1/B,QAASwW,EACTpX,MAAO42F,GAAmB52F,MAC1B,kBAAiB22F,EAAW30D,EAAS65C,gBAAarmF,EAClDwoC,YAAa62D,EACbh8E,cAAemsD,EAAkBnyE,SAEhC8jG,GACC7jG,EAAAA,GAAAA,GAAC6rF,GAAAA,EAAW,CACV73E,IAAKA,EACL+0E,WAAY75C,EAAS65C,WACrB7oF,KAAMkkG,EAAAA,IACN9jF,QAASqjF,EACT5D,8BAA+BxB,EAC/BC,gBAAiBA,EACjBoF,kBAAmBA,EACnB7C,sBAAoB,EACpBZ,YAAan4E,KAGfhoB,EAAAA,GAAAA,GAACqkG,GAAAA,EAAuB,CACtBjkG,OAAQA,EACR6I,aAAcA,EACdg2E,KAAM0kB,EACNnjG,QAAQ,EACRN,KAAMkkG,EAAAA,IACNllB,eAAa,EACbp/E,UAAWikB,EACXk8E,aAAczB,EAAiBj1F,cAAW7G,EAC1Cw9F,mBAAoBL,EACpBM,YAAan4E,S,gBCzCvB,MAyWA,IAAerpB,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAMijG,EAAsBjjG,EAAOkjG,0BAA0BC,SAE7D,MAAO,CAAEF,yBAJO51F,EAnW0B+1F,EAC5CpG,aACAsF,cACAr/F,QACAi4F,WACAmI,eACAC,mBACAxkD,qBACA+K,kBACAu1C,iBACAmE,mBACAhlE,uBACAilE,mBACAC,uBACAC,sBACAC,wBACAC,iBACAC,mBACAC,gBACAC,iBACAp9E,gBACAu2E,sBACAT,qCACAL,qCACA4H,mBACAC,oBACAC,kBACAC,kBACAC,gBACAC,wBACAtE,oBACAC,qBACAC,qBACAgD,0BAEA,MAAM,oBACJqB,EAAmB,uBACnBC,EAAsB,qBACtBC,EAAoB,iBACpBlkE,EAAgB,iBAChBmkE,EAAgB,aAChB1b,IACEr+E,EAAAA,EAAAA,MAEEiI,GAAM5K,EAAAA,EAAAA,MAENo1F,GAAkBp1F,EAAAA,EAAAA,MAClBw6F,GAAoBx6F,EAAAA,EAAAA,MAEpB0D,GAAOC,EAAAA,EAAAA,MACLvD,MAAOmhB,KAAgBE,EAAAA,GAAAA,MACxB4lE,GAAoBC,GAAkBC,KAAqB1xF,EAAAA,EAAAA,MAC5D,SAAEG,KAAaC,EAAAA,EAAAA,OAEd0mG,GAAaC,KAAkB95F,EAAAA,EAAAA,IAAS+5F,GAAuBt7E,KAEhE0yE,IAAiBgC,EAAAA,GAAAA,IAAkBrrF,EAAKuqF,GAAuBd,GAC/D15E,IAAuBqyB,EAAAA,GAAAA,GAA6BinD,IAGpDx5E,GAAe6gF,GAAgBrH,GAE/B6I,GAAkB9mG,GAAW,EAAI,EACjC+mG,GAAgB/mG,GAAW,EAAI,GAC/BgnG,GAAwBhnG,GAAW,EAAI,EACvCinG,GAAWhI,EAAWx+F,KAAOymG,EAAAA,IAC7BC,GAAsBlI,EAAWx+F,KAAO2mG,EAAAA,IACxCC,GAAapI,EAAWx+F,KAAO6mG,EAAAA,IAC/BC,GAAYtI,EAAWx+F,KAAO+mG,EAAAA,IAC9BC,GAAUxI,EAAWwI,QACrBC,IAAgBT,KAAYU,EAAAA,EAAAA,KAAmB1I,GAE/C2I,IAAoB16F,EAAAA,EAAAA,IAAgB,KACpCs4F,EACFiB,IACSgB,GACTjB,IAEAD,IAEFhV,QAGIsW,IAAiB36F,EAAAA,EAAAA,IAAgB,KACjCw6F,KAAiBlnE,EACnB+B,EAAiB,CACfQ,eAAgB,mBAGlB2jE,EAAiB,CACfoB,aAAc7I,EAAWx+F,QAKzBsnG,IAA8B76F,EAAAA,EAAAA,IAAgB,KAClDi5F,IAAkB,CAChBl+F,UAAW,UACXxH,GAAIunG,EAAAA,IACJC,UAAU,EACV//F,SAAS,EACT4hF,eAAgB,CACdjP,UAAW,cAKXqtB,IAA+Bh7F,EAAAA,EAAAA,IAAgB,KACnDi5F,IAAkB,CAChBl+F,UAAW,UACXxH,GAAI0nG,EAAAA,IACJF,UAAU,EACV//F,SAAS,EACT4hF,eAAgB,CACdjP,UAAW,cAKXutB,GAAWX,GAAUzC,EAAAA,IAAoBqD,EAAAA,IACzC5J,GAASgJ,GAAUV,GAAgBD,GACnCwB,GAAiBb,GAAUT,GAAwBF,GAEnDyB,IAAuBr7F,EAAAA,EAAAA,IAAiB9C,GACvCA,EAIEyJ,KAAKmI,OAAO5R,EAAQq0F,KAAW2J,GAAW3J,KAHxCoI,GAAuBt7E,MAM5B/U,IAAetJ,EAAAA,EAAAA,IAAiB8wF,IACpC4I,GAAe2B,GAAqBvK,EAAMwK,YAAYp+F,YAGxDq+F,EAAAA,GAAAA,GAAkB7zF,EAAK4B,KAEvBtL,EAAAA,EAAAA,KAAU,KACH0J,EAAIzK,SACTy8F,GAAe2B,GAAqB3zF,EAAIzK,QAAQoT,gBAC/C,CAACgrF,MAEJr9F,EAAAA,EAAAA,KAAU,KACJuZ,KAAiBw6E,EAAWlf,UAAU39E,SAAW68F,EAAWj+C,WAAW5+C,QAAU68F,EAAWyJ,YAC9F1d,EAAa,CACXlB,eAAgB,CACdrpF,GAAIw+F,EAAWx+F,GACfioG,WAAYzJ,EAAWyJ,gBAI5B,CAACjkF,GAAcumE,EAAciU,IAEhC,MAAMxP,IAAY3jC,IAAoBtrB,GAAwBknE,KAAiB7B,EAEzE8C,GAAc1J,EAAW2J,gBAAkB3J,EAAW4J,WAEtDC,IAAUH,IAAe1J,EAAWx+F,KAAOymG,EAAAA,KAC5CjI,EAAWx+F,KAAO+mG,EAAAA,KAAyBvI,EAAWx+F,KAAOsoG,EAAAA,KAC7D9J,EAAWx+F,KAAOuoG,EAAAA,MAA2BnD,IAAmBC,GAE9DmD,GAAM,CAAGC,KAAUrpG,EAAAA,EAAAA,GAAQipG,IAC5BK,GAAkC,EAAdxC,GAAkB,EACtCyC,GAAmB1D,GAAwBE,EAAyB3G,EAAWlrE,MAAQ,EAAIkrE,EAAWlrE,MAEtGs1E,GAAajB,GAAWE,GACxBgB,GAAgBz1F,KAAKqpE,KAAKrpE,KAAK4a,IAAI06E,GAAmBC,IAAmBzC,IAC3E0C,GAAaf,GACX79F,GAASw+F,GAAQK,GAAgBz1F,KAAKqpE,KAAKksB,GAAkBzC,IAAe0C,GAAaf,GAEzFiB,IAAwB7gG,EAAAA,EAAAA,KAAQ,IACpC68F,EAAmB,IAAInX,IAAImX,EAAiBnxF,KAAI,EAAG3T,QAASA,UAAO6C,GAClE,CAACiiG,IACEiE,IAAyB9gG,EAAAA,EAAAA,KAAQ,IACrCw8F,EAAsB,IAAI9W,IAAI8W,EAAoB9wF,KAAI,EAAGu1E,gBAAiBA,UAAermF,GACxF,CAAC4hG,IACEuE,IAAoBhE,IAAqBwB,KAAaE,IACvDM,KAAYF,KAAc1B,KACxB8C,KAAiBnoE,IAAyBsrB,GAC3C49C,IAAmBhhG,EAAAA,EAAAA,KAAQ,IAELgF,EADtB+hF,GACEkZ,GAAyB,4BACjB,SAGF,QACX,CAAClZ,GAAU/hF,EAAMi7F,KAEpB,OACEnoG,EAAAA,GAAAA,IAAA,OACEoU,IAAKA,EAELnU,GAAI,GAAG08F,KAAYj4F,IACnBxE,WACEoW,EAAAA,GAAAA,GAAe,aAAc24E,IAAY,qBAC1C9uF,SAAA,EAEC8kG,IACAjlG,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oBAAmBC,SAAA,EAChCH,EAAAA,GAAAA,IAAA,KAAGE,WAAWoW,EAAAA,GAAAA,GAAe,mBAAoB2yF,IAAoB,6BAA6B9oG,SAAA,CAC/F8uF,KAAY7uF,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAAaxN,UAAU,4BAC/CE,EAAAA,GAAAA,GAAA,QAAMF,UAAU,kBAAiBC,SAAEs+F,EAAWnxF,SAC5C+3F,GAAkBC,KAClBllG,EAAAA,GAAAA,GAAA,QAAMF,UAAU,kBAAiBC,SAAE+M,EAAKm4F,EAAiB,aAAe,mBAEzE4D,IAAoB/9F,QAAQuzF,EAAWlf,YACtCn/E,EAAAA,GAAAA,GAAA,QAAMF,UAAU,oBAAmBC,SAChC+M,EAAK+5F,GAAU,aAAe,WAAYxI,EAAWlf,SAAS39E,OAAQ,UAI5E6kG,KACCrmG,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACzS,UAAU,oBAAoBwN,KAAK,QAAQQ,QAAS4iF,KAE3DmY,KACC7oG,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,wBACV6iC,oBAAqBmkE,KAAiBlnE,EACtC9xB,QAASm5F,GACT8B,MAAI,EACJ7oG,KAAK,OACLkkD,OAAK,EAAArkD,SAEJ+oG,SAKTlpG,EAAAA,GAAAA,IAAA,OACEE,WAAWoW,EAAAA,GAAAA,GACT,+CACA6N,GACAs6E,EAAWx+F,KAAOsoG,EAAAA,KAAwB,iBAE5CtiG,MAAO,WAAWgE,QAAY9J,SAAA,EAE9BC,EAAAA,GAAAA,GAAA,UACEgU,IAAKwqF,EACL1+F,UAAU,gBACV+F,MAAOqiG,GAAS,WAAWQ,aAAqBhmG,KAEhD2jG,IAAYI,IAAcyB,MAAWloG,EAAAA,GAAAA,GAAA,UAAQgU,IAAK4vF,EAAmB9jG,UAAU,kBAChFglG,IACC9kG,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,6BACV8N,MAAM,cACNE,QAASq5F,GAA4BpnG,UAGrCC,EAAAA,GAAAA,GAAA,OAAK2D,IAAKqlG,GAAM1gF,IAAI,QAAQxoB,UAAU,gBAAgB0D,WAAW,KAF7D,sBAKPwhG,IACChlG,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,4CACV8N,MAAM,cACNE,QAASw5F,GAA6BvnG,UAGtCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,UAFP,uBAKPuW,IAAgBw6E,EAAWj+C,WAAW5sC,KAAK07B,IAC1C,MAAM+5D,GAAaz5D,EAAAA,EAAAA,IAAeN,GAC5B0xD,EAAaqI,EAAalE,GAAqBl1E,SAASo5E,QAAcvmG,EAE5E,OACE1C,EAAAA,GAAAA,GAAC0jG,GAAa,CAEZx0D,SAAUA,EACV0xD,WAAYA,EACZ+C,YAAaA,EACbxjD,mBAAoBA,EACpBo+C,oBAAqBT,EACrBhwF,QAASu3F,EACTt/E,cAAeu/E,EACf9G,gBAAiBA,EACjBoF,kBAAmBA,EACnB57E,cAAeA,GAVV,GAAGq2E,EAAWx+F,MAAMopG,QAc9BplF,IAAgBw6E,EAAWlf,UAAU/gC,MAAM,EAAGiqD,GAAQE,GAAoBlK,EAAWlf,SAAS39E,QAC5FgS,KAAI,CAAC6qE,EAAS54B,KACb,MAAMyjD,GAAa7C,IAAYI,MAC1BzG,EAAAA,EAAAA,MAAgCnxD,EAAAA,EAAAA,MAAawvC,EAAQ6K,gBACpDigB,EAAajB,IAAUziD,GAAK8iD,IAAsBW,EACpDtF,EACApF,EACEyK,EAAa5qB,EAAQujB,cAAgBvjB,EAAQx+E,GAAKw+E,EAAQiO,MAC1DsU,EAAaqI,EAAalE,GAAqBl1E,SAASo5E,QAAcvmG,EAEtE8+F,EAAenjB,EAAQx+E,KAAO2mG,EAAAA,KAC/BoC,IAAwB9a,IAAIzP,EAAQx+E,IAEzC,OACEG,EAAAA,GAAAA,GAACugG,GAAa,CAEZliB,QAASA,EACTn+E,KAAMsnG,GACNjJ,oBAAqBT,EACrB6C,8BAA+BlD,EAC/Bn9E,QAASqjF,EACTz4C,gBAAiBA,EACjBu1C,eAAgBA,EAChBC,YAAU,EACVF,cAAe4E,EACfxlE,qBAAsBA,EACtBihE,oBAAqBoE,EACrBzG,gBAAiB2K,EACjBpI,qBAAsBoE,EACtBr3F,QAASy3F,EACTvE,SAAU3iB,EACVuiB,WAAYA,EACZM,cAAeuF,IAAckC,IAAuB7a,IAAIzP,EAAQx+E,IAAM2lG,OAAkB9iG,EACxFu+F,YAAc0H,IAAuB7a,IAAIzP,EAAQx+E,SAAsB6C,EAAhB+iG,EACvDtE,oBAAqBkF,GAAWX,OAAwBhjG,EACxD0+F,kBAAmBA,EACnBC,mBAAoBA,EACpBC,mBAAoBA,EACpBt5E,cAAeA,EACfu5E,cAAelD,EAAWx+F,KAAOsoG,EAAAA,IACjCrH,cAAelhE,IACTy+D,EAAWx+F,KAAOuoG,EAAAA,KAA0B/J,EAAWx+F,KAAOsoG,EAAAA,KACpE3G,aAAcA,GA3BTnjB,EAAQx+E,OA+BpBwoG,IAASG,GAAkBD,KAC1B3oG,EAAAA,GAAAA,IAAC+N,EAAAA,EAAM,CACL7N,UAAU,wCACVuS,OAAK,EACLzE,MAAM,cACNE,QAASw6F,GAAOvoG,SAAA,CAEjB,IAEEyoG,GAAkBD,KAHf,WAQTlC,KACCrmG,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZvuB,KAAM/H,EAAK83F,EAAmB,mCAAqC,mCACnEl5F,OAAQ+kF,GACR7kF,QAAS+kF,GACTrtD,eAAgB0jE,GAChBzjE,sBAAoB,MA7JnB86D,EAAWx+F,QA4KtB,SAASomG,GAAuBt7E,GAC9B,OAAOA,EA/WyB,IAHH,EAoXxBA,EAhXgC,IAFI,EADL,CAsXtC,CC1cA,SAAyC,WAAzC,GAAgE,WAAhE,GAA+I,WAA/I,GAA6K,WAA7K,GAAuM,WAAvM,GAA0P,WCkGpPy+E,GAAsB,IAAMzzF,EAAAA,EAM5B0zF,GAAuB,IAAI7b,IAAI,CAAC8Y,EAAAA,IAAsBI,EAAAA,IAAwBE,EAAAA,MAC9E0C,GAA6B,IAAI9b,IAAI,CACzC8Y,EAAAA,IACAI,EAAAA,IACAE,EAAAA,MAqXF,IAAejoG,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,SAAQk0F,iBAAgBmE,uBACjC,MACEzlB,UACEoqB,SAAUC,GAEZ1gB,cACEpiD,KAAM+iE,EACNC,YAAaC,EACbC,cACEC,OAAQC,IAGZC,mBAAoBC,EACpB5pD,WAAW,mBACTD,EAAkB,gBAClB8pD,EAAe,aACfC,EAAY,YACZC,IAEA9oG,EAEE6pD,EAAkBpgD,QAAQyB,IAAU8nB,EAAAA,EAAAA,KAAqBhzB,EAAQkL,IACjEwgD,EAAexgD,GAASygD,EAAAA,EAAAA,KAAmB3rD,EAAQkL,QAAU7J,EAC7D4hG,EAAsBjjG,EAAOkjG,0BAA0BC,SAE7D,MAAO,CACLiF,mBACAO,qBAAuBvJ,OAAwC/9F,EAAvBsnG,EACxCF,mBAAoBrJ,EAAiBqJ,OAAqBpnG,EAC1D4hG,oBAAqB7D,EAAiB6D,OAAsB5hG,EAC5D8mG,kBACAY,oBAAqB/oG,EAAOynF,aAAauhB,MAAMC,OAC/CC,YAAYC,EAAAA,EAAAA,KAA4BnpG,GACxC6pD,kBACAtrB,sBAAsB0B,EAAAA,EAAAA,KAA2BjgC,GACjDsoG,yBACAc,oBAAqBppG,EAAOopG,oBAC5BC,qBAAsBrpG,EAAOqpG,qBAC7BR,aAActF,EAAmBsF,OAAexnG,EAChDunG,gBAAiBrF,EAAmBqF,OAAkBvnG,EACtDioG,eAAgB59C,GAAc69C,UAAU/qG,GACxCgrG,mBAAoBjG,GAAoB73C,GAAc+9C,wBACtD3qD,mBAAoBykD,EAAmBzkD,OAAqBz9C,EAC5DqoG,oBAAqBnG,EAAmBuF,OAAcznG,KA5CxCgM,EAlXiCs8F,EACnDlrG,YACAmrG,sBACA51F,WACAsuF,cACAyG,sBACAX,mBACAO,uBACAjF,sBACA+E,qBACAxF,sBACAkF,kBACAmB,iBACAT,eACAD,kBACA9pD,qBACAo8C,WA3BwB,mBA4BxBoN,yBACAY,aACA3F,mBACAnE,iBACA0E,gBACAj6C,kBACAtrB,uBACAsrE,wBACAT,sBACAC,uBACAK,sBACAF,qBACAM,sBACA9F,mBACAC,oBACAlE,oBACAC,qBACAC,yBAEA,MAAMj4E,GAAejgB,EAAAA,EAAAA,MACfguB,GAAYhuB,EAAAA,EAAAA,MACZo1F,GAAkBp1F,EAAAA,EAAAA,MAClBw6F,GAAoBx6F,EAAAA,EAAAA,OAEpB,SAAEhK,IAAaC,EAAAA,EAAAA,OAEnB0gD,aAAcqrD,EACdzrD,cAAe0rD,GACb5rD,KAEEsqD,GAAqBjiG,EAAAA,EAAAA,KAAQ,IAC1B24F,EACHqJ,EACA/qD,OAAOyK,QAAO8hD,EAAAA,GAAAA,IAAW7B,EAAmBO,KAC/C,CAACP,EAAkBhJ,EAAgBuJ,EAAsBF,IAEtDyB,GAA0BzjG,EAAAA,EAAAA,KAAQ,KACtC,MAAM0jG,EAA4BlH,GAAqB9wF,KAAK6tC,GAAWA,EAAO0nC,aAC9E,OAAO0gB,GAAoB+B,GAA2Bh4F,KAAK3T,GAAO4pG,EAAiB5pG,KAAK49B,OAAO3yB,WAC9F,CAAC2+F,EAAkBnF,IAEhBmH,GAAS,GAAGlP,kBACZ,eACJE,GAAc,0BACdG,GAAyB,mCACzBkB,GAAkC,mCAClCL,GAAkC,6BAClCM,GAA4B,iBAC5B9U,IACEqT,GAA0BjzE,EAAc+N,EAAWq0E,GAAQp2F,GAEzDq2F,IAAiBr/D,EAAAA,GAAAA,GAAuBs3D,QAAejhG,EAAW05F,EAAAA,KAElE5oD,IAAUzmC,EAAAA,EAAAA,KACVD,IAAO2mC,EAAAA,GAAAA,KAEPk4D,GAAiB7gG,QAAQs/F,GAEzBwB,IAAU9jG,EAAAA,EAAAA,KAAQ,KACtB,MAAM+jG,EAAkD,GAexD,GAbIjH,GAAoB15C,GAClB6/C,GAAqBvpG,QACvBqqG,EAAY94F,KAAK,CACflT,GAAIisG,EAAAA,IACJhE,WAAY,GACZ56F,MAAOsmC,GAAQ,sBACf4M,UAAW2qD,EACX53E,MAAO43E,EAAoBvpG,OAC3BqlG,SAAS,IAKXjC,IAAqB15C,EAAiB,CACxC,MAAM6gD,EAA2C7B,GAAc9rD,MAAM,EAtG/C,KAsG0E,GAC5FysD,GACFkB,EAAkBC,QAAQ,CAAE9qG,KAAM,SAEhC6qG,GAAmBvqG,QACrBqqG,EAAY94F,KAAK,CACflT,GAAIisG,EAAAA,IACJhE,WAAY,GACZ56F,MAAOsmC,GAAQ,aACf4M,UAAW2rD,EACX54E,MAAO44E,EAAkBvqG,OACzBqlG,SAAS,IAIb,MAAMoF,GAAwBhC,GAAmB,IAC9CxsE,QAAQyR,IAAc68D,EAAkBG,MAAMC,IAAgB79D,EAAAA,EAAAA,IAAe69D,EAAaj9D,OAC1FkP,MAAM,EAtHgB,IAuHnBguD,GAA2BjsD,GAAsB,IACpD1iB,QAAO,EAAG4uE,iBAAkBA,IAC5B74F,KAAI,EAAG07B,cAAeA,IACtBzR,QAAQyR,IACC68D,EAAkBG,MAAMC,IAAgB79D,EAAAA,EAAAA,IAAe69D,EAAaj9D,OACtE+8D,EAAqBC,MAAMC,IAAgB79D,EAAAA,EAAAA,IAAe69D,EAAaj9D,OAEjF,GAAIk9D,GAAyB5qG,QAAUyqG,GAAsBzqG,OAAQ,CACnE,MAAMmlG,GAAasF,GAAsBzqG,OACnC8qG,EAAqBL,EAAqBle,OAAOqe,GACvDP,EAAY94F,KAAK,CACflT,GAAI8mG,EAAYC,EAAAA,IAAwBN,EAAAA,IACxCwB,WAAY,GACZ56F,MAAOsmC,GAAQmzD,EAAY,mBAAqB,kBAChDvmD,UAAWksD,EACXn5E,MAAOm5E,EAAmB9qG,OAC1BqlG,SAAS,GAEb,CACF,MAAO,GAAIpG,EAAgB,CACzB,MAAM8L,EAAyB/C,EAAgBkB,GAC/C,GAAI6B,GAAwBptB,UAAU39E,OAAQ,CAC5C,MAAM29E,GAAWqtB,EAAAA,GAAAA,IAAcD,EAAuBptB,SACnD/gC,MAAM,EA7ImB,GA8IzB2vC,OAAOgc,GAAsB,IAAK,MACrC8B,EAAY94F,KAAK,IACZw5F,EACHptB,WACAhsD,MAAOgsD,EAAS39E,OAChB3B,GAAIymG,EAAAA,IACJp5F,MAAOsmC,GAAQ,kBACfqzD,SAAS,GAEb,CACI0E,GAAyB/pG,QAC3BqqG,EAAY94F,KAAK,CACflT,GAAI2mG,EAAAA,IACJsB,WAAY,GACZ30E,MAAOo4E,EAAwB/pG,OAC/B29E,SAAUosB,EACVr+F,MAAOJ,GAAK,+BACZ+5F,SAAS,GAGf,MAAO,GAAIqE,EAAuB,CAChC,MAAMuB,EAAwBjD,EAAgBiB,GAC1CgC,EAAsBttB,UAAU39E,QAClCqqG,EAAY94F,KAAK,IACZ05F,EACH5sG,GAAIymG,EAAAA,IACJp5F,MAAOsmC,GAAQ,mBAGrB,MAAWu2D,GAAoBvoG,QAC7BqqG,EAAY94F,KAAK,CACflT,GAAIymG,EAAAA,IACJwB,WAAY,IACZ56F,MAAOsmC,GAAQ,kBACf2rC,SAAU4qB,EACV52E,MAAO42E,EAAmBvoG,OAC1BqlG,SAAS,IAIb,MAAM6F,EAAa,IAAKtC,GAAuB,IAC3CO,GACF+B,EAAWV,QAAQrB,GAGrB,MAAMgC,GAAkB3oE,EAAAA,GAAAA,IAAO0oE,EAAW3e,OAAO4b,GAA0B,KAErEiD,EAAgB7tD,OAAOyK,QAAO8hD,EAAAA,GAAAA,IAAW9B,EAAiBmD,IAEhE,MAAO,IACFd,KACAe,KAEJ,CACDxC,EAAqBxF,EAAkBnE,EAAgByK,EAAuBnB,EAC9EJ,EAAwBH,EAAiBU,EAAc/pD,EAAoB3M,GAASy2D,EACpFS,EAAsBD,EAAqBv/C,EAAiB6/C,EAAqBJ,EACjFE,EAAoBU,EAAyBz+F,KAGzC+/F,IAAkB/kG,EAAAA,EAAAA,KAAQ,IAC9B6jG,IAC4D,IAAzDC,GAAQnuE,QAAQ/yB,GAAQA,EAAIy0E,UAAU39E,SAAQA,QAChD,CAACoqG,GAASD,KAEPmB,IAAmBC,EAAAA,GAAAA,GAAkB,GAAI3Q,EAAAA,KACzC4Q,GAAsBrB,IAAkBmB,KAAqBD,IAEnEhzB,EAAAA,GAAAA,GAAoBziD,EAAWh4B,IAAa4tG,KAG5C1iG,EAAAA,EAAAA,KAAU,KACR,IAAKqhG,GACH,OAGF,MAAMvjE,EAAShR,EAAU7tB,QACzB,IAAK6+B,EACH,OAGF,MAAM6kE,EAAUxQ,GAAiB2M,IAAuBhhE,EAAOyE,YAAc,EAAIu8D,GAAsB,IAEvG1jB,EAAAA,GAAAA,GAAwBt9C,EAAQ6kE,KAC/B,CAACtB,GAAgBlP,KAEpB,MAAMyQ,IAAoB5gG,EAAAA,EAAAA,IAAiBggF,IACzC6e,EAAoB7e,MAkEhB9+C,IAAgBt3B,EAAAA,GAAAA,GAAe,gBC9YhB,WD8Y8CpW,GAC7DqtG,IAAkBj3F,EAAAA,GAAAA,GACtBk3F,GACA,gBACC/B,GAAuB+B,IAEpBC,IAAgBn3F,EAAAA,GAAAA,GACpBk3F,GDrZ0F,WCuZ1F73F,EAAAA,GAAe,eAAiB,gBAChC01F,EACAmC,IAGI14E,IAAas4E,KAAwBH,GAE3C,OACE7sG,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CAACj9B,UAAW0tC,GAAelgC,KAAK,OAAO0vB,UAAWtI,GAAY,EAAI,EAAG44E,eAAa,EAAAvtG,SACzFitG,IAAwBH,IAErBG,IAAuBH,IAC1B7sG,EAAAA,GAAAA,GAAA,OAAKF,UAAWstG,GAA4BrtG,SAAEyzC,GAAQ,iBAEtD5zC,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,OACEgU,IAAKojB,EACLt3B,UAAWqtG,GAAgBptG,UAE3BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,0BAAyBC,SAAA,EACtCC,EAAAA,GAAAA,GAAA,UAAQgU,IAAKwqF,EAAiB1+F,UAAU,mBACxCE,EAAAA,GAAAA,GAAA,UAAQgU,IAAK4vF,EAAmB9jG,UAAU,kBACzC8rG,GAAQp4F,KA9FrB,SAAqB6qF,EAA8C/5F,GACjE,MAAMipG,EAAelP,EAAWlf,WAAW,GACrC3C,GAAkBtmE,EAAAA,GAAAA,GACtBk3F,GACA9oG,IAAUm4F,ICnV8B,YDsVpC+Q,EAAmBlpG,EAAQmpG,EAAAA,IAC3BC,GAAO1N,EAAAA,EAAAA,MAAgCnxD,EAAAA,EAAAA,MAAawvD,GAE1D,GAAIA,EAAWx+F,KAAOisG,EAAAA,IAAtB,CAIA,GAAIxC,GAA2Bxb,IAAIuQ,EAAWx+F,KAAOw+F,EAAWI,eAAiB8O,EAAc,CAC7F,MAAMlH,EAAWhI,EAAWx+F,KAAOymG,EAAAA,KAAwBjI,EAAWx+F,KAAO+mG,EAAAA,IACvE+G,EAAUtE,GAAqBvb,IAAIuQ,EAAWx+F,IACpD,OACEG,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAEL7N,UAAW08E,EACXlqE,UAAW+rF,EAAWnxF,MACtBmF,OAAK,EACLkyC,MAAOopD,EACP//F,MAAM,cAENE,QAASA,IAAMm7E,GAAiBod,EAAW,EAAI/hG,GAAOvE,SAErDsmG,GACCrmG,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,YAEXtN,EAAAA,GAAAA,GAACo+F,GAAe,CACdC,WAAYA,EACZ/9E,QAASiqF,IAAemB,GACxB1jF,eAAa,EACbu2E,oBAAqBR,GACrBS,gBAAiBgP,EAAoBE,EAAO9J,EAAoBpF,OAAmB97F,KAjBlF27F,EAAWx+F,GAsBtB,CAEA,OACEG,EAAAA,GAAAA,GAACugG,GAAa,CAEZliB,QAASkvB,EACTrtG,KAAMo+F,EAAAA,IACNpxF,MAAOmxF,EAAWnxF,MAClBpN,UAAW08E,EACXl8D,QAASiqF,IAAemB,GACxBnN,oBAAqBR,GACrByC,eAAa,EACb5gE,sBAAoB,EACpB4+D,gBAAiBgP,EAAoBE,EAAO9J,EAAoBpF,OAAmB97F,EACnFq+F,qBAAsBoE,EACtBr3F,QAASm7E,GACT+X,SAAU18F,EACV0jB,eAAa,GAbRq2E,EAAWx+F,GAjCpB,CAiDF,UAoCQG,EAAAA,GAAAA,GAAA,OACEgU,IAAKqV,EACL27B,SAAUomD,EACVtrG,UAAWutG,GAActtG,SAExB6rG,GAAQp4F,KAAI,CAAC6qF,EAAY54C,KACxB,MAAMo/C,EAAmBxG,EAAWx+F,KAAOisG,EAAAA,KACrCzN,EAAWx+F,KAAOymG,EAAAA,MAAyB4E,GAAyBzK,GACpEwE,EAAiB5G,EAAWx+F,KAAO8qG,EAEzC,OACE3qG,EAAAA,GAAAA,GAACykG,GAAU,CAETpG,WAAYA,EACZsF,YAAa74F,QAAQy/F,GAAcmB,IACnCpnG,MAAOmhD,EACP82C,SAAUkP,GACVlN,oBAAqB3B,GACrBkB,mCAAoCA,GACpCL,mCAAoCA,GACpCiH,aAAcjI,IAAkBh3C,EAAI,GAAKg3C,IAAkBh3C,EAAI,EAC/DyF,gBAAiBA,EACjBu1C,eAAgBA,EAChBmE,iBAAkBA,EAClBC,iBAAkBA,EAClBC,qBAAsBoG,GAAyB7M,EAAWx+F,KAAOymG,EAAAA,IACjEtB,sBAAuBvE,GAAkBpC,EAAWx+F,KAAOymG,EAAAA,IAC3DrB,eAAgBA,EAChBrlE,qBAAsBA,EACtBmlE,oBAAqBA,EACrB5kD,mBAAoBA,EACpBglD,cAAeA,EACfE,iBAAkBA,EAClBC,kBAAmBA,EACnBC,gBAAiB2H,GACjB9L,kBAAmBA,EACnBC,mBAAoBA,EACpBC,mBAAoBA,EACpBt5E,eAAa,GA1BRq2E,EAAWx+F,aA3B1BG,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,U,eEjahB,MCmFA,IAAe/sD,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAsBrN,IACjC,CACLusG,0BAA2B9iG,QAAQzJ,EAAOynF,aAAa4gB,aAAaloG,QACpE2jG,eAAe0I,EAAAA,EAAAA,KAA+BxsG,MAH9BqN,EAtDgCo/F,EAClDpiG,SACAqiG,kBACAH,4BACAzI,gBACA6I,sBACApiG,cAEA,MAAM,0BAAEqiG,IAA8BliG,EAAAA,EAAAA,MAEhCmiG,GAAmB9kG,EAAAA,EAAAA,OAClB+kG,EAAoBC,EAAsBC,IAA0BpvG,EAAAA,EAAAA,MAC3EqL,EAAAA,EAAAA,KAAU,KACR4jG,EAAiB3kG,QAAUwkG,EAAgBxkG,QAAS2S,wBAAwBiH,QAC3E,CAACzX,EAAQqiG,KAEZzjG,EAAAA,EAAAA,KAAU,KACJoB,IAAWkiG,GACbK,MAED,CAACL,EAA2BliG,EAAQuiG,IAEvC,MAAMf,GAAoBvtG,EAAAA,EAAAA,KAAa0+E,IACrC2vB,EAAoB3vB,GACpBzyE,MACC,CAACA,EAASoiG,IAEb,OACEhuG,EAAAA,GAAAA,GAACsuG,GAAAA,EAAM,CAAAvuG,UACLC,EAAAA,GAAAA,GAAC8f,GAAAA,EAAI,CACHpU,OAAQA,EACR6iG,WAAS,EACTh7F,UAAU,QACVi7F,gBD9DsB,WC+DtB5iG,QAASA,EACTsiG,iBAAkBA,EAAiB3kG,QACnCklG,kBAAmBN,EAAmBpuG,UAEtCC,EAAAA,GAAAA,GAACgrG,GAAiB,CAChBzO,SAAS,oBACToH,YAAaj4F,EACb2J,UAAW3J,EACX+0F,gBAAc,EACd0E,cAAeA,EACf/D,kBAAmBgN,EACnB/M,mBAAoBgN,EACpBlD,oBAAqB+B,EACrB5L,mBAAoB11F,Y,gBC5E9B,MC+BM8iG,GAAoB,EAAI/4F,EAAAA,EAuG9B,IAAehX,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAU6mC,YAIF,CACL6pB,aAJkB5hB,EAAAA,EAAAA,KAAW9uC,EAAQA,EAAO8yB,eAK5C26B,IAJU5mB,GAAOwqB,OAAQviB,EAAAA,EAAAA,KAAW9uC,EAAQ6mC,EAAMwqB,YAAShwD,KAH7CgM,EArGSigG,EAAGzmE,QAAO6pB,cAAajD,UAClD,MAAM,eAAE2yC,EAAc,0BAAEmN,EAAyB,gBAAEC,IAAoB9iG,EAAAA,EAAAA,MAEjEe,GAAO2mC,EAAAA,GAAAA,KAEP/nC,EAASZ,QAAQo9B,GACjB4mE,GAAiB9iE,EAAAA,GAAAA,GAAiB9D,GAElC6mE,GAAqBjnG,EAAAA,EAAAA,KAAQ,KACjC,GAAKiqD,GAAgB+8C,EACrB,MAAO,IACF/8C,EACH82B,YAAa,CACX3nF,KAAM,UACN6nF,WAAY+lB,EAAe3mC,kBAG9B,CAACpW,EAAa+8C,IAEX3iG,GAAcrE,EAAAA,EAAAA,KAAQ,KAC1B,IAAKgnG,IAAmBhgD,EAAK,OAE7B,MAAMmN,GAAUryB,EAAAA,EAAAA,IAAgBklB,GAEhC,OAAIggD,EAAe51F,SACVpM,EAAK,wBAAyB,CACnCgiD,IAAKmN,EACL/iD,UAAU81F,EAAAA,GAAAA,IAAoBliG,EAAMgiG,EAAe51F,WAClD,CACDkhC,WAAW,EACXyW,cAAc,IAIX/jD,EAAK,qBAAsB,CAAEgiD,IAAKmN,GAAW,CAAE7hB,WAAW,EAAMyW,cAAc,MACpF,CAAC/B,EAAKhiD,EAAMgiG,IAET9zE,GAAc1uB,EAAAA,EAAAA,IAAgB,KAClC,MAAMy3D,EAAY+qC,GAAgB/qC,UAE9BA,GACF8qC,EAAgB,CACd9qC,YACAl1C,MAAO,CACLi4C,UAAW,sBACXC,UAAW,CACT7X,MAAO,oBAMf0/C,OAGIK,GAAkB3iG,EAAAA,EAAAA,IAAgB,KACtC,IAAKwiG,EAAgB,OAErB,MAAMI,EAAUJ,EAAe51F,UAAW6oB,EAAAA,GAAAA,MAAkB+sE,EAAe51F,cAAWxW,EAEtF++F,EAAe,CACb0N,kBAAmBL,EAAe/qC,UAClC8kB,YAAa,CAAE3nF,KAAM,UAAW6nF,WAAY+lB,EAAe3mC,cAAey6B,MAAOsM,KAEnFN,OAGF,OACEhvG,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJzB,OAAQA,EACR02B,iBDvGoB,WCwGpBgtE,wBAAsB,EACtB/sE,QAAM,EACNz2B,QAASovB,EAAYj7B,SAAA,CAEpB+uG,IACC9uG,EAAAA,GAAAA,GAAC6rF,GAAAA,EAAW,CACV/rF,UD9GsC,WC+GtCipF,WAAY+lB,EAAe3mC,cAC3BjoE,KAAMwuG,GACNW,UAAW,EACXlP,aAAW,KAGfvgG,EAAAA,GAAAA,IAAA,OAAAG,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAIF,UDtHgF,WCsHxDC,SAAE+M,EAAK,8BACnC9M,EAAAA,GAAAA,GAAA,KAAGF,UDvH8D,WCuHhCC,SAAEoM,OAEpC4iG,IACC/uG,EAAAA,GAAAA,GAACsvG,GAAAA,EAAQ,CACPC,SAAUR,EACVS,iBAAe,KAGnBxvG,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACzN,KAAK,UAAU4N,QAASmhG,EAAgBlvG,SAC7C+M,EAAK,2B,4BChId,SAA2F,WCgV3F,SAAS2iG,GAAuBC,EAAwBnjG,GACtD,OAAOmjG,EAASn+D,MAAMo+D,IAAWA,EAAMpjG,UAClCmjG,EAASjyE,QAAQkmB,GAAMp3C,GAAUo3C,EAAEp3C,SAAWA,IAC9Ck3C,MAAK,CAACC,EAAGC,IAAMD,EAAE1wB,KAAO2wB,EAAE3wB,OAAM,EACvC,CAMA,UAAer0B,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAU6mC,YACT,MAAMj5B,EAAOi5B,IAASkI,EAAAA,EAAAA,KAAW/uC,EAAQ6mC,GAAO37B,QAC1CwgD,EAAe99C,IAAQ+9C,EAAAA,EAAAA,KAAmB3rD,EAAQ4N,EAAKpP,IACvD+vG,EAAa1nE,GAAOwnE,UAAYD,GAAuBvnE,EAAMwnE,SAAUxnE,EAAM37B,QAGnF,MAAO,CACL0C,OACA89C,eACA8iD,gBALkBD,GAAYrjG,QAAS6jC,EAAAA,EAAAA,KAAW/uC,EAAQuuG,GAAYrjG,aAAU7J,EAMhFk9B,sBAAsB0B,EAAAA,EAAAA,KAA2BjgC,MAXnCqN,EAhSDohG,EACjB5nE,QACAj5B,OACA89C,eACA8iD,kBACAjwE,2BAEA,MAAM,WACJmwE,EAAU,gBACVC,EAAe,gBACf7lB,EAAe,iBACfxoD,EAAgB,aAChBsuE,IACElkG,EAAAA,EAAAA,OAEGmkG,EAAoBC,EAAkBC,IAAqBnxG,EAAAA,EAAAA,MAC3DoxG,EAAkBC,EAAgBC,IAAmBtxG,EAAAA,EAAAA,MACrDuxG,EAAqBC,EAAmBC,IAAsBzxG,EAAAA,EAAAA,KAE/Ds0B,EAAYtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,GAElCvD,EAASZ,QAAQo9B,GAEjBsL,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,MAEbnpC,EAAAA,EAAAA,KAAU,KACJ2E,IAAS89C,GACXkjD,EAAa,CAAE1jG,OAAQ0C,EAAKpP,OAE7B,CAACoP,EAAM89C,IAEV,MAAM4jD,GAAY7oG,EAAAA,EAAAA,KAAQ,KACxB,GAAKmH,EAIL,OAAOm/C,EAAAA,EAAAA,IAAa5a,EAASvkC,KAC5B,CAACA,EAAMukC,IAEJo9D,GAAmB9oG,EAAAA,EAAAA,KAAQ,KAC/B,GAAK+nG,EAIL,OAAOzhD,EAAAA,EAAAA,IAAa5a,EAASq8D,KAC5B,CAACA,EAAiBr8D,KAEf,eACJq9D,EAAc,UACdC,EAAS,MACTnB,EAAK,MACLziG,EAAK,SACL6jG,EAAQ,UACRC,EAAS,MACTtkG,EAAK,SACLiH,EAAQ,gBACRs9F,EAAe,aACfC,IACappG,EAAAA,EAAAA,KAAQ,KACrB,IAAKogC,GAAOipE,cAAgBliG,EAC1B,MAAO,CACL4hG,gBAAgB,EAChB3jG,MAAOsmC,EAAQ,YAInB,MAAM,WACJ49D,GACElpE,EAAMipE,YAEJvB,EAAa1nE,GAAOwnE,UAAYD,GAAuBvnE,EAAMwnE,SAAUzgG,EAAKpP,IAC5EwxG,EAA+BnpE,GAAOwnE,WAoNjBA,EApNoDxnE,EAAMwnE,SAoNlCnjG,EApN4C0C,EAAKpP,IAqN/F6vG,EAAS4B,OAAO3B,GAAUA,EAAMpjG,SAAWA,KADpD,IAA+BmjG,EAAwBnjG,EAlNnD,MAAM,OACJytF,EAAM,aACNuX,EAAY,aACZC,EAAY,cACZC,EAAa,gBACbC,EAAe,WACfC,IACEC,EAAAA,GAAAA,GAAqB1pE,EAAMipE,aAAa,GAEtCU,EAAWT,EAEXv1F,EAAO23B,EAAQ,cAAe+9D,GAC9BpuF,EAAQquF,EAAeh+D,EAAQ,cAAe+9D,EAAe,QAAK7uG,EAElEovG,EAAat+D,EAAQ,0BAA2Bk+D,GAEhDK,EAAyBv+D,EAAZjgB,EAAoB,eAA0B,cAE3Dy+E,GAA0BjlD,GAAcklD,oBAAsB,IAAMllD,GAAcmlD,eAAiB,GAEzG,IAAI/lG,EACJ,GAAIwlG,EACFxlG,EAAcqnC,EAAQ,8BACjB,GAAIw+D,EAAyB,KAAMz9E,EAAAA,EAAAA,IAAYtlB,GAAO,CAC3D,MAAMkjG,EAAa3+D,EAAQ,qCAAsCw+D,GACjE7lG,EAAcqnC,EAAQ,+BAAgC,CAAC2+D,EAAYxB,GACrE,MACExkG,EAAcqnC,EAAQ,qCAAsC,CAACm9D,EAAWmB,IAG1E,MAAO,CACLjB,gBAAgB,EAChB3jG,MAAO6kG,EACPhB,SAAUl1F,EACVm1F,UAAW7tF,EACXzW,MAAOstF,EAAO5T,WACdzyE,SAAU89F,EACVC,kBACAT,gBAAiB9kG,EACjBwjG,MAAOC,EACPkB,UAAWe,EACXX,aAAcG,IAAiCM,KAEhD,CAAC1iG,EAAM0hG,EAAWzoE,EAAOsL,EAASuZ,EAAcx5B,IAE7C6+E,GAAmBlqE,GAAOwnE,UAAUluG,QAAUo+B,EAC9CyyE,EAAmB1C,GAAOpjG,QAAUojG,EAAMpjG,SAAW27B,GAAO37B,OAE5D+lG,GAAmBhmG,EAAAA,EAAAA,IAAgB,KACvC8jG,IACAL,EAAW,CAAExjG,OAAQ0C,EAAMpP,GAAI0yG,MAAO,CAAC5C,EAAO6C,QAC9CroB,EAAgB,CAAC,MAGbsoB,GAAuBnmG,EAAAA,EAAAA,IAAgB,KAC3Cq1B,IACA+uE,IACAV,OAGI0C,GAAoBpmG,EAAAA,EAAAA,IAAgB,KACxC,IAAKqjG,EACH,OAAK/vE,OAKLowE,SAJES,IAQCS,EAKDvB,EAAM3tE,cACRsuE,IAIE+B,EACFlC,IAIFmC,IAdEtC,OAiBEn0C,GAAmBvvD,EAAAA,EAAAA,IAAgB,KACvC0jG,OA0CF,OACEpwG,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJzB,OAAQA,EACRwB,MAAOA,EACPpN,UD5QuC,WC6QvCsiC,iBD7QoB,WC8QpBx2B,QAASokG,EAAgBjwG,SAAA,CA5CtB8wG,GAKHjxG,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAC2yG,GAAAA,EAAe,CACd5B,SAAUA,EACVC,UAAWA,EACXr9F,SAAUA,EACVi/F,kBAAmBlmG,EACnBkxE,kBAAkB,UAEnBkzB,IACC9wG,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAeqH,GDhPoE,YCgPnCxd,SAC7DyzC,EAAQ,qCAAsCm9D,MAGnD3wG,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAmBxd,UAChCg0B,EAAAA,GAAAA,GAAWk9E,EAAiB,CAAC,kBAAmB,aAEnDrxG,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACE,QAAM,EAAC/N,UAAU,wBAAwBogB,SAAUkyF,EAAiBtkG,QAAS4kG,EAAkB3yG,SACpGmxG,GACCtxG,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,UACVkmC,EAAQjgB,EAAY,4BAA8B,4BAEnDigB,EAAQ,SAEdxzC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACE,QAAM,EAAC/N,UAAU,wBAAwBgO,QAAS+tD,EAAiB97D,SACxEyzC,EAAQ,mBA9BRxzC,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,CAAC5rD,UDnO4C,aCiR3DuyG,GAAoBzB,IACnBhxG,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJzB,OAAQwkG,EACRpwG,UDpR+I,WCqR/IsiC,iBDrRgL,WCsRhLx2B,QAASwkG,EAAkBrwG,SAAA,EAE3BH,EAAAA,GAAAA,IAAA,OAAKE,UDxRwM,WCwRtKC,SAAA,EACrCH,EAAAA,GAAAA,IAAA,OAAKE,UDzRqP,WCyRpNC,SAAA,EACpCC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CAACC,KAAM+7E,EAAiB3vG,KAAK,WACpCF,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,cAAcxN,UD3RwP,iBC6RnRE,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,OAAOxN,UD7R4M,cC8R9NE,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CAACC,KAAM7kB,EAAM/O,KAAK,cAE3BF,EAAAA,GAAAA,GAAA,OAAAD,UACGg0B,EAAAA,GAAAA,GACCyf,EAAQ,4BAA6B,CAACo9D,EAAkBD,IAAa,CAAC,kBAAmB,aAG7F/wG,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACE,QAAM,EAAC/N,UAAU,wBAAwBgO,QAASwkG,EAAiBvyG,SACxEyzC,EAAQ,cAEXxzC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACE,QAAM,EAAC/N,UAAU,wBAAwBgO,QAASsiG,EAAkBrwG,SACzEyzC,EAAQ,kBAKhB1oC,QAAQ6kG,GAAO3tE,iBACdhiC,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQ2kG,EACRwC,eAAa,EACbxvE,aAAcmQ,EAAQ,MACtBtmC,MAAOsmC,EAAQ,yCACf5nC,QAAS2kG,EACTjtE,eAAgBitE,EAAgBxwG,UAE/Bg0B,EAAAA,GAAAA,GACCyf,EACE,wCACAw7D,EAAAA,GAAAA,IAAoBliG,EAAM6iG,EAAM3tE,eAAgBD,EAAAA,GAAAA,QAElD,CAAC,kBAAmB,aAIxBnC,IACA5/B,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQ8kG,EACRntE,aAAcmQ,EAAQ,cACtBtmC,MAAOsmC,EAAQ,iBACf5nC,QAAS8kG,EACTptE,eAAgBmvE,EAAqB1yG,UAEpCg0B,EAAAA,GAAAA,GAAWyf,EAAQ,4BAA6B,CAAC,kBAAmB,mB,4BCzU/E,SAAkD,WCsIlD,IAAe70C,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAU6mC,YACT,MAAM,QAAEtnC,GAAYsnC,GAAS,CAAC,EACxB4qE,EAAclyG,IAAWi0B,EAAAA,EAAAA,KAAkBxzB,EAAQT,EAAQ2L,OAAQ3L,EAAQ4X,WAC3E2xB,EAAS2oE,IAAe5gF,EAAAA,EAAAA,KAAa7wB,EAAQyxG,GAEnD,MAAO,CACL3+E,cAAe9yB,EAAO8yB,cACtBlC,cAAekY,KARDz7B,EAtGEqkG,EACpB5+E,gBACA+T,QACAjW,oBAEA,MAAM,mBACJ+gF,EAAkB,cAAEC,EAAa,aAAE3gF,IACjCvmB,EAAAA,EAAAA,MACEe,GAAOC,EAAAA,EAAAA,KACPrB,EAASZ,QAAQo9B,GAEjBgrE,IAAWhrE,GAAOvR,KAAKw8E,MAAQjrE,GAAOvR,KAAKw8E,OAASh/E,GAAmB+T,GAAOvR,KAAKy8E,QAEnFC,GAAqB/mG,EAAAA,EAAAA,IAAgB,KACpC47B,GAAUA,EAAMvR,KAAK28E,oBAC1BhhF,EAAa,CACX/lB,OAAQ27B,EAAMvR,KAAKkb,OACnBr5B,UAAW0vB,EAAMvR,KAAK28E,oBAExBN,QAGIN,GAAoBpmG,EAAAA,EAAAA,IAAgB,KACpC4mG,EACFD,EAAc,CAAEnrC,KAAM5/B,EAAO4/B,OAG/BkrC,OAGIO,GAAYzrG,EAAAA,EAAAA,KAAQ,KACxB,IAAKogC,EAAO,OACZ,MAAM,KAAE4/B,EAAI,KAAEnxC,GAASuR,EAEjB2J,EAASlb,EAAKkb,QAAU5f,GAAepyB,GAEvCuoC,GACJxoC,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,OAAK2D,IAAKo2F,GAAazxE,IAAI,GAAGxoB,UDtE8B,cCuE5DE,EAAAA,GAAAA,GAAA,KAAGF,UAAWyd,GAAgBxd,UAAEg0B,EAAAA,GAAAA,GAAWjnB,EAAK,uBAAwB,CAAC,uBACzE9M,EAAAA,GAAAA,GAACwzG,GAAAA,EAAS,CAACtmG,MAAM,mBAAmBs/E,KAAM,GAAG1jB,EAAAA,gBAAoChB,SAI/E2rC,EAAuB,CAC3B,CAAC3mG,EAAK,gBAAiB+kC,EAAS,CAAEtlC,OAAQslC,GAAW/kC,EAAK,wBAC1D,CAACA,EAAK,cAAe6pB,EAAKw8E,KAAO,CAAE5mG,OAAQoqB,EAAKw8E,MAASrmG,EAAK,wBAC9D,CAACA,EAAK,gBAAiBA,EAAK,6BAA8BA,EAAK,SAAU6pB,EAAKwuD,OAAQ,QAgCxF,OA9BIxuD,EAAK+8E,gBACPD,EAAU1gG,KAAK,CACbjG,EAAK,mBAEH9M,EAAAA,GAAAA,GAAA,QACEF,WAAWoW,EAAAA,GAAAA,GAAeygB,EAAK28E,mBDtFf,YCuFhBxlG,QAASulG,EAAmBtzG,SAE3B42B,EAAK+8E,iBAAmB/8E,EAAKw8E,KAC1BrmG,EAAK,8BACLA,EAAK,wBAKjB2mG,EAAU1gG,KAAK,CACbjG,EAAK,iBACLgtF,EAAAA,GAAAA,IAAmC,IAAZnjE,EAAK3D,KAAalmB,EAAKkqD,MAAM,KAa/C,CACL5uB,SACAqrE,YACA3pE,QAZA9pC,EAAAA,GAAAA,GAAA,QAAMF,UAAWyd,GAAgBxd,UAC9Bg0B,EAAAA,GAAAA,GACC4C,EAAKy8E,OAAStmG,EAAK,wBAAwBgtF,EAAAA,GAAAA,IAAqC,IAAdnjE,EAAKy8E,OAAetmG,EAAKkqD,MAAM,IAC7FlqD,EAAK,4BACT,CAAC,yBAUN,CAACA,EAAMmlB,GAAepyB,GAAIqoC,IAE7B,GAAKqrE,EAEL,OACEvzG,EAAAA,GAAAA,GAAC2zG,GAAAA,EAAc,CACbjoG,OAAQA,EACRwB,MAAOJ,EAAK,uBACZ2mG,UAAWF,EAAUE,UACrBrrE,OAAQmrE,EAAUnrE,OAClB0B,OAAQypE,EAAUzpE,OAClBh1B,WAAqBhI,EAATomG,EAAc,kBAA0B,SACpDl9F,cAAe08F,EACf9mG,QAASonG,QClIR,SAASY,GAAgBC,EAAennG,GAC7C,OAAOmnG,EAAIr1D,QAAO,CAACyf,EAAM61C,IAChB7gG,KAAKya,IAAIomF,EAAOpnG,GAASuG,KAAKya,IAAIuwC,EAAOvxD,GAASonG,EAAO71C,GAEpE,CCHA,MC2GA,IAAet/D,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAU6mC,YACT,MAAM,wBAAE6rE,GAA4B7rE,GAAS,CAAC,EAE9C,MAAO,CACL6rE,6BALcrlG,EAjFOslG,EACzB9rE,QACA6rE,8BAEA,MAAM,mBACJf,EAAkB,wBAAEiB,EAAuB,cAAEC,IAC3CnoG,EAAAA,EAAAA,MACEe,GAAO2mC,EAAAA,GAAAA,KACP/nC,EAASZ,QAAQo9B,IAEhBisE,EAAgBC,IAAqBloG,EAAAA,EAAAA,MAEtCmoG,GAAe/nG,EAAAA,EAAAA,IAAiBI,GAdjB,GAeZ2Y,OAAO3Y,KAGV4nG,GAAwBxsG,EAAAA,EAAAA,KAAQ,KACpC,GAAKisG,EACL,OAAOH,GAAgBW,EAAAA,IAAqBR,EApBzB,IAoBmE3tB,aACrF,CAAC2tB,KAEJzpG,EAAAA,EAAAA,KAAU,KACJgqG,GACFF,EAAkBE,KAEnB,CAACA,IAEJ,MAAM/mG,GAA8CzF,EAAAA,EAAAA,KAAQ,IACnDysG,EAAAA,IAAoB/gG,KAAK2xE,IAAM,CACpCz4E,MAAOuyC,OAAOkmC,GACdl4E,MAAOH,EAAK,SAAU,CAAEqmB,MAAOgyD,GAAU,CAAEjpB,YAAa,SAEzD,CAACpvD,IAEEu6E,GAAe/6E,EAAAA,EAAAA,IAAiBI,IACpC0nG,EAAkB1nG,MAGd42B,GAAiBh3B,EAAAA,EAAAA,IAAgB,KAChC6nG,GACLD,EAAc,CAAEM,KAAMH,EAAaF,QAG/BM,GAAiBnoG,EAAAA,EAAAA,IAAgB,KACrC2nG,OAGF,OACEr0G,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJzB,OAAQA,EACRwB,MAAOJ,EAAK,qBACZlB,QAASonG,EACTlzG,UD9EiB,WC8EMC,SAAA,EAEvBC,EAAAA,GAAAA,GAAA,KAAAD,SAAI+M,EAAK,sCACT9M,EAAAA,GAAAA,GAACqN,GAAAA,EAAU,CACTvN,UAAU,wBACVwN,KAAK,0BACLC,QAASA,EACTE,SAAU0mG,EACV3mG,SAAU65E,EACVqtB,UAAQ,KAEV90G,EAAAA,GAAAA,IAAA,OACEE,UAAU,sBAAqBC,SAAA,EAE/BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,wBACV+N,QAAM,EACNC,QAASw1B,EAAevjC,SAEvB+M,EAAK,WAER9M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACC,MAAM,SAAS9N,UAAU,wBAAwB+N,QAAM,EAACC,QAAS2mG,EAAe10G,SACrF+M,EAAK,sBCpGhB,IAAgB,KAAO,WAAW,QAAU,WAAW,OAAS,WAAW,YAAc,WAAW,KAAO,WAAW,SAAW,WAAW,YAAc,YCqF1J,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAYrN,IAC9B,MAAM4uC,EAAY5uC,EAAO4uC,UACnB0kE,EAAuB1kE,GAAW0kE,qBAGxC,MAAO,CACLA,uBACArsC,aAJmBr4B,GAAWq4B,cAAgBC,EAAAA,OAH9B75D,EA5DoCkmG,EACtD1sE,QACAysE,uBACArsC,mBAEA,MAAM,0BAAEusC,EAAyB,mBAAEC,IAAuB/oG,EAAAA,EAAAA,MACpDe,GAAO2mC,EAAAA,GAAAA,KACP/nC,EAASZ,QAAQo9B,GAEjB6sE,GAAkBzoG,EAAAA,EAAAA,IAAgB,KAClCqoG,GACFG,EAAmB,CACjBE,oBAAoB,EACpBC,SAAUN,IAGdE,OAGI75E,GAAc1uB,EAAAA,EAAAA,IAAgB,KAClCuoG,OAGF,OACEj1G,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJzB,OAAQA,EACRE,QAASovB,EACTl7B,UAAWyd,GAAOygB,KAAKj+B,SAAA,EAEvBH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOzK,QAAQ/S,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAO6qB,OAAOroC,UAC5BC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAO23F,YAAYn1G,UACjCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,OAAOxN,UAAWyd,GAAOvK,YAGxChT,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAOrQ,MAAMnN,SACzB+M,EAAK,gCAER9M,EAAAA,GAAAA,GAAA,KAAGF,UAAWyd,GAAO43F,SAASp1G,SAC3B+M,EAAK,2BAA4B,CAAEqmB,MAAOm1C,GAAgB,CACzDzX,cAAc,EACdzW,WAAW,EACX8hB,YAAaoM,OAGjBtoE,EAAAA,GAAAA,GAAA,KAAGF,UAAWyd,GAAOpR,YAAYpM,SAC9B+M,EAAK,yCAGV9M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,sBAAqBC,UAClCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLG,QAASinG,EAAgBh1G,SAExB+M,EAAK,oC,4BC9EhB,UAAgB,YAAc,WAAW,iBAAiB,WAAW,cAAgB,WAAW,gBAAgB,WAAW,aAAe,WAAW,qBAAqB,WAAW,iBAAmB,WAAW,mBAAmB,WAAW,gBAAkB,WAAW,eAAiB,WAAW,QAAU,WAAW,OAAS,WAAW,cAAc,WAAW,WAAa,WAAW,eAAe,WAAW,YAAc,YCiI5a,IAAenO,EAAAA,EAAAA,KA1GuBy2G,EAAGC,SAAQ/5B,aAC/C,MAAM,mBAAEg6B,EAAkB,mBAAEC,IAAuBxpG,EAAAA,EAAAA,MAE7Ce,GAAO2mC,EAAAA,GAAAA,KACPD,GAAUzmC,EAAAA,EAAAA,MAETyoG,EAAiBC,IAAsBvpG,EAAAA,EAAAA,IAAmBmpG,EAAOK,gBAElEC,EAAgB7qG,QAAQuqG,EAAOK,eAAel0G,QAC9Co0G,EAAyC,IAAjCP,EAAOQ,eAAer0G,OAC9Bs0G,EAAgBH,EAAgBN,EAAOK,eAAel0G,OAAS,EAC/Dk7D,EAAY84C,EAAgBh0G,OAASg0G,EAAgBh0G,OAAO4kF,gBAAa1jF,EAEzEuuG,EAAkB2E,EAAQ9oG,EAAK,yBACjCgpG,EAAgBhpG,EAAK,wBAAyB,CAC9Cq8C,MAAOr8C,EAAK,6BAA8B,CAAEqmB,MAAO2iF,GAAiB,CAAE55C,YAAa45C,IACnF5oG,OAAOo+B,EAAAA,GAAAA,IAAuB,CAC5Bz2B,KAAMymE,EAAOpuE,MAAM2H,KACnBm3E,SAAU1Q,EAAOpuE,MAAM8+E,SACvB+pB,sBAAuBz6B,EAAO06B,qBAE/B,CACD57D,WAAW,EACXyW,cAAc,IACX/jD,EAAK,6BAEN4lG,GAAoB/yG,EAAAA,EAAAA,KAAY,KACpC21G,IAEKE,EAAgBh0G,QAErB+zG,EAAmB,CACjBF,SACAl4D,QAASq4D,MAEV,CAACH,EAAQG,IAENS,GAAwBt2G,EAAAA,EAAAA,KAAY,KACxC,MAAMu2G,EAAiBV,EAAgBh0G,SAAW6zG,EAAOK,eAAel0G,OACxEi0G,EAAmBS,EAAiB,GAAKb,EAAOK,kBAC/C,CAACL,EAAOK,eAAgBF,EAAgBh0G,SAE3C,OACE5B,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOzK,QAAQ/S,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOpR,YAAYpM,UAChCg0B,EAAAA,GAAAA,GAAWk9E,EAAiB,CAAC,kBAAmB,aAEnDrxG,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAO44F,cAAe,iBAAiBp2G,SAAA,CACnE+K,QAAQuqG,EAAOK,eAAel0G,UAC7B5B,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAO64F,aAAar2G,SAAA,EAClCC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAO84F,iBAAiBt2G,SACrCyzC,EAAQ,4BAA6BgiE,EAAgBh0G,OAAQ,QAEhExB,EAAAA,GAAAA,GAAA,OACEF,UAAWyd,GAAO+4F,gBAClB7sE,KAAK,SACLD,SAAU,EACV17B,QAASmoG,EAAsBl2G,SAE9By1G,EAAgBh0G,SAAW6zG,EAAOK,eAAel0G,OAC9CgyC,EAAQ,eAAiBA,EAAQ,mBAGzCxzC,EAAAA,GAAAA,GAACokC,GAAAA,EAAU,CACTC,QAASgxE,EAAOK,eAChB5wE,oBAAqB2wE,EACrBhyE,YAAa+xE,EACbxwE,eAAa,EACbC,YAAU,EACVC,cAAc,iBAIpBllC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAO64F,aAAar2G,UAClCC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAO84F,iBAAiBt2G,SACrCyzC,EAAQ,gCAGbxzC,EAAAA,GAAAA,GAACokC,GAAAA,EAAU,CACTC,QAASgxE,EAAOQ,eAChBtxE,kBAAmB8wE,EAAOQ,eAC1BpyE,YAAa4xE,EAAOQ,eACpB7wE,eAAa,EACbC,YAAU,EACVC,cAAc,iBAGlBllC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLzN,KAAK,UACL4N,QAAS4kG,EAAkB3yG,UAE3BH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOzI,WAAW/U,SAAA,EAC9By1G,EAAgBh0G,QAAUgyC,EAAQ,MACnC1oC,QAAQ0qG,EAAgBh0G,UACvB5B,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,CACGyzC,EAAQ,6BAA8BgiE,EAAgBh0G,OAAQ,MAC/DxB,EAAAA,GAAAA,GAACu2G,GAAAA,EAAK,CAACz2G,UAAWyd,GAAOi5F,YAAa3hG,KAAM6nD,EAAW+5C,kBAAgB,kBC1BrF,IAAe93G,EAAAA,EAAAA,KAxEsB+3G,EACnCp7B,SACAq7B,mBAAmBryE,GAAAA,MAEnB,MAAM,mBAAEgxE,EAAkB,cAAEsB,IAAkB7qG,EAAAA,EAAAA,MAExCe,GAAOC,EAAAA,EAAAA,MAENyoG,EAAiBC,IAAsBvpG,EAAAA,EAAAA,IAAmB,IAE3DwwD,EAAY84C,EAAgBh0G,OAASg0G,EAAgBh0G,OAAO4kF,gBAAa1jF,EAEzEuzG,GAAwBt2G,EAAAA,EAAAA,KAAY,KACxC,MAAMu2G,EAAiBV,EAAgBh0G,SAAWm1G,EAAiBn1G,OACnEi0G,EAAmBS,EAAiB,GAAKS,KACxC,CAACA,EAAkBnB,EAAgBh0G,SAEhCkxG,GAAoB/yG,EAAAA,EAAAA,KAAY,KACpC21G,IACAsB,EAAc,CAAE96B,SAAUR,EAAOz7E,GAAIs9C,QAASq4D,MAC7C,CAACl6B,EAAOz7E,GAAI21G,IAEf,OACE51G,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOzK,QAAQ/S,SAAA,CAC5B+K,QAAQ6rG,GAAkBn1G,UACzB5B,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOpR,YAAYpM,UAChCg0B,EAAAA,GAAAA,GAAWjnB,EAAK,4BAA6B,CAAC,kBAAmB,aAEpElN,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAO44F,cAAe,iBAAiBp2G,SAAA,EACpEH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAO64F,aAAar2G,SAAA,EAClCC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAO84F,iBAAiBt2G,SACrC+M,EAAK,4BAA6B0oG,EAAgBh0G,OAAQ,QAE7DxB,EAAAA,GAAAA,GAAA,OACEF,UAAWyd,GAAO+4F,gBAClB7sE,KAAK,SACLD,SAAU,EACV17B,QAASmoG,EAAsBl2G,SAE9By1G,EAAgBh0G,SAAWm1G,EAAiBn1G,OAASsL,EAAK,eAAiBA,EAAK,mBAGrF9M,EAAAA,GAAAA,GAACokC,GAAAA,EAAU,CACTC,QAASsyE,EACT7xE,oBAAqB2wE,EACrBhyE,YAAa+xE,EACbxwE,eAAa,EACbC,YAAU,EACVC,cAAc,oBAKtBllC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLzN,KAAK,UACL4N,QAAS4kG,EAAkB3yG,UAE3BH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOzI,WAAW/U,SAAA,EAC9By1G,EAAgBh0G,QAAUsL,EAAK,0BAChChC,QAAQ0qG,EAAgBh0G,UACvB5B,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,CACG+M,EAAK,gCACN9M,EAAAA,GAAAA,GAACu2G,GAAAA,EAAK,CAACz2G,UAAWyd,GAAOi5F,YAAa3hG,KAAM6nD,EAAW+5C,kBAAgB,kBCUrF,IAAe93G,EAAAA,EAAAA,KAzEmBk4G,EAAGxB,aACnC,MAAM,mBAAEC,EAAkB,mBAAEC,IAAuBxpG,EAAAA,EAAAA,MAE7Ce,GAAO2mC,EAAAA,GAAAA,KACPD,GAAUzmC,EAAAA,EAAAA,MACTyoG,EAAiBC,IAAsBvpG,EAAAA,EAAAA,IAAmBmpG,EAAOl4D,SAElE25D,GAAYhvG,EAAAA,EAAAA,KAAQ,KACxB,MAAMohD,GAAYra,EAAAA,EAAAA,MAAYsa,MAAMziB,KACpC,OAAO2uE,EAAOl4D,QAAQ1f,QAAQ59B,IAAQqpD,EAAUrpD,GAAIk3G,gBACnD,CAAC1B,EAAOl4D,UAEL65D,EAAgBxB,EAAgBh0G,OAASs1G,EAAUt1G,OAEnDk7D,EAAYs6C,EAAgBA,EAAc5wB,gBAAa1jF,EAEvDgwG,GAAoB/yG,EAAAA,EAAAA,KAAY,KACpC21G,IAEAC,EAAmB,CACjBF,SACAl4D,QAASq4D,MAEV,CAACH,EAAQG,IAENS,GAAwBt2G,EAAAA,EAAAA,KAAY,KACxC,MAAMu2G,EAAiBV,EAAgBh0G,SAAW6zG,EAAOl4D,QAAQ37C,OACjEi0G,EAAmBS,EAAiBY,EAAYzB,EAAOl4D,WACtD,CAACk4D,EAAOl4D,QAAS25D,EAAWtB,EAAgBh0G,SAE/C,OACE5B,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOzK,QAAQ/S,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOpR,YAAYpM,SAChC+M,EAAK,4BAERlN,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAO44F,cAAe,iBAAiBp2G,SAAA,EACpEH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAO64F,aAAar2G,SAAA,EAClCC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAO84F,iBAAiBt2G,SACrCyzC,EAAQ,4BAA6BwjE,EAAe,QAEvDh3G,EAAAA,GAAAA,GAAA,OACEF,UAAWyd,GAAO+4F,gBAClB7sE,KAAK,SACLD,SAAU,EACV17B,QAASmoG,EAAsBl2G,SAE9By1G,EAAgBh0G,SAAW6zG,EAAOl4D,QAAQ37C,OAASgyC,EAAQ,eAAiBA,EAAQ,mBAGzFxzC,EAAAA,GAAAA,GAACokC,GAAAA,EAAU,CACTC,QAASgxE,EAAOl4D,QAChB5Y,kBAAmBuyE,EACnBhyE,oBAAqB2wE,EACrBhyE,YAAa+xE,EACbxwE,eAAa,EACbC,YAAU,EACVC,cAAc,iBAGlBllC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLG,QAAS4kG,EACTxyG,KAAK,UACLggB,UAAWs1F,EAAgBh0G,OAAOzB,UAElCH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOzI,WAAW/U,SAAA,CAC/B+M,EAAK,wBACN9M,EAAAA,GAAAA,GAACu2G,GAAAA,EAAK,CAACz2G,UAAWyd,GAAOi5F,YAAa3hG,KAAM6nD,EAAW+5C,kBAAgB,eC0CjF,IAAe93G,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAU6mC,YACT,MAAM,OAAEmtE,EAAM,QAAE4B,GAAY/uE,GAAS,CAAC,EAChC4zC,EAAWm7B,GAASn7B,WAAau5B,GAAU,aAAcA,EAASA,EAAOv5B,cAAWp5E,GAG1F,MAAO,CACL44E,OAHaQ,GAAWo7B,EAAAA,EAAAA,KAAiB71G,EAAQy6E,QAAYp5E,KAJ/CgM,EAtGmCyoG,EACrDjvE,QACAozC,aAEA,MAAM,mBAAEg6B,IAAuBvpG,EAAAA,EAAAA,MAEzBe,GAAOC,EAAAA,EAAAA,KAEPrB,EAASZ,QAAQo9B,GACjBkvE,GAAgB/gF,EAAAA,EAAAA,GAAsB6R,IAAUA,EAChDwzC,GAAkBrlD,EAAAA,EAAAA,GAAsBilD,IAAWA,EAEnDpuE,GAAQpF,EAAAA,EAAAA,KAAQ,KACpB,GAAKsvG,EAAL,CACA,GAAIA,EAAc/B,OAAQ,CACxB,MAAMA,EAAS+B,EAAc/B,OAC7B,MAAI,mBAAoBA,EACfA,EAAOK,eAAel0G,OAASsL,EAAK,2BAA6BA,EAAK,0BAExEA,EAAK,qBACd,CACA,OAAIsqG,EAAcH,QACTnqG,EAAK,8BADd,CARoC,IAanC,CAACA,EAAMsqG,IAEJC,GAAuBvvG,EAAAA,EAAAA,KAAQ,IAC/B4zE,GACKpwC,EAAAA,GAAAA,IAAuB,CAC5Bz2B,KAAM6mE,EAAgBxuE,MAAM2H,KAC5Bm3E,SAAUtQ,EAAgBxuE,MAAM8+E,SAChC+pB,sBAAuBr6B,EAAgBs6B,oBAGvCoB,GAAe/B,QAAU,UAAW+B,EAAc/B,QAC7C/pE,EAAAA,GAAAA,IAAuB,CAC5Bz2B,KAAMuiG,EAAc/B,OAAOnoG,MAAM2H,KACjCm3E,SAAUorB,EAAc/B,OAAOnoG,MAAM8+E,SACrC+pB,sBAAuBqB,EAAc/B,OAAOW,yBAJhD,GAQC,CAACt6B,EAAiB07B,IAEfE,GAAkBxvG,EAAAA,EAAAA,KAAQ,KAC9B,GAAKsvG,GAAe/B,OACpB,MAAI,mBAAoB+B,EAAc/B,OAAe+B,EAAc/B,OAAOK,eAAel0G,YAAzF,IAEC,CAAC41G,IAoBEG,GAAgB53G,EAAAA,EAAAA,KAAY,KAChC,GAAKy3G,EAAL,CACA,GAAIA,EAAc/B,OAAQ,CACxB,MAAMA,EAAS+B,EAAc/B,OAC7B,MAAI,mBAAoBA,GACfr1G,EAAAA,GAAAA,GAACo1G,GAAe,CAACC,OAAQA,EAAQ/5B,OAAQI,KAG3C17E,EAAAA,GAAAA,GAAC62G,GAAW,CAACxB,OAAQA,GAC9B,CAEA,OAAI+B,EAAcH,SACTj3G,EAAAA,GAAAA,GAAC02G,GAAc,CAACp7B,OAAQI,EAAkBi7B,iBAAkBS,EAAcH,QAAQN,wBAD3F,CAVoC,IAenC,CAACj7B,EAAiB07B,IAErB,OACEx3G,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJzB,OAAQA,EACRwB,MAAOA,EACPtB,QAAS0pG,EACTjzE,QAAM,EACN4tC,gBAAc,EAAAlwE,SAAA,CAEbs3G,IA5CkBG,EA4CoBH,GA1CvCr3G,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOk6F,eAAe13G,UACpCH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOm6F,QAAQ33G,SAAA,EAC7BC,EAAAA,GAAAA,GAAC23G,GAAAA,EAAG,CAAC73G,UAAWyd,GAAO+9D,OAAQpuE,MAAOJ,EAAK,4BAC3C9M,EAAAA,GAAAA,GAAC23G,GAAAA,EAAG,CACF73G,UAAWyd,GAAO+9D,OAClB/hE,UAAQ,EACRq+F,WAAYN,EACZO,eAAa,EACb3qG,MAAOsqG,KAETx3G,EAAAA,GAAAA,GAAC23G,GAAAA,EAAG,CAAC73G,UAAWyd,GAAO+9D,OAAQpuE,MAAOJ,EAAK,kCAiC9CyqG,OA7CL,IAAuBC,M,gBChFzB,UAAgB,QAAU,WAAW,MAAQ,WAAW,iBAAmB,WAAW,aAAe,WAAW,YAAc,WAAW,QAAU,YC2GnJ,IAAe74G,EAAAA,EAAAA,KAlFSm5G,EAAG5vE,YACzB,MAAM,iBAAE6vE,EAAgB,qBAAEC,EAAoB,iBAAEt2E,IAAqB31B,EAAAA,EAAAA,MAC/DksG,GAAkB7uG,EAAAA,EAAAA,MAElB0D,GAAOC,EAAAA,EAAAA,KAEPmrG,GAAYC,EAAAA,GAAAA,GAAYjwE,IACxB,KAAEkwE,EAAI,WAAEC,GAAenwE,GAASgwE,GAAa,CAAC,GAC9C,MACJI,EAAK,YAAEC,EAAW,eAAEC,EAAc,kBAAEC,EAAiB,MAAE52G,EAAK,gBAAE62G,GAC5DL,GAAc,CAAC,EAEbr9E,GAAc1uB,EAAAA,EAAAA,IAAgB,KAClC0rG,OAGIW,GAAersG,EAAAA,EAAAA,IAAgB,KACnCyrG,EAAiB,CAAEK,KAAMA,IAErBM,GACFh3E,EAAiB,CACf9gC,QAAuBkM,EAAdyrG,EAAmB,sCAA8C,uCAI9Ev9E,OAGI49E,EAAgBL,EAAc,qBAAuB,YACrDM,EAAuBN,EAAc,sCACvC,oCAEEO,GAAahxG,EAAAA,EAAAA,KAAQ,KACzB,GAAKuwG,EAEL,OAAOU,EAAAA,EAAAA,IAAwBV,KAC9B,CAACA,IAEEW,GAAelxG,EAAAA,EAAAA,KAAQ,KAC3B,IAAK0wG,EACH,OAGF,MAAMn3G,GAASwtC,EAAAA,EAAAA,MACf,OAAO2pE,EAAehlG,KAAK3T,IAAOswC,EAAAA,EAAAA,KAAW9uC,EAAQxB,KAAK49B,OAAO3yB,WAChE,CAAC0tG,IAIJ,OAFA3+B,EAAAA,GAAAA,GAAoBo+B,GAAkB/vE,IAAU8wE,IAG9Cp5G,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJzB,OAAQZ,QAAQo9B,GAChB9F,iBAAkB7kB,GAAOzK,QACzBuvB,QAAM,EACNz2B,QAASovB,EACT5tB,QAASurG,EAAa54G,SAAA,CAErB+4G,IAAc94G,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CAAC3zB,KAAK,QAAQ2B,MAAOA,EAAOiyB,KAAMglF,EAAYG,WAAS,IAC5EH,IAAc94G,EAAAA,GAAAA,GAACgrD,GAAAA,EAAa,CAAClrD,UAAWyd,GAAOrQ,MAAO4mB,KAAMglF,IAC5DR,IAASt4G,EAAAA,GAAAA,GAAA,KAAGF,UAAWyd,GAAO+6F,MAAMv4G,SAAEu4G,KACvCt4G,EAAAA,GAAAA,GAAA,KAAGF,UAAWyd,GAAO27F,iBAAiBn5G,SACnC+M,EAAKyrG,EAAc,cAAgB,UAAWE,EAAmB,OAEnEO,IACCh5G,EAAAA,GAAAA,GAAA,OAAKgU,IAAKikG,EAAiBn4G,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAOy7F,aAAc,gBAAgBj5G,SACvFi5G,EAAaxlG,KAAK2lG,IACjBn5G,EAAAA,GAAAA,GAAC48D,GAAAA,EAAS,CAAC98D,UAAWyd,GAAO47F,YAAarlF,KAAMqlF,EAAatkG,MAAM+0B,EAAAA,EAAAA,IAAgBuvE,UAIzFv5G,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAe,iBAAkBqH,GAAOssD,SAAS9pE,SAAA,EAC/DC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACE,QAAM,EAAC/N,UAAU,wBAAwBgO,QAAS6qG,EAAa54G,SACpE+M,EAAK4rG,EAAkBG,EAAuBD,MAEjD54G,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACE,QAAM,EAAC/N,UAAU,wBAAwBgO,QAASktB,EAAYj7B,SACnE+M,EAAK,qB,uCCpGhB,SAA0C,WAA1C,GAAmE,WCiLnE,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM+3G,EAAwB/3G,EAAO4uC,WAAWopE,2BAEhD,MAAO,CACLD,2BALc1qG,EAlJE4qG,EAAGpxE,QAAOkxE,4BAC9B,MAAM,mBAAEG,IAAuBxtG,EAAAA,EAAAA,MAEzBytG,GAAcpwG,EAAAA,EAAAA,MAEdsC,EAASZ,QAAQo9B,GACjB4mE,GAAiB9iE,EAAAA,GAAAA,GAAiB9D,IAClC,UACJuxE,EAAS,SAAEp+E,EAAQ,eAAEq+E,EAAc,YAAEC,GACnC7K,GAAkB,CAAC,EACjB8K,EAAwBH,EAExBI,GAAuB7tE,EAAAA,GAAAA,GAAiB4tE,GAExCpmE,GAAUzmC,EAAAA,EAAAA,KAEV+sG,GAAmBhyG,EAAAA,EAAAA,KAAQ,KAE7BlI,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,uCACbxzC,EAAAA,GAAAA,GAAA,KAAAD,UAAIg0B,EAAAA,GAAAA,GAAWyf,EAAQ,oCAAqC,CAAC,UAC7DxzC,EAAAA,GAAAA,GAAA,KAAAD,UAAIg0B,EAAAA,GAAAA,GAAWyf,EAAQ,oCAAqC,CAAC,UAC7DxzC,EAAAA,GAAAA,GAAA,KAAAD,UAAIg0B,EAAAA,GAAAA,GAAWyf,EAAQ,oCAAqC,CAAC,UAC7DxzC,EAAAA,GAAAA,GAAA,KAAAD,UACEC,EAAAA,GAAAA,GAAC+5G,GAAAA,EAAQ,CACPziG,IAAKk8B,EAAQ,qCACb3+B,KAAM2+B,EAAQ,0CAGlBxzC,EAAAA,GAAAA,GAAA,KAAAD,UAAIg0B,EAAAA,GAAAA,GAAWyf,EAAQ,oCAAqC,CAAC,aAGhE,CAACA,KAEE,kBACJw+B,EAAiB,kBAAEC,EAAiB,kBACpCC,EAAiB,uBAAEC,EAAsB,sBAAEC,IACzCC,EAAAA,GAAAA,GAAuBmnC,GAAcK,GAEnC7+E,GAAc1uB,EAAAA,EAAAA,IAAgB,KAClCitG,IACApnC,IACAC,OAGImhC,GAAYzrG,EAAAA,EAAAA,KAAQ,KACxB,GAAK4D,EA2CL,MAAO,CACL08B,QAzCAxoC,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAaxd,SAAEyzC,EAAQ,6BACtCxzC,EAAAA,GAAAA,GAAA,KAAGF,WAAWoW,EAAAA,GAAAA,GAAeqH,GDlF6E,YCkFvCxd,SAChEyzC,EAAQ,qCAEXxzC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLqG,IAAKwlG,EACLnnG,OAAK,EACLnS,KAAK,UACL0N,MAAM,cACN9N,UD1FiF,WC2FjFgO,QAASokE,EAAkBnyE,UAE3BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,cA6Bf0sG,aAxBmB,CACnB,CAAC,OAAQxmE,EAAQ,gCACfzf,EAAAA,GAAAA,GAAWyf,EAAQ,kCAAmC,CAAC,qBACzD,CAAC,gBAAiBA,EAAQ,gCACxBzf,EAAAA,GAAAA,GAAWyf,EAAQ,kCAAmC,CAAC,qBACzD,CAAC,YAAaA,EAAQ,gCACpBzf,EAAAA,GAAAA,GAAWyf,EAAQ,iCAAkC4lE,GAAwB,CAAC,sBAmBhFtvE,QAfAlqC,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAaxd,UAAEg0B,EAAAA,GAAAA,GAAWyf,EAAQ,+BAAgC,CAAC,uBAClF5zC,EAAAA,GAAAA,IAAA,KAAGE,UAAWyd,GAAmBxd,SAAA,EAC9Bg0B,EAAAA,GAAAA,GAAWyf,EAAQ,kCAAmC,IAAK,CAAC,qBAC7DxzC,EAAAA,GAAAA,GAAC+5G,GAAAA,EAAQ,CACPziG,IAAKk8B,EAAQ,cACb3+B,KAAM2+B,EAAQ,6BAWrB,CAAC9nC,EAAQ8nC,EAAS0+B,EAAmBknC,IAExC,OAAIS,GAEAj6G,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAACi6G,GAAAA,EAAe,CACdvuG,OAAQA,EACRsuG,aAAczG,GAAWyG,aACzBE,eAAe,UACfC,eAAa,EACb/xE,OAAQmrE,GAAWnrE,OACnB0B,OAAQypE,GAAWzpE,OACnBh1B,WAAY0+B,EAAQ,+BACpB5nC,QAASovB,IAEVi3C,GAAqB52C,IACpBr7B,EAAAA,GAAAA,GAACo6G,GAAAA,EAAoC,CACnC1uG,OAAQsmE,EACRgH,OAAQ/G,EACRooC,WAAYb,EACZn+E,SAAUA,EACVq+E,eAAgBA,EAChBD,UAAWA,EACXE,YAAaA,EACbW,iBAAe,EACfC,YAAav/E,EACbpvB,QAASumE,EACTtmE,oBAAqBumE,QAQ7BxyE,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJzB,OAAQA,EACR5L,UDlKiB,WCmKjBsiC,iBDnKiI,WCoKjIx2B,QAASovB,EAAYj7B,SAAA,CAEpB+5G,GACD95G,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLzN,KAAK,UACL4N,QAASktB,EAAYj7B,SAEpByzC,EAAQ,wCC3KjB,GAAwB,WCwGxB,IAAe70C,EAAAA,EAAAA,KApF8B67G,EAC3C9uG,SACAE,cAEA,MAAM4nC,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,KAEPgnE,GAAiB3yG,EAAAA,EAAAA,KAAQ,KAC7B,MAAMmzE,EAAWznC,EAAQ,aACzB,OAAO1mC,EACL,4BACA,CACE0/E,MACE5sF,EAAAA,GAAAA,IAACm6G,GAAAA,EAAQ,CAACziG,IAAKk8B,EAAQ,2BAA4B3+B,KAAMomE,EAASl7E,SAAA,CAC/Dk7E,GACDj7E,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAIjB,CACE8sC,WAAW,MAGd,CAACttC,EAAM0mC,IAEJknE,GAAoB5yG,EAAAA,EAAAA,KAAQ,IACzBgF,EACL,gCACApK,EACA,CACE03C,WAAW,EACXugE,mBAAoB,CAAE,MAAM36G,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACzS,UDnD4B,WCmDDwN,KAAK,gBAGrE,CAACR,IAEEymG,GAAYzrG,EAAAA,EAAAA,KAAQ,KACxB,GAAK4D,EAsBL,MAAO,CACL08B,QApBApoC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAaxd,SAAEyzC,EAAQ,kCAqBtCwmE,aAlBmB,CACnB,CAAC,UAAWxmE,EAAQ,uCAClBzf,EAAAA,GAAAA,GAAWyf,EAAQ,mCAAoC,CAAC,qBAC1D,CAAC,gBAAiBA,EAAQ,0CACxBzf,EAAAA,GAAAA,GAAWyf,EAAQ,iCAAkC,CAAC,qBACxD,CAAC,cAAeA,EAAQ,wCACtBzf,EAAAA,GAAAA,GAAWyf,EAAQ,oCAAqC,CAAC,sBAa3D1J,QATAlqC,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAaxd,SAAE26G,KAC9B16G,EAAAA,GAAAA,GAAA,KAAGF,UD3EsC,WC2ERC,SAAE06G,UAStC,CAAC/uG,EAAQ8nC,EAASknE,EAAmBD,IAExC,GAAKlH,EAIL,OACEvzG,EAAAA,GAAAA,GAACi6G,GAAAA,EAAe,CACdvuG,OAAQA,EACRsuG,aAAczG,EAAUyG,aACxBE,eAAe,cACfC,eAAa,EACb/xE,OAAQmrE,EAAUnrE,OAClB0B,OAAQypE,EAAUzpE,OAClBh1B,WAAY0+B,EAAQ,+BACpB5nC,QAASA,O,gBCnGf,SAA4C,WCwF5C,IAAejN,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MACEu5G,eACEC,KAAMC,IAENz5G,EAEJ,MAAO,CACLy5G,kBATcpsG,EA9DkBqsG,EACpC7yE,QACA4yE,mBAEA,MAAM,mCACJE,EAAkC,mCAAEC,EAAkC,wCAAEC,IACtEnvG,EAAAA,EAAAA,MAEEL,EAASZ,QAAQo9B,GAEjB4mE,GAAiB9iE,EAAAA,GAAAA,GAAiB9D,GAElCp7B,GAAO2mC,EAAAA,GAAAA,MAEN0nE,EAAoBC,IAAyBlvG,EAAAA,EAAAA,KAAS,GAEvD45B,GAAex5B,EAAAA,EAAAA,IAAiB+uG,IAC/BvM,GACLoM,EAAwC,CACtCvvG,OAAQmjG,EAAeviG,OACvB+uG,gBAAiBD,OAIfE,GAAmBjvG,EAAAA,EAAAA,IAAgB,KACvC2uG,OAGIjgF,GAAc1uB,EAAAA,EAAAA,IAAgB,KAClC0uG,OAGF,OACEh7G,EAAAA,GAAAA,GAACmN,EAAAA,EAAK,CACJzB,OAAQA,EACRukE,gBAAc,EACd/iE,MAAOJ,EAAK,sBACZhN,UD/DiB,WCgEjBsiC,iBAAkB7kB,GAClB3R,QAASovB,EAAYj7B,UAErBC,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAgB,gDAAgDxd,UAC7FC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,qBAAoBC,UACjCC,EAAAA,GAAAA,GAACw7G,GAAAA,EAAY,CACXC,kBAAgB,EAChBlwD,YAAaz+C,EAAK,4BAClBoiD,MAAO4/C,GAAgB4M,UAAY5uG,EAAK6uG,YAAY7M,EAAe4M,UACnEvvG,YAAaW,EAAK,4BAClB8uG,WAAYL,EACZ7mF,UAAWo6E,GAAgBp6E,UAC3BmmF,KAAMC,EACNj8G,kBAAmBs8G,EACnBU,iBAAkBnwG,EAClBowG,2BAA4BV,EAC5B3mD,SAAU3uB,cChFtB,IAAgB,QAAU,WAAW,SAAW,YCkMhD,IAAennC,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM0wD,GAAc5hB,EAAAA,EAAAA,KAAW9uC,EAAQA,EAAO8yB,eACxC2vD,GAAYxiD,EAAAA,EAAAA,KAA2BjgC,GAI7C,MAAO,CACL0wD,cACAssC,WALiBh9F,EAAOqpG,sBAAuBzhB,EAAAA,EAAAA,KAAiB5nF,EAAQA,EAAOqpG,2BAAwBhoG,EAMvGohF,YACA9xC,iBANsBC,EAAAA,EAAAA,KAA0B5wC,MALlCqN,EA3JsCqtG,EACxD7zE,QACA6pB,cACAssC,aACAva,YACA9xC,sBAEA,MAAM,4BACJgqE,EAA2B,gCAC3BC,EAA+B,gBAC/BpN,EAAe,iBACfltE,EAAgB,uBAChBu6E,IACEnwG,EAAAA,EAAAA,MAEEL,EAASZ,QAAQo9B,GAEjBsL,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,KAEPpqB,GAAejgB,EAAAA,EAAAA,OAEd+yG,EAAoBC,IAAyBlwG,EAAAA,EAAAA,IAAiB,IAErE5B,EAAAA,EAAAA,KAAU,MACJoB,GAAW2yF,GAAYlf,UAAantC,GACtCkqE,MAED,CAACxwG,EAAQ2yF,EAAYrsD,IAExB,MAAM+8D,GAAqBjnG,EAAAA,EAAAA,KAAQ,KACjC,GAAKiqD,GAAgBssC,GAAYlf,SACjC,MAAO,IACFptB,EACH82B,YAAa,CACX3nF,KAAM,UACN6nF,WAAYsV,EAAWlf,SAASg9B,GAAoBt8G,OAGvD,CAACkyD,EAAassC,EAAY8d,IAEvBE,EAAahe,GAAYlf,UAAU39E,QACzCq2E,EAAAA,GAAAA,IACE,KACOwkC,GACLD,GAAuBE,IAAeA,EAAY,GAAKD,MAEzDA,EAjDa,UAiDW35G,GAG1B,MAAM65G,GAAmBjwG,EAAAA,EAAAA,IAAgB,KAErCtM,EAAAA,GAAAA,GAACsvG,GAAAA,EAAQ,CACPE,iBAAe,EACf1vG,UAAWyd,GAAOi/F,SAClB1vB,cAAevvE,GAAOk/F,SACtBlN,SAAUR,MAKVzrE,GAAiBh3B,EAAAA,EAAAA,IAAgB,KAChC47B,GAAO4mB,KAAKjvD,KACjBm8G,IACI9zE,GAAO67B,YACL+f,GACF+qB,EAAgB,CACd9qC,UAAW77B,EAAM67B,UACjBl1C,MAAO,CACLi4C,UAAW,gCACXC,UAAW,CACT1lB,OAAQ,cAId46D,EAAgC,CAAEvpD,MAAOxqB,EAAM4mB,IAAIjvD,GAAIotE,WAAW,EAAMyvC,yBAAyB,MAEjG/6E,IACAktE,EAAgB,CACd9qC,UAAW77B,EAAM67B,UACjBl1C,MAAO,CACLi4C,UAAW,gCACXC,UAAW,CACT1lB,OAAQ,sBAQdozD,GAAiBnoG,EAAAA,EAAAA,IAAgB,KAChC47B,GAAO4mB,KAAKjvD,KACjBm8G,IACI9zE,GAAO67B,WACT8qC,EAAgB,CACd9qC,UAAW77B,EAAM67B,UACjBl1C,MAAO,CACLi4C,UAAW,gCACXC,UAAW,CACT1lB,OAAQ,gBAKZyiC,GACFm4B,EAAgC,CAAEvpD,MAAOxqB,EAAM4mB,IAAIjvD,GAAIotE,WAAW,QAIhE0vC,GAAmBrwG,EAAAA,EAAAA,IAAgB,KACvC,GAAK47B,GAAO4mB,IACZ,OAAOhiD,EAAK,wBAAyB,CACnCQ,MAAMs8B,EAAAA,EAAAA,IAAgB1B,GAAO4mB,MAC5B,CACD1U,WAAW,EACXyW,cAAc,OAIlB,OACEjxD,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJrN,WAAWoW,EAAAA,GAAAA,GAAe,WAC1BksB,iBAAkB7kB,GAAOzK,QACzBpH,OAAQA,EACRE,QAAS6oG,EAAe10G,SAAA,CAEvBw8G,KACD38G,EAAAA,GAAAA,IAAA,OAAAG,SAAA,CACG48G,KACD/8G,EAAAA,GAAAA,IAAA,OACEE,UAAU,sBACVkU,IAAKqV,EAAatpB,SAAA,EAElBC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,wBACV+N,QAAM,EACNC,QAASw1B,EACT11B,MAAM,UAAS7N,SAEdyzC,EAAQ,kCAEXxzC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,wBACV+N,QAAM,EACNC,QAAS2mG,EAAe10G,SAEvB+M,EAAK,yBC7BlB,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IAGQ,CACL0wD,aAHkB5hB,EAAAA,EAAAA,KAAW9uC,EAAQA,EAAO8yB,kBAF9BzlB,EA7HmCkuG,EACrD10E,QACA6pB,kBAEA,MAAM,yBACJ8qD,EAAwB,6BAAEC,EAA4B,gBAAEjO,IACtD9iG,EAAAA,EAAAA,MAEEL,EAASZ,QAAQo9B,GAEjBsL,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,KAEPpqB,GAAejgB,EAAAA,EAAAA,MAEfk6B,GAAiBh3B,EAAAA,EAAAA,IAAgBiM,UACrC,MAAMyyD,QAAwBC,EAAAA,EAAAA,OACxB,YAAE7G,GAAgB4G,EACnB9iC,GAAO4mB,KAAKjvD,KACjBg9G,IACI30E,GAAO67B,YACT+4C,EAA6B,CAC3BpqD,MAAOxqB,EAAM4mB,IAAIjvD,GACjBwkE,iBAAiB,IAEnBwqC,EAAgB,CACd9qC,UAAW77B,EAAM67B,UACjBl1C,MAAO,CACLi4C,UAAW,qBACXC,UAAW,CACTiB,WAAW,EACXoD,SAAUhH,GAAagH,SACvBC,UAAWjH,GAAaiH,UACxBC,SAAUlH,GAAakH,SACvBC,OAAQnH,GAAaoH,QACrBC,MAAOrH,GAAaqH,MACpBC,oBAAqBtH,GAAauH,SAClCC,kBAAmBxH,GAAauH,kBAOpC8oC,GAAiBnoG,EAAAA,EAAAA,IAAgB,KAChC47B,GAAO4mB,KAAKjvD,KACjBg9G,IACI30E,GAAO67B,YACT+4C,EAA6B,CAC3BpqD,MAAOxqB,EAAM4mB,IAAIjvD,GACjBwkE,iBAAiB,IAEnBwqC,EAAgB,CACd9qC,UAAW77B,EAAM67B,UACjBl1C,MAAO,CACLi4C,UAAW,qBACXC,UAAW,CACTiB,WAAW,WAOf+0C,GAAazwG,EAAAA,EAAAA,IAAgB,KACjC,GAAK47B,GAAO4mB,IACZ,OACElvD,EAAAA,GAAAA,IAAA,OAAKE,UCnGe,WDmGWC,SAAA,EAC7BC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CACL3zB,KAAK,QACL4zB,KAAMi+B,KAER/xD,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,OAAOxN,UCxGmB,cDyGrCE,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CACL3zB,KAAK,QACL4zB,KAAMoU,EAAM4mB,YAMd6tD,GAAmBrwG,EAAAA,EAAAA,IAAgB,KACvC,GAAK47B,GAAO4mB,IACZ,OAAOhiD,EAAK,yBAA0B,CACpCQ,MAAMs8B,EAAAA,EAAAA,IAAgB1B,GAAO4mB,MAC5B,CACD1U,WAAW,EACXyW,cAAc,OAIlB,OACEjxD,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJrN,WAAWoW,EAAAA,GAAAA,GAAe,WAC1BxK,OAAQA,EACRE,QAAS6oG,EAAe10G,SAAA,CAEvBg9G,KACDn9G,EAAAA,GAAAA,IAAA,OAAAG,SAAA,CACG48G,KACD/8G,EAAAA,GAAAA,IAAA,OACEE,UAAU,sBACVkU,IAAKqV,EAAatpB,SAAA,EAElBC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,wBACV+N,QAAM,EACNC,QAASw1B,EACT11B,MAAM,UAAS7N,SAEdyzC,EAAQ,kCAEXxzC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,wBACV+N,QAAM,EACNC,QAAS2mG,EAAe10G,SAEvB+M,EAAK,yBErJlB,GAAwB,WC8JxB,IAAenO,EAAAA,EAAAA,KAnIOq+G,EACpB90E,YAEA,MAAM,gBACJ+0E,EAAe,mBAAEC,EAAkB,0BAAEC,IACnCpxG,EAAAA,EAAAA,MACEe,GAAOC,EAAAA,EAAAA,KACPrB,EAASZ,QAAQo9B,GAEjBk1E,GAAgBh0G,EAAAA,EAAAA,MAEhBi0G,GAAoB/wG,EAAAA,EAAAA,IAAgB,CAACM,EAAGo8B,KAC5C,MAAM,OAAEz8B,EAAM,SAAE8uB,GAAa6M,EAC7B+0E,EAAgB,CAAEtxG,OAAQY,EAAQ8uB,WAAU2N,eAGvCs0E,EAAkBC,IAAkBz1G,EAAAA,EAAAA,KAAQ,KACjD,IAAKogC,EAAO,MAAO,MAACxlC,EAAW,GAC/B,MAAM86G,EAAet1E,EAAMu1E,SAASj8G,OAAS,EAC7C,MAAO,CAAC0mC,EAAMu1E,SAASD,GAAeA,KACrC,CAACt1E,IAEEonC,GAAkBhjE,EAAAA,EAAAA,IAAgB,KACjCixG,EAKLJ,IAJED,OAOEQ,GAAa51G,EAAAA,EAAAA,KAAQ,KACzB,IAAKogC,EAAO,OACZ,MACM5U,EADWxmB,EAAK,uCACCkuE,MAAM,UAC7B,MAAO,CACL1nD,EAAM,IACNtzB,EAAAA,GAAAA,GAAC+5G,GAAAA,EAAQ,CACPllG,KAAM/H,EAAK,sCACXwK,IAAKxK,EAAK,uBAEZwmB,EAAM,MAEP,CAACxmB,EAAMo7B,IAEJE,GAAStgC,EAAAA,EAAAA,KAAQ,KACrB,IAAKogC,EACH,OAGF,MAAMy1E,EAAc7yG,QAAQwyG,GAAkB3qF,UAE9C,OACE/yB,EAAAA,GAAAA,IAAA,OAAKE,UAAU,yBAAwBC,SAAA,EACrCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLzE,MAAM,cACN1N,KAAK,UACLoS,UAAWxF,EAAKywG,EAAiB,OAAS,SAC1CzvG,QAASwhE,EAAgBvvE,UAEzBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAMiwG,EAAiB,aAAe,aAE9C39G,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAe,cD1F2B,WC0FOynG,GD1FiK,YC0F3H59G,SAAA,EACrGC,EAAAA,GAAAA,GAAA,MAAIF,UD3FgM,WC2FxKC,SAAE+M,EAAK,cAClC6wG,IACC39G,EAAAA,GAAAA,GAAA,QAAMF,UD7F8O,WC6FnNC,SAAEu9G,EAAiB3qF,mBAK3D,CAAC7lB,EAAMo7B,EAAOq1E,EAAgBD,GAAkB3qF,YAEnDroB,EAAAA,EAAAA,KAAU,KACR,IAAK49B,EAAO,OACZ,MAAM5I,EAAQ19B,SAASuC,cAA2B,IAAIy5G,GAAAA,SAA8BrgG,MACpF,IAAK+hB,EAAO,OAEZ,MAAMz1B,EAASy1B,EAAM0gB,cACrB7nC,EAAAA,EAAAA,KAAgB,KACdilG,EAAc7zG,QAAS1D,MAAMgE,OAAS,GAAGA,EAtFzB,YAwFjB,CAACq+B,IAEJ,MAAM21E,GAAuBvxG,EAAAA,EAAAA,IAAgB,KAC3C,MAAMgzB,EAAQ19B,SAASuC,cAA2B,IAAI25G,GAAAA,SAA0BvgG,OAEhFovB,EAAAA,EAAAA,KAAe,KACb,MAAM9iC,EAASy1B,EAAM0gB,cACrB7nC,EAAAA,EAAAA,KAAgB,KACdilG,EAAc7zG,QAAS1D,MAAMgE,OAAS,GAAGA,EAhG3B,gBAqGpB,OACE7J,EAAAA,GAAAA,GAACmN,EAAAA,EAAK,CACJzB,OAAQA,EACRukE,gBAAc,EACdnwE,UD9HoC,WC+HpCsoC,OAAQA,EACRx8B,QAASsxG,EAAmBn9G,UAE5BH,EAAAA,GAAAA,IAACm9B,GAAAA,GAAU,CACTzvB,KAAK,QACLxN,UDpIgR,WCqIhRkU,IAAKopG,EACLpgF,UAAWugF,EACXvlE,QAAS6lE,EAAqB99G,SAAA,EAE9BH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAaxd,SAAA,EAC3BC,EAAAA,GAAAA,GAAA,MAAIF,UD1IoJ,WC0IrHC,SAAEu9G,GAAkBpwG,QACtDowG,GAAkB/vG,QAAQiG,KAAKw1B,IAC9BhpC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPy7E,QAAM,EACNC,cAAc,OACdl+G,UD/IgG,WCgJhG08E,gBDhJ0H,WCiJ1HwkB,SAAUh4D,EAAOA,OACjBl7B,QAASuvG,EAAkBt9G,UAE3BC,EAAAA,GAAAA,GAAA,OAAKF,UDpJuE,WCoJ1CC,SAAEipC,EAAOn0B,eAIjD7U,EAAAA,GAAAA,GAAA,KAAGF,UDxJgL,WCwJlJC,SAAE29G,Y,gBCxJ3C,SAAwB,WC0OxB,IAAe/+G,EAAAA,EAAAA,KA3MKs/G,EAClB/1E,YAEA,MAAM,eACJg2E,EAAc,YAAEr4D,EAAW,iBAAEs4D,EAAgB,wBAAEC,IAC7CryG,EAAAA,EAAAA,MACEe,GAAOC,EAAAA,EAAAA,KACPrB,EAASZ,QAAQo9B,GAEjBk1E,GAAgBh0G,EAAAA,EAAAA,OAEfyL,EAAMwpG,IAAWnyG,EAAAA,EAAAA,IAAS,IAE3BmxG,GAAoB/wG,EAAAA,EAAAA,IAAgB,CAACM,EAAGo8B,KAC5C,MAAM,WACJt2B,EAAU,QAAE4rG,EAAO,OAAE3yG,EAAM,OAAEY,GAC3B27B,EACJ,GAAKx1B,EACL,OAAQ4rG,GACN,IAAK,UACHJ,EAAe,CAAE3xG,OAAQA,EAASmG,aAAYs2B,WAC9C,MACF,IAAK,QACH6c,EAAY,CACV1iB,QAASzwB,EAAW,GAAI/G,OAAQA,EAASq9B,gBAM1Cs0E,EAAkBC,IAAkBz1G,EAAAA,EAAAA,KAAQ,KACjD,IAAKogC,EAAO,MAAO,MAACxlC,EAAW,GAC/B,MAAM86G,EAAet1E,EAAMu1E,SAASj8G,OAAS,EAC7C,MAAO,CAAC0mC,GAAOu1E,SAASD,GAAeA,KACtC,CAACt1E,IAEEonC,GAAkBhjE,EAAAA,EAAAA,IAAgB,KACtC8xG,OAGIviD,GAAmBvvD,EAAAA,EAAAA,IAAgB,KACvC6xG,OAGI/1E,GAAStgC,EAAAA,EAAAA,KAAQ,KACrB,IAAKogC,EACH,OAGF,MAAMy1E,EAAc7yG,QAAQwyG,GAAkB3qF,UAE9C,OACE/yB,EAAAA,GAAAA,IAAA,OAAKE,UAAU,yBAAwBC,SAAA,CACpCw9G,GACCv9G,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLzE,MAAM,cACN1N,KAAK,UACLoS,UAAWxF,EAAK,QAChBgB,QAASwhE,EAAgBvvE,UAEzBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,kBAGbtN,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLzE,MAAM,cACN1N,KAAK,UACLoS,UAAWxF,EAAK,SAChBgB,QAAS+tD,EAAiB97D,UAE1BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAGf1N,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAe,cDzGgD,WCyGdynG,GDzGgO,YCyG1L59G,SAAA,EACrGC,EAAAA,GAAAA,GAAA,MAAIF,WAAWoW,EAAAA,GAAAA,GD1G8N,WC0GjMqnG,GD1GuN,YC0GpLx9G,SAC5Eu9G,GAAkB/vG,QACfT,EAAwB,UAAnBo7B,GAAOo2E,QAAsB,cAAgB,UAAYhB,GAAkBpwG,QAErFywG,IACC39G,EAAAA,GAAAA,GAAA,QAAMF,UD/G6S,WC+GlRC,SAAEu9G,EAAiB3qF,mBAK3D,CAAC7lB,EAAMo7B,EAAOq1E,EAAgBD,GAAkB/vG,QAAS+vG,GAAkB3qF,SAAU2qF,GAAkBpwG,QAEpGqxG,GAAmBjyG,EAAAA,EAAAA,IAAiBM,IACxCyxG,EAAQzxG,EAAEC,OAAOH,WAGnBpC,EAAAA,EAAAA,KAAU,KACR,IAAK49B,EAAO,OACZ,MAAM5I,EAAQ19B,SAASuC,cAA2B,IAAIy5G,GAAAA,SAA8BrgG,MACpF,IAAK+hB,EAAO,OAEZ,MAAMz1B,EAASy1B,EAAM0gB,cACrB7nC,EAAAA,EAAAA,KAAgB,KACdilG,EAAc7zG,QAAS1D,MAAMgE,OAAS,GAAGA,WAE1C,CAACq+B,IAEJ,MAAM21E,GAAuBvxG,EAAAA,EAAAA,IAAgB,KAC3C,MAAMgzB,EAAQ19B,SAASuC,cAA2B,IAAI25G,GAAAA,SAA0BvgG,OAEhFovB,EAAAA,EAAAA,KAAe,KACb,MAAM9iC,EAASy1B,EAAM0gB,cACrB7nC,EAAAA,EAAAA,KAAgB,KACdilG,EAAc7zG,QAAS1D,MAAMgE,OAAS,GAAGA,EAlH3B,gBAuHd20G,GAAiClyG,EAAAA,EAAAA,IAAgB,KACrD+xG,EAAQ,IACRF,OAGIM,GAA2BnyG,EAAAA,EAAAA,IAAgB,KAC/C,MAAM,WACJoG,EAAU,QAAE4rG,EAAO,OAAE3yG,EAAM,OAAEY,GAC3B27B,EACJ,OAAQo2E,GACN,IAAK,UACHJ,EAAe,CACb3xG,OAAQA,EAASmG,aAAYs2B,OAAQs0E,GAAkBt0E,OAAQ78B,YAAa0I,IAE9E,MACF,IAAK,QACHgxC,EAAY,CACV1iB,QAASzwB,IAAa,GAAI/G,OAAQA,EAASq9B,OAAQs0E,GAAkBt0E,OAAQ78B,YAAa0I,IAIhG2pG,OAGF,OACEx+G,EAAAA,GAAAA,GAACmN,EAAAA,EAAK,CACJzB,OAAQA,EACR08B,OAAQA,EACRx8B,QAAS4yG,EACTp8E,iBD7KyD,WC8KzDtiC,WAAWoW,EAAAA,GAAAA,GD9KyB,WC8KsB,UAAnBgyB,GAAOo2E,SAAuB,wBAAwBv+G,UAE7FC,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CACTzvB,KAAK,QACLxN,UDlL+U,WCmL/UkU,IAAKopG,EACLpgF,UAAWugF,EACXvlE,QAAS6lE,EAAqB99G,UAE9BH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAaxd,SAAA,CAC1Bu9G,GAAkB/vG,SACfvN,EAAAA,GAAAA,GAAA,MAAIF,UDzLyL,WCyL1JC,SAAEu9G,GAAkBpwG,aAAcxK,EACxE46G,GAAkB/vG,SAASiG,KAAKw1B,IAC/BhpC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPy7E,QAAM,EACN1uE,gBAAc,EACd2uE,cAAc,OACdl+G,UD/LyI,WCgMzI08E,gBDhMmK,WCiMnKwkB,SAAUh4D,EAAOA,OACjBl7B,QAASuvG,EAAkBt9G,UAE3BC,EAAAA,GAAAA,GAAA,OAAKF,UDpMgH,WCoMnFC,SAAEipC,EAAOn0B,WAG9CyoG,GAAkBt0E,QACjBppC,EAAAA,GAAAA,IAAA,OAAKE,UDxMyV,WCwMjUC,SAAA,EAC3BC,EAAAA,GAAAA,GAACqkG,GAAAA,EAAuB,CACtBjkG,OAAQC,GAAAA,EAAeq+G,OACvBx+G,KAAM,IACNJ,UD5M0Y,WC6M1YuvC,gBAAc,EACd8wD,aAAW,EACX3/F,QAAQ,KAEVR,EAAAA,GAAAA,GAAC2+G,GAAAA,EAAQ,CACP9+G,GAAG,SACHC,UDnNkX,WCoNlXmN,MAAOqwG,EAAiBsB,WAAa9xG,EAAK,0BAA4BA,EAAK,kBAC3EU,SAAU+wG,EACV7xG,MAAOmI,EACPypE,UA/LQ,IAgMRugC,oBAhMQ,IAgM+BhqG,EAAKrT,QAAQ4kF,WACpD04B,mBAAiB,KAEnB9+G,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLzN,KAAK,UACL4N,QAAS2wG,EACTv+F,SAAWo9F,EAAiBsB,gBAA4Bl8G,GAAdmS,EAAKrT,OAAmBzB,SAEjE+M,EAAK,wBAGRpK,Y,4BCnOd,MC8KA,IAAe/D,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAU6mC,YACT,MAAMo0B,GAAQuD,EAAAA,EAAAA,KAAYx+D,IAExB09G,UAAWC,EAAmB,aAC9BC,EACAC,WAAYC,EAAgB,gBAC5Bz7C,IACE07C,EAAAA,EAAAA,KAAkB/9G,EAAQi7D,IAAU,CAAC,EAGzC,MAAO,CACLA,QACA0iD,sBACAC,eACAE,mBACAz7C,kBACA5U,IARU5mB,GAAQiI,EAAAA,EAAAA,KAAW9uC,EAAQ6mC,GAAOwqB,YAAShwD,EASrDyxB,cAAe9yB,EAAO8yB,iBAlBRzlB,EAvIoC2wG,EACtDn3E,QACAo0B,QACA0iD,sBACAC,eACAE,mBACAz7C,kBACA5U,UAEA,MAAM,gCACJwwD,EAA+B,gBAAEzQ,EAAe,8BAAE0Q,IAChDxzG,EAAAA,EAAAA,MACEe,GAAO2mC,EAAAA,GAAAA,KACP/nC,EAASZ,QAAQo9B,IAEjB,UAAE67B,EAAS,QAAEnjE,EAAO,MAAE8xD,GAAUxqB,GAAS,CAAC,EAE1C7e,GAAejgB,EAAAA,EAAAA,MAEfo2G,GAAwBC,EAAAA,GAAAA,GAAoBnjD,EAAO6iD,GAEnDO,GAAkBpzG,EAAAA,EAAAA,IAAgB,KAClCy3D,GAAarR,GAAS9xD,IACxB2+G,EAA8B,CAC5Bx7C,YACAnjE,YAEF0+G,QAIEzjD,GAAmBvvD,EAAAA,EAAAA,IAAgB,KACvCgzG,IACIv7C,GACF8qC,EAAgB,CACd9qC,YACAl1C,MAAO,CACLi4C,UAAW,0BACXC,UAAW,CAAE7X,MAAO,uBAMtB9mB,GAAStgC,EAAAA,EAAAA,KAAQ,KACrB,GAAKogC,EAIL,OACEtoC,EAAAA,GAAAA,IAAA,OAAKE,UDzFoG,WCyF3EC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLzE,MAAM,cACN1N,KAAK,UACLoS,UAAWxF,EAAK,SAChBgB,QAAS+tD,EAAiB97D,UAE1BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAEbtN,EAAAA,GAAAA,GAAA,MAAIF,WAAWoW,EAAAA,GAAAA,GAAe,cDnG8B,YCmGInW,SAC7D+M,EAAK,0BAIX,CAACA,EAAMo7B,IAEJy3E,GAAe73G,EAAAA,EAAAA,KAAQ,KAC3B,GAAK4qD,GAAU9xD,GAAYmjE,EAC3B,OAAO67C,EAAAA,EAAAA,IAAiCltD,EAAO9xD,KAC9C,CAAC8xD,EAAO9xD,EAASmjE,IAEd87C,GAAc3pG,EAAAA,GAAAA,GD/GkK,WAAkF,WCkHtQipG,GDlH+M,WCmH/Mz7C,GDnH0O,WCoH1Oy7C,GAAoBH,GDpHuQ,YCuH7R,OACEp/G,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJ2sE,UAAWzwD,EACX3d,OAAQA,EACR08B,OAAQA,EACRx8B,QAASiwD,EACT/7D,UD7HiB,WC8HjBsiC,iBD9HsC,WC8HLriC,SAAA,EAEjCH,EAAAA,GAAAA,IAAA,OACEE,WAAWoW,EAAAA,GAAAA,GDjI2H,WCiIlF,eAEpD4pG,OAAK,EACLj6G,OAAOw5C,EAAAA,GAAAA,GACL,oBAAoB4/D,IACpBv7C,GAAmB,6BAA6BA,KAChD3jE,SAAA,EAEFC,EAAAA,GAAAA,GAAA,OACEF,UAAW+/G,EACXh6G,MAAO25G,EAAwB,wBAAwBA,SAA0B98G,IAElFi9G,IACC3/G,EAAAA,GAAAA,GAAC+/G,GAAAA,EAAO,CAENn/G,QAAS++G,EACTtwG,SAAUksC,EAAAA,GACVprC,gBAAgB,SAChB6vG,YAAU,EACVC,WAAS,EACTC,gBAAiB,EACjBC,aAAa,EACbC,gBAAc,EACdC,eAAa,EACbC,cAAc,EACdC,wBAAwB,EACxBC,uBAAuB,GAZlB9tD,OAgBX9yD,EAAAA,GAAAA,IAAA,OAAKE,UD/JgF,WC+JpDC,SAAA,EAC/BC,EAAAA,GAAAA,GAAA,KAAGF,UDhKqJ,WCgK9HC,SACvB+M,EAAK,yBAA0B,CAAEojC,MAAMtG,EAAAA,EAAAA,IAAgBklB,QAE1D9uD,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLzN,KAAK,UACL4N,QAAS4xG,EAAgB3/G,SAExB+M,EAAK,oC,4BC9HhB,MAkIA,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAMwN,GAAWC,EAAAA,EAAAA,KAAezN,IAC1B,kCAAE4vC,GAAsCpiC,EAG9C,MAAO,CACLoiC,oCACAwvE,aAJmBp/G,EAAOo2F,OAAOipB,QAAQzmE,QAAU,EAKnD0mE,wBAJ8B71G,QAAQ+D,EAAS+xG,sBALjClyG,EAlIyCmyG,EAC3D34E,QAAO+I,oCAAmC0vE,0BAAyBF,mBAEnE,MAAM,+BACJK,EAA8B,oBAC9BC,EAAmB,gBACnBlS,EAAe,iBACfntE,EAAgB,wCAChBs/E,IACEj1G,EAAAA,EAAAA,MACEe,GAAOC,EAAAA,EAAAA,KACPrB,EAASZ,QAAQo9B,IAEhBhC,EAAS4nB,EAAaC,IAAiB9uD,EAAAA,EAAAA,MAE9CqL,EAAAA,EAAAA,KAAU,KACJoB,GACFoiD,MAED,CAACpiD,EAAQoiD,IAEZ,MAAM,QACJltD,EAAO,OAAE68B,EAAM,UAAEsmC,EAAS,gBAAEk9C,GAC1B/4E,GAAS,CAAC,GAER,oBACJg5E,GACED,GAAmB,CAAC,GAGtBE,mBAAoBC,EACpBC,cAAeC,EACfC,kBAAmBC,EACnBC,eAAgBC,EAChBC,uBAAwBC,IACtBC,EAAAA,GAAAA,GAA2BX,GAAuB,EAAGP,EAAyBF,GAE5EzlF,GAAc1uB,EAAAA,EAAAA,IAAgB,KAClCw0G,IACI/8C,GACF8qC,EAAgB,CACd9qC,YACAl1C,MAAO,CACLi4C,UAAW,0BACXC,UAAW,CAAE7X,MAAO,uBAMtB4yD,GAAax1G,EAAAA,EAAAA,IAAgB,CAACzM,EAAYwP,KAC9C,GAAIzO,GAAWmjE,EAAW,CACxB,MAAM1iE,GAASwtC,EAAAA,EAAAA,MACT/a,GAAOQ,EAAAA,EAAAA,KAAWjzB,EAAQxB,GAChCkhH,EAAoB,CAClBx0G,OAAQ1M,EACRwP,SAAUA,GAAYksC,EAAAA,GACtB17C,GAAIe,EAAQ8X,OAAO7Y,GACnB83E,QAAS/2E,EAAQ8X,OAAOi/D,UAErBupC,GACHx/E,EAAiB,CACf9gC,QAASkM,EAAK,kBAAkB8mB,EAAAA,GAAAA,IAAa9mB,EAAMgnB,MAGvD+6E,EAAgB,CACd9qC,YACAl1C,MAAO,CACLi4C,UAAW,2BAGfg6C,IACAE,EAAwC,CAAErpG,UAAMjV,GAClD,KAGIsrD,GAAwB1hD,EAAAA,EAAAA,IAAgB,CAACzM,EAAYwP,KACzD2xG,EAAwC,CAAErpG,KAAM,CAAEhM,OAAQ9L,EAAIwP,iBAG1D0yG,GAAoCz1G,EAAAA,EAAAA,IAAgB,KACpD20G,GACFW,EAAoCE,EAAYb,EAAgBt1G,OAAQs1G,EAAgB5xG,aAItF2yG,GAAyC11G,EAAAA,EAAAA,IAAgB,KAC7D80G,IACAJ,EAAwC,CAAErpG,UAAMjV,QAGlD4H,EAAAA,EAAAA,KAAU,KACJ22G,GACFc,MAED,CAACd,IAEJ,MAAM5/G,GAASwtC,EAAAA,EAAAA,MACT/a,EAAOmtF,GAAkB3sF,EAAAA,EAAAA,KAAWjzB,EAAQ4/G,EAAgBt1G,aAAUjJ,EACtEu/G,EAAWnuF,GAAOF,EAAAA,GAAAA,IAAa9mB,EAAMgnB,QAAQpxB,EAEnD,GAAKgJ,GAAWw6B,EAIhB,OACEtmC,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAACqsD,GAAe,CACd3gD,OAAQA,EACR+7C,kBAAmB36C,EAAK,UACxB2wB,OAAQA,EACR8uB,kBAAmByB,EACnBpiD,QAASovB,EACTnvB,oBAAqBkiD,EACrBlG,oBAAkB,KAEpB7nD,EAAAA,GAAAA,GAACkiH,GAAAA,EAA2B,CAC1Bx2G,OAAQulC,EACRrlC,QAASo2G,EACTG,SAAUF,EACVG,oBAAqBlB,GAAuB,EAC5CmB,cAAe,EACfd,kBAAmBC,EACnBC,eAAgBC,EAChBp+E,eAAgBg+E,W,gBCrKxB,UAAgB,QAAU,WAAW,YAAc,WAAW,QAAU,WAAW,KAAO,WAAW,MAAQ,WAAW,MAAQ,WAAW,YAAc,WAAW,cAAgB,WAAW,YAAc,WAAW,iBAAmB,WAAW,aAAe,YC8SrQ,IAAe3iH,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAU6mC,YACT,MAAMo6E,EAAcjhH,EAAOo2F,OAAOipB,QAC5B5sF,EAAOoU,GAAQ5T,EAAAA,EAAAA,KAAWjzB,EAAQ6mC,EAAM37B,aAAU7J,EAClD6/G,EAAer6E,GAAQs6E,EAAAA,GAAAA,IAAYnhH,EAAQ6mC,EAAM37B,OAAQgvC,EAAAA,SAAkB74C,GAE3E,UAAEutC,GAAc5uC,EAChBohH,EAAiBxyE,GAAWyyE,6BAA+BC,EAAAA,IAC3DC,EAAiB3yE,GAAW4yE,6BAA+BC,EAAAA,IAC3DC,EAAgB9yE,GAAW+yE,0BAA4BC,EAAAA,IACvDC,EAAYjzE,GAAWkzE,6BAA+BC,EAAAA,IACtDC,EAAYpzE,GAAWqzE,6BAA+BC,EAAAA,IAEtDC,EAAevzE,GAAWwzE,2BAA6BC,EAAAA,IACvDC,EAAe1zE,GAAW2zE,2BAA6BC,EAAAA,IAEvDC,IAAmB57E,IAAQ4kB,EAAAA,EAAAA,KAAuBzrD,EAAQ6mC,EAAM37B,QAEtE,MAAO,CACLunB,OACAwuF,cACAyB,WAAY1iH,EAAO2iH,KAAKtD,SAASzmE,OACjCsoE,eACAE,iBACAG,iBACAY,eACAG,eACAZ,gBACAG,YACAG,YACAS,sBA9Bcp1G,EA9OQu1G,EAC1B/7E,QACAo6E,cACAyB,aACAjwF,OACAyuF,eACAE,iBACAG,iBACAY,eACAG,eACAZ,gBACAG,YACAG,YACAS,uBAEA,MAAM,yBAAEI,EAAwB,6BAAEC,EAA4B,sBAAEC,IAA0Br4G,EAAAA,EAAAA,OACnFuoF,EAAkBC,EAAcC,IAAiBv1F,EAAAA,EAAAA,KAElDolH,EAA2B9B,GAAc+B,kBACzCC,EAAmBhC,GAAczqC,UACjC0sC,EAAyB15G,QAAQy5G,IAEhCE,EAAgBC,IAAqBx4G,EAAAA,EAAAA,IAC1Cm4G,GAA0B/+B,OAAOrrC,aAAUv3C,IAEtCiiH,EAAkBC,IAAuB14G,EAAAA,EAAAA,IAC9Cm4G,GAA0B/+B,OAAOF,UAAYuS,EAAAA,MAExCktB,EAAcC,IAAmB54G,EAAAA,EAAAA,IACtCm4G,GAA0BQ,aACkB,IAAxCR,EAAyBQ,kBACzBniH,IAGN4H,EAAAA,EAAAA,KAAU,KACR,MAAMg7E,EAAQ++B,GAA0B/+B,MAClCrrC,EAASqrC,GAAOF,WAAa2/B,EAAAA,KAAoBC,EAAAA,GAAAA,IAAoB1/B,EAAMrrC,QAAUqrC,GAAOrrC,OAClGyqE,EAAkBzqE,GAClB2qE,EAAoBP,GAA0B/+B,OAAOF,UAAYuS,EAAAA,KACjEmtB,EAAgBT,GAA0BQ,aACE,IAAxCR,EAAyBQ,kBACzBniH,KACH,CAAC2hH,IAEJ,MAAMv3G,GAAO2mC,EAAAA,GAAAA,KACPD,GAAUzmC,EAAAA,EAAAA,KAEVk4G,EAAkBN,IAAqBhtB,EAAAA,IACvCzrE,EAAMjZ,KAAKmI,MAAM6Q,KAAKC,MAAQ,KAC9BgoC,EAA4B,KAAnBhoC,EAAMg3F,GACf/uD,EAA4B,KAAnBjoC,EAAMm3F,GACf6B,EAA8C,KAAvBh5F,EAAkB,EAAZg3F,GAE7BiC,GAAqB74G,EAAAA,EAAAA,IAAiBM,IAC1C,MAAMF,EAAQE,EAAEC,OAAOH,MACjB04G,EAAS1+D,WAAWh6C,GAEpBgM,EAAmB,KAAVhM,GAAgB2Y,OAAOggG,MAAMD,QAAU1iH,EAClDuQ,KAAK4a,IAAI5a,KAAKma,IAAIg4F,EAAQ,GAAIE,GAElCZ,EAAkBhsG,MAGdwgF,GAAyB5sF,EAAAA,EAAAA,IAAiB0mB,IAC9C8xF,EAAgB9xF,EAAK8iC,WACrB0+B,OAGI+wB,GAAqBj5G,EAAAA,EAAAA,IAAgB,KACzCw4G,OAAgBpiH,GAChB8xF,OAGIgxB,EAAmBP,EAAkBrC,GAAiBoC,EAAAA,GAAAA,IAAoBrB,GAC1E2B,EAAmBL,EAAkBxC,GAAiBuC,EAAAA,GAAAA,IAAoBxB,GAC1Ex5G,EAAac,QAAQ25G,IAAmBA,EAAiBe,EAEzDC,GAAcn5G,EAAAA,EAAAA,IAAgB,KAClC,MAAMo5G,EAAejB,EAChBQ,EAAkBR,GAAiBkB,EAAAA,GAAAA,IAAkBlB,GACtD,EAEJ,IAAIz6G,EAAJ,CAIA,IAAK85G,EACH,GAAImB,GAGF,GAAIS,GAFmBpD,GAAaroE,QAAU,GAQ5C,YALAmqE,EAAsB,CACpBwB,MAAO,CACLC,cAAeH,UAOrB,GAAIA,GADsB3B,GAAc,GAKtC,YAHAK,EAAsB,CACpBh/B,SAAU2/B,EAAAA,MAOlBZ,EAA6B,CAC3B7+B,MAAO,CAAEF,SAAUu/B,EAAkB1qE,OAAQyrE,EAAcI,MAAO,GAClEjB,aAAcA,EAAeA,EAAe,SAAOniH,IAGrDwhH,GA9BA,KAiCF,OACElkH,EAAAA,GAAAA,GAACmN,EAAAA,EAAK,CACJggG,gBAAiB5vF,GAAOwoG,YACxBr6G,OAAQZ,QAAQo9B,GAChBt8B,QAASs4G,EACT7hF,QAAM,EACNwlB,oBAAkB,EAClBooB,gBAAc,EACd7tC,iBAAkB7kB,GAAOzK,QACzB5F,MAAgCJ,EAAzB03G,EAA8B,wBAAgC,uBAAuBzkH,UAE5FH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOyoG,KAAKjmH,SAAA,EAC1BH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOurB,QAAQ/oC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAO0oG,iBAAiBlmH,SAAA,EACtCH,EAAAA,GAAAA,IAAC+N,EAAAA,EAAM,CACL7N,UAAWyd,GAAO2oG,eAClBt4G,MAAOq3G,EAAkB,UAAY,cACrClc,MAAI,EACJ3kD,OAAK,EACLlkD,KAAK,OACLujG,aAAW,EACX31F,QAASA,IAAM82G,EAAoBjtB,EAAAA,KAAqB53F,SAAA,EAExDC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,OAAOxN,UAAWyd,GAAO4oG,eACnCr5G,EAAK,qBAERlN,EAAAA,GAAAA,IAAC+N,EAAAA,EAAM,CACL7N,UAAWyd,GAAO2oG,eAClB9hE,OAAK,EACLx2C,MAAQq3G,EAA8B,cAAZ,UAC1Blc,MAAI,EACJ7oG,KAAK,OACLujG,aAAW,EACX31F,QAASA,IAAM82G,EAAoBG,EAAAA,KAAmBhlH,SAAA,EAEtDC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,UAAUxN,UAAWyd,GAAO4oG,eACtCr5G,EAAK,sBAGV9M,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRT,MAAOH,EAAK,yBACZhN,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAO2rB,OACjCx8B,MAAO+3G,GAAgBr+B,WACvB54E,SAAU23G,EACVptD,UAAU,UACVvuB,SAAU,EACVH,0BAA2B47E,KAE7BjlH,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOpR,YAAYpM,cACb2C,IAAnB+hH,GAAgCA,EAAiB,GAAKA,EAAiBe,EACpE14G,EAAK,uCAAwC,CAC7CmtC,OAAQgrE,GACJmB,EAAAA,GAAAA,IAAkBt5G,EAAM04G,IACxBa,EAAAA,GAAAA,IAAgBv5G,EAAM04G,IAC5B,CAAEprE,WAAW,EAAMyW,cAAc,IAE7B/jD,EADFm4G,EACO,sCACA,2CAIfrlH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOurB,QAAQ/oC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAO2rB,MAAO,cAAe,WAAWnpC,SAAA,EACrEC,EAAAA,GAAAA,GAAA,SACEkB,KAAK,OACLpB,WAAWoW,EAAAA,GAAAA,GAAe,eAAgBo+E,GAAoB,SAC9D5nF,MAAOm4G,GACHyB,EAAAA,GAAAA,IAAwBzB,EAAe,IAAM/3G,EAAM0mC,GACnD1mC,EAAK,yBACTy5G,aAAa,MACbz4G,QAASymF,EACTz4C,QAASy4C,EACTiyB,UAAQ,KAEVxmH,EAAAA,GAAAA,GAAA,SAAAD,SAAQ+M,EAAK,mCACb9M,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,OAAOxN,UAAWyd,GAAOkpG,oBAEtCzmH,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOpR,YAAYpM,SAChC+M,EAAK,gCAAiC,CACrC+tG,KAAM/tG,EAAK,8BACXoM,UAAU81F,EAAAA,GAAAA,IAAoBliG,EAAMi2G,GAAe,WAKzD/iH,EAAAA,GAAAA,GAACg0D,GAAa,CACZtoD,OAAQ4oF,EACRlgC,cAAY,EACZE,gBAAc,EACdJ,MAAOA,EACPC,MAAOA,EACPvoD,QAAS4oF,EACT//B,SAAUykC,EACVjlC,WAAY4wD,GAAgBK,EAC5B3wD,kBAAmBznD,EAAK,QACxB0nD,kBAAmB1nD,EAAK,yBACxB6nD,oBAAqB4wD,EACrBp5G,YAAaW,EAAK,iCAGpB9M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAWyd,GAAOmpG,YAClB54G,QAAS23G,EACTvlH,KAAK,UACLggB,SAAUlW,EAAWjK,SAEpBykH,EAAyB13G,EAAK,qBAC3B23G,EAAiB33G,EAAK,oBAAqB,CAC3CmtC,OAAQgrE,GACJ/qE,EAAAA,GAAAA,IAAkBptC,EAAM23G,EAAgB,CAAEtqE,QAAQ,KAClDwsE,EAAAA,GAAAA,IAAgB75G,EAAM23G,IACzB,CACDrqE,WAAW,EACXyW,cAAc,IACX/jD,EAAK,8BCvStB,GAA0B,WC2N1B,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAU6mC,YACT,MAAMtnC,EAAUsnC,IAASrT,EAAAA,EAAAA,KAAkBxzB,EAAQ6mC,EAAM37B,OAAQ27B,EAAM1vB,WACjE2xB,EAASvpC,GAAUsxB,EAAAA,EAAAA,KAAa7wB,EAAQT,QAAW8B,EACnDkkH,EAAU1+E,IAAS4kB,EAAAA,EAAAA,KAAuBzrD,EAAQ6mC,EAAM37B,SACxD,UAAE0jC,GAAc5uC,EAChBwlH,EAAqB52E,GAAW62E,sCACjCC,EAAAA,IACCC,EAAwB/2E,GAAWg3E,oCACpCC,EAAAA,IACC7+C,EAASp4B,GAAW+yE,0BAA4BC,EAAAA,IAChDC,EAA0F,GAA7EjzE,GAAWkzE,6BAA+BC,EAAAA,KACvDC,EAAYpzE,GAAWqzE,6BAA+BC,EAAAA,IACtDsB,EAAejkH,GAAS0jH,mBAAmBO,aAEjD,MAAO,CACLx8C,SACA66C,YACAG,YACAziH,UACAupC,SACAy8E,UACAC,qBACAG,wBACAnC,kBAxBcn2G,EA9Key4G,EACjCj/E,QACAtnC,UACAupC,SACAy8E,UACAC,qBACAG,wBACA3+C,SACA66C,YACAG,YACAwB,mBAEA,MAAM,gCACJuC,EAA+B,qBAC/BC,IACEt7G,EAAAA,EAAAA,MAEEe,GAAO2mC,EAAAA,GAAAA,KACPD,GAAUzmC,EAAAA,EAAAA,MACTunF,EAAkBC,EAAcC,IAAiBv1F,EAAAA,EAAAA,KAElDitB,EAAMjZ,KAAKmI,MAAM6Q,KAAKC,MAAQ,KAC9BgoC,EAA4B,KAAnBhoC,EAAMg3F,GACf/uD,EAA4B,KAAnBjoC,EAAMm3F,GACf6B,EAAsBh5F,EAAkB,EAAZg3F,GAE3BoE,EAAsBC,IAA2Br7G,EAAAA,EAAAA,IAAiBg5G,GAEnElqF,GAAc1uB,EAAAA,EAAAA,IAAgB,KAClC86G,OAGII,GAAgBl7G,EAAAA,EAAAA,IAAiB0mB,IAChCkV,IAELm/E,EAAqB,CACnB96G,OAAQ27B,EAAM37B,OACdiM,UAAW0vB,EAAM1vB,UACjBqsG,aAAc7xF,IAGhBo0F,QAGIK,GAA2Bn7G,EAAAA,EAAAA,IAAiB0mB,IAChD,MAAMlb,EAAO7E,KAAKmI,MAAM4X,EAAK8iC,UAAY,KACzCyxD,EAAwBzvG,MAGpB4vG,GAAuBp7G,EAAAA,EAAAA,IAAiB0mB,IAC5C,MAAMlb,EAAO7E,KAAKmI,MAAM4X,EAAK8iC,UAAY,KACzC0+B,IACAgzB,EAAc1vG,MAGV6vG,GAAmBr7G,EAAAA,EAAAA,IAAgB,KACvCkoF,IACAgzB,OAGII,GAAat7G,EAAAA,EAAAA,IAAgB,KAC7Bu4G,EACF2C,EAAc3C,GAEdtwB,OAIJ,IAAKrsD,IAAUtnC,EACb,OAGF,MAAMinH,EAAa19E,GAAS29E,EAAAA,GAAAA,IAAiBt0E,EAASrJ,GAAU,GAqEhE,OACEvqC,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQZ,QAAQo9B,KAAWosD,EAC3B1oF,QAASovB,EACT9tB,MAAOJ,EAAK,6BACZw2B,eAAgBskF,EAChBvkF,aAA6Bv2B,EAAf+3G,EAAoB,gBAAwB,QAAQ9kH,SA1ElDw3G,MACpB,MAAMjyB,EAAQ1kF,GAAS0jH,mBAAmBh/B,MACpCrrC,EAASqrC,GAAOrrC,OAChBmrC,EAAWE,GAAOF,UAAYuS,EAAAA,IAE9BowB,EAAWj7G,EACf,8BACA,CAAEgnB,KAAM+zF,GACR,CAAEztE,WAAW,EAAMyW,cAAc,IAE7Bm3D,GAAej0F,EAAAA,GAAAA,GAAWg0F,GAChC,IAAK9tE,EACH,OAAO+tE,EAGT,MACMC,GAD4B7iC,IAAa2/B,EAAAA,IAAoBiC,EAAwBH,GAC3C,GAC1CqB,EAAuBjuE,EAAS,IAAMguE,EAEtCE,EAAkB/iC,IAAa2/B,EAAAA,KACjCsB,EAAAA,GAAAA,IAAgBv5G,GAAMk4G,EAAAA,GAAAA,IAAoBkD,KAC1C9B,EAAAA,GAAAA,IAAkBt5G,EAAMo7G,GAEtBnF,EAAgB16C,EAChBnvD,GAAW81F,EAAAA,GAAAA,IAAoBliG,EAAMi2G,GAAe,GAE1D,GAAI8B,EAAc,CAChB,MAAM/sG,GAAOwuG,EAAAA,GAAAA,IAAwBzB,EAAc/3G,EAAM0mC,GAEnDhuB,EACJohG,EAAU,2CAA6C,0CAEzD,OACEhnH,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,OAAAD,SACGioH,KAEHhoH,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAexd,UAC5Bg0B,EAAAA,GAAAA,GAAWjnB,EAAK0Y,EAAK,CACpBy0B,OAAQkuE,EACRF,aACA/uG,WACApB,QACC,CAAEsiC,WAAW,EAAMyW,cAAc,SAI5C,CAEA,MAAMrrC,EAAMohG,EAAU,mCAAqC,kCAE3D,OACEhnH,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,OAAAD,SACGioH,KAEHhoH,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAexd,UAC5Bg0B,EAAAA,GAAAA,GAAWjnB,EAAK0Y,EAAK,CACpBy0B,OAAQkuE,EACRF,aACA/uG,YACC,CAAEkhC,WAAW,EAAMyW,cAAc,WAerC0mD,MAGHv3G,EAAAA,GAAAA,GAACg0D,GAAa,CACZtoD,OAAQ4oF,EACRlgC,cAAY,EACZE,gBAAc,EACdJ,MAAOA,EACPC,MAAOA,EACPvoD,QAAS4oF,EACT//B,SAAUizD,EACVhzD,aAAc+yD,EACdxzD,WAAmC,IAAvBqzD,EACZ/yD,kBAAmBznD,EAAK,sBAAuB,CAC7CgL,MAAMwuG,EAAAA,GAAAA,IAAwBgB,EAAsBx6G,EAAM0mC,KAE5DghB,kBAAmB1nD,EAAK,cACxB6nD,oBAAqBgzD,EACrBx7G,YAAaW,EAAK,uCChNpBs7G,GAAsD,CAC1D,aACA,YACA,aACA,aACA,kBACA,aACA,aACA,WACA,eACA,YAEIC,GAAgD,IAAID,GAAmB,aAE9D,SAASE,GAAqBC,GAC3C,MAAOC,EAAaC,IAAkBv8G,EAAAA,EAAAA,IAA8B,CAAC,IAC9Dw8G,EAAuBC,IAA4Bz8G,EAAAA,EAAAA,KAAS,IAC5DwoB,EAAWk0F,IAAgB18G,EAAAA,EAAAA,KAAS,IAE3C5B,EAAAA,EAAAA,KAAU,KACRm+G,EAAeF,GAAsB,CAAC,GACtCI,GAAyB,GACzB/9G,YAAW,KACTg+G,GAAa,KAxB0B,OA0BxC,CAACL,IAEJ,MAAMM,GAAyBlpH,EAAAA,EAAAA,KAAaiN,IAC1C,MAAQU,KAAMw7G,GAAel8G,EAAEC,OAEzBS,EAAOw7G,EAEb,SAASC,EAA0Br8G,GACjC,OAAOA,QAAQhK,CACjB,CAEA,MAAMsmH,EAAiBR,EAEvB,IAAIS,EAAsC,IACrCD,EACH,CAAC17G,GAAOy7G,EAA0BC,EAAe17G,OACpC,iBAATA,GAA2B,CAC7B47G,SAAUH,EAA0BC,EAAe17G,MAIvD,MAAM67G,EAAaA,KACjB,MAAMC,EAAmBhB,GAAkB50G,KAAKgS,GAAQyjG,EAAezjG,KACnE4jG,EAAiBld,MAAMmd,IAAOA,IAChCJ,EAAiB,IACZA,EACHK,eAAW5mH,GAEJ0mH,EAAiB9X,MAAMxmG,WAChCm+G,EAAiB,IACZA,EACHK,WAAW,KAKJ,cAATh8G,EACF67G,IAEAF,EAAiB,IACZA,KACCb,GAAkB5pE,QAAO,CAACiL,EAAKjkC,IACjCu5B,OAAOwqE,OAAO9/D,EAAK,CAAE,CAACjkC,GAAMyjG,EAAeK,aAC1C,CAAC,IAKK,eAATh8G,IAA0B27G,EAAeO,YAAcP,EAAeQ,YACxER,EAAiB,IACZA,EACHO,YAAY,IAIH,cAATl8G,IAAyB27G,EAAeO,YAAcP,EAAeQ,YACvER,EAAiB,IACZA,EACHQ,eAAW/mH,IAIF,cAAT4K,GACF67G,IAGF,MAAMO,EAAerB,GAAoB/W,OAAO9rF,GAAQyjG,EAAezjG,KACvEyjG,EAAiB,IACZA,EACHS,eAAcA,QAAsBhnH,GAGtC+lH,EAAeQ,GAEfN,GAA0BJ,GAAsBxpE,OAAO6K,KAAKq/D,GAAgB/c,MAAMj+E,IAChF,MAAMzI,EAAMyI,EACZ,OAAOnjB,QAAQy9G,EAAmB/iG,MAAU1a,QAAQm+G,EAAezjG,UAEpE,CAAC+iG,EAAoBC,IAElBmB,GAAmBhqH,EAAAA,EAAAA,KAAY,KACnC8oH,EAAeF,GAAsB,CAAC,GACtCI,GAAyB,KACxB,CAACJ,IAEJ,MAAO,CACLC,cACA9zF,YACAg0F,wBACAG,yBACAD,eACAe,mBAEJ,CCtFA,MAAMC,GAAmD,CACvD,aAAc,aAAc,eAC5B,aAAc,WAAY,aAAc,kBAAmB,aAAc,aAsP3E,IAAejrH,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAM0C,EAAO1C,GAAS6jC,EAAAA,EAAAA,KAAW/uC,EAAQkL,QAAU7J,EAC7CmnH,EAAW56G,IAAQ+9C,EAAAA,EAAAA,KAAmB3rD,EAAQ4N,EAAKpP,IAGzD,MAAO,CACLoP,OACA66G,cAJoBh/G,QAAQ++G,GAAUE,iBAJxBr7G,EAnPsCs7G,EACxD/6G,OACAg7G,sBACAC,yBACAJ,gBACAtB,cACAK,yBACA/oH,YACAqqH,mBACAC,oBACAC,eACAC,uBACAC,sBAEA,MAAM,iBACJ7oF,IACE31B,EAAAA,EAAAA,OAEE,QAAEk+C,GAAYh7C,GAAQ,CAAC,EAEvBnC,GAAOC,EAAAA,EAAAA,KAEP0hC,GAAW3mC,EAAAA,EAAAA,KAAQ,IAAMmH,IAAQkiF,EAAAA,EAAAA,IAAaliF,IAAO,CAACA,IACtDu7G,EAAwCV,GAAiBr7E,EAEzDg8E,GAA0B3iH,EAAAA,EAAAA,KAAQ,IAC/B8hH,GAAkBprE,QAAO,CAACrrB,EAAO3N,KACjCgjG,EAAYhjG,KACf2N,GAAS,GAEJA,IACN,IACF,CAACq1F,IAEEkC,GAA0Bp+G,EAAAA,EAAAA,IAAiBM,KAC/ClJ,EAAAA,EAAAA,GAAUkJ,GACVs9G,GAAwBD,MAGpBU,GAAsBr+G,EAAAA,EAAAA,IAAgB,KAC1Co1B,EAAiB,CAAE9gC,QAASkM,EAAK,0CAGnC,OACElN,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAe,WAAYm0G,GAAgB,iBAAiBtqH,UAC1EC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,YACL27B,SAAUu/E,EAAYiB,UACtBx8G,MAAOH,EAAK,wBACZ89G,UAAQ,EACRL,gBAAiBA,EACjB/8G,SAAUq7G,EACV3oG,SAAUoqG,GAAwBA,EAAqB,kBAG3DtqH,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAe,WAAYm0G,GAAgB,iBAAiBtqH,UAC1EC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,YACL27B,SAAUu/E,EAAYc,UACtBr8G,MAAOH,EAAK,6BACZ+9G,UAAW,GAAGJ,KAA2Bb,GAAkBpoH,SAC3DopH,UAAQ,EACRL,gBAAiBA,EACjBO,UAAWb,EAAsB,KAAO,OACxCz8G,SAAUq7G,EACVkC,aAAcL,EACdxqG,SAAUoqG,GAAwBA,EAAqB,kBAG3DtqH,EAAAA,GAAAA,GAAA,OAAKF,UAAWsqH,EAAkBrqH,UAChCH,EAAAA,GAAAA,IAAA,OACEE,UAAWA,EAAUC,SAAA,EAErBC,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAe,WAAYm0G,GAAgB,iBAAiBtqH,UAC1EC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,aACL27B,SAAUu/E,EAAYwC,WACtB/9G,MAAOH,EAAK,8BACZ89G,UAAQ,EACRL,gBAAiBA,EACjB/8G,SAAUq7G,EACV3oG,SAAUoqG,GAAwBA,EAAqB,mBAI3DtqH,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAe,WAAYm0G,GAAgB,iBAAiBtqH,UAC1EC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,aACL27B,SAAUu/E,EAAYyC,WACtBh+G,MAAOH,EAAK,8BACZ89G,UAAQ,EACRL,gBAAiBA,EACjB/8G,SAAUq7G,EACV3oG,SAAUoqG,GAAwBA,EAAqB,mBAI3DtqH,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAe,WAAYm0G,GAAgB,iBAAiBtqH,UAC1EC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,eACL27B,SAAUu/E,EAAY0C,eAAiB1C,EAAYU,SACnDj8G,MAAOH,EAAK,gCACZ89G,UAAQ,EACRL,gBAAiBA,EACjB/8G,SAAUq7G,EACV3oG,SAAUoqG,GAAwBA,EAAqB,qBAI3DtqH,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAe,WAAYm0G,GAAgB,iBAAiBtqH,UAC1EC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,aACL27B,SAAUu/E,EAAY2C,WACtBl+G,MAAOH,EAAK,6BACZ89G,UAAQ,EACRL,gBAAiBA,EACjB/8G,SAAUq7G,EACV3oG,SAAUoqG,GAAwBA,EAAqB,mBAI3DtqH,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAe,WAAYm0G,GAAgB,iBAAiBtqH,UAC1EC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,WACL27B,SAAUu/E,EAAY4C,SACtBn+G,MAAOH,EAAK,6BACZ89G,UAAQ,EACRL,gBAAiBA,EACjB/8G,SAAUq7G,EACV3oG,SAAUoqG,GAAwBA,EAAqB,iBAI3DtqH,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAe,WAAYm0G,GAAgB,iBAAiBtqH,UAC1EC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,aACL27B,SAAUu/E,EAAY6C,WACtBp+G,MAAOH,EAAK,8BACZ89G,UAAQ,EACRL,gBAAiBA,EACjB/8G,SAAUq7G,EACV3oG,SAAUoqG,GAAwBA,EAAqB,mBAI3DtqH,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAe,WAAYm0G,GAAgB,iBAAiBtqH,UAC1EC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,kBACL27B,SAAUu/E,EAAY8C,gBACtBr+G,MAAOH,EAAK,6BACZ89G,UAAQ,EACRL,gBAAiBA,EACjB/8G,SAAUq7G,EACV3oG,SAAUoqG,GAAwBA,EAAqB,wBAI3DtqH,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAe,WAAYm0G,GAAgB,iBAAiBtqH,UAC1EC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,aACL27B,SAAUu/E,EAAYgB,WACtBv8G,MAAOH,EAAK,8BACZ89G,UAAQ,EACRL,gBAAiBA,EACjB/8G,SAAUq7G,EACV3oG,SAAUoqG,GAAwBA,EAAqB,mBAI3DtqH,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAe,WAAYm0G,GAAgB,iBAAiBtqH,UAC1EC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,YACL27B,SAAUu/E,EAAY+C,UACtBt+G,MAAOH,EAAK,6BACZ89G,UAAQ,EACRL,gBAAiBA,EACjB/8G,SAAUq7G,EACV3oG,SAAUoqG,GAAwBA,EAAqB,uBAK/D1qH,EAAAA,GAAAA,IAAA,OAAKE,UAAWqqH,EAAiBpqH,SAAA,EAC/BC,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAe,WAAYm0G,GAAgB,iBAAiBtqH,UAC1EC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,cACL27B,SAAUu/E,EAAYgD,YACtBv+G,MAAOH,EAAK,+BACZ89G,UAAQ,EACRL,gBAAiBA,EACjB/8G,SAAUq7G,EACV3oG,SAAUoqG,GAAwBA,EAAqB,oBAG3DtqH,EAAAA,GAAAA,GAAA,OACEF,WAAWoW,EAAAA,GAAAA,GAAe,WAAYm0G,GAAgB,iBACtDv8G,QAAS08G,EAAwCG,OAAsBjoH,EAAU3C,UAEjFC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,cACL27B,SAAUu/E,EAAYiD,YACtBx+G,MAAOH,EAAK,+BACZoT,SAAUoqG,EAAuBA,EAAqB,eAClDE,EACJI,UAAQ,EACRL,gBAAiBA,EACjB/8G,SAAUq7G,OAGd7oH,EAAAA,GAAAA,GAAA,OACEF,WAAWoW,EAAAA,GAAAA,GAAe,WAAYm0G,GAAgB,iBACtDv8G,QAAS08G,EAAwCG,OAAsBjoH,EAAU3C,UAEjFC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,aACL27B,SAAUu/E,EAAYkD,WACtBz+G,MAAOH,EAAK,8BACZ89G,UAAQ,EACRL,gBAAiBA,EACjBrqG,SAAUoqG,EAAuBA,EAAqB,cAClDE,EACJh9G,SAAUq7G,MAGb5+D,IACCjqD,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAe,WAAYm0G,GAAgB,iBAAiBtqH,UAC1EC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,eACL27B,SAAUu/E,EAAYmD,aACtB1+G,MAAOH,EAAK,0BACZ89G,UAAQ,EACRL,gBAAiBA,EACjB/8G,SAAUq7G,EACV3oG,SAAUoqG,GAAwBA,EAAqB,8B,gBCpRrE,SAAqI,WAArI,GAAuL,WC4evL,IAAe3rH,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM,mBACJuqH,IACE98G,EAAAA,EAAAA,KAAezN,GACbqR,EAAak5G,GAAoBl5G,WACjCnG,EAASq/G,GAAoBr/G,QAC7B,gBAAEs/G,IAAoBC,EAAAA,EAAAA,KAAgCzqH,EAAQqR,GAC9DzD,EAAO1C,GAAS6jC,EAAAA,EAAAA,KAAW/uC,EAAQkL,QAAU7J,EAC7CqqD,EAAe99C,IAAQ+9C,EAAAA,EAAAA,KAAmB3rD,EAAQ4N,EAAKpP,IACvDkqH,EAAeh9D,GAAcg9D,aAC7Bx2F,EAAYzoB,QAAQmE,KAASukB,EAAAA,EAAAA,IAAcvkB,GAC3C88G,EAAejhH,QAAQmE,KAAS6hF,EAAAA,EAAAA,IAAiB7hF,GACjD0D,EAAai5G,GAAoBj5G,WACjCtE,EAAYu9G,GAAoBv9G,UAChC29G,EAAc/8G,IAAQR,EAAAA,EAAAA,IAASQ,EAAKpP,KACtCsuD,EAAAA,EAAAA,KAAuBhe,EAAAA,EAAAA,KAAW9uC,GAAQ4qH,EAAAA,EAAAA,IAAqBh9G,UAC/DvM,EACEwpH,EAAUphH,QAAQmE,KAASk9G,EAAAA,EAAAA,IAAYl9G,EAAKpP,MAAOusH,EAAAA,EAAAA,KAAU/qH,EAAQ4N,EAAKpP,KAC1EoyF,EAAmBllC,GAAcklC,iBACjCo6B,EAAcp9G,IAAQ29C,EAAAA,EAAAA,IAAiB39C,EAAM,YAC7Cq9G,EAAYr9G,GAAMq9G,UAClBC,EAAgBt9G,GAAOu9G,EAAAA,EAAAA,KAAoBnrH,EAAQ4N,QAAQvM,EAC3D+pH,EAAgCx9G,IAAQy9G,EAAAA,EAAAA,IAAiBz9G,KAAU48G,GAAoBU,EACvFI,EAAmB19G,KAAS6hF,EAAAA,EAAAA,IAAiB7hF,IAASskB,GAE5D,MAAO,CACLtkB,OACAskB,YACAw4F,eACAr5G,aACAyhB,cAAe9yB,EAAO8yB,cACtB03F,iBAAkBl5G,GAAck5G,EAChCG,cACAS,+BACAE,mBACA16B,mBACAi6B,UACAG,cACAtC,eACAp3G,aACA25G,YACAj+G,eA1CcK,EA9ZkCk+G,EACpDlhH,SACAuD,OACAskB,YACAw4F,eACAp5G,aACAwhB,gBACAzhB,aACA45G,YACAT,kBACAG,cACAS,+BACAE,mBACAT,UACAj6B,mBACAo6B,cACAtC,eACA17G,gBAEA,MAAM,wBACJw+G,EAAuB,eACvBC,EAAc,kBACdC,EAAiB,iBACjBC,EAAgB,wBAChBC,EAAuB,sBACvBC,EAAqB,6BACrBC,EAA4B,yBAC5BC,IACErhH,EAAAA,EAAAA,MAEE8oD,GAAax+B,EAAAA,EAAAA,GAAsB3qB,GAEnC8nC,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,MAEP,YACJ+0E,EAAW,sBAAEE,EAAqB,uBAAEG,EAAsB,iBAAEc,GAC1DrB,GAAqBr5G,GAAMo+G,sBAExBC,EAAoBC,IAAyBrhH,EAAAA,EAAAA,IAAmB,KAChEshH,EAAcC,IAAmBvhH,EAAAA,EAAAA,IAAmB,KACpDwhH,EAAqBC,IAA0BzhH,EAAAA,EAAAA,IAAmB,KAClE+9G,EAAqBC,IAA0Bh+G,EAAAA,EAAAA,KAAS,IACxD0hH,EAA4BC,IAAiC3hH,EAAAA,EAAAA,KAAS,IACtE4hH,EAAoBC,IAAyB7hH,EAAAA,EAAAA,KAAS,GAEvD8hH,GAAWlmH,EAAAA,EAAAA,KAAQ,KACvB,GAAIyrB,IAAc7gB,IAAezD,EAC/B,OAAOq1B,GAAAA,EAET,MAAMjjC,GAASwtC,EAAAA,EAAAA,MACTo/E,GAAcC,EAAAA,EAAAA,KAA+B7sH,EAAQ4N,EAAKpP,GAAI6S,GACpE,OAAOu7G,GAAcjqF,EAAAA,GAAAA,IAAOiqF,GACzBxwF,QAAQ3J,GACPA,GAAMj0B,KAAOoP,GAAMpP,IAChBi0B,GAAMj0B,KAAOkqH,GACbj2F,GAAMj0B,KAAOoP,GAAMk/G,oBACnB7pF,GAAAA,IACN,CAACr1B,EAAMskB,EAAWw2F,EAAcr3G,IAE7B07G,IAAmC9hH,EAAAA,EAAAA,IAAgB,IAChD0hH,EAASx6G,KAAK66G,IACZ,CACL3hH,MAAO2hH,EAAOxuH,GACdoN,OAAO2mB,EAAAA,GAAAA,IAAa9mB,EAAMuhH,IAAW,GACrC5rF,aAAaziC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CAAC3zB,KAAK,QAAQ4zB,KAAMu6F,UAKxCC,IAAsBxmH,EAAAA,EAAAA,KAAQ,IAC3BkmH,EAASvwF,QAAQ3J,GACtBA,EAAKj0B,KAAOkqH,GACTj2F,EAAKj0B,KAAOoP,GAAMk/G,mBAClBr6F,EAAKj0B,KAAOs0B,KAEhB,CAAC65F,EAAU75F,EAAe41F,EAAc96G,GAAMk/G,oBAE3CI,IAAuBzmH,EAAAA,EAAAA,KAAQ,IAC5BkmH,EAASvwF,QAAQ3J,GACtBA,EAAKj0B,KAAOs0B,GACTL,EAAKj0B,KAAOkqH,GACZj2F,EAAKj0B,KAAOoP,GAAMk/G,qBAEtB,CAACH,EAAU75F,EAAe41F,EAAc96G,GAAMk/G,oBAE3CK,IAAgB1mH,EAAAA,EAAAA,KAAQ,KAC5B,MAAM2mH,EAAsBT,EAAS9hB,MAAMp4E,GAASA,EAAKj0B,KAAOs0B,IAGhE,OAF2Bk4F,GAAeoC,GAAuBx/G,GAAMg8C,YAG9D3mB,GAAAA,EAGF0pF,EAASvwF,QAAQ3J,IACtB,MAAM8yF,EAAU30B,IAAmBn+D,EAAKj0B,IACxC,OAAOysH,IAAc1F,OAEtB,CAACoH,EAAU1B,EAAWn4F,EAAek4F,EAAap6B,EAAkBhjF,GAAMg8C,cAMvEyjE,IAJ8B5mH,EAAAA,EAAAA,KAAQ,IACnCgD,QAAQwjH,GAAoB9sH,QAAU+sH,GAAqB/sH,QAAUgtH,GAAchtH,SACzF,CAAC8sH,GAAqBC,GAAsBC,OAGzC3C,IAAoBl5G,GAAco5G,EAElC4C,IAAY7mH,EAAAA,EAAAA,KAAQ,KACnBkmH,GAAYr7G,EAAmB,CAAC,GAC9Bi8G,EAAAA,GAAAA,IAA0BZ,GAAWl6F,GAAS,CAACA,EAAKj0B,IAAI+zB,EAAAA,GAAAA,IAAa9mB,EAAMgnB,OACjF,CAACnhB,EAAY7F,EAAMkhH,IAEhBa,IAAqC/mH,EAAAA,EAAAA,KAAQ,IAC1C,CACL,CACE4E,MAAOgG,GAAcs7G,EAASxsH,QAAU,EAAI,OAASwsH,IAAW,IAAInuH,GACpEoN,MAAOumC,EAAQ,mBACfs7E,cAAep8G,GAAcs7G,EAASxsH,QAAU,EAAI,IAC/C4sH,KAAmC3wF,QAAQsxF,GAAQA,EAAIriH,QAAUq9G,GAC/DgF,EAAIriH,QAAUuC,GAAMk/G,mBACpBY,EAAIriH,QAAUynB,UACjBzxB,KAGP,CAACgQ,EAAYs7G,EAAUx6E,EAASu2E,EAAc96G,GAAMk/G,kBAAmBh6F,IAEpE66F,IAAuClnH,EAAAA,EAAAA,KAAQ,IAC5C,CACL,CACE4E,MAAOgG,GAAcs7G,EAASxsH,QAAU,EAAI,aAAewsH,IAAW,IAAInuH,GAC1EoN,MAAOyF,GAAcs7G,EAASxsH,QAAU,EACpCgyC,EAAQ,sBACRA,EAAQ,gBAAiBuL,OAAOyK,OAAOmlE,IAAW,IACtDG,cAAep8G,GAAcs7G,EAASxsH,QAAU,EAAI,IAC/C4sH,KAAmC3wF,QAAQsxF,GAAQA,EAAIriH,QAAUq9G,GAC/DgF,EAAIriH,QAAUuC,GAAMk/G,mBACpBY,EAAIriH,QAAUynB,UACjBzxB,KAGP,CAACgQ,EAAYs7G,EAAUx6E,EAASm7E,GAAW5E,EAAc96G,GAAMk/G,kBAAmBh6F,IAE/E86F,IAAoCnnH,EAAAA,EAAAA,KAAQ,IACzC,CACL,CACE4E,MAAOgG,GAAcs7G,EAASxsH,QAAU,EAAI,MAAQwsH,IAAW,IAAInuH,GACnEoN,MAAOyF,GAAcs7G,EAASxsH,QAAU,EACNgyC,EAA7Bo6E,EAAqC,sBAAiC,kBACtEA,EAA6Bp6E,EAAQ,sBACpCA,EAAQ,YAAauL,OAAOyK,OAAOmlE,IAAW,IACpDG,cAAep8G,GAAcs7G,EAASxsH,QAAU,EAAI,IAC/C4sH,WACD1rH,KAGP,CAACkrH,EAA4Bp6E,EAAS9gC,EAAYs7G,EAAUW,KAEzDO,IAA0B5iH,EAAAA,EAAAA,IAAgB,KAC9CuhH,GAA+B5vD,IAAUA,OAGrCkxD,IAA0B7iH,EAAAA,EAAAA,IAAgB,CAAC6wC,EAAmBiyE,KAClE,IAAKngH,EAAM,OAAOq1B,GAAAA,EAClB,MAAMjjC,GAASwtC,EAAAA,EAAAA,MACf,OAAOugF,EAAsB3xF,QAAQ4xF,IACnC,MAAMllF,GAASmlF,EAAAA,EAAAA,KAAwBjuH,EAAQ4N,EAAKpP,GAAIwvH,GACxD,OAAOllF,GAAUgT,EAAQttB,SAASsa,EAAOtqC,UAIvC0vH,IAAmBjjH,EAAAA,EAAAA,IAAiBkjH,IACxCzwE,OAAOC,QAAQwwE,GAAiBh4G,SAAQ,EAAEmmB,EAAQ8xF,MAC5CA,EAAcjuH,QAChBurH,EAAkB,CAChB2C,cAAe/xF,EACfpxB,OAAQ0C,EAAMpP,GACd6S,WAAY+8G,UAMdE,IAAuBrjH,EAAAA,EAAAA,IAAiBsjH,IAC5C9C,EAAe,CAAEp6G,WAAYk9G,EAAuB9B,oBAAoB,OAGpE+B,IAA8BvjH,EAAAA,EAAAA,IAAiBwjH,IAC9C7gH,GACL6gH,EAAWt4G,SAAS7L,IAClByhH,EAAyB,CAAEzhH,SAAQY,OAAQ0C,EAAKpP,WAI9CkwH,IAAqBzjH,EAAAA,EAAAA,IAAiB0jH,IAC1CA,EAAmBx4G,SAASmmB,IAC1BqvF,EAAiB,CAAEzgH,OAAQ0C,EAAMpP,GAAI89B,iBAInCsyF,IAAqC3jH,EAAAA,EAAAA,IAAiB0jH,IAC1DA,EAAmBx4G,SAASmmB,IAC1BwvF,EAA6B,CAC3B5gH,OAAQ0C,EAAMpP,GACd89B,SACAuyF,aAAc1H,UAKd2H,IAA0B7jH,EAAAA,EAAAA,IAAgB,KAC9C,GAAK2C,GAASyD,EAAd,CAGA,GADArE,MACIsE,EACFs6G,EAAwB,CAAEv6G,oBACrB,GAAIg8G,GAAkB,CAC3B,GAAIhB,GAAqBlsH,OAAQ,CAC/B,MAAMH,GAASwtC,EAAAA,EAAAA,MACTihF,EAAapC,EAAoBjwF,QAAQuL,IAAY3jB,OAAOggG,MAAMhgG,OAAO2jB,MACzE8mB,EAAcp9C,EAAW8rC,QAAiC,CAACiL,EAAK4lE,KACpE,MAAMv7F,GAAOw7F,EAAAA,EAAAA,KAAwBjuH,EAAQ4N,EAAKpP,GAAIwvH,GAOtD,OANIv7F,GAAQg8F,EAAWjgG,SAASiE,EAAKj0B,MAC9B4pD,EAAI31B,EAAKj0B,MACZ4pD,EAAI31B,EAAKj0B,IAAM,IAEjB4pD,EAAI31B,EAAKj0B,IAAIkT,KAAKsS,OAAOgqG,KAEpB5lE,IACN,CAAC,GAEJ8lE,GAAiBz/D,EACnB,CAEA,GAAIw9D,GAAoB9rH,OAAQ,CAC9B,MAAMsuH,EAAaxC,EAAmB7vF,QAAQuL,IAAY3jB,OAAOggG,MAAMhgG,OAAO2jB,MAC9E6mF,GAA4BC,EAC9B,CAEA,GAAItC,GAAchsH,SAAWknH,EAAuB,CAClD,MAAMoH,EAAatC,EAAa/vF,QAAQuL,IAAY3jB,OAAOggG,MAAMhgG,OAAO2jB,MACxE+mF,GAAmBD,GACnB,MAAMF,EAAwBT,GAAwBW,EAAYp9G,GAClEi9G,GAAqBC,EACvB,CAEA,GAAIpC,GAAchsH,QAAUknH,EAAuB,CACjD,MAAMoH,EAAatC,EAAa/vF,QAAQuL,IAAY3jB,OAAOggG,MAAMhgG,OAAO2jB,MACxEinF,GAAmCH,EACrC,CAEKpC,GAAqBlsH,QAAW8rH,GAAoB9rH,QAAWgsH,GAAchsH,QAChFsrH,EAAe,CAAEp6G,aAAYo7G,sBAEjC,MACEhB,EAAe,CAAEp6G,aAAYo7G,uBAG/BjB,IACAK,GAhDgC,KAmD5BzY,IAAiBnoG,EAAAA,EAAAA,IAAgB,KACrCugH,OAuFF,OApFAviH,EAAAA,EAAAA,KAAU,MACHoB,GAAUmpD,IACb84D,EAAuB,IACvBJ,EAAsB,IACtBE,EAAgB,IAChBM,GAAsB,GACtB7D,GAAuB,GACvB2D,GAA8B,GAC9BlE,OAED,CAACj+G,EAAQmpD,EAAY80D,KA2EtB3pH,EAAAA,GAAAA,GAACmN,EAAAA,EAAK,CACJzB,OAAQA,EACRE,QAAS6oG,GACTrnG,QAASy+G,OAAkBnpH,EAAYytH,GACvCrwH,UDhbmC,WCgbZC,UAEvBH,EAAAA,GAAAA,IAAA,OAAKE,UDlbY,WCkbWC,SAAA,EA7E5BH,EAAAA,GAAAA,IAAA,OACEE,UAAW4uH,IDtW6C,WCuWxDt4G,IAAKo9B,EAAQ5hB,MAAQ,WAAQlvB,EAAU3C,SAAA,CAEtC2uH,KACC1uH,EAAAA,GAAAA,GAACmvC,GAAAA,EAAU,CACTjvC,KAAK,QACLkvC,MAAO4+E,KAGXhuH,EAAAA,GAAAA,GAAA,MAAIF,WAAWoW,EAAAA,GAAAA,GAAew4G,GD/W6C,WAAyB,YC+WhB3uH,SACjFyzC,EAAQ,kCAAmC9gC,GAAYlR,aAoEzDktH,KACC9uH,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,KAAGF,UAAWyd,GAAmBxd,SAAEyzC,EAAQ,8BA9DjD5zC,EAAAA,GAAAA,IAAA,OAAKE,UDxXiM,WCwXvKC,SAAA,EAC7BC,EAAAA,GAAAA,GAACowH,GAAAA,EAAa,CACZ7iH,QAASshH,GACTrhH,SAAUmgH,EACVlgH,SAAUigH,EACV2C,eAAgB39G,GAAcs7G,EAASxsH,QAAU,IAElD8sH,IAAqB9sH,OAAS,IAC7BxB,EAAAA,GAAAA,GAACowH,GAAAA,EAAa,CACZ7iH,QAASyhH,GACTxhH,SAAU+/G,EACV9/G,SAAU6/G,EACV+C,eAAgB39G,GAAcs7G,EAASxsH,QAAU,IAGpDgtH,IAAehtH,OAAS,IACvBxB,EAAAA,GAAAA,GAACowH,GAAAA,EAAa,CACZ7iH,QAAS0hH,GACTzhH,SAAUigH,EACVhgH,SAAU+/G,EACV6C,eAAgB39G,GAAcs7G,EAASxsH,QAAU,QASvD5B,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GDrZyS,WCsZvT03G,GDtZ6V,YCsZ9R7tH,SAAA,EAE/DC,EAAAA,GAAAA,GAAA,MAAIF,WAAWoW,EAAAA,GAAAA,GAAeqH,GDxZ6H,YCwZhFxd,SACxEyzC,EAAQ,6BAA8Bw6E,EAASxsH,WAElDxB,EAAAA,GAAAA,GAACgqH,GAAsB,CACrBK,cAAY,EACZ99G,OAAQ0C,GAAMpP,GACdoqH,oBAAqBA,EACrBC,uBAAwBA,EACxBrB,uBAAwBA,EACxBL,YAAaA,EACb1oH,WAAWoW,EAAAA,GAAAA,GDlaiN,WCoa1N+zG,GDpauX,iBCybtXuD,GAAchsH,QAAU6qH,GACvBzsH,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPy7E,QAAM,EACNvhC,gBAAiBj/D,GACjBzP,QAASohH,GAAwBnvH,SAAA,CAEhCyzC,EAAQo6E,EAA6B,uBAAyB,8BAC/D5tH,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CACHjF,KAAMsgH,EAA6B,KAAO,OAC1C9tH,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAe,aAG3CswG,GAA8B,OAGpChC,GAAmBK,IAAYwC,MAC/B9uH,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,KAAAD,SACG2S,GAAcA,EAAWlR,OAAS,EAC/BsL,EAAK,+BAAiCA,EAAK,mCAEhD2/G,IACCzsH,EAAAA,GAAAA,GAAA,KAAAD,SAAIyzC,EAAQ,8BAA+B,EAAG,OAE/Cm5E,IACC3sH,EAAAA,GAAAA,GAAA,KAAAD,SAAIyzC,EAAQ,+BAAgC,EAAG,UAIpDq4E,IACC7rH,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPhzD,UAAU,kBACVmN,MAAO++G,GAAcj4F,EAAAA,GAAAA,GAAWyf,EAAQ,2BAA4Bw4E,IAChEx4E,EAAQ,0CACZvK,QAAS6kF,EACT/6D,QAASg7D,KAGbnuH,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAe,iBAC7B+zG,EDheuP,WAA4B,YCge/MlqH,SAAA,EAEpEC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACC,MAAM,SAAS9N,UAAU,wBAAwB+N,QAAM,EAACC,QAASqiH,GAAwBpwH,SAC9F2uH,GAAmBl7E,EAAQ,oBAAsB1mC,EAAK,aAEzD9M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC7N,UAAU,wBAAwB+N,QAAM,EAACC,QAAS2mG,GAAe10G,SAAEyzC,EAAQ,wBC7X7F,IAAe70C,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAM+jH,GAAgB7hH,EAAAA,EAAAA,IAASlC,GACzB6nB,GAAiBC,EAAAA,EAAAA,KAAqBhzB,EAAQkL,GAC9C0C,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQkL,GAC1BgnB,EAAYzoB,QAAQmE,KAASukB,EAAAA,EAAAA,IAAcvkB,GAC3CwkB,EAAU3oB,QAAQmE,KAASy9G,EAAAA,EAAAA,IAAiBz9G,GAC5C88G,EAAejhH,QAAQmE,KAAS6hF,EAAAA,EAAAA,IAAiB7hF,GAMvD,MAAO,CACLqhH,gBACAl8F,iBACAb,YACAE,UACAs4F,eACAwE,aAXoBD,IAAkBl8F,GAAmB23F,GAAgBt4F,EAYzEu4F,YAXkB/8G,IAAQR,EAAAA,EAAAA,IAASQ,EAAKpP,KACtCsuD,EAAAA,EAAAA,KAAuBhe,EAAAA,EAAAA,KAAW9uC,GAAQ4qH,EAAAA,EAAAA,IAAqBh9G,UAC/DvM,KAXYgM,EAnEI8hH,EACtB9kH,SACAa,SACAiM,YACA+a,YACAE,UACAs4F,eACAwE,eACAvE,cACApgH,cAEA,MAAM,WAAE6kH,IAAe1kH,EAAAA,EAAAA,OAEhB2kH,EAAiBC,IAAsBzkH,EAAAA,EAAAA,KAAS,GAEjD0kH,GAAmBtkH,EAAAA,EAAAA,IAAgB,KACvCmkH,EAAW,CACTlkH,SACAiM,YACAq4G,SAAS,EACTC,WAAYJ,EACZK,UAAWL,IAEb9kH,OAGIkB,GAAOC,EAAAA,EAAAA,KAcb,OACEnN,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJzB,OAAQA,EACRE,QAASA,EACT9L,UAAU,MACVoN,MAAOJ,EAAK,wBAAwB/M,SAAA,EAEpCC,EAAAA,GAAAA,GAAA,KAAAD,SAjBO+M,EADLymB,EACU,yBAGVE,GAAWs4F,EACD,kBAGF,yBAWTwE,IACCvwH,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPhzD,UAAU,kBACVmN,MAAO++G,GAAcj4F,EAAAA,GAAAA,GAAWjnB,EAAK,8BAA+Bk/G,IAChEl/G,EAAK,oDACTm8B,QAASynF,EACT39D,QAAS49D,KAGb/wH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC7N,UAAU,wBAAwB+N,QAAM,EAACC,QAAS8iH,EAAiB7wH,SACxE+M,EAAK,gBAER9M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC7N,UAAU,wBAAwB+N,QAAM,EAACC,QAASlC,EAAQ7L,SAAE+M,EAAK,sBCzDjF,IAAenO,EAAAA,EAAAA,KA1B6BqyH,EAC1CtlH,SACAulH,sBAAsB,EACtBrlH,UACAslH,cAEA,MAAMpkH,GAAOC,EAAAA,EAAAA,KAEb,OACEnN,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJzB,OAAQA,EACRE,QAASA,EACT9L,UAAU,YACVoN,MAAOJ,EAAK,8BAA8B/M,SAAA,EAE1CC,EAAAA,GAAAA,GAAA,KAAAD,SAAI+M,EAAK,oCAAqCmkH,EAAqB,QACnErxH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,sBAAqBC,SAAA,EAClCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC7N,UAAU,wBAAwB+N,QAAM,EAACC,QAASojH,EAAQnxH,SAC/D+M,EAAK,kBAER9M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC7N,UAAU,wBAAwB+N,QAAM,EAACC,QAASlC,EAAQ7L,SAAE+M,EAAK,qB,eC/BjF,MC4OA,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAMwN,GAAWC,EAAAA,EAAAA,KAAezN,IAC1B,mBAAE8vH,IAAuB3gD,EAAAA,GAAAA,GAAqBnvE,GAC9C4N,GAAOC,EAAAA,EAAAA,KAAkB7N,IAEvBH,KAAMiP,EAAe,OAAE5D,IAAW6C,EAAAA,EAAAA,KAAyB/N,IAAW,CAAC,EACzEsR,EAAiC,cAApBxC,GACb,UAAEP,IAAck8G,EAAAA,EAAAA,KAAgCzqH,GAChDo4G,EAAY3uG,SAAS6H,IAAcy+G,EAAAA,EAAAA,KAAgC/vH,IACnEy/B,GAAcuwF,EAAAA,EAAAA,KAAkChwH,IAC9CqR,WAAY4+G,GAAuBziH,EAAS0iH,kBAAoB,CAAC,EACnEC,IAAsBjlH,IAASklH,EAAAA,EAAAA,KAA0BpwH,EAAQkL,EAAQ+kH,GACzE9iF,IAAc77B,IAAcpG,KAASmlH,EAAAA,EAAAA,KAAyBrwH,EAAQkL,EAAQ+kH,GAC9EK,KAAUL,IAAsB/kH,KAASqlH,EAAAA,EAAAA,KAAavwH,EAAQkL,EAAQ+kH,GACtEO,EAA0BhjH,EAASijH,yBACnCC,EAAiBjnH,QAAQ+mH,GAA2BhjH,EAASy/C,gBAC9Dz/C,EAAS8/C,0BAA4B9/C,EAASmjH,2BAA6BnjH,EAASkiC,aACpFliC,EAAS+8G,oBAEd,MAAO,CACL38G,OACA0D,aACAs/G,uBAAuBC,EAAAA,EAAAA,KAA4B7wH,GACnD8wH,kBAAmBviH,EACnBwiH,kBAAmB3Y,EACnB4Y,oBAAqBvxF,EACrBwxF,mBAAoB9jF,EACpB8iF,qBACAE,sBACAO,iBACAZ,qBACAQ,aAhCcjjH,EAzLoC6jH,EACtDtjH,OACAujH,UACAj5G,WACApJ,kBACAwC,aACAs/G,wBACAE,oBACAC,oBACAC,sBACAC,qBACAd,sBACAO,iBACAT,qBACAH,qBACAQ,cAEA,MAAM,sBACJzE,EAAqB,mCACrBuF,EAAkC,yBAClCC,EAAwB,qBACxBC,EAAoB,iBACpBjxF,EAAgB,eAChBw8E,EAAc,uBACd9sG,EAAsB,uBACtBwhH,IACE7mH,EAAAA,EAAAA,MACEe,GAAOC,EAAAA,EAAAA,KD9EkBwM,KAC/B,SAASs5G,EAAWjmH,GAClBA,EAAE6Y,kBACF1Z,EAAAA,EAAAA,MAAa4mH,sBACf,EAEAG,EAAAA,GAAAA,IAAWhrH,EAAAA,EAAAA,KAAQ,IAAOyR,EAAW,CACnC,QAASs5G,QACPnwH,GAAY,CAAC6W,MCwEjBw5G,CAAwBx5G,GAExB,MAAOy5G,EAAiBC,EAAeC,IAAkBj0H,EAAAA,EAAAA,MAClDk0H,EAAuBC,IAA4BlnH,EAAAA,EAAAA,KAAS,GAE7DmnH,GAA8B/mH,EAAAA,EAAAA,IAAgB,KAClD4gH,OAGIoG,GAAehnH,EAAAA,EAAAA,IAAgB,KAC9BglH,GAAuBriH,GAC5BmC,EAAuB,CACrB7E,OAAQ0C,EAAKpP,GACb6S,WAAY4+G,EACZ3+G,mBAIJrI,EAAAA,EAAAA,KAAU,IACDiP,IAAaw4G,GAChB/4E,EAAAA,GAAAA,GAAyB,CACzBu6E,YAAapB,EAAoBmB,OAAe5wH,EAChDowC,SAAUq/E,EAAoBmB,OAAe5wH,EAC7C8wH,MAAOH,SAEP3wH,GACH,CACD6W,EAAU+5G,EAAcD,EAA6BtB,EACrDI,IAGF,MAAMU,GAAavmH,EAAAA,EAAAA,IAAgB,KACjCqmH,IACAjxF,EAAiB,CACf9gC,QAASkM,EAAK,uBAEhBogH,OAGInzE,GAAiBztC,EAAAA,EAAAA,IAAgB,KACrComH,IACAxF,OAGIuG,GAAwBnnH,EAAAA,EAAAA,IAAgB,KACxC6kH,GAAsBQ,EACxBsB,IAIFl5E,OAGI25E,GAAmBpnH,EAAAA,EAAAA,IAAgB,KACvCsmH,EAAuB,CAAEzB,oBAAqBgC,IAC9CD,IACAn5E,OAGI45E,GAA4Bt9F,EAAAA,EAAAA,GAAsB47F,QAAyBvvH,GAAW,GAGtFkxH,EAAyB9mH,EAAK,kCAFGyM,EAAW04G,EAAwB0B,EAE6B,KAEjGvtE,GAAoB95C,EAAAA,EAAAA,IAAgB,KACnCglH,GAAuBriH,IAC5BivG,EAAe,CACb3xG,OAAQ0C,EAAKpP,GACb6S,WAAY4+G,IAEdpE,QAGIptH,GAAYoW,EAAAA,GAAAA,GAChB,uBACAs8G,GAAW,gBACXj5G,GAAY,SAGRs6G,EAAeA,CACnB7gH,EAAgB/F,EAAea,EAA4BsF,KAGzDpT,EAAAA,GAAAA,GAAA,OACEypC,KAAK,SACLD,SAAU,EACV1pC,WAAWoW,EAAAA,GAAAA,GACT,aACA,OACA9C,GAAe,eAEjBtF,QAASA,EACTZ,MAAOD,EACP,aAAYA,EAAMlN,UAElBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAM0F,MAKlB,OACEpT,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,OAAKF,UAAWA,EAAUC,UACxBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,6BAA4BC,SAAA,EACzCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLC,MAAM,cACNyE,OAAK,EACLvE,QAASulH,EACT/gH,UAAU,mBAAkBvS,UAE5BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAEbtN,EAAAA,GAAAA,GAAA,QAAMF,UAAU,6BAA6BoN,MAAO0mH,EAAuB7zH,SACxE6zH,IAGF9oH,QAAQmnH,KACPryH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,+BAA8BC,SAAA,CACtB,cAApBoQ,GAAmCmiH,GAClCuB,EACE,UAAW/mH,EAAK,4BAA6B2lH,GAGhDL,GACCyB,EAAa,OAAQ/mH,EAAK,+BAAgCs5C,GAE3DisE,IAAwBb,GACvBqC,EAAa,WAAY/mH,EAAK,sBAAuB2mH,IAErDjC,GACAqC,EAAa,OAAQ/mH,EAAK,mCAAoC+lH,GAE/DV,GACC0B,EAAa,SAAU/mH,EAAK,gCAAiCwmH,GAAc,YAMrF1zH,EAAAA,GAAAA,IAACwjC,GAAAA,EAAa,CACZ13B,OAAQsnH,EACRpnH,QAASsnH,EACT5vF,eAAgBowF,EAAiB3zH,SAAA,CAEhC+M,EAAK,2BACN9M,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPhzD,UAAU,kBACVmpC,QAASkqF,EACTlmH,MAAOH,EAAK,2BACZimD,QAASqgE,cCtInB,IAAez0H,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM,OAAEkL,EAAM,UAAEiM,IAAc1J,EAAAA,EAAAA,KAAezN,GAAQyyH,aAAe,CAAC,EACrE,OAAKvnH,GAAWiM,EAIT,CACLu7G,aAAal/F,EAAAA,EAAAA,KAAkBxzB,EAAQkL,EAAQiM,IAAYu7G,aAJpD,CAAC,IAJMrlH,EAxEpB,UAAqB,OACnBhD,EAAM,YACNqoH,IAEA,MAAM,SACJvpF,EAAQ,iBACRwpF,IACEjoH,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,KAEPknH,GAAuBjoF,EAAAA,GAAAA,GAAiB+nF,GAAa,GACrD5hC,GAAYrqF,EAAAA,EAAAA,KAAQ,KACxB,IAAKmsH,EACH,OAGF,MAAMv7G,EAASqmC,OAAO6K,KAAKqqE,GAG3B,OAFAv7G,EAAO+qC,MAAK,CAACywE,EAAQC,IAAYF,EAAqBE,GAAWF,EAAqBC,KAE/Ex7G,IACN,CAACu7G,IAEE3vG,GAAchY,EAAAA,EAAAA,IAAiBqxB,IACnCq2F,IAEAppH,YAAW,KACT4/B,EAAS,CAAE3qC,GAAI89B,MA7BY,QAiCzBy2F,GAAyB9nH,EAAAA,EAAAA,IAAgB,KAC7C0nH,OAGF,OACEp0H,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJzB,OAAQA,EACRE,QAASooH,EACTl0H,WAAWoW,EAAAA,GAAAA,GClEO,WDkEsB,UACxChJ,MAAO,WAAWilF,GAAW3wF,eAAezB,SAAA,EAE5CC,EAAAA,GAAAA,GAAA,OAAKoW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SACtCoyF,GAAaA,EAAU3+E,KAAKmqB,IAC3B39B,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAEPxiC,UAAU,6CAEVgO,QAASA,IAAMwW,EAAYqZ,GAAQ59B,UAEnCC,EAAAA,GAAAA,GAACiiD,GAAAA,EAAe,CACdtkB,OAAQA,EACRwkB,kBAAgB,EAChBd,QAAQE,EAAAA,GAAAA,GAAiBz0C,EAAsC,IAAhCmnH,EAAsBt2F,IACrDwjB,WAAW,kBATRxjB,QAcX39B,EAAAA,GAAAA,GAAA,OAAKF,UAAU,sBAAqBC,UAClCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,wBACV+N,QAAM,EACNC,QAASsmH,EAAuBr0H,SAE/B+M,EAAK,eAKhB,K,gBEjGA,SAAkE,WAAlE,GAAoF,WAApF,GAA+H,WC8BzHunH,GAA2BzrG,EAAAA,EAAqBmP,EAAAA,IA4GtD,IAAep5B,EAAAA,EAAAA,KACb+P,EAAAA,EAAAA,KAAsBrN,IACpB,MAAM,OAAEkL,EAAM,WAAE+nH,IAAexlH,EAAAA,EAAAA,KAAezN,GAAQkzH,4BAA8B,CAAC,EAGrF,MAAO,CAAErkF,KAFI3jC,GAAS4jC,EAAAA,EAAAA,KAAW9uC,EAAQkL,QAAU7J,EAEpC4xH,gBAJjB5lH,EA3GiC8lH,EAAG9oH,SAAQ4oH,aAAYpkF,WACxD,MAAMpjC,GAAOC,EAAAA,EAAAA,MACP,4BACJ0nH,EAA2B,iBAC3B9yF,EAAgB,gCAChB+yF,EAA+B,iBAC/BhzF,EAAgB,qBAChBizF,EAAoB,SACpBC,IACE7oH,EAAAA,EAAAA,MACEo2G,GAAWh0D,EAAAA,EAAAA,IAAuBje,GAElC2kF,GAAqBvoH,EAAAA,EAAAA,IAAgB,KACzCmoH,EAA4B,CAAEK,qBAAqB,IACnDJ,IAEA9pH,YAAW,KACT82B,EAAiB,CAAE9gC,QAASkM,EAAK,sBAChCunH,OAGCU,GAAqBzoH,EAAAA,EAAAA,IAAgB,KACzCqoH,EAAqB,CACnBK,WAAY,WACZzuF,WAAY,YACZ0uF,UAAWA,IAAML,EAAS,CAAEj3F,OAAQuS,EAAMrwC,OAE5C60H,IAEA9pH,YAAW,KACT82B,EAAiB,CAAE9gC,QAASkM,EAAK,0BAChCunH,OAGCa,GAAoB5oH,EAAAA,EAAAA,IAAgB,KACxCooH,IAEA9pH,YAAW,KACT+2B,EAAiB,CAAEQ,eAAgB,gBAClCkyF,OAGCr5F,GAAc1uB,EAAAA,EAAAA,IAAgB,KAClCooH,OAGF,OACE10H,EAAAA,GAAAA,GAACmN,EAAAA,EAAK,CAACk1B,QAAM,EAAC32B,OAAQA,EAAQE,QAASovB,EAAYj7B,UACjDH,EAAAA,GAAAA,IAAA,OAAKE,UDhFiB,WCgFYsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAA,EACpEC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UDlF8I,WCmF9I8N,MAAM,cACNyE,OAAK,EACLnS,KAAK,UACL4N,QAASktB,EACT1oB,UAAU,QAAOvS,UAEjBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAEbtN,EAAAA,GAAAA,GAACqkG,GAAAA,EAAuB,CACtBjkG,OAAQk0H,EAAaj0H,GAAAA,EAAe80H,SAAW90H,GAAAA,EAAe+0H,SAC9Dl1H,KAAM,GACNJ,UD9FoC,WC+FpCuvC,gBAAc,EACd7uC,QAAM,KAERR,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAcxd,SAC1B+M,EAAKwnH,EAAa,qBAAuB,6BAE5Ct0H,EAAAA,GAAAA,GAAA,KAAGF,UAAWyd,GAAYxd,UACvBg0B,EAAAA,GAAAA,GACCjnB,EACEwnH,EAAa,mBAAqB,6BAClCnS,GAEF,CAAC,uBAGLniH,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLzN,KAAK,UACL4N,QAASwmH,EAAaO,EAAqBE,EAC3Cj1H,UAAWyd,GAAcxd,SAExB+M,EAAKwnH,EAAa,qBAAuB,6BAE5Ct0H,EAAAA,GAAAA,GAACq1H,GAAAA,EAAS,CAACv1H,UDrHwF,WCqH5DC,SAAE+M,EAAK,gBAC9C9M,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAcxd,SAAE+M,EAAK,yBACpC9M,EAAAA,GAAAA,GAAA,KAAGF,UAAWyd,GAAYxd,UACvBg0B,EAAAA,GAAAA,GACCjnB,EAAKwnH,EAAa,mBAAqB,uBAAwBnS,GAC/D,CAAC,uBAGLniH,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLg1B,qBAAmB,EACnBziC,KAAK,UACL4N,QAASonH,EACTp1H,UAAWyd,GAAcxd,SAExB+M,EAAK,qCCsIhB,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM,OAAEkL,EAAM,UAAEiM,IAAc1J,EAAAA,EAAAA,KAAezN,GAAQi0H,cAAgB,CAAC,EAChE10H,EAAU2L,GAAUiM,GAAYqc,EAAAA,EAAAA,KAAkBxzB,EAAQkL,EAAQiM,QAAa9V,EAErF,MAAO,CACL6J,SACAiM,YACA4nC,UAAWx/C,GAASw/C,UACpBm1E,SAAU30H,GAAS20H,SACnBxB,YAAanzH,GAASmzH,YACtB5zE,mBAAoB9+C,EAAO++C,UAAUD,sBAXvBzxC,EAtNgC8mH,EAClD9pH,SACA6pH,WACAn1E,YACA7zC,SACAiM,YACAu7G,cACA5zE,yBAEA,MAAM,aACJs1E,EAAY,sBACZC,EAAqB,SACrBlrF,IACEz+B,EAAAA,EAAAA,MAGEm9C,GAAYra,EAAAA,EAAAA,MAAYsa,MAAMziB,KAC9BvB,GAAY0J,EAAAA,EAAAA,MAAYpI,MAAMC,KAE9B8M,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,MACNkoD,EAAWC,EAAcC,IAAe58F,EAAAA,EAAAA,IAAQ,IAChD02H,EAAWC,IAAgB1pH,EAAAA,EAAAA,SAAkCxJ,GAC9DmzH,EAAiBN,GAAYn1E,GAAam1E,EAASpiG,OAnCnB,IAoCjCitB,EAAU01E,QAAQt0H,OAAS,EAC1Bu0H,GAAY3sH,EAAAA,EAAAA,OAElBkB,EAAAA,EAAAA,KAAU,KACJoB,IAAWiwF,IACbo6B,EAAUxsH,aAAU7G,GAGlBi5F,IAAcjwF,IAChBmwF,IACA+5B,OAAalzH,MAEd,CAACi5F,EAAWjwF,EAAQmwF,IAEvB,MAAMm6B,GAA0B1pH,EAAAA,EAAAA,IAAgB,KAC1CypH,EAAUxsH,SACZihC,EAAS,CAAE3qC,GAAIk2H,EAAUxsH,UAE3BmsH,OAGI16F,GAAc1uB,EAAAA,EAAAA,IAAgB,KAClCsvF,OAGIt3E,GAAchY,EAAAA,EAAAA,IAAiBqxB,IACnCo4F,EAAUxsH,QAAUo0B,EACpB3C,OAGIipB,GAAiB33C,EAAAA,EAAAA,IAAgB,KACrCmpH,EAAa,CACXlpH,OAAQA,EACRiM,UAAWA,OAITy9G,GAAenuH,EAAAA,EAAAA,KAAQ,KAC3B,MAAMouH,EAAiC,GAMvC,OALAX,GAAUn1E,WAAW5oC,SAAQ,EAAG03B,eACzBgnF,EAAgBhqB,MAAM/yB,IAAM7qC,EAAAA,EAAAA,IAAe6qC,EAAGjqC,MACjDgnF,EAAgBnjH,KAAKm8B,MAGlBgnF,IACN,CAACX,IAEEp4E,GAAUr1C,EAAAA,EAAAA,KAAQ,KACtB,GAAI6tH,EACF,OAAOJ,GAAUn1E,UACd3iB,QAAO,EAAGyR,eAAeZ,EAAAA,EAAAA,IAAeY,EAAUymF,KAClDniH,KAAI,EAAG7H,YAAaA,IAGzB,MAAMwqH,EAAgBp3E,OAAO6K,KAAKmqE,GAAe,CAAC,GAElD,OAAO/vF,EAAAA,GAAAA,IAAOuxF,GAAUn1E,UAAU5sC,KAAI,EAAG7H,YAAaA,IAAQoiF,OAAOooC,GAAiB,KAAO,MAC5F,CAACR,EAAWJ,EAAUxB,KAElB7rE,EAAaC,IAAWC,EAAAA,GAAAA,GAC7BnE,EAAgB9G,EAASo4E,QAAoC7yH,IAAxB6yH,EAASlzE,YAOhD,OAJA/3C,EAAAA,EAAAA,KAAU,KACR69C,IAAU,CAAE77B,UAAW6xC,EAAAA,GAAkBC,cACxC,CAACjW,KAGFvoD,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJzB,OAAQA,IAAWiwF,EACnB/vF,QAASovB,EACTl7B,UAAU,0BACVoN,MAAOsmC,EAAQ,aACf3nC,oBAAqBmqH,EAAwBj2H,SAAA,CAE5C81H,IACCj2H,EAAAA,GAAAA,IAAA,OAAKE,UAAU,YAAYsW,IAAKo9B,EAAQ5hB,MAAQ,WAAQlvB,EAAU3C,SAAA,EAChEH,EAAAA,GAAAA,IAAC+N,EAAAA,EAAM,CACL7N,WAAWoW,EAAAA,GAAAA,IAAgBy/G,GAAa,UACxCz1H,KAAK,OACLwf,QAAM,EAEN5R,QAASA,IAAM8nH,OAAalzH,GAAW3C,SAAA,EAEvCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,UACVxC,QAAQyqH,GAAUpiG,SAAUwpC,EAAAA,GAAAA,IAAqB7vD,EAAMyoH,EAASpiG,UAElE8iG,EAAaziH,KAAK07B,IACjB,MAAM/b,EAAQitB,GAAW01E,QACtBvkF,MAAMnD,IAAmBE,EAAAA,EAAAA,IAAeF,EAAec,SAAUA,MAAY/b,MAChF,OACEvzB,EAAAA,GAAAA,IAAC+N,EAAAA,EAAM,CAEL7N,WAAWoW,EAAAA,GAAAA,IAAeo4B,EAAAA,EAAAA,IAAeqnF,EAAWzmF,IAAa,UACjEhvC,KAAK,OACLwf,QAAM,EAEN5R,QAASA,IAAM8nH,EAAa1mF,GAAUnvC,SAAA,EAEtCC,EAAAA,GAAAA,GAAC2hD,GAAAA,EAAmB,CAClBzS,SAAUA,EACVpvC,UAAU,wBACVqgD,mBAAoBA,IAErBr1C,QAAQqoB,KAAUwpC,EAAAA,GAAAA,IAAqB7vD,EAAMqmB,MAZzCqc,EAAAA,EAAAA,IAAeN,WAmB9BlvC,EAAAA,GAAAA,GAAA,OAAKoW,IAAKo9B,EAAQ5hB,MAAQ,WAAQlvB,EAAW5C,UAAU,uBAAsBC,SAC1EmoD,GAAa1mD,QACZxB,EAAAA,GAAAA,GAACklD,GAAAA,EAAc,CACbplD,UAAU,6BACVqlD,MAAO+C,EACP9C,WAAY+C,EAAQpoD,SAEnBmoD,GAAakuE,SACXzqH,IACC,MAAMmoB,EAAOqR,EAAUx5B,IAAWu9C,EAAUv9C,GAEtC0qH,EAAgBd,GAAUn1E,UAAU3iB,QAAQ64F,GAAYA,EAAQ3qH,SAAWA,IAC3Ew5C,EAA2B,GAC3BoxE,EAAaxC,IAAcpoH,GAiDjC,OA/CA0qH,GAAe7+G,SAAS2hE,IAClBw8C,KAAcrnF,EAAAA,EAAAA,IAAe6qC,EAAEjqC,SAAUymF,IAE7CxwE,EAAMpyC,MACJnT,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CAEPxiC,UAAU,yCAEVgO,QAASA,IAAMwW,EAAY3Y,GAAQ5L,SAAA,EAEnCC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CAACC,KAAMA,EAAM5zB,KAAK,YACzBN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,OAAMC,SAAA,EACnBC,EAAAA,GAAAA,GAACgrD,GAAAA,EAAa,CAACl3B,KAAMA,EAAM07E,iBAAe,KAC1C5vG,EAAAA,GAAAA,IAAA,QAAME,UAAU,SAASsW,IAAI,OAAMrW,SAAA,EACjCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,gBAAgBxN,UAAU,iBACpCyhD,EAAAA,GAAAA,GAAiB/N,EAAuB,IAAd2lC,EAAEq9C,iBAGhCr9C,EAAEjqC,WACDlvC,EAAAA,GAAAA,GAAC2hD,GAAAA,EAAmB,CAClB7hD,UAAU,sBACVovC,SAAUiqC,EAAEjqC,SACZiR,mBAAoBA,MAjBnB,GAAGx0C,MAAU6jC,EAAAA,EAAAA,IAAe2pC,EAAEjqC,iBAwBpCymF,GAAcU,GAAe70H,QAChC2jD,EAAMpyC,MACJ/S,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAEPxiC,UAAU,6CAEVgO,QAASA,IAAMwW,EAAY3Y,GAAQ5L,UAEnCC,EAAAA,GAAAA,GAACiiD,GAAAA,EAAe,CACdtkB,OAAQhyB,EACRw2C,kBAAgB,EAChBs0E,WAAW,SACXp1E,OAAQk1E,GAAah1E,EAAAA,GAAAA,GAAiB/N,EAAsB,IAAb+iF,QAAqB7zH,EACpEy+C,WAAW,kBAVR,GAAGx1C,cAePw5C,QAIXnlD,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,OAEd1rD,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,wBACV+N,QAAM,EACNC,QAASktB,EAAYj7B,SAEpByzC,EAAQ,kBC/IjB,IAAe70C,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUq1H,6BACT,MAAMC,OAA2Dj0H,IAA1Cg0H,EAAuBC,iBACzCC,EAAAA,EAAAA,KAA0Bv1H,EAAQq1H,EAAuBC,gBAC9D,MAAO,CACLE,kBAAmBF,EAAiBA,EAAe92H,QAAK6C,KAL1CgM,EAlFyCooH,EAC3DD,oBACAH,6BAEA,MAAM,2BAAEK,IAA+BhrH,EAAAA,EAAAA,OAEhCirH,EAAUC,IAAeh4H,EAAAA,EAAAA,IAAQ,IACjCua,EAAW09G,IAAgBj4H,EAAAA,EAAAA,IAAQ,GACpCiL,GAAad,EAAAA,EAAAA,MAEb+tH,GAAO7qH,EAAAA,EAAAA,IAAgB,KAC3B2qH,IACI/sH,EAAWX,SACbc,aAAaH,EAAWX,SAE1BqB,YAAW,KACTmsH,EAA2B,CAAEl3H,GAAI62H,EAAuB72H,OApB9B,QAwBxBu3H,GAAwB9qH,EAAAA,EAAAA,IAAiBM,IACvCA,EAAEC,QAAwB8f,QAAQ,mBACtCwqG,QAIJ7sH,EAAAA,EAAAA,KAAU,KACR1I,SAASkU,iBAAiB,aAAcshH,GACxCx1H,SAASkU,iBAAiB,YAAashH,GACvCx1H,SAASkU,iBAAiB,YAAashH,GACvCx1H,SAASkU,iBAAiB,QAASshH,GAE5B,KACLx1H,SAASmU,oBAAoB,aAAcqhH,GAC3Cx1H,SAASmU,oBAAoB,YAAaqhH,GAC1Cx1H,SAASmU,oBAAoB,YAAaqhH,GAC1Cx1H,SAASmU,oBAAoB,QAASqhH,MAEvC,CAACA,KAEJx7G,EAAAA,EAAAA,KAAgB,KACd,MAAMy7G,GAAoBv/F,EAAAA,EAAAA,MAE1B5tB,EAAWX,QAAUqB,YAAW,KAC9BusH,IACAE,MAhDmB,OAkDpB,CAACF,IAEJ,MAAMG,EAAaT,GAAqB,UAAUA,IAC5CU,GAAenvH,EAAAA,EAAAA,GAASkvH,GAAaT,GAE3C,IAAKH,EAAuBc,UAC1B,OAGF,MAAM9tG,GAASgtG,EAAuBc,WAAa,GA1DjC,IA4DlB,OACEx3H,EAAAA,GAAAA,GAAA,OACEF,WAAWoW,EAAAA,GAAAA,GACT,4BACA8gH,GAAY,SACZx9G,GAAa,UACbk9G,EAAuBe,YAAc,YAEvC5xH,MAAO,YAAY6jB,iBAAqBgtG,EAAuBn6G,mBAAmBm6G,EAAuB7zG,OAAO9iB,UAEhHC,EAAAA,GAAAA,GAACC,GAAAA,EAAe,CAEdC,KAxEY,IAyEZE,OAAQm3H,EACRt4C,MAAI,EACJy4C,QAAShhH,EAAAA,GAAa,QAAMhU,EAC5By9F,aAAW,EACX3/F,QAAM,EACNC,OAAQy2H,GAPH,UAAUL,WC4CvB,IAAel4H,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM,OAAEkL,EAAM,UAAEiM,IAAc1J,EAAAA,EAAAA,KAAezN,GAAQs2H,mBAAqB,CAAC,EAErEC,GAAsBC,EAAAA,EAAAA,KAAmBx2H,GAO/C,MAAO,CACLkL,SACAiM,YACAs/G,0BATgCvrH,EAC9BiM,GACEu/G,EAAAA,EAAAA,KAA0C12H,EAAQkL,EAAQiM,IAC1Dw/G,EAAAA,EAAAA,KAAuC32H,EAAQkL,QACjD7J,EAMFk1H,yBAfclpH,EAzGiCupH,EACnDvsH,SACAa,SACAiM,YACAs/G,4BACAF,0BAEA,MAAM,0BACJM,EAAyB,uBACzBC,EAAsB,iBACtBC,EAAgB,uBAChBC,IACEtsH,EAAAA,EAAAA,OAEG+4C,EAAQ2H,IAAavgD,EAAAA,EAAAA,IAAS,IAC/BY,GAAOC,EAAAA,EAAAA,KAEPurH,GAAehsH,EAAAA,EAAAA,IAAiBisH,IAC/BhsH,IAEDiM,EACF0/G,EAA0B,CAAE3rH,SAAQ1M,GAAI2Y,EAAWggH,eAAgBD,KAEnEH,EAAiB,CAAEK,oBAAqBF,IACxCF,EAAuB,CAAE9rH,SAAQisH,eAAgBD,KAGnDJ,QAGIO,GAAepsH,EAAAA,EAAAA,IAAiBM,IACpC6/C,EAAU7/C,EAAEC,OAAOH,UAGfisH,GAAqB7wH,EAAAA,EAAAA,KAAQ,IAAM8wH,EAAAA,IAAgCplH,KAAK+kH,IAOrE,CACLA,WACAM,eARsB,IAAIC,KAAKC,aAAa,CAACnB,GAAsB,CAAE12H,KAAM,aACtC83H,GAAGT,GAQxCU,aANoB,IAAIH,KAAKC,aAAa,CAACR,GAAW,CAAEr3H,KAAM,aAC7B83H,GAAGT,QAOpC,CAACX,KAELttH,EAAAA,EAAAA,KAAU,KACHoB,GAAQ+gD,EAAU,MACtB,CAAC/gD,IAEJ,MAAMwtH,GAA6BpxH,EAAAA,EAAAA,KAAQ,IACpCg9C,EAAO0kB,OAILmvD,EAAmBl7F,QAAO,EAAG86F,WAAUM,iBAAgBI,kBAC5DJ,EAAetvE,cAAc15B,SAASi1B,EAAOyE,gBAC1C0vE,EAAa1vE,cAAc15B,SAASi1B,EAAOyE,gBAC3CgvE,EAAShvE,cAAc15B,SAASi1B,EAAOyE,iBANnCovE,GAQR,CAACA,EAAoB7zE,IAExB,OACEllD,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJrN,UC5GiB,WD6GjBuiC,QAAM,EACN32B,OAAQA,EACRukE,gBAAc,EACd/iE,MAAOJ,EAAK,YACZlB,QAASusH,EAAuBp4H,SAAA,EAEhCC,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CAERhB,MAAOo4C,EACPt3C,SAAUkrH,EACVntE,YAAaz+C,EAAK,UAClBu8B,2BAAyB,GAJrB,WAMNrpC,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GC1H8G,WD0H7E,iBAAiBnW,SAC/Dm5H,EAA2B1lH,KAAI,EAAG+kH,WAAUU,eAAcJ,qBACzDj5H,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CAEPxiC,WAAWoW,EAAAA,GAAAA,GC9H6C,WD8Hb,WAC3C8nG,cAAe8Z,IAA8BS,EAAW,aAAU71H,EAClEwd,SAAU43G,IAA8BS,EACxCh2F,WAAS,EACTw7E,QAAM,EAENjwG,QAASA,IAAMwqH,EAAaC,GAAUx4H,SAAA,EAEtCC,EAAAA,GAAAA,GAAA,QAAMF,WAAWoW,EAAAA,GAAAA,GAAe,QCtI2C,YDsIpBnW,UACpDg0B,EAAAA,GAAAA,GAAWklG,EAAc,CAAC,aAAc,CAAEE,UAAWr0E,OAExD9kD,EAAAA,GAAAA,GAAA,QAAMF,WAAWoW,EAAAA,GAAAA,GAAe,WCzIiE,YDyIpCnW,UAC1Dg0B,EAAAA,GAAAA,GAAW8kG,EAAgB,CAAC,aAAc,CAAEM,UAAWr0E,QAbrDyzE,c,4BE7HjB,UAAgB,QAAU,WAAW,YAAc,WAAW,KAAO,WAAW,MAAQ,WAAW,YAAc,YCkJjH,IAAe55H,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM,YAAEi3D,GAAgBj3D,EAExB,MAAO,CACLg3D,cAAeC,EAAYC,cALb7pD,EA5GoC0qH,EACtDlxF,QACAmwB,oBAEA,MAAM,0BACJghE,EAAyB,SACzB7uF,EAAQ,QACRvU,EAAO,iBACPyL,IACE31B,EAAAA,EAAAA,MACEe,GAAOC,EAAAA,EAAAA,KAEPusH,EAA6B,aAAhBpxF,GAAOhnC,KAEpB85B,GAAc1uB,EAAAA,EAAAA,IAAgB,KAClC+sH,OAGI3gF,GAAiBpsC,EAAAA,EAAAA,IAAgB,KACrCk+B,EAAS,CAAE3qC,GAAIqoC,EAAOv8B,SACtBqvB,OAGIu+F,GAAgBjtH,EAAAA,EAAAA,IAAgB,KACpC2pB,EAAQ,CACN3e,IAAK4wB,EAAO5wB,IACZkiH,iBAAiB,IAEnBx+F,OAGI63F,GAAavmH,EAAAA,EAAAA,IAAgB,KACjC,MAAMuI,EAAOykH,GAAaG,EAAAA,GAAAA,GAAevxF,EAAMwxF,cAC3C7/D,EAAAA,GAAAA,IAA0BxB,EAAenwB,EAAOwxF,cACpDC,EAAAA,GAAAA,IAAoB9kH,GACpB6sB,EAAiB,CACf9gC,QAASkM,EAAKwsH,EAAa,iBAAmB,iBAEhDt+F,OAGI9tB,GAAQpF,EAAAA,EAAAA,KAAQ,KACpB,IAAKogC,EAAO,OACZ,MAAM1iB,EAAM8zG,EAAa,wBAA0B,qBAC7CM,EAAuBN,GACzBG,EAAAA,GAAAA,GAAevxF,EAAMwxF,cACrB7/D,EAAAA,GAAAA,IAA0BxB,EAAenwB,EAAMwxF,aACnD,OAAO5sH,EAAK0Y,EAAKo0G,KAChB,CAAC1xF,EAAOoxF,EAAYjhE,EAAevrD,IAEhCX,GAAcrE,EAAAA,EAAAA,KAAQ,KAC1B,IAAKogC,EAAO,OACZ,MAAM1iB,EAAM8zG,EAAa,0BAA4B,uBAC/CtmG,GAAOuuB,EAAAA,GAAAA,GAAiBz0C,EAA2B,IAArBo7B,EAAM2xF,cACpCz0C,GAAWkC,EAAAA,GAAAA,IAAuBp/C,EAAM+R,OAAQ/R,EAAMk9C,SAAUt4E,EAAKkqD,MACrE8iE,GAAiBxyC,EAAAA,GAAAA,IAAuBp/C,EAAM6xF,aAAc7xF,EAAM4xF,eAAgBhtH,EAAKkqD,MAE7F,OAAOlqD,EAAK0Y,EAAK,CAACwN,EADL,GAAG8mG,MAAmB10C,SAElC,CAACl9C,EAAOoxF,EAAYxsH,IAEvB,OACElN,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJzB,OAAQZ,QAAQo9B,GAChB7F,QAAM,EACND,iBAAkB7kB,GAAOzK,QACzBlH,QAASytH,EAA0Bt5H,SAAA,EAEnCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLzE,MAAM,cACN1N,KAAK,UACLJ,UAAWyd,GAAO8qB,YAClB/1B,UAAWxF,EAAK,SAChBgB,QAASktB,EAAYj7B,UAErBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAEbtN,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOvK,KAAKjT,UAC1BC,EAAAA,GAAAA,GAACqkG,GAAAA,EAAuB,CACtBjkG,OAAQk5H,EAAaj5H,GAAAA,EAAe25H,QAAU35H,GAAAA,EAAe45H,SAC7D/5H,KAlFY,QAqFhBF,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAOrQ,MAAMnN,SACzBmN,IAAS6mB,EAAAA,GAAAA,GAAW7mB,EAAO,CAAC,uBAE/BlN,EAAAA,GAAAA,GAACsvG,GAAAA,EAAQ,CACPxvG,UAAWyd,GAAO28G,KAClBvuH,OAAQu8B,GAAOv8B,OACfk5B,eAAa,EACbm8D,SAAU94D,GAAOv8B,OACjBmC,QAAS4qC,KAEX14C,EAAAA,GAAAA,GAAA,KAAGF,UAAWyd,GAAOpR,YAAYpM,SAC9BoM,IAAe4nB,EAAAA,GAAAA,GAAW5nB,EAAa,CAAC,uBAE3CvM,EAAAA,GAAAA,IAAA,OAAKE,UAAU,yCAAwCC,SAAA,EACrDC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC7N,UAAU,wBAAwBgO,QAASyrH,EAAcx5H,SAC9D+M,EAAK,2BAER9M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACE,QAAM,EAAC/N,UAAU,wBAAwBgO,QAAS+kH,EAAW9yH,SAClE+M,EAAKwsH,EAAa,uBAAyB,iC,wCCrH/C,SAASa,GAAsBj5H,GACpC,MAAO,CAACG,EAAqB+4H,KAC3B,MAAMvrH,GAAWC,EAAAA,EAAAA,KAAezN,IACxBqlC,KAAMwiB,GAAc7nD,EAAO8nD,OAC3BziB,KAAMvB,GAAc9jC,EAAOolC,OAC7B,eACJ+2B,EAAc,cAAE/nC,EAAa,OAAElpB,GAC7BsC,EAASyuD,cAEP,mBAAE6zD,IAAuB3gD,EAAAA,GAAAA,GAAqBnvE,GAK9Cg5H,EAAuB,UAATn5H,EAAmBA,EAAQk5H,GAAOE,QAAU,QAAU,SAElEC,SAAUC,GAA2Bn5H,EAAOo5H,SAC9CnlG,EAAWG,IAAgB4kG,IAAc/kG,SAEzC9lB,EAAkBX,EAASW,gBAEjC,MAAO,CACL8sD,OAAOuD,EAAAA,EAAAA,KAAYx+D,GACnBqzB,eAAwBhyB,IAAb4yB,KACLkoC,GAAiB1yD,QAAQ0yD,EAAerU,OAASqU,EAAei9D,UACtEvxE,YACA/jB,YACAq1F,yBACAllG,WACAolG,aAAcnuH,EACdiD,kBACAE,gBAAiBnD,GAAS6jC,EAAAA,EAAAA,KAAW/uC,EAAQkL,IAAS+C,iBAAc5M,EACpEyuH,sBAGN,C,wCC1BA,MAAM/zD,IAAevnD,EAAAA,GAAAA,KAAUwnD,GAAOA,KAAM,KAAK,GA2HjD,IAAe1+D,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,IAClByrH,GAAsB,SADJzrH,EAzH4BisH,EAC9Cr+D,QACAg+D,UACA12F,cACAlP,YACAw0B,YACA/jB,YACAq1F,yBACAllG,WACA9lB,sBAEA,MAAM,qBACJorH,EAAoB,aACpBtoG,EAAY,gBACZuoG,IACE9uH,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,KACPstH,EAAcC,EAAU,QAAU,QAClCr2E,GAAiBtkD,EAAAA,EAAAA,KAAY,EAAG2sB,gBAChCA,IAAc6xC,EAAAA,GAAkBC,WAClChB,IAAa,KACXw9D,EAAqB,CACnB15H,KAAMm5H,SAKX,CAACA,EAAaO,EAAsBh3F,IAEjCk3F,GAAgBhzH,EAAAA,EAAAA,KAAQ,IACvBwtB,GAAaklG,EAIXllG,EAAS9hB,KAAK3T,IACnB,MAAO0M,EAAQiM,IAAauiH,EAAAA,GAAAA,GAAqBl7H,GAEjD,OAAO26H,EAAuBjuH,IAASm6B,KAAKluB,MAC3CilB,OAAO3yB,SAPDw5B,GAAAA,GAQR,CAACk2F,EAAwBllG,IAEtB0lG,GAAqBr7H,EAAAA,EAAAA,KAAaiB,IACtC0xB,EAAa,CAAE/lB,OAAQ3L,EAAQ2L,OAAQiM,UAAW5X,EAAQf,OACzD,CAACyyB,IAEE2oG,GAAkBt7H,EAAAA,EAAAA,KAAY,CAAC6Y,EAAmBjM,KACtDsuH,EAAgB,CAAEtuH,SAAQiM,gBACzB,CAACqiH,IA4CEK,GAAoBnuB,EAAAA,GAAAA,GAAkB,CAACnpE,GAAcw4D,EAAAA,OAA+B1nE,EAE1F,OACE10B,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CACT2L,eAAe,sBACfp7B,KAAK,OACL0vB,UAAWk+F,EAAoB,EAAI,EACnC5tB,eAAa,EAAAvtG,UAEbH,EAAAA,GAAAA,IAACslD,GAAAA,EAAc,CACbplD,UAAU,8CACVqlD,MAAO+1E,EAAoBJ,OAAgBp4H,EAC3C0iD,WAAYnB,EACZqa,YAAU,EAAAv+D,SAAA,EAERm7H,IAAqBl7H,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,IAC9BwvE,KAAuB5lG,GAAgC,IAApBA,EAAS9zB,UAC3CxB,EAAAA,GAAAA,GAACm7H,GAAAA,EAAY,CACXC,aAAW,EACXvmH,KAAM/H,EAAK,6BACXX,YAAaW,EAAK,0CAGrBouH,GAAqB5lG,GAAYA,EAAS9zB,OAAS,GAhEjDs5H,EAActnH,KAAI,CAAC5S,EAAS0D,KACjC,MAAMjD,GAASwtC,EAAAA,EAAAA,MAETwsF,EADoB,IAAV/2H,IAEXg3H,EAAAA,GAAAA,IAAY16H,EAAQoyB,SAAUsoG,EAAAA,GAAAA,IAAYR,EAAcx2H,EAAQ,GAAG0uB,MAElE7xB,GAAQo6H,EAAAA,GAAAA,IAA+Bl6H,EAAQT,GACrD,OACEhB,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,CACGs7H,IACCr7H,EAAAA,GAAAA,GAAA,KACEF,UAAU,kBAEVsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,UAEnCy7H,EAAAA,GAAAA,IAAmB1uH,EAAM,IAAImf,KAAoB,IAAfrrB,EAAQoyB,QAHtCpyB,EAAQoyB,OAMjBhzB,EAAAA,GAAAA,GAAA,OACEF,UAAU,sBAAqBC,UAG/BC,EAAAA,GAAAA,GAACy7H,GAAAA,GAAK,CAEJn/D,MAAOA,EACP17D,QAASA,EACTqC,OAAQy4H,EAAAA,GAAYC,OACpBhoG,aAAaioG,EAAAA,GAAAA,GAAc9uH,EAAMlM,EAASsoD,EAAW/jB,GACrDnS,KAAMpyB,EAAQoyB,KACdlzB,UAAU,cACVwmB,OAAQ20G,EACRY,YAAab,EACbl6F,aAAcooB,EAAUtoD,EAAQ2L,SAAS+C,cAAgB1O,EAAQ0O,YACjEkC,eAAeC,EAAAA,EAAAA,IAAiBjC,EAAiBrO,IAV5CP,EAAQf,KAHVe,EAAQf,mB,4BCvGzB,MAuBA,GAtBE8jC,IAEA,MAAMm4F,GAAY1yH,EAAAA,EAAAA,MAEZmc,GAAgB5lB,EAAAA,EAAAA,KAAaiN,IACnB,UAAVA,EAAE4Y,KACYs2G,EAAUvyH,UAAY3H,SAASm6H,eAG/Cp4F,MAED,CAACA,IAQJ,OANAr5B,EAAAA,EAAAA,KAAU,KACRK,OAAOmL,iBAAiB,UAAWyP,GAAe,GAE3C,IAAM5a,OAAOoL,oBAAoB,UAAWwP,GAAe,KACjE,CAACA,IAEGu2G,G,4BCqBT,MA+GA,IAAen9H,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAM0C,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQkL,GAKhC,MAAO,CACL0C,OACAihC,MANWC,EAAAA,EAAAA,KAAW9uC,EAAQkL,GAO9B26B,UANe80F,EAAAA,EAAAA,KAAmB36H,EAAQkL,GAO1C4R,QANclP,IAAQgtH,EAAAA,GAAAA,IAAehtH,GAAMitH,EAAAA,EAAAA,KAAqB76H,IAAS86H,EAAAA,EAAAA,KAAsB96H,EAAQ4N,EAAKpP,KAO5Gu8H,gBAAiBtxH,QAAQzJ,EAAOg7H,YAAYnqF,YAAY1wC,WAZ1CkN,EA/GoC4tH,EACtD/vH,SACAgwH,eACAttH,OACAihC,OACAhJ,WACA/oB,UACAi+G,kBACAI,oBACA1uH,cAEA,MAAM,mBAAEuuD,IAAuBtwD,EAAAA,EAAAA,MACzBynC,GAAUzmC,EAAAA,EAAAA,MAET0vH,EAAiBC,EAAeC,IAAkB19H,EAAAA,EAAAA,MAClD29H,EAAuBC,EAAqBC,IAAwB79H,EAAAA,EAAAA,MACpE89H,EAA6BC,EAA2BC,IAA+Bh+H,EAAAA,EAAAA,MACvFi+H,EAAuBC,EAAqBC,IAAyBn+H,EAAAA,EAAAA,KAEtEo+H,GAAyB19H,EAAAA,EAAAA,KAAY,KACzCq9H,IACAH,MACC,CAACG,EAA2BH,IAEzBS,GAAa39H,EAAAA,EAAAA,KAAY,KAC7Bw9H,IACAT,MACC,CAACS,EAAqBT,IAEnB97E,GAAiB28E,EAAAA,GAAAA,GAAsB,CAC3CtuH,OACAihC,OACAhJ,WACA/oB,UACAi+G,kBACAkB,aACAD,2BACC,GAEG/4G,GAAchY,EAAAA,EAAAA,IAAgB,KAClCwB,EAAQvB,MAGJixH,GAAgBlxH,EAAAA,EAAAA,IAAiBM,IACrCA,EAAEuJ,kBAEF,MAAMmmD,GAAQC,EAAAA,GAAAA,KACdF,EAAmB,CACjB3J,MAAOnmD,EACPZ,OAAQY,EACR+vD,aAIEw/D,EAAY2B,GAAmBn5G,GAErC,OACE1kB,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPxiC,UAAU,oCACVgO,QAASwW,EACTs8B,eAAgBA,EAChBk7E,UAAWA,EAAU/7H,SAAA,EAEpB0O,EAAAA,EAAAA,IAASlC,IACRvM,EAAAA,GAAAA,GAACiiD,GAAAA,EAAe,CACdtkB,OAAQpxB,EACRgwH,aAAcA,EACdphF,WAAS,EACTs7E,WAAW,SACXiH,kBAAmB7/F,EAAAA,GAAkB/4B,gBAGvC9E,EAAAA,GAAAA,GAACoiD,GAAAA,EAAa,CACZ71C,OAAQA,EACRgwH,aAAcA,EACd9F,WAAW,SACXt7E,WAAS,EACTuiF,kBAAmB7/F,EAAAA,GAAkB/4B,eAGxC03H,GAAqBtsF,GAAMytF,iBAC1B39H,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,oBACVipG,MAAI,EACJ3kD,OAAK,EACLlkD,KAAK,OACL4N,QAAS0vH,EAAcz9H,SAEtByzC,EAAQ,aAGZ0pF,IACCl9H,EAAAA,GAAAA,GAAC49H,GAAAA,EAAa,CACZlyH,OAAQ+wH,EACR7wH,QAAS+wH,EACT9wH,oBAAqBuxH,EACrB7wH,OAAQA,IAGXwwH,IACC/8H,EAAAA,GAAAA,GAAC69H,GAAAA,EAAe,CACdnyH,OAAQkxH,EACRhxH,QAASkxH,EACTjxH,oBAAqBoxH,EACrB1wH,OAAQA,WC/GZ6wD,IAAevnD,EAAAA,GAAAA,KAAUwnD,GAAOA,KAAM,KAAK,GA+GjD,IAAe1+D,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAsBrN,IACxC,MAAMi8D,GAAexuD,EAAAA,EAAAA,KAAezN,GAAQi8D,aACtChoC,EAAWgoC,EAAaC,gBAAgBpgB,QAE9C,MAAO,CACLzoB,WAAYY,GAAYgoC,EAAaE,gBAAgBC,QACrDnoC,WACAooC,aAAcr8D,EAAOs8D,WAAW53B,WAPhBr3B,EA7G6BovH,EAC/Cl6F,cACAlP,YACAY,WACAooC,mBAEA,MAAM,qBACJK,EAAoB,iBACpB0D,IACE11D,EAAAA,EAAAA,MAEEsd,GAAejgB,EAAAA,EAAAA,MAEf0D,GAAOC,EAAAA,EAAAA,MAEN8wD,EAAoBC,IAAyB5xD,EAAAA,EAAAA,KAAkB,GAEhEgyD,GAAmBp2D,EAAAA,EAAAA,KAAQ,KAC/B,IAAKwtB,EAAU,MAAO,GACtB,MAAMyoG,EAAY,IAAIvwC,IAAI9vB,GACpBsgE,EAAgB1oG,EAASmI,QAAQ59B,IAAQk+H,EAAUjwC,IAAIjuF,KAE7D,OAAOokC,EAAAA,GAAAA,IAAmB,CAAEC,IAAK85F,EAAe75F,MAAOP,EAAa1iC,KAAM,WACzE,CAACo0B,EAAUooC,EAAc95B,IAEtBq6F,GAAkB3xH,EAAAA,EAAAA,IAAiBzM,IACvC4hE,EAAiB,CAAE5hE,KAAIq+H,sBAAsB,OAGzCj6E,GAAiBtkD,EAAAA,EAAAA,KAAY,EAAG2sB,gBAChCA,IAAc6xC,EAAAA,GAAkBC,WAClChB,IAAa,KACXW,SAGH,IAEGC,GAA2B1xD,EAAAA,EAAAA,IAAgB,KAC/CwxD,GAAuBG,IAAUA,OAG7Bi9D,GAAoBnuB,EAAAA,GAAAA,GAAkB,CAACnpE,GAAcw4D,EAAAA,OAA+B1nE,EAE1F,OACE10B,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CACT/oB,IAAKqV,EACLqf,eAAe,sBACfp7B,KAAK,OACL0vB,UAAWk+F,EAAoB,EAAI,EACnC5tB,eAAa,EAAAvtG,UAEbH,EAAAA,GAAAA,IAACslD,GAAAA,EAAc,CACbplD,UAAU,+BACVqlD,MAAO+1E,EAAoBh9D,OAAmBx7D,EAC9C0iD,WAAYnB,EACZqa,YAAU,EAAAv+D,SAAA,EAERm7H,IAAqBl7H,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,IAC9BwvE,IAAsBh9D,GAAkB18D,SACvCxB,EAAAA,GAAAA,GAACm7H,GAAAA,EAAY,CACXC,aAAW,EACXvmH,KAAM/H,EAAK,6BACXX,YAAaW,EAAK,0CAGrBouH,IAAsBt3F,GAAe94B,QAAQ4yD,GAAcl8D,UAC1D5B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,MAAIE,UAAU,kBAAiBC,SAAA,CAC5B29D,EAAal8D,OAvEG,IAwEfxB,EAAAA,GAAAA,GAACu6F,GAAAA,EAAI,CAACz6F,UAAU,OAAOgO,QAASkwD,EAAyBj+D,SACtD+M,EAAK+wD,EAAqB,2BAA6B,8BAG3D/wD,EAAK,qBAEP4wD,EAAalqD,KAAI,CAAC3T,EAAIyE,KACrB,GAAKu5D,KAAsBv5D,GA/EV,GAmFjB,OACEtE,EAAAA,GAAAA,GAACs8H,GAAoB,CACnB/vH,OAAQ1M,EACRiO,QAASmwH,EACTzB,mBAAiB,UAM1BtB,GAAqBpwH,QAAQozD,GAAkB18D,UAC9C5B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,kBAAiBC,SAAE+M,EAAK,uBACrCoxD,EAAiB1qD,KAAK3T,IAEnBG,EAAAA,GAAAA,GAACs8H,GAAoB,CACnB/vH,OAAQ1M,EACRiO,QAASmwH,EACTzB,mBAAiB,kB,2BCrBnC,SAAS2B,GACPrxH,EAAiBlM,EAAqBmI,EAAkB66B,EAAsBw6F,GAE9E,IAAKr1H,EACH,OAAOs1H,EAAAA,EAAAA,GAAqBvxH,EAAMlM,OAAS8B,EAAWkhC,GAGxD,MAAM06F,GAAYC,EAAAA,EAAAA,IAAoB39H,GAEtC,OACEhB,EAAAA,GAAAA,IAAA,QAAME,UAAU,gBAAeC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,OACE2D,IAAKoF,EACLuf,IAAI,GACJxoB,WACEoW,EAAAA,GAAAA,GAAe,uBAAwBkoH,GAAgB,QAASE,GAAa,yBAE/E96H,WAAW,KAEZg7H,EAAAA,EAAAA,IAAgB59H,KAAYZ,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,UACvC+wH,EAAAA,EAAAA,GAAqBvxH,EAAMlM,GAAS,EAAMgjC,KAGjD,CAEA,UAAejlC,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAM0C,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQkL,GAChC,IAAK0C,EACH,MAAO,CAAC,EAGV,MAAMwvH,GAAoBxS,EAAAA,EAAAA,IAAqBh9G,GACzCyvH,EAAkBD,GAAoBtuF,EAAAA,EAAAA,KAAW9uC,EAAQo9H,QAAqB/7H,EAEpF,MAAO,CACLuM,UACIwvH,GAAqB,CAAEC,sBAZbhwH,EA1F2BiwH,EAC7C/9H,UACAgjC,cACAr3B,SACA0C,OACAyvH,sBAEA,MAAM,aAAEpsG,IAAiBvmB,EAAAA,EAAAA,OAEnB,SAAE3M,IAAaC,EAAAA,EAAAA,MACf4J,GAAe21H,EAAAA,GAAAA,GAAah+H,GAC5Bi+H,GAAkBC,EAAAA,EAAAA,IAAkBl+H,QAA0B8B,EAAfuG,EAC/C22F,GAAYm/B,EAAAA,GAAAA,GAAoBn+H,EAAS,SACzCo+H,GAAe52H,EAAAA,EAAAA,GAASw3F,GACxBw+B,EAAetzH,SAAQm0H,EAAAA,EAAAA,IAAqBr+H,IAE5C0jB,GAAchY,EAAAA,EAAAA,IAAgB,KAClCgmB,EAAa,CAAE/lB,SAAQiM,UAAW5X,EAAQf,GAAIq+H,sBAAsB,OAGhEpxH,GAAOC,EAAAA,EAAAA,KAEP+uH,EAAY2B,GAAmBn5G,GAErC,IAAKrV,EACH,OAGF,MAAM6kB,EAAO4qG,GAAmBzvH,EAEhC,OACErP,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPxiC,UAAU,kCACV4f,QAAStgB,EACT0O,QAASwW,EACTw3G,UAAWA,EAAU/7H,SAAA,EAErBC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CACLC,KAAMA,EACNo3B,gBAAiBwzE,GAAiBp0E,UAEpC1qD,EAAAA,GAAAA,IAAA,OAAKE,UAAU,OAAMC,SAAA,EACnBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,WAAUC,SAAA,EACvBC,EAAAA,GAAAA,GAACgrD,GAAAA,EAAa,CACZl3B,KAAMA,EACN07E,iBAAe,EACftkD,gBAAiB3+C,IAAWmyH,GAAiB7+H,IAAM6+H,GAAiBp0E,UAEtEtqD,EAAAA,GAAAA,GAAA,OAAKF,UAAU,eAAcC,UAC3BC,EAAAA,GAAAA,GAACu6F,GAAAA,EAAI,CAACz6F,UAAU,OAAMC,UACnBm/H,EAAAA,GAAAA,IAAoBpyH,EAAqB,IAAflM,EAAQoyB,cAKzChzB,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,UAAUsW,IAAI,OAAMrW,SAChCo+H,GAAcrxH,EAAMlM,EAASo+H,GAAgBH,EAAgBj7F,EAAaw6F,iBC/CvF,IAAez/H,EAAAA,EAAAA,KA5CmBwgI,EAChCC,aAAYz7F,eAEZ,MAAM07F,GAAcv3H,EAAAA,EAAAA,KAAQ,IAmB9B,SAAgCs3H,GAE9B,GADgBA,EAAW9kC,MAAM,0BACpB,CACX,MAAMtnE,EAAO,IAAI/G,KAAKmzG,GACtB,MAAO,CAAC,CAAEpsG,OAAMne,MAAMkiD,EAAAA,GAAAA,GAAmB/jC,IAC3C,CAEA,MAAMssG,EAAa,GACbC,EAAc,IAAItzG,KAClB2pC,EAAc2pE,EAAYnqE,cAC1BoqE,EAAaD,EAAYzpE,UAAa,IAAI7pC,KAAK,GAAG2pC,KAAewpE,KAAetpE,UAClFF,EACAA,EAAc,EAElB,IAAK,IAAInQ,EAAI,EAAGA,EA3CO,EA2CeA,IAAK,CACzC,MAAMzyB,EAAO,IAAI/G,KAAK,GAAGuzG,EAAa/5E,KAAK25E,KAC3CE,EAAWvsH,KAAK,CAAEigB,OAAMne,MAAMkiD,EAAAA,GAAAA,GAAmB/jC,IACnD,CAEA,OAAOssG,CACT,CAvCoCG,CAAuBL,IAAa,CAACA,IACvE,OACEp/H,EAAAA,GAAAA,GAAA,WAASF,UAAU,4CAA2CC,SAC3Ds/H,EAAY7rH,KAAI,EAAGwf,OAAMne,WAEtBjV,EAAAA,GAAAA,IAAA,OACEkO,QAASA,IAAM61B,EAAS3Q,GACxBlzB,UAAU,YAAWC,SAAA,EAGrBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,cACXtN,EAAAA,GAAAA,GAAA,QAAAD,SAAO8U,MAHFA,UCFXwyC,GAAkB,EAAI1xC,EAAAA,EAmC5B,IAAehX,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,SAAQo/C,cAGV,CACLjC,OAHYg2E,EAAAA,EAAAA,KAAYr+H,EAAQkL,EAAQo/C,MAF1Bj9C,EAjCqCixH,EACvDh0E,UACAjC,QACA57C,cAEA,MAAMwW,GAAc3kB,EAAAA,EAAAA,KAAY,KAC9BmO,EAAQ69C,KACP,CAACA,EAAS79C,IAEPguH,EAAY2B,GAAmBn5G,GAErC,GAAKolC,EAIL,OACE9pD,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPxiC,UAAU,oCACVgO,QAASwW,EACTk4D,gBAAgB,aAChBs/C,UAAWA,EAAU/7H,SAAA,EAErBC,EAAAA,GAAAA,GAAC4rD,GAAAA,EAAS,CACR1rD,KAAMmnD,GACNqC,MAAOA,EACP5pD,UAAU,aACV+rD,gBAAgB,uBAElB7rD,EAAAA,GAAAA,GAAA,OAAKoW,IAAI,OAAOtW,UAAU,WAAUC,UAAEg0B,EAAAA,GAAAA,GAAW21B,EAAMx8C,gBChBvDkwD,IAAevnD,EAAAA,GAAAA,KAAUwnD,GAAOA,KAAM,KAAK,GAiIjD,IAAe1+D,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAQqlC,KAAMwiB,GAAc7nD,EAAO8nD,OAC7B,cAAEh1B,EAAesmG,UAAYF,SAAUC,IAA6Bn5H,GACpE,eACJm8D,EAAc,cAAE/nC,EAAa,cAAEmqG,EAAerzH,OAAQmuH,IACpD5rH,EAAAA,EAAAA,KAAezN,GAAQi8D,cAErB,SAAEhoC,GAAcG,GAAe5gB,MAAS,CAAC,EAE/C,MAAO,CACLsf,gBACAmB,WACAklG,yBACAtxE,YACAsU,iBACAoiE,gBACAlF,kBAjBchsH,EA/HkCmxH,EACpDj8F,cACAk8F,kBACAxqG,WACAklG,yBACAtxE,YACAsU,iBACAoiE,gBACAlF,eACAqF,qBACAvhE,cAEA,MAAM,qBAAEo8D,EAAoB,WAAEoF,IAAej0H,EAAAA,EAAAA,MAEvCe,GAAOC,EAAAA,EAAAA,MACP,SAAE3N,IAAaC,EAAAA,EAAAA,MAEf4kD,GAAiBtkD,EAAAA,EAAAA,KAAY,EAAG2sB,gBAChCA,IAAc6xC,EAAAA,GAAkBC,WAClChB,IAAa,KACXw9D,EAAqB,CACnB15H,KAAM,cAKX,CAAC0iC,IAEEq8F,GAAmBtgI,EAAAA,EAAAA,KACtBE,IACM66H,IACLsF,EAAW,CAAEzzH,OAAQmuH,EAAcrrH,SAAUxP,EAAIq+H,sBAAsB,IAElE9+H,GACHo/D,OAGJ,CAACk8D,EAAct7H,EAAUo/D,IAGrBs8D,GAAgBhzH,EAAAA,EAAAA,KAAQ,IACvBwtB,GAAgC,IAApBA,EAAS9zB,OAInB8zB,EACJ9hB,KAAK3T,IACJ,MAAO0M,EAAQiM,IAAauiH,EAAAA,GAAAA,GAAqBl7H,GAEjD,OAAO26H,IAAyBjuH,IAASm6B,KAAKluB,MAE/CilB,OAAO3yB,SACP24C,MAAK,CAACC,EAAGC,IAAMA,EAAE3wB,KAAO0wB,EAAE1wB,OAVpBsR,GAAAA,GAWR,CAAChP,EAAUklG,IAmBR0F,EAAe1iE,IAAmBA,EAAerU,QAAUqU,EAAei9D,WAAaK,EAAct5H,SACrGo+H,GAAep+H,OAErB,OACExB,EAAAA,GAAAA,GAAA,OAAKF,UAAU,sBAAqBC,UAClCH,EAAAA,GAAAA,IAACslD,GAAAA,EAAc,CACbplD,UAAU,yCACVqlD,MAAO21E,EACP11E,WAAYnB,EACZqa,YAAU,EAAAv+D,SAAA,CAET+/H,IACC9/H,EAAAA,GAAAA,GAAA,OAAKF,UAAU,8BAA6BC,UAC1CC,EAAAA,GAAAA,GAACm/H,GAAW,CACVC,WAAYU,EACZn8F,SAAUo8F,MAIfG,IACClgI,EAAAA,GAAAA,GAACm7H,GAAAA,EAAY,CACXC,aAAW,EACXvmH,KAAM/H,EAAK,6BACXX,YAAaW,EAAK,0CAGrBhC,QAAQ80H,GAAep+H,UACtB5B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,OAAMC,SAAA,EACnBC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uCAAuCsW,IAAKtJ,EAAK8kB,MAAQ,YAASlvB,EAAU3C,SACvF+M,EAAK,YAEP8yH,EAAcpsH,KAAK3T,IAEhBG,EAAAA,GAAAA,GAAC2/H,GAAqB,CACpBpzH,OAAQmuH,EACR/uE,QAAS9rD,EACTiO,QAASmyH,SAMlBn1H,QAAQgwH,EAAct5H,UACrB5B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,OAAMC,SAAA,EACnBC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uCAAuCsW,IAAKtJ,EAAK8kB,MAAQ,YAASlvB,EAAU3C,SACvF+M,EAAK,oBAEPguH,EAActnH,KAhEzB,SAA4B5S,GAC1B,MAAMiU,GAAOwpH,EAAAA,EAAAA,GAAqBvxH,EAAMlM,GAClCqO,EAAOi6C,EAAUtoD,EAAQ2L,QAE/B,GAAKsI,GAAS5F,EAId,OACEjP,EAAAA,GAAAA,GAAC2+H,GAAW,CACVpyH,OAAQ3L,EAAQ2L,OAChB3L,QAASA,EACTgjC,YAAaA,GAGnB,gB,4BClFF,MAsFA,IAAejlC,EAAAA,EAAAA,KAtFiCwhI,EAC9CC,gBACA7hC,0BAEA,MAAMvqF,GAAM5K,EAAAA,EAAAA,OACN,eAAE4sB,EAAc,cAAEqqG,EAAa,SAAE71F,IAAaz+B,EAAAA,EAAAA,MAC9Ce,GAAO2mC,EAAAA,GAAAA,MAEP,OACJ9nC,EAAM,SAAE0vB,EAAQ,eAAEq+E,EAAc,YAAEC,GAChCymB,GAEJE,EAAAA,GAAAA,IAAetsH,EAAKuqF,GAAsBnB,IACR,IAA5BA,EAAMmjC,mBACRF,EAAc,CAAEhlG,gBAIpB,MAAM/W,GAAchY,EAAAA,EAAAA,IAAgB,KAClC0pB,EAAe,CAAEqF,aACjBmP,EAAS,CAAE3qC,GAAI8L,QAGX,kBACJqmE,EAAiB,kBAAEC,EAAiB,wBACpC8vB,EAAuB,kBAAE7vB,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBr+D,IAGzBsQ,YAAak8G,EACb11F,gBAAiB21F,IACf11F,EAAAA,GAAAA,IAAcn+B,IAChBA,EAAEuJ,kBACF+7D,EAAkBtlE,MAGdkvH,EAAY2B,GAAmBn5G,GAErC,OACE1kB,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPtuB,IAAKA,EACLlU,UAAU,oCACVgO,QAASwW,EACT4mB,YAAa62D,EACbh8E,cAAemsD,EACf4pD,UAAWA,EAAU/7H,SAAA,EAEpB0O,EAAAA,EAAAA,IAAS9C,IACR3L,EAAAA,GAAAA,GAACiiD,GAAAA,EAAe,CACdtkB,OAAQhyB,EACR4wH,cAAY,EACZphF,WAAS,EACTs7E,WAAW,SACXiH,kBAAmB7/F,EAAAA,GAAkB/4B,gBAGvC9E,EAAAA,GAAAA,GAACoiD,GAAAA,EAAa,CACZ71C,OAAQZ,EACR4wH,cAAY,EACZ9F,WAAW,SACXt7E,WAAS,EACTuiF,kBAAmB7/F,EAAAA,GAAkB/4B,gBAGzClF,EAAAA,GAAAA,IAAC8gI,GAAAA,EAAW,CAAC5gI,UAAU,yBAAyBorC,YAAau1F,EAAsB3yH,QAAS0yH,EAAiBzgI,SAAA,CAC1G+M,EAAK,uBACN9M,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,YAEZ2kE,IACCjyE,EAAAA,GAAAA,GAACo6G,GAAAA,EAAoC,CACnC1uG,OAAQsmE,EACRgH,OAAQ/G,EACRooC,WAAYrmG,EACZqnB,SAAUA,EACVq+E,eAAgBA,EAChBD,WAAS,EACTE,YAAaA,EACb/tG,QAASumE,EACTtmE,oBAAqBumE,UCvEzBhV,IAAevnD,EAAAA,GAAAA,KAAUwnD,GAAOA,KAAM,KAAO,GA8FnD,IAAe1+D,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAQ0kC,QAAS46F,GAAet/H,EAAOu/H,SACjCz7F,EAAY9jC,EAAOolC,MAAMC,MACzB,qBAAEm6F,GAAyBx/H,EAEjC,MAAO,CACLs/H,aACAx7F,YACA07F,0BATcnyH,EA5F8BoyH,EAChDH,aACAx7F,YACA07F,uBACAriE,cAEA,MAAM,aACJuiE,EAAY,SAAEv2F,EAAQ,uBACtBw2F,EAAsB,wBAAEC,IACtBl1H,EAAAA,EAAAA,MAEEm1H,GAAc93H,EAAAA,EAAAA,OAIpBkB,EAAAA,EAAAA,KAAU,KACR8yD,IAAa,KACX2jE,SAED,CAACA,KAEJlnD,EAAAA,GAAAA,GAAoBqnD,GAAcP,GAElC,MAAMr8G,GAAc3kB,EAAAA,EAAAA,KAAaE,IAC/B2qC,EAAS,CAAE3qC,KAAIq+H,sBAAsB,IACrC1/D,IACA5zD,YAAW,KACTo2H,EAAuB,CAAEnhI,SAhCC,OAkC3B,CAAC2qC,EAAUw2F,EAAwBxiE,IAEhC2iE,GAAgCxhI,EAAAA,EAAAA,KAAY,KAChDshI,MACC,CAACA,IAEEn0H,GAAOC,EAAAA,EAAAA,KAEb,OACEnN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,+BAA8BC,SAAA,CAC1C4gI,IACC3gI,EAAAA,GAAAA,GAAA,OAAKF,UAAU,oBAAoBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,UACrEC,EAAAA,GAAAA,GAAA,OAAKgU,IAAKktH,EAAaphI,UAAU,YAAWC,SACzC4gI,EAAWntH,KAAKmqB,IACf/9B,EAAAA,GAAAA,IAAA,OAEEE,UAAU,gBACVgO,QAASA,IAAMwW,EAAYqZ,GAC3BvnB,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAA,EAEpCC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CAACC,KAAMqR,EAAUxH,MACxB39B,EAAAA,GAAAA,GAAA,OAAKF,UAAU,gBAAeC,UAAEg0B,EAAAA,GAAAA,IAAWo6B,EAAAA,EAAAA,IAAuBhpB,EAAUxH,KAtD/E,SAgDQA,SAYdkjG,IACCjhI,EAAAA,GAAAA,IAAA,OAAKE,UAAU,sBAAqBC,SAAA,EAClCH,EAAAA,GAAAA,IAAA,MACEE,WAAWoW,EAAAA,GAAAA,GACT,4CACCyqH,GAAc,kBAEjBvqH,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAA,CAEnC+M,EAAK,WAEN9M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,qBACVuS,OAAK,EACLnS,KAAK,UACL0N,MAAM,cACN0E,UAAWxF,EAAK,SAChBgB,QAASqzH,EACTvvG,MAAO9kB,EAAK8kB,MAAM7xB,UAElBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,eAGduzH,EAAqBrtH,KAAK3T,IACzBG,EAAAA,GAAAA,GAACs8H,GAAoB,CACnB/vH,OAAQ1M,EACR28H,mBAAiB,EACjB1uH,QAASwW,gBC7CjB84C,IAAevnD,EAAAA,GAAAA,KAAUwnD,GAAOA,KAAM,KAAK,GAwajD,IAAe1+D,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAU+/H,oBACT,MAAQr7F,QAAShC,GAAe1iC,EAAOmlC,aAAe,CAAC,GACjD,cACJrS,EAAa,SAAEsmG,GACbp5H,EAEJ,IAAK0iC,EACH,MAAO,CAAC,EAGV,MAAM,eACJy5B,EAAc,cAAE6jE,EAAa,aAAEC,EAAY,cAAE7rG,EAAa,cAAE2qG,IAC1DtxH,EAAAA,EAAAA,KAAezN,GAAQi8D,cACnBngB,QAASokF,GAAkBF,GAAiB,CAAC,GAC7ClkF,QAASqkF,GAAmBF,GAAgB,CAAC,GAC7C/G,SAAUC,GAA2BC,EACvCnlG,EAAWG,IAAgB2rG,EAAgB,WAAa,SAAS9rG,UACjE,kBAAEmsG,IAAsBC,EAAAA,EAAAA,KAAwBrgI,EAAQsgI,EAAAA,MAAiC,CAAC,EAEhG,MAAO,CACLxtG,gBACA4P,aACAy9F,iBACAD,gBACAjsG,WACAklG,yBACAh9D,iBACA4iE,gBACAwB,oBAAqBH,KA7BP/yH,EAta2BmzH,EAC7CT,gBACAx9F,cACAw7F,aACAU,kBACA3rG,gBACA4P,aACAy9F,iBACAD,gBACAjsG,WACAklG,yBACAh9D,iBACAokE,sBACAxB,gBACA5hE,UACAuhE,yBAEA,MAAM,SACJv1F,EAAQ,uBAAEw2F,EAAsB,qBAAEpG,EAAoB,sBACtDkH,EAAqB,2BAAEC,IACrBh2H,EAAAA,EAAAA,MAEEsd,GAAejgB,EAAAA,EAAAA,MACf44H,GAAmB54H,EAAAA,EAAAA,MAEnBoqC,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,MAEP,SAAEr0C,IAAaC,EAAAA,EAAAA,OACd4iI,EAAqBC,IAA0Bh2H,EAAAA,EAAAA,KAAkB,IACjEi2H,EAAsBC,IAA2Bl2H,EAAAA,EAAAA,KAAkB,IACnEm2H,EAAeC,IAAoBp2H,EAAAA,EAAAA,IAAkC,OACtE8H,GAAM5K,EAAAA,EAAAA,OAEZ6K,EAAAA,GAAAA,IAAc,KACRmtH,GAAeW,EAA2B,CAAC,MAGjD,MAAM99E,GAAiBtkD,EAAAA,EAAAA,KAAY,EAAG2sB,gBAChCA,IAAc6xC,EAAAA,GAAkBC,WAClChB,IAAa,KACXw9D,EAAqB,CACnB15H,KAAMkgI,EAAgB,WAAa,OACnCmB,QAASF,SAKd,CAACz+F,EAAay+F,IAEXpE,GAAkBt+H,EAAAA,EAAAA,KACrBE,IACC2qC,EAAS,CAAE3qC,KAAIq+H,sBAAsB,IAEjCr+H,IAAOs0B,GACT6sG,EAAuB,CAAEnhI,OAGtBT,GACHo/D,MAGJ,CAACh0B,EAAUrW,EAAe/0B,EAAU4hI,EAAwBxiE,IAGxDgkE,GAAwB7iI,EAAAA,EAAAA,KAAaE,IACzCiiI,EAAsB,CAAEjiI,SACvB,CAACiiI,IAEJ,SAASW,EAAwBF,GAC/B,OAAgCz1H,EAAhB,UAAZy1H,EAAiC,4BACrB,WAAZA,EAAkC,0BACtB,aAAZA,EAAoC,wBAC5B,wBACd,CAEA,MAAM,kBACJvwD,EAAiB,kBAAEC,EAAiB,kBAAEC,EAAiB,uBACvDC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBr+D,GAErB89D,GAAiBxlE,EAAAA,EAAAA,IAAgB,IAAM0H,EAAIzK,UAC3CwoE,GAAiBzlE,EAAAA,EAAAA,IAAgB,IAAM0H,EAAIzK,QAASpF,cAAc,qCAClE0tE,GAAoBvlE,EAAAA,EAAAA,IAAgB,IAAM0H,EAAIzK,QAASpF,cAAc,kBAErEu+H,IAAqBp2H,EAAAA,EAAAA,IAAiBM,IAC1CslE,EAAkBtlE,MAGd+1H,IAAuBzsH,EAAAA,GAAAA,GAAe,OAAQ,mBAqD9CorH,IAAex5H,EAAAA,EAAAA,KAAQ,KAC3B,IAAKs5H,KAAmBx9F,GAAgBA,EAAYg/F,WAAW,MAAQh/F,EAAYpiC,OAAS,GAC1F,OAAO8iC,GAAAA,EAIT,MAAM4kB,GAAYra,EAAAA,EAAAA,MAAYsa,MAAMziB,KAG9Bm8F,IADiBC,EAAAA,GAAAA,IAAcC,EAAAA,MAAkB,IAChBtlG,QAAQ59B,IAC7C,IAAKuhI,EAAe,OAAO,EAC3B,MAAMnyH,EAAOi6C,EAAUrpD,GACvB,OAAOoP,IAAQukB,EAAAA,EAAAA,IAAcvkB,MAEzB+zH,GAAe/+F,EAAAA,GAAAA,IAAmB,CAAEC,IAAK2+F,EAAiB1+F,MAAOP,EAAa1iC,KAAM,SAE1F,GAAIkgI,EAAe,OAAO4B,EAE1B,MAAMC,EAAmB,IACnB9uG,EAAgB,CAACA,GAAiB,MAClC4P,GAAc,IAOdm/F,EAAe,KAJGj/F,EAAAA,GAAAA,IAAmB,CACzCC,IAAK++F,EAAkB9+F,MAAOP,EAAa1iC,KAAM,YAK9C8hI,GAGL,OAAOh/F,EAAAA,GAAAA,IAAO,KACTkpB,EAAAA,GAAAA,GAAYg2E,OAAcxgI,EAAWyxB,EAAgB,CAACA,QAAiBzxB,OACvEwqD,EAAAA,GAAAA,GAAYs0E,GAAkB,QAElC,CAAC59F,EAAazP,EAAe4P,EAAYy9F,EAAgBJ,KAE5DvnD,EAAAA,GAAAA,GAAoBmoD,GAAmBV,GAAa9/H,QAAU4/H,GAAe,GAE7E,MAAMC,IAAgBv5H,EAAAA,EAAAA,KAAQ,KAC5B,IAAK87B,GAAeA,EAAYpiC,OA7LO,IA6LyC+/H,EAC9E,OAAOj9F,GAAAA,EAIT,MAAM4kB,GAAYra,EAAAA,EAAAA,MAAYsa,MAAMziB,KAE9By8F,EAAc5B,EAAc9jG,QAAQ59B,IACxC,IAAKuhI,EAAe,OAAO,EAC3B,MAAMnyH,EAAOi6C,EAAUrpD,GACvB,OAAOoP,IAAQukB,EAAAA,EAAAA,IAAcvkB,MAG/B,OAAOi+C,EAAAA,GAAAA,GAAYi2E,GAAa,KAC/B,CAAC5B,EAAeH,EAAex9F,IAE5Bk3F,IAAgBhzH,EAAAA,EAAAA,KAAQ,KAC5B,IAAM87B,IAAgBw7F,IAAgB9pG,GAAgC,IAApBA,EAAS9zB,OACzD,OAAO8iC,GAAAA,EAIT,MAAM4kB,GAAYra,EAAAA,EAAAA,MAAYsa,MAAMziB,KAEpC,OAAOpR,EACJ9hB,KAAK3T,IACJ,MAAO0M,EAAQiM,IAAauiH,EAAAA,GAAAA,GAAqBl7H,GAC3CoP,EAAOi6C,EAAU38C,GACvB,GAAK0C,KACDmyH,IAAkB5tG,EAAAA,EAAAA,IAAcvkB,IAEpC,OAAOurH,IAAyBjuH,IAASm6B,KAAKluB,MAE/CilB,OAAO3yB,WACT,CAAC84B,EAAaw7F,EAAY9pG,EAAU8rG,EAAe5G,KAEtDlwH,EAAAA,EAAAA,KAAU,KACHs5B,GACLg3F,EAAqB,CACnB15H,KAAMkgI,EAAgB,WAAa,OACnCmB,QAASF,EACTe,0BAA0B,EAC1BC,mCAAmC,MAGpC,CAAChB,IAEJ,MAAMiB,IAA2B3jI,EAAAA,EAAAA,KAAY,KAC3CuiI,GAAwBD,KACvB,CAACA,IAEEsB,IAA4B5jI,EAAAA,EAAAA,KAAY,KAC5CyiI,GAAyBD,KACxB,CAACA,IAqBEqB,GAAiB1I,GAEjBoF,GAAiC,QAAlBmC,GAA2B7kE,IAAmBA,EAAerU,QAAUqU,EAAei9D,WACrG6G,GAAa9/H,SAAW6/H,GAAc7/H,SAAWgiI,GAAehiI,OAChEiiI,GAAqBjmE,GAAgBi9D,SAErCiJ,IAAwB9/F,IAAgBw7F,IAAegC,GAEvD,QAAEzkC,KAAYM,EAAAA,GAAAA,IAAwB,CAC1CC,QAAS7zE,EACTu0E,WA/Q0B,IAgR1B5zF,YAAa05H,KAGf,GAAIA,GACF,OAAO1jI,EAAAA,GAAAA,GAAC8gI,GAAc,CAACtiE,QAASA,IAGlC,MAAMmlE,GAAgD,QAAlBtB,GAA0Bv3H,QAAQ04H,GAAehiI,QAErF,OACE5B,EAAAA,GAAAA,IAACslD,GAAAA,EAAc,CACblxC,IAAKqV,EACLvpB,UAAU,oCACVqlD,MAAOq+E,GACPp+E,WAAYnB,EAEZ2/E,sBAAoB,EACpBtlE,YAAU,EAAAv+D,SAAA,CAET+/H,IACC9/H,EAAAA,GAAAA,GAAA,OAAKF,UAAU,8BAA6BC,UAC1CC,EAAAA,GAAAA,GAACm/H,GAAW,CACVC,WAAYU,EACZn8F,SAAUo8F,MAIfG,KACClgI,EAAAA,GAAAA,GAACm7H,GAAAA,EAAY,CACXC,aAAW,EACXvmH,KAAM2+B,EAAQ,6BACdrnC,YAAaqnC,EAAQ,0CAGxB1oC,QAAQw2H,GAAa9/H,UAAY4/H,IAChCphI,EAAAA,GAAAA,GAAA,OACEF,UAAU,8BACVsW,IAAKo9B,EAAQ5hB,MAAQ,WAAQlvB,EAC7BsR,IAAKguH,EAAiBjiI,SAErBuhI,GAAa9tH,KAAK3T,IACjBG,EAAAA,GAAAA,GAACsvG,GAAAA,EAAQ,CACP3jG,OAAQ9L,EACRC,UAAU,+BACVgO,QAAS00H,EACTxhC,SAAUnhG,QAKjBiL,QAAQw2H,GAAa9/H,UACpB5B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,MAAIE,UAAU,kBAAkBsW,IAAKo9B,EAAQ5hB,MAAQ,YAASlvB,EAAU3C,SAAA,CACrEuhI,GAAa9/H,OAtUK,IAuUjBxB,EAAAA,GAAAA,GAACu6F,GAAAA,EAAI,CAACz6F,UAAU,OAAOgO,QAASw1H,GAAyBvjI,SACtDyzC,EAAQyuF,EAAsB,2BAA6B,8BAG/DzuF,EAAQ4tF,EAAgB,mBAAqB,sCAE/CE,GAAa9tH,KAAI,CAAC3T,EAAIyE,KACrB,GAAK29H,KAAuB39H,GA9UT,GAkVnB,OACEtE,EAAAA,GAAAA,GAACs8H,GAAoB,CACnBE,mBAAiB,EACjBjwH,OAAQ1M,EACRiO,QAASmwH,UAMlBnzH,QAAQu2H,GAAc7/H,UACrB5B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,MAAIE,UAAU,kBAAkBsW,IAAKo9B,EAAQ5hB,MAAQ,YAASlvB,EAAU3C,SAAA,CACrEshI,GAAc7/H,OA/VI,IAgWjBxB,EAAAA,GAAAA,GAACu6F,GAAAA,EAAI,CAACz6F,UAAU,OAAOgO,QAASy1H,GAA0BxjI,SACvDyzC,EAAQ2uF,EAAuB,2BAA6B,8BAGhE3uF,EAAQ,qCAEV4sF,IACCpgI,EAAAA,GAAAA,GAACmgI,GAAyB,CAACC,cAAeA,EAAe7hC,oBAAqB5B,KAE/E0kC,GAAc7tH,KAAI,CAAC3T,EAAIyE,KACtB,GAAK69H,KAAwB79H,GA1WV,GA8WnB,OACEtE,EAAAA,GAAAA,GAACs8H,GAAoB,CACnB/vH,OAAQ1M,EACR08H,cAAY,EACZzuH,QAASmwH,UAMlBnzH,QAAQ82H,GAAqBpgI,UAAYoiC,IACxChkC,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,kBAAkBsW,IAAKo9B,EAAQ5hB,MAAQ,YAASlvB,EAAU3C,SACrEyzC,EAAQ,+BAEVouF,EAAoBpuH,KAAK3T,IAEtBG,EAAAA,GAAAA,GAACs8H,GAAoB,CACnB/vH,OAAQ1M,EACR08H,cAAY,EACZzuH,QAASmwH,UAMnBr+H,EAAAA,GAAAA,IAAA,OAAKE,UAAU,YAAYkU,IAAKA,EAAIjU,SAAA,EAtSpCC,EAAAA,GAAAA,GAAC8f,GAAAA,EAAI,CACHpU,OAAQsmE,EACRgH,OAAQ/G,EACRJ,kBAAmBA,EACnBC,eAAgBA,EAChBC,eAAgBA,EAChBjyE,UAAU,yBACV8L,QAASumE,EACTtmE,oBAAqBumE,EACrBpyD,WAAS,EAAAjgB,UAETH,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAwB,QAAlBqvH,EAA0B,aAAU3/H,EAC1CmhI,WAA8B,QAAlBxB,GAA0BriI,EAAAA,GAAAA,GAAA,KAAGF,UAAW6iI,UAA2BjgI,EAE/EoL,QAASA,IAAMw0H,EAAiB,OAAOviI,SAEtC0iI,EAAwB,UAE3BziI,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAwB,UAAlBqvH,EAA4B,aAAU3/H,EAC5CmhI,WAA8B,UAAlBxB,GAA4BriI,EAAAA,GAAAA,GAAA,KAAGF,UAAW6iI,UAA2BjgI,EAEjFoL,QAASA,IAAMw0H,EAAiB,SAASviI,SAExC0iI,EAAwB,YAE3BziI,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAwB,WAAlBqvH,EAA6B,aAAU3/H,EAC7CmhI,WAA8B,WAAlBxB,GAA6BriI,EAAAA,GAAAA,GAAA,KAAGF,UAAW6iI,UAA2BjgI,EAElFoL,QAASA,IAAMw0H,EAAiB,UAAUviI,SAEzC0iI,EAAwB,aAE3BziI,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAwB,aAAlBqvH,EAA+B,aAAU3/H,EAC/CmhI,WAA8B,aAAlBxB,GAA+BriI,EAAAA,GAAAA,GAAA,KAAGF,UAAW6iI,UAA2BjgI,EAEpFoL,QAASA,IAAMw0H,EAAiB,YAAYviI,SAE3C0iI,EAAwB,mBA8P5BkB,KACC/jI,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,MAAIE,UAAU,kBAAkBsW,IAAKo9B,EAAQ5hB,MAAQ,YAASlvB,EAAU3C,SAAA,EACpEqhI,IACAxhI,EAAAA,GAAAA,IAAC26F,GAAAA,EAAI,CAACz6F,UAAU,gCAAgCgO,QAAS40H,GAAmB3iI,SAAA,CACzE+M,EAAK,uBAAwB,CAC5B5L,KAAMuhI,EAAwBJ,IAC7B,CACDjoF,WAAW,KAGbx6C,EAAAA,GAAAA,IAACm9B,GAAAA,GAAU,CACTzvB,KAAK,OACLggG,eAAa,EACbtwE,UAAW3X,OAAOo+G,IAClB3jI,UAAU,gBACV4oC,eAAe,qBAAoB3oC,SAAA,CAElC0jI,KAAuBzjI,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,KAC9B+3E,KAAsBzjI,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,eAIxCkmC,EAAQ,qBAEVgwF,GAAehwH,KAhL1B,SAA4B5S,GAC1B,MAAMsoD,GAAYra,EAAAA,EAAAA,MAAYsa,MAAMziB,KAE9B7xB,GAAOwpH,EAAAA,EAAAA,GAAqB7qF,EAAS5yC,GACrCqO,EAAOi6C,EAAUtoD,EAAQ2L,QAE/B,GAAKsI,GAAS5F,EAId,OACEjP,EAAAA,GAAAA,GAAC2+H,GAAW,CACVpyH,OAAQ3L,EAAQ2L,OAChB3L,QAASA,EACTgjC,YAAaA,GAGnB,iB,gBC7SF,MAAMkgG,GAAe,YAGf1mE,IAAevnD,EAAAA,GAAAA,KAAUwnD,GAAOA,KAAM,KAAK,GA2HjD,IAAe1+D,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,IAClByrH,GAAsB2J,IADJp1H,EAzH2Bq1H,EAC7CngG,cACAlP,YACAw0B,YACA/jB,YACAq1F,yBACAllG,WACA9lB,kBACA2hH,yBAEA,MAAM,qBACJyJ,EAAoB,aACpBtoG,IACEvmB,EAAAA,EAAAA,MAEEsd,GAAejgB,EAAAA,EAAAA,MAEf0D,GAAOC,EAAAA,EAAAA,MAEL4vF,QAASqnC,IAAgC/mC,EAAAA,GAAAA,IAAwB,CACvEC,QAAS7zE,EACTu0E,WAzB0B,MA4BtB35C,GAAiBtkD,EAAAA,EAAAA,KAAY,EAAG2sB,gBAChCA,IAAc6xC,EAAAA,GAAkBC,WAClChB,IAAa,KACXw9D,EAAqB,CACnB15H,KAAM4iI,UAKX,CAAClgG,IAEEk3F,GAAgBhzH,EAAAA,EAAAA,KAAQ,IACvBwtB,GAAaklG,EAIXllG,EAAS9hB,KAAK3T,IACnB,MAAO0M,EAAQiM,IAAauiH,EAAAA,GAAAA,GAAqBl7H,GAC3Ce,EAAU45H,EAAuBjuH,IAASm6B,KAAKluB,GAErD,OAAO5X,IAAWqjI,EAAAA,EAAAA,IAAmBrjI,GAAWA,OAAU8B,KACzD+6B,OAAO3yB,SARDw5B,GAAAA,GASR,CAACk2F,EAAwBllG,IAEtB0lG,GAAqBr7H,EAAAA,EAAAA,KAAaiB,IACtC0xB,EAAa,CAAE/lB,OAAQ3L,EAAQ2L,OAAQiM,UAAW5X,EAAQf,OACzD,CAACyyB,IAyCE4oG,GAAoBnuB,EAAAA,GAAAA,GAAkB,CAACnpE,GAAcw4D,EAAAA,OAA+B1nE,EAE1F,OACE10B,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CACT/oB,IAAKqV,EACLqf,eAAe,sBACfp7B,KAAK,OACL0vB,UAAWk+F,EAAoB,EAAI,EACnC5tB,eAAa,EAAAvtG,UAEbH,EAAAA,GAAAA,IAACslD,GAAAA,EAAc,CACbplD,UAAU,8CACVqlD,MAAO+1E,EAAoBJ,OAAgBp4H,EAC3C0iD,WAAYnB,EACZqa,YAAU,EAAAv+D,SAAA,EAERm7H,IAAqBl7H,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,IAC9BwvE,KAAuB5lG,GAAgC,IAApBA,EAAS9zB,UAC3CxB,EAAAA,GAAAA,GAACm7H,GAAAA,EAAY,CACXC,aAAW,EACXvmH,KAAM/H,EAAK,6BACXX,YAAaW,EAAK,0CAGrBouH,GAAqB5lG,GAAYA,EAAS9zB,OAAS,GA9DjDs5H,EAActnH,KAAI,CAAC5S,EAAS0D,KACjC,MACM+2H,EADoB,IAAV/2H,IAEXg3H,EAAAA,GAAAA,IAAY16H,EAAQoyB,SAAUsoG,EAAAA,GAAAA,IAAYR,EAAcx2H,EAAQ,GAAG0uB,MACxE,OACEpzB,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,CACGs7H,IACCr7H,EAAAA,GAAAA,GAAA,KACEF,UAAU,kBACVsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,UAGnCy7H,EAAAA,GAAAA,IAAmB1uH,EAAM,IAAImf,KAAoB,IAAfrrB,EAAQoyB,QAFtCpyB,EAAQoyB,OAKjBhzB,EAAAA,GAAAA,GAAA,OACEF,UAAU,sBAAqBC,UAG/BC,EAAAA,GAAAA,GAACkkI,GAAAA,EAAQ,CACPtiI,UAAUqiI,EAAAA,EAAAA,IAAmBrjI,GAC7BA,QAASA,EACTujI,UAAQ,EACRC,SAAUxjI,EAAQoyB,KAClBqxG,SAAO,EACPl6F,QAAQyxF,EAAAA,GAAAA,GAAc9uH,EAAMlM,EAASsoD,EAAW/jB,GAChDrlC,UAAU,cACV0R,eAAeC,EAAAA,EAAAA,IAAiBjC,EAAiB5O,EAAQkS,QAAQlR,UACjEuvH,mBAAoBA,EACpB5yB,oBAAqBylC,EACrBnI,YAAab,KAbVp6H,EAAQf,mB,gBC5EzB,MAAMikI,GAAe,QAGf1mE,IAAevnD,EAAAA,GAAAA,KAAUwnD,GAAOA,KAAM,KAAK,GAqHjD,IAAe1+D,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,IAClByrH,GAAsB2J,IADJp1H,EAnH2B41H,EAC7C1gG,cACAlP,YACAw0B,YACA/jB,YACAq1F,yBACAllG,WACA5lB,sBAEA,MAAM,qBACJkrH,EAAoB,aACpBtoG,IACEvmB,EAAAA,EAAAA,MAEEsd,GAAejgB,EAAAA,EAAAA,MAEf0D,GAAOC,EAAAA,EAAAA,MAEL4vF,QAASqnC,IAAgC/mC,EAAAA,GAAAA,IAAwB,CACvEC,QAAS7zE,EACTu0E,WAxB0B,MA2BtB35C,GAAiBtkD,EAAAA,EAAAA,KAAY,EAAG2sB,gBAChCA,IAAc6xC,EAAAA,GAAkBC,WAClChB,IAAa,KACXw9D,EAAqB,CACnB15H,KAAM4iI,UAKX,CAAClgG,IAEEk3F,GAAgBhzH,EAAAA,EAAAA,KAAQ,IACvBwtB,GAAaklG,EAIXllG,EAAS9hB,KAAK3T,IACnB,MAAO0M,EAAQiM,IAAauiH,EAAAA,GAAAA,GAAqBl7H,GAEjD,OAAO26H,EAAuBjuH,IAASm6B,KAAKluB,MAC3CilB,OAAO3yB,SAPDw5B,GAAAA,GAQR,CAACk2F,EAAwBllG,IAEtB0lG,GAAqBr7H,EAAAA,EAAAA,KAAaiB,IACtC0xB,EAAa,CAAE/lB,OAAQ3L,EAAQ2L,OAAQiM,UAAW5X,EAAQf,OACzD,CAACyyB,IAqCE4oG,GAAoBnuB,EAAAA,GAAAA,GAAkB,CAACnpE,GAAcw4D,EAAAA,OAA+B1nE,EAE1F,OACE10B,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CACT/oB,IAAKqV,EACLqf,eAAe,sBACfp7B,KAAK,OACL0vB,UAAWk+F,EAAoB,EAAI,EACnC5tB,eAAa,EAAAvtG,UAEbH,EAAAA,GAAAA,IAACslD,GAAAA,EAAc,CACbplD,UAAU,8CACVqlD,MAAO+1E,EAAoBJ,OAAgBp4H,EAC3C0iD,WAAYnB,EACZqa,YAAU,EAAAv+D,SAAA,EAERm7H,IAAqBl7H,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,IAC9BwvE,KAAuB5lG,GAAgC,IAApBA,EAAS9zB,UAC3CxB,EAAAA,GAAAA,GAACm7H,GAAAA,EAAY,CACXC,aAAW,EACXvmH,KAAM/H,EAAK,6BACXX,YAAaW,EAAK,0CAGrBouH,GAAqB5lG,GAAYA,EAAS9zB,OAAS,GA1DjDs5H,EAActnH,KAAI,CAAC5S,EAAS0D,KACjC,MACM+2H,EADoB,IAAV/2H,IAEXg3H,EAAAA,GAAAA,IAAY16H,EAAQoyB,SAAUsoG,EAAAA,GAAAA,IAAYR,EAAcx2H,EAAQ,GAAG0uB,MACxE,OACEpzB,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,CACGs7H,IACCr7H,EAAAA,GAAAA,GAAA,KACEF,UAAU,kBAEVsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,UAEnCy7H,EAAAA,GAAAA,IAAmB1uH,EAAM,IAAImf,KAAoB,IAAfrrB,EAAQoyB,QAHtCpyB,EAAQoyB,OAMjBhzB,EAAAA,GAAAA,GAAA,OACEF,UAAU,sBACVsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,UAGpCC,EAAAA,GAAAA,GAACukI,GAAAA,EAAO,CAEN3jI,QAASA,EACT+yB,aAAaioG,EAAAA,GAAAA,GAAc9uH,EAAMlM,EAASsoD,EAAW/jB,GACrD71B,YAAaI,GAAmB9O,EAAQ0O,YACxCivF,oBAAqBylC,EACrBQ,eAAgBxJ,GALXp6H,EAAQf,KAHVe,EAAQf,mB,gBC3EzB,MAAMikI,GAAe,QAGf1mE,IAAevnD,EAAAA,GAAAA,KAAUwnD,GAAOA,KAAM,KAAK,GAwHjD,IAAe1+D,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,IAClByrH,GAAsB2J,IADJp1H,EAtH4B+1H,EAC9C7gG,cACAlP,YACA8lG,yBACAllG,WACA5lB,sBAEA,MAAM,qBACJkrH,EAAoB,gBACpBzpH,IACEpF,EAAAA,EAAAA,MAEEsd,GAAejgB,EAAAA,EAAAA,MAEf0D,GAAOC,EAAAA,EAAAA,MAEL4vF,QAASqnC,IAAgC/mC,EAAAA,GAAAA,IAAwB,CACvEC,QAAS7zE,EACTu0E,WAtB0B,MAyBtB35C,GAAiBtkD,EAAAA,EAAAA,KAAY,EAAG2sB,gBAChCA,IAAc6xC,EAAAA,GAAkBC,WAClChB,IAAa,KACXw9D,EAAqB,CACnB15H,KAAM4iI,UAKX,CAAClJ,EAAsBh3F,IAEpBk3F,GAAgBhzH,EAAAA,EAAAA,KAAQ,IACvBwtB,GAAaklG,EAIXllG,EAAS9hB,KAAK3T,IACnB,MAAO0M,EAAQiM,IAAauiH,EAAAA,GAAAA,GAAqBl7H,GAEjD,OAAO26H,EAAuBjuH,IAASm6B,KAAKluB,MAC3CilB,OAAO3yB,SAPDw5B,GAAAA,GAQR,CAACk2F,EAAwBllG,IAEtBovG,GAAoB/kI,EAAAA,EAAAA,KAAY,CAACE,EAAY0M,KACjD4E,EAAgB,CACd5E,SACAiM,UAAW3Y,EACXoD,OAAQc,EAAAA,GAAkBe,iBAE3B,CAACqM,IA6BE+pH,GAAoBnuB,EAAAA,GAAAA,GAAkB,CAACnpE,GAAcw4D,EAAAA,OAA+B1nE,EACpFiwG,EAAczJ,GAAqB5lG,GAAYA,EAAS9zB,OAAS,IAAMoiC,EACvEghG,EAAgB1J,GAAqB5lG,GAAYA,EAAS9zB,OAAS,GAAKoiC,EAExE3tB,GAAaC,EAAAA,GAAAA,GACjB,+BACA0uH,GAAiB,aAGnB,OACE5kI,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CACT/oB,IAAKqV,EACLqf,eAAe,wCACfp7B,KAAK,OACL0vB,UAAWk+F,EAAoB,EAAI,EACnC5tB,eAAa,EAAAvtG,UAEbH,EAAAA,GAAAA,IAACslD,GAAAA,EAAc,CACbplD,UAAWmW,EACXkvC,MAAO+1E,EAAoBJ,OAAgBp4H,EAC3CopD,aAAeloB,EAAyB,YAAX,SAC7BwhB,WAAYnB,EACZqa,YAAU,EAAAv+D,SAAA,EAERm7H,IAAqBl7H,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,IAC9BwvE,KAAuB5lG,GAAgC,IAApBA,EAAS9zB,UAC3CxB,EAAAA,GAAAA,GAACm7H,GAAAA,EAAY,CACXC,aAAW,EACXvmH,KAAM/H,EAAK,6BACXX,YAAaW,EAAK,0CAGrB63H,IAzDH3kI,EAAAA,GAAAA,GAAA,OAAKF,UAAU,aAAasW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAC7D+6H,EAActnH,KAAK5S,IAClBZ,EAAAA,GAAAA,GAAC6kI,GAAAA,EAAK,CAEJtoC,SAAS,eACT37F,QAASA,EACT0O,YAAaI,GAAmB9O,EAAQ0O,YACxCivF,oBAAqBylC,EACrBl2H,QAAS42H,GALJ,GAAG9jI,EAAQ2L,UAAU3L,EAAQf,UAuDrC+kI,GA1CE9J,EAActnH,KAAK5S,IACxBZ,EAAAA,GAAAA,GAAC2+H,GAAW,CAEVpyH,OAAQ3L,EAAQ2L,OAChB3L,QAASA,GAFJA,EAAQf,e,cC3GrB,UAAgB,UAAY,WAAW,QAAU,WAAW,cAAgB,WAAW,oBAAsB,WAAW,QAAU,WAAW,MAAQ,WAAW,YAAc,WAAW,aAAe,WAAW,kBAAoB,WAAW,WAAa,WAAW,mBAAqB,WAAW,YAAc,WAAW,WAAa,WAAW,iBAAmB,WAAW,iBAAmB,WAAW,iBAAmB,WAAW,aAAe,WAAW,mBAAqB,WAAW,uBAAyB,WAAW,gBAAkB,YCkRriB,IAAelB,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAsBrN,IAAM,CAC9Cu+B,sBAAsB0B,EAAAA,EAAAA,KAA2BjgC,GACjDo/G,aAAcp/G,EAAOo2F,OAAOipB,SAASzmE,QAAU,KAF7BvrC,EAzOco2H,EAChClhG,cACAmhG,cACAC,WACAtwG,YACAkL,uBACA6gF,mBAEA,MAAM3zG,GAAO2mC,EAAAA,GAAAA,KACPwxF,EAAcF,GAAaE,YAC3BC,EAAiBH,GAAa5gG,MAE9BghG,GAAwBC,EAAAA,GAAAA,GAAuB,CAACxhG,GAAawa,MAAM,EAAG,IAAIinF,YAE1EC,GAAoBh5H,EAAAA,EAAAA,IAAgB,KACxC04H,QAGF16H,EAAAA,EAAAA,KAAU,KACJ26H,GAAerhG,GAAeshG,IAAmBthG,GACnDohG,MAED,CAACC,EAAarhG,EAAashG,EAAgBF,IAE9C,MAAMO,GAAwBj5H,EAAAA,EAAAA,IAAgB,KAC5C,MAAMk5H,EAAcT,GAAaS,aAAe,EACzB/kB,EAEF+kB,EACnBphB,EAAsB,CACpBwB,MAAO,CACLC,cAAe2f,KAInBR,QAIE,sBACJS,EAAqB,iBACrB9jG,EAAgB,sBAChByiF,IACEr4G,EAAAA,EAAAA,MAEE25H,GAAep5H,EAAAA,EAAAA,IAAgB,KACnCm5H,EAAsB,CAAC,MAGnBE,GAA8Br5H,EAAAA,EAAAA,IAAgB,KAClDq1B,OAqIIG,GAAaC,EAAAA,GAAAA,MACb6jG,EAAkD,IAAzBb,GAAac,SACtCd,GAAae,UAAYf,EAAYe,SAAWhkG,EAsCtD,OACE9hC,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CACTzvB,KAAK,OACL0vB,UA5BG4C,EAGDlL,EACK,EAELkxG,EACK,EAEF,EARE,EA2BmB7lI,SAfvB6/B,EAGDlL,GAzBF10B,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOhY,UAAUxF,UAC/BC,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAOzK,QAASyK,GAAOwoH,eAAehmI,UACnEC,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,QA0BVk6E,EApKqBI,MACzB,MAAMF,EAAWf,GAAae,SACxBN,EAAcT,GAAaS,aAAeS,EAAAA,IAC1CC,EAAanB,GAAamB,YAAcC,EAAAA,IAE9C,OACEnmI,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOhY,UAAUxF,UAC/BH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOzK,QAAQ/S,SAAA,EAC7BC,EAAAA,GAAAA,GAACqkG,GAAAA,EAAuB,CACtBvkG,UAAWyd,GAAO8gE,QAClBn+E,KAAM,IACNE,OAAQC,GAAAA,EAAes7H,OACvByK,WAAYC,GAAAA,EAAuB1K,OACnCtsF,gBAAc,EACd7uC,QAAQ,KAEVR,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAO+oH,WAAWvmI,SAC/B+M,EAAK,8BAER9M,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOgpH,iBAAiBxmI,SACrC+M,EAAK,6BAA8B,CAAEqmB,MAAO+yG,GAAc,CAAEhqE,YAAagqE,OAE5ElmI,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAWyd,GAAOipH,iBAClB54H,MAAM,UACN1N,KAAK,UACLggB,UAAW0jB,EACX6iG,mBAAiB,EACjB34H,QAASy3H,EAAsBxlI,SAE9B+M,EAAK,4BAA6B,CACjC2qF,OAAOv9C,EAAAA,GAAAA,IAAkBptC,EAAM04H,EAAa,CAAErrF,QAAQ,KACrD,CAAEC,WAAW,MAEjBtvC,QAAQg7H,KACP9lI,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOmpH,iBAAiB3mI,UACtCC,EAAAA,GAAAA,GAAC4iC,GAAAA,EAAS,CACRC,QAAQ,+BACRC,OAAQgjG,EA7FL,EA8FH/iG,MAAO2iG,YA8HVM,GArHgBW,MACzB,MAAMC,EAAoB7B,GAAac,SAAW,EAElD,OACE7lI,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOhY,UAAUxF,UAC/BH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOzK,QAAQ/S,SAAA,EAC7BC,EAAAA,GAAAA,GAACqkG,GAAAA,EAAuB,CACtBvkG,UAAWyd,GAAO8gE,QAClBn+E,KAAM,IACNE,OAAQC,GAAAA,EAAes7H,OACvByK,WAAYC,GAAAA,EAAuB1K,OACnCtsF,gBAAc,EACd7uC,QAAQ,KAEVR,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOrQ,MAAMnN,SAC1B+M,EAAK,mBAER9M,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOpR,YAAYpM,SAChC+M,EAAK,mCAER9M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAWyd,GAAOspH,aAClBj5H,MAAM,UACN1N,KAAK,UACLumI,mBAAiB,EACjBvmH,UAAW0jB,EACX91B,QAASw3H,EAAkBvlI,UAE3BC,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CACTzvB,KAAK,OACL0vB,UAAWmoG,EAAsBplI,UAEjCH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOupH,oBAAoB/mI,SAAA,EACzCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CACHjF,KAAK,SACLxN,WACEoW,EAAAA,GAAAA,GAAeqH,GAAOwpH,WACpBnjG,GAAermB,GAAOypH,sBAG3Bl6H,EAAK,0BAA2B,CAC/Bq3B,MAAOP,GAAc5jC,EAAAA,GAAAA,GAAA,QAAMF,UAAWyd,GAAOqmB,YAAY7jC,SAAE6jC,IAAsB,IAChF,CAAEwW,WAAW,IACfxW,IAAe5jC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,OAAOxN,UAAWyd,GAAO0pH,mBAI1DjnI,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOqpH,kBAAkB7mI,SACtC+M,EAAK,6BAA8B,CAAEqmB,MAAOyzG,GAAqB,CAAE1qE,YAAa0qE,YAuElFD,IA9DL3mI,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOhY,UAAUxF,UAC/BH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOzK,QAAQ/S,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAO2pH,aAAannI,SACjC+M,EAAK,mBAER9M,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAO4pH,mBAAmBpnI,SACvC+M,EAAK,2CAER9M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAWyd,GAAO6pH,uBAClBx5H,MAAM,UACN1N,KAAK,UACLumI,mBAAiB,EACjB34H,QAAS63H,EAA4B5lI,SAEpC+M,EAAK,oCAER9M,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAO8pH,gBAAgBtnI,SACpC+M,EAAK,kDClLZswD,IAAevnD,EAAAA,GAAAA,KAAUwnD,GAAOA,KAAM,KAAK,GAgHjD,IAAe1+D,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAQo5H,UAAYF,SAAUC,IAA6Bn5H,GACrD,cAAEo0B,EAAa,YAAEsvG,EAAW,eAAEvnE,IAAmB1uD,EAAAA,EAAAA,KAAezN,GAAQi8D,aACxEgqE,EAAoB7xG,GAAe8xG,aACnC,SAAEjyG,GAAagyG,GAAqB,CAAC,EACrC5yG,EAAY5pB,QAAQ0yD,GAAgB+pE,cAAgBD,GACpDE,GAA4BF,IAAsB5yG,EAClD+yG,EAAiBH,IAAsBhyG,GAAU9zB,QACjD,eAAEkmI,IAAmBl3D,EAAAA,GAAAA,GAAqBnvE,GAEhD,MAAO,CACLi0B,WACAklG,yBACAuK,cACAyC,2BACAC,iBACA/yG,YACAgzG,oBAlBch5H,EA9GOi5H,EACzB/jG,cACAtO,WACAklG,yBACAuK,cACAyC,2BACAC,iBACA/yG,YACAgzG,qBAEA,MAAM,qBAAE9M,IAAyB7uH,EAAAA,EAAAA,MAE3Be,GAAO2mC,EAAAA,GAAAA,KACPD,GAAUzmC,EAAAA,EAAAA,KAEV2rH,GAAepsH,EAAAA,EAAAA,IAAgB,KAC9Bs3B,GAELg3F,EAAqB,CACnB15H,KAAM,cACNkiI,0BAA0B,OAIxBn/E,GAAiBtkD,EAAAA,EAAAA,KAAY,EAAG2sB,gBAChCA,IAAc6xC,EAAAA,GAAkBC,WAClChB,IAAa,KACXw9D,EAAqB,CACnB15H,KAAM,qBAIX,IAEG45H,GAAgBhzH,EAAAA,EAAAA,KAAQ,IACvBwtB,GAAgC,IAApBA,EAAS9zB,OAInB8zB,EACJ9hB,KAAK3T,IACJ,MAAO0M,EAAQiM,IAAauiH,EAAAA,GAAAA,GAAqBl7H,GACjD,OAAO26H,IAAyBjuH,IAASm6B,KAAKluB,MAE/CilB,OAAO3yB,SARDw5B,GAAAA,GASR,CAAChP,EAAUklG,IAsBd,OACEx6H,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CACTzvB,MAAMs6H,EAAAA,GAAAA,GAAsB,iBAAkBF,OAAgBhlI,EAAWoK,EAAK8kB,OAC9EoL,UAAWwqG,GAA4B9yG,EAAY,EAAI,EAAE30B,SAExDynI,GAA4B9yG,GAC3B10B,EAAAA,GAAAA,GAAC8kI,GAAyB,CACxBlhG,YAAaA,EACbmhG,YAAaA,EACbC,SAAUtM,EACVhkG,UAAWA,KAGb10B,EAAAA,GAAAA,GAAA,OAAKF,UAAU,sBAAqBC,UAClCH,EAAAA,GAAAA,IAACslD,GAAAA,EAAc,CAEbplD,UAAU,yCACVqlD,MAAO21E,EACP11E,WAAYnB,EACZqa,YAAU,EAAAv+D,SAAA,CAET0nI,IACCznI,EAAAA,GAAAA,GAACm7H,GAAAA,EAAY,CACXtmH,KAAM2+B,EAAQ,6BACdrnC,YAAaqnC,EAAQ,wCACrB4nF,aAAW,IAGdtwH,QAAQgwH,EAAct5H,UACrB5B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,OAAMC,SAAA,EACnBC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,kBAAkBsW,IAAKtJ,EAAK8kB,MAAQ,YAASlvB,EAAU3C,SAClE+M,EAAK,iBAEPguH,EAActnH,KArD7B,SAA4B5S,GAC1B,MAAMsoD,GAAYra,EAAAA,EAAAA,MAAYsa,MAAMziB,KAE9B7xB,GAAOwpH,EAAAA,EAAAA,GAAqB7qF,EAAS5yC,GACrCqO,EAAOi6C,EAAUtoD,EAAQ2L,QAE/B,GAAKsI,GAAS5F,EAId,OACEjP,EAAAA,GAAAA,GAAC2+H,GAAW,CAEVpyH,OAAQ3L,EAAQ2L,OAChB3L,QAASA,EACTgjC,YAAaA,GAHR,GAAGhjC,EAAQ2L,UAAU3L,EAAQf,KAMxC,SAiBe+jC,WCtEXikG,GAAkB,CACtB,CAAE3mI,KAAM4mI,EAAAA,GAAoB7pG,SAAUzY,IAAK,kBAC3C,CAAEtkB,KAAM4mI,EAAAA,GAAoBC,YAAaviH,IAAK,qBAC9C,CAAEtkB,KAAM4mI,EAAAA,GAAoBE,QAASxiH,IAAK,iBAC1C,CAAEtkB,KAAM4mI,EAAAA,GAAoBG,YAAaziH,IAAK,wBAC9C,CAAEtkB,KAAM4mI,EAAAA,GAAoBjD,MAAOr/G,IAAK,kBACxC,CAAEtkB,KAAM4mI,EAAAA,GAAoBI,MAAO1iH,IAAK,kBACxC,CAAEtkB,KAAM4mI,EAAAA,GAAoBK,MAAO3iH,IAAK,kBACxC,CAAEtkB,KAAM4mI,EAAAA,GAAoBM,MAAO5iH,IAAK,kBACxC,CAAEtkB,KAAM4mI,EAAAA,GAAoBO,MAAO7iH,IAAK,mBAGpC8iH,GAAuB,CAC3B,CAAEpnI,KAAM4mI,EAAAA,GAAoB7pG,SAAUzY,IAAK,wBACxCqiH,GAAKzpF,MAAM,IAkIhB,IAAez/C,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM,eAAEknI,EAAc,OAAEh8H,IAAWuC,EAAAA,EAAAA,KAAezN,GAAQi8D,cACpD,eAAEoqE,IAAmBl3D,EAAAA,GAAAA,GAAqBnvE,GAEhD,MAAO,CAAEknI,iBAAgBh8H,SAAQm7H,oBALjBh5H,EA/H0B85H,EAC5C5kG,cACAw7F,aACA7lH,WACAgvH,iBAAiBT,EAAAA,GAAoB7pG,SACrC1xB,SACAm7H,iBACAlpE,cAEA,MAAM,uBACJiqE,EAAsB,oBACtBC,EAAmB,sBACnBjD,IACE15H,EAAAA,EAAAA,MAEEe,GAAO2mC,EAAAA,GAAAA,MACNk1F,EAAWC,IAAgB18H,EAAAA,EAAAA,IAASq8H,GACrCzI,GAAkBh4H,EAAAA,EAAAA,KAAQ,KAAM+gI,EAAAA,GAAAA,IAAgBjlG,IAAc,CAACA,KAErEt5B,EAAAA,EAAAA,KAAU,KACJiP,GACFksH,EAAsB,CAAC,KAExB,CAAClsH,IAEJ,MAAMi4D,GAAO1pE,EAAAA,EAAAA,KAAQ,KACPyE,EAAS+7H,GAAYT,IACtBr0H,KAAKmlE,IAAG,IACdA,EACHzrE,MAAOJ,EAAK6rE,EAAInzD,UAEjB,CAACjZ,EAAQO,IAENg8H,GAAkBx8H,EAAAA,EAAAA,IAAiBhI,IACvC,MAAMq0E,EAAMnH,EAAKltE,GACjBmkI,EAAuB,CAAE31H,QAAS6lE,EAAIz3E,OACtC0nI,EAAatkI,MAGTykI,GAAyBz8H,EAAAA,EAAAA,IAAiBI,IAC9Cg8H,EAAoB,CAAE11G,KAAMtmB,EAAMopD,UAAY,UAGhDhrC,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,IAGV,MAAMn1C,GAAejgB,EAAAA,EAAAA,MACfmc,GAAgBykC,EAAAA,GAAAA,GAA0B3gC,EAAc9P,OAAU7W,EAAW,oBAAoB,GAEvG,OACE9C,EAAAA,GAAAA,IAAA,OAAKE,UAAU,aAAakU,IAAKqV,EAAciiC,UAAW/lC,EAAcxlB,SAAA,EACtEC,EAAAA,GAAAA,GAACgpI,GAAAA,EAAO,CAACL,UAAWA,EAAWn3D,KAAMA,EAAMy3D,YAAaH,KACxD9oI,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CACTzvB,MAAMs6H,EAAAA,GAAAA,GAAsB,iBAAkBF,OAAgBhlI,EAAWoK,EAAK8kB,OAC9Es3G,YAAa13D,EAAKhwE,OAClBw7B,UAAWurG,EAAexoI,SAEzB,MACC,OAAQwoI,GACN,KAAKT,EAAAA,GAAoB7pG,SACzB,KAAK6pG,EAAAA,GAAoBC,YACvB,OAAIx7H,GAEAvM,EAAAA,GAAAA,GAAC6/H,GAAkB,CACjBj8F,YAAaA,EACbk8F,gBAAiBA,EACjBthE,QAASA,EACTuhE,mBAAoBgJ,KAKxB/oI,EAAAA,GAAAA,GAAC6hI,GAAW,CACVT,cAAemH,IAAmBT,EAAAA,GAAoBC,YACtDnkG,YAAaA,EACbw7F,WAAYA,EACZU,gBAAiBA,EACjBthE,QAASA,EACTuhE,mBAAoBgJ,IAG1B,KAAKjB,EAAAA,GAAoBjD,MACvB,OAAO7kI,EAAAA,GAAAA,GAACykI,GAAY,CAAC7gG,YAAaA,IACpC,KAAKkkG,EAAAA,GAAoBI,MACvB,OAAOloI,EAAAA,GAAAA,GAACskI,GAAW,CAAC1gG,YAAaA,IACnC,KAAKkkG,EAAAA,GAAoBK,MACvB,OAAOnoI,EAAAA,GAAAA,GAAC+jI,GAAW,CAACngG,YAAaA,IACnC,KAAKkkG,EAAAA,GAAoBM,MACvB,OACEpoI,EAAAA,GAAAA,GAAC26H,GAAY,CAEX/2F,YAAaA,GADT,SAIV,KAAKkkG,EAAAA,GAAoBO,MACvB,OACEroI,EAAAA,GAAAA,GAAC26H,GAAY,CAEXL,SAAO,EACP12F,YAAaA,GAFT,SAKV,KAAKkkG,EAAAA,GAAoBE,QACvB,OACEhoI,EAAAA,GAAAA,GAAC89H,GAAa,CAEZl6F,YAAaA,GADT,WAIV,KAAKkkG,EAAAA,GAAoBG,YACvB,OACEjoI,EAAAA,GAAAA,GAAC2nI,GAAkB,CAEjB/jG,YAAaA,GADT,eAIV,QACE,OAEL,EA9DA,Y,gBClHT,MAAMulG,GAA4B,CAChC7tB,gBAAiB,GACjBD,SAAU,GACVR,KAAM,GACNuuB,MAAO,IAGHC,GAAuDA,CAC3DttE,EACAp6D,KAEA,OAAQA,EAAOT,MACb,IAAK,qBACH,MAAO,IACF66D,EACHu/C,gBAAiB35G,EAAO2nI,SAG5B,IAAK,cACH,MAAO,IACFvtE,EACHs/C,SAAU15G,EAAO2nI,SAGrB,IAAK,UACH,MAAO,IACFvtE,EACH8+C,KAAMl5G,EAAO2nI,SAGjB,IAAK,WACH,MAAO,IACFvtE,EACHqtE,MAAOznI,EAAO2nI,SAGlB,IAAK,QACH,OAAOH,GAET,QACE,OAAOptE,I,oDClBb,MAqIA,IAAep9D,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACQ,CACLkoI,UAAUC,EAAAA,GAAAA,GAAmBnoI,EAAQ,yBAHvBqN,EArI0C+6H,EAC5DC,OACA3tE,QACA4tE,WACApwH,WACAilD,UACAorE,eACAL,eAEA,MAAMz8H,GAAOC,EAAAA,EAAAA,MAEP,sBAAE88H,IAA0B99H,EAAAA,EAAAA,OAE5B,WAAE+9H,GAAe/tE,GACjB,gBAAEguE,EAAe,kBAAEC,IAAsBliI,EAAAA,EAAAA,KAAQ,KAAMmiI,EAAAA,GAAAA,GAAkBluE,EAAO2tE,GAAM,IAAO,CAACA,EAAM3tE,IACpGmuE,EAAqB,aAATR,EAAsBS,GAAAA,GAAkCC,GAAAA,IAEnEC,EAAWC,IAAgBp+H,EAAAA,EAAAA,KAAS,GAErCq+H,GAAsBC,EAAAA,GAAAA,IAA8BzH,EAAAA,KACpD0H,GAA2BD,EAAAA,GAAAA,IAA8BE,EAAAA,KAEzDC,EAAsB5uE,EAAMuf,OAAOsvD,YAEzCtgI,EAAAA,EAAAA,KAAU,KACHiP,GACH+wH,GAAa,KAEd,CAAC/wH,IAEJ,MAAMuqB,GAAeh8B,EAAAA,EAAAA,KAAQ,KAC3B,MAAM+iI,EAAU,IAAIN,GAAuB,MAAOE,GAA4B,IAC9E,OAAOzmG,EAAAA,GAAAA,IAAO,KACTC,EAAAA,GAAAA,IAAmB,CAAEC,IAAK2mG,EAAS1mG,MAAO2lG,EAAY5oI,KAAM,aAEhE,CAACqpI,EAAqBE,EAA0BX,IAE7Cx7C,GAAqBhiF,EAAAA,EAAAA,IAAiBw+H,IAC1CnB,EAAS,CACPzoI,KAAM,gBACNooI,QAASwB,IAEXR,GAAa,MAGTz6C,GAA0BvjF,EAAAA,EAAAA,IAAiB43B,IAC/C,GAAa,aAATwlG,EAAqB,CACvB,GAAIxlG,EAAI1iC,QAAU+nI,EAIhB,YAHAM,EAAsB,CACpBn6G,MAAO,uBAIXi6G,EAAS,CACPzoI,KAAM,oBACNooI,QAAS,IAAKvtE,EAAMgvE,eAAgBC,gBAAiB9mG,IAEzD,MACEylG,EAAS,CACPzoI,KAAM,oBACNooI,QAAS,IAAKvtE,EAAMkvE,eAAgBC,gBAAiBhnG,KAGzDomG,GAAa,MAGTa,GAAgC7+H,EAAAA,EAAAA,IAAiBs9C,IACrD,MAAMwhF,EAAsC,CAAC,EAC7CxhF,EAAKpyC,SAASgO,IACZ4lH,EAAW5lH,IAAO,KAIlBmkH,EADW,aAATD,EACO,CACPxoI,KAAM,oBACNooI,QAAS,CACP0B,gBAAiBjB,KACdqB,IAIE,CACPlqI,KAAM,oBACNooI,QAAS,CACP4B,gBAAiBnB,KACdqB,KAITd,GAAa,MAQf,OALAx/G,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,IAGL16B,GAKHlkC,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,GAAAA,GAACokC,GAAAA,EAAU,CACTinG,WAAYV,OAAsBjoI,EAAYwnI,EAC9C7lG,QAASP,EACTL,YAAasmG,EACbuB,mBAAoBtB,EACpBxlG,YAAaslG,EACbrlG,kBAAmB33B,EAAK,UACxBy+H,uBAAuB,kBACvB7mG,cAAc,0BACdC,cAAY,EACZC,oBAAkB,EAClB4mG,eAAa,EACbxmG,eAAa,EACbE,cAAc,WACdJ,oBAAqB+qD,EACrB47C,2BAA4BN,EAC5BpmG,eAAgBupD,KAGlBtuF,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,QAASmkG,EACTv8H,QAAS87H,EACTt3H,UAAWxF,EAAK,QAAQ/M,UAExBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,gBA7BRtN,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,QCzENggF,GAAiB,0CACjBC,GAAiB,8BA6U9B,IAAehtI,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAU06D,YACT,MAAM,QAAEhQ,GAAY1qD,EAAO8nD,OACrB,KAAEziB,EAAI,QAAEklG,GAAYvqI,EAAOg7H,YAC3BwP,EAAgB9sF,OAAOyK,OAAO9iB,GAAM8X,QAAO,CAACiL,EAAKqiF,IAAOriF,GAAOqiF,EAAGlB,WAAa,EAAI,IAAI,GAE7F,MAAO,CACLmB,oBAAqBhgF,EAAQ7O,OAC7B8uF,sBAAuBjgF,EAAQI,SAC/By/E,QAAS7vE,EAAM+f,SAAY8vD,EAAQ7vE,EAAM+f,WAAax3C,GAAAA,OAAoB5hC,EAC1EupI,eAA8BvpI,IAAnBq5D,EAAM+f,WAA2Bp1C,EAAKq1B,EAAM+f,UACvDowD,gBAAgB1C,EAAAA,GAAAA,GAAmBnoI,EAAQ,mBAC3C8qI,cAAc3C,EAAAA,GAAAA,GAAmBnoI,EAAQ,kBACzCwqI,mBAbcn9H,EA3UmC09H,EACrDrwE,QACA4tE,WACA0C,qBACAC,qBACAC,gBACAC,eACAjzH,WACAilD,UACAytE,YACAlhH,SACAghH,sBACAU,gBACAT,wBACAJ,UACAM,iBACAC,eACAN,gBACAa,mBAEA,MAAM,oBACJC,EAAmB,sBACnB9C,EAAqB,iBACrBnoG,IACE31B,EAAAA,EAAAA,MAEE6gI,EAA4B,WAAf7wE,EAAM2tE,KACnBmD,EAAoB9wE,EAAMuf,OAAOsvD,YAEhCkC,EAA6BC,IAAkC7gI,EAAAA,EAAAA,KAAS,IACxE8gI,EAA6BC,IAAkC/gI,EAAAA,EAAAA,KAAS,IAE/E5B,EAAAA,EAAAA,KAAU,KACJ2hI,GACFztE,MAED,CAACytE,EAAWztE,KAEfl0D,EAAAA,EAAAA,KAAU,KACJiP,GAAYwiD,EAAM+f,UAAY/f,EAAMuf,OAAOsvD,YAC7C+B,EAAoB,CAAE7wD,SAAU/f,EAAM+f,aAEvC,CAACviE,EAAUwiD,EAAMuf,OAAOsvD,WAAY7uE,EAAM+f,WAE7C,MACEiuD,gBAAiBiB,EACjBhB,kBAAmBkD,IACjBplI,EAAAA,EAAAA,KAAQ,KAAMmiI,EAAAA,GAAAA,GAAkBluE,EAAO,aAAa,CAACA,KAEvDguE,gBAAiBmB,EACjBlB,kBAAmBmD,IACjBrlI,EAAAA,EAAAA,KAAQ,KAAMmiI,EAAAA,GAAAA,GAAkBluE,EAAO,aAAa,CAACA,KAEzDzxD,EAAAA,EAAAA,KAAU,KACRyiI,GAA+B,GAC/BE,GAA+B,KAC9B,CAAClxE,EAAM+f,WAEV,MAAOsxD,EAAwBC,IAA0BvlI,EAAAA,EAAAA,KAAQ,KAC/D,MAAMwlI,EAAoB,IAAI9/C,IAAI,IAC5Bu+C,GAAuB,MACvBC,GAAyB,KAGzBuB,GAAwBC,EAAAA,GAAAA,IAAwBxC,EAAiBsC,GACjEG,GAAwBD,EAAAA,GAAAA,IAAwBtC,EAAiBoC,GAEvE,MAAO,CACLR,EACIS,EACAA,EAAsBnvF,MAAM,EA3EV,EA2EmC8uF,EAAkB1rI,QAC3EwrI,EACIS,EACAA,EAAsBrvF,MAAM,EA9EV,EA8EmC+uF,EAAkB3rI,WAE5E,CACD0pI,EAAiBF,EAAiBkC,EAAmBC,EACrDH,EAA6BF,EAC7Bf,EAAqBC,IAGjBl/H,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,WAGF,MAAMs8D,GAAe1nF,EAAAA,EAAAA,KAAakvB,IAChC,MAAM,cAAEpK,GAAkBoK,EAC1B86G,EAAS,CAAEzoI,KAAM,WAAYooI,QAAS7kH,EAAc/X,MAAM88D,WACzD,CAACmgE,IAEE7jG,GAAenmC,EAAAA,EAAAA,KAAY,KAC/BgqI,EAAS,CAAEzoI,KAAM,eAAgBooI,SAAS,IAE1CoD,GAAa,KACX9hI,YAAW,KACT4zD,MAzGe,UA4GlB,CAACmrE,EAAU+C,EAAcluE,IAEtBkvE,GAA0B/tI,EAAAA,EAAAA,KAAY,KACrCisI,GAQA+B,EAAAA,EAAAA,MAAqB9+F,EAAAA,EAAAA,MAAaktB,EAAM+f,UAKzC+vD,GAAiBM,IAAiBpwE,EAAMuf,OAAOsvD,WACjDf,EAAsB,CACpBn6G,MAAO,mBAKPk8G,EAAQpqI,OAAS0qI,EACfnwE,EAAMsuE,UACRqC,EAAaH,GAEbA,IAKJ1C,EAAsB,CACpBn6G,MAAO,oBArBPgS,EAAiB,CAAE9gC,QAASkM,EAAK,oDAR7B8/H,GACFF,EAAaH,KA8BhB,CACDX,EAAS7vE,EAAM+f,SAAU/f,EAAMsuE,UAAWwB,EAAeK,EAAgBU,EAAYF,EACrFH,EAAez/H,EAAMq/H,EAAcpwE,EAAMuf,OAAOsvD,aAG5CgD,GAAwBjuI,EAAAA,EAAAA,KAAY,CAACiN,EAAkC0K,KACvEykD,EAAMsuE,UACRqC,GAAa,IAAMF,EAAal1H,KAEhCk1H,EAAal1H,KAEd,CAACo1H,EAAcF,EAAczwE,EAAMsuE,YA0BtC,SAASwD,EAAYnE,GACnB,MAAMM,EAA6B,aAATN,EAAsBwD,EAAoBC,EAC9DW,EAA0B,aAATpE,EAAsB0D,EAAyBC,EAEhE5hG,EAAsB,aAATi+F,EAAsBoD,EAA8BE,EAEjEe,GADsB,aAATrE,EAAsBsB,EAAkBE,GACzB1pI,OAASssI,EAAetsI,OACpDwsI,EAAwB,aAATtE,EACjB,IAAMqD,GAA+B,GACrC,IAAME,GAA+B,GAEzC,OACErtI,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,CACGiqI,EAAkBx2H,KAAKgS,GArC9B,SAAwBA,EAAakkH,GACnC,MAAMuE,EAAoB,aAATvE,EACbS,GAAAA,GAAgC54F,MAAK,EAAGrwC,KAAMgtI,KAAcA,IAAY1oH,IACxE4kH,GAAAA,GAAgC74F,MAAK,EAAGrwC,KAAMgtI,KAAcA,IAAY1oH,IAE5E,GAAKyoH,EAIL,OACEjuI,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAEPxiC,UAAU,kCACVi+G,QAAM,EACNv7E,UAAQ,EAAAziC,UAERC,EAAAA,GAAAA,GAACiiD,GAAAA,EAAe,CACdw0E,WAAW,QACX3d,WAAYm1B,KAPTA,EAAS/sI,KAWpB,CAesCitI,CAAe3oH,EAAKkkH,KACnDoE,EAAet6H,KAAK3T,IACnBG,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPxiC,UAAU,kCACVi+G,QAAM,EACNv7E,UAAQ,EAAAziC,UAEP0O,EAAAA,EAAAA,IAAS5O,IACRG,EAAAA,GAAAA,GAACiiD,GAAAA,EAAe,CAACw0E,WAAW,QAAQ94F,OAAQ99B,KAE5CG,EAAAA,GAAAA,GAACoiD,GAAAA,EAAa,CAACq0E,WAAW,QAAQlqH,OAAQ1M,SAI7C4rC,GAAcsiG,EAAiB,IAChC/tI,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAEPxiC,UAAU,6BACVi+G,QAAM,EAENjwG,QAASkgI,EACTh7H,KAAK,OAAMjT,SAEV+M,EAAK,sBAAuBihI,EAAgB,MAPzC,eAYd,CAEA,OACEnuI,EAAAA,GAAAA,IAAA,OAAKE,UAAU,uBAAsBC,SAAA,EACnCH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2CAA0CC,SAAA,EACvDH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,0BAAyBC,SAAA,EACtCC,EAAAA,GAAAA,GAACqkG,GAAAA,EAAuB,CACtBnkG,KAAMkuI,EAAAA,IACNhuI,OAAQC,GAAAA,EAAeguI,WACvBpvD,KAAMhgC,OAAO8c,EAAM+f,UACnBh8E,UAAU,0BAGX8sI,IACC5sI,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAC/E+M,EAAK,wBAIV9M,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACR5N,UAAU,OACVmN,MAAOH,EAAK,kBACZJ,MAAOqvD,EAAMuf,OAAOpuE,MAAM2H,KAC1BrH,SAAU65E,EACVn4B,MAAO6M,EAAM7M,OAAS6M,EAAM7M,QAAUw8E,GAAiBA,QAAiBhpI,QAI1E+pI,IACA7sI,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,CAC3Bg8D,EAAM7M,OAAS6M,EAAM7M,QAAUy8E,KAC9B3rI,EAAAA,GAAAA,GAAA,KAAGF,UAAU,8CAA8CsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAC5F+M,EAAKivD,EAAM7M,UAIhBlvD,EAAAA,GAAAA,GAAA,MAAIF,UAAU,4BAA4BsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAE+M,EAAK,oBAErF9M,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPxiC,UAAU,2CACVkT,KAAK,MACL+qG,QAAM,EACNjwG,QAASu+H,EAAmBtsI,SAE3B+M,EAAK,oBAGP+gI,EAAY,gBAIfpB,IAAkBI,IAClBjtI,EAAAA,GAAAA,IAAA,OAAKE,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,4BAA4BsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAE+M,EAAK,oBAErF9M,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPxiC,UAAU,2CACVkT,KAAK,MACL+qG,QAAM,EACNjwG,QAASw+H,EAAmBvsI,SAE3B+M,EAAK,oBAGP+gI,EAAY,gBAIjBjuI,EAAAA,GAAAA,IAAA,OAAKE,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,4BAA4BsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAC3E+M,EAAK,6BAGR9M,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPxiC,UAAU,2CACVkT,KAAK,MACL+qG,QAAM,EACNjwG,QAAS4/H,EAAwB3tI,SAEhC+M,EAAK,kCAGP8+H,GAASp4H,KAAK6hG,IACbz1G,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPxiC,UAAU,6BACVkT,KAAK,OACL+qG,QAAM,EACNx7E,WAAS,EACTz0B,QAAS8/H,EACT5sC,SAAUqU,EAAO/9F,IAAIvX,SAAA,EAErBC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAQsW,IAAI,OAAMrW,SAAEs1G,EAAOnoG,OAASmoG,EAAO/9F,OAC3DtX,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SACvB+M,EAAK,oCAAqCuoG,EAAOl4D,QAAQ37C,OAAQ,mBAQ5ExB,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,QAASp7B,QAAQixD,EAAMsuE,WACvBnqH,SAAU67C,EAAMrnC,UAChB5mB,QAASg4B,EACTxzB,UAA0B,SAAfypD,EAAM2tE,KAAkB,eAAiB,gBAAgB3pI,SAEnEg8D,EAAMrnC,WACL10B,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf5N,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,mB,gBCnVrB,MACMghI,IAAiCz4H,EAAAA,GAAAA,KAAUwnD,GAAOA,KAAM,KAAO,GAgUrE,IAAe1+D,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MACE6wC,WAAYq8F,EACZ7nG,KAAM8nG,EACNC,YAAaC,GACXrtI,EAAOg7H,YAEX,MAAO,CACLkS,YACAC,cACA1qD,WAAWxiD,EAAAA,EAAAA,KAA2BjgC,GACtCqtI,yBACAC,YAAYnF,EAAAA,GAAAA,GAAmBnoI,EAAQ,oBAbzBqN,EA9TmCkgI,EACrDr1H,WACAs1H,iBACAC,eACAtwE,UACA+vE,YACAC,cACA1qD,YACA4qD,yBACAC,iBAEA,MAAM,2BACJI,EAA0B,cAC1BC,EAAa,sBACbnF,EAAqB,0BACrBpuD,EAAyB,gBACzBwzD,IACEljI,EAAAA,EAAAA,OAEGgwD,EAAOmzE,IAAYhjI,EAAAA,EAAAA,IAAoB,CAC5CijI,iBAAkBZ,EAClBa,aAAcb,EACdc,kBAAc3sI,IAGV4sI,GAAgBj5G,EAAAA,EAAAA,GAAsBk4G,IAG5CjkI,EAAAA,EAAAA,KAAU,KACJglI,IAAkBf,GACpBW,EAAS,CACPC,iBAAkBZ,EAClBa,aAAcb,EACdc,kBAAc3sI,MAGjB,CAAC4sI,EAAef,EAAWxyE,EAAMozE,kBAAkB3tI,UAItD8I,EAAAA,EAAAA,KAAU,KACRgkI,IAA+B,KAC7BS,SAED,CAACA,IAEJ,MAAMQ,GAAqB5vI,EAAAA,EAAAA,KAAY,KACjCo/C,OAAO6K,KAAK4kF,GAAahtI,QAAUmtI,EAAa,EAClD9E,EAAsB,CACpBn6G,MAAO,kBAMXm/G,MACC,CAACL,EAAaG,EAAYE,EAAgBhF,IAEvC/8H,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,IAGV,MAAMgxE,GAAuBC,EAAAA,GAAAA,MACvBC,GAAc5nI,EAAAA,EAAAA,KAAQ,KAC1B,GAAKymI,EAIL,OAAIA,EAAU/sI,QAAU,EACf8iC,GAAAA,EAGFiqG,EAAU/6H,KAAK3T,IACpB,MAAMy7E,EAASkzD,EAAY3uI,GAE3B,OAAIA,IAAOkjI,EAAAA,IACF,CACLljI,KACAqN,MAAO,CACL2H,KAAM/H,EAAK,kBACXk/E,SAAU,KAKT,CACLnsF,GAAIy7E,EAAOz7E,GACXqN,MAAOouE,EAAOpuE,MACdylB,UAAUg9G,EAAAA,EAAAA,IAAyB7iI,EAAMwuE,EAAQk0D,EAAqBl0D,EAAOz7E,KAC7E+qI,WAAYtvD,EAAOsvD,WACnB50B,kBAAmB16B,EAAO06B,wBAG7B,CAACu4B,EAAWC,EAAa1hI,EAAM0iI,IAE5BI,GAAoCjwI,EAAAA,EAAAA,KAAa27E,IACjDv8B,OAAO6K,KAAK4kF,GAAahtI,QAAUmtI,EAAa,EAClD9E,EAAsB,CACpBn6G,MAAO,kBAMXs/G,EAAc,CAAE1zD,aACf,CAACkzD,EAAaG,EAAYK,EAAenF,IAEtClzD,GAAah3E,EAAAA,EAAAA,KAAY,CAACkwI,EAAuChwI,KACrE,MAAMsxB,EAAQle,KAAKZ,MAAMw9H,EAAYhtH,EAlHhB,IAmHfve,EAAQy3D,EAAMozE,kBAAkB/yG,QAAQv8B,IAAiB,EACzDuvI,EAAerzE,EAAMozE,kBAAkB1xG,QAAQq+C,GAAaA,IAAaj8E,IAE1EuvI,IAAiB9hH,EAAAA,GAAAA,IAAUhpB,EAAQ6sB,EAAO,EAAGo9G,GAAW/sI,QAAU,KAIvE4tI,EAAalhD,OAAO5pF,EAAQ6sB,GAAS2yD,EAAY,EAAI,GAAI,EAAGjkF,GAC5DqvI,GAAU3lI,IAAO,IACZA,EACH8lI,aAAc/qI,EACd8qI,sBAED,CAACb,GAAW/sI,OAAQsiF,EAAW/nB,EAAMozE,mBAElCW,GAAgBnwI,EAAAA,EAAAA,KAAY,KAChCuvI,GAAU3lI,IACR0lI,EAAgB,CAAEV,UAAWhlI,EAAQ6lI,eAE9B,IACF7lI,EACH4lI,iBAAkB5lI,EAAQ6lI,aAC1BC,kBAAc3sI,QAGjB,CAACusI,IAEEc,GAAqBjoI,EAAAA,EAAAA,KAAQ,KACzBg8E,GAAa/kC,OAAO6K,KAAK4kF,GAAahtI,OAASmtI,EAAa,GACnE,CAACH,EAAa1qD,EAAW6qD,IAE5B,OACE/uI,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2CAA0CC,SAAA,EACvDH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,0BAAyBC,SAAA,EACtCC,EAAAA,GAAAA,GAACqkG,GAAAA,EAAuB,CACtBnkG,KAAMkuI,EAAAA,IACNhuI,OAAQC,GAAAA,EAAe2vI,WACvBlwI,UAAU,2BAGZE,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCsW,IAAI,OAAMrW,SACrD+M,EAAK,yBAGPijI,IACCnwI,EAAAA,GAAAA,IAAC+N,EAAAA,EACD,CACE7N,UAAU,4BACV8N,MAAM,UACN1N,KAAK,UACL6oG,MAAI,EACJ3kD,OAAK,EACLt2C,QAASyhI,EACT39G,MAAO9kB,EAAK8kB,MAAM7xB,SAAA,EAElBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,QACVR,EAAK,0BAKZlN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,4BAA4BsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAE+M,EAAK,cAErF9M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,8BAA8B+F,MAAO,WAnLnC,IAmL+C0oI,GAAW/sI,QAAU,OAA0BzB,SAC5G2vI,GAAaluI,OAASkuI,EAAYl8H,KAAI,CAAC8nE,EAAQ71B,KAC9C,MAAMwqF,EAAYxqF,EAAIkpF,EAAa,EAC7BuB,EAAYn0E,EAAMszE,eAAiB5pF,EACnC0qF,EAvLO,IAuLOp0E,EAAMozE,kBAAkB/yG,QAAQk/C,EAAOz7E,KAAO,GAC5DujB,EAxLO,IAwLA24C,EAAMqzE,cAAchzG,QAAQk/C,EAAOz7E,KAAO,GAEvD,OAAIy7E,EAAOz7E,KAAOkjI,EAAAA,KAEd/iI,EAAAA,GAAAA,GAACowI,GAAAA,EAAS,CAERvwI,GAAIy7E,EAAOz7E,GACXsd,OAAQw5D,EACR05D,UAAWP,EACXjqI,MAAO,QAAQqqI,EAAYC,EAAa/sH,OACxCktH,WAAcxjI,EAAK8kB,MAAQ,OAAS,SAAzB,cACX5nB,YAAa85E,IAAcvqE,EAASxZ,UAEpCH,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CAEPxiC,UAAU,2CACVi+G,QAAM,EACNv7E,UAAQ,EACRD,WAAS,EACTguG,UAAQ,EACRC,gBAAc,EAAAzwI,SAAA,EAEdC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,UACpBurC,EAAAA,GAAAA,IAAuB,CACtBz2B,KAAMymE,EAAOpuE,MAAM2H,KACnBm3E,SAAU1Q,EAAOpuE,MAAM8+E,SACvB+pB,sBAAuBz6B,EAAO06B,uBAGlCh2G,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAE+M,EAAK,2BAf5BwuE,EAAOz7E,KATTy7E,EAAOz7E,KA+BhBG,EAAAA,GAAAA,GAACowI,GAAAA,EAAS,CAERvwI,GAAIy7E,EAAOz7E,GACXsd,OAAQw5D,EACR05D,UAAWP,EACXjqI,MAAO,QAAQqqI,EAAYC,EAAa/sH,OACxCktH,WAAcxjI,EAAK8kB,MAAQ,OAAS,SAAzB,UACX5nB,WAAYimI,IAAc12H,EAASxZ,UAEnCH,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPxiC,UAAU,2CACVi+G,QAAM,EACNC,cAAc,OACdz7E,WAAS,EACTqe,eAAgB,CACd,CACEK,QAASA,KACPw6B,EAA0B,CAAEK,SAAUR,EAAOz7E,MAE/CuT,aAAa,EACblG,MAAOJ,EAAK,UACZkG,KAAM,WAIVlF,QAASA,KACHmiI,EACFpG,EAAsB,CACpBn6G,MAAO,kBAGTo/G,EAAaN,EAAYlzD,EAAOz7E,MAElCE,SAAA,EAEFH,EAAAA,GAAAA,IAAA,QAAME,UAAU,QAAOC,SAAA,EACpBurC,EAAAA,GAAAA,IAAuB,CACtBz2B,KAAMymE,EAAOpuE,MAAM2H,KACnBm3E,SAAU1Q,EAAOpuE,MAAM8+E,SACvB+pB,sBAAuBz6B,EAAO06B,oBAE/Bi6B,IAAajwI,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAAaxN,UAAU,sCAElDF,EAAAA,GAAAA,IAAA,QAAME,UAAU,WAAUC,SAAA,CACvBu7E,EAAOsvD,aAAc5qI,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,OAAOxN,UAAU,SACjDw7E,EAAO3oD,gBA5CP2oD,EAAOz7E,OAiDb6vI,IAAgBA,EAAYluI,QAC/BxB,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCsW,IAAI,OAAMrW,SAAC,8BAGvDC,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,SAIdgjF,GAA0B5jI,QAAQ4jI,EAAuBltI,UACzD5B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,4BAA4BsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAC3E+M,EAAK,uBAGP4hI,EAAuBl7H,KAAK8nE,IAC3Bt7E,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPy7E,QAAM,EAENjwG,QAASA,IAAM8hI,EAAkCt0D,GAAQv7E,UAEzDH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oCAAmCC,SAAA,EAChDH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,UACpBurC,EAAAA,GAAAA,IAAuB,CACtBz2B,KAAMymE,EAAOpuE,MAAM2H,KACnBm3E,SAAU1Q,EAAOpuE,MAAM8+E,SACvB+pB,sBAAuBz6B,EAAO06B,uBAGlCh2G,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAEu7E,EAAOnvE,kBAGrCnM,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,OACV8N,MAAM,UACN1N,KAAK,OACL6oG,MAAI,EACJ3kD,OAAK,EACLxyB,MAAO9kB,EAAK8kB,MAAM7xB,SAEjB+M,EAAK,0B,eC5TxB,MAsKA,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM,SAAEy6E,EAAQ,IAAExkE,EAAG,UAAEod,IAAc5lB,EAAAA,EAAAA,KAAezN,GAAQovI,mBAAqB,CAAC,EAC5En1D,EAASQ,GAAWo7B,EAAAA,EAAAA,KAAiB71G,EAAQy6E,QAAYp5E,EACzD2yG,EAASv5B,EAAWz6E,EAAOg7H,YAAYuP,QAAQ9vD,IAAWvqC,MAAMkU,GAAMA,EAAEnuC,MAAQA,SAAO5U,EAE7F,MAAO,CACLo5E,WACAR,SACAhkE,MACAod,YACAyoB,QAASk4D,GAAQl4D,WAXHzuC,EAtKqCgiI,EACvDn3H,WACAilD,UACAsd,WACAR,SACAn+B,UACA7lC,MACAod,gBAEA,MAAM,qBACJi8G,EAAoB,qBAAEC,EAAoB,mBAAEC,EAAkB,iBAAEnvG,IAC9D31B,EAAAA,EAAAA,MAEEe,GAAO2mC,EAAAA,GAAAA,KACPD,GAAUzmC,EAAAA,EAAAA,MAETs9H,EAAWC,IAAgBp+H,EAAAA,EAAAA,KAAS,IAE3C4e,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,KAGVl0D,EAAAA,EAAAA,KAAU,KACHoqB,GACH41G,GAAa,KAEd,CAAC51G,KAEJpqB,EAAAA,EAAAA,KAAU,MACHgN,GAAOwkE,GAAYviE,GACtBo3H,EAAqB,CAAE70D,eAExB,CAACA,EAAUviE,EAAUjC,IAExB,MAAMw5H,GAAexkI,EAAAA,EAAAA,IAAgB,KAC9BgL,GAAQwkE,IAEb80D,EAAqB,CAAE90D,WAAUxkE,QACjCknD,QAGIn6B,GAAUv8B,EAAAA,EAAAA,KAAQ,KACdwzE,GAAQ0vD,iBAAmB,IAAIj9C,OAAOzS,GAAQy1D,eAAiB,KACtE,CAACz1D,GAAQ0vD,gBAAiB1vD,GAAQy1D,iBAE9BC,EAAattG,IAAa57B,EAAAA,EAAAA,KAAQ,KACvC,MAAMzG,GAASwtC,EAAAA,EAAAA,MACf,OAAOoiG,EAAAA,GAAAA,IAAU5sG,GAAUxkC,IAAOqxI,EAAAA,EAAAA,KAAsB7vI,EAAQxB,OAC/D,CAACwkC,KAEGZ,EAAamtD,IAAkB1kF,EAAAA,EAAAA,IAAmBixC,GAAW,IAE9Dg0F,GAAmB/nI,EAAAA,EAAAA,KAAO,IAChCu8B,EAAAA,GAAAA,IAAsB,EAAEyrG,MAClBA,IAAY95H,IACd65H,EAAiB5nI,SAAU,GAExB4nI,EAAiB5nI,UACtB4nI,EAAiB5nI,SAAU,EACtB+N,EAEM6lC,GACTyzC,EAAezzC,GAFfyzC,EAAeogD,MAIhB,CAAC15H,EAAK05H,EAAa7zF,IAEtB,MAAMk0F,GAAsB/kI,EAAAA,EAAAA,IAAiBzM,IAC3C,MAAMwB,GAASwtC,EAAAA,EAAAA,MACTqB,GAAOC,EAAAA,EAAAA,KAAW9uC,EAAQxB,GAC1BoP,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQxB,GAC5BqwC,IAAQuiD,EAAAA,EAAAA,IAAUviD,GACpBxO,EAAiB,CACf9gC,QAAS4yC,EAAQ,8CAEVtD,EACTxO,EAAiB,CACf9gC,QAAS4yC,EAAQ,+CAEVvkC,IAAQukB,EAAAA,EAAAA,IAAcvkB,GAC/ByyB,EAAiB,CACf9gC,QAAS4yC,EAAQ,wDAGnB9R,EAAiB,CACf9gC,QAAS4yC,EAAQ,yDAKjBq8C,GAA0BvjF,EAAAA,EAAAA,IAAiB43B,IAC/C0sD,EAAe1sD,GACfomG,GAAa,MAGTxkG,GAAex5B,EAAAA,EAAAA,IAAgB,KAC9BwvE,GAAaxkE,GAAQ+yH,GAC1BwG,EAAmB,CAAE/0D,WAAU3+B,QAAS1Z,EAAansB,WAGjDg6H,EAAa7tG,EAAYjiC,OACzBwI,GAAcsnI,GAAc58G,EAElC,OACE90B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,sEAAqEC,SAAA,EAClFH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,0BAAyBC,SAAA,EACtCC,EAAAA,GAAAA,GAACuxI,GAAAA,EAAY,CACXrxI,KAAMkuI,EAAAA,IACNhuI,OAAQC,GAAAA,EAAemxI,aACvB1xI,UAAU,0BAGXw7E,IACCt7E,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCsW,IAAI,OAAMrW,SACrD+M,EAAK,6BAA8B,CAClCwuE,QAAQhwC,EAAAA,GAAAA,IAAuB,CAC7Bz2B,KAAMymE,EAAOpuE,MAAM2H,KACnBm3E,SAAU1Q,EAAOpuE,MAAM8+E,SACvB+pB,sBAAuBz6B,EAAO06B,oBAEhC7sD,MAAOr8C,EAAK,kCAAmC,CAAEqmB,MAAOm+G,GAAc,CAAEp1E,YAAao1E,KACpF,CACDzgF,cAAc,EACdzW,WAAW,UAMnBp6C,EAAAA,GAAAA,GAACwzG,GAAAA,EAAS,CACR1zG,UAAU,gBACV0sF,KAAOl1E,GAAMk8B,EAAQ,WACrBi+F,WAAS,EACTC,SAAUZ,EACV9mI,YAAasnI,GAAcjH,KAG7BrqI,EAAAA,GAAAA,GAAA,OAAKF,UAAU,qCAAoCC,UACjDC,EAAAA,GAAAA,GAACokC,GAAAA,EAAU,CACTC,QAASA,EACTstG,oBAAqBjuG,EACrBoB,oBAAqB+qD,EACrBpsD,YAAaA,EACbupD,gBAAiBqkD,EACjBrsG,eAAa,EACbC,YAAU,EACVC,cAAc,gBAIlBllC,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,QAASxR,GAAa21G,EACtBnqH,SAAUlW,EACV8D,QAASg4B,EACTxzB,UAAU,eAAcvS,SAEvB20B,GACC10B,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf5N,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,mBCyBrB,IAAe3O,EAAAA,EAAAA,KAzMuBizI,EACpCC,gBACAC,cACA/1E,QACA4tE,WACApwH,WACAilD,cAEA,MAAM,yBACJuzE,EAAwB,eACxBC,EAAc,cACdhD,EAAa,mBACbiD,IACElmI,EAAAA,EAAAA,MAEEmmI,GAAcvyI,EAAAA,EAAAA,KAAY,KAE5BkyI,IAAkBM,EAAAA,GAAgBC,qBAC/BP,IAAkBM,EAAAA,GAAgBE,mBAClCR,IAAkBM,EAAAA,GAAgBG,+BAClCT,IAAkBM,EAAAA,GAAgBI,0BAErC3nI,YAAW,KACT++H,EAAS,CAAEzoI,KAAM,YAlCG,KAuCtB2wI,IAAkBM,EAAAA,GAAgBK,sBAC/BX,IAAkBM,EAAAA,GAAgBM,qBAUvCj0E,IARqB,WAAfzC,EAAM2tE,KACRuI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBC,sBAE7CH,EAAmB,CAAES,OAAQP,EAAAA,GAAgBE,sBAMhD,CAACt2E,EAAM2tE,KAAMC,EAAUkI,EAAerzE,IAEnCouE,EAA4B,WAAf7wE,EAAM2tE,KAEnBiJ,GAAYhzI,EAAAA,EAAAA,KAAaizI,IAC7B,MAAM,MAAE1lI,GAAU0lI,EAASt3D,OAE3B,IAAKpuE,EAEH,OADAy8H,EAAS,CAAEzoI,KAAM,WAAYooI,QAASoC,MAC/B,EAGT,MACE3B,gBAAiBiB,EACjBhB,kBAAmBkD,IACjBjD,EAAAA,GAAAA,GAAkB2I,EAAU,YAEhC,OAAK5H,EAAgBxpI,QAAWu9C,OAAO6K,KAAKsjF,GAAmB1rI,QAK1DorI,EAGHoC,EAAc,CAAE1zD,OAAQs3D,EAASt3D,SAFjC02D,EAAe,CAAEnyI,GAAI+yI,EAAS92D,SAAW+2D,aAAcD,EAASt3D,SAKlEquD,EAAS,CAAEzoI,KAAM,WAAYooI,aAAS5mI,IACtCinI,EAAS,CAAEzoI,KAAM,eAAgBooI,SAAS,KAEnC,IAbLK,EAAS,CAAEzoI,KAAM,WAAYooI,QAASqC,MAC/B,KAaR,CAAChC,EAAUiD,IAERkG,GAAmBnzI,EAAAA,EAAAA,KAAa09D,IAC/Bs1E,EAAU52E,IAGfsB,QACC,CAACs1E,EAAW52E,IAETg3E,GAAmBpzI,EAAAA,EAAAA,KAAY,KACnC,MAAMizI,EAAWjJ,EAAS,CAAEzoI,KAAM,gBAClCgxI,IACAS,EAAUC,KACT,CAACjJ,EAAUuI,EAAaS,IAErBpD,GAAqB5vI,EAAAA,EAAAA,KAAY,KACrCgqI,EAAS,CAAEzoI,KAAM,UACjB+wI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBC,wBAC5C,CAACzI,IAEEqJ,GAAmBrzI,EAAAA,EAAAA,KAAa27E,IACpCquD,EAAS,CAAEzoI,KAAM,aAAcooI,QAAShuD,IACxC22D,EAAmB,CAAES,OAAQP,EAAAA,GAAgBE,sBAC5C,CAAC1I,IAEEsJ,GAAyBtzI,EAAAA,EAAAA,KAAY,KACzCgqI,EAAS,CAAEzoI,KAAM,uBACjB+wI,EAAmB,CACjBS,OAAQb,IAAkBM,EAAAA,GAAgBG,8BACtCH,EAAAA,GAAgBe,iCAChBf,EAAAA,GAAgBK,yBAErB,CAACX,EAAelI,IAEbwJ,GAAyBxzI,EAAAA,EAAAA,KAAY,KACzCgqI,EAAS,CAAEzoI,KAAM,uBACjB+wI,EAAmB,CACjBS,OAAQb,IAAkBM,EAAAA,GAAgBG,8BACtCH,EAAAA,GAAgBiB,iCAChBjB,EAAAA,GAAgBM,yBAErB,CAACZ,EAAelI,IAEb0J,GAAoB1zI,EAAAA,EAAAA,KAAY,KACpCoyI,EAAyB,CAAEj2D,SAAU/f,EAAM+f,SAAWw3D,qBAAqB,IAC3E3J,EAAS,CAAEzoI,KAAM,gBAAiBooI,SAAS,IAC3C2I,EAAmB,CAAES,OAAQP,EAAAA,GAAgBX,iBAC5C,CAAC7H,EAAU5tE,EAAM+f,WAEdy3D,GAAmB5zI,EAAAA,EAAAA,KAAa2X,IACpCy6H,EAAyB,CAAEj2D,SAAU/f,EAAM+f,SAAWxkE,MAAKg8H,qBAAqB,IAChFrB,EAAmB,CAAES,OAAQP,EAAAA,GAAgBX,iBAC5C,CAACz1E,EAAM+f,WAEV,OAAQ+1D,GACN,KAAKM,EAAAA,GAAgBqB,QACnB,OACExzI,EAAAA,GAAAA,GAAC4uI,GAAmB,CAClBC,eAAgBU,EAChBT,aAAckE,EACdz5H,SAAUA,GAAY,CACpB44H,EAAAA,GAAgBC,oBAChBD,EAAAA,GAAgBE,kBAChBF,EAAAA,GAAgBK,qBAChBL,EAAAA,GAAgBM,sBAChB5iH,SAASiiH,GACXtzE,QAASA,IAGf,KAAK2zE,EAAAA,GAAgBC,oBACrB,KAAKD,EAAAA,GAAgBE,kBACrB,KAAKF,EAAAA,GAAgBG,8BACrB,KAAKH,EAAAA,GAAgBI,yBACnB,OACEvyI,EAAAA,GAAAA,GAACosI,GAAmB,CAClBrwE,MAAOA,EACP4tE,SAAUA,EACV0C,mBAAoB4G,EACpB3G,mBAAoB6G,EACpB5G,cAAe8G,EACf7G,aAAc+G,EACd/0E,QAAS0zE,EACT34H,SAAUA,GAAY,CACpB44H,EAAAA,GAAgBK,qBAChBL,EAAAA,GAAgBM,sBAChB5iH,SAASiiH,GACXrF,cAAeoF,IAAkBM,EAAAA,GAAgBI,yBACjDxnH,OAAQyzC,EACRkuE,aAAcoG,IAGpB,KAAKX,EAAAA,GAAgBK,qBACrB,KAAKL,EAAAA,GAAgBe,iCACnB,OACElzI,EAAAA,GAAAA,GAACypI,GAA0B,CACzBC,KAAK,WACL3tE,MAAOA,EACP4tE,SAAUA,EACVnrE,QAAS0zE,EACTtI,aAAcmJ,EACdx5H,SAAUA,IAGhB,KAAK44H,EAAAA,GAAgBM,qBACrB,KAAKN,EAAAA,GAAgBiB,iCACnB,OACEpzI,EAAAA,GAAAA,GAACypI,GAA0B,CACzBC,KAAK,WACL3tE,MAAOA,EACP4tE,SAAUA,EACVnrE,QAAS0zE,EACTtI,aAAcmJ,EACdx5H,SAAUA,IAIhB,KAAK44H,EAAAA,GAAgBX,aACnB,OACExxI,EAAAA,GAAAA,GAAC0wI,GAAqB,CACpBn3H,SAAUA,EACVilD,QAAS0zE,IAIf,QACE,W,2BC1MN,MAiEA,IAAevzI,EAAAA,EAAAA,KA/D4B80I,EACzCl6H,WACAilD,UACAtP,QACAx6B,YACAg/G,+BACAC,mBACApoF,cAAc,mBACdsvD,OACA/jD,cACA8kD,aACAnnD,eAEA,MAAOm/E,EAAiBC,IAAsB3nI,EAAAA,EAAAA,IAAiB,KACxDivG,EAAoBC,IAAyBlvG,EAAAA,EAAAA,KAAS,GAEvD45B,GAAenmC,EAAAA,EAAAA,KAAam0I,IAC5BH,GAAoBG,IAAgBH,EACtCE,EApBuB,6BAsBvBp/E,EAASq/E,KAEV,CAACr/E,EAAUk/E,IAERp4B,GAAmB57G,EAAAA,EAAAA,KAAY,KAC/Bi8G,GACFA,IAEFi4B,EAAmB,MAClB,CAACj4B,IAEE9uG,GAAOC,EAAAA,EAAAA,KAOb,OALA+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,KAIR5+D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,+CAA8CC,SAAA,EAC3DC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,oCAAmCC,UAChDC,EAAAA,GAAAA,GAACpB,GAAAA,EAAc,CAACE,OAAK,EAACD,kBAAmBs8G,OAG3Cn7G,EAAAA,GAAAA,GAAA,OAAKF,UAAU,+BAA8BC,UAC3CC,EAAAA,GAAAA,GAACw7G,GAAAA,EAAY,CACXtsD,MAAO0kF,GAAmB1kF,EAC1B2rD,KAAMA,EACNtvD,YAAaA,EACbmoF,6BAA8BA,EAC9B58E,YAAaA,GAAehqD,EAAK,QACjC8uG,WAAYL,EACZ7mF,UAAWA,EACX71B,kBAAmBs8G,EACnBU,iBAAkBtiG,EAClBuiG,2BAA4BV,EAC5B3mD,SAAU3uB,YC7BpB,IAAennC,EAAAA,EAAAA,KAnCuCo1I,EACpDx6H,WAAUilD,cAEV,MAAM1xD,GAAOC,EAAAA,EAAAA,KAEPinI,GAAYr0I,EAAAA,EAAAA,KAAY,KAC5B6+D,GAAQ,KACP,CAACA,IAIJ,OAFA1zC,EAAAA,GAAAA,GAAe,CAAEvR,WAAUwR,OAAQyzC,KAGjC5+D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gDAA+CC,SAAA,EAC5DH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,GAAAA,GAACuxI,GAAAA,EAAY,CACXrxI,KAAM+zI,EAAAA,IACN7zI,OAAQC,GAAAA,EAAe6zI,gBACvBp0I,UAAU,2BAGZE,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCsW,IAAI,OAAMrW,SAAC,sBAGzDC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCsW,IAAI,OAAMrW,SAAC,+EAK3DC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,+BAA8BC,UAC3CC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACG,QAASkmI,EAAUj0I,SAAE+M,EAAK,kB,gBCzB1C,MA2CA,IAAenO,EAAAA,EAAAA,KA3C+Bw1I,EAC5C56H,WAAUilD,cAEV,MAAM,mBAAEyzE,IAAuBlmI,EAAAA,EAAAA,MACzBe,GAAOC,EAAAA,EAAAA,KAIb,OAFA+d,EAAAA,GAAAA,GAAe,CAAEvR,WAAUwR,OAAQyzC,KAGjC5+D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gDAA+CC,SAAA,EAC5DH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,GAAAA,GAACqkG,GAAAA,EAAuB,CACtBjkG,OAAQC,GAAAA,EAAe+zI,KACvBhO,WAAYiO,GACZn0I,KAAM,IACNJ,UAAU,2BAGZE,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCsW,IAAI,OAAMrW,SAAC,mCAK3DH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,OAELlF,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBmC,gCAAiCv0I,SAE5F+M,EAAK,sBAER9M,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,eAELlF,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBoC,kBAAmBx0I,SAE9E+M,EAAK,+BCJhB,IAAenO,EAAAA,EAAAA,KAjC6B61I,EAC1Cj7H,WAAUilD,UAASxmB,cAEnB,MAAMlrC,GAAOC,EAAAA,EAAAA,KAIb,OAFA+d,EAAAA,GAAAA,GAAe,CAAEvR,WAAUwR,OAAQyzC,KAGjC5+D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gDAA+CC,SAAA,EAC5DH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,GAAAA,GAACqkG,GAAAA,EAAuB,CACtBjkG,OAAQC,GAAAA,EAAe+zI,KACvBhO,WAAYiO,GACZn0I,KAAM+zI,EAAAA,IACNn0I,UAAU,2BAGZE,EAAAA,GAAAA,GAAA,KAAGF,UAAU,4BAA4BsW,IAAI,OAAMrW,SAAC,uIAIpDC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCsW,IAAI,OAAMrW,SAAC,4GAK3DC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,+BAA8BC,UAC3CC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACG,QAASkqC,EAAQj4C,SAAE+M,EAAK,4BC8KxC,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IAAM,IAAuBA,EAAOozI,YADnB/lI,EAlMgCgmI,EAClDD,WACA5C,gBACAC,cACA5iF,QACA31C,WACAmb,YACAigH,gBACAn2E,cAEA,MAAM,YACJo2E,EAAW,cACXC,EAAa,iBACbC,EAAgB,mBAChBC,EAAkB,mBAClB9C,IACElmI,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,KAEPioI,GAAoBr1I,EAAAA,EAAAA,KAAY,KACpCg1I,EAAc,IACd1C,EAAmB,CAAES,OAAQP,EAAAA,GAAgB8C,wBAC5C,CAACN,IAEEO,GAAoBv1I,EAAAA,EAAAA,KAAa+M,IACrCioI,EAAcjoI,GACdulI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBgD,+BAC5C,CAACR,IAEES,GAA2Bz1I,EAAAA,EAAAA,KAAY,KAC3Ci1I,EAAY,CAAEH,aACdE,EAAc,IACd1C,EAAmB,CAAES,OAAQP,EAAAA,GAAgBkD,4BAC5C,CAACV,EAAeF,IAEba,GAA8B31I,EAAAA,EAAAA,KAAa41I,IAC/CZ,EAAc,KACda,EAAAA,GAAAA,IAAeD,GAAiB5vD,MAAK,KACnCssD,EAAmB,CAAES,OAAQP,EAAAA,GAAgBsD,+BAC5C,KACDX,EAAiB,CACf5lF,MAAOpiD,EAAK,2CAGf,CAACA,EAAM6nI,IAEJe,GAA0B/1I,EAAAA,EAAAA,KAAa+M,IAC3CioI,EAAcjoI,GACdulI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBwD,kCAC5C,CAAChB,IAEEiB,GAAgBj2I,EAAAA,EAAAA,KAAa41I,KACjCC,EAAAA,GAAAA,IAAeD,GAAiB5vD,MAAK,KACnCkvD,IACA5C,EAAmB,CAAES,OAAQP,EAAAA,GAAgB0D,aAC5C,KACDf,EAAiB,CACf5lF,MAAOpiD,EAAK,2CAGf,CAACA,IAEJ,OAAQ+kI,GACN,KAAKM,EAAAA,GAAgB2D,iBACnB,OACE91I,EAAAA,GAAAA,GAACw0I,GAAqB,CACpBx8F,QAASg9F,EACTz7H,SAAUA,GAAY,CACpB44H,EAAAA,GAAgB8C,oBAChB9C,EAAAA,GAAgBgD,2BAChBhD,EAAAA,GAAgBkD,yBAChBxlH,SAASiiH,GACXtzE,QAASA,IAIf,KAAK2zE,EAAAA,GAAgB8C,oBACnB,OACEj1I,EAAAA,GAAAA,GAAC+1I,GAAoB,CACnBrC,8BAA4B,EAC5BnoF,YAAaz+C,EAAK,oBAClBgqD,YAAahqD,EAAK,YAClB2nD,SAAUygF,EACV37H,SAAUA,GAAY,CACpB44H,EAAAA,GAAgBgD,2BAChBhD,EAAAA,GAAgBkD,yBAChBxlH,SAASiiH,GACXtzE,QAASA,IAIf,KAAK2zE,EAAAA,GAAgBgD,2BACnB,OACEn1I,EAAAA,GAAAA,GAAC+1I,GAAoB,CACnBrC,8BAA4B,EAC5BC,iBAAkBc,EAClBlpF,YAAaz+C,EAAK,uBAClBgqD,YAAahqD,EAAK,YAClB4nB,UAAWA,EACX+/B,SAAU2gF,EACV77H,SAAUA,GAAY,CACpB44H,EAAAA,GAAgBkD,yBAChBxlH,SAASiiH,GACXtzE,QAASA,IAIf,KAAK2zE,EAAAA,GAAgBkD,wBACnB,OACEr1I,EAAAA,GAAAA,GAAC+zI,GAA+B,CAC9Bx6H,SAAUA,EACVilD,QAASA,IAIf,KAAK2zE,EAAAA,GAAgB6D,gBACnB,OACEh2I,EAAAA,GAAAA,GAACm0I,GAAuB,CACtB56H,SAAUA,GAAY,CACpB44H,EAAAA,GAAgBmC,8BAChBnC,EAAAA,GAAgBsD,0BAChBtD,EAAAA,GAAgBwD,8BAChBxD,EAAAA,GAAgBkD,wBAChBlD,EAAAA,GAAgBoC,iBAChB1kH,SAASiiH,GACXtzE,QAASA,IAIf,KAAK2zE,EAAAA,GAAgBmC,8BACnB,OACEt0I,EAAAA,GAAAA,GAAC+1I,GAAoB,CACnBrC,8BAA4B,EAC5BxkF,MAAOA,EACP0sD,WAAYm5B,EACZxpF,YAAaz+C,EAAK,0CAClB2nD,SAAU6gF,EACV/7H,SAAUA,GAAY,CACpB44H,EAAAA,GAAgBsD,0BAChBtD,EAAAA,GAAgBwD,8BAChBxD,EAAAA,GAAgBkD,yBAChBxlH,SAASiiH,GACXtzE,QAASA,IAIf,KAAK2zE,EAAAA,GAAgBsD,0BACnB,OACEz1I,EAAAA,GAAAA,GAAC+1I,GAAoB,CACnBrC,8BAA4B,EAC5BnoF,YAAaz+C,EAAK,+BAClB2nD,SAAUihF,EACVn8H,SAAUA,GAAY,CACpB44H,EAAAA,GAAgBwD,8BAChBxD,EAAAA,GAAgBkD,yBAChBxlH,SAASiiH,GACXtzE,QAASA,IAIf,KAAK2zE,EAAAA,GAAgBwD,8BACnB,OACE31I,EAAAA,GAAAA,GAAC+1I,GAAoB,CACnBrC,8BAA4B,EAC5BC,iBAAkBc,EAClBlpF,YAAaz+C,EAAK,kDAClB4nB,UAAWA,EACX+/B,SAAU2gF,EACV77H,SAAUA,GAAY,CACpB44H,EAAAA,GAAgBkD,yBAChBxlH,SAASiiH,GACXtzE,QAASA,IAIf,KAAK2zE,EAAAA,GAAgBoC,gBACnB,OACEv0I,EAAAA,GAAAA,GAAC+1I,GAAoB,CACnBrC,8BAA4B,EAC5BxkF,MAAOA,EAAQpiD,EAAKoiD,QAASxsD,EAC7Bk5G,WAAYm5B,EACZxpF,YAAaz+C,EAAK,0CAClB2nD,SAAUmhF,EACVr8H,SAAUA,EACVilD,QAASA,IAIf,QACE,YChMAy3E,GAAiB,CAAC,GAAI,IAAK,IAAK,IAAM,IAAM,IAAM,KAgFxD,SAASC,GAAYC,EAAkBzpI,GACrC,MAAM0pI,EAAaD,EAAOE,WAAWrlF,GAAUtkD,GAASskD,IAClDslF,EAAYH,EAAOC,EAAa,IAAM,EACtCG,EAAYJ,EAAOC,IAAeD,EAAOA,EAAO30I,OAAS,GAE/D,OAAO40I,GADW1pI,EAAQ4pI,IAAcC,EAAYD,EAEtD,CAEA,SAASviI,GAASoiI,EAAkBxiI,GAClC,MAAMyiI,EAAanjI,KAAKmI,MAAMzH,GACxB2iI,EAAYH,EAAOC,EAAa,IAAM,EAEtCI,EAAaF,IADDH,EAAOC,IAAeD,EAAOA,EAAO30I,OAAS,IACnB80I,IAAc3iI,EAAWyiI,GACrE,OAAOI,EAAa,IAAMvjI,KAAKZ,MAAMmkI,GAA4C,GAA9BvjI,KAAKZ,MAAMmkI,EAAa,GAC7E,CAEA,UAAe73I,EAAAA,EAAAA,KA9FyB83I,EACtC5oH,MAAM,EACNT,MACA1gB,QACAwT,WACAsmG,WACA5mG,OACA9f,YACAu7F,eACA7tF,WACAkpI,iCAEA,MAAM5pI,GAAO2mC,EAAAA,GAAAA,KAEP0iG,GAASruI,EAAAA,EAAAA,KAAQ,KACrB,MAAM4Q,EAAS,GACf,IAAK,IAAI+sC,EAAI,EAAGA,EAAIwwF,GAAez0I,OAAQikD,IAKzC,GAJIwwF,GAAexwF,GAAKr4B,GACtB1U,EAAO3F,KAAKkjI,GAAexwF,IAGzBwwF,GAAexwF,IAAMr4B,EAAK,CAC5B1U,EAAO3F,KAAKqa,GACZ,KACF,CAGF,OAAO1U,IACN,CAAC0U,IAEEi6D,GAAe/6E,EAAAA,EAAAA,IAAiBuiB,IACpC,MAAMgqE,EAAWxzE,OAAOwJ,EAAMpK,cAAc/X,OAC5Cc,EAASuG,GAASoiI,EAAQt9C,OAGtB89C,GAAgBzgI,EAAAA,GAAAA,GACpBpW,EACA,cACAogB,GAAY,WACZsmG,GAAY,WACZ5mG,GAAQ,QAgBV,OACEhgB,EAAAA,GAAAA,IAAA,OAAKE,UAAW62I,EAAc52I,SAAA,EAZ5BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAiBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAA,EAClEC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,YAAYsW,IAAI,OAAMrW,SAAE+M,EAAKs4G,OAAOv3F,MACpDjuB,EAAAA,GAAAA,IAAA,QAAME,UAAU,uBAAsBC,SAAA,EAClC22I,IAA+B12I,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,gBAC3C84G,EAAAA,GAAAA,IAAkBt5G,EAAMiH,GAASoiI,EAAQD,GAAYC,EAAQzpI,SAEhE1M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,YAAYsW,IAAI,OAAMrW,SAAE+M,EAAKs4G,OAAOh4F,SAQtDxtB,EAAAA,GAAAA,IAAA,OAAKE,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,GAAAA,GAAA,OACEF,UAAU,oBACV+F,MAAO,UAAWqwI,GAAYC,EAAQzpI,GAASypI,EAAO30I,OAAU,UAElExB,EAAAA,GAAAA,GAAA,SACE6tB,IAAK,EACLT,IAAK+oH,EAAO30I,OACZ65F,aAAc66C,GAAYC,EAAQ96C,GAClCu7C,KAAK,MACL11I,KAAK,QACLpB,UAAU,qBACV0N,SAAU65E,aCEpB,IAAe1oF,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAMw1I,EAA4Bx1I,EAAO4uC,WAAW4mG,0BAC9CC,EAAuBD,EAA4BA,EAA4B,IAAO,EACtFE,EAA2C11I,EAAO4uC,WAAW+mG,mCAInE,MAAO,CACLA,mCAJyCD,EACvCA,EAA2C,IAAO,IAIpDD,uBACAG,0BAA2B51I,EAAO4uC,WAAWgnG,2BAA6BC,EAAAA,OAX5DxoI,EApEpB,UAA0B,qBACxBooI,EAAoB,0BACpBG,EAAyB,mCACzBD,EAAkC,2BAClCN,EAA0B,YAC1BS,EAAW,kBACXC,EAAiB,SACjB5pI,IAEA,MAAM,iBAAEm0B,IAAqB51B,EAAAA,EAAAA,MAEvBe,GAAO2mC,EAAAA,GAAAA,KAEP4jG,GAAgC/qI,EAAAA,EAAAA,IAAiBI,IACrDc,IAAWd,MAGP4qI,GAA0BhrI,EAAAA,EAAAA,IAAgB,KAC9Cq1B,EAAiB,CAAEQ,eAAgB,uBAGrC,OACEviC,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SACtE+M,EAAK,sCAER9M,EAAAA,GAAAA,GAACy2I,GAAiB,CAChBp7C,aAAc+7C,EACdvpH,IAAK0pH,EAAAA,IACLnqH,IAAK6pH,EACLvqI,MAAO0qI,EACP5pI,SAAU6pI,EACVX,2BAA4BA,EAC5BlwB,UAAWkwB,KAEXA,IACA12I,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLC,MAAM,UACNw2C,OAAK,EACLlkD,KAAK,UACLumI,mBAAiB,EACjB3mI,UAAU,yBACVgO,QAASwpI,EAAwBv3I,UAEjCH,EAAAA,GAAAA,IAAA,QAAME,UAAU,+BAA8BC,SAAA,CAC3C+M,EAAK,sBACN9M,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAAaxN,UAAU,qCAIvC42I,IACC12I,EAAAA,GAAAA,GAAA,KAAGF,UAAU,mCAAmCsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SACjF+M,EAAKqqI,EAAc,2BAA6B,wCAAyC,CACxFK,SAASC,EAAAA,GAAAA,IAAmD,IAArCT,GACvB/8F,QAAQqtC,EAAAA,GAAAA,IACN8vD,EAAoBN,EAAuBE,EAC3C,MACAlqI,EAAKkqD,OAEN,CACD5c,WAAW,QAMvB,K,eC5DA,UAAez7C,EAAAA,EAAAA,KAvBf,UAA2B,eAAE+4I,IAC3B,MAAM,iBAAE/1G,IAAqB51B,EAAAA,EAAAA,MACvBe,GAAOC,EAAAA,EAAAA,KACP4qI,GAAyBrrI,EAAAA,EAAAA,IAAgB,IAAMq1B,EAAiB,CAAEQ,eAAgBu1G,MAExF,OACE93I,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPG,aAAaziC,EAAAA,GAAAA,GAAC43I,GAAAA,EAAQ,CAAC93I,UAAU,0BAA0BoB,KAAK,UAAUhB,KAAK,QAC/E4N,QAAS6pI,EAAuB53I,SAE/B+M,EAAK,6BAER9M,EAAAA,GAAAA,GAAA,KACEF,UAAU,gDACVsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAEnC+M,EAAK,0CAId,ICFA,IAAenO,EAAAA,EAAAA,KAlBf,UAA6B,MAAEsO,EAAK,UAAE6hF,IACpC,MAAMhiF,GAAOC,EAAAA,EAAAA,MACP,iBAAE20B,IAAqB31B,EAAAA,EAAAA,MAE7B,OACEnM,EAAAA,GAAAA,IAAA,OACEE,WAAWoW,EAAAA,GAAAA,GCrBM,WDuBf44E,GCvBiF,YDyBnFhhF,QAASA,IAAM4zB,EAAiB,CAAE9gC,QAASkM,EAAK,kCAAmC/M,SAAA,EAEnFC,EAAAA,GAAAA,GAAA,QAAAD,SAAOkN,KACPjN,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAAaxN,UC5BsC,eD+BpE,IEoMA,IAAenB,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAsBrN,IACxC,MACEqxC,UAAU,QACR1L,IAEA3lC,EACEw2I,GAA2BC,EAAAA,EAAAA,KAA+Bz2I,GAE1D02I,EAA+B12I,EAAOqxC,SAAS1L,QAAQgxG,gBAAgBtwG,aAAalmC,QAAU,EAEpG,MAAO,CACLy2I,wCAAwCC,EAAAA,EAAAA,KAAuC72I,GAC/E82I,wBAAyBrtI,QAAQ+sI,GACjCA,yBAA0BA,GAA4BO,EAAAA,IACtDx4G,sBAAsB0B,EAAAA,EAAAA,KAA2BjgC,GACjDg3I,kCAAmCh3I,EAAO4uC,WAAWooG,kCACrDC,qBAAsBj3I,EAAO4uC,WAAWsoG,2BACxCR,+BACA/wG,aAlBgBt4B,EAtLpB,UAAyB,SACvB6K,EAAQ,kCACR8+H,EAAiC,qBACjCC,EAAoB,uCACpBL,EAAsC,wBACtCE,EAAuB,yBACvBN,EAAwB,qBACxBj4G,EAAoB,6BACpBm4G,EAA4B,QAC5Bv5E,EAAO,QACPx3B,IAEA,MAAM,4BAAEytF,EAA2B,mBAAEwd,EAAkB,iBAAEvwG,IAAqB31B,EAAAA,EAAAA,MACxEynC,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,KAEP+kG,EAAiC54G,GAAwBy4G,EACzD3B,EAA6B92G,GAAwB04G,GACpDlB,EAAmBqB,IAAwBvsI,EAAAA,EAAAA,IAAiB2rI,IAC5Da,EAAsBC,IAA2BzsI,EAAAA,EAAAA,KAAS,GAE3DohF,GAAgBxlF,EAAAA,EAAAA,KAAQ,IACxBqwI,EAAgC,sBAChCF,EAA+C,uBAC5C,aACN,CAACE,EAAyBF,KAE7BtyG,EAAAA,GAAAA,IAAsB,EAAEizG,MAEnBF,QAA8Ch2I,IAAtBk2I,GACJ,cAAlBtrD,GACAA,IAAkBsrD,IAEkB,cAAnC5xG,EAAQ6xG,YAAYtyG,YACtB7E,EAAiB,CACf9gC,QAASkM,EAAK,0BACdnL,OAAQ,CACNA,OAAQ,qBACR2nI,QAAS,CAAEoJ,OAAQP,EAAAA,GAAgB2G,oBAErCC,WAAY,CAAEvzH,IAAK,UACnBtM,SAAU,MAGwB,cAAlC8tB,EAAQgyG,WAAWzyG,YACrB7E,EAAiB,CACf9gC,QAASkM,EAAK,yBACdnL,OAAQ,CACNA,OAAQ,qBACR2nI,QAAS,CAAEoJ,OAAQP,EAAAA,GAAgB8G,mBAErCF,WAAY,CAAEvzH,IAAK,UACnBtM,SAAU,MAGdy/H,GAAwB,MAEzB,CAACrrD,EAAe6qD,EAAyBnxG,EAASl6B,EAAM4rI,IAE3D,MAAMnrI,GAAUzF,EAAAA,EAAAA,KAAQ,IACf,CACL,CAAE4E,MAAO,YAAaO,MAAOumC,EAAQ,iBACrC,CACE9mC,MAAO,uBACPO,MAAOurI,EACLhlG,EAAQ,sCAERxzC,EAAAA,GAAAA,GAACk5I,GAAmB,CAClBjsI,MAAOumC,EAAQ,qCACfs7C,UAA6B,yBAAlBxB,IAGf6rD,QAASX,EACTY,wBAAwB,GAE1B,CACE1sI,MAAO,sBACPO,MAAOypI,EACL5pI,EAAK,6BAEL9M,EAAAA,GAAAA,GAACk5I,GAAmB,CAClBjsI,MAAOH,EAAK,4BACZgiF,UAA6B,wBAAlBxB,IAGf6rD,QAASzC,EACT0C,wBAAwB,KAG3B,CAAC5lG,EAAS1mC,EAAM0rI,EAAgC9B,EAA4BppD,IAEzEjG,GAAe/6E,EAAAA,EAAAA,IAAiB+sI,IACpC5kB,EAA4B,CAC1BwjB,uCAAyD,yBAAjBoB,EAExCxB,yBAA2C,wBAAjBwB,EAAyCjC,EAAoB,UAIrFkC,GAA2CpuH,EAAAA,GAAAA,IAAsBxe,IACrE+nH,EAA4B,CAC1BojB,yBAA0BnrI,MAE3B,CAAC+nH,GAA8B,KAAK,GAEjC4iB,GAAgC13I,EAAAA,EAAAA,KAAa+M,IACjD+rI,EAAqB/rI,GACrB4sI,EAAyC5sI,KACxC,CAAC+rI,EAAsBa,KAgC1BxuH,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,IAGV,MAAM+6E,GAAqBzxI,EAAAA,EAAAA,KAAQ,IACGgF,EAAhCqrI,EAAqC,sCAC7B,iDACX,CAACA,EAAyBrrI,IAE7B,OACElN,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKo9B,EAAQ5hB,MAAQ,WAAQlvB,EAAU3C,SACzEyzC,EAAQ,2BAEXxzC,EAAAA,GAAAA,GAACqN,GAAAA,EAAU,CACTC,KAAK,mBACLC,QAASA,EACTC,SAAU65E,EACV55E,SAAU6/E,KAEZttF,EAAAA,GAAAA,GAAA,KAAGF,UAAU,mCAAmCsW,IAAKo9B,EAAQ5hB,MAAQ,WAAQlvB,EAAU3C,SACpFw5I,OAGc,wBAAlBjsD,IACCttF,EAAAA,GAAAA,GAAA,OAAKF,UAAU,gCAA+BC,UAC5CC,EAAAA,GAAAA,GAACw5I,GAAgB,CACf9C,2BAA4BA,EAC5BU,kBAAmBA,EACnB5pI,SAAU6pI,MAIfX,GAAgD,wBAAlBppD,GAjEnC,WACE,MAAMmsD,EAAgB1B,EAClBvkG,EAAQ,QAASukG,EAA8B,KADEjrI,EAAK,2BAG1D,OACElN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKo9B,EAAQ5hB,MAAQ,WAAQlvB,EAAU3C,SACzE+M,EAAK,qBAER9M,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPy7E,QAAM,EACN/qG,KAAK,cAELlF,QAASA,KACPmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBuH,yBAC7C35I,UAEFH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2BAA0BC,SAAA,EACvCC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAE+M,EAAK,6CAC9B9M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAEtB05I,WAOd,CAqC8EE,IACxE/5G,GAA0C,wBAAlB0tD,IACrBttF,EAAAA,GAAAA,GAAC45I,GAAiB,CAAClC,eAAe,sBAG7C,KC/Ne,SAASmC,GAAeC,GACrC,MAAMC,EAAWD,EAAQC,SAASxwF,cAC5BywF,EAASF,EAAQG,YAAY1wF,cAC7B2wF,EAAgBJ,EAAQI,cAAc3wF,cAE5C,OAAIywF,EAAOnqH,SAAS,QACX,OAGLmqH,EAAOnqH,SAAS,YAAcmqH,EAAOnqH,SAAS,cACzC,SAELmqH,EAAOnqH,SAAS,SACX,QAELmqH,EAAOnqH,SAAS,WACX,UAELmqH,EAAOnqH,SAAS,UACX,SAELmqH,EAAOnqH,SAAS,WACX,UAELmqH,EAAOnqH,SAAS,SACX,QAELmqH,EAAOnqH,SAAS,kBACX,UAELkqH,EAASlqH,SAAS,WACb,UAGPmqH,EAAOnqH,SAAS,WACbmqH,EAAOnqH,SAAS,SAChBkqH,EAASlqH,SAAS,QAClBkqH,EAASlqH,SAAS,UAClBqqH,EAAcrqH,SAAS,SAEnB,QAELkqH,EAASlqH,SAAS,WAAaqqH,EAAcrqH,SAAS,UACjD,SAELkqH,EAASlqH,SAAS,UAAYqqH,EAAcrqH,SAAS,SAChD,QAELkqH,EAASlqH,SAAS,YAAcqqH,EAAcrqH,SAAS,WAClD,UAGF,SACT,CCvDA,UAAgB,sBAAwB,WAAW,sBAAwB,WAAW,WAAa,WAAW,oBAAsB,WAAW,kBAAoB,WAAW,kBAAoB,WAAW,gBAAkB,WAAW,kBAAoB,WAAW,gBAAkB,WAAW,mBAAqB,WAAW,iBAAmB,WAAW,iBAAmB,WAAW,eAAiB,WAAW,oBAAsB,WAAW,kBAAoB,WAAW,kBAAoB,WAAW,gBAAkB,WAAW,kBAAoB,WAAW,gBAAkB,WAAW,mBAAqB,WAAW,iBAAmB,WAAW,oBAAsB,WAAW,kBAAoB,WAAW,mBAAqB,WAAW,iBAAmB,WAAW,oBAAsB,WAAW,kBAAoB,WAAW,oBAAsB,WAAW,kBAAoB,WAAW,oBAAsB,WAAW,kBAAoB,WAAW,iBAAmB,WAAW,eAAiB,WAAW,MAAQ,WAAW,KAAO,WAAW,KAAO,WAAW,IAAM,WAAW,aAAe,WAAW,WAAa,WAAW,aAAe,YC4IrpC,SAASsqH,GAAYL,GACnB,MAAO,CAACA,EAAQM,OAAQN,EAAQpqD,SAASjyD,OAAO3yB,SAAS4b,KAAK,KAChE,CAEA,UAAe/nB,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAqB,CAACrN,GAAU+2G,WAC3C,CACL0hC,QAAS1hC,EAAO/2G,EAAOg5I,eAAeC,OAAOliC,QAAQ11G,KAFrCgM,EAlHqC6rI,EACvD7uI,SAAQouI,UAASluI,cAEjB,MAAM,sBAAE4uI,EAAqB,uBAAEC,IAA2B1uI,EAAAA,EAAAA,MACpDe,GAAOC,EAAAA,EAAAA,KAEP2tI,GAAmB1uG,EAAAA,GAAAA,GAAiB8tG,GAAS,GAE7Ca,GAA+Bh7I,EAAAA,EAAAA,KAAY,KAC/C66I,EAAsB,CACpBpiC,KAAM0hC,EAAS1hC,KACfwiC,uBAAwBd,EAASc,0BAElC,CAACJ,EAAuBV,IAErBe,GAAyBl7I,EAAAA,EAAAA,KAAY,KACzC66I,EAAsB,CACpBpiC,KAAM0hC,EAAS1hC,KACf0iC,iBAAkBhB,EAASgB,oBAE5B,CAACN,EAAuBV,IAErBiB,GAA8Bp7I,EAAAA,EAAAA,KAAY,KAC9C86I,EAAuB,CAAEriC,KAAM0hC,EAAS1hC,OACxCxsG,MACC,CAACA,EAASkuI,EAASW,IAEtB,GAAKC,EAqBL,OACE96I,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJi7B,QAjBAxoC,EAAAA,GAAAA,IAAA,OAAKE,UAAU,yBAAyBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAA,EAC1EC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC0E,OAAK,EAACzE,MAAM,cAAc1N,KAAK,UAAUoS,UAAWxF,EAAK,SAAUgB,QAASlC,EAAQ7L,UAC1FC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAEbtN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SAAE+M,EAAK,2BACnC9M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLC,MAAM,SACNE,QAASitI,EACTj7I,WAAWoW,EAAAA,GAAAA,GAAe,sBAAuBqH,GAAOy9H,cAAcj7I,SAErE+M,EAAK,wCAQVpB,OAAQA,EACRukE,gBAAc,EACdrkE,QAASA,EACT9L,UAAWyd,GAAOg9H,sBAAsBx6I,SAAA,EAExCC,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GACdqH,GAAO09H,WACPP,GAAoBn9H,GAAO,eAAes8H,GAAea,UAG3D16I,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAOrQ,MAAOkJ,IAAI,OAAMrW,SAAE26I,GAAkBT,eAC3Dj6I,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOyV,KAAM,aAAYlmB,EAAK,4BAA4B/M,UACvE+5F,EAAAA,GAAAA,IAAqD,IAA9B4gD,EAAiBQ,WAAmBpuI,EAAKkqD,SAGnEp3D,EAAAA,GAAAA,IAAA,MAAIE,UAAWyd,GAAO49H,IAAIp7I,SAAA,EACxBC,EAAAA,GAAAA,GAAA,MAAAD,SAAK+M,EAAK,yBACVlN,EAAAA,GAAAA,IAAA,MAAAG,SAAA,CACG26I,GAAkBl3E,QAClB,IACAk3E,GAAkBU,WAAW,IAE7B,IACAV,GAAkBX,SAClB,IACAW,GAAkBR,kBAGrBl6I,EAAAA,GAAAA,GAAA,MAAAD,SAAK+M,EAAK,wBACV9M,EAAAA,GAAAA,GAAA,MAAAD,SAAK26I,GAAkBW,MAEvBr7I,EAAAA,GAAAA,GAAA,MAAAD,SAAK+M,EAAK,8BACV9M,EAAAA,GAAAA,GAAA,MAAAD,SAAK26I,GAAoBP,GAAYO,SAGvC16I,EAAAA,GAAAA,GAAA,KAAGF,UAAWyd,GAAO+9H,KAAKv7I,SAAE+M,EAAK,4BAEjC9M,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAOg+H,aAAax7I,SAAE+M,EAAK,oCAE1ClN,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CAACx0B,QAAS6sI,EAA6B56I,SAAA,EAC9CC,EAAAA,GAAAA,GAAA,QAAMF,UAAWyd,GAAOi+H,WAAWz7I,SAAE+M,EAAK,mCAC1C9M,EAAAA,GAAAA,GAAC6pC,GAAAA,EAAQ,CACPhqC,GAAG,iBACHoN,MAAM,KACNg8B,QAASyxG,EAAiBE,4BAG9Bh7I,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CAACx0B,QAAS+sI,EAAuB96I,SAAA,EACxCC,EAAAA,GAAAA,GAAA,QAAMF,UAAWyd,GAAOi+H,WAAWz7I,SAAE+M,EAAK,kCAC1C9M,EAAAA,GAAAA,GAAC6pC,GAAAA,EAAQ,CACPhqC,GAAG,eACHoN,MAAM,KACNg8B,QAASyxG,EAAiBI,4BCmJpC,SAASX,GAAYL,GACnB,MAAO,CAACA,EAAQM,OAAQN,EAAQpqD,SAASjyD,OAAO3yB,SAAS4b,KAAK,KAChE,CAEA,UAAe/nB,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,GAAuBA,EAAOg5I,gBADb3rI,EA5PsC+sI,EACxDliI,WACAilD,UACA87E,SACAoB,gBACAC,cAEA,MAAM,uBACJlB,EAAsB,2BACtBmB,EAA0B,iBAC1BC,IACE9vI,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,MACN+uI,EAAiCC,EAA+BC,IAAkC/8I,EAAAA,EAAAA,MAClGg9I,EAAmBC,IAAwBhwI,EAAAA,EAAAA,OAC3CujD,EAAa3oB,EAAWC,IAAc9nC,EAAAA,EAAAA,KAEvCk9I,GAAqBr0I,EAAAA,EAAAA,KAAQ,KAEjC,QAAgBpF,IAAZi5I,EAIJ,OAAIA,GAAW,EACN,IAGLA,GAAW,GACN,KAGLA,GAAW,GACN,KAGLA,GAAW,IACN,MAGLA,EAAU,IACL,WADT,IAKC,CAACA,IAEES,GAAyBt0I,EAAAA,EAAAA,KAAQ,KACrC,MAAMyF,EAAU,CAAC,CACfN,MAAOH,EAAK,QAAS,EAAG,KACxBJ,MAAO,KACN,CACDO,MAAOH,EAAK,SAAU,EAAG,KACzBJ,MAAO,MACN,CACDO,MAAOH,EAAK,SAAU,EAAG,KACzBJ,MAAO,MACN,CACDO,MAAOH,EAAK,SAAU,EAAG,KACzBJ,MAAO,QAQT,OANIivI,GAAWA,GAAW,KACxBpuI,EAAQwF,KAAK,CACX9F,MAAOH,EAAK,QAAS,EAAG,KACxBJ,MAAO,QAGJa,IACN,CAACT,EAAM6uI,IAEJZ,GAA8Bp7I,EAAAA,EAAAA,KAAay4G,IAC/CqiC,EAAuB,CAAEriC,WACxB,CAACqiC,IAEE4B,GAA6B18I,EAAAA,EAAAA,KAAY,KAC7Cq8I,IACAJ,MACC,CAACI,EAAgCJ,IAE9BU,GAAyB38I,EAAAA,EAAAA,KAAay4G,IAC1C8jC,EAAqB9jC,GACrBtxE,MACC,CAACA,IAEEy1G,GAA0B58I,EAAAA,EAAAA,KAAY,KAC1Cu8I,OAAqBx5I,GACrBqkC,MACC,CAACA,IAEEy1G,GAAyB78I,EAAAA,EAAAA,KAAa+M,IAC1CmvI,EAAiB,CAAErnC,KAAMnvF,OAAO3Y,OAC/B,CAACmvI,IAEEY,GAAiB30I,EAAAA,EAAAA,KAAQ,KAC7B,MAAM40I,EAAqBhB,EAAcnqG,MAAM6mE,GAASkiC,EAAOliC,GAAMukC,YAErE,OAAOD,EAAqBpC,EAAOoC,QAAsBh6I,IACxD,CAAC43I,EAAQoB,IAENkB,GAAqB90I,EAAAA,EAAAA,KAAQ,IAC1B4zI,EAAcj+G,QAAQ26E,IAAUkiC,EAAOliC,GAAMukC,aACnD,CAACrC,EAAQoB,IACNmB,EAAmB/xI,QAAQ8xI,EAAmBp7I,QA6HpD,OA3HAspB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,KA0HR5+D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,wDAAuDC,SAAA,CACnE08I,IAxHyB3C,EAwHc2C,GAtHxC78I,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SACtE+M,EAAK,kCAGR9M,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAACy7E,QAAM,EAACv7E,UAAQ,EAACxvB,KAAM,UAAU6mI,GAAeC,KAAYlgD,cAAc,cAAa75F,UAC9FH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2BAA2BsW,IAAI,OAAMrW,SAAA,EAClDC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAQsW,IAAI,OAAMrW,SAAE+5I,EAAQG,eAC5Cr6I,EAAAA,GAAAA,IAAA,QAAME,UAAU,uBAAsBC,SAAA,CACnC+5I,EAAQt2E,QACR,IACAs2E,EAAQsB,WAAW,IAEnB,IACAtB,EAAQC,SACR,IACAD,EAAQI,kBAEXt6I,EAAAA,GAAAA,IAAA,QAAME,UAAU,WAAUC,SAAA,CACvB+5I,EAAQuB,GACR,IAAI,IAEJ,IACAlB,GAAYL,WAKlB+C,IACC78I,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPxiC,UAAU,2BACVkT,KAAK,OACL0M,QAAM,EACNq+F,QAAM,EACNjwG,QAASiuI,EAA8Bh8I,SAEtC+M,EAAK,8BAmFX+vI,IA5EwBC,EA4EgBF,GA1EzCh9I,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SACtE+M,EAAK,mBAGPgwI,EAActpI,KAuBrB,SAAuBupI,GACrB,MAAMjD,EAAUQ,EAAOyC,GAEvB,OACE/8I,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAEP5iB,QAAM,EACNq+F,QAAM,EACNn9D,eAAgB,CAAC,CACf1zC,MAAO,YACP8F,KAAM,OACNI,aAAa,EACb6tC,QAASA,KACP85F,EAA4BjB,EAAQ1hC,SAGxCplG,KAAM,UAAU6mI,GAAeC,KAC/BlgD,cAAc,cACd9rF,QAASA,KAAQwuI,EAAuBxC,EAAQ1hC,OAASr4G,UAEzDH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2BAA2BsW,IAAI,OAAMrW,SAAA,EAClDC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,OAAMC,UAAEm/H,EAAAA,GAAAA,IAAoBpyH,EAA2B,IAArBgtI,EAAQoB,eAC1Dl7I,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAE+5I,EAAQG,eACjCr6I,EAAAA,GAAAA,IAAA,QAAME,UAAU,uBAAsBC,SAAA,CACnC+5I,EAAQt2E,QACR,IACAs2E,EAAQsB,WAAW,IAEnB,IACAtB,EAAQC,SACR,IACAD,EAAQI,kBAEXt6I,EAAAA,GAAAA,IAAA,QAAME,UAAU,WAAUC,SAAA,CACvB+5I,EAAQuB,GACR,IACAlB,GAAYL,UA/BZA,EAAQ1hC,KAoCnB,SAzDIx4G,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SACtE+M,EAAK,gCAGR9M,EAAAA,GAAAA,GAAA,KAAGF,UAAU,mCAAkCC,SAAE+M,EAAK,oBACtD9M,EAAAA,GAAAA,GAACqN,GAAAA,EAAU,CACTC,KAAK,cACLC,QAAS6uI,EACT3uI,SAAU0uI,EACV3uI,SAAUgvI,OAsDbK,IACC78I,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQowI,EACRlwI,QAASowI,EACTnnI,KAAM/H,EAAK,sBACXu2B,aAAcv2B,EAAK,wBACnBw2B,eAAgB+4G,EAChB94G,sBAAoB,EACpBy5G,oBAAkB,KAGtBh9I,EAAAA,GAAAA,GAACu6I,GAAqB,CAAC7uI,OAAQ+jD,EAAa2oD,KAAM6jC,EAAmBrwI,QAAS2wI,OAzFlF,IAA6BO,EA7CChD,MC7IhC,GAAgF,WCsGhF,IAAen7I,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAqB,CAACrN,GAAU+2G,WAClD,MAAM0hC,EAAU1hC,EAAO/2G,EAAO47I,kBAAkB3C,OAAOliC,QAAQ11G,EAG/D,MAAO,CACLo3I,UACAhrF,IAJUgrF,EAAUz4I,EAAOolC,MAAMC,KAAKozG,EAAQpnF,YAAShwD,KAFvCgM,EAzEqCwuI,EACvDxxI,SACAouI,UACAhrF,MACAljD,cAEA,MAAM,0BAAEuxI,IAA8BpxI,EAAAA,EAAAA,MAChCe,GAAOC,EAAAA,EAAAA,KAEP2tI,GAAmB1uG,EAAAA,GAAAA,GAAiB8tG,GAAS,GAC7CsD,GAAepxG,EAAAA,GAAAA,GAAiB8iB,GAAK,GAErCisF,GAA8Bp7I,EAAAA,EAAAA,KAAY,KAC9Cw9I,EAA0B,CAAE/kC,KAAM0hC,EAAS1hC,OAC3CxsG,MACC,CAACA,EAASkuI,EAASqD,IAEtB,GAAKzC,EAqBL,OACE96I,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJi7B,QAjBAxoC,EAAAA,GAAAA,IAAA,OAAKE,UAAU,yBAAyBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAA,EAC1EC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC0E,OAAK,EAACzE,MAAM,cAAc1N,KAAK,UAAUoS,UAAWxF,EAAK,SAAUgB,QAASlC,EAAQ7L,UAC1FC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAEbtN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SAAE+M,EAAK,uBACnC9M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLC,MAAM,SACNE,QAASitI,EACTj7I,WAAWoW,EAAAA,GAAAA,GAAe,sBD5DwN,YC4D5KnW,SAErE+M,EAAK,4BAQVpB,OAAQA,EACRukE,gBAAc,EACdrkE,QAASA,EACT9L,UDzEiB,WCyEMC,SAAA,EAEvBC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CACL/zB,UD5EmC,WC6EnCg0B,KAAMspH,EACNl9I,KAAK,UAENk9I,IAAgBp9I,EAAAA,GAAAA,GAACgrD,GAAAA,EAAa,CAAClrD,UDhFwB,WCgFCg0B,KAAMspH,KAC/Dp9I,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAYxd,SACzB26I,GAAkBjoF,UAGrB7yD,EAAAA,GAAAA,IAAA,MAAIE,UDrFuF,WCqFjEC,SAAA,EACxBC,EAAAA,GAAAA,GAAA,MAAAD,SAAK+M,EAAK,gCACV9M,EAAAA,GAAAA,GAAA,MAAAD,SACG26I,GAAkB2C,WAGrBr9I,EAAAA,GAAAA,GAAA,MAAAD,SAAK+M,EAAK,wBACV9M,EAAAA,GAAAA,GAAA,MAAAD,SAAK26I,GAAkBW,MAEvBr7I,EAAAA,GAAAA,GAAA,MAAAD,SAAK+M,EAAK,8BACV9M,EAAAA,GAAAA,GAAA,MAAAD,SAAK26I,GAAkBN,aAEzBp6I,EAAAA,GAAAA,GAAA,KAAGF,UAAWyd,GAAYxd,SAAE+M,EAAK,2CCjGvC,IAAgB,OAAS,WAAW,aAAa,WAAW,UAAY,WAAW,SAAW,YCoK9F,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM,OAAEi5I,EAAM,cAAEoB,GAAkBr6I,EAAO47I,kBACzC,MAAO,CACL3C,SACAoB,mBALchtI,EApIsC4uI,EACxD/jI,WACA+gI,SACAoB,gBACAl9E,cAEA,MAAM,0BACJ2+E,EAAyB,8BACzBI,IACExxI,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,MACN+uI,EAAiCC,EAA+BC,IAAkC/8I,EAAAA,EAAAA,MAClGu+I,EAAmBC,IAAwBvxI,EAAAA,EAAAA,OAC3CujD,EAAa3oB,EAAWC,IAAc9nC,EAAAA,EAAAA,KAEvCy+I,GAA2B/9I,EAAAA,EAAAA,KAAay4G,IAC5C+kC,EAA0B,CAAE/kC,WAC3B,CAAC+kC,IAEEQ,GAAyBh+I,EAAAA,EAAAA,KAAY,KACzCq8I,IACAuB,MACC,CAACvB,EAAgCuB,IAE9BjB,GAAyB38I,EAAAA,EAAAA,KAAay4G,IAC1CqlC,EAAqBrlC,GACrBtxE,MACC,CAACA,IAEE82G,GAA0Bj+I,EAAAA,EAAAA,KAAY,KAC1C89I,OAAqB/6I,GACrBqkC,MACC,CAACA,IAcJ,IAAwB+1G,EAqDxB,IAhEAxyI,EAAAA,EAAAA,KAAU,KACHoxI,EAAcl6I,QACjBg9D,MAED,CAACA,EAASk9E,KAEb5wH,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,IAwDLk9E,EAAcl6I,OAEnB,OACE5B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iCAAgCC,SAAA,EAC7CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPxiC,UAAU,2BACVkT,KAAK,OACL0M,QAAM,EACNq+F,QAAM,EACNjwG,QAASiuI,EAA8Bh8I,SAEtC+M,EAAK,sCAER9M,EAAAA,GAAAA,GAAA,KAAGF,WAAWoW,EAAAA,GAAAA,GAAe,4BAA6BqH,GAAOsgI,WAAW99I,SACzE+M,EAAK,mCApEUgwI,EAuEJpB,GArEhB97I,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SACtE+M,EAAK,sBAGPgwI,EAActpI,KAKrB,SAAuBupI,GACrB,MAAMjD,EAAUQ,EAAOyC,GACjBjuF,GAAMjgB,EAAAA,EAAAA,MAAYpI,MAAMC,KAAKozG,EAAQpnF,OAE3C,OACE9yD,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CAEP5iB,QAAM,EACNq+F,QAAM,EACNn9D,eAAgB,CAAC,CACf1zC,MAAO,YACP8F,KAAM,OACNI,aAAa,EACb6tC,QAASA,KACPy8F,EAAyB5D,EAAQ1hC,SAIrCtqG,QAASA,IAAMwuI,EAAuBxC,EAAQ1hC,MAAMr4G,SAAA,EAEpDC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CAAC/zB,UAAWyd,GAAO9b,OAAQqyB,KAAMg7B,EAAK5uD,KAAK,UAClDN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2BAA2BsW,IAAI,OAAMrW,SAAA,EAClDC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,OAAMC,UAAEm/H,EAAAA,GAAAA,IAAoBpyH,EAA2B,IAArBgtI,EAAQoB,cACzDpsF,IAAO9uD,EAAAA,GAAAA,GAACgrD,GAAAA,EAAa,CAAClrD,UAAWyd,GAAOrQ,MAAO4mB,KAAMg7B,KACtDlvD,EAAAA,GAAAA,IAAA,QAAME,WAAWoW,EAAAA,GAAAA,GAAe,WAAY,QAAS,QAASqH,GAAOw8H,UAAUh6I,SAAA,CAC5E+5I,EAAQrnF,OAAO,IAEfqnF,EAAQuD,QAAQ,IAEhBvD,EAAQC,aAEXn6I,EAAAA,GAAAA,IAAA,QAAME,WAAWoW,EAAAA,GAAAA,GAAe,WAAYqH,GAAOoV,UAAU5yB,SAAA,CAC1D+5I,EAAQuB,GACR,IACAvB,EAAQM,eA5BRN,EAAQ1hC,KAiCnB,SAqBIp4G,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQowI,EACRlwI,QAASowI,EACT9uI,MAAOJ,EAAK,mCACZ+H,KAAM/H,EAAK,yBACXw2B,eAAgBq6G,EAChBp6G,sBAAoB,KAEtBvjC,EAAAA,GAAAA,GAACk9I,GAAqB,CAACxxI,OAAQ+jD,EAAa2oD,KAAMolC,EAAmB5xI,QAASgyI,WC/DpF,IAAej/I,EAAAA,EAAAA,KApEsBm/I,EACnCz/C,aACA/9E,SACAxgB,YACAy+F,sBACAzwF,cAEA,MAAMhB,GAAOC,EAAAA,EAAAA,KAEPwgG,EAAelP,GAAYlf,WAAW,GAEtC4+D,GAAkBzxI,EAAAA,EAAAA,IAAgB,KAClCihG,GAAcz/F,EAAQy/F,MAG5B,GAAKlP,GAAYlf,SAqCjB,OACEv/E,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPxiC,WAAWoW,EAAAA,GAAAA,GAAe,iBAAkB,aAAcpW,GAC1D+F,MAAO,gBACP28B,UAAW+qE,EACXz/F,QAASiwI,EAAgBh+I,SAAA,CAtC7B,WACE,GAAKs+F,EACL,OAAIA,EAAWI,eAAiB8O,GAE5BvtG,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL2E,UAAW+rF,EAAWnxF,MACtBU,MAAM,cACNgkB,MAAO9kB,EAAK8kB,MAAM7xB,UAElBC,EAAAA,GAAAA,GAACo+F,GAAe,CACdC,WAAYA,EACZn+F,KAAM89I,EAAAA,IACN19H,OAAQA,EACRi+E,oBAAqBA,OAMzBv+F,EAAAA,GAAAA,GAACugG,GAAa,CACZliB,QAASkvB,EACTrtG,KAAM89I,EAAAA,IACN9wI,MAAOmxF,EAAWnxF,MAClBoT,OAAQA,EACRi+E,oBAAqBA,EACrBiC,eAAa,EACb5gE,sBAAoB,EACpBohE,cAAUt+F,GAIlB,CASKu7I,IACDr+I,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,QAAOC,SAAEs+F,EAAWnxF,SACnClN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,SAAE+M,EAAK,2BAA4BuxF,EAAWlrE,MAAO,gBCItF,IAAex0B,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACQ,KACF2uD,EAAAA,GAAAA,IAAK3uD,EAAOqxC,SAASwrG,MAAO,CAC7B,6BAEFC,kBAAmB98I,EAAOynF,aAAauhB,MAAMC,OAC7Cd,gBAAiBnoG,EAAO89E,SAASoqB,SACjC60C,uBAAuB5zC,EAAAA,EAAAA,KAA4BnpG,MARrCqN,EA9DmC2vI,EACrD9kI,WACA4kI,oBACA30C,kBACA80C,2BACAF,wBACA5/E,cAEA,MAAM,eAAE6rB,EAAc,iBAAE+tC,IAAqBrsH,EAAAA,EAAAA,MACvCe,GAAOC,EAAAA,EAAAA,KAEPwxI,GAAqBn1I,EAAAA,EAAAA,OACnBuzF,QAASoB,IAAiCd,EAAAA,GAAAA,IAAwB,CAAEC,QAASqhD,KAErFzzH,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,IAGV,MAAMggF,GAAwB7+I,EAAAA,EAAAA,KAAa0+E,IACzCgM,EAAe,CACbnB,eAAgB7K,EAAQ6K,mBAEzB,CAACmB,IAEEo0D,GAAiC9+I,EAAAA,EAAAA,KAAak5F,IAClDu/B,EAAiB,CAAEkmB,yBAA0BzlD,MAC5C,CAACu/B,IAEEsmB,GAAkB52I,EAAAA,EAAAA,KAAQ,IAC9Bq2I,GAAqBp/F,OAAOyK,QAAOwG,EAAAA,GAAAA,IAAKw5C,EAAiB20C,KACxD,CAACA,EAAmB30C,IAEvB,OACExpG,EAAAA,GAAAA,GAAA,OAAKF,UAAU,iCAAgCC,SAC5C2+I,IACC9+I,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,wBACZm8B,QAASq1G,EACTvrF,QAAS0rF,KAEXz+I,EAAAA,GAAAA,GAAA,OAAKF,UAAU,OAAOkU,IAAKuqI,EAAmBx+I,SAC3C2+I,EAAgBlrI,KAAK6qF,IACpBr+F,EAAAA,GAAAA,GAAC89I,GAAc,CAEbz/C,WAAYA,EACZE,oBAAqBR,EACrBjwF,QAAS0wI,EACTl+H,QAAS89H,GAJJ//C,EAAWx+F,SAQtBG,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCsW,IAAI,OAAMrW,UACrDg0B,EAAAA,GAAAA,GAAWjnB,EAAK,gBAAiB,CAAC,qBC2E/C,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACQ2uD,EAAAA,GAAAA,IAAK3uD,EAAOqxC,SAASwrG,MAAO,CACjC,+BACA,iCACA,2BACA,6BACA,+BACA,iCACA,2BACA,6BACA,8BACA,gCACA,0BACA,4BACA,2BAfcxvI,EA9HmCiwI,EACrDplI,WACAilD,UACAogF,+BACAC,iCACAC,2BACAC,6BACAC,+BACAC,iCACAC,2BACAC,6BACAC,8BACAC,gCACAC,0BACAC,4BACAC,4BAEA,MAAM,iBAAEpnB,IAAqBrsH,EAAAA,EAAAA,MAEvBe,GAAO2mC,EAAAA,GAAAA,MAEb3oB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,IAGV,MAAMihF,GAAyB9/I,EAAAA,EAAAA,KAAa+M,GACnCI,EAAK,4BAA6B,CACvC4iB,MAAO5iB,EAAK,aAAc,CAAEqmB,MAAOusH,EAAAA,IAAgChzI,QAEpE,CAACI,IAEE6yI,GAAuBhgJ,EAAAA,EAAAA,KAAa+M,IACxC0rH,EAAiB,CAAEonB,sBAAuBE,EAAAA,IAAgChzI,OACzE,CAAC0rH,IAEJ,SAASwnB,IACP,MAAMlzI,EAAQgzI,EAAAA,IAAgCtjH,QAAQojH,GAEtD,OACEx/I,EAAAA,GAAAA,GAAA,OAAKF,UAAU,OAAMC,UACnBC,EAAAA,GAAAA,GAAC2f,GAAAA,EAAW,CACV1S,MAAOH,EAAK,2BACZ+gB,IAAK,EACLT,IAAK,EACL1gB,OAAkB,IAAXA,EAAeA,EAAQ,EAC9BmzI,YAAaJ,EACbjyI,SAAUmyI,KAIlB,CAEA,SAASG,EACP5yI,EACAsY,EACAu6H,EACAC,EACAC,EACAC,GAEA,OACEtgJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAEmN,KAE3ElN,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,gCACZm8B,QAAS82G,EAGThtF,QAAU+7B,GAAcspC,EAAiB,CAAE,CAAC,cAAc5yG,iBAAoBspE,OAEhF9uF,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,oCACZm8B,QAAS+2G,EAETjtF,QAAU+7B,GAAcspC,EAAiB,CAAE,CAAC,cAAc5yG,mBAAsBspE,OAElF9uF,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,kCACZm8B,QAASg3G,EAETltF,QAAU+7B,GAAcspC,EAAiB,CAAE,CAAC,cAAc5yG,aAAgBspE,OAE5E9uF,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,gCACZm8B,QAASi3G,EAETntF,QAAU+7B,GAAcspC,EAAiB,CAAE,CAAC,cAAc5yG,eAAkBspE,MAGrE,SAARtpE,GAAkBo6H,MAGzB,CAEA,OACEhgJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iCAAgCC,SAAA,CAC5C+/I,EACChzI,EAAK,2BACL,QACA8xI,EACAC,EACAC,EACAC,GAEDe,EACChzI,EAAK,2BACL,QACAkyI,EACAC,EACAC,EACAC,GAEDW,EACChzI,EAAK,0BACL,OACAsyI,EACAC,EACAC,EACAC,UC3JR,IAAgB,KAAO,WAAW,KAAO,YCqBnCY,GAAsC,CAC1C,KAAM,MAAO,KAAM,KAAM,KAAM,MAAO,KAAM,MAAO,KAAM,KACzD,MAAO,KAAM,MAAO,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,MACzD,KAAM,KAAM,MAAO,KAAM,MAAO,KAAM,MAAO,MAAO,KAAM,KAC1D,KAAM,KAAM,KAAM,KAAM,MAAO,MAAO,MAAO,KAAM,KAAM,MACzD,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KACvD,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,MACvD,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KACxD,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KACvD,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,MACxD,KAAM,MAAO,KAAM,KAAM,MAAO,KAAM,MAAO,MAAO,KAAM,KAC1D,KAAM,KAAM,MAAO,KAAM,KAAM,MAAO,KAAM,MAAO,MAAO,MAC1D,MAAO,MAAO,KAAM,MAAO,KAAM,KAAM,KAAM,KAAM,KAAM,KACzD,KAAM,MAAO,MAAO,KAAM,MAAO,MAAO,KAAM,KAAM,KAAM,KAC1D,KAAM,KAAM,MAAO,KAAM,MAAO,KAAM,MAAO,MAAO,KAAM,KAC1D,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5D,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KAAM,KAAM,KAAM,KAC7D,MAAO,MAAO,KAAM,MAAO,KAAM,KAAM,MAAO,MAAO,MAAO,MAC5D,KAAM,KAAM,MAAO,MAGfC,GAAsBxnB,EAAAA,IAAgCn7F,QAAQ3wB,GAClEqzI,GAAoCtwH,SAAS/iB,KAyF/C,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM,eACJg/I,GACEh/I,EAAOqxC,SAASwrG,MAEpB,MAAO,CACLmC,oBAPc3xI,EA/EsC4xI,EACxD/mI,WACA8mI,iBACA7hF,cAEA,MAAM,iBAAE45D,IAAqBrsH,EAAAA,EAAAA,MAGvBw0I,GADOxzI,EAAAA,EAAAA,KACSiqD,MAAQ,MACvBwpF,EAAkBC,IAAuBv0I,EAAAA,EAAAA,IAAmB,KAC5D03B,EAAaC,IAAkB33B,EAAAA,EAAAA,IAAiB,IAEjDw0I,GAA0C54I,EAAAA,EAAAA,KAAQ,KACtD,MAAMyF,EAAU6yI,GAAoB5sI,KAAK+kH,IAOhC,CACLA,WACAM,eARsB,IAAIC,KAAKC,aAAa,CAACwnB,GAAW,CAAEr/I,KAAM,aAC3B83H,GAAGT,GAQxCU,aANoB,IAAIH,KAAKC,aAAa,CAACR,GAAW,CAAEr3H,KAAM,aAC7B83H,GAAGT,OAOrC96F,OAAO3yB,SAAS0I,KAAI,EAAG+kH,WAAUM,iBAAgBI,mBAAmB,CACrEhsH,MAAO4rH,EACPpqC,SAAUwqC,EACVvsH,MAAO6rH,MAGT,IAAK30F,EAAY4lC,OAAQ,CACvB,MAAMm3E,EAAwBpzI,EAAQgkC,MAAMvI,GAAWA,EAAOt8B,QAAU6zI,IAClEK,EAAkBrzI,EAAQkwB,QAAQuL,GAAWA,EAAOt8B,QAAU6zI,IACpE,OAAOI,EAAwB,CAACA,KAA0BC,GAAmBrzI,CAC/E,CAEA,OAAOA,GAASkwB,QAAQuL,GAAWA,EAAO/7B,MAAMs8C,cAAc15B,SAAS+T,EAAY2lB,mBAClF,CAACg3F,EAAU38G,KAEd+B,EAAAA,GAAAA,IAAsB,EAAEC,EAAci7G,MACpC,GAAIj7G,IAAiBrsB,GAAYsnI,GAActvG,MAAMvI,GAAWA,IAAWu3G,IAAW,OACtF,MAAO9yI,IAAYwjI,EAAAA,GAAAA,IAAUyP,GAAsB13G,GAAWq3G,EAAexwH,SAASmZ,EAAOt8B,SAC7F+zI,EAAoB,IAAIhzI,EAAS+F,KAAKw1B,GAAWA,EAAOt8B,YACvD,CAAC6M,EAAU8mI,EAAgBG,EAAiBh/I,OAAQ++I,EAAUG,IAEjE,MAAMr5D,GAAe/6E,EAAAA,EAAAA,IAAiBwjF,IACpC2wD,EAAoB3wD,GACpBsoC,EAAiB,CACfioB,eAAgBvwD,OASpB,OALAhlE,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,KAIRx+D,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAOygB,KAAM,oCAAoCj+B,UAC9EC,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAO5O,MAAM5O,UAC1CC,EAAAA,GAAAA,GAAC0sF,GAAU,CACT5sF,UAAWyd,GAAO2yE,OAClB/qC,MAAOu7F,EACPrzD,eAAgBmzD,EAChBryD,uBAAwB9G,EACxB7iD,YAAaZ,EACbmB,eAAgBlB,EAChBc,cAAY,EACZK,eAAa,EACbJ,oBAAkB,EAClBM,cAAc,WACdR,cAAc,+BC8FxB,IAAe/lC,EAAAA,EAAAA,KAzLuBmiJ,EACpCv0I,SACAw0I,YACAC,qBAEA,MAAM,iBACJt/G,EAAgB,eAChBu/G,EAAc,mBACdC,EAAkB,cAClBC,EAAa,kBACbC,IACEr1I,EAAAA,EAAAA,MACEe,GAAOC,EAAAA,EAAAA,MACNs0I,EAAoBC,IAAyBp1I,EAAAA,EAAAA,MAE9Cq1I,GAAez5I,EAAAA,EAAAA,KAAQ,IAAMi5I,EAAUvtI,KAAI,EAAGyhG,cAAeA,KAAW,CAAC8rC,IACzES,GAAmBnrH,EAAAA,EAAAA,GAAsBkrH,IAExCxlF,EAAOmzE,IAAYhjI,EAAAA,EAAAA,IAAoB,CAC5Cu1I,iBAAkBF,EAClBG,mBAAoBH,EACpBlS,kBAAc3sI,KAIhB4H,EAAAA,EAAAA,KAAU,KACJk3I,IAAqBD,GACvBrS,EAAS,CACPuS,iBAAkBF,EAClBG,mBAAoBH,EACpBlS,kBAAc3sI,MAGjB,CAAC8+I,EAAkBD,IAEtB,MAAMI,GAAqBhiJ,EAAAA,EAAAA,KAAa+M,KACtCitH,EAAAA,GAAAA,IAAoB,IAAIjtH,KACxBg1B,EAAiB,CACf9gC,QAASkM,EAAK,sBAEf,CAACA,EAAM40B,IAEJkgH,GAAsBjiJ,EAAAA,EAAAA,KAAa8Y,IACnCA,EAAKopI,WACPb,EAAevoI,EAAKw8F,UAEpBqsC,EAAsB7oI,KAEvB,CAACuoI,IAEEc,GAA6BniJ,EAAAA,EAAAA,KAAY,KAC7C2hJ,OAAsB5+I,KACrB,IAEGq/I,GAAuBpiJ,EAAAA,EAAAA,KAAY,KAClC0hJ,IAID90I,EACF20I,EAAmB,CACjB30I,SACA0oG,SAAUosC,EAAmBpsC,SAC7B17F,UAAW8nI,EAAmB9nI,WAGhC0nI,EAAe,CACbhsC,SAAUosC,EAAmBpsC,SAC7B17F,UAAW8nI,EAAmB9nI,WAGlCuoI,OACC,CAACv1I,EAAQu1I,EAA4BZ,EAAoBD,EAAgBI,IAEtE1qE,GAAah3E,EAAAA,EAAAA,KAAY,CAACkwI,EAAuChwI,KACrE,MAAMsxB,EAAQle,KAAKZ,MAAMw9H,EAAYhtH,EA7Ed,IA8EjBve,EAAQy3D,EAAM0lF,kBAAkBrlH,QAAQv8B,IAAiB,EACzD6hJ,EAAqB3lF,EAAM0lF,kBAAkBhkH,QAAQw3E,GAAaA,IAAap1G,IAEhF6hJ,IAAuBp0H,EAAAA,GAAAA,IAAUhpB,EAAQ6sB,EAAO,EAAGowH,EAAa//I,UAIrEkgJ,EAAmBxzD,OAAO5pF,EAAQ6sB,EAAO,EAAGtxB,GAC5CqvI,GAAU3lI,IAAO,IACZA,EACH8lI,aAAc/qI,EACdo9I,4BAED,CAAC3lF,EAAM0lF,iBAAkBF,EAAa//I,SAEnCsuI,GAAgBnwI,EAAAA,EAAAA,KAAY,KAChCuvI,GAAU3lI,IACJgD,EACF60I,EAAkB,CAChB70I,SACAw0I,UAAWx3I,EAAQm4I,qBAGrBP,EAAc,CAAEJ,UAAWx3I,EAAQm4I,qBAG9B,IACFn4I,EACHk4I,iBAAkBl4I,EAAQm4I,mBAC1BrS,kBAAc3sI,QAGjB,CAAC6J,EAAQ60I,EAAmBD,IAE/B,OACEvhJ,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UClJiB,WDkJWC,SAAA,EAC/BC,EAAAA,GAAAA,GAAA,MAAIF,UCnJoC,WDmJVsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAC/D+M,EAAK,6BAER9M,EAAAA,GAAAA,GAAA,OAAKF,UCtJ2F,WDsJtD+F,MAAO,WAtH9B,GAsH0Ck7I,EAAUv/I,WAAiCzB,SACrGghJ,EAAUvtI,KAAI,CAACwuI,EAAcv8F,KAC5B,MAAMyqF,EAAYn0E,EAAMszE,eAAiB5pF,EACnC0qF,EAzHS,IAyHKp0E,EAAM0lF,kBAAkBrlH,QAAQ4lH,EAAa/sC,WAAa,GACxE7xF,EA1HS,IA0HF24C,EAAM2lF,oBAAoBtlH,QAAQ4lH,EAAa/sC,WAAa,GACnEtiF,EAAWqvH,EAAaH,WAC1B,qBACCG,EAAazoI,SAAW,uBAAyB,2BAEtD,OACEvZ,EAAAA,GAAAA,GAACowI,GAAAA,EAAS,CAERvwI,GAAImiJ,EAAa/sC,SACjB93F,OAAQw5D,EACR05D,UAAWP,EACXjqI,MAAO,QAAQqqI,EAAYC,EAAa/sH,OACxCktH,WAAcxjI,EAAK8kB,MAAQ,OAAS,SAAzB,UACX5nB,YAAag4I,EAAazoI,SAASxZ,UAEnCH,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CAEPxiC,WAAWoW,EAAAA,GAAAA,GAAe,oBC3K8E,YD4KxG6nG,QAAM,EACNC,cAAc,OACdhrG,KAAMgvI,EAAazoI,SAAW,OAAS,cACvCgpB,WAAS,EACTqe,eAAgB,CACd,CACEK,QAASA,KACP0gG,EAAmBK,EAAa/sC,WAElC/nG,MAAOJ,EAAK,QACZkG,KAAM,SAIVlF,QAASA,KACP8zI,EAAoBI,IACpBjiJ,SAAA,EAEFH,EAAAA,GAAAA,IAAA,QAAME,UAAU,QAAOC,SAAA,CAAC,IAErBiiJ,EAAa/sC,aAEhBj1G,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAE+M,EAAK6lB,OAxB5BqvH,EAAa/sC,WATf+sC,EAAa/sC,gBAuC1Bj1G,EAAAA,GAAAA,GAAA,KAAGF,UCxM8D,WDwM/BsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SACnE+M,EAAK,mCAGV9M,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQZ,QAAQu2I,GAChBz1I,QAASk2I,EACT50I,MAAOJ,EAAKu0I,GAAoB9nI,SAAW,gCAAkC,+BAC7E1E,KAAM/H,EAAKu0I,GAAoB9nI,SAAW,+BAAiC,8BAC3E8pB,aAAcv2B,EAAKu0I,GAAoB9nI,SACnC,+BACA,8BACJ+pB,eAAgBy+G,EAChBx+G,sBAAuB89G,GAAoB9nI,iB,gBE3LnD,MAAM0oI,GAAoB,sBAEpBC,IAA+B91H,EAAAA,GAAAA,KAAUixC,GAAOA,KAAM,KAAK,GA4FjE,IAAe1+D,EAAAA,EAAAA,KA1FqBwjJ,EAClCC,kBACAC,SACA3tH,YACA4tH,sBACAC,kBACA/0I,eAEA,MAAM,cAAEg1I,EAAa,gBAAEC,IAAoB12I,EAAAA,EAAAA,OACpCkpG,EAAUytC,IAAex2I,EAAAA,EAAAA,IAASk2I,GAAmB,IAEtDt1I,GAAOC,EAAAA,EAAAA,KACP41I,EAAaN,EAAS,SAAW,WACjCp1I,EAAiBH,EAATu1I,EAAc,oBAA4B,YAElDO,GAA8BvsH,EAAAA,EAAAA,GAAsBisH,GACpDO,EAA+BT,IAAoBntC,EACpDqtC,GAAuBM,OAA+BlgJ,EACrDogJ,EAAa7tC,GAAYmtC,IAAoBntC,GAAYstC,IAAoBttC,GAE5E8tC,EAAiBC,IAAiBl7I,EAAAA,EAAAA,KAAQ,IAC1CmtG,EAASzzG,OAIVyzG,EAASzzG,OAASyhJ,GAAAA,GACb,MAACvgJ,EAAWoK,EAAK,GAAG61I,kBAEzB1tC,EAASzzG,OAAS0hJ,GAAAA,GACb,MAACxgJ,EAAWoK,EAAK,GAAG61I,iBAExBQ,GAAAA,GAAeC,KAAKnuC,QAIYvyG,IAAjCmgJ,GAA8CC,EACzC,GAIF,CACLD,EAA+B/1I,EAAK,GAAG61I,aAAuB11I,QAASvK,GACtC,IAAjCmgJ,EAAyC/1I,EAAK,GAAG61I,eAAqBjgJ,GAV/D,MAACA,EAAWoK,EAAK,GAAG61I,aAVpB,IAsBR,CAAC1tC,EAAU4tC,EAA8BC,EAAYh2I,EAAM61I,EAAY11I,KAE1E3C,EAAAA,EAAAA,KAAU,KACRo4I,EAAYN,GAAmB,MAC9B,CAACC,EAAQD,IAEZ,MAAMiB,GAAuB1jJ,EAAAA,EAAAA,KAAaiN,IACxC,MAAMF,EAAQE,EAAEC,OAAOH,MAAM88D,OAE7B,GAAI64E,IAAW31I,EAAM4tF,MAAM2nD,IAKzB,YAJKv1I,EAAMlL,SACTkhJ,EAAY,IACZl1I,IAAW,MAIf,MAAM81I,EAAc52I,EAAM0qD,QAAQ6qF,GAAmB,IAErDS,EAAYY,IAEoB,KAAhBA,IAA4BC,EAAAA,GAAAA,IAAgBD,GAAa,MAGzE91I,IAAW81I,GAEXpB,IAA6B,KACvBoB,IAAgBlB,IACJC,EAASI,EAAkBD,GACnC,CAAEvtC,SAAUquC,UAGrB,CAACjB,EAAQI,EAAiBD,EAAeJ,EAAiB50I,IAE7D,OACExN,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRhB,MAAO,GAAG21I,EAASv5E,EAAAA,IAAkB,KAAKmsC,IAC1CznG,SAAU61I,EACVp2I,MAAO61I,EAAah2I,EAAK,YAAcG,EACvCiiD,MAAO8zF,EACPQ,QAAST,EACTv8B,SAAU9xF,EACV2U,2BAAyB,O,gBChE/B,MAAM+zB,IAAevnD,EAAAA,GAAAA,KAAUwnD,GAAOA,KAAM,KAAO,GAE7ComF,GAA2B,iCAwPjC,IAAe9kJ,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM,cAAE8yB,GAAkB9yB,GACpB,SACJsS,EAAQ,oBAAE2uI,EAAmB,gBAAEC,EAAiBrzF,MAAOw0F,IACrD50I,EAAAA,EAAAA,KAAezN,GAAQsiJ,aAAe,CAAC,EACrC5xF,EAAc59B,GAAgBgc,EAAAA,EAAAA,KAAW9uC,EAAQ8yB,QAAiBzxB,EAElEkhJ,GAAepa,EAAAA,GAAAA,GAAmBnoI,EAAQ,eAEhD,IAAK0wD,EACH,MAAO,CACLp+C,WACA4uI,kBACAD,sBACAoB,oBACAE,gBAIJ,MACE5qF,UAAW6qF,EACX3qF,SAAU4qF,EAAe,UACzB/C,GACEhvF,EACEgyF,EAAsB5vH,GAAgBmc,EAAAA,EAAAA,KAAmBjvC,EAAQ8yB,QAAiBzxB,EAGxF,MAAO,CACLshJ,mBAHwBC,EAAAA,EAAAA,IAAkBlyF,GAI1C8xF,mBACAC,kBACAI,WAAYH,GAAqBI,IACjCxwI,WACA2uI,sBACAC,kBACAmB,oBACAE,eACA7C,eAtCcryI,EAtPmC01I,EACrD7qI,WACAyqI,oBACAH,mBACAC,kBACAI,aACAvwI,WACA4uI,kBACAmB,oBACApB,sBACAsB,eACA7C,YACAviF,cAEA,MAAM,gBACJ6lF,EAAe,cACfC,IACEv4I,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,KAEPw3I,GAAwBz8I,EAAAA,EAAAA,KAAQ,IAAMi5I,GAAWxvG,MAAK,EAAGswG,gBAAiBA,KAAa,CAACd,IACxFqB,EAAkBmC,GAAuBtvC,UAAY,IACpDuvC,EAAmBC,IAAwBv4I,EAAAA,EAAAA,KAAS,IACpDw4I,EAAwBC,IAA6Bz4I,EAAAA,EAAAA,KAAS,IAC9DgjD,EAAO01F,IAAY14I,EAAAA,EAAAA,OAEnBrK,EAAOgjJ,IAAY34I,EAAAA,EAAAA,OACnB8sD,EAAWC,IAAgB/sD,EAAAA,EAAAA,IAAS23I,GAAoB,KACxD3qF,EAAUC,IAAejtD,EAAAA,EAAAA,IAAS43I,GAAmB,KACrDK,EAAKW,IAAU54I,EAAAA,EAAAA,IAASg4I,GAAc,KACtCa,EAAkBC,IAAuB94I,EAAAA,EAAAA,IAAyBk2I,GAEnE6C,GAAuB78I,EAAAA,EAAAA,GAAS47I,GAAmB,EAAO37I,EAAAA,GAAeC,SAEzEosB,EAAY/gB,IAAauxI,EAAAA,GAAoBC,WAC7CC,GAAuC,IAArBL,EAElBnC,GAA8BvsH,EAAAA,EAAAA,GAAsBisH,GACpDO,EAA+BP,GAAuBM,EACtDyC,EAA8BtE,GAAaA,EAAUv/I,OAAS,EAE9D8jJ,GAAoBx9I,EAAAA,EAAAA,KAAQ,KAC5Bs9I,IAIGt6I,QAAQjJ,IAAU6iJ,GAA2BF,IAAsD,IAAjC3B,IACxE,CAACuC,EAAiBvjJ,EAAO6iJ,EAAwBF,EAAmB3B,KAEvE/3H,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,KAKVl0D,EAAAA,EAAAA,KAAU,KACR8yD,IAAa,KACXinF,SAED,CAACA,KAEJ/5I,EAAAA,EAAAA,KAAU,KACRu6I,OAASniJ,KACR,CAACuiJ,KAEJ36I,EAAAA,EAAAA,KAAU,KACR2uD,EAAa4qF,GAAoB,IACjC1qF,EAAY2qF,GAAmB,IAC/BgB,EAAOZ,GAAc,MACpB,CAACL,EAAkBC,EAAiBI,KAEvC55I,EAAAA,EAAAA,KAAU,KACR06I,EAAoB5C,GAAmB,MACtC,CAACA,KAEJ93I,EAAAA,EAAAA,KAAU,KACJqJ,IAAauxI,EAAAA,GAAoBK,WACnCZ,GAA0B,GAC1BF,GAAqB,GACrBG,OAASliJ,MAEV,CAACiR,IAEJ,MAAM6xI,GAAoB7lJ,EAAAA,EAAAA,KAAa8lJ,IACrCZ,EAASY,KACR,IAEG9rF,GAAwBh6D,EAAAA,EAAAA,KAAaiN,IACzCqsD,EAAarsD,EAAEC,OAAOH,OACtBi4I,GAA0B,KACzB,IAEG7qF,GAAuBn6D,EAAAA,EAAAA,KAAaiN,IACxCusD,EAAYvsD,EAAEC,OAAOH,OACrBi4I,GAA0B,KACzB,IAEGe,GAAkB/lJ,EAAAA,EAAAA,KAAaiN,IACnCk4I,EAAOl4I,EAAEC,OAAOH,OAChBi4I,GAA0B,KACzB,IAEGtB,IAAuB1jJ,EAAAA,EAAAA,KAAa+M,IACxCs4I,EAAoBt4I,GACpB+3I,EAAqBrC,IAAoB11I,KACxC,CAAC01I,IAEEuD,IAAoBhmJ,EAAAA,EAAAA,KAAY,KACpC,MAAMimJ,EAAmB5sF,EAAUwQ,OAC7Bq8E,EAAkB3sF,EAASsQ,OAC3Bs8E,EAAa3B,EAAI36E,OAElBu7E,IAEAa,EAAiBpkJ,OAKtB8iJ,EAAc,CACZziJ,WACI6iJ,GAA0B,CAC5B1rF,UAAW4sF,EACX1sF,SAAU2sF,EACV1B,IAAK2B,MAEHtB,GAAqB,CACvBvvC,SAAU8vC,KAZZH,EAASnB,OAeV,CACD5hJ,EACAm3D,EAAWE,EAAUirF,EAAKO,EAC1BK,EAAkBP,EAClBF,IAkBF,OACE1kJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,uBAAsBC,SAAA,EACnCH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2CAA0CC,SAAA,EACvDH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAC+lJ,GAAAA,EAAc,CACbd,qBAAsBA,EACtBz3I,SAAUg4I,EACVt4I,MAAM,0BACNgT,SAAUwU,KAEZ10B,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRhB,MAAOssD,EACPxrD,SAAUmsD,EACV1sD,MAAOH,EAAK,aACZoT,SAAUwU,EACVw6B,MAAOA,IAAUu0F,GAA2Bv0F,OAAQxsD,KAEtD1C,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRhB,MAAOwsD,EACP1rD,SAAUssD,EACV7sD,MAAOH,EAAK,YACZoT,SAAUwU,KAEZ10B,EAAAA,GAAAA,GAAC2+G,GAAAA,EAAQ,CACPjyG,MAAOy3I,EACP32I,SAAUk4I,EACVz4I,MAAOH,EAAK,WACZoT,SAAUwU,EACV4pD,UAAWslE,EACX/kC,mBAAoB+kC,GAAgBA,EAAeO,EAAI3iJ,QAAQ4kF,gBAAa1jF,QAIhF1C,EAAAA,GAAAA,GAAA,KAAGF,UAAU,4BAA4BsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,UAC1Eg0B,EAAAA,GAAAA,GAAWjnB,EAAK,0BAA2B,CAAC,KAAM,0BAIvDlN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAE+M,EAAK,eAEhF9M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,iBAAgBC,UAC7BC,EAAAA,GAAAA,GAACmiJ,GAAa,CACZC,gBAAiBA,EACjB1tH,UAAWA,EACX4tH,oBAAqBA,EACrBC,gBAAiBA,EACjB/0I,SAAU61I,OAIbK,IAAsBsC,EAAAA,KAnE/B,WACE,MAAMC,EAAmB,GAAGn9E,EAAAA,MAAkBo9E,EAAAA,MAE9C,OACElmJ,EAAAA,GAAAA,GAAA,KAAGF,UAAU,4BAA4BsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SACzE+M,EAAK,mCACJsqD,QAAQ,SAAU,mBAClB4jB,MAAM,KACNxnE,KAAK0yC,GACU,kBAANA,GAAwBlmD,EAAAA,GAAAA,GAAC+5G,GAAAA,EAAQ,CAACziG,IAAK2uI,EAAkBpxI,KAAM,IAAIqxI,EAAAA,QAA0BhgG,KAI/G,CAsD0DigG,IAClDnmJ,EAAAA,GAAAA,GAAA,KAAGF,UAAU,4BAA4BsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,UAC1Eg0B,EAAAA,GAAAA,GAAWjnB,EAAK,gBAAiB,CAAC,KAAM,sBAE1Ci4I,IACCnlJ,EAAAA,GAAAA,IAAA,KAAGE,UAAU,4BAA4BsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAA,CAC1E+M,EAAK,sBACN9M,EAAAA,GAAAA,GAAA,UACAJ,EAAAA,GAAAA,IAAA,QAAME,UAAU,gBAAeC,SAAA,CAC5B+oE,EAAAA,IACAi8E,WAMRM,IACCrlJ,EAAAA,GAAAA,GAAC8gJ,GAAe,CACdC,UAAWA,EACXC,eAAgBgE,QAKtBhlJ,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,QAASo/G,EACTx3I,QAAS63I,GACTzlI,SAAUwU,EACVpiB,UAAWxF,EAAK,QAAQ/M,SAEvB20B,GACC10B,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf5N,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,mB,4BChQrB,MA4IA,IAAe3O,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM,yBACJ+kJ,EAAwB,yBACxBC,EAAwB,uBACxBC,EAAsB,2BACtBC,IACE/1E,EAAAA,GAAAA,GAAqBnvE,GAEzB,MAAO,CACL+kJ,2BACAC,2BACAC,yBACAC,gCAbc73I,EA5IoC83I,EACtDjtI,WACAilD,UACA4nF,2BACAC,2BACAC,yBACAC,iCAEA,MAAM,gBAAEp8D,EAAe,uBAAEyoC,EAAsB,YAAE6zB,IAAgB16I,EAAAA,EAAAA,MAE3D26I,GAAgBt9I,EAAAA,EAAAA,OACfu9I,EAAuBC,IAA4B16I,EAAAA,EAAAA,KAAS,GAE7DY,GAAOC,EAAAA,EAAAA,MAEN85I,EAAqBC,IAA0B56I,EAAAA,EAAAA,KAAS,IAC/D5B,EAAAA,EAAAA,KAAU,KACRK,OAAOo8I,UAAUC,yBAAyBrhE,KAAKmhE,KAC9C,KAEHh8H,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,IAGV,MAAMyoF,GAAoB36I,EAAAA,EAAAA,IAAgB,KACxC,MAAM46I,EAAO,IAAIC,KAAK,EAACC,EAAAA,GAAAA,OAAiBC,EAAAA,IAAoB,CAAEnmJ,KAAM,eAC9DoW,EAAMgwI,IAAIC,gBAAgBL,IAChC/zI,EAAAA,GAAAA,GAASmE,EAAK+vI,EAAAA,QAGVG,GAAkC7nJ,EAAAA,EAAAA,KAAamvF,IACnDnkF,OAAOo8I,UAAUD,uBAAuBh4D,KACvC,IAEG24D,GAAoBn7I,EAAAA,EAAAA,IAAiBM,IACzC65I,EAAY,CAAEiB,OAAQ96I,EAAEoW,QAAS2kI,OAAQ/6I,EAAEqW,aAGvC2kI,GAAwBt7I,EAAAA,EAAAA,IAAgB,KAC5C69E,EAAgB,CAAEc,WAAW,OAGzB48D,GAAav7I,EAAAA,EAAAA,IAAgB,KACjC,MAAMsgC,EAAS85G,EAAcn9I,QACxBqjC,IAEDk7G,EAAAA,GAAAA,GAAYl7G,KACdg6G,GAAyB,GAEzBh8I,YAAW,KACTg8I,GAAyB,KACxB,UAIP,OACEhnJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iCAAgCC,SAAA,EAC7CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,GAAAA,GAACqkG,GAAAA,EAAuB,CACtBjkG,OAAQC,GAAAA,EAAe0nJ,aACvB7nJ,KAAM,IACNJ,UAAU,oBACVuvC,gBAAc,EACd7uC,QAAQ,KAEVR,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCsW,IAAI,OAAMrW,SAAE+M,EAAK,yCAEjElN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPx0B,QAAS85I,EACT50I,KAAK,aAAYjT,UAEjBC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,QAAOC,SAAC,6BAEzBC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPx0B,QAAS25I,EACTz0I,KAAK,gBACLkN,UAAW8nI,EAAAA,GAA4BjoJ,UAEvCC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,QAAOC,SAAC,kBAEzBC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtuB,IAAK0yI,EACL54I,QAAS+5I,EACT70I,KAAK,UACLkN,UAAW+nI,EAAAA,GACXpiJ,MAAO8gJ,EAAwB,qBAAuB,GAAG5mJ,UAEzDC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,QAAOC,SAAC,4BAGzBC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAM,uBACNg8B,QAASn+B,QAAQu7I,GAEjBtzF,QAASA,IAAM6/D,EAAuB,CAAEyzB,0BAA2BA,OAGrErmJ,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAM,uBACNiT,UAAWmmI,EACXp9G,QAASn+B,QAAQs7I,GAEjBrzF,QAASA,IAAM6/D,EAAuB,CAAEwzB,0BAA2BA,OAGrEpmJ,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,uBACZm8B,QAASn+B,QAAQw7I,GAEjBvzF,QAASA,IAAM6/D,EAAuB,CAAE0zB,wBAAyBA,OAGnEtmJ,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAM,gCACNg8B,QAASn+B,QAAQy7I,GAEjBxzF,QAASA,IAAM6/D,EAAuB,CAAE2zB,4BAA6BA,MAGtE2B,EAAAA,KACCloJ,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAM,qBACNg8B,QAASn+B,QAAQ+7I,GACjB9zF,QAASy0F,KAIbxnJ,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPx0B,QAASm5I,EACTj0I,KAAK,MAAKjT,UAEVC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,QAAOC,SAAC,6B,0BCnIjC,MAgKA,IAAepB,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM,MACJi7D,EAAK,qBACL6rF,EAAoB,oBACpBC,EAAmB,gBACnBC,EAAe,WACfC,IACE93E,EAAAA,GAAAA,GAAqBnvE,GAEzB,MAAO,CACL+mJ,sBACAC,kBACAC,aACAhsF,QACA6rF,0BAfcz5I,EAhK+B65I,EACjDhvI,WACA8uI,kBACAD,sBACAE,aACAhsF,QACA6rF,uBACA3pF,cAEA,MAAM,uBACJo0D,EAAsB,mBAAEqf,IACtBlmI,EAAAA,EAAAA,MAEEe,GAAO2mC,EAAAA,GAAAA,MAEP,SAAEr0C,IAAaC,EAAAA,EAAAA,MACfmpJ,EAAiBppJ,IAAauX,EAAAA,IAAUD,EAAAA,IAExC+xI,EAAoC,CAAC,CACzCx7I,MAAOH,EAAK,wBACZJ,MAAO,OACN,CACDO,MAAOH,EAAK,wBACZJ,MAAO,QAGHg8I,EAAyC,CAAC,CAC9Cz7I,MAAOH,EAAK,4BACZJ,MAAO,SACN,CACDO,MAAOH,EAAK,2BACZJ,MAAO,QACN,CACDO,MAAOH,EAAK,6BACZJ,MAAO,SAGHi8I,EAAuBH,OAOzB9lJ,EAP0C,CAC5C,CAAEgK,MAAO,QAASO,MAAOH,EAAK,qBAAsB2hF,SAAU3hF,EAAK,iCACnE,CACEJ,MAAO,aACPO,MAAOH,EAAKglD,EAAAA,IAAan7C,EAAAA,GAAS,uBAAyB,yBAC3D83E,SAAU3hF,EAAK,sCAIb87I,GAA8BjpJ,EAAAA,EAAAA,KAAa22E,IAC/C10E,SAAS4kD,gBAAgB3gD,MAAMinC,YAC7B,uBAAwB,GAAG75B,KAAKma,IAAIkpD,EAAS3/D,EAAAA,GAAS,GAAK,SAE7D/U,SAAS4kD,gBAAgB3gD,MAAMinC,YAAY,wBAAyB,GAAG75B,KAAKmI,MAAgB,OAAVk7D,QAClF10E,SAAS4kD,gBAAgB3gD,MAAMinC,YAAY,sBAAuB,GAAGwpC,OACrE10E,SAAS4kD,gBAAgBqiG,aAAa,yBAA0BvyE,EAAQ8P,YAExEwsC,EAAuB,CAAEy1B,gBAAiB/xE,MACzC,IAEGwyE,GAA8BnpJ,EAAAA,EAAAA,KAAa+M,IAC/C,MAAMq8I,EAAqB,SAAVr8I,GAAmBs8I,EAAAA,GAAAA,KAAmBt8I,EAEvDkmH,EAAuB,CAAEt2D,MAAOysF,IAChCn2B,EAAuB,CAAEu1B,qBAAgC,SAAVz7I,MAC9C,IAEGu8I,GAAyBtpJ,EAAAA,EAAAA,KAAaupJ,IAC1Ct2B,EAAuB,CAAE01B,WAAYY,IACrCt2B,EAAuB,CAAEu2B,0BAA0B,KAEnDC,EAAAA,GAAAA,IAAcF,KACb,IAEGG,GAA+B1pJ,EAAAA,EAAAA,KAAa2pJ,IAChD12B,EAAuB,CAAEw1B,oBAAqBkB,MAC7C,KAEIC,EAAmBC,IAAwBt9I,EAAAA,EAAAA,KAAS,IAC3D5B,EAAAA,EAAAA,KAAU,KACRK,OAAOo8I,UAAU0C,uBAAuB9jE,KAAK6jE,KAC5C,IAEH,MAAME,GAAgC/pJ,EAAAA,EAAAA,KAAamvF,IACjDnkF,OAAOo8I,UAAUyC,qBAAqB16D,KACrC,IAOH,OALAhkE,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,KAIR5+D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iCAAgCC,SAAA,EAC7CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAE+M,EAAK,eAEhF9M,EAAAA,GAAAA,GAAC2f,GAAAA,EAAW,CACV1S,MAAOH,EAAK,YACZ+gB,IAAK,GACLT,IAAK,GACL1gB,MAAO27I,EACP76I,SAAUo7I,KAGZ5oJ,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,QACL+qG,QAAM,EAENjwG,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBwX,wBAAyB5pJ,SAEpF+M,EAAK,oBAGPo7I,EAAAA,IAAe0B,EAAAA,KACd5pJ,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,gBACZm8B,QAASn+B,QAAQy+I,GACjBx2F,QAAS22F,QAKf9pJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SACtE+M,EAAK,YAER9M,EAAAA,GAAAA,GAACqN,GAAAA,EAAU,CACTC,KAAK,QACLC,QAASm7I,EACTj7I,SAAU06I,EAAuB,OAAS7rF,EAC1C9uD,SAAUs7I,QAIdlpJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SACtE+M,EAAK,yBAER9M,EAAAA,GAAAA,GAACqN,GAAAA,EAAU,CACTC,KAAK,aACLC,QAASk7I,EACTh7I,SAAU66I,EACV96I,SAAUy7I,OAIbN,IACC/oJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAE+M,EAAK,uBAEhF9M,EAAAA,GAAAA,GAACqN,GAAAA,EAAU,CACTC,KAAK,yBACLC,QAASo7I,EACTn7I,SAAU67I,EACV57I,SAAU26I,c,4BCjKtB,MAsFA,IAAezpJ,EAAAA,EAAAA,KAtFqBkrJ,EAClCC,YACAxtF,QACAskC,aACA9yF,cAEA,MAAM,KAAEg6D,EAAI,SAAElmE,GAAakoJ,EACrBC,EAAiB,YAAYnoJ,EAAS/B,KACtCiJ,EAAelH,EAAS4G,eACxBA,GAAiBJ,EAAAA,EAAAA,GAAS,GAAG2hJ,YAC7B9zG,GAAWC,EAAAA,GAAAA,GAAct0C,EAASw+B,WAAWl3B,QAAS4B,QAAQtC,IAAiB,IAC/E,qBAAEub,IAAyBE,EAAAA,GAAAA,GAC/BnZ,QAAQtC,GAAkBM,QAC1BpG,OACAA,EACA,QAEIsnJ,GAAe5gJ,EAAAA,EAAAA,KAAO,IACrB6gJ,EAAeC,IAAoBh+I,EAAAA,EAAAA,KAAS,IAEjDzD,UAAW0hJ,EAAS,aAAExhJ,IACpBC,EAAAA,EAAAA,GAAyBmhJ,GAAiBE,GACxCG,GAA2D,KAAzC/zH,EAAAA,EAAAA,GAAsB4zH,IACtCpmI,aAAcC,EAAqBC,qBAAsBC,IAAsBC,EAAAA,GAAAA,GACpFgmI,IAAkBE,GAAcriF,IAASuiF,EAAAA,QAC1C3nJ,EACA0nJ,EACA,QAGIE,GAAclhJ,EAAAA,EAAAA,MACpBkhJ,EAAY/gJ,QAAU+yD,EAEtB,MAAMg8D,GAAe34H,EAAAA,EAAAA,KAAY,KAC/B,WACE,MAAM4qJ,QAAaC,EAAAA,EAAAA,IAAUL,SACvBM,GAASC,KAAKC,EAAAA,IAAsBL,EAAY/gJ,QAAUghJ,GAChEz8I,EAAQg6D,EACT,EAJD,KAKC,CAACqiF,EAAWr8I,EAASg6D,KAExBx9D,EAAAA,EAAAA,KAAU,KAEJ6/I,GAAaH,EAAazgJ,UAC5B+uH,IACA0xB,EAAazgJ,SAAU,KAExB,CAAC4gJ,EAAW7xB,IAEf,MAAMh0G,GAAc3kB,EAAAA,EAAAA,KAAY,KAC1BwqJ,EACF7xB,KAEA0xB,EAAazgJ,SAAU,EACvB2gJ,GAAkBU,IAAeA,OAElC,CAACT,EAAW7xB,IAETx4H,GAAYoW,EAAAA,GAAAA,GAChB,gBACA0qF,GAAc,YAGhB,OACE5gG,EAAAA,GAAAA,GAAA,OAAKF,UAAWA,EAAWgO,QAASwW,EAAYvkB,UAC9CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,GAAAA,GAAA,UACEgU,IAAKiiC,EACLn2C,UAAU,eAEZE,EAAAA,GAAAA,GAAA,OACE2D,IAAK6E,GAAkBM,EACvBhJ,WAAWoW,EAAAA,GAAAA,GAAe,aAAc6N,GACxCuE,IAAI,GACJ9kB,WAAW,IAEZsgB,IACC9jB,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAe,oBAAqB8N,GAAmBjkB,UACrEC,EAAAA,GAAAA,GAAC0T,GAAAA,EAAe,CAACC,SAAUhL,EAAcmF,QAASwW,cCpExD84C,IAAevnD,EAAAA,GAAAA,KAAUwnD,GAAOA,KAAM,KAAO,GAkInD,IAAe1+D,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAMi7D,GAAQuD,EAAAA,EAAAA,KAAYx+D,IACpB,WAAE69G,EAAU,UAAEH,IAAcK,EAAAA,EAAAA,KAAkB/9G,EAAQi7D,IAAU,CAAC,GACjE,iBAAEuuF,GAAqBxpJ,EAAOqxC,SAEpC,MAAO,CACLwsE,aACAH,YACA8rC,mBACAvuF,WAVc5tD,EAhIyCo8I,EAC3DvxI,WACAilD,UACA0gD,aACAH,YACA8rC,mBACAvuF,YAEA,MAAM,eACJyuF,EAAc,gBACdC,EAAe,iBACfC,EAAgB,mBAChBhZ,IACElmI,EAAAA,EAAAA,MAEEm/I,GAAW9hJ,EAAAA,EAAAA,MACjB8hJ,EAAS3hJ,QAAU+yD,GAGnBhyD,EAAAA,EAAAA,KAAU,KACR8yD,IAAa,KACX2tF,SAED,CAACA,IAEJ,MAAMI,GAAmBxrJ,EAAAA,EAAAA,KAAaiN,IACpC,MAAM,MAAE6hD,GAAU7hD,EAAEC,OAEdu+I,GAAiBC,EAAAA,EAAAA,IAAc58F,GACjC28F,GAAgB5pJ,QAClBwpJ,EAAgBI,EAAe,MAEhC,CAACJ,IAEEM,GAAwB3rJ,EAAAA,EAAAA,KAAY,MACxC4rJ,EAAAA,GAAAA,GAvCoB,aAuCmBJ,GAAkB,KACxD,CAACA,IAEEK,GAAiB7rJ,EAAAA,EAAAA,KAAY,KACjCsyI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBsZ,+BAC5C,IAEGC,GAAuB/rJ,EAAAA,EAAAA,KAAY,KACvCsrJ,EAAiB,CACf3uF,QACA4iD,gBAAYx8G,EACZghE,qBAAiBhhE,EACjBq8G,WAAW,EACXE,aAAwB,SAAV3iD,EAAmBqvF,EAAAA,IAA2BC,EAAAA,QAE7D,CAACX,EAAkB3uF,IAEhBuvF,GAAwBlsJ,EAAAA,EAAAA,KAAamoE,IACzCmjF,EAAiB,CAAE3uF,MAAO4uF,EAAS3hJ,QAAU21G,WAAYp3C,IACzD,MAAMgkF,EAAmBjB,GAAoBA,EAAiBt5G,MAAMu4G,GAAcA,EAAUhiF,OAASA,IACjGgkF,GAAkBlqJ,SAASw+B,YAC7B2rH,EAAAA,GAAAA,IAAgBD,EAAiBlqJ,SAASw+B,UAAUl3B,SACjDy8E,MAAM/3E,IACL,MAAMqxG,GAAe+sC,EAAAA,GAAAA,IAAgBp+I,GAC/Bq+I,EAAW,KAAIC,EAAAA,GAAAA,IAAQt+I,KAC7Bq9I,EAAiB,CAAE3uF,MAAO4uF,EAAS3hJ,QAAUm6D,gBAAiBuoF,EAAUhtC,sBAG7E,CAAC4rC,EAAkBI,IAEhBkB,GAA4BxsJ,EAAAA,EAAAA,KAAaiN,IAC7Cq+I,EAAiB,CAAE3uF,MAAO4uF,EAAS3hJ,QAAUw1G,UAAWnyG,EAAEC,OAAOo8B,YAChE,CAACgiH,IAEEn+I,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,IAGV,MAAM4tF,EAAcvB,IAAmB,IAAMA,EAAiB,GAAG/iF,OAASuiF,EAAAA,GAE1E,OACEzqJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2DAA0DC,SAAA,EACvEH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,aACLlT,UAAU,OACVogB,SAAUksI,EACVt+I,QAASw9I,EAAsBvrJ,SAE9B+M,EAAK,kBAGR9M,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,WACLlT,UAAU,OACVgO,QAAS09I,EAAezrJ,SAEvB+M,EAAK,eAGR9M,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAACtvB,KAAK,WAAWlF,QAAS49I,EAAqB3rJ,SACrD+M,EAAK,2BAGR9M,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,qBACZm8B,QAASn+B,QAAQi0G,GACjBvxG,SAAU2+I,OAIbtB,GACC7qJ,EAAAA,GAAAA,GAAA,OAAKF,UAAU,sBAAqBC,SACjC8qJ,EAAiBr3I,KAAKs2I,IACrB9pJ,EAAAA,GAAAA,GAAC6pJ,GAAa,CAEZC,UAAWA,EACXxtF,MAAOA,EACPskC,WAAYse,IAAe4qC,EAAUhiF,KACrCh6D,QAAS+9I,GAJJ/B,EAAUhiF,WASrB9nE,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,WCrHV2gG,IAAcC,EAAAA,GAAAA,KAAQC,EAAAA,GAAAA,IAAQ,WAC9BC,GAAoB,CACxB,UAAW,UAAW,UAAW,UAAW,UAAW,UACvD,UAAW,UAAW,UAAW,UAAW,UAAW,WAyMzD,SAASC,GAAcC,EAA+BC,GACpD,MAAO,CACLC,cAAe,CACb35I,KAAKZ,MAAOq6I,EAAI,IAAOC,EAAME,UAAUrjJ,MAAQ,IAC/CyJ,KAAKZ,OAAO,EAAIq6I,EAAI,KAAOC,EAAME,UAAUhjJ,OAAS,KAEtDijJ,YAAa75I,KAAKZ,MAAMq6I,EAAI,IAAMC,EAAMI,QAAQvjJ,MAAQ,IAE5D,CAEA,SAASwjJ,IACP,cAAEJ,EAAa,YAAEE,GACjBH,GAEA,MAAO,CACLG,GAAeH,EAAMI,QAAQvjJ,MAAQ,GACrCojJ,EAAc,IAAMD,EAAME,UAAUrjJ,MAAQ,GAC5C,EAAIojJ,EAAc,IAAMD,EAAME,UAAUhjJ,OAAS,GAErD,CA4EA,UAAelL,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAMi7D,GAAQuD,EAAAA,EAAAA,KAAYx+D,IACpB,gBAAEqiE,IAAoB07C,EAAAA,EAAAA,KAAkB/9G,EAAQi7D,IAAU,CAAC,EACjE,MAAO,CACLoH,kBACApH,WANc5tD,EArSyCo8I,EAC3DvxI,WACAilD,UACAlC,QACAoH,sBAEA,MAAM,iBAAEunF,IAAqBl/I,EAAAA,EAAAA,MAEvBm/I,GAAW9hJ,EAAAA,EAAAA,MACjB8hJ,EAAS3hJ,QAAU+yD,EACnB,MAAMjzC,GAAejgB,EAAAA,EAAAA,MACf6jJ,GAAiB7jJ,EAAAA,EAAAA,MACjB8jJ,GAAe9jJ,EAAAA,EAAAA,MACf+jJ,GAAgB/jJ,EAAAA,EAAAA,KAAO,IAEtBsjJ,EAAKU,IAAUlhJ,EAAAA,EAAAA,IAiLxB,SAAuBw3D,GACrB,OAAOA,GAAmBA,EAAgBk/D,WAAW,MACjD0pB,EAAAA,GAAAA,KAAQC,EAAAA,GAAAA,IAAQ7oF,EAAgBtM,QAAQ,IAAK,MAC7Ci1F,EACN,CArLiCgB,CAAc3pF,IAEvC4pF,GAASlkJ,EAAAA,EAAAA,IAAOsjJ,IACtBpiJ,EAAAA,EAAAA,KAAU,KACRgjJ,EAAO/jJ,QAAUmjJ,IAChB,CAACA,IAEJ,MAAOh6E,EAAY66E,EAAgBC,IAAoBvuJ,EAAAA,EAAAA,MAChDwuJ,EAAUC,IAAexhJ,EAAAA,EAAAA,IAAS,KAClCyhJ,EAAUC,IAAe1hJ,EAAAA,EAAAA,IAAS,IAEnC2hJ,GAAWzkJ,EAAAA,EAAAA,MACX0kJ,GAAc1kJ,EAAAA,EAAAA,OAGpBkB,EAAAA,EAAAA,KAAU,KAER,MAAMuiJ,EAAY,CAChBkB,WAAYd,EAAe1jJ,QAASwkJ,eACjC/9F,EAAAA,GAAAA,IAAKi9F,EAAe1jJ,QAAS2S,wBAAyB,CAAC,MAAO,QAAS,YAEtE6wI,EAAU,CACdgB,WAAYb,EAAa3jJ,QAASwkJ,eAC/B/9F,EAAAA,GAAAA,IAAKk9F,EAAa3jJ,QAAS2S,wBAAyB,CAAC,WAK1D,SAAS8xI,EAAgBphJ,GACvB,MAAMggJ,EAAgB,CACpB35I,KAAK4a,IAAI5a,KAAKma,IAAI,EAAGxgB,EAAEyP,MAASwwI,EAAUkB,YAAalB,EAAUrjJ,MAAQ,GACzEyJ,KAAK4a,IAAI5a,KAAKma,IAAI,EAAGxgB,EAAE6e,MAASohI,EAAUzpI,IAAMiG,EAAa9f,QAASgxB,WAAYsyH,EAAUhjJ,OAAS,KAGjG,YAAEijJ,GAAgBL,GAAca,EAAO/jJ,QAASskJ,EAAStkJ,SAK/D,OAHA6jJ,EAAOJ,GAAc,CAAEJ,gBAAeE,eAAee,EAAStkJ,UAC9DgkJ,KAEO,CACT,CAWA,SAASU,EAAcrhJ,GACrB,MAAM,cAAEggJ,GAAkBH,GAAca,EAAO/jJ,QAASskJ,EAAStkJ,SAC3DujJ,EAAc75I,KAAK4a,IAAI5a,KAAKma,IAAI,EAAGxgB,EAAEyP,MAAS0wI,EAAQgB,YAAahB,EAAQvjJ,MAAQ,GAKzF,OAHA4jJ,EAAOJ,GAAc,CAAEJ,gBAAeE,eAAee,EAAStkJ,UAC9DgkJ,KAEO,CACT,CAjCAM,EAAStkJ,QAAU,CAAEsjJ,YAAWE,YAgBhChwI,EAAAA,GAAAA,IAAckwI,EAAe1jJ,QAAU,CACrCyT,UAAWgxI,EACX7wI,OAAQ6wI,EACR9wI,UAAWswI,EACX1/I,QAAS0/I,EACTU,wBAAyB,kCACzBC,YAAY,KAadpxI,EAAAA,GAAAA,IAAcmwI,EAAa3jJ,QAAU,CACnCyT,UAAWixI,EACX9wI,OAAQ8wI,EACR/wI,UAAWswI,EACX1/I,QAAS0/I,EACTU,wBAAyB,kCACzBC,YAAY,MAEb,CAACZ,EAAgBC,IAEpB,MAAM,cAAEZ,EAAgB,CAAC,EAAG,GAAE,YAAEE,EAAc,GAAMe,EAAStkJ,QAAUkjJ,GAAcC,EAAKmB,EAAStkJ,SAAW,CAAC,EACzG6kJ,GAAMlC,EAAAA,GAAAA,KAAQmC,EAAAA,GAAAA,IAAQ3B,IACtB4B,EAAM5B,EAAI,GACV6B,GAASrC,EAAAA,GAAAA,KAAQmC,EAAAA,GAAAA,IAAQ,CAACC,EAAK,EAAG,MAGxChkJ,EAAAA,EAAAA,KAAU,KACR,MAAMkkJ,GAAMH,EAAAA,GAAAA,IAAQ3B,GACd9+I,EAAQ,KAAIs+I,EAAAA,GAAAA,IAAQsC,KAK1B,GAHAd,EAAYc,EAAI9nI,KAAK,OACrBknI,EAAYhgJ,IAEPu/I,EAAc5jJ,QAAS,CAC1B,MAAM01G,GAAe+sC,EAAAA,GAAAA,IAAgBwC,GACrCvD,EAAiB,CACf3uF,MAAO4uF,EAAS3hJ,QAChB21G,gBAAYx8G,EACZghE,gBAAiB91D,EACjBqxG,gBAEJ,CACAkuC,EAAc5jJ,SAAU,IACvB,CAACmjJ,EAAKzB,KAGT3gJ,EAAAA,EAAAA,KAAU,MA2GZ,SACEb,EACA6kJ,EACAR,EACAD,GAEA,IAAIY,EACAC,EACApxH,EAECwwH,EAAYvkJ,SAAYskJ,EAAStkJ,SAWpCklJ,EAAIZ,EAAStkJ,QAAQsjJ,UAAUrjJ,MAC/BklJ,EAAIb,EAAStkJ,QAAQsjJ,UAAUhjJ,OAC/ByzB,EAAMwwH,EAAYvkJ,UAXlBklJ,EAAIhlJ,EAAOojC,YACX6hH,EAAIjlJ,EAAO+wB,aACX8C,EAAM7zB,EAAOG,WAAW,MAExBH,EAAOD,MAAQilJ,EACfhlJ,EAAOI,OAAS6kJ,EAEhBZ,EAAYvkJ,QAAU+zB,GAOxB,MAAMqxH,EAAUrxH,EAAKsxH,gBAAgBH,EAAGC,GAClCG,EAASF,EAAQl2I,KACjBq2I,GAAMT,EAAAA,GAAAA,IAAQ,CAACC,EAAK,EAAG,IAE7B,IAAIhqJ,EAAQ,EAEZ,IAAK,IAAIue,EAAI,EAAGA,EAAI6rI,EAAG7rI,IAAK,CAC1B,MAAMksI,EAAO,EAAIlsI,GAAK6rI,EAAI,GACpBM,EAAK,CAAC,IAAMD,EAAM,IAAMA,EAAM,IAAMA,GACpCE,EAAK,CAACH,EAAI,GAAKC,EAAMD,EAAI,GAAKC,EAAMD,EAAI,GAAKC,GACnD,IAAK,IAAIxyI,EAAI,EAAGA,EAAIkyI,EAAGlyI,IAAK,CAC1B,MAAM2yI,EAAO3yI,GAAKkyI,EAAI,GACtBI,EAAOvqJ,KAAW0qJ,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOvqJ,KAAW0qJ,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOvqJ,KAAW0qJ,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOvqJ,KAAW,GACpB,CACF,CAEAg5B,EAAK6xH,aAAaR,EAAS,EAAG,EAChC,CAxJIS,CAAUnC,EAAe1jJ,QAAS3D,WAAiC0oJ,EAAKR,EAAaD,KACpF,CAACS,KAGJhkJ,EAAAA,EAAAA,KAAU,MAsJZ,SAAiBb,GACf,MAAMglJ,EAAIhlJ,EAAOojC,YAEjBpjC,EAAOD,MAAQilJ,EACfhlJ,EAAOI,OAFG,EAGV,MAAMyzB,EAAM7zB,EAAOG,WAAW,MAExB+kJ,EAAUrxH,EAAIsxH,gBAAgBH,EAL1B,GAMJI,EAASF,EAAQl2I,KAEvB,IAAInU,EAAQ,EAEZ,IAAK,IAAIiY,EAAI,EAAGA,EAAIkyI,EAAGlyI,IAAK,CAC1B,MAAM+xI,EAAM/xI,GAAKkyI,EAAI,GACfD,GAAMH,EAAAA,GAAAA,IAAQ,CAACC,EAAK,EAAG,IAE7BO,EAAOvqJ,KAAWkqJ,EAAI,GACtBK,EAAOvqJ,KAAWkqJ,EAAI,GACtBK,EAAOvqJ,KAAWkqJ,EAAI,GAEtBK,EAAOvqJ,KAAW,GACpB,CAEAg5B,EAAI6xH,aAAaR,EAAS,EAAG,EAC/B,CA7KIU,CAAQnC,EAAa3jJ,QAAS3D,cAC7B,IAEH,MAAM0pJ,GAAkB3vJ,EAAAA,EAAAA,KAAaiN,IACnC,MAAM2iJ,EAAW3iJ,EAAE6X,cAAc/X,MAAM0qD,QAAQ,WAAY,IAAIhZ,MAAM,EAAG,IAExE,GAAImxG,EAASj1D,MAAM,mCAAoC,CACrD,MAAMk0D,EAAMe,EAASv0E,MAAM,KAAKxnE,KAAKg8I,GAAYnqI,OAAOmqI,EAAQhmF,UAChE4jF,GAAOd,EAAAA,GAAAA,IAAQkC,GACjB,CAEA5hJ,EAAE6X,cAAc/X,MAAQ6iJ,IACvB,IAEGE,GAAkB9vJ,EAAAA,EAAAA,KAAaiN,IACnC,MAAM8iJ,EAAW9iJ,EAAE6X,cAAc/X,MAAM0qD,QAAQ,gBAAiB,IAAIhZ,MAAM,EAAG,GAEzEsxG,EAASp1D,MAAM,uBACjB8yD,GAAOd,EAAAA,GAAAA,KAAQC,EAAAA,GAAAA,IAAQmD,EAASt4F,QAAQ,IAAK,OAG/CxqD,EAAE6X,cAAc/X,MAAQgjJ,IACvB,IAEGC,GAA6BhwJ,EAAAA,EAAAA,KAAaiN,IAC9CwgJ,GAAOd,EAAAA,GAAAA,KAAQC,EAAAA,GAAAA,IAAQ3/I,EAAE6X,cAAcmrI,QAAQhiJ,MAAOwpD,QAAQ,IAAK,SAClE,IAEGt3D,GAAYoW,EAAAA,GAAAA,GAChB,gEACAw8D,GAAc,eAQhB,OALA5nD,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,KAIR5+D,EAAAA,GAAAA,IAAA,OAAKoU,IAAKqV,EAAcvpB,UAAWA,EAAUC,SAAA,EAC3CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,qBAAoBC,SAAA,EACjCH,EAAAA,GAAAA,IAAA,OAAKoU,IAAKi5I,EAAgBntJ,UAAU,eAAcC,SAAA,EAChDC,EAAAA,GAAAA,GAAA,cACAA,EAAAA,GAAAA,GAAA,OACEF,UAAU,SACV+F,MAAO,wBAAwB+mJ,EAAc,SAASA,EAAc,6BAA6BwB,WAGrGxuJ,EAAAA,GAAAA,IAAA,OAAKoU,IAAKk5I,EAAcptJ,UAAU,aAAYC,SAAA,EAC5CC,EAAAA,GAAAA,GAAA,cACAA,EAAAA,GAAAA,GAAA,OACEF,UAAU,SACV+F,MAAO,yBAAyBinJ,4BAAsCyB,WAG1E3uJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,QAAOC,SAAA,EACpBC,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CAAChB,MAAOihJ,EAAU1gJ,MAAM,MAAMO,SAAUiiJ,KAClDzvJ,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CAAChB,MAAO+gJ,EAAUxgJ,MAAM,MAAMO,SAAU8hJ,WAGtDtvJ,EAAAA,GAAAA,GAAA,OAAKF,UAAU,oBAAmBC,SAC/BysJ,GAAkBh5I,KAAK5F,IACtB5N,EAAAA,GAAAA,GAAA,OACEF,WAAWoW,EAAAA,GAAAA,GAAe,mBAAoBtI,IAAU,IAAIwgJ,IAAQ,cAAW1rJ,GAC/E,aAAYkL,EACZ/H,MAAO,qBAAqB+H,KAC5BE,QAAS6hJ,eCyErB,IAAehxJ,EAAAA,EAAAA,KA/RsBkxJ,EACnChe,gBACAie,iBACAtxF,cAEA,MAAM,QACJuxF,EAAO,0BACPt0E,EAAyB,mBACzBw2D,IACElmI,EAAAA,EAAAA,OAEE,SAAE3M,IAAaC,EAAAA,EAAAA,OACd2wJ,EAAqBC,IAA0B/jJ,EAAAA,EAAAA,KAAS,GAEzDgkJ,ECnCO,SAAuBj2G,EAAgBg+B,GACpD,MAAMk4E,GAAmB/mJ,EAAAA,EAAAA,IAAO,GAC1Bc,GAAad,EAAAA,EAAAA,MAkBnB,OAjBoBzJ,EAAAA,EAAAA,KAAY,KAE9B,GADAwwJ,EAAiB5mJ,UD+BoB,IC9BjC4mJ,EAAiB5mJ,QAGnB,OAFA4mJ,EAAiB5mJ,QAAU,OAC3B0uE,IAIE/tE,EAAWX,SACbc,aAAaH,EAAWX,SAG1BW,EAAWX,QAAUqB,YAAW,KAC9BulJ,EAAiB5mJ,QAAU,IAlBX,OAoBjB,CDiBoC,ECjB3B0uE,GAGd,CDc2Bm4E,CAAc,GAAG,KACxCne,EAAmB,CAAES,OAAQP,EAAAA,GAAgB4V,kBAGzCsI,GAA0B1wJ,EAAAA,EAAAA,KAAY,KAC1CswJ,GAAuB,KACtB,IAEGK,GAA2B3wJ,EAAAA,EAAAA,KAAY,KAC3CswJ,GAAuB,KACtB,IAEGM,GAA+B5wJ,EAAAA,EAAAA,KAAY,KAC1CmwJ,GAELr0E,EAA0B,CAAEK,SAAUg0E,MACrC,CAACA,EAAgBr0E,IAEd+0E,GAAuB7wJ,EAAAA,EAAAA,KAAY,KACvC2wJ,IACAP,EAAQ,CAAEU,cAAc,MACvB,CAACH,EAA0BP,IAExBW,GAAsE5oJ,EAAAA,EAAAA,KAAQ,IAC3E,EAAGsK,YAAW1G,aACnB1L,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLqN,QAAStgB,EACTc,KAAK,UACL0N,MAAM,cACN9N,UAAW4L,EAAS,SAAW,GAC/BoC,QAASsE,EACTE,UAAU,eAAcvS,UAExBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,YAGd,CAAClO,IAEEo0C,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,KAiNb,OACE7zC,EAAAA,GAAAA,IAAA,OAAKE,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLnS,KAAK,UACL0N,MAAM,cACNE,QAAS0wD,EACTlsD,UAAWkhC,EAAQ,kBAAkBzzC,UAErCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,iBAxNjB,WACE,OAAQukI,GACN,KAAKM,EAAAA,GAAgBwe,YACnB,OAAO3wJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,8BACtB,KAAK2+F,EAAAA,GAAgBye,QACnB,OAAO5wJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,aACtB,KAAK2+F,EAAAA,GAAgB0e,cACnB,OAAO7wJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,sBACtB,KAAK2+F,EAAAA,GAAgBtmD,YACnB,OAAO7rF,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,WACtB,KAAK2+F,EAAAA,GAAgBliF,cACnB,OAAOjwD,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,mBACtB,KAAK2+F,EAAAA,GAAgB2e,YACnB,OAAO9wJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,kBACtB,KAAK2+F,EAAAA,GAAgB0D,QACnB,OAAO71I,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,qBACtB,KAAK2+F,EAAAA,GAAgB4e,SACnB,OAAO/wJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,cACtB,KAAK2+F,EAAAA,GAAgB6e,eACnB,OAAOhxJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,oBACtB,KAAK2+F,EAAAA,GAAgB8e,SACnB,OAAOjxJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,kBACtB,KAAK2+F,EAAAA,GAAgB4V,aACnB,OAAO/nJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,+BAEtB,KAAK2+F,EAAAA,GAAgBwX,sBACnB,OAAO3pJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,oBACtB,KAAK2+F,EAAAA,GAAgBsZ,2BACnB,OAAOzrJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,cAEtB,KAAK2+F,EAAAA,GAAgB+e,mBACnB,OAAOlxJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,kBACtB,KAAK2+F,EAAAA,GAAgBgf,gBACnB,OAAOnxJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,qBACtB,KAAK2+F,EAAAA,GAAgBif,oBACnB,OAAOpxJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,0BACtB,KAAK2+F,EAAAA,GAAgBkf,WACnB,OAAOrxJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,gBACtB,KAAK2+F,EAAAA,GAAgBmf,gBACnB,OAAOtxJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,qBACtB,KAAK2+F,EAAAA,GAAgBof,aACnB,OAAOvxJ,EAAAA,GAAAA,GAAA,MAAAD,SAAK+M,EAAK,kBACnB,KAAKqlI,EAAAA,GAAgBqf,kBACnB,OAAOxxJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,qBACtB,KAAK2+F,EAAAA,GAAgBsf,qBACnB,OAAOzxJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,0BACtB,KAAK2+F,EAAAA,GAAgBuf,gBACnB,OAAO1xJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,qBACtB,KAAK2+F,EAAAA,GAAgB2G,kBACnB,OAAO94I,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,4BACtB,KAAK2+F,EAAAA,GAAgB8G,iBACnB,OAAOj5I,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,WAEtB,KAAK2+F,EAAAA,GAAgBwf,+BACrB,KAAKxf,EAAAA,GAAgByf,mCACrB,KAAKzf,EAAAA,GAAgB0f,0BACrB,KAAK1f,EAAAA,GAAgB2f,iCACnB,OAAO9xJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,qBAEtB,KAAK2+F,EAAAA,GAAgB4f,8BACrB,KAAK5f,EAAAA,GAAgB6f,kCACrB,KAAK7f,EAAAA,GAAgB8f,yBACrB,KAAK9f,EAAAA,GAAgB+f,gCACnB,OAAOlyJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,oBAEtB,KAAK2+F,EAAAA,GAAgBggB,kCACrB,KAAKhgB,EAAAA,GAAgBigB,+BACrB,KAAKjgB,EAAAA,GAAgBkgB,4BACrB,KAAKlgB,EAAAA,GAAgBmgB,iCACrB,KAAKngB,EAAAA,GAAgBogB,oCACrB,KAAKpgB,EAAAA,GAAgBqgB,gCACrB,KAAKrgB,EAAAA,GAAgBsgB,+BACnB,OAAOzyJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,iBAEtB,KAAK2+F,EAAAA,GAAgBugB,iCACrB,KAAKvgB,EAAAA,GAAgBwgB,8BACrB,KAAKxgB,EAAAA,GAAgBygB,2BACrB,KAAKzgB,EAAAA,GAAgB0gB,gCACrB,KAAK1gB,EAAAA,GAAgB2gB,mCACrB,KAAK3gB,EAAAA,GAAgB4gB,+BACrB,KAAK5gB,EAAAA,GAAgB6gB,8BACnB,OAAOhzJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,gBAEtB,KAAK2+F,EAAAA,GAAgBuH,sBACnB,OAAO15I,EAAAA,GAAAA,GAAA,MAAAD,SAAK+M,EAAK,oBAEnB,KAAKqlI,EAAAA,GAAgB8gB,YACnB,OAAOjzJ,EAAAA,GAAAA,GAAA,MAAAD,SAAK+M,EAAK,oBAEnB,KAAKqlI,EAAAA,GAAgB+gB,eACnB,OAAOlzJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,mBACtB,KAAK2+F,EAAAA,GAAgBghB,eACnB,OAAOnzJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,sBACtB,KAAK2+F,EAAAA,GAAgBihB,oBACnB,OAAOpzJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,kBAEtB,KAAK2+F,EAAAA,GAAgBkhB,cACrB,KAAKlhB,EAAAA,GAAgBmhB,aACnB,OAAOtzJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,yBACtB,KAAK2+F,EAAAA,GAAgBohB,iBACrB,KAAKphB,EAAAA,GAAgBqhB,uBACrB,KAAKrhB,EAAAA,GAAgBshB,2BACnB,OAAOzzJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,gCACtB,KAAK2+F,EAAAA,GAAgBuhB,wBACnB,OAAO1zJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,2BACtB,KAAK2+F,EAAAA,GAAgBwhB,qBACrB,KAAKxhB,EAAAA,GAAgByhB,wBACnB,OAAO5zJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,kBACtB,KAAK2+F,EAAAA,GAAgB0hB,sBACrB,KAAK1hB,EAAAA,GAAgB2hB,mBACnB,OAAO9zJ,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,wBACtB,KAAK2+F,EAAAA,GAAgB4hB,0BACrB,KAAK5hB,EAAAA,GAAgB6hB,uBACnB,OAAOh0J,EAAAA,GAAAA,GAAA,MAAAD,SAAI,wBACb,KAAKoyI,EAAAA,GAAgB8hB,qBACnB,OAAOj0J,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,oCACtB,KAAK2+F,EAAAA,GAAgB+hB,2BACrB,KAAK/hB,EAAAA,GAAgBgiB,aACrB,KAAKhiB,EAAAA,GAAgBiiB,kCACnB,OAAOp0J,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,gCAEtB,KAAK2+F,EAAAA,GAAgB2D,iBACrB,KAAK3D,EAAAA,GAAgB6D,gBACrB,KAAK7D,EAAAA,GAAgB8C,oBACrB,KAAK9C,EAAAA,GAAgBgD,2BACrB,KAAKhD,EAAAA,GAAgBkD,wBACnB,OAAOr1I,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,cAEtB,KAAK2+F,EAAAA,GAAgBoC,gBACnB,OAAOv0I,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,sCAEtB,KAAK2+F,EAAAA,GAAgBmC,8BACrB,KAAKnC,EAAAA,GAAgBsD,0BACnB,OAAOz1I,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,qCAEtB,KAAK2+F,EAAAA,GAAgBwD,8BACnB,OAAO31I,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,oDAEtB,KAAK2+F,EAAAA,GAAgBqB,QACnB,OAAOxzI,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,aACtB,KAAK2+F,EAAAA,GAAgBC,oBACnB,OAAOpyI,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,eACtB,KAAK2+F,EAAAA,GAAgBX,aACnB,OAAOxxI,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,4BACtB,KAAK2+F,EAAAA,GAAgBE,kBACrB,KAAKF,EAAAA,GAAgBG,8BACrB,KAAKH,EAAAA,GAAgBI,yBACnB,OACE3yI,EAAAA,GAAAA,IAAA,OAAKE,UAAU,uBAAsBC,SAAA,EACnCC,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,gBACZ1oC,QAAQglJ,KACP9vJ,EAAAA,GAAAA,GAACqT,GAAAA,EAAY,CACXvT,UAAU,qBACVwT,QAASo9I,EACTn9I,UAAU,QAAOxT,UAEjBC,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,SAASI,aAAW,EAACtF,QAASyiJ,EAA6BxwJ,SACvEyzC,EAAQ,iBAMrB,KAAK2+F,EAAAA,GAAgBK,qBACrB,KAAKL,EAAAA,GAAgBe,iCACrB,KAAKf,EAAAA,GAAgBM,qBACrB,KAAKN,EAAAA,GAAgBiB,iCACnB,OACEpzI,EAAAA,GAAAA,GAAA,MAAAD,SACGyzC,EACCq+F,IAAkBM,EAAAA,GAAgBK,sBAC/BX,IAAkBM,EAAAA,GAAgBe,iCACjC,gBAAkB,mBAI9B,QACE,OACEtzI,EAAAA,GAAAA,IAAA,OAAKE,UAAU,uBAAsBC,SAAA,EAEnCC,EAAAA,GAAAA,GAAA,MAAI8N,QAASoiJ,EAAiBnwJ,SAC3ByzC,EAAQ,eAGXxzC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLqN,QAAStgB,EACTc,KAAK,UACL0N,MAAM,cAENE,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBwe,cAC5Dr+I,UAAWkhC,EAAQ,4BAA4BzzC,UAE/CC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,YAEbtN,EAAAA,GAAAA,GAACqT,GAAAA,EAAY,CACXvT,UAAU,qBACVwT,QAASo9I,EACTn9I,UAAU,QAAOxT,UAEjBC,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,SAASlF,QAASuiJ,EAAwBtwJ,SAAEyzC,EAAQ,sBAK/E,CAaK/K,IACDzoC,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQskJ,EACRpkJ,QAAS0kJ,EACTz7I,KAAM2+B,EAAQ,mBACdnQ,aAAcmQ,EAAQ,0BACtBlQ,eAAgBktH,EAChBjtH,sBAAoB,UE5H5B,IAAe5kC,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM,aACJgzJ,EAAY,kBAAEC,EAAiB,eAAEjU,GAC/Bh/I,EAAOqxC,SAASwrG,OACd,SAAEqC,EAAQ,UAAEgU,IAAc/jF,EAAAA,GAAAA,GAAqBnvE,GAIrD,MAAO,CACLu+B,sBAH2B0B,EAAAA,EAAAA,KAA2BjgC,GAItDkzJ,YACAhU,WACA8T,eACAC,oBACAjU,oBAfc3xI,EAnJgC8lJ,EAClDj7I,WACAqmB,uBACA20H,YACAhU,WACA8T,eACAC,oBACAjU,iBACA7hF,cAEA,MAAM,cACJi2F,EAAa,iBACbr8B,EAAgB,uBAChBxF,EAAsB,iBACtBjxF,EAAgB,mBAChBswG,IACElmI,EAAAA,EAAAA,OAEG2oJ,EAAkBC,IAAuBzoJ,EAAAA,EAAAA,IAAiBq0I,IAC1D7rH,EAAWkgI,EAAeC,IAAmB51J,EAAAA,EAAAA,KAE9C61J,EAA2Bl1H,GAAwB00H,EAEnDxnJ,GAAOC,EAAAA,EAAAA,MAEbzC,EAAAA,EAAAA,KAAU,KACHiqJ,GAAW/yJ,QACdizJ,MAED,CAACF,IAEJ,MAAMltE,GAAe/6E,EAAAA,EAAAA,IAAiBisH,IACpCo8B,EAAoBp8B,GACpBq8B,KAEKG,EAAAA,GAAAA,IAAex8B,GAAsB,KACxCs8B,IAEAjiC,EAAuB,CAAE2tB,SAAUhoB,UAIjChrH,GAAUzF,EAAAA,EAAAA,KAAQ,KACtB,IAAKysJ,EAAW,OAChB,MAAMS,GAAmBrqJ,OAAOsqJ,UAAU1U,UAAY,MAAMh3F,cACtD2rG,EAAgBF,EAAgBG,OAAO,EAAG,GAEhD,OAAOZ,EAAU/gJ,KAAI,EAAG+kH,WAAU68B,aAAY9nJ,WAAW,CACvDZ,MAAO6rH,EACPtrH,MAAOmoJ,EACP3mE,SAAUnhF,EACVonB,UAAW6jG,IAAam8B,GAAoBhgI,MACf+uB,MAAMC,IAC5BsxG,GAAoBtxG,EAAEh3C,QAAUsoJ,GAAmBtxG,EAAEh3C,QAAUwoJ,EAAsB,GAAJ,MAEzF,CAACxgI,EAAW6/H,EAAWG,IAEpBW,GAA8B/oJ,EAAAA,EAAAA,IAAiBusF,IACnDu/B,EAAiB,CAAEi8B,aAAcx7D,OAG7By8D,GAAmChpJ,EAAAA,EAAAA,IAAiBusF,IACxDu/B,EAAiB,CAAEk8B,kBAAmBz7D,OAGlC08D,GAAkCjpJ,EAAAA,EAAAA,IAAgB,KACjDszB,GACH+B,EAAiB,CACfQ,eAAgB,oBAKhBqzH,GAAqB1tJ,EAAAA,EAAAA,KAAQ,KACjC,GAAK2tJ,EAAAA,IAA6BpV,EAAe7+I,OAIjD,OAA8B,IAA1B6+I,EAAe7+I,OACK,IAAIs3H,KAAKC,aAAa,CAACwnB,GAAW,CAAEr/I,KAAM,aAC3C83H,GAAGqnB,EAAe,IAGlCvzI,EAAK,YAAauzI,EAAe7+I,UACvC,CAAC6+I,EAAgBvzI,EAAMyzI,IAEpBmV,GAAwBppJ,EAAAA,EAAAA,IAAgB,KAC5C2lI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB6e,oBAQ/C,OALAlmI,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,KAIR5+D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,mDAAkDC,SAAA,CAC9D01J,EAAAA,KACC71J,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,uBACZm8B,QAASorH,EACTthG,QAASsiG,KAEXr1J,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,2BACZm8B,QAAS6rH,EACT50I,UAAW0f,EACXkrF,UAAYlrF,OAAgCl9B,EAAT,OACnCqoH,aAAcwqC,EACdxiG,QAASuiG,KAETjB,GAAgBS,KAChBl1J,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPy7E,QAAM,EACNjwG,QAAS4nJ,EAAsB31J,SAAA,CAE9B+M,EAAK,mBACN9M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,+BAA8BC,SAAEy1J,QAGpDx1J,EAAAA,GAAAA,GAAA,KAAGF,UAAU,sCAAqCC,SAC/C+M,EAAK,sCAIZlN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,qCAAoCC,SAAA,EACjDC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAsBC,SACjC+M,EAAK,oCAEPS,GACCvN,EAAAA,GAAAA,GAAC0sF,GAAU,CACTvnC,MAAO53C,EACP+/E,cAAeonE,EACf3nE,qBAAmB,EACnBqB,sBAAuB/G,EACvBniD,cAAc,QACdplC,UAAU,qBAGZE,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,c,wCCtIlB,MAyNA,IAAe/sD,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM,cAAE8yB,GAAkB9yB,EACpBs0J,GAAsBC,EAAAA,EAAAA,IAAuCv0J,GAC7Do/G,EAAep/G,EAAOo2F,OAAOipB,QAC7BqD,EAAa1iH,EAAO2iH,KAAKtD,QAE/B,MAAO,CACLm1C,aAAcx0J,EAAOg5I,eAAeqB,cAAcl6I,OAClD2yB,gBACAonE,gBAAgBC,EAAAA,EAAAA,KAA+Bn6F,GAC/Cs0J,sBACAl1C,eACAsD,gBAbcr1G,EAzN4BonJ,EAC9Cv8I,WACA4a,gBACA0hI,eACAt6D,gBACAo6D,sBACAl1C,eACAsD,aACAvlD,cAEA,MAAM,sBACJzoC,EAAqB,iBACrB4L,EAAgB,gBAChBo0H,EAAe,QACf9/H,EAAO,wBACP+/H,EAAuB,sBACvB5xC,EAAqB,mBACrB6tB,IACElmI,EAAAA,EAAAA,OAEGkqJ,EAAqBC,EAAmBC,IAAsBl3J,EAAAA,EAAAA,IAAQ,GAEvE6N,GAAO2mC,EAAAA,GAAAA,MAEbnpC,EAAAA,EAAAA,KAAU,KACJ6pB,GACF4B,EAAsB,CAAEpqB,OAAQwoB,EAAeiiI,WAAW,MAE3D,CAACjiI,KAEJrJ,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,IAGV,MAAM63F,GAAoB/pJ,EAAAA,EAAAA,IAAgB,KACxCypJ,IACAI,OAGF,OACEv2J,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iCAAgCC,SAAA,EAC7CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,kCAAiCC,SAAA,CAC7Co0B,IACCn0B,EAAAA,GAAAA,GAACs2J,GAAAA,EAAW,CACV3qJ,OAAQwoB,EACRoiI,aAAczrJ,QAAQyO,GACtBsrB,eAAa,IAGhB1Q,IACCn0B,EAAAA,GAAAA,GAACw2J,GAAAA,EAAS,CACRC,aAActiI,EACduiI,cAAY,QAIlB92J,EAAAA,GAAAA,IAAA,OAAKE,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,WACL+qG,QAAM,EAENjwG,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBye,UAAW7wJ,SAEtE+M,EAAK,4CAER9M,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,aACL+qG,QAAM,EAENjwG,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB8gB,cAAelzJ,SAE1E+M,EAAK,qBAER9M,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,SACL+qG,QAAM,EAENjwG,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBliF,gBAAiBlwD,SAE5E+M,EAAK,oBAER9M,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,OACL+qG,QAAM,EAENjwG,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB2e,cAAe/wJ,SAE1E+M,EAAK,mBAER9M,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,OACL+qG,QAAM,EAENjwG,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB0D,UAAW91I,SAEtE+M,EAAK,sBAER9M,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,SACL+qG,QAAM,EAENjwG,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBqB,UAAWzzI,SAEtE+M,EAAK,cAERlN,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPtvB,KAAK,kBACL+qG,QAAM,EAENjwG,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB+gB,iBAAkBnzJ,SAAA,CAE7E+M,EAAK,iBACL+oJ,EAAe,IAAM71J,EAAAA,GAAAA,GAAA,QAAMF,UAAU,+BAA8BC,SAAE81J,QAExEj2J,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPtvB,KAAK,WACL+qG,QAAM,EAENjwG,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB4e,WAAYhxJ,SAAA,CAEvE+M,EAAK,aACN9M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,+BAA8BC,SAAE+M,EAAK6pJ,aAAavB,iBAEpEp1J,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,WACL+qG,QAAM,EAENjwG,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB8e,WAAYlxJ,SAEvE+M,EAAK,sBAGVlN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,qBAAoBC,SAAA,CAChCw7F,IACCv7F,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPG,aAAaziC,EAAAA,GAAAA,GAAC43I,GAAAA,EAAQ,CAAC93I,UAAU,0BAA0BoB,KAAK,UAAUhB,KAAK,QAC/E69G,QAAM,EAENjwG,QAASA,IAAM6zB,IAAmB5hC,SAEjC+M,EAAK,sBAGVlN,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPG,aAAaziC,EAAAA,GAAAA,GAAC43I,GAAAA,EAAQ,CAAC93I,UAAU,0BAA0BoB,KAAK,OAAOhB,KAAK,QAC5E69G,QAAM,EAENjwG,QAASA,IAAMs2G,EAAsB,CAAC,GAAGrkH,SAAA,CAExC+M,EAAK,aACLhC,QAAQ21G,KACPzgH,EAAAA,GAAAA,GAAA,QAAMF,UAAU,+BAA8BC,UAC3C62J,EAAAA,GAAAA,IAAkB9pJ,EAAM2zG,SAI/B7gH,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPG,aAAaziC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACzS,UAAU,0BAA0BwN,KAAK,YAC5DywG,QAAM,EACNjwG,QAASA,IAAMs2G,EAAsB,CAAEh/B,SAAU2/B,EAAAA,MAAqBhlH,SAAA,CAErE+M,EAAK,WACLhC,QAAQi5G,KACP/jH,EAAAA,GAAAA,GAAA,QAAMF,UAAU,+BAA8BC,UAC3C82J,EAAAA,GAAAA,IAA4B9yC,EAAW9pE,OAAQ8pE,EAAW3+B,eAIhEuwE,IACC31J,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,OACL+qG,QAAM,EAENjwG,QAASA,IAAMkoJ,IAA0Bj2J,SAExC+M,EAAK,sBAIZlN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,cACL+qG,QAAM,EACNjwG,QAASooJ,EAAkBn2J,SAE1B+M,EAAK,mBAER9M,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,OACL+qG,QAAM,EAENjwG,QAASA,IAAMmoB,EAAQ,CAAE3e,IAAKw/I,EAAAA,MAAW/2J,SAExC+M,EAAK,sBAER9M,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,iBACL+qG,QAAM,EAENjwG,QAASA,IAAMmoB,EAAQ,CAAE3e,IAAKy/I,EAAAA,MAAeh3J,SAE5C+M,EAAK,2BAGV9M,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQuqJ,EACR5yH,aAAcv2B,EAAK,MACnBI,MAAOJ,EAAK,gBACZgb,UAAWhb,EAAK,mBAAepK,EAAW,CAAE03C,WAAW,EAAM0sC,kBAAmB,CAAC,QACjFxjD,eAAgB+yH,EAChBzqJ,QAASuqJ,W,2BC3NjB,MA8MA,IAAex3J,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACQ,CACL21J,8BAA+BlsJ,QAAQzJ,EAAOqxC,SAASwrG,MAAM8Y,+BAC7DC,oBAAqB51J,EAAOqxC,SAASwrG,MAAM+Y,oBAC3CC,qBAAsB71J,EAAOqxC,SAASwrG,MAAMgZ,qBAC5CC,wBAAyB91J,EAAOqxC,SAASwrG,MAAMiZ,2BANjCzoJ,EA9MqC0oJ,EACvD79I,WACAilD,UACA64F,iBACAL,gCACAE,uBACAD,sBACAE,8BAEA,MAAM,yBACJG,EAAwB,gCACxBC,EAA+B,2BAC/BC,EAA0B,8BAC1BC,IACE1rJ,EAAAA,EAAAA,OAEJzB,EAAAA,EAAAA,KAAU,KACRgtJ,MACC,CAACA,IAEJ,MAAMI,GAAeC,EAAAA,GAAAA,GAAgB,KAAK,GAEpCC,GAA4BC,EAAAA,GAAAA,MAC5BC,EAAmCF,KAA8BG,EAAAA,GAAAA,MAEjEC,GAAuBr4J,EAAAA,EAAAA,KAAY,CACvCiN,EACAqrJ,EACAC,KAEA,MAAMC,EAAiBrtJ,QAAQusJ,IAAiBY,IAAWG,YACrDC,EAA4BvtJ,QAAQusJ,IAAiBY,IAAWK,oBAEtEd,EAA2B,CACzBS,WACA95I,QAAqB,SAAZ+5I,GAAsBtrJ,EAAEC,OAAOo8B,QAAUkvH,EAClDG,mBAAgC,iBAAZJ,EAA6BtrJ,EAAEC,OAAOo8B,QAAUovH,MAErE,CAAChB,IAEEkB,GAA+B54J,EAAAA,EAAAA,KAAaiN,IAChD,MAAMqgE,EAAYrgE,EAAEC,OAAOo8B,QAC3BwuH,EAA8B,CAC5BR,oBAAqBhqF,MAChBA,GAAa,CAAEiqF,sBAAsB,OAE3C,CAACO,IAEEe,GAAgC74J,EAAAA,EAAAA,KAAaiN,IACjD6qJ,EAA8B,CAC5BP,qBAAsBtqJ,EAAEC,OAAOo8B,YAEhC,CAACwuH,IAEEgB,GAAwC94J,EAAAA,EAAAA,KAAaiN,IACzDorJ,EAAqBprJ,EAAG,QAAS,UAChC,CAACorJ,IAEEU,GAAkC/4J,EAAAA,EAAAA,KAAaiN,IACnDorJ,EAAqBprJ,EAAG,QAAS,kBAChC,CAACorJ,IAEEW,GAAkCh5J,EAAAA,EAAAA,KAAaiN,IACnDorJ,EAAqBprJ,EAAG,SAAU,UACjC,CAACorJ,IAEEY,GAA4Bj5J,EAAAA,EAAAA,KAAaiN,IAC7CorJ,EAAqBprJ,EAAG,SAAU,kBACjC,CAACorJ,IAEEa,GAAoCl5J,EAAAA,EAAAA,KAAaiN,IACrDorJ,EAAqBprJ,EAAG,WAAY,UACnC,CAACorJ,IAEEc,GAA8Bn5J,EAAAA,EAAAA,KAAaiN,IAC/CorJ,EAAqBprJ,EAAG,WAAY,kBACnC,CAACorJ,IAEEe,GAAkCp5J,EAAAA,EAAAA,KAAaiN,IACnD2qJ,EAAgC,CAC9BxmC,UAAWnkH,EAAEC,OAAOo8B,YAErB,CAACsuH,IAEE1yI,GAAqBllB,EAAAA,EAAAA,KAAaue,IACtCu5I,EAA8B,CAC5BN,wBAAyBj5I,IAE3Bw5I,GAAa,KAAMsB,EAAAA,GAAAA,SAAgBt2J,EAAWwb,OAC7C,CAACw5I,EAAcD,IAEZ3qJ,GAAO2mC,EAAAA,GAAAA,KAOb,OALA3oB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,KAIR5+D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iCAAgCC,SAAA,EAC7CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SACtE+M,EAAK,uBAER9M,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,oBACZ2hF,SAAU3hF,EAAKmqJ,EAAsB,+BAAiC,iCACtEhuH,QAASguH,EACT/2I,UAAW03I,EACXpqJ,SAAU+qJ,KAEZv4J,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,wBACZoT,UAAW+2I,IAAwBa,EACnCrpE,SACI3hF,EADMgrJ,EACDZ,EAAuB,+BAAiC,gCACxD,0CACTjuH,QAASiuH,EACT1pJ,SAAUgrJ,KAEZx4J,EAAAA,GAAAA,GAAA,OAAKF,UAAU,uBAAsBC,UACnCC,EAAAA,GAAAA,GAAC2f,GAAAA,EAAW,CACV1S,MAAOH,EAAK,sBACZ+gB,IAAK,EACLT,IAAK,GACLlN,UAAW03I,EACXlrJ,MAAOyqJ,EACP3pJ,SAAUqX,UAIhBjlB,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SACtE+M,EAAK,+BAGR9M,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,gCACZ2hF,SAAU3hF,EAAKuqJ,GAAgB5wH,OAAO2xH,WAClC,+BAAiC,iCACrCnvH,QAASn+B,QAAQusJ,GAAgB5wH,OAAO2xH,YACxC5qJ,SAAUirJ,KAEZz4J,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,kBACZoT,UAAWm3I,GAAgB5wH,OAAO2xH,WAClC3pE,SAAU3hF,EAAKuqJ,GAAgB5wH,OAAO6xH,mBAClC,+BAAiC,iCACrCrvH,QAASn+B,QAAQusJ,GAAgB5wH,OAAO6xH,oBACxC9qJ,SAAUkrJ,QAId94J,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAE+M,EAAK,mBAEhF9M,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,0BACZ2hF,SAAU3hF,EAAKuqJ,GAAgB4B,QAAQb,WACnC,+BAAiC,iCACrCnvH,QAASn+B,QAAQusJ,GAAgB4B,QAAQb,YACzC5qJ,SAAUmrJ,KAEZ34J,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,kBACZoT,UAAWm3I,GAAgB4B,QAAQb,WACnC3pE,SAAU3hF,EAAKuqJ,GAAgB4B,QAAQX,mBACnC,+BAAiC,iCACrCrvH,QAASn+B,QAAQusJ,GAAgB4B,QAAQX,oBACzC9qJ,SAAUorJ,QAIdh5J,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAE+M,EAAK,qBAEhF9M,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,4BACZ2hF,SAAU3hF,EAAKuqJ,GAAgBr0E,UAAUo1E,WACrC,+BAAiC,iCACrCnvH,QAASn+B,QAAQusJ,GAAgBr0E,UAAUo1E,YAC3C5qJ,SAAUqrJ,KAEZ74J,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,kBACZoT,UAAWm3I,GAAgBr0E,UAAUo1E,WACrC3pE,SAAU3hF,EAAKuqJ,GAAgBr0E,UAAUs1E,mBACrC,+BAAiC,iCACrCrvH,QAASn+B,QAAQusJ,GAAgBr0E,UAAUs1E,oBAC3C9qJ,SAAUsrJ,QAIdl5J,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAE+M,EAAK,iBAEhF9M,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,iBACZm8B,QAAS+tH,EACTxpJ,SAAUurJ,c,4BC7LpB,MAAMG,GAA4C,CAChD,+BACA,kCACA,iCAGIC,GAAmD,CACvD,+BACA,kCACA,iCAGIC,GAA4C,CAChD,CAAC,yCAA0C,CACzC,CAAE5zI,IAAK,kBAAmBvY,MAAO,sCACjC,CAAEuY,IAAK,2BAA4BvY,MAAO,8BAC1C,CAAEuY,IAAK,wBAAyBvY,MAAO,kCACvC,CAAEuY,IAAK,4BAA6BvY,MAAO,+BAC3C,CAAEuY,IAAK,wBAAyBvY,MAAO,uCACvC,CAAEuY,IAAK,kBAAmBvY,MAAO,iCAAkCiT,UAAWm5I,EAAAA,IAC9E,CAAE7zI,IAAK,wBAAyBvY,MAAO,kCACvC,CAAEuY,IAAK,aAAcvY,MAAO,+BAE9B,CAAC,8BAA+B,CAC9B,CAAEuY,IAAK,gBAAiBvY,MAAO,oCAC/B,CAAEuY,IAAK,uBAAwBvY,MAAO,mCACtC,CAAEuY,IAAK,kBAAmBvY,MAAO,sCACjC,CAAEuY,IAAK,iBAAkBvY,MAAO,uCAElC,CAAC,mCAAoC,CACnC,CAAEuY,IAAK,eAAgBvY,MAAO,kCAC9B,CAAEuY,IAAK,iBAAkBvY,MAAO,uCA0JpC,IAAetO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAsBrN,IACjC,CACLi4J,qBAAqBC,EAAAA,EAAAA,KAA0Bl4J,MAF/BqN,EAtJpB,UAA6B,SAC3B6K,EAAQ,oBACR+/I,EAAmB,QACnB96F,IAEA,MAAM,uBACJo0D,EAAsB,0BACtB4mC,IACEztJ,EAAAA,EAAAA,OAEJ+e,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,IAGV,MAAM1xD,GAAO2mC,EAAAA,GAAAA,MACNgmH,EAAuBC,IAA4BxtJ,EAAAA,EAAAA,IAAkC,CAAC,GAEvFytJ,GAAuB7xJ,EAAAA,EAAAA,KAAQ,IAC5BsxJ,GAAoB56G,QAAO,CAACiL,GAAM,CAAEl8C,GAAUjJ,KACnDmlD,EAAInlD,GAASiJ,EAAQ+jG,OAAM,EAAG9rF,SAAU8zI,EAAoB9zI,KAErDikC,IACN,CAAC,IACH,CAAC6vG,IAEEM,GAAsB9xJ,EAAAA,EAAAA,KAAQ,KAC9B+xJ,EAAAA,GAAAA,GAAaP,EAAqBQ,GAAAA,IAC7BC,EAAAA,KAELF,EAAAA,GAAAA,GAAaP,EAAqBU,GAAAA,IAC7BC,EAAAA,KAELJ,EAAAA,GAAAA,GAAaP,EAAqBY,GAAAA,IAC7BC,EAAAA,IAGFC,EAAAA,KACN,CAACd,IAEEe,GAAwBvyJ,EAAAA,EAAAA,KAAQ,KACpB8xJ,IAAwBQ,EAAAA,IACpCjB,GACAD,IAEW1lJ,KAAKw1B,GAAWl8B,EAAKk8B,MACnC,CAAC4wH,EAAqB9sJ,IAEnBwtJ,GAAsB36J,EAAAA,EAAAA,KAAY,CAACiN,EAAqBtI,KAC5DsI,EAAE6Y,iBACF,MAAM80I,EAAel1I,OAAO/gB,GAE5Bo1J,GAA0Bz7F,IAAI,IACzBA,EACH,CAACs8F,IAAgBt8F,EAAKs8F,SAEvB,IAEGC,GAA6B76J,EAAAA,EAAAA,KAAa86J,IAC9C,MAAMC,EAAcD,IAAaR,EAAAA,IAC7BD,GAAAA,GACCS,IAAaN,EAAAA,IAAsBD,GAAAA,GAAgCJ,GAAAA,GAExElnC,EAAuB,CAAE8U,eAAgB+yB,EAA4BE,8BAA8B,IACnGnB,EAA0BkB,KACzB,IAEGE,GAA4Bj7J,EAAAA,EAAAA,KAAaiN,IAC7C,MAAM,KAAEU,EAAI,QAAE27B,GAAYr8B,EAAEC,OACtBguJ,EAAoBzB,GAAoB7nH,MAAK,EAAEupH,KAAiBA,IAAgBxtJ,IACtF,IAAKutJ,EACH,OAGF,MAAME,EAAcF,EAAkB,GAAGr8G,QAAO,CAACiL,GAAOjkC,UACtDikC,EAAIjkC,GAAOyjB,EACJwgB,IACN,CAAC,GAEJ+vG,EAA0BuB,KACzB,IAEGC,GAAuBr7J,EAAAA,EAAAA,KAAaiN,IACxC,MAAM,KAAEU,EAAI,QAAE27B,GAAYr8B,EAAEC,OAE5B2sJ,EAA0B,CAAE,CAAClsJ,GAA6B27B,MACzD,IAEH,OACErpC,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iCAAgCC,SAAA,EAC7CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SACtE+M,EAAK,qCAER9M,EAAAA,GAAAA,GAAA,KAAGF,UAAU,4BAA4BsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAC1E+M,EAAK,wCAGR9M,EAAAA,GAAAA,GAAC2f,GAAAA,EAAW,CACVpS,QAAS8sJ,EACT3tJ,MAAOktJ,IAAwBQ,EAAAA,IAAyBD,EAAAA,IAAsBP,EAC9EpsJ,SAAUgtJ,QAId56J,EAAAA,GAAAA,IAAA,OAAKE,UAAU,4DAA2DC,SAAA,EACxEC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAI,OAAMrW,SAAC,iCAE/Cq5J,GAAoB5lJ,KAAI,EAAEsnJ,EAAavtJ,GAAUjJ,KAE9C1E,EAAAA,GAAAA,IAAA,OAEEE,UAAU,4BAA2BC,SAAA,EAErCC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,yBAAwBC,UACrCC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAMwtJ,EACNpuJ,MAAOpI,EAAM8hF,WACbn9C,QAAS0wH,EAAqBr1J,GAC9B2I,MAAOH,EAAKguJ,GACZhwC,UAAW2uC,EAAsBn1J,GAAS,KAAO,OACjDkJ,SAAUotJ,EACV7vC,aAAcuvC,MAGjBxvJ,QAAQ2uJ,EAAsBn1J,MAC7BtE,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kCAAiCC,SAC7CwN,EAAQiG,KAAI,EAAGgS,MAAKvY,QAAOiT,eAC1B,GAAY,eAARsF,GAAyByiI,EAAAA,GAC7B,OACEjoJ,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CAEPxlD,KAAMkY,EACNyjB,QAASqwH,EAAoB9zI,GAC7BvY,MAAOH,EAAKG,GACZiT,SAAUA,EACV1S,SAAUwtJ,GALLx1I,UApBVs1I,UAqCnB,KC6OA,IAAen8J,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MACEqxC,UACEwrG,OAAO,YACL+c,EAAW,mBAAEvyF,EAAkB,mBAAEwyF,EAAkB,kCAAEC,EAAiC,uCACtFljB,EAAsC,yBAAEJ,GACzC,QACD7wG,EAAO,eACPo0H,GACD,QACD35G,EACAgzF,UAAU,YACR4mB,GACD,UACDprH,GACE5uC,GAEE,sBAAEi6J,IAA0B9qF,EAAAA,GAAAA,GAAqBnvE,GACjD82I,EAA0BrtI,QAAQ+sI,GAClC0jB,GAAsBtpH,EAAAA,EAAAA,KAA0B5wC,GAEtD,MAAO,CACLu+B,sBAAsB0B,EAAAA,EAAAA,KAA2BjgC,GACjD45J,cACAI,YAAavwJ,QAAQuwJ,GACrBG,aAAc/5G,EAAQ46D,WACtBo/C,aAAcp6J,EAAO47I,kBAAkBvB,cAAcl6I,OACrDknE,qBACAgzF,6BAA8B5wJ,QAAQmlC,GAAWyrH,8BACjDP,oCACAD,qBACAjjB,yCACAE,0BACAwjB,yBAA0B7wJ,QAAQmlC,GAAW0rH,0BAC7C30H,UACAs0H,wBACAM,gBAAgBC,EAAAA,EAAAA,KAAqBx6J,GACrCk6J,sBACAH,oBAvCc1sJ,EA1Z+BotJ,EACjDviJ,WACAqmB,uBACAq7H,cACAI,cACAG,eACAC,eACA/yF,qBACAwyF,qBACAQ,+BACAP,oCACAljB,yCACAE,0BACAmjB,wBACAM,iBACAD,2BACA30H,UACAw3B,UACA+8F,sBACAH,qBAEA,MAAM,uBACJW,EAAsB,oBACtBC,EAAmB,iBACnBC,EAAgB,sBAChB51F,EAAqB,0BACrB61F,EAAyB,4BACzBznC,EAA2B,sBAC3B0nC,EAAqB,uBACrBvpC,EAAsB,mBACtBqf,EAAkB,mBAClBmqB,EAAkB,yBAClBC,IACEtwJ,EAAAA,EAAAA,OAEJzB,EAAAA,EAAAA,KAAU,KACHixJ,IACHU,IACAD,IACAG,OAED,CAACZ,KAEJjxJ,EAAAA,EAAAA,KAAU,KACJiP,IAAagiJ,IACfW,IACAE,OAED,CAAC7iJ,EAAUgiJ,EAAqBW,IAEnC,MAAM1oH,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,MAEb3oB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,IAGV,MAAM89F,GAA6B38J,EAAAA,EAAAA,KAAastE,IAC9CwnD,EAA4B,CAC1B0mC,kCAAmCluF,MAEpC,CAACwnD,IAEE8nC,GAA0B58J,EAAAA,EAAAA,KAAamvF,IAC3C8jC,EAAuB,CACrB0oC,sBAAuBxsE,MAExB,IAEG0tE,GAA8B78J,EAAAA,EAAAA,KAAamvF,IAC/CzoB,EAAsB,CAAEqC,mBAAoBomB,MAC3C,CAACzoB,IAEEo2F,GAAwB98J,EAAAA,EAAAA,KAAY,KACxC08J,MACC,CAACA,IAEEK,GAA+BpwJ,EAAAA,EAAAA,IAAgB,KAC9C8uJ,GACLW,EAAuB,CAAEvnD,KAAM4mD,OAG3BuB,GAAY70J,EAAAA,EAAAA,KAAQ,KACxB,GAAKszJ,EACL,OAAOxnD,GAAgBW,EAAAA,IAAqB6mD,EAvFzB,IAuF0Dh1E,aAC5E,CAACg1E,IAEJ,SAASwB,EAAmB1E,GAC1B,IAAKA,EAAS,OAAO1kH,EAAQ,WAE7B,MAAM,WAAEjN,EAAU,mBAAEs2H,EAAkB,YAAEC,GAAgB5E,EAGlD6E,EAAuC,cAAfx2H,EACxBy2H,EAF8B,UAAhBF,IAEyBC,EAEvCE,EAAa/E,EAAQgF,aAAa17J,OAAS02J,EAAQtwH,aAAapmC,OAChE27J,EAAajF,EAAQkF,aAAa57J,OAAS02J,EAAQxwH,aAAalmC,OAChE67J,EAAQ,GACVJ,GAAYI,EAAMtqJ,KAAK,IAAIkqJ,KAC3BE,IAAeJ,GAAuBM,EAAMtqJ,KAAK,IAAIoqJ,KAEzD,MAGMG,EAAkB,CAHCN,EAAuBlwJ,EAAK,oBAAsB,GACvDA,EAAKywJ,YAAYF,IAEmB5/H,OAAO3yB,SAAS4b,KAAK,KAC7E,GAAIs2I,IAAyBD,EAAuB,OAAOO,EAE3D,GAAIT,EACF,OAAOrpH,EAAQ8pH,EAAkB,qBAAuB,kBAG1D,OAAQ/2H,GACN,IAAK,YACH,MAAO,GAAGiN,EAAQ,mBAAmB8pH,IAEvC,IAAK,WACH,MAAO,GAAG9pH,EAAQ,kBAAkB8pH,IAEtC,IAAK,SACH,MAAO,GAAG9pH,EAAQ,gBAAgB8pH,IAIxC,CAEA,OACE19J,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iCAAgCC,SAAA,EAC7CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BH,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPtvB,KAAK,cACL+qG,QAAM,EAENjwG,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBihB,sBAAuBrzJ,SAAA,CAElFyzC,EAAQ,iBACTxzC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,+BAA8BC,SAAEy7J,GAAgB,QAEjEI,IACC57J,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,MACL+qG,QAAM,EAENjwG,QAASA,IAAMmkI,EAAmB,CAChCS,OAAQ2oB,EAAclpB,EAAAA,GAAgB6D,gBAAkB7D,EAAAA,GAAgB2D,mBACvE/1I,UAEHH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEyzC,EAAQ,eACjCxzC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWsW,IAAI,OAAMrW,SAClCyzC,EAAQ6nH,EAAc,aAAe,uBAK9Cr7J,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,OACL+qG,QAAM,EAENjwG,QAASA,IAAMmkI,EAAmB,CAChCS,OAAQuoB,EAAc9oB,EAAAA,GAAgBmhB,aAAenhB,EAAAA,GAAgBkhB,gBACpEtzJ,UAEHH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEyzC,EAAQ,0BACjCxzC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWsW,IAAI,OAAMrW,SAClCyzC,EAAQynH,EAAc,aAAe,sBAI3CQ,EAAe,IACd77J,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPtvB,KAAK,MACL+qG,QAAM,EAENjwG,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBghB,iBAAkBpzJ,SAAA,CAE7EyzC,EAAQ,gCACTxzC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,+BAA8BC,SAAE07J,WAKtD77J,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKo9B,EAAQ5hB,MAAQ,WAAQlvB,EAAU3C,SAAEyzC,EAAQ,mBAEtFxzC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPy7E,QAAM,EACNj+G,UAAU,UAEVgO,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB+e,qBAAsBnxJ,UAElFH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEyzC,EAAQ,wBACjCxzC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWsW,IAAI,OAAMrW,SAClC68J,EAAmB51H,EAAQsyB,qBAIlCt5D,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPy7E,QAAM,EACNj+G,UAAU,UAEVgO,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBgf,kBAAmBpxJ,UAE/EH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEyzC,EAAQ,oBACjCxzC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWsW,IAAI,OAAMrW,SAClC68J,EAAmB51H,EAAQw2H,kBAIlCx9J,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPy7E,QAAM,EACNj+G,UAAU,UAEVgO,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBif,sBAAuBrxJ,UAEnFH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEyzC,EAAQ,+BACjCxzC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWsW,IAAI,OAAMrW,SAClC68J,EAAmB51H,EAAQy2H,sBAIlCz9J,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPy7E,QAAM,EACNj+G,UAAU,UAEVgO,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBkf,aAActxJ,UAE1EH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEyzC,EAAQ,iBACjCxzC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWsW,IAAI,OAAMrW,SAClC68J,EAAmB51H,EAAQm9G,aAIlCnkJ,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPy7E,QAAM,EACNj+G,UAAU,UAEVgO,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBmf,kBAAmBvxJ,UAE/EH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEyzC,EAAQ,sBACjCxzC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWsW,IAAI,OAAMrW,SAClC68J,EAAmB51H,EAAQ02H,kBAIlC19J,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPy7E,QAAM,EACNj+G,UAAU,UAEVgO,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBof,eAAgBxxJ,UAE5EH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAE+M,EAAK,mBAC9B9M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWsW,IAAI,OAAMrW,SAClC68J,EAAmB51H,EAAQgsD,eAIlChzF,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPy7E,QAAM,EACNj+G,UAAU,UAEVgO,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBqf,oBAAqBzxJ,UAEjFH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEyzC,EAAQ,2BACjCxzC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWsW,IAAI,OAAMrW,SAClC68J,EAAmB51H,EAAQ22H,kBAIlC39J,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPy7E,QAAM,EACNj+G,UAAU,UAEVgO,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB8G,mBAAoBl5I,UAEhFH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEyzC,EAAQ,mBACjCxzC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWsW,IAAI,OAAMrW,SAClC68J,EAAmB51H,EAAQgyG,mBAIlCh5I,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPy7E,QAAM,EACN6/C,oBAAkB,EAClBl8G,aAAc9hB,IAAwB5/B,EAAAA,GAAAA,GAAC43I,GAAAA,EAAQ,CAAC13I,KAAK,MAAMgB,KAAK,YAChEpB,UAAU,UAEVgO,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBsf,uBAAwB1xJ,UAEpFH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEyzC,EAAQ,gCACjCxzC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWsW,IAAI,OAAMrW,SAClC68J,EAAmB51H,EAAQ62H,uBAIlC79J,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPy7E,QAAM,EACNr8D,aAAc9hB,IAAwB5/B,EAAAA,GAAAA,GAAC43I,GAAAA,EAAQ,CAAC13I,KAAK,MAAMgB,KAAK,YAChEpB,UAAU,UAEVgO,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBuf,kBAAmB3xJ,UAE/EH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEyzC,EAAQ,2BACjCxzC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWsW,IAAI,OAAMrW,SAClCo4I,EAA0BrrI,EAAK,4BAE1B0mC,EADFykG,EACU,oCACA,wBAIpBj4I,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPy7E,QAAM,EACNj+G,UAAU,UAEVgO,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB2G,oBAAqB/4I,UAEjFH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEyzC,EAAQ,kBACjCxzC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWsW,IAAI,OAAMrW,SAClC68J,EAAmB51H,EAAQ6xG,sBAMnCqiB,IACCt7J,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gCAA+BC,SAAA,EAC5CC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKo9B,EAAQ5hB,MAAQ,WAAQlvB,EAAU3C,SACzEyzC,EAAQ,mCAEXxzC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOumC,EAAQ,4CACfi7C,SAAUj7C,EAAQ,gCAClBvK,QAASn+B,QAAQ49D,GACjBxoD,UAAWg7I,IAAwBxyF,GAAsBizF,EACzD5oG,QAASypG,KAET9zF,GAAsBizF,IACtB37J,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLC,MAAM,UACNw2C,OAAK,EACLlkD,KAAK,UACLumI,mBAAiB,EACjB3mI,UAAU,yBACVgO,QAAS2uJ,EAAsB18J,UAE/BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,+BAA8BC,SAC3C+M,EAAK,gCAOf4uJ,IACC97J,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKo9B,EAAQ5hB,MAAQ,WAAQlvB,EAAU3C,SACzEyzC,EAAQ,8BAEXxzC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOumC,EAAQ,kBACfi7C,SAAUj7C,EAAQ,sBAClBvK,QAASn+B,QAAQqwJ,GACjBpoG,QAASupG,QAKf18J,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKo9B,EAAQ5hB,MAAQ,WAAQlvB,EAAU3C,SACzEyzC,EAAQ,iCAEXxzC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOumC,EAAQ,gCACfvK,QAASn+B,QAAQwwJ,GACjBvoG,QAASwpG,QAIb38J,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKo9B,EAAQ5hB,MAAQ,WAAQlvB,EAAU3C,SACzE+M,EAAK,sBAERlN,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPy7E,QAAM,EACNjwG,QAAS4uJ,EAA6B38J,SAAA,CAErC+M,EAAK,2BACN9M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,+BAA8BC,SAC3C+M,EAAK,SAAU,CAAEqmB,MAAOwpI,GAAa,CAAEzgG,YAAa,mBChXjE,IAAev9D,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MACEolC,OACEC,KAAMvB,GAERsc,SACEvd,IAAK45H,GACN,YACDt3H,EAAW,cACXrS,GACE9yB,EAEJ,MAAO,CACL8jC,YACA24H,aACA/5H,WAAYyC,GAAaT,QACzBg4H,iBAAiBjvJ,EAAAA,EAAAA,KAAezN,GAAQ28J,WAAWC,aACnD9pI,mBAlBczlB,EAxD8BwvJ,EAChD/4H,YACA24H,aACA/5H,aACAg6H,kBACA5pI,gBACAzoB,SACAE,cAEA,MAAM,mBACJuyJ,EAAkB,UAClB39G,IACEz0C,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,MACN+3C,EAAQ2H,IAAavgD,EAAAA,EAAAA,IAAS,KAErC5B,EAAAA,EAAAA,KAAU,KACR6zJ,EAAmB,CAAEh6H,MAAO2gB,MAC3B,CAACA,EAAQq5G,IAEZ,MAAMC,GAAqBt2J,EAAAA,EAAAA,KAAQ,KACjC,MAAMu2J,GAAsBr6H,EAAAA,GAAAA,IAAO,IAC7BD,GAAc,MACdg6H,GAAmB,IACvBtgI,QAAQ6gI,GACDA,IAAcnqI,IAAkB2pI,EAAWjuI,SAASyuI,MAG7D,OAAOr6H,EAAAA,GAAAA,IAAmB,CAAEC,IAAKm6H,EAAqBl6H,MAAO2gB,EAAQ5jD,KAAM,SACxEuiD,MAAK,CAAC86G,EAASC,KACd,MAAMxlG,GAAYpvB,EAAAA,EAAAA,IAAgBzE,EAAUo5H,KAAa,GACnDE,GAAa70H,EAAAA,EAAAA,IAAgBzE,EAAUq5H,KAAc,GAE3D,OAAOxlG,EAAU0lG,cAAcD,QAElC,CAACX,EAAY/5H,EAAY5P,EAAe2wB,EAAQi5G,EAAiB54H,IAE9Dw5H,GAAmBh/J,EAAAA,EAAAA,KAAag+B,IACpC6iB,EAAU,CAAE7iB,WACZ/xB,MACC,CAACA,IAEJ,OACE5L,EAAAA,GAAAA,GAACunD,GAAgB,CACf77C,OAAQA,EACR87C,cAAe42G,EACf32G,kBAAmB36C,EAAK,0BACxBg4C,OAAQA,EACR6C,eAAgB8E,EAChB7E,mBAAoB+2G,EACpB/yJ,QAASA,QC2Ef,IAAejN,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MACE8nD,OACEziB,KAAMk4H,GAERn4H,OACEC,KAAMm4H,GAERp9G,SAAS,IACPvd,GAEFo0B,aACEC,WAAYF,IAEZh3D,EAEJ,MAAO,CACLu9J,aACAC,aACAf,WAAY55H,EACZm0B,mBArBc3pD,EAzH2CowJ,EAC7DvlJ,WACAilD,UACAogG,aACAC,aACAf,aACAzlG,oBAEA,MAAM,YAAE9X,IAAgBx0C,EAAAA,EAAAA,MAElBe,GAAOC,EAAAA,EAAAA,MACNgyJ,EAAsBC,EAAoBC,IAAuBhgK,EAAAA,EAAAA,KAClEigK,GAAqBv/J,EAAAA,EAAAA,KAAag+B,IACtC4iB,EAAY,CAAE5iB,aACb,CAAC4iB,KAEJz1B,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,IAGV,MAAM2gG,GAAuBr3J,EAAAA,EAAAA,KAAQ,IAC5Bg2J,EAAWt/G,QAAO,CAACiL,EAAK9rB,KAC7B,MACMuS,GADYzhC,EAAAA,EAAAA,IAASkvB,GACFkhI,EAAWlhI,QAAUj7B,EACxC08J,EAAelvH,IAASA,EAAKopB,cAAe+lG,EAAAA,EAAAA,IAAgBnvH,GAMlE,OAJIkvH,IACF31G,EAAI9rB,GAAUyhI,GAGT31G,IACN,CAAC,IACH,CAACq0G,EAAYe,IAkDhB,OACEj/J,EAAAA,GAAAA,IAAA,OAAKE,UAAU,uBAAsBC,SAAA,EACnCH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,mCAAkCC,SAAA,EAC/CC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,0BAAyBC,UACtCC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,6CAA6CsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAC3F+M,EAAK,yBAIV9M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,0BAAyBC,SACrC+9J,GAAYt8J,QACXxB,EAAAA,GAAAA,GAAA,OAAKF,UAAU,iCAAgCC,SAC5C+9J,EAAWtqJ,KAAI,CAAC8qJ,EAAW74G,IA5DxC,SAAuB64G,EAAmB74G,GACxC,MAAM3I,GAAYruC,EAAAA,EAAAA,IAAS6vJ,GACrBpuH,EAAO2uH,EAAWP,GAClBrvJ,EAAO2vJ,EAAWN,GAClBxqI,EAAOoc,GAAQjhC,EAEfnP,GAAYoW,EAAAA,GAAAA,GAChB,wDACA4mC,EAAY,UAAY,SAGpBwiH,EAAmBH,EAAqBb,GAE9C,OACE1+J,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CAEPxiC,UAAWA,EACX4f,QAAM,EACNq+F,QAAM,EACNn9D,eAAgB,CAAC,CACf1zC,MAAO,UACP8F,KAAM,SACNiuC,QAASA,KACPi+G,EAAmBZ,MAGvBz4J,MAAO,SAkC6D,EAlCnC4/C,GAAK85G,EAAAA,SAAoBx/J,SAAA,EAE1DC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CACL3zB,KAAK,SACL4zB,KAAMA,KAERl0B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,eAAesW,IAAI,OAAMrW,SAAA,CACrC+zB,IAAQ9zB,EAAAA,GAAAA,GAACgrD,GAAAA,EAAa,CAACl3B,KAAMA,IAC7Boc,GAAMopB,cACLt5D,EAAAA,GAAAA,GAAA,OAAKF,UAAU,gBAAgBsW,IAAI,OAAMrW,UAAE85D,EAAAA,GAAAA,IAA0BxB,EAAenoB,EAAKopB,eAE1FgmG,IACC1/J,EAAAA,GAAAA,IAAA,OAAKE,UAAU,mBAAmBsW,IAAI,OAAMrW,SAAA,CAAC,IAE1Cu/J,UAzBF,WAAWhB,IA+BtB,CAc8CkB,CAAclB,EAAW74G,OAE3Dq4G,IAAeA,EAAWt8J,QAC5BxB,EAAAA,GAAAA,GAAA,OAAKF,UAAU,aAAasW,IAAI,OAAMrW,SAAE+M,EAAK,gBAE7C9M,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,GAAK,iBAKnB1rD,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,SAAO,EACPpmC,UAAU,oBACVgO,QAASkxJ,EACT1sJ,UAAWxF,EAAK,gBAAgB/M,UAEhCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,WAEbtN,EAAAA,GAAAA,GAACk+J,GAAc,CACbxyJ,OAAQqzJ,EACRnzJ,QAASqzJ,WCpJV,SAASQ,GAAc/sB,GAC5B,OAAQA,GACN,KAAKP,EAAAA,GAAgB+e,mBACrB,KAAK/e,EAAAA,GAAgBggB,kCACrB,KAAKhgB,EAAAA,GAAgBugB,iCACnB,MAAO,cACT,KAAKvgB,EAAAA,GAAgBgf,gBACrB,KAAKhf,EAAAA,GAAgBwf,+BACrB,KAAKxf,EAAAA,GAAgB4f,8BACnB,MAAO,WACT,KAAK5f,EAAAA,GAAgBif,oBACrB,KAAKjf,EAAAA,GAAgByf,mCACrB,KAAKzf,EAAAA,GAAgB6f,kCACnB,MAAO,eACT,KAAK7f,EAAAA,GAAgBkf,WACrB,KAAKlf,EAAAA,GAAgB0f,0BACrB,KAAK1f,EAAAA,GAAgB8f,yBACnB,MAAO,MACT,KAAK9f,EAAAA,GAAgBmf,gBACrB,KAAKnf,EAAAA,GAAgBigB,+BACrB,KAAKjgB,EAAAA,GAAgBwgB,8BACnB,MAAO,WACT,KAAKxgB,EAAAA,GAAgBof,aACrB,KAAKpf,EAAAA,GAAgBkgB,4BACrB,KAAKlgB,EAAAA,GAAgBygB,2BACnB,MAAO,QACT,KAAKzgB,EAAAA,GAAgBqf,kBACrB,KAAKrf,EAAAA,GAAgBmgB,iCACrB,KAAKngB,EAAAA,GAAgB0gB,gCACnB,MAAO,WACT,KAAK1gB,EAAAA,GAAgBsf,qBACrB,KAAKtf,EAAAA,GAAgBogB,oCACrB,KAAKpgB,EAAAA,GAAgB2gB,mCACnB,MAAO,gBACT,KAAK3gB,EAAAA,GAAgB2G,kBACrB,KAAK3G,EAAAA,GAAgB2f,iCACrB,KAAK3f,EAAAA,GAAgB+f,gCACnB,MAAO,aACT,KAAK/f,EAAAA,GAAgB8G,iBACrB,KAAK9G,EAAAA,GAAgBqgB,gCACrB,KAAKrgB,EAAAA,GAAgB4gB,+BACnB,MAAO,YACT,KAAK5gB,EAAAA,GAAgButB,gBACrB,KAAKvtB,EAAAA,GAAgBsgB,+BACrB,KAAKtgB,EAAAA,GAAgB6gB,8BACnB,MAAO,WACT,KAAK7gB,EAAAA,GAAgBwtB,kBACnB,MAAO,aACT,KAAKxtB,EAAAA,GAAgBuH,sBACnB,MAAO,iBAIb,CCtCA,MA4HA,IAAe/6I,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MACEqxC,UACEwrG,OAAO,gBACL0hB,KAGFv+J,EAEJ,MAAO,CACLu+J,kBACAhgI,sBAAsB0B,EAAAA,EAAAA,KAA2BjgC,MAZnCqN,EA5HSmxJ,EAC3BD,kBAAiBhgI,2BAEjB,MAAM,iBAAE8B,EAAgB,4BAAE+yF,IAAgC1oH,EAAAA,EAAAA,MAEpDe,GAAO2mC,EAAAA,GAAAA,KAEPqsH,GAAiCxzJ,EAAAA,EAAAA,IAAgB,KACrDo1B,EAAiB,CACf9gC,QAASkM,EAAK,qCACdnL,OAAQ,CACNA,OAAQ,mBACR2nI,QAAS,CAAC,GAEZyP,WAAY,CAAEvzH,IAAK,QACnBxS,KAAM,YAIJ+sJ,GAA6BzzJ,EAAAA,EAAAA,IAAgB,KAC5CszB,EAKL60F,EAA4B,CAC1BmrC,gBAAiB,IACZA,EACHI,gCAAiCJ,GAAiBI,qCAAkCt9J,KAPtFo9J,OAYEG,GAA+B3zJ,EAAAA,EAAAA,IAAgB,KAC9CszB,EAIL60F,EAA4B,CAC1BmrC,gBAAiB,IACZA,EACHM,kCAAmCN,GAAiBM,uCAAoCx9J,KAN1Fo9J,OAWEK,GAAqB7zJ,EAAAA,EAAAA,IAAgB,KACpCszB,EAIL60F,EAA4B,CAC1BmrC,gBAAiB,IACZA,EACHQ,+BAAgCR,GAAiBQ,oCAAiC19J,KANpFo9J,OAWEO,GAAkC/zJ,EAAAA,EAAAA,IAAgB,KACjDszB,EAIL60F,EAA4B,CAC1BmrC,gBAAiB,IACZA,EACHU,4BAA6BV,GAAiBU,iCAA8B59J,KAN9Eo9J,OAWJ,OACElgK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SACtE+M,EAAK,+BAERlN,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CAACx0B,QAASiyJ,EAA2BhgK,SAAA,EAC5CC,EAAAA,GAAAA,GAAA,QAAAD,SAAO+M,EAAK,gCACZ9M,EAAAA,GAAAA,GAAC6pC,GAAAA,EAAQ,CACPhqC,GAAG,kBACHoN,MAAyDH,EAAlD8yJ,GAAiBI,+BAAsC,wCACrD,wCACT9/I,UAAW0f,EACXqJ,SAAUrJ,IAA+BggI,GAAiBI,qCAG9DpgK,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CAACx0B,QAASmyJ,EAA6BlgK,SAAA,EAC9CC,EAAAA,GAAAA,GAAA,QAAAD,SAAO+M,EAAK,2BACZ9M,EAAAA,GAAAA,GAAC6pC,GAAAA,EAAQ,CACPhqC,GAAG,YACHoN,MAA2DH,EAApD8yJ,GAAiBM,iCAAwC,mCACvD,mCACThgJ,UAAW0f,EACXqJ,SAAUrJ,IAA+BggI,GAAiBM,uCAG9DtgK,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CAACx0B,QAASqyJ,EAAmBpgK,SAAA,EACpCC,EAAAA,GAAAA,GAAA,QAAAD,SAAO+M,EAAK,wBACZ9M,EAAAA,GAAAA,GAAC6pC,GAAAA,EAAQ,CACPhqC,GAAG,SACHoN,MAAwDH,EAAjD8yJ,GAAiBQ,8BAAqC,gCACpD,gCACTlgJ,UAAW0f,EACXqJ,SAAUrJ,IAA+BggI,GAAiBQ,oCAG9DxgK,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CAACx0B,QAASuyJ,EAAgCtgK,SAAA,EACjDC,EAAAA,GAAAA,GAAA,QAAAD,SAAO+M,EAAK,qCACZ9M,EAAAA,GAAAA,GAAC6pC,GAAAA,EAAQ,CACPhqC,GAAG,uBACHoN,MAAqDH,EAA9C8yJ,GAAiBU,2BAAkC,6BACjD,6BACTpgJ,UAAW0f,EACXqJ,SAAUrJ,IAA+BggI,GAAiBU,iCAG9DtgK,EAAAA,GAAAA,GAAA,KAAGF,UAAU,mCAAmCsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SACjF+M,EAAK,oCC7Dd,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACQ,CACLu+B,sBAAsB0B,EAAAA,EAAAA,KAA2BjgC,GACjDyzH,oBAAqBhqH,SAAQy1J,EAAAA,EAAAA,KAA0Bl/J,OAJzCqN,EAnDY8xJ,EAC9B5gI,uBAAsBk1F,sBAAqBvuF,iBAE3C,MAAM,4BAAEkuF,EAA2B,iBAAE9yF,IAAqB51B,EAAAA,EAAAA,MACpDe,GAAOC,EAAAA,EAAAA,KACP0zJ,EAAqC,WAAfl6H,GAA0C,aAAfA,EAEjDm6H,GAAkCp0J,EAAAA,EAAAA,IACrC2gE,GAAcwnD,EAA4B,CAAEK,oBAAqB7nD,MAG9D0qE,GAAyBrrI,EAAAA,EAAAA,IAAgB,KAC7Cq1B,EAAiB,CACfQ,eAAgB,iBAIpB,OACEviC,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,CACG0gK,IACC7gK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,gBACZm8B,QAAS6rF,EACT/hE,QAAS2tG,KAEX1gK,EAAAA,GAAAA,GAAA,KAAGF,UAAU,mCAAmCsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,UACjFg0B,EAAAA,GAAAA,GAAWjnB,EAAK,oBAAqB,CAAC,aAI7ClN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPG,aAAaziC,EAAAA,GAAAA,GAAC43I,GAAAA,EAAQ,CAAC93I,UAAU,0BAA0BoB,KAAK,UAAUhB,KAAK,QAC/E4N,QAAS6pI,EAAuB53I,SAER+M,EAAvB8yB,EAA4B,mCAA2C,6BAE1E5/B,EAAAA,GAAAA,GAAA,KACEF,UAAU,gDACVsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAGhC+M,EADH8yB,EACQ,uCACA,0C,gBCnEnB,MCyGA,IAAejhC,EAAAA,EAAAA,KAlFyCgiK,EACtDxsI,gBACAysI,yBACAC,+BAEA,MAAM,aACJC,EAAY,mBAAEC,EAAkB,mBAAEzyJ,EAAkB,iBAAEozB,IACpD31B,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,MAENi0J,EAAgCC,EAA8BC,IAAiCjiK,EAAAA,EAAAA,IAAQ,GAExG85D,GAAW3vD,EAAAA,EAAAA,OAEjBkB,EAAAA,EAAAA,KAAU,KACHs2J,GACHE,EAAa,CAAEnjI,OAAQxJ,MAExB,CAACysI,EAAwBzsI,EAAe2sI,IAE3C,MAAMK,GAAmBxhK,EAAAA,EAAAA,KAAaunJ,IACpC6Z,EAAmB,CACjB7Z,OACAka,YAAY,IAEd1/H,EAAiB,CACf9gC,QAASkM,EAAK,+CAEf,CAACA,EAAM40B,EAAkBq/H,IAEtBM,GAAsB1hK,EAAAA,EAAAA,KAAY,KACtCuhK,IACA5yJ,EAAmB,CAAEzM,MAAOg/J,MAC3B,CAACK,EAA+B5yJ,EAAoBuyJ,IAEjDS,GAAyB3hK,EAAAA,EAAAA,KAAY,KACzCo5D,EAASxvD,SAASg4J,UACjB,IAEH,OACE3hK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BH,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPy7E,QAAM,EACN/qG,KAAK,aACLlF,QAASwzJ,EAAuBvhK,SAAA,EAEhCC,EAAAA,GAAAA,GAACwhK,GAAAA,EAAY,CACXh0J,SAAU2zJ,EACVpoG,SAAUA,IAEXjsD,EAAK+zJ,EACF,yCACA,0CAELA,IACCjhK,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPy7E,QAAM,EACNt7E,aAAaziC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CAAChyB,MAAOg/J,EAA0B3gK,KAAK,OAAOJ,UDjFhB,aCkFlDgO,QAASmzJ,EACT7tJ,aAAW,EAAArT,SAAA,CAEV+M,EAAK+zJ,EAAyBv5J,QAC3B,yCACA,2CACJtH,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQs1J,EACRp1J,QAASs1J,EACTrsJ,KAAM/H,EAAK,8BACXu2B,aAAcv2B,EAAK,UACnBw2B,eAAgB+9H,EAChB99H,sBAAoB,QAI1BvjC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,mCAAmCsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SACjF+M,EAAK,gDC6Cd,SAAS20J,IAAkB,OACzB/uB,EAAM,QACN1rG,EAAO,kBACP06H,IAMA,MAAM,qBAAE/sC,EAAoB,mBAAEsd,IAAuBlmI,EAAAA,EAAAA,MAC/CynC,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,KAEPkuH,GAAoB75J,EAAAA,EAAAA,KAAQ,KAChC,MAAM85J,EAAYlvB,IAAWP,EAAAA,GAAgBwtB,kBACvCpyJ,EAAU,CACd,CAAEb,MAAO,YAAaO,MAAOumC,EAAQ,iBACrC,CACE9mC,MAAO,WACPO,MAAOy0J,GACL1hK,EAAAA,GAAAA,GAACk5I,GAAmB,CAACjsI,MAAOumC,EAAQ,iBAEpCA,EAAQ,eAEV2lG,OAAQuoB,IAeZ,OAXIE,GACFr0J,EAAQwF,KAAK,CACXrG,MAAO,SACPO,MAAOy0J,GACL1hK,EAAAA,GAAAA,GAACk5I,GAAmB,CAACjsI,MAAOumC,EAAQ,eAEpCA,EAAQ,aAEV2lG,OAAQuoB,IAGLn0J,IACN,CAACimC,EAASk/F,EAAQgvB,IAEfG,GAAwB/5J,EAAAA,EAAAA,KAAQ,IAChC4qI,IAAWP,EAAAA,GAAgBwtB,kBACtB,CACLmC,kBAAkB,EAClBC,mBAAmB,GAIhB,CACLD,iBAA0C,WAAxB96H,GAAST,WAC3Bw7H,kBAA2C,cAAxB/6H,GAAST,aAE7B,CAACS,EAAS0rG,IAEP1d,EAAayqC,GAAc/sB,GAE3BzhC,GAAkBnpG,EAAAA,EAAAA,KAAQ,KAC9B,OAAQ4qI,GACN,KAAKP,EAAAA,GAAgBof,aACnB,OAAOzkJ,EAAK,oBACd,KAAKqlI,EAAAA,GAAgBgf,gBACnB,OAAO39G,EAAQ,cACjB,KAAK2+F,EAAAA,GAAgBwtB,kBACnB,OAA6CnsH,EAAd,cAAxBxM,GAAST,WAAqC,mBAA8B,qBAErF,KAAK4rG,EAAAA,GAAgBsf,qBACnB,OAAOj+G,EAAQ,4BACjB,QACE,UAEH,CAACA,EAAS1mC,EAAM4lI,EAAQ1rG,IAErBg7H,GAAal6J,EAAAA,EAAAA,KAAQ,KACzB,OAAQ4qI,GACN,KAAKP,EAAAA,GAAgB+e,mBACnB,OAAO19G,EAAQ,qBACjB,KAAK2+F,EAAAA,GAAgBwtB,kBACnB,OAAOnsH,EAAQ,sBACjB,KAAK2+F,EAAAA,GAAgBgf,gBACnB,OAAO39G,EAAQ,iBACjB,KAAK2+F,EAAAA,GAAgBif,oBACnB,OAAO59G,EAAQ,4BACjB,KAAK2+F,EAAAA,GAAgBkf,WACnB,OAAO79G,EAAQ,mBACjB,KAAK2+F,EAAAA,GAAgBmf,gBACnB,OAAO99G,EAAQ,wBACjB,KAAK2+F,EAAAA,GAAgBof,aACnB,OAAOzkJ,EAAK,qBACd,KAAKqlI,EAAAA,GAAgBqf,kBACnB,OAAOh+G,EAAQ,wBACjB,KAAK2+F,EAAAA,GAAgBsf,qBACnB,OAAOj+G,EAAQ,6BACjB,KAAK2+F,EAAAA,GAAgB2G,kBACnB,OAAOtlG,EAAQ,eACjB,KAAK2+F,EAAAA,GAAgB8G,iBACnB,OAAOzlG,EAAQ,gBACjB,KAAK2+F,EAAAA,GAAgButB,gBACnB,OAAOlsH,EAAQ,cACjB,QACE,UAEH,CAACA,EAAS1mC,EAAM4lI,IAEbuvB,GAAkB31J,EAAAA,EAAAA,IACtB,CAACy5B,EAAoB8kG,EAAoBgyB,EAA8BC,KACrE,MAAMoF,EAAen8H,GAASvkC,QAAU,EAClC2gK,EAAet3B,GAASrpI,QAAU,EAClC4gK,EAA8B,UAAhBtF,EAGpB,IAFiBoF,IAAgBC,IAEfC,EAChB,OAA4B5uH,EAArBqpH,EAA6B,iBAA4B,qBAC3D,GAAIA,EACT,OAAOrpH,EAAQ,sBAGjB,MAAM6uH,EAAkBH,EAAe,EAAI1uH,EAAQ,QAAS0uH,QAAgBx/J,EACtE4/J,EAAkBH,EAAe,EAAI3uH,EAAQ,QAAS2uH,QAAgBz/J,EAK5E,MAAO,CAHkB0/J,EAAct1J,EAAK,oBAAsB,GAC9CA,EAAKywJ,YAAY,CAAC8E,EAAiBC,GAAiB7kI,OAAO3yB,WAExC2yB,OAAO3yB,SAAS4b,KAAK,QAI1D67I,GAAgBz6J,EAAAA,EAAAA,KAAQ,IACrBm6J,EACLj7H,GAASU,aACTV,GAASo2H,aACTp2H,GAAS61H,mBACT71H,GAAS81H,cAEV,CAAC91H,IAEEw7H,GAAc16J,EAAAA,EAAAA,KAAQ,IACnBm6J,EAAgBj7H,GAASY,aAAcZ,GAASk2H,eACtD,CAACl2H,IAEEmC,GAAyBxpC,EAAAA,EAAAA,KAAa+M,IAC1CioH,EAAqB,CACnBK,WAAYA,EACZzuF,WAAY75B,MAEb,CAACsoH,IAEEytC,EAAwB,MAC5B,OAAQ/vB,GACN,KAAKP,EAAAA,GAAgB+e,mBACnB,OAAO/e,EAAAA,GAAgBggB,kCACzB,KAAKhgB,EAAAA,GAAgBgf,gBACnB,OAAOhf,EAAAA,GAAgBwf,+BACzB,KAAKxf,EAAAA,GAAgBif,oBACnB,OAAOjf,EAAAA,GAAgByf,mCACzB,KAAKzf,EAAAA,GAAgBkf,WACnB,OAAOlf,EAAAA,GAAgB0f,0BACzB,KAAK1f,EAAAA,GAAgBmf,gBACnB,OAAOnf,EAAAA,GAAgBigB,+BACzB,KAAKjgB,EAAAA,GAAgBof,aACnB,OAAOpf,EAAAA,GAAgBkgB,4BACzB,KAAKlgB,EAAAA,GAAgBqf,kBACnB,OAAOrf,EAAAA,GAAgBmgB,iCACzB,KAAKngB,EAAAA,GAAgB8G,iBACnB,OAAO9G,EAAAA,GAAgBqgB,gCACzB,KAAKrgB,EAAAA,GAAgButB,gBACnB,OAAOvtB,EAAAA,GAAgBsgB,+BACzB,KAAKtgB,EAAAA,GAAgBsf,qBACnB,OAAOtf,EAAAA,GAAgBogB,oCACzB,QACE,OAAOpgB,EAAAA,GAAgB2f,iCAE5B,EAzB6B,GA2BxB4Q,EAAuB,MAC3B,OAAQhwB,GACN,KAAKP,EAAAA,GAAgB+e,mBACnB,OAAO/e,EAAAA,GAAgBugB,iCACzB,KAAKvgB,EAAAA,GAAgBgf,gBACnB,OAAOhf,EAAAA,GAAgB4f,8BACzB,KAAK5f,EAAAA,GAAgBif,oBACnB,OAAOjf,EAAAA,GAAgB6f,kCACzB,KAAK7f,EAAAA,GAAgBkf,WACnB,OAAOlf,EAAAA,GAAgB8f,yBACzB,KAAK9f,EAAAA,GAAgBmf,gBACnB,OAAOnf,EAAAA,GAAgBwgB,8BACzB,KAAKxgB,EAAAA,GAAgBof,aACnB,OAAOpf,EAAAA,GAAgBygB,2BACzB,KAAKzgB,EAAAA,GAAgBqf,kBACnB,OAAOrf,EAAAA,GAAgB0gB,gCACzB,KAAK1gB,EAAAA,GAAgB8G,iBACnB,OAAO9G,EAAAA,GAAgB4gB,+BACzB,KAAK5gB,EAAAA,GAAgButB,gBACnB,OAAOvtB,EAAAA,GAAgB6gB,8BACzB,KAAK7gB,EAAAA,GAAgBsf,qBACnB,OAAOtf,EAAAA,GAAgB2gB,mCACzB,QACE,OAAO3gB,EAAAA,GAAgB+f,gCAE5B,EAzB4B,GA2B7B,OACEtyJ,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKo9B,EAAQ5hB,MAAQ,WAAQlvB,EAAU3C,SAAEiiK,KAC9EhiK,EAAAA,GAAAA,GAACqN,GAAAA,EAAU,CACTC,KAAM,cAAc0nH,IACpBznH,QAASo0J,EACTn0J,SAAU27B,EACV17B,SAAUu5B,GAAST,aAEpB0qE,IACCjxG,EAAAA,GAAAA,GAAA,KAAGF,UAAU,mCAAmCsW,IAAKo9B,EAAQ5hB,MAAQ,WAAQlvB,EAAU3C,SAAEkxG,QAG3FywD,IAAsBG,EAAsBE,mBAAqBF,EAAsBC,oBACvFliK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKo9B,EAAQ5hB,MAAQ,WAAQlvB,EAAU3C,SACzEyzC,EAAQ,uBAEVquH,EAAsBE,oBACrB/hK,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPy7E,QAAM,EACN/qG,KAAK,WAELlF,QAASA,KACPmkI,EAAmB,CAAES,OAAQ+vB,KAC7B1iK,UAEFH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2BAA0BC,SAAA,EACvCC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEyzC,EAAQ,kBACjCxzC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAEwiK,SAIjCV,EAAsBC,mBACrB9hK,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPy7E,QAAM,EACN/qG,KAAK,cAELlF,QAASA,KACPmkI,EAAmB,CAAES,OAAQgwB,KAC7B3iK,UAEFH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2BAA0BC,SAAA,EACvCC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEyzC,EAAQ,iBACjCxzC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAEyiK,YAMrCd,IAAqB1hK,EAAAA,GAAAA,GAAC45I,GAAiB,MAG9C,CAEA,UAAej7I,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUqxI,aACT,IAAIiwB,EACAC,EAEJ,MAAM,cACJzuI,EACAue,UAAU,QACR1L,EACAk3G,OAAO,yBACL2kB,KAGFxhK,EAEE0iJ,GAAsBzzG,EAAAA,EAAAA,KAAmBjvC,EAAQ8yB,GAEvD,OAAQu+G,GACN,KAAKP,EAAAA,GAAgB+e,mBACnByR,EAAiB37H,EAAQsyB,YACzBspG,EAAmB57H,EAAQ87H,WAC3B,MAEF,KAAK3wB,EAAAA,GAAgBgf,gBACnBwR,EAAiB37H,EAAQw2H,SACzB,MAEF,KAAKrrB,EAAAA,GAAgBif,oBACnBuR,EAAiB37H,EAAQy2H,aACzB,MAEF,KAAKtrB,EAAAA,GAAgBkf,WACnBsR,EAAiB37H,EAAQm9G,IACzB,MAEF,KAAKhS,EAAAA,GAAgBmf,gBACnBqR,EAAiB37H,EAAQ02H,SACzB,MAEF,KAAKvrB,EAAAA,GAAgBof,aACnBoR,EAAiB37H,EAAQgsD,MACzB,MAEF,KAAKm/C,EAAAA,GAAgButB,gBACrB,KAAKvtB,EAAAA,GAAgB8G,iBACnB0pB,EAAiB37H,EAAQgyG,UACzB4pB,EAAmB57H,EAAQ+7H,SAC3B,MAEF,KAAK5wB,EAAAA,GAAgBqf,kBACnBmR,EAAiB37H,EAAQ22H,SACzB,MAEF,KAAKxrB,EAAAA,GAAgBsf,qBACnBkR,EAAiB37H,EAAQ62H,cACzB,MAEF,KAAK1rB,EAAAA,GAAgB2G,kBACnB6pB,EAAiB37H,EAAQ6xG,WAI7B,OAAK8pB,EAQE,CACLA,iBACAC,mBACAzuI,cAAeA,EACfysI,uBAAwB91J,QAAQi5I,GAChC8c,yBAA0B9c,GAAqBlxH,cAC/C6uI,kBAAmBhvB,IAAWP,EAAAA,GAAgBsf,wBAAyBnwH,EAAAA,EAAAA,KAA2BjgC,GAClGwhK,2BACAjjI,sBAAsB0B,EAAAA,EAAAA,KAA2BjgC,IAf1C,CACL8yB,cAAeA,EACfysI,uBAAwB91J,QAAQi5I,GAChC8c,yBAA0B9c,GAAqBlxH,iBAlEnCnkB,EAzWyCs0J,EAC3DtwB,SACAn5H,WACAopJ,iBACAC,mBACAzuI,gBACAysI,yBACAC,2BACAa,oBACAljG,UACAqkG,2BACAjjI,2BAEA,MAAM,4BAAE60F,EAA2B,iBAAE/yF,IAAqB31B,EAAAA,EAAAA,MAEpDe,GAAO2mC,EAAAA,GAAAA,MAEb3oB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,IAGV,MAAMykG,GAA4B32J,EAAAA,EAAAA,IAAgB,KAC3CszB,EAYL60F,EAA4B,CAC1BouC,0BAA2BA,IAZ3BnhI,EAAiB,CACf9gC,QAASkM,EAAK,qCACdnL,OAAQ,CACNA,OAAQ,mBACR2nI,QAAS,CAAC,GAEZyP,WAAY,CAAEvzH,IAAK,QACnBxS,KAAM,YASNkwJ,GAAkBp7J,EAAAA,EAAAA,KAAQ,KAC9B,OAAQ4qI,GACN,KAAKP,EAAAA,GAAgB8G,iBACnB,OAAO9G,EAAAA,GAAgButB,gBACzB,KAAKvtB,EAAAA,GAAgB+e,mBACnB,MAAsC,WAA/ByR,GAAgBp8H,WAA0B4rG,EAAAA,GAAgBwtB,uBAAoBj9J,EAEvF,QACE,UAEH,CAACigK,EAAgBjwB,IAEpB,OACE9yI,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iCAAgCC,SAAA,CAC5C2yI,IAAWP,EAAAA,GAAgBof,eAC1B3xJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BH,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CAACx0B,QAASm1J,EAA0BljK,SAAA,EAC3CC,EAAAA,GAAAA,GAAA,QAAAD,SAAO+M,EAAK,gCACZ9M,EAAAA,GAAAA,GAAC6pC,GAAAA,EAAQ,CACPhqC,GAAG,OACHqgB,UAAW0f,EACX3yB,MAAkCH,EAA3B+1J,EAAgC,kBAA0B,sBACjE55H,QAAS45H,QAGb7iK,EAAAA,GAAAA,GAAA,KAAGF,UAAU,mCAAmCsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SACjF+M,EAAK,gCAAiC,CACrCkG,MAAMhT,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,OAAOxN,UAAU,cAClCwpF,KAAMx8E,EAAK,uBACV,CACDstC,WAAW,UAKnBp6C,EAAAA,GAAAA,GAACyhK,GAAiB,CAChB/uB,OAAQA,EACR1rG,QAAS27H,EACTjB,kBAAmBA,IAEpBhvB,IAAWP,EAAAA,GAAgBif,qBAAsD,cAA/BuR,GAAgBp8H,aACjEvmC,EAAAA,GAAAA,GAAC2gK,GAAiC,CAChCxsI,cAAeA,EACfysI,uBAAwBA,EACxBC,yBAA0BA,IAG7BnuB,IAAWP,EAAAA,GAAgBgf,kBAC1BnxJ,EAAAA,GAAAA,GAACwgK,GAAuB,CAACj6H,WAAYo8H,GAAgBp8H,aAEtDmsG,IAAWP,EAAAA,GAAgBof,eAC1BvxJ,EAAAA,GAAAA,GAAC6/J,GAAoB,IAEtB/0J,QAAQo4J,KACPljK,EAAAA,GAAAA,GAACyhK,GAAiB,CAChB/uB,OAAQwwB,EACRl8H,QAAS47H,WC9FbO,GAAmB,CAACC,GAAAA,IA6K1B,SAASC,GAA0BhiK,EAAqBqxI,GACtD,MAAM,QAAE1rG,GAAY3lC,EAAOqxC,SAC3B,OAAQggG,GACN,KAAKP,EAAAA,GAAgBggB,kCACrB,KAAKhgB,EAAAA,GAAgBugB,iCACnB,OAAO1rH,EAAQsyB,YACjB,KAAK64E,EAAAA,GAAgBwf,+BACrB,KAAKxf,EAAAA,GAAgB4f,8BACnB,OAAO/qH,EAAQw2H,SACjB,KAAKrrB,EAAAA,GAAgByf,mCACrB,KAAKzf,EAAAA,GAAgB6f,kCACnB,OAAOhrH,EAAQy2H,aACjB,KAAKtrB,EAAAA,GAAgB0f,0BACrB,KAAK1f,EAAAA,GAAgB8f,yBACnB,OAAOjrH,EAAQm9G,IACjB,KAAKhS,EAAAA,GAAgBigB,+BACrB,KAAKjgB,EAAAA,GAAgBwgB,8BACnB,OAAO3rH,EAAQ02H,SACjB,KAAKvrB,EAAAA,GAAgBkgB,4BACrB,KAAKlgB,EAAAA,GAAgBygB,2BACnB,OAAO5rH,EAAQgsD,MACjB,KAAKm/C,EAAAA,GAAgBqgB,gCACrB,KAAKrgB,EAAAA,GAAgB4gB,+BACnB,OAAO/rH,EAAQgyG,UACjB,KAAK7G,EAAAA,GAAgBsgB,+BACrB,KAAKtgB,EAAAA,GAAgB6gB,8BACnB,OAAOhsH,EAAQ+7H,SACjB,KAAK5wB,EAAAA,GAAgBmgB,iCACrB,KAAKngB,EAAAA,GAAgB0gB,gCACnB,OAAO7rH,EAAQ22H,SACjB,KAAKxrB,EAAAA,GAAgBogB,oCACrB,KAAKpgB,EAAAA,GAAgB2gB,mCACnB,OAAO9rH,EAAQ62H,cACjB,KAAK1rB,EAAAA,GAAgB+f,gCACrB,KAAK/f,EAAAA,GAAgB2f,iCACnB,OAAO9qH,EAAQ6xG,WACjB,KAAK1G,EAAAA,GAAgBuH,sBACnB,OAAO1yG,EAAQgxG,eAIrB,CAEA,UAAer5I,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUqxI,aACF,CACLv+G,cAAe9yB,EAAO8yB,cACtBue,SAAU2wH,GAA0BhiK,EAAQqxI,MAJ9BhkI,EAtNsD40J,EACxEC,cACAC,sBACAC,uBACA/wB,SACAn5H,WACA4a,gBACAue,WACAgxH,aAAY,EACZllG,cAEA,MAAM,mBAAEmlG,IAAuB53J,EAAAA,EAAAA,MAEzBynC,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,KAEPmwH,GAAmC97J,EAAAA,EAAAA,KAAQ,KACxC,CACL+7J,cAAc,EACd3iK,KAAM,OACNgM,MAAOJ,EAAK,oBACZg3J,WAAY,OACZC,gBAAgB,EAChBC,YAAa,KAEd,CAACl3J,IAEEm3J,GAAmBn8J,EAAAA,EAAAA,KAAQ,IACxB,CAAC87J,IACP,CAACA,IAEEM,GAAqBp8J,EAAAA,EAAAA,KAAQ,IAC5B4qC,EAID6wH,EACK,IAAI7wH,EAAShL,gBAAiBgL,EAAS0qH,cAEvC,IAAI1qH,EAAS9K,gBAAiB8K,EAASwqH,cANvC,IAQR,CAACqG,EAAa7wH,IACXyxH,GAAwBr8J,EAAAA,EAAAA,KAAQ,IAC/B4qC,EAGDA,EAASmqH,mBACJ,CAACuG,GAAAA,GAAoBliK,MAED,UAAzBwxC,EAASoqH,aAA2ByG,EAC/B,CAACK,EAAe1iK,MAElB,GARE,IASR,CAACwxC,EAAU6wH,EAAaK,KACpBhgI,EAAaC,IAAkB33B,EAAAA,EAAAA,IAAiB,KAChDm5B,EAAeC,IAAoBp5B,EAAAA,EAAAA,KAAkB,IACrDq5B,EAAuBC,IAA4Bt5B,EAAAA,EAAAA,IAAmBg4J,IACtEE,EAA0BC,IAA+Bn4J,EAAAA,EAAAA,IAA2Bi4J,IAG3F75J,EAAAA,EAAAA,KAAU,KACHiP,IACHisB,EAAyB0+H,GACzBG,EAA4BF,MAE7B,CAAC5qJ,EAAU4qJ,EAAuBD,IAErC,MAAM35B,GAAsBC,EAAAA,GAAAA,IAA8BzH,EAAAA,KACpD0H,GAA2BD,EAAAA,GAAAA,IAA8BE,EAAAA,KACzD5mG,GAAeh8B,EAAAA,EAAAA,KAAQ,KAE3B,MAAMohD,GAAYra,EAAAA,EAAAA,MAAYsa,MAAMziB,KAC9BvB,GAAY0J,EAAAA,EAAAA,MAAYpI,MAAMC,KAE9BmkG,GAAU7mG,EAAAA,GAAAA,IAAO,IAAIumG,GAAuB,MAAOE,GAA4B,KAClFhtG,QAAQlxB,IACP,MAAM0C,EAAOi6C,EAAU38C,GACjB2jC,EAAO/K,EAAU54B,GACjBq+B,EAAYsF,IAAQ2c,EAAAA,EAAAA,IAAc3c,GAClC3c,EAAYtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,GACxC,QAASy0J,GAAaxzH,IACjB3jC,IAAW4nB,GACX5nB,IAAW+3J,EAAAA,MACV/wI,IAAcqX,KAGlB25H,GAAgBtgI,EAAAA,GAAAA,IAAmB,CAAEC,IAAK2mG,EAAS1mG,MAAOP,IAGhE,OAAIA,EAAoB2gI,GAEjBvgI,EAAAA,GAAAA,IAAO,IACTkgI,KACAr5B,MAEJ,CAACN,EAAqBE,EAA0By5B,EAAoBtgI,EAAazP,EAAeuvI,IAE7Fc,GAAiC7kK,EAAAA,EAAAA,KAAa+M,IAClD23J,EAA4B33J,GAC5B44B,GAAiB,KAChB,IAEGO,GAAiClmC,EAAAA,EAAAA,KAAa+M,IAClD84B,EAAyB94B,GACzB44B,GAAiB,KAChB,IAEGQ,GAAenmC,EAAAA,EAAAA,KAAY,KAC/BgkK,EAAmB,CACjB3uC,WAAYyqC,GAAc/sB,GAC1B6wB,YAAaz4J,QAAQy4J,GACrBkB,WAAYl/H,EACZm/H,iBAAkBN,EAAyBv0I,SAASuzI,GAAAA,GAAoBliK,YAASwB,EACjFo6J,YAAe2G,EACVW,EAAyBv0I,SAAS+zI,EAAe1iK,MAAQ,QAAU,WADjC,SAIzCs9D,MACC,CACD+kG,EACAE,EACAW,EACA7+H,EACAi5B,EACAk0E,EACAkxB,IAcF,OAXA94I,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,KAUR5+D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,uBAAsBC,SAAA,EACnCC,EAAAA,GAAAA,GAACokC,GAAAA,EAAU,CACTinG,WARAm4B,EAA4BL,GAC5BM,GAAwBF,EAAoBU,OAAhD,EAQI5/H,QAASP,GAAgB,GACzBL,YAAa8B,EACb+lG,mBAAoB84B,EACpB5/H,YAAaZ,EACba,kBAAiC+O,EAAd+vH,EAAsB,yBAAoC,yBAC7Eh4B,uBAAuB,mBACvB7mG,cAAc,0BACdC,cAAY,EACZG,oBAAqBe,EACrB4lG,2BAA4B+4B,EAC5Bz/H,eAAgBlB,EAChBmB,eAAa,EACbE,cAAc,WACdN,oBAAkB,EAClBK,YAAU,KAGZjlC,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,QAASb,EACTv3B,QAASg4B,EACTxzB,UAAyBkhC,EAAd+vH,EAAsB,cAAyB,cAAcxjK,UAExEC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,mBCjJnB,IAAe3O,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM,OAAEsjK,EAAM,UAAEvkH,GAAc/+C,EAE9B,MAAO,CACL8+C,mBAAoBC,EAAUD,mBAC9BykH,iBAAkBD,GAAQE,mBANZn2J,EA7CqCo2J,EACvDvrJ,WACA4mC,qBACAykH,mBACApmG,cAEA,MAAM,mBAAEumG,IAAuBh5J,EAAAA,EAAAA,OAE/B+e,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,IAGV,MAAMjxD,GAAUzF,EAAAA,EAAAA,KAAQ,KACrBq4C,GAAsB,IAAI1iB,QAAQqmE,IAAuBA,EAAkBuI,aACzE74F,KAAKswF,IAAiB,CACrB72F,OACErN,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAC2hD,GAAAA,EAAmB,CAACzS,SAAU40D,EAAkB50D,SAAUiR,mBAAoBA,IAC9E2jD,EAAkB52F,SAGvBR,MAAOo3F,EAAkB50D,SAAS81H,cAErC,CAAC7kH,IAEEknC,GAAe1nF,EAAAA,EAAAA,KAAauvC,IAChC61H,EAAmB,CACjB71H,SAAU,CAAEhuC,KAAM,QAAS8jK,SAAU91H,OAEtC,CAAC61H,IAEJ,OACE/kK,EAAAA,GAAAA,GAAA,OAAKF,UAAU,uEAAsEC,UACnFC,EAAAA,GAAAA,GAACqN,GAAAA,EAAU,CACTC,KAAK,0BACLC,QAASA,EACTE,SAAUm3J,EACVp3J,SAAU65E,EACVqtB,UAAQ,UC/BVz0D,GAAwB,IAAMtqC,EAAAA,EAwIpC,IAAehX,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACQ,KACF2uD,EAAAA,GAAAA,IAAK3uD,EAAOqxC,SAASwrG,MAAO,CAC7B,wBACA,gCAEF+mB,YAAa5jK,EAAO89E,SAASkrB,MAAMC,OACnC6zC,kBAAmB98I,EAAOynF,aAAauhB,MAAMC,OAC7Cd,gBAAiBnoG,EAAO89E,SAASoqB,SACjCs7D,gBAAiBxjK,EAAOsjK,QAAQE,gBAChC1kH,mBAAoB9+C,EAAO++C,UAAUD,mBACrCi+F,uBAAuB5zC,EAAAA,EAAAA,KAA4BnpG,MAZrCqN,EArHgCw2J,EAClD3rJ,WACA0rJ,cACA9mB,oBACA30C,kBACAq7D,kBACAM,wBACAC,8BACAjlH,qBACAi+F,wBACA5/E,cAEA,MAAM,iBACJ45D,EAAgB,eAChB/tC,EAAc,mBACd4nD,IACElmI,EAAAA,EAAAA,MACEe,GAAOC,EAAAA,EAAAA,KAEPwxI,GAAqBn1I,EAAAA,EAAAA,OACnBuzF,QAASoB,IAAiCd,EAAAA,GAAAA,IAAwB,CAAEC,QAASqhD,IAE/EC,GAAwB7+I,EAAAA,EAAAA,KAAa0+E,IACzCgM,EAAe,CACbnB,eAAgB7K,EAAQ6K,mBAEzB,CAACmB,IAEEg7E,GAAqC1lK,EAAAA,EAAAA,KAAak5F,IACtDu/B,EAAiB,CAAEgtC,4BAA6BvsE,MAC/C,CAACu/B,IAEEktC,GAA8B3lK,EAAAA,EAAAA,KAAak5F,IAC/Cu/B,EAAiB,CAAE+sC,sBAAuBtsE,MACzC,CAACu/B,IAEEmtC,GAAcz9J,EAAAA,EAAAA,KAAQ,IAC1Bm9J,GAAelmH,OAAOyK,QAAOwG,EAAAA,GAAAA,IAAKw5C,EAAiBy7D,KAClD,CAACA,EAAaz7D,IAOjB,OALA1+E,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,KAIR5+D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iCAAgCC,SAAA,EAC7CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,mBACZm8B,QAASk8H,EACTpyG,QAASuyG,KAEX1lK,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPy7E,QAAM,EAENjwG,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBtmD,cAC5D74E,KAAK,QAAOjT,SAAA,CAEX+M,EAAK,0BACLqxI,IAAqBn+I,EAAAA,GAAAA,GAAA,QAAMF,UAAU,+BAA8BC,SAAEo+I,EAAkB38I,YAEzFqjK,IACCjlK,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPxiC,UAAU,0BACVi+G,QAAM,EAENjwG,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB0e,gBAAiB9wJ,SAAA,EAE7EC,EAAAA,GAAAA,GAAC2hD,GAAAA,EAAmB,CAClBzS,SAAU21H,EACV/kK,UAAU,2BACVI,KAAM+/C,GACNE,mBAAoBA,KAEtBngD,EAAAA,GAAAA,GAAA,OAAKF,UAAU,QAAOC,SAAE+M,EAAK,6BAInClN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SACtE+M,EAAK,yCAER9M,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,sCACZm8B,QAASm8H,EACTryG,QAASsyG,KAEXrlK,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCsW,IAAI,OAAMrW,SACrD+M,EAAK,+CAGTy4J,IACC3lK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SACtE+M,EAAK,iCAER9M,EAAAA,GAAAA,GAAA,OAAKgU,IAAKuqI,EAAmBx+I,SAC1BwlK,EAAY/xJ,KAAK6qF,IAChBr+F,EAAAA,GAAAA,GAAC89I,GAAc,CAEbz/C,WAAYA,EACZE,oBAAqBR,EACrBjwF,QAAS0wI,EACTl+H,QAAS89H,GAJJ//C,EAAWx+F,SAQtBG,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCsW,IAAI,OAAMrW,UACrDg0B,EAAAA,GAAAA,GAAWjnB,EAAK,mBAAoB,CAAC,sBCpGlD,IAAenO,EAAAA,EAAAA,KApCoC6mK,EACjDjsJ,WAAUilD,cAEV,MAAM,mBAAEyzE,IAAuBlmI,EAAAA,EAAAA,MACzBe,GAAOC,EAAAA,EAAAA,KAEPuX,GAAchY,EAAAA,EAAAA,IAAgB,KAClC2lI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB0D,aAQ/C,OALA/qH,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,KAIR5+D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,wCAAuCC,SAAA,EACpDH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,GAAAA,GAACuxI,GAAAA,EAAY,CACXrxI,KAAMC,EAAAA,IACNC,OAAQC,GAAAA,EAAe6zI,gBACvBp0I,UAAU,2BAGZE,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCsW,IAAI,OAAMrW,SACrD+M,EAAK,4CAIV9M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,+BAA8BC,UAC3CC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACG,QAASwW,EAAYvkB,SAAE+M,EAAK,uD,gBChB5C,MA2EA,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAsBrN,IACxC,MACMokK,GADW32J,EAAAA,EAAAA,KAAezN,GACDokK,cAE/B,MAAO,CACLC,eAAeC,EAAAA,EAAAA,KAAoBtkK,EAAQ,MAC3CukK,WAAYvkK,EAAOu5G,cAAcirD,uBACjCJ,mBAPgB/2J,EAzEsCo3J,EACxDJ,gBACAE,aACAlxI,YACAw6B,QACA0sD,aACAnnD,WACAl7C,WACAilD,UACAinG,oBAEA,MAAM1sG,GAAW3vD,EAAAA,EAAAA,OACX,SAAEhK,IAAaC,EAAAA,EAAAA,MACf0mK,EAAsB3mK,EAAW,IAAM,KAEtCsN,EAAOs5J,IAAY95J,EAAAA,EAAAA,IAAiB,KAE3C5B,EAAAA,EAAAA,KAAU,KACHiL,EAAAA,IACH3K,YAAW,KACTmuD,EAASxvD,QAASmwD,UACjBqsG,KAEJ,CAACA,IAEJ,MAAMj5J,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,IAGV,MAAMynG,GAAoBtmK,EAAAA,EAAAA,KAAaiN,IACjCsiD,GAAS0sD,GACXA,IAGF,MAAM/iB,EAAWjsF,EAAEC,OAAOH,MAAM0xC,MAAM,EAAGwnH,GAErC/sE,EAASr3F,SAAWokK,GACtBnxG,EAASokC,GAGXmtE,EAASntE,GACTjsF,EAAEC,OAAOH,MAAQmsF,IAChB,CAAC+iB,EAAYgqD,EAAY12G,EAAOuF,IAEnC,OACE70D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,wCAAuCC,SAAA,EACpDH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,GAAAA,GAACkmK,GAAAA,EAAuB,CAAC7nF,QAASqnF,EAAexlK,KApDvC,IAoDwDJ,UAAU,0BAC3E2lK,IACCzlK,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCsW,IAAI,OAAMrW,SACrD+M,EAAK,sCAAuC24J,SAKnD7lK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,+BAA8BC,SAAA,EAC3CC,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRhB,MAAOA,EACPsH,IAAK+kD,EACLhB,UAAU,UACV9qD,MAAOH,EAAK,iBACZoiD,MAAOA,EACP1hD,SAAUy4J,IAEXvxI,IAAa10B,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,cC7B9B,IAAe/sD,EAAAA,EAAAA,KArD4BwnK,EACzC5sJ,WAAUilD,cAEV,MAAM,mBAAEyzE,IAAuBlmI,EAAAA,EAAAA,MACzBe,GAAOC,EAAAA,EAAAA,KAOb,OALA+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,KAIR5+D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,wCAAuCC,SAAA,EACpDH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,GAAAA,GAACqkG,GAAAA,EAAuB,CACtBjkG,OAAQC,GAAAA,EAAe+zI,KACvBhO,WAAYiO,GACZn0I,KAAM,IACNJ,UAAU,2BAGZE,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCsW,IAAI,OAAMrW,UACrDg0B,EAAAA,GAAAA,GAAWjnB,EAAK,uBAAwB,CAAC,aAI9ClN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,OAELlF,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB+hB,6BAA8Bn0J,SAEzF+M,EAAK,qBAER9M,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,eAELlF,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBgiB,eAAgBp0J,SAE3E+M,EAAK,sBAER9M,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,QAELlF,QAASA,IAAMmkI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBiiB,oCAAqCr0J,SAEhG+M,EAAK,+BCyGhB,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAqB,CAACrN,GAAU2R,WAC3C,CACL0yJ,eAAeC,EAAAA,EAAAA,KAAoBtkK,EAAiB,UAAT2R,EAAmB,KAAO,SAFrDtE,EAnI0C03J,EAC5DV,gBACAxkK,OAAO,OACPwzB,YACAw6B,QACA3D,cACA86G,gBACAzqD,aACAnnD,WACAl7C,WACAilD,cAEA,MAAMzF,GAAW3vD,EAAAA,EAAAA,OACX,SAAEhK,IAAaC,EAAAA,EAAAA,MAEf0mK,EAAsB3mK,EAAW,IAAM,KACtCsN,EAAOs5J,IAAY95J,EAAAA,EAAAA,IAAiB,KACpCo6J,EAAgBC,EAAoBC,IAAwBvnK,EAAAA,EAAAA,IAAQ,IAE3EqL,EAAAA,EAAAA,KAAU,KACHiL,EAAAA,IACH3K,YAAW,KACTmuD,EAASxvD,QAASmwD,UACjBqsG,KAEJ,CAACA,IAEJ,MAAME,GAAoBtmK,EAAAA,EAAAA,KAAaiN,IACjCsiD,GAAS0sD,GACXA,IAGFoqD,EAASp5J,EAAEC,OAAOH,SACjB,CAACkvG,EAAY1sD,IAYVu3G,GAAa9mK,EAAAA,EAAAA,KAAY,KAC7B80D,MACC,CAACA,IAEEiyG,GAAoB/mK,EAAAA,EAAAA,KAAY,KACpC6mK,IACA/xG,MACC,CAACA,EAAU+xG,IAER15J,GAAOC,EAAAA,EAAAA,KAOb,OALA+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,KAIR5+D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,wCAAuCC,SAAA,EACpDH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,GAAAA,GAACkmK,GAAAA,EAAuB,CAAC7nF,QAASqnF,EAAexlK,KAlEvC,IAkEwDJ,UAAU,0BAClE,UAAToB,IACClB,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCsW,IAAI,OAAMrW,SACrD+M,EAAK,+BAKZlN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,+BAA8BC,SAAA,EAC3CH,EAAAA,GAAAA,IAAA,QAAM+B,OAAO,GAAG8yD,SAtCA7nD,IACpBA,EAAE6Y,iBAEGszC,EAASxvD,SAIdkrD,EAAS/nD,IA+BkC3M,SAAA,EACrCC,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRsG,IAAK+kD,EACLrsD,MAAOA,EACPqrD,UAAW72D,EACX+L,MAAOs+C,EACP2D,MAAOA,EACP1hD,SAAUy4J,IAGXv5J,GACC1M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACzM,KAAK,SAASwzB,UAAWA,EAAWhV,QAAM,EAAA3f,SAAE+M,EAAK,eAEzD9M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLE,QAAM,EACN6mB,UAAWA,EACXhV,QAAM,EACN5R,QAASu4J,EAAgBE,EAAqBE,EAAW1mK,SAExD+M,EAAK,sBAIXu5J,IACCzmK,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJrN,UAAU,SACV4L,OAAQ46J,EACRp5J,MAAOJ,EAAK,wBACZlB,QAAS46J,EAAqBzmK,SAAA,EAE7Bg0B,EAAAA,GAAAA,GAAWjnB,EAAK,4BAA6B,CAAC,KAAM,qBACrDlN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLC,MAAM,SACN8R,QAAM,EACN7R,QAAM,EACN/N,UAAU,wBACVgO,QAAS44J,EAAkB3mK,SAE1B+M,EAAK,oBAER9M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLC,MAAM,UACN8R,QAAM,EACN7R,QAAM,EACN/N,UAAU,wBACVgO,QAAS04J,EAAqBzmK,SAE7B+M,EAAK,4BChHtB,IAAenO,EAAAA,EAAAA,KAhC0BgoK,EACvCptJ,WAAUilD,UAASxmB,cAEnB,MAAMlrC,GAAOC,EAAAA,EAAAA,KAOb,OALA+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,KAIR5+D,EAAAA,GAAAA,IAAA,OAAKE,UAAU,wCAAuCC,SAAA,EACpDH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oCAAmCC,SAAA,EAChDC,EAAAA,GAAAA,GAACqkG,GAAAA,EAAuB,CACtBjkG,OAAQC,GAAAA,EAAe+zI,KACvBhO,WAAYiO,GACZn0I,KAAM,IACNJ,UAAU,2BAGZE,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAiCsW,IAAI,OAAMrW,SACrD+M,EAAK,mCAIV9M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,+BAA8BC,UAC3CC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACG,QAASkqC,EAAQj4C,SAAE+M,EAAK,0CCsWxC,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IAAM,IAAuBA,EAAOu5G,iBADnBlsG,EAtX6Bk4J,EAC/C/0B,gBACAC,cACA/1E,QACA8+C,OACAnmF,YACAgnF,WACAmqD,yBACAl8B,WACApwH,WACAilD,cAEA,MAAM,eACJqoG,EAAc,cACdC,EAAa,gBACbC,EAAe,oBACfC,EAAmB,sBACnBC,EAAqB,cACrBC,EAAa,mBACbj1B,IACElmI,EAAAA,EAAAA,MAEEe,GAAO2mC,EAAAA,GAAAA,KACPD,GAAUzmC,EAAAA,EAAAA,MAEhBzC,EAAAA,EAAAA,KAAU,KACJu7J,IACEh0B,IAAkBM,EAAAA,GAAgB0hB,sBACpC5hB,EAAmB,CAAES,OAAQP,EAAAA,GAAgB4hB,4BACpCliB,IAAkBM,EAAAA,GAAgB2hB,oBAC3C7hB,EAAmB,CAAES,OAAQP,EAAAA,GAAgB6hB,4BAGhD,CAACniB,EAAeg0B,EAAwB5zB,IAE3C,MAAM+C,GAAoBr1I,EAAAA,EAAAA,KAAY,KACpCgqI,EAAS,CAAEzoI,KAAM,UACjB+wI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBohB,qBAC5C,CAAC5pB,EAAUsI,IAERiD,GAAoBv1I,EAAAA,EAAAA,KAAa+M,IACrCi9H,EAAS,CAAEzoI,KAAM,cAAeooI,QAAS58H,IACzCulI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBuhB,4BAC5C,CAAC/pB,EAAUsI,IAERmD,GAA2Bz1I,EAAAA,EAAAA,KAAY,KAC3CsyI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBwhB,yBAC5C,CAAC1hB,IAEEk1B,GAAwBxnK,EAAAA,EAAAA,KAAa+M,IACzCi9H,EAAS,CAAEzoI,KAAM,UAAWooI,QAAS58H,IACrCulI,EAAmB,CAAES,OAAQP,EAAAA,GAAgB0hB,0BAC5C,CAAClqB,EAAUsI,IAERm1B,GAAyBznK,EAAAA,EAAAA,KAAa+M,IAC1Ci9H,EAAS,CAAEzoI,KAAM,WAAYooI,QAAS58H,IACtCm6J,EAAe,IACV9qG,EACHqtE,MAAO18H,EACPuoH,UAAWA,KACTgd,EAAmB,CAAES,OAAQP,EAAAA,GAAgB8hB,4BAGhD,CAACtqB,EAAU5tE,EAAO8qG,EAAgB50B,IAE/BqD,GAA8B31I,EAAAA,EAAAA,KAAa+M,IAC/Ci9H,EAAS,CAAEzoI,KAAM,qBAAsBooI,QAAS58H,IAChDo6J,EAAc,CACZxrD,gBAAiB5uG,EACjBuoH,UAAWA,KACTgd,EAAmB,CAAES,OAAQP,EAAAA,GAAgBqhB,8BAGhD,CAACsT,EAAen9B,EAAUsI,IAEvByD,GAA0B/1I,EAAAA,EAAAA,KAAa+M,IAC3Ci9H,EAAS,CAAEzoI,KAAM,cAAeooI,QAAS58H,IACzCulI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBshB,+BAC5C,CAAC9pB,EAAUsI,IAERo1B,GAA8B1nK,EAAAA,EAAAA,KAAY,KAC9CsyI,EAAmB,CAAES,OAAQP,EAAAA,GAAgByhB,4BAC5C,CAAC3hB,IAEEq1B,GAA2B3nK,EAAAA,EAAAA,KAAa+M,IAC5Ci9H,EAAS,CAAEzoI,KAAM,UAAWooI,QAAS58H,IACrCm6J,EAAe,IACV9qG,EACH8+C,KAAMnuG,EACNuoH,UAAWA,KACTgd,EAAmB,CAAES,OAAQP,EAAAA,GAAgB8hB,4BAGhD,CAACtqB,EAAU5tE,EAAO8qG,EAAgB50B,IAE/B2D,GAAgBj2I,EAAAA,EAAAA,KAAa+M,IACjCw6J,EAAc,CACZ5rD,gBAAiB5uG,EACjBuoH,UAAWA,KACTgd,EAAmB,CAAES,OAAQP,EAAAA,GAAgB0D,eAGhD,CAACqxB,EAAej1B,IAEbs1B,GAAqC5nK,EAAAA,EAAAA,KAAa+M,IACtDi9H,EAAS,CAAEzoI,KAAM,qBAAsBooI,QAAS58H,IAChDo6J,EAAc,CACZxrD,gBAAiB5uG,EACjBuoH,UAAWA,KACTgd,EAAmB,CAAES,OAAQP,EAAAA,GAAgB2hB,0BAGhD,CAACgT,EAAen9B,EAAUsI,IAEvBu1B,GAAsB7nK,EAAAA,EAAAA,KAAa+M,IACvCi9H,EAAS,CAAEzoI,KAAM,WAAYooI,QAAS58H,IACtCs6J,EAAoB,IACfjrG,EACHqtE,MAAO18H,EACPuoH,UAAWA,KACTgd,EAAmB,CAAES,OAAQP,EAAAA,GAAgB8hB,4BAGhD,CAACtqB,EAAU5tE,EAAOirG,EAAqB/0B,IAEpCw1B,GAAkB9nK,EAAAA,EAAAA,KAAaq3D,IACnCiwG,EAAsB,CAAEjwG,WACvB,CAACiwG,IAEJ,OAAQp1B,GACN,KAAKM,EAAAA,GAAgBkhB,cACnB,OACErzJ,EAAAA,GAAAA,GAAC2mK,GAAkB,CACjB3uH,QAASg9F,EACTz7H,SAAUA,GAAY,CACpB44H,EAAAA,GAAgBohB,iBAChBphB,EAAAA,GAAgBuhB,wBAChBvhB,EAAAA,GAAgBwhB,qBAChBxhB,EAAAA,GAAgB0hB,sBAChB1hB,EAAAA,GAAgB4hB,0BAChB5hB,EAAAA,GAAgB8hB,sBAChBpkI,SAASiiH,GACXtzE,QAASA,IAIf,KAAK2zE,EAAAA,GAAgBohB,iBACnB,OACEvzJ,EAAAA,GAAAA,GAAC0nK,GAAqB,CACpBn8G,YAAa/X,EAAQ,uBACrBsjB,YAAatjB,EAAQ,YACrBihB,SAAUygF,EACV37H,SAAUA,GAAY,CACpB44H,EAAAA,GAAgBuhB,wBAChBvhB,EAAAA,GAAgBwhB,qBAChBxhB,EAAAA,GAAgB0hB,sBAChB1hB,EAAAA,GAAgB4hB,0BAChB5hB,EAAAA,GAAgB8hB,sBAChBpkI,SAASiiH,GACXtzE,QAASA,IAIf,KAAK2zE,EAAAA,GAAgBuhB,wBACnB,OACE1zJ,EAAAA,GAAAA,GAAC0nK,GAAqB,CACpB/zB,iBAAkB53E,EAAMs/C,SACxB9vD,YAAa/X,EAAQ,yBACrBsjB,YAAatjB,EAAQ,YACrBihB,SAAU2gF,EACV77H,SAAUA,GAAY,CACpB44H,EAAAA,GAAgBwhB,qBAChBxhB,EAAAA,GAAgB0hB,sBAChB1hB,EAAAA,GAAgB4hB,0BAChB5hB,EAAAA,GAAgB8hB,sBAChBpkI,SAASiiH,GACXtzE,QAASA,IAIf,KAAK2zE,EAAAA,GAAgBwhB,qBACnB,OACE3zJ,EAAAA,GAAAA,GAAComK,GAA0B,CACzBpzJ,KAAK,OACLu4C,YAAa/X,EAAQ,2BACrBihB,SAAU0yG,EACV5tJ,SAAUA,GAAY,CACpB44H,EAAAA,GAAgB0hB,sBAChB1hB,EAAAA,GAAgB4hB,0BAChB5hB,EAAAA,GAAgB8hB,sBAChBpkI,SAASiiH,GACXtzE,QAASA,IAIf,KAAK2zE,EAAAA,GAAgB0hB,sBACnB,OACE7zJ,EAAAA,GAAAA,GAAComK,GAA0B,CACzBpzJ,KAAK,QACL9R,KAAK,QACLwzB,UAAWA,EACXw6B,MAAOwsD,GAAY5uG,EAAK6uG,YAAYD,GACpCE,WAAYmrD,EACZx7G,YAAa/X,EAAQ,sBACrB6yH,eAAa,EACb5xG,SAAU2yG,EACV7tJ,SAAUA,GAAY,CACpB44H,EAAAA,GAAgB4hB,0BAChB5hB,EAAAA,GAAgB8hB,sBAChBpkI,SAASiiH,GACXtzE,QAASA,IAIf,KAAK2zE,EAAAA,GAAgB4hB,0BACnB,OACE/zJ,EAAAA,GAAAA,GAAC8lK,GAAsB,CACrBpxI,UAAWA,EACXw6B,MAAOwsD,GAAY5uG,EAAK6uG,YAAYD,GACpCE,WAAYmrD,EACZtyG,SAAUgzG,EACVluJ,SAAUA,GAAYu4H,IAAgBK,EAAAA,GAAgB8hB,qBACtDz1F,QAASA,IAIf,KAAK2zE,EAAAA,GAAgB8hB,qBACnB,OACEj0J,EAAAA,GAAAA,GAACwlK,GAA4B,CAC3BjsJ,SAAUA,EACVilD,QAASA,IAIf,KAAK2zE,EAAAA,GAAgBmhB,aACnB,OACEtzJ,EAAAA,GAAAA,GAACmmK,GAAoB,CACnB5sJ,SAAUA,GAAY,CACpB44H,EAAAA,GAAgB+hB,2BAChB/hB,EAAAA,GAAgBqhB,uBAChBrhB,EAAAA,GAAgBshB,2BAChBthB,EAAAA,GAAgByhB,wBAChBzhB,EAAAA,GAAgBgiB,aAChBhiB,EAAAA,GAAgBiiB,kCAChBjiB,EAAAA,GAAgB2hB,mBAChB3hB,EAAAA,GAAgB6hB,uBAChB7hB,EAAAA,GAAgB8hB,sBAChBpkI,SAASiiH,GACXtzE,QAASA,IAIf,KAAK2zE,EAAAA,GAAgB+hB,2BACnB,OACEl0J,EAAAA,GAAAA,GAAC0nK,GAAqB,CACpBhzI,UAAWA,EACXw6B,MAAOwsD,GAAY5uG,EAAK6uG,YAAYD,GACpCE,WAAYmrD,EACZlsD,KAAMA,EACNpmD,SAAU6gF,EACV/7H,SAAUA,GAAY,CACpB44H,EAAAA,GAAgBqhB,uBAChBrhB,EAAAA,GAAgBshB,2BAChBthB,EAAAA,GAAgByhB,wBAChBzhB,EAAAA,GAAgB8hB,sBAChBpkI,SAASiiH,GACXtzE,QAASA,IAIf,KAAK2zE,EAAAA,GAAgBqhB,uBACnB,OACExzJ,EAAAA,GAAAA,GAAC0nK,GAAqB,CACpBn8G,YAAa/X,EAAQ,+BACrBihB,SAAUihF,EACVn8H,SAAUA,GAAY,CACpB44H,EAAAA,GAAgBshB,2BAChBthB,EAAAA,GAAgByhB,wBAChBzhB,EAAAA,GAAgB8hB,sBAChBpkI,SAASiiH,GACXtzE,QAASA,IAIf,KAAK2zE,EAAAA,GAAgBshB,2BACnB,OACEzzJ,EAAAA,GAAAA,GAAC0nK,GAAqB,CACpB/zB,iBAAkB53E,EAAMs/C,SACxB9vD,YAAa/X,EAAQ,yBACrBihB,SAAU4yG,EACV9tJ,SAAUA,GAAY,CACpB44H,EAAAA,GAAgByhB,wBAChBzhB,EAAAA,GAAgB8hB,sBAChBpkI,SAASiiH,GACXtzE,QAASA,IAIf,KAAK2zE,EAAAA,GAAgByhB,wBACnB,OACE5zJ,EAAAA,GAAAA,GAAComK,GAA0B,CACzB1xI,UAAWA,EACXw6B,MAAOwsD,GAAY5uG,EAAK6uG,YAAYD,GACpCE,WAAYmrD,EACZ/zJ,KAAK,OACLu4C,YAAa/X,EAAQ,2BACrBihB,SAAU6yG,EACV/tJ,SAAUA,GAAYu4H,IAAgBK,EAAAA,GAAgB8hB,qBACtDz1F,QAASA,IAIf,KAAK2zE,EAAAA,GAAgBgiB,aACnB,OACEn0J,EAAAA,GAAAA,GAAC0nK,GAAqB,CACpBhzI,UAAWA,EACXw6B,MAAOwsD,GAAY5uG,EAAK6uG,YAAYD,GACpCE,WAAYmrD,EACZlsD,KAAMA,EACNpmD,SAAUmhF,EACVr8H,SAAUA,EACVilD,QAASA,IAIf,KAAK2zE,EAAAA,GAAgBiiB,kCACnB,OACEp0J,EAAAA,GAAAA,GAAC0nK,GAAqB,CACpBhzI,UAAWA,EACXw6B,MAAOwsD,GAAY5uG,EAAK6uG,YAAYD,GACpCE,WAAYmrD,EACZlsD,KAAMA,EACNpmD,SAAU8yG,EACVhuJ,SAAUA,GAAY,CACpB44H,EAAAA,GAAgB2hB,mBAChB3hB,EAAAA,GAAgB6hB,uBAChB7hB,EAAAA,GAAgB8hB,sBAChBpkI,SAASiiH,GACXtzE,QAASA,IAIf,KAAK2zE,EAAAA,GAAgB2hB,mBACnB,OACE9zJ,EAAAA,GAAAA,GAAComK,GAA0B,CACzBpzJ,KAAK,QACL9R,KAAK,QACLqqD,YAAa/X,EAAQ,sBACrBihB,SAAU+yG,EACVjuJ,SAAUA,GAAY,CACpB44H,EAAAA,GAAgB6hB,uBAChB7hB,EAAAA,GAAgB8hB,sBAChBpkI,SAASiiH,GACXtzE,QAASA,IAIf,KAAK2zE,EAAAA,GAAgB6hB,uBACnB,OACEh0J,EAAAA,GAAAA,GAAC8lK,GAAsB,CACrBpxI,UAAWA,EACXw6B,MAAOwsD,GAAY5uG,EAAK6uG,YAAYD,GACpCE,WAAYmrD,EACZtyG,SAAUgzG,EACVluJ,SAAUA,GAAYu4H,IAAgBK,EAAAA,GAAgB8hB,qBACtDz1F,QAASA,IAIf,QACE,YCnWAmpG,GAA0B5oH,OAAO6K,KAAKuoF,EAAAA,IAAiB3wI,OAAS,EAGhEomK,GAAiB,CACrBz1B,EAAAA,GAAgBkhB,cAChBlhB,EAAAA,GAAgBohB,iBAChBphB,EAAAA,GAAgBuhB,wBAChBvhB,EAAAA,GAAgBwhB,qBAChBxhB,EAAAA,GAAgB0hB,sBAChB1hB,EAAAA,GAAgB4hB,0BAChB5hB,EAAAA,GAAgB8hB,qBAChB9hB,EAAAA,GAAgBmhB,aAChBnhB,EAAAA,GAAgB+hB,2BAChB/hB,EAAAA,GAAgBqhB,uBAChBrhB,EAAAA,GAAgBshB,2BAChBthB,EAAAA,GAAgByhB,wBAChBzhB,EAAAA,GAAgBgiB,aAChBhiB,EAAAA,GAAgBiiB,kCAChBjiB,EAAAA,GAAgB2hB,mBAChB3hB,EAAAA,GAAgB6hB,wBAGZ6T,GAAmB,CACvB11B,EAAAA,GAAgB2D,iBAChB3D,EAAAA,GAAgB6D,iBAGZ8xB,GAAkB,CACtB31B,EAAAA,GAAgBqB,QAChBrB,EAAAA,GAAgBC,oBAChBD,EAAAA,GAAgBE,kBAChBF,EAAAA,GAAgBG,8BAChBH,EAAAA,GAAgBI,yBAChBJ,EAAAA,GAAgBK,qBAChBL,EAAAA,GAAgBe,iCAChBf,EAAAA,GAAgBM,qBAChBN,EAAAA,GAAgBiB,iCAChBjB,EAAAA,GAAgBX,cAGZu2B,GAAkB,CACtB51B,EAAAA,GAAgBihB,oBAChBjhB,EAAAA,GAAgBghB,gBAGZ6U,GAA+B,CACnC71B,EAAAA,GAAgBggB,kCAChBhgB,EAAAA,GAAgBugB,kCAGZuV,GAAkC,CACtC91B,EAAAA,GAAgBwf,+BAChBxf,EAAAA,GAAgB4f,+BAGZmW,GAAgC,CACpC/1B,EAAAA,GAAgByf,mCAChBzf,EAAAA,GAAgB6f,mCAGZmW,GAAsB,CAC1Bh2B,EAAAA,GAAgB0f,0BAChB1f,EAAAA,GAAgB8f,0BAGZmW,GAA2B,CAC/Bj2B,EAAAA,GAAgBigB,+BAChBjgB,EAAAA,GAAgBwgB,+BAGZ0V,GAAwB,CAC5Bl2B,EAAAA,GAAgBkgB,4BAChBlgB,EAAAA,GAAgBygB,4BAGZ0V,GAA6B,CACjCn2B,EAAAA,GAAgBqgB,gCAChBrgB,EAAAA,GAAgB4gB,gCAGZwV,GAA4B,CAChCp2B,EAAAA,GAAgBsgB,+BAChBtgB,EAAAA,GAAgB6gB,+BAGZwV,GAA6B,CACjCr2B,EAAAA,GAAgBmgB,iCAChBngB,EAAAA,GAAgB0gB,iCAGZ4V,GAAiC,CACrCt2B,EAAAA,GAAgBogB,oCAChBpgB,EAAAA,GAAgB2gB,oCAGZ4V,GAA8B,CAClCv2B,EAAAA,GAAgB2f,iCAChB3f,EAAAA,GAAgB+f,iCAGZyW,GAA2B,CAC/Bx2B,EAAAA,GAAgBuH,uBA6XlB,IAAe/6I,EAAAA,EAAAA,KAhXgBiqK,EAC7BrvJ,WACAs4H,gBACAg3B,eACAC,kBACAtqG,UACAkpE,iBACAqhC,2BAEA,MAAM,0BAAEC,EAAyB,mBAAE/2B,IAAuBlmI,EAAAA,EAAAA,MAEpDsd,GAAejgB,EAAAA,EAAAA,OAEd6/J,EAAYC,I/D9GZC,EAAAA,GAAAA,GAAW9/B,GAAcF,K+D+GzBigC,EAAiBC,IAAsBn9J,EAAAA,EAAAA,IAAiB,KAE/Do9J,EAAAA,GAAAA,GAAe,CACbjgJ,eACA0I,SAAU,qBACT,CAAC8/G,IAEJ,MAAMK,GAAc5lI,EAAAA,EAAAA,IAAiBi9J,IACnC,MAAMC,GAAiB16J,EAAAA,EAAAA,MAAe+/B,EAAAA,EAAAA,OAAa4hG,mBAAmB+4B,eAElE33B,IAAkBM,EAAAA,GAAgBX,cACpCw3B,KAG4B,IAA1BO,QAAsD7mK,IAAnB8mK,IAAiCA,EACtEhrG,GAAQ,IAKRqzE,IAAkBM,EAAAA,GAAgBC,qBAC/BP,IAAkBM,EAAAA,GAAgBE,mBAClCR,IAAkBM,EAAAA,GAAgBG,+BAClCT,IAAkBM,EAAAA,GAAgBI,0BAErC3nI,YAAW,KACTk+J,EAAgB,CAAE5nK,KAAM,YAzJJ,KA8JtB2wI,IAAkBM,EAAAA,GAAgBK,sBAC/BX,IAAkBM,EAAAA,GAAgBM,qBAUvCj0E,IAR4B,WAAtBqqG,EAAan/B,KACfuI,EAAmB,CAAES,OAAQP,EAAAA,GAAgBC,sBAE7CH,EAAmB,CAAES,OAAQP,EAAAA,GAAgBE,wBAQnD,SAASo3B,EAA4BC,EAAyBC,GAC5D,MAAMC,EAA+C,CACnD,CAACz3B,EAAAA,GAAgB+e,oBAAqB8W,GAA6Bn4I,SAAS85I,GAC5E,CAACx3B,EAAAA,GAAgBgf,iBAAkB8W,GAAgCp4I,SAAS85I,GAC5E,CAACx3B,EAAAA,GAAgBif,qBAAsB8W,GAA8Br4I,SAAS85I,GAC9E,CAACx3B,EAAAA,GAAgBkf,YAAa8W,GAAoBt4I,SAAS85I,GAC3D,CAACx3B,EAAAA,GAAgBmf,iBAAkB8W,GAAyBv4I,SAAS85I,GACrE,CAACx3B,EAAAA,GAAgBof,cAAe8W,GAAsBx4I,SAAS85I,GAC/D,CAACx3B,EAAAA,GAAgB8G,kBAAmBqvB,GAA2Bz4I,SAAS85I,GACxE,CAACx3B,EAAAA,GAAgButB,iBAAkB6I,GAA0B14I,SAAS85I,GACtE,CAACx3B,EAAAA,GAAgBqf,mBAAoBgX,GAA2B34I,SAAS85I,GACzE,CAACx3B,EAAAA,GAAgBsf,sBAAuBgX,GAA+B54I,SAAS85I,GAChF,CAACx3B,EAAAA,GAAgB2G,mBAAoB4vB,GAA4B74I,SAAS85I,GAC1E,CAACx3B,EAAAA,GAAgBuf,iBAAkBiX,GAAyB94I,SAAS85I,IAGjEE,EAAgBjC,GAAe/3I,SAAS85I,GACxCG,EAAmBjC,GAAiBh4I,SAAS85I,GAC7CI,EAAkBjC,GAAgBj4I,SAAS85I,GAC3CK,EAAkBjC,GAAgBl4I,SAAS85I,IAC5CE,GACAC,GACA/qH,OAAO6K,KAAKggH,GAAqBp2J,IAAI6R,QAAQwK,SAAS85I,IACtD5qH,OAAOyK,OAAOogH,GAAqB/5I,UAAS,GAEjD,OAAQgiH,GACN,KAAKM,EAAAA,GAAgB83B,KACnB,OACEjqK,EAAAA,GAAAA,GAAC81J,GAAY,CAACv8I,SAAUA,EAAUilD,QAAS0zE,IAE/C,KAAKC,EAAAA,GAAgBwe,YACnB,OACE3wJ,EAAAA,GAAAA,GAACokJ,GAAmB,CAClB7qI,SAAUA,GAAYmwJ,EACtBlrG,QAAS0zE,IAGf,KAAKC,EAAAA,GAAgBye,QACnB,OACE5wJ,EAAAA,GAAAA,GAACuoJ,GAAe,CACdhvI,SAAUmwJ,GACLC,IAAiBx3B,EAAAA,GAAgBsZ,4BACjCke,IAAiBx3B,EAAAA,GAAgBwX,uBACjCggB,IAAiBx3B,EAAAA,GAAgB0e,eACjC8Y,IAAiBx3B,EAAAA,GAAgBtmD,aACjCm+E,GAAmBD,EACxBvrG,QAAS0zE,IAGf,KAAKC,EAAAA,GAAgB0e,cACnB,OACE7wJ,EAAAA,GAAAA,GAAC8kK,GAAqB,CAACvrJ,SAAUmwJ,EAAgBlrG,QAAS0zE,IAE9D,KAAKC,EAAAA,GAAgBtmD,YACnB,OACE7rF,EAAAA,GAAAA,GAACq+I,GAAmB,CAAC9kI,SAAUmwJ,EAAgBlrG,QAAS0zE,IAE5D,KAAKC,EAAAA,GAAgBliF,cACnB,OACEjwD,EAAAA,GAAAA,GAACo3J,GAAqB,CAAC79I,SAAUmwJ,EAAgBlrG,QAAS0zE,IAE9D,KAAKC,EAAAA,GAAgB2e,YACnB,OACE9wJ,EAAAA,GAAAA,GAAC2+I,GAAmB,CAACplI,SAAUmwJ,EAAgBlrG,QAAS0zE,IAE5D,KAAKC,EAAAA,GAAgB0D,QACnB,OACE71I,EAAAA,GAAAA,GAAC87J,GAAe,CACdviJ,SAAUmwJ,GAAkBM,EAC5BxrG,QAAS0zE,IAGf,KAAKC,EAAAA,GAAgB4e,SACnB,OACE/wJ,EAAAA,GAAAA,GAACw0J,GAAgB,CACfj7I,SAAUmwJ,GAAkBC,IAAiBx3B,EAAAA,GAAgB6e,eAC7DxyF,QAAS0zE,IAGf,KAAKC,EAAAA,GAAgB6e,eACnB,OACEhxJ,EAAAA,GAAAA,GAACsgJ,GAAsB,CAAC/mI,SAAUmwJ,EAAgBlrG,QAAS0zE,IAE/D,KAAKC,EAAAA,GAAgB8e,SACnB,OACEjxJ,EAAAA,GAAAA,GAACklK,GAAgB,CAAC3rJ,SAAUmwJ,EAAgBlrG,QAAS0zE,IAEzD,KAAKC,EAAAA,GAAgB4V,aACnB,OACE/nJ,EAAAA,GAAAA,GAACwmJ,GAAoB,CAACjtI,SAAUmwJ,EAAgBlrG,QAAS0zE,IAE7D,KAAKC,EAAAA,GAAgBwX,sBACnB,OACE3pJ,EAAAA,GAAAA,GAAC8qJ,GAAyB,CACxBvxI,SAAUmwJ,GAAkBC,IAAiBx3B,EAAAA,GAAgBsZ,2BAC7DjtF,QAAS0zE,IAGf,KAAKC,EAAAA,GAAgBsZ,2BACnB,OACEzrJ,EAAAA,GAAAA,GAACkqK,GAA8B,CAC7B3wJ,SAAUmwJ,EACVlrG,QAAS0zE,IAGf,KAAKC,EAAAA,GAAgB+gB,eACnB,OACElzJ,EAAAA,GAAAA,GAACy7I,GAAsB,CACrBliI,SAAUmwJ,EACVlrG,QAAS0zE,IAGf,KAAKC,EAAAA,GAAgBghB,eACnB,OACEnzJ,EAAAA,GAAAA,GAACs9I,GAAsB,CACrB/jI,SAAUmwJ,EACVlrG,QAAS0zE,IAGf,KAAKC,EAAAA,GAAgBihB,oBACnB,OACEpzJ,EAAAA,GAAAA,GAAC8+J,GAA2B,CAC1BvlJ,SAAUmwJ,EACVlrG,QAAS0zE,IAGf,KAAKC,EAAAA,GAAgB+e,mBACrB,KAAK/e,EAAAA,GAAgBgf,gBACrB,KAAKhf,EAAAA,GAAgBif,oBACrB,KAAKjf,EAAAA,GAAgBkf,WACrB,KAAKlf,EAAAA,GAAgBmf,gBACrB,KAAKnf,EAAAA,GAAgBof,aACrB,KAAKpf,EAAAA,GAAgB8G,iBACrB,KAAK9G,EAAAA,GAAgBqf,kBACrB,KAAKrf,EAAAA,GAAgBsf,qBACrB,KAAKtf,EAAAA,GAAgB2G,kBACnB,OACE94I,EAAAA,GAAAA,GAACgjK,GAAyB,CACxBtwB,OAAQb,EACRt4H,SAAUmwJ,GAAkBE,EAAoB/3B,GAChDrzE,QAAS0zE,IAIf,KAAKC,EAAAA,GAAgBggB,kCACrB,KAAKhgB,EAAAA,GAAgBwf,+BACrB,KAAKxf,EAAAA,GAAgByf,mCACrB,KAAKzf,EAAAA,GAAgB0f,0BACrB,KAAK1f,EAAAA,GAAgBigB,+BACrB,KAAKjgB,EAAAA,GAAgBkgB,4BACrB,KAAKlgB,EAAAA,GAAgBqgB,gCACrB,KAAKrgB,EAAAA,GAAgBsgB,+BACrB,KAAKtgB,EAAAA,GAAgBmgB,iCACrB,KAAKngB,EAAAA,GAAgBogB,oCACrB,KAAKpgB,EAAAA,GAAgB2f,iCACrB,KAAK3f,EAAAA,GAAgBuH,sBACnB,OACE15I,EAAAA,GAAAA,GAACsjK,GAAsC,CACrCC,aAAW,EACXG,UAAW7xB,IAAkBM,EAAAA,GAAgBuH,sBAC7C8pB,oBAAqB3xB,IAAkBM,EAAAA,GAAgB2f,iCACvD2R,qBAAsB5xB,IAAkBM,EAAAA,GAAgBkgB,4BACxD3f,OAAQb,EACRt4H,SAAUmwJ,GAAkBE,EAAoB/3B,GAChDrzE,QAAS0zE,IAIf,KAAKC,EAAAA,GAAgBugB,iCACrB,KAAKvgB,EAAAA,GAAgB4f,8BACrB,KAAK5f,EAAAA,GAAgB6f,kCACrB,KAAK7f,EAAAA,GAAgB8f,yBACrB,KAAK9f,EAAAA,GAAgBwgB,8BACrB,KAAKxgB,EAAAA,GAAgBygB,2BACrB,KAAKzgB,EAAAA,GAAgB4gB,+BACrB,KAAK5gB,EAAAA,GAAgB6gB,8BACrB,KAAK7gB,EAAAA,GAAgB0gB,gCACrB,KAAK1gB,EAAAA,GAAgB2gB,mCACrB,KAAK3gB,EAAAA,GAAgB+f,gCACnB,OACElyJ,EAAAA,GAAAA,GAACsjK,GAAsC,CACrC5wB,OAAQb,EACRt4H,SAAUmwJ,EACVlrG,QAAS0zE,IAIf,KAAKC,EAAAA,GAAgBuf,gBACnB,OACE1xJ,EAAAA,GAAAA,GAAC0xJ,GAAe,CACdn4I,SAAUmwJ,EACVlrG,QAAS0zE,IAIf,KAAKC,EAAAA,GAAgBqB,QACrB,KAAKrB,EAAAA,GAAgBC,oBACrB,KAAKD,EAAAA,GAAgBE,kBACrB,KAAKF,EAAAA,GAAgBG,8BACrB,KAAKH,EAAAA,GAAgBI,yBACrB,KAAKJ,EAAAA,GAAgBK,qBACrB,KAAKL,EAAAA,GAAgBe,iCACrB,KAAKf,EAAAA,GAAgBM,qBACrB,KAAKN,EAAAA,GAAgBiB,iCACrB,KAAKjB,EAAAA,GAAgBX,aACnB,OACExxI,EAAAA,GAAAA,GAAC4xI,GAAe,CACdC,cAAeA,EACfC,YAAa63B,EACb5tG,MAAO8sG,EACPl/B,SAAUm/B,EACVvvJ,SAAUmwJ,EACVlrG,QAAS0zE,IAIf,KAAKC,EAAAA,GAAgBkhB,cACrB,KAAKlhB,EAAAA,GAAgBohB,iBACrB,KAAKphB,EAAAA,GAAgBuhB,wBACrB,KAAKvhB,EAAAA,GAAgBwhB,qBACrB,KAAKxhB,EAAAA,GAAgB0hB,sBACrB,KAAK1hB,EAAAA,GAAgB4hB,0BACrB,KAAK5hB,EAAAA,GAAgB8hB,qBACrB,KAAK9hB,EAAAA,GAAgBmhB,aACrB,KAAKnhB,EAAAA,GAAgB+hB,2BACrB,KAAK/hB,EAAAA,GAAgBqhB,uBACrB,KAAKrhB,EAAAA,GAAgBshB,2BACrB,KAAKthB,EAAAA,GAAgByhB,wBACrB,KAAKzhB,EAAAA,GAAgBgiB,aACrB,KAAKhiB,EAAAA,GAAgBiiB,kCACrB,KAAKjiB,EAAAA,GAAgB2hB,mBACrB,KAAK3hB,EAAAA,GAAgB6hB,uBACnB,OACEh0J,EAAAA,GAAAA,GAAC4mK,GAAa,CACZ/0B,cAAeA,EACf91E,MAAOktG,EACPt/B,SAAUu/B,EACVp3B,YAAa63B,EACbpwJ,SAAUmwJ,EACVlrG,QAAS0zE,IAIf,KAAKC,EAAAA,GAAgB2D,iBACrB,KAAK3D,EAAAA,GAAgB8C,oBACrB,KAAK9C,EAAAA,GAAgBgD,2BACrB,KAAKhD,EAAAA,GAAgBmC,8BACrB,KAAKnC,EAAAA,GAAgBsD,0BACrB,KAAKtD,EAAAA,GAAgBwD,8BACrB,KAAKxD,EAAAA,GAAgBkD,wBACrB,KAAKlD,EAAAA,GAAgB6D,gBACrB,KAAK7D,EAAAA,GAAgBoC,gBACnB,OACEv0I,EAAAA,GAAAA,GAAC00I,GAAgB,CACf7C,cAAeA,EACf4C,SAAU20B,EACVz0B,cAAe00B,EACfv3B,YAAa63B,EACbpwJ,SAAUmwJ,EACVlrG,QAAS0zE,IAIf,KAAKC,EAAAA,GAAgB8gB,YACnB,OACEjzJ,EAAAA,GAAAA,GAACmqK,GAAmB,CAClB5wJ,SAAUmwJ,EACVlrG,QAAS0zE,IAIf,QACE,OAEN,CAoBA,OACElyI,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CACT/oB,IAAKqV,EACLxpB,GAAG,WACHyN,MAAMs6H,EAAAA,GAAAA,GAAsB,SAAUF,EAAgBqhC,GACtD/rI,UAAW60G,EACX3I,YAAay+B,GACbyC,YAAU,EACVC,kBAAgB,EAAAtqK,SA1BpB,SACE2pK,EACAY,EACAC,EACAvtI,GAEA,OACEp9B,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAC6vJ,GAAc,CACbhe,cAAeA,EACfrzE,QAAS0zE,EACT4d,eAAgB+Y,EAAa/sF,WAE9B2tF,EAA4BC,EAAgB1sI,KAGnD,OChZF,IAAer+B,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAQ0kC,QAAShC,GAAe1iC,EAAOmlC,aAAe,CAAC,GAC/CE,KAAMvB,EAAWitD,aAAco4E,GAAqBnpK,EAAOolC,MAEnE,MAAO,CACLtB,YACAqlI,mBACAzmI,gBARcr1B,EA3E2B+7J,EAC7ClxJ,WACAkkB,SACA0H,YACAqlI,mBACAzmI,aACAy6B,cAEA,MAAM,SACJh0B,EAAQ,qBACRkgI,IACE3+J,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,MACP,SAAE3N,IAAaC,EAAAA,EAAAA,OAErByrB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,IAGV,MAAMl6C,GAAc3kB,EAAAA,EAAAA,KAAaE,IAC/B2qC,EAAS,CAAE3qC,KAAIq+H,sBAAsB,MACpC,CAAC1zF,IAEEuhB,GAAUjkD,EAAAA,EAAAA,KAAQ,KACtB,IAAKi8B,EACH,OAGF,MAAMo/F,GAAcl/F,EAAAA,GAAAA,IAAmB,CAAEC,IAAKH,EAAYI,MAAO1G,EAAQv8B,KAAM,SAE/E,OAAOoxF,EAAAA,EAAAA,IAAY6wC,EAAah+F,EAAWqlI,KAC1C,CAACzmI,EAAYtG,EAAQ0H,EAAWqlI,KAE5BtiH,EAAaC,IAAWC,EAAAA,GAAAA,QAAkB1lD,EAAWqpD,EAASjhD,QAAQ2yB,IAE7E,OACE79B,EAAAA,GAAAA,IAACslD,GAAAA,EAAc,CAACC,MAAO+C,EAAa9C,WAAY+C,EAASroD,UAAU,0BAAyBC,SAAA,CACzFmoD,GAAa1mD,OACZ0mD,EAAY10C,KAAK3T,IACfG,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAEPxiC,UAAU,wCACVgO,QAASA,IAAMwW,EAAYzkB,GAAIE,UAE/BC,EAAAA,GAAAA,GAACiiD,GAAAA,EAAe,CACdtkB,OAAQ99B,EACRglC,eAAa,EACb4xF,WAAW,QACXt7E,WAAS,EACTuiF,kBAAmB7/F,EAAAA,GAAkBI,SACrCve,QAAStgB,KAVNS,KAcPqoD,IAAgBA,EAAY1mD,QAC9BxB,EAAAA,GAAAA,GAAA,KAAGF,UAAU,aAA8BsW,IAAI,OAAMrW,SAClD09B,EAAOj8B,OAAS,mCAAqC,0BAD1B,eAI9BxB,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,GAAK,YAEf1rD,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CAEnBC,SAAO,EACPp4B,QAAS48J,EACTp4J,UAAWxF,EAAK,oBAAoB/M,UAEpCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,qBALP,6BCkCZ,IAAe3O,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAQ0kC,QAASg4H,GAAoB18J,EAAOmlC,aAAe,CAAC,GAG1DrC,MAAOP,EAAW,eAClB45B,EAAc,cACd6jE,EAAa,aACbC,IACExyH,EAAAA,EAAAA,KAAezN,GAAQi8D,cACnBngB,QAASokF,GAAkBF,GAAiB,CAAC,GAC7ClkF,QAAS+lF,GAAiB5B,GAAgB,CAAC,EAEnD,MAAO,CACLy8B,kBACAn6H,cACA+mI,YAAantG,GAAgBrU,MAC7Bo4E,gBACA2B,kBAlBcx0H,EAjG4Bk8J,EAC9Cr3I,YACAha,WACAu4E,oBACAisE,kBACAn6H,cACA+mI,cACAznC,eACA3B,gBACAspC,4BACAC,aACAtsG,cAEA,MAAM,qBACJusG,IACEh/J,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,IAGV,MAAM8vB,GAAqB3uF,EAAAA,EAAAA,KAAawkC,IACtC4mI,EAAqB,CAAE5mI,YACtB,IAEGL,GAAeh8B,EAAAA,EAAAA,KAAQ,KAE3B,MAAMq9B,GAAY0J,EAAAA,EAAAA,MAAYpI,MAAMC,KAC9BskI,EAAkBjN,GACpB95H,EAAAA,GAAAA,IAAmB,CAAEC,IAAK65H,EAAiB55H,MAAOP,EAAa1iC,KAAM,SAAY,GAErF,OAAOgsD,EAAAA,GAAAA,IACLlpB,EAAAA,GAAAA,IAAO,IACFgnI,KACC9nC,GAAgB,MAChB3B,GAAiB,KACpB9jG,QAAQ6gI,IACT,MAAMpuH,EAAO/K,EAAUm5H,GAEvB,OAAOpuH,IAASA,EAAKoa,SAAWpa,EAAK+6H,uBAAwBx4E,EAAAA,EAAAA,IAAUviD,QAEzE,EACA4hD,KAED,CAACisE,EAAiBn6H,EAAas/F,EAAc3B,EAAezvC,IAEzDo5E,GAAiBvrK,EAAAA,EAAAA,KAAY,KACjCorK,EAAqB,CAAE5mI,MAAO,KAC9B2mI,MACC,CAACA,IAEJ,OACElrK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLnS,KAAK,UACL0N,MAAM,cACNE,QAAS0wD,EACTlsD,UAAU,sBAAqBvS,UAE/BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,kBAEbtN,EAAAA,GAAAA,GAAA,MAAAD,SAAK+M,EAAK,yBAEZlN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,uBAAsBC,SAAA,EACnCC,EAAAA,GAAAA,GAACokC,GAAAA,EAAU,CACTC,QAASP,EACTL,YAAaquD,EACbttD,YAAaZ,EACba,kBAAmB33B,EAAK,iBACxB43B,cAAc,0BACdhQ,UAAWi2I,EACXhmI,cAAY,EACZK,eAAa,EACbC,YAAU,EACVC,cAAc,WACdN,oBAAkB,EAClBE,oBAAqB+lI,EACrB9lI,eAAgBupD,KAGlBtuF,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,SAAO,EACPp4B,QAASo9J,EACT54J,UAAWihB,EAAY,2BAA6B,yBAAyBxzB,UAE7EC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,4BCkGrB,IAAe3O,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MACEsS,SAAUw3J,EACVj8G,MAAOk8G,IACLt8J,EAAAA,EAAAA,KAAezN,GAAQgqK,cAAgB,CAAC,EAE5C,MAAO,CACLF,mBACAC,gBACAE,aAAcjqK,EAAOsjK,QAAQ2G,gBAVf58J,EAvL4B68J,EAC9Ch4I,YACAha,WACA44E,YACAm5E,eACAH,mBACAC,gBACA5sG,cAEA,MAAM,gBACJgtG,EAAe,cACfC,IACE1/J,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,IAGV,MAAOtxD,EAAOw+J,IAAYx/J,EAAAA,EAAAA,IAAS,KAC5BosG,EAAOqzD,IAAYz/J,EAAAA,EAAAA,IAAS,KAC5BrK,EAAOgjJ,IAAY34I,EAAAA,EAAAA,OACnBgjD,EAAO01F,IAAY14I,EAAAA,EAAAA,MAEpB0/J,EAAsB,4BACtBC,EAAyB,+BAGzBn3I,EAAYy2I,IAAqBW,EAAAA,GAAqB3mB,YAE5D76I,EAAAA,EAAAA,KAAU,KACR,GAAIipB,EACF,OAEF,IAAK4+D,EAAU3wF,QAAU2wF,EAAU3wF,OAtCI,EAwCrC,YADAkqK,EAAS,IAGX,MAAMrqK,GAASwtC,EAAAA,EAAAA,MACT1J,EAAY9jC,EAAOolC,MAAMC,KACzBqlI,EAAmB,CAAC1qK,EAAO8yB,iBAAmBg+D,GACjD3+E,KAAKmqB,IAAWwwB,EAAAA,EAAAA,IAAuBhpB,EAAUxH,MACjDF,OAAO3yB,SACJkhK,EAAoBD,EAAiB3tH,MAAM,GAAI,GAAG13B,KAAK,MACzD5Z,EAAK,uCACLi/J,EAAiBA,EAAiBvqK,OAAS,GAC/CkqK,EAASM,KACR,CAACz4I,EAAW4+D,EAAWrlF,IAE1B,MAAMm/J,GAAoBtsK,EAAAA,EAAAA,KAAaiN,IACrC,MAAM,MAAEF,GAAUE,EAAE6X,cACdo0E,EAAWnsF,EAAM0qD,QAAQ,OAAQ,IAEvCs0G,EAAS7yE,GAELA,IAAansF,IACfE,EAAE6X,cAAc/X,MAAQmsF,KAEzB,IAEGlsF,GAA0BhN,EAAAA,EAAAA,KAAaiN,IAC3C++J,EAAS/+J,EAAE6X,cAAc/X,SACxB,IAEGw/J,GAAoBvsK,EAAAA,EAAAA,KAAY,KAC/BuN,EAAM1L,OAKP8pK,GAAgBn5E,EAAU3wF,QAAU8pK,EACtC1mB,EA7C0B,oDAiD5B4mB,EAAgB,CACdt+J,QACArL,QACAswF,cAZAyyD,EAASgnB,KAcV,CAAC1+J,EAAOilF,EAAWm5E,EAAcE,EAAiB3pK,IAE/CsqK,GAAsBxsK,EAAAA,EAAAA,KAAY,KACjCuN,EAAM1L,OAKXiqK,EAAc,CACZv+J,QACAorG,QACAz2G,QACAswF,YACA5+D,WAAW,IATXqxH,EAASinB,KAWV,CAAC3+J,EAAOu+J,EAAenzD,EAAOz2G,EAAOswF,EAAW05E,KAEnDvhK,EAAAA,EAAAA,KAAU,KACJ6gK,IAAqBW,EAAAA,GAAqBvmB,UAC5C/mF,GAAQ,KAET,CAAC2sG,EAAkB3sG,IAEtB,MAAM4tG,EAAiBhB,GAAiBt+J,EAAKs+J,KAC3Cl8G,IAAU08G,GAAuB18G,IAAU28G,EACvC38G,OACAxsD,GAGN,OACE9C,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLnS,KAAK,UACL0N,MAAM,cAENE,QAASA,IAAM0wD,IACflsD,UAAU,6BAA4BvS,UAEtCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,kBAEbtN,EAAAA,GAAAA,GAAA,MAAAD,SAAK+M,EAAKymB,EAAY,aAAe,kBAEvC3zB,EAAAA,GAAAA,IAAA,OAAKE,UAAU,uBAAsBC,SAAA,EACnCC,EAAAA,GAAAA,GAAC+lJ,GAAAA,EAAc,CACbv4I,SAAUq3I,EACV33I,MAAOJ,EAAK,eAEd9M,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRhB,MAAOQ,EACPM,SAAUy+J,EACVh/J,MAAOH,EAAKymB,EAAY,mBAAqB,aAC7C27B,MAAOA,IAAU08G,GAAuB18G,IAAU28G,EAAyB38G,OAAQxsD,IAEpF6wB,IACC3zB,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRhB,MAAO4rG,EACP9qG,SAAUb,EACVM,MAAOH,EAAK,qCAEd9M,EAAAA,GAAAA,GAAA,KAAGF,UAAU,OAAMC,SAAE+M,EAAK,wBAI7Bs/J,IACCpsK,EAAAA,GAAAA,GAAA,KAAGF,UAAU,QAAOC,SAAEqsK,IAGvBj6E,EAAU3wF,OAAS,IAClB5B,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAsBC,SAAE+M,EAAK,6BAA8BqlF,EAAU3wF,OAAQ,QAE3FxB,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kCAAiCC,SAC7CoyF,EAAU3+E,KAAK3T,IACdG,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAACE,UAAQ,EAAC1iC,UAAU,sBAAqBC,UAChDC,EAAAA,GAAAA,GAACiiD,GAAAA,EAAe,CAACtkB,OAAQ99B,iBAQrCG,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,QAA0B,IAAjBh5B,EAAM1L,OACfsM,QAASylB,EAAY44I,EAAsBD,EAC3ChsJ,SAAUwU,EACVpiB,UAAWihB,EAAYzmB,EAAK,8BAAgC,eAAe/M,SAE1E20B,GACC10B,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf5N,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,yBChMf++J,GAAettH,OAAO6K,KAAK0iH,EAAAA,IAAmB9qK,OAAS,EAkE7D,IAAe7C,EAAAA,EAAAA,KAhEe4tK,EAC5BhzJ,WACAga,aAAY,EACZzgB,UACA40H,iBACAlpE,cAEA,MAAM,sBAAEguG,EAAqB,qBAAEzB,IAAyBh/J,EAAAA,EAAAA,OACjD0gK,EAAkBC,IAAuBxgK,EAAAA,EAAAA,IAAmB,IAE7Dg/J,GAAiBvrK,EAAAA,EAAAA,KAAY,KACjC6sK,EAAsB,CACpBG,WAAYp5I,EAAY+4I,EAAAA,GAAkBM,gBAAkBN,EAAAA,GAAkBO,kBAE/E,CAACt5I,IAEEu5I,GAAiCxgK,EAAAA,EAAAA,IAAiB43B,IACtD,MAAM6oI,EAAc7oI,EAAI1iC,OAASirK,EAAiBjrK,OAElDkrK,EAAoBxoI,GAChB6oI,GACFhC,EAAqB,CAAE5mI,MAAO,QAIlC,OACEnkC,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CACTl9B,GAAG,UACHyN,MAAMs6H,EAAAA,GAAAA,GAAsB,SAAUF,GACtCwB,YAAamjC,GACbrvI,UAAWlqB,EAAQ/S,SAEjBitK,IACA,OAAQl6J,GACN,KAAKw5J,EAAAA,GAAkBW,gBACvB,KAAKX,EAAAA,GAAkBY,cACrB,OACEltK,EAAAA,GAAAA,GAAC4qK,GAAY,CACXr3I,UAAWA,EACXha,SAAUA,EACVu4E,kBAAmB26E,EACnB5B,0BAA2BiC,EAC3BhC,WAAYI,EACZ1sG,QAASA,IAGf,KAAK8tG,EAAAA,GAAkBM,gBACvB,KAAKN,EAAAA,GAAkBO,cACrB,OACE7sK,EAAAA,GAAAA,GAACurK,GAAY,CACXh4I,UAAWA,EACXha,SAAUyzJ,GAAgBzzJ,EAC1B44E,UAAWs6E,EACXjuG,QAASA,IAGf,QACE,c,wFC5CZ,MA+GA,IAAe7/D,EAAAA,EAAAA,KA/GqBwuK,EAClC5zJ,WACA6zJ,mBACAC,kBACAC,qBACA9uG,UACA+uG,gBACAzE,sBAEA,MAAM,sBAAE0E,IAA0BzhK,EAAAA,EAAAA,MAC5Be,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQyzC,IAGV,MAAMivG,GAA8BnhK,EAAAA,EAAAA,IAAgB,KAClDkhK,EAAsB,CAAEn4J,UAAU,QAG9B,uCACJq4J,EAAsC,gCACtCC,IACEC,EAAAA,GAAAA,GAAsCR,IAGxCvpJ,aAAcgqJ,EACd9pJ,qBAAsB+pJ,IACpB7pJ,EAAAA,GAAAA,IAA6BmpJ,OAAkB1qK,OAAWA,GAAW,IAEnE,uBACJqrK,EAAsB,6BAAEC,EAA4B,+BACpDC,EAA8B,mBAAEC,IAC9BC,EAAAA,GAAAA,GAAoBf,GAClBgB,EAAsBhB,GAAoBc,GAG9CrqJ,aAAcwqJ,EACdtqJ,qBAAsBuqJ,EACtB3yE,UAAW4yE,IACTtqJ,EAAAA,GAAAA,GACFqpJ,OAAoB5qK,OAAWA,EAAW,IAAI,EAAOkmB,GAAAA,GAAqBmP,EAAAA,KAG5E,OACEn4B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BH,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAe,eAAgBm4J,GAA2B,sBAAsBtuK,SAAA,CAC7F+M,EAAK8kB,QAAS5xB,EAAAA,GAAAA,GAAA,OAAKF,UAAU,wBAC9BE,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLnS,KAAK,UACL0N,MAAM,cACNE,QAAS0wD,EACTlsD,UAAU,sBACVxS,WAAWoW,EAAAA,GAAAA,GACTpJ,EAAK8kB,OAAS,MACdw8I,GAAuBthK,EAAK8kB,OAAS,gBACrC87I,EAAuCnkK,SAAWuD,EAAK8kB,OAAS,sBAElEwtB,gBAAiBuuH,EAAgC5tK,UAEjDC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,iBAEZugK,IAAqB7tK,EAAAA,GAAAA,GAAA,MAAIF,UAAWguK,EAAgB/tK,SAAE+M,EAAK,oBAC5D9M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,wBAAuBC,UACpCC,EAAAA,GAAAA,GAACwuK,GAAAA,EAAY,CAACC,SAAO,EAACxmE,YAAU,MAEjColE,EAAgBh4J,WACfrV,EAAAA,GAAAA,GAACqT,GAAAA,EAAY,CACXvT,UAAU,2BACVyT,UAAU,QACV6rC,gBAAiBtyC,EAAK8kB,MAAQ+7I,OAAkCjrK,EAAU3C,UAE1EC,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,oBAAoBlF,QAAS2/J,EAA4B1tK,SACrE+M,EAAK,uCAKdlN,EAAAA,GAAAA,IAAA,OACEE,WAAWoW,EAAAA,GAAAA,GACT,oBACAm4J,GAA2B,oBAC3BC,GACAvuK,SAAA,CAEDsuK,IACCruK,EAAAA,GAAAA,GAAC89B,GAAAA,EAAW,CAACmqE,YAAU,EAACnoG,UAAU,qBAAqB67F,UAAW4yE,KAEpEvuK,EAAAA,GAAAA,GAACi+B,GAAAA,EAAQ,CACPywI,WAAW,WACXn1J,SAAUA,EACV6zJ,iBAAkBgB,EAClBO,YAAU,EACV7F,gBAAiBA,EACjBuE,gBAAiBA,OAGpBU,IACC/tK,EAAAA,GAAAA,GAAC4uK,GAAAA,EAAU,CACTljK,OAAQ0hK,EACRG,cAAeA,EACfsB,qBAAsBZ,EACtBpiK,oBAAqBmiK,UCzB/B,IAAervK,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAQqlC,KAAM8nG,EAAat8F,WAAY48H,GAAqBztK,EAAOg7H,YAEnE,MAAO,CACLmS,cACAsgC,sBANcpgK,EAtF+BmvH,EACjDnyH,SACAa,SACAiiI,cACAsgC,mBACAljK,UACAC,0BAEA,MAAM,gBAAEkjK,IAAoBhjK,EAAAA,EAAAA,MAEtBe,GAAOC,EAAAA,EAAAA,KAEPiiK,GAA2BlnK,EAAAA,EAAAA,KAAQ,IAClC0mI,EAIEzvF,OAAO6K,KAAK4kF,GAAahwF,QAAO,CAAC9lC,EAAQojE,KAC9C,MAAM,gBAAEkvD,EAAe,cAAE+F,GAAkBvC,EAAYnpH,OAAOy2D,IAK9D,OAJIkvD,EAAgBn7G,SAAStjB,IAAWwkI,GAAelhH,SAAStjB,KAC9DmM,EAAO3F,KAAK+oE,GAGPpjE,IACN,IAVM,IAWR,CAACnM,EAAQiiI,KAELygC,EAAmBC,IAAwBhjK,EAAAA,EAAAA,IAAmB8iK,GAE/Dt3D,GAAU5vG,EAAAA,EAAAA,KAAQ,IACfgnK,GAAkBrxI,QAAQq+C,GAAaA,IAAainD,EAAAA,MACxDvvH,KAAKsoE,IACJ,MAAMR,EAASkzD,EAAcA,EAAY1yD,QAAYp5E,EAMrD,MAAO,CACLuK,MANYquE,GAAShwC,EAAAA,GAAAA,IAAuB,CAC5Cz2B,KAAMymE,EAAOpuE,MAAM2H,KACnBm3E,SAAU1Q,EAAOpuE,MAAM8+E,SACvB+pB,sBAAuBz6B,EAAO06B,oBAC3B,GAGHtpG,MAAOuyC,OAAO68B,QAEZ,IACP,CAACgzF,EAAkBtgC,IAEhB1oG,GAAenmC,EAAAA,EAAAA,KAAY,KAC/B,MAAMwvK,EAAcH,EAAyBvxI,QAAQ59B,IAAQovK,EAAkBp/I,SAAShwB,KAAK2T,IAAI6R,QAC3F+pJ,EAAWH,EAAkBxxI,QAAQ59B,IAAQmvK,EAAyBn/I,SAAShwB,KAAK2T,IAAI6R,QAE9F0pJ,EAAgB,CAAExiK,SAAQ4iK,cAAaC,aACvCxjK,MACC,CAACW,EAAQwiK,EAAiBC,EAA0BpjK,EAASqjK,IAEhE,GAAKzgC,GAAgBsgC,EAIrB,OACElvK,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJzB,OAAQA,EACRE,QAASA,EACTC,oBAAqBA,EACrBuB,QAAS04B,EACThmC,WAAWoW,EAAAA,GAAAA,GC9FgC,WD8FJ,UACvCksB,iBC/FyB,WDgGzBl1B,MAAOJ,EAAK,eAAe/M,SAAA,EAE3BC,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GClG6C,WDkGjB,iBAAiBnW,UAC3DC,EAAAA,GAAAA,GAACowH,GAAAA,EAAa,CACZ7iH,QAASmqG,EACTjqG,SAAUwhK,EACVzhK,SAAU0hK,OAGdlvK,EAAAA,GAAAA,GAAA,OAAKF,UCzG4E,WDyGnDC,UAC5BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACC,MAAM,UAAU9N,UAAU,wBAAwB+N,QAAM,EAACC,QAASg4B,EAAa/lC,SACpF+M,EAAK,kBAER9M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC7N,UAAU,wBAAwB+N,QAAM,EAACC,QAASlC,EAAQ7L,SAAE+M,EAAK,wBEnGzC,IAUrCuiK,GAAY,SAAZA,GAAY,OAAZA,EAAY,eAAZA,EAAY,kBAAZA,EAAY,mBAAZA,EAAY,eAAZA,EAAY,mBAAZA,EAAY,aAAZA,CAAY,EAAZA,IAAY,IASjB,MA8DA,IAAe1wK,EAAAA,EAAAA,KA9DqBi/H,EAClClyH,SACAa,SACAo/C,UACA//C,UACAC,0BAEA,MAAOyjK,EAAiBC,IAAsBrjK,EAAAA,EAAAA,IAASmjK,GAAaG,UAC9D,qBAAEC,EAAoB,sBAAEC,IAA0B3jK,EAAAA,EAAAA,MAElDe,GAAOC,EAAAA,EAAAA,KAEP4iK,GAAiB7nK,EAAAA,EAAAA,KAAQ,IAAM,CACnC,CAAEmF,MAAOH,EAAK,gBAAiB,GAAIJ,MAAO2iK,GAAaO,SACvD,CAAE3iK,MAAOH,EAAK,gBAAiB,GAAIJ,MAAO2iK,GAAaQ,WACvD,CAAE5iK,MAAOH,EAAK,gBAAiB,GAAIJ,MAAO2iK,GAAaS,YACvD,CAAE7iK,MAAOH,EAAK,eAAgB,GAAIJ,MAAO2iK,GAAaU,QACtD,CAAE9iK,MAAOH,EAAK,eAAgB,GAAIJ,MAAO2iK,GAAaW,WACtD,CAAE/iK,MAAOH,EAAK,mBAAoBJ,MAAO2iK,GAAaG,WACrD,CAAC1iK,IAEEg5B,GAAenmC,EAAAA,EAAAA,KAAY,KAC/B,IAAIy4J,EAEFA,EADEkX,IAAoBD,GAAaG,QACtBv8G,EAAAA,IAEAhgD,KAAKmI,MAAM6Q,KAAKC,MAAQ,KAAQ7G,OAAOiqJ,GAElD3jH,EACF+jH,EAAsB,CAAEnjK,SAAQo/C,UAASysG,eAEzCqX,EAAqB,CAAEljK,SAAQ6rJ,eAEjCxsJ,MACC,CAACW,EAAQ+iK,EAAiB1jK,EAAS+/C,IAEtC,OACE/rD,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJzB,OAAQA,EACRE,QAASA,EACTC,oBAAqBA,EACrBuB,QAAS04B,EACThmC,UAAU,SACVoN,MAAOJ,EAAK,iBAAiB/M,SAAA,EAE7BC,EAAAA,GAAAA,GAACqN,GAAAA,EAAU,CACTvN,UAAU,wBACVwN,KAAK,UACLC,QAASoiK,EACTliK,SAAU6hK,EACV9hK,SAAU+hK,KAEZ3vK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACC,MAAM,UAAU9N,UAAU,wBAAwB+N,QAAM,EAACC,QAASg4B,EAAa/lC,SACpF+M,EAAK,kBAER9M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC7N,UAAU,wBAAwB+N,QAAM,EAACC,QAASlC,EAAQ7L,SAAE+M,EAAK,qB,4BCvBjF,MAkMA,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAU4uK,cAAaC,0BACtB,MAAM/gK,GAAqBC,EAAAA,EAAAA,KAAyB/N,IAC9C,OAAEkL,EAAM,SAAE8C,GAAaF,GAAsB,CAAC,EAC9CF,EAAO1C,IAAU6jC,EAAAA,EAAAA,KAAW/uC,EAAQkL,GACpCwgD,EAAexgD,GAASygD,EAAAA,EAAAA,KAAmB3rD,EAAQkL,QAAU7J,EAC7DwpH,EAAU3/G,IAAU6/G,EAAAA,EAAAA,KAAU/qH,EAAQkL,GACtC2+C,EAAkB3+C,GAAS8nB,EAAAA,EAAAA,KAAqBhzB,EAAQkL,QAAU7J,EAElEytK,EAAclhK,GAChBmhK,EAAAA,EAAAA,IAA4BnhK,EAAM89C,EAAcjiD,QAAQohH,GAAUhhE,QAClExoD,EACE2tK,EAAa9jK,GAAU8C,GAAWihK,EAAAA,EAAAA,KAAiBjvK,EAAQkL,EAAQ8C,QAAY3M,EAC/E6tK,EAAkBzlK,SAASulK,GAAYG,gBAAkBH,GAAYI,eACrE/mH,EAAQn9C,GAAU8C,GAAWqwH,EAAAA,EAAAA,KAAYr+H,EAAQkL,EAAQ8C,QAAY3M,EACrEguK,EAAkB5lK,QACtBmE,GAAQI,IAAYs6C,EAAAA,EAAAA,IAAiB16C,EAAMy6C,EAAO6mH,EAAiBxjH,IAChEojH,GAAaO,iBAGZxnF,EAAiB+mF,EAAcA,EAAY/mF,eAC7CgnF,EAAsB,CAAEj2F,UAAWi2F,QAAwBxtK,EAEzD27F,EAAanV,GAAiBD,EAAAA,EAAAA,KAAiB5nF,EAAQ6nF,QAAkBxmF,EACzEovC,EAAoBvlC,GAASwlC,EAAAA,EAAAA,KAA4B1wC,EAAQkL,QAAU7J,EAEjF,MAAO,CACLiuK,uBAAwB7lK,QAAQyB,KAAWqkK,EAAAA,EAAAA,KAA6BvvK,EAAQkL,GAChFmkK,kBACAxlH,kBACA2lH,gBAAiB/+H,IAAqBg/H,EAAAA,EAAAA,KAAqBzvK,GAC3Dg9F,aACAz+D,sBAAsB0B,EAAAA,EAAAA,KAA2BjgC,GACjD+jK,4BAA6B/jK,EAAOqxC,SAASwrG,MAAMknB,4BACnDj2J,wBAlCcT,EAhM+BqiK,EACjDrlK,SACAukK,cACAC,sBACA7xE,aACAqyE,kBACAC,yBACAE,iBACA3lH,kBACAtrB,uBACAwlI,8BACAj2J,qBACAvD,cAEA,MAAM,aACJw+E,EAAY,iBACZ0b,EAAgB,YAChBt2C,EAAW,iBACX9tB,IACE31B,EAAAA,EAAAA,MAEEsd,GAAejgB,EAAAA,EAAAA,MACfo1F,GAAkBp1F,EAAAA,EAAAA,MAElB0D,GAAOC,EAAAA,EAAAA,MAEP,SAAE3N,IAAaC,EAAAA,EAAAA,MAEf2xK,GAAiB36I,EAAAA,EAAAA,GAAsBgoE,GACvC4yE,EAAsB5yE,GAAc2yE,EAEpCE,EAAUpmK,SAASmmK,GAAqBhpE,YAAcgpE,GAAqBjpE,eAC3EnB,EAAUoqE,GAAqBpqE,SAE9BsqE,EAAiBC,IAAYC,EAAAA,GAAAA,GAAYV,IAE9C5wH,aAAcqrD,EACdzrD,cAAe0rD,GACb5rD,MAGFk9C,QAAS4B,IACPtB,EAAAA,GAAAA,IAAwB,CAAEC,QAAS7zE,EAAcu0E,WA5CzB,IA4C4D5zF,YAAa0B,KAErGpB,EAAAA,EAAAA,KAAU,KACJoB,IAAWulK,GAAqB9xF,UAClCiL,EAAa,CACXlB,eAAgB+mF,EAAcA,EAAY/mF,eAAiB,CAAEjP,UAAWi2F,OAG3E,CAACxkK,EAAQukK,EAAa7lF,EAAc8lF,EAAqBe,IAE5D,MAAM34C,GAAe34H,EAAAA,EAAAA,KAAY,CAAC0+E,EAAqB0yC,EAAoBugD,KACpEniK,IAGLkvE,EAAU,IACLA,EACHkzF,qBAAqB,GAGnBV,GAAkBS,EACpBH,GAAiBK,IACfhiH,EAAY,CACVM,YAAa3gD,EAAoBkvE,UAAS0yC,WAAUygD,gBAEtD5lK,QAGF4jD,EAAY,CACVM,YAAa3gD,EACbkvE,UACA0yC,WACAq0C,4BAA6BA,GAA+B8L,IAE9DtlK,QAED,CAACuD,EAAoB0hK,EAAgBM,EAAiBvlK,EAASw5J,EAA6B8L,IAEzFx+D,GAAoB/yG,EAAAA,EAAAA,KAAY,KAChCsxK,IACFnrE,EAAiB,CAAEoB,aAAc+pE,EAAoBpxK,KACrD+L,OAED,CAACA,EAASqlK,EAAqBnrE,IAE5B2rE,GAAiB9xK,EAAAA,EAAAA,KAAY,KACjC,IAAKsxK,EAAqB,OAC1B,MAAM,UAAEh3F,GAAcg3F,EAChBS,EAAS7qE,EAAU,WAAa,cAChCvvF,EAAM,GAAGwxD,EAAAA,MAAkB4oG,KAAUz3F,KAC3C0/C,EAAAA,GAAAA,IAAoBriH,GACpBoqB,EAAiB,CACf9gC,QAASkM,EAAK,kBAEf,CAAC+5F,EAAS/5F,EAAMmkK,EAAqBvvI,IAclCwiB,GAAkEp8C,EAAAA,EAAAA,KAAQ,IACvE,EAAGsK,YAAW1G,OAAQy4C,MAC3BnkD,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLqN,QAAStgB,EACTc,KAAK,UACL0N,MAAM,cACN9N,UAAWqkD,EAAa,SAAW,GACnCr2C,QAASsE,EACTE,UAAU,eAAcvS,UAExBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,YAGd,CAAClO,IAwBJ,OACEQ,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJrN,WAAWoW,EAAAA,GAAAA,GAAe,kBAAmB2wF,GAAW,gBACxDn7F,OAAQA,EACRE,QAASA,EACTw8B,OA3BJ,WACE,MAAMoF,GAAgBt3B,EAAAA,GAAAA,GAAe,gBAAiBm1F,GAAuB,mBAE7E,OACEzrG,EAAAA,GAAAA,IAAA,OAAKE,UAAW0tC,EAAep3B,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAA,EACjEC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC0E,OAAK,EAACzE,MAAM,cAAc1N,KAAK,UAAUoS,UAAWxF,EAAK,SAAUgB,QAASlC,EAAQ7L,UAC1FC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAEbtN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SACzBkxK,GAAsBl9I,EAAAA,GAAAA,GAAWk9I,EAAoB/jK,MAAO,CAAC,QAAS,UAAYJ,EAAK,yBAE1F9M,EAAAA,GAAAA,GAACqT,GAAAA,EAAY,CACXvT,UAAU,2CACVwT,QAAS4wC,EACT3wC,UAAU,QAAOxT,UAEjBC,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,OAAOlF,QAAS2jK,EAAe1xK,SAAE+M,EAAK,sBAI7D,CAOYg/E,GAAe/rF,SAAA,CAEtBkxK,GAAqB9xF,UACpBv/E,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,OAAKgU,IAAKqV,EAAcvpB,UAAU,yBAAyBklD,SAAUomD,EAAoBrrG,UACvFH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,wCAAuCC,SAAA,EACpDC,EAAAA,GAAAA,GAAA,UAAQgU,IAAKwqF,EAAiB1+F,UAAU,kBACvCmxK,EAAoB9xF,SAAS3rE,KAAK6qE,IACjCr+E,EAAAA,GAAAA,GAACugG,GAAa,CACZliB,QAASA,EACTn+E,KAAM2mG,EAAU8qE,EAAAA,IAAmBC,EAAAA,IACnCrzE,oBAAqBA,EACrBzwF,QAAS4iK,IAAoB7pE,EAAUyxB,OAAe51H,EACtDs+F,SAAU3iB,EACVnzB,gBAAiBA,EACjBtrB,qBAAsBA,EACtB4+D,gBAAiBA,YAKzBx+F,EAAAA,GAAAA,GAAA,OAAKF,UAAU,iBAAgBC,UAC7BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLzN,KAAK,UACLkkD,OAAK,EACLx2C,MAAOsjK,EAAU,SAAW,UAC5BpjK,QAAS4kG,EAAkB3yG,SAjFd8xK,MACvB,IAAKZ,EAAqB,OAAOnkK,EAAK,WAEtC,MAAM4kK,EAAS7qE,EAAU,QAAU,UAEnC,OAAO/5F,EACLokK,EAAU,qBAAqBQ,SAAgB,kBAAkBA,SACjET,EAAoB99I,MACpB,MA2ES0+I,WAKP7xK,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,IAET0lH,SC5PP,IAAgB,KAAO,WAAW,KAAO,YCmFzC,IAAezyK,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACQ,CACL+8I,uBAAuB5zC,EAAAA,EAAAA,KAA4BnpG,MAHrCqN,EApDoCojK,EACtD3zB,oBACAC,wBACAxyI,cAEA,MAAM,eAAEy+E,IAAmBt+E,EAAAA,EAAAA,MACrBe,GAAOC,EAAAA,EAAAA,KAEP2xI,GAAkB52I,EAAAA,EAAAA,KAAQ,IACvBq2I,GAAmB3qI,KAAK3T,IAAOgvC,EAAAA,EAAAA,MAAYswC,SAASoqB,SAAS1pG,MACnE,CAACs+I,IAEE4zB,GAAsB3oK,EAAAA,EAAAA,OACpBuzF,QAASoB,IAAiCd,EAAAA,GAAAA,IAAwB,CACxEC,QAAS60E,EAAqB/nK,YAAa00I,IAGvCszB,GAAsB37I,EAAAA,EAAAA,GAAsBqoH,GAC5CuzB,EAA2BvzB,GAAmBszB,EAE9CE,GAAiB5lK,EAAAA,EAAAA,IAAiB+xE,IACtCgM,EAAe,CACbnB,eAAgB7K,EAAQ6K,oBAI5B,OACElpF,EAAAA,GAAAA,GAACmN,EAAAA,EAAK,CACJzB,OAAQZ,QAAQ4zI,GAChB5+I,UAAWyd,GAAOygB,KAClBpyB,QAASA,EACTqkE,gBAAc,EACd/iE,MAAOJ,EAAK,8BAA8B/M,UAE1CC,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAO40J,KAAM,iBAAkBn+J,IAAK+9J,EAAqBK,eAAa,EAAAryK,SAClGkyK,GAA0Bz+J,KAAK6+J,IAE5BryK,EAAAA,GAAAA,GAAC89I,GAAc,CAEbh+I,UAAWyd,GAAO+0J,QAClBj0E,WAAYg0E,EACZvkK,QAASokK,EACT3zE,oBAAqBR,EACrBz9E,QAAS89H,GALJi0B,EAAexyK,c,4BCLlC,MAAM0yK,GAAiE,CACrE7/H,SAAU,CACR1/B,KAAM,OACN/F,MAAO,eAETulK,KAAM,CACJx/J,KAAM,OACN/F,MAAO,YAkwBX,IAAetO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,SAAQ8C,eACjB,MAAMJ,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQkL,GAC1BkmK,GAAeC,EAAAA,EAAAA,KAAuBrxK,EAAQkL,GACpD,IAAK0C,GAAQwjK,EACX,MAAO,CAAC,EAEV,MAAM31H,GAAYruC,EAAAA,EAAAA,IAASQ,EAAKpP,IAC1BqwC,EAAO4M,GAAY3M,EAAAA,EAAAA,KAAW9uC,EAAQkL,QAAU7J,EAChDiwK,EAAgBziI,IAAQ0iI,EAAAA,EAAAA,IAAiB1iI,GACzC2iI,EAAexjK,IAAaksC,EAAAA,GAC5BnnB,GAAiBC,EAAAA,EAAAA,KAAqBhzB,EAAQkL,IAC5CA,OAAQumK,EAAezjK,SAAU0jK,IAAoB3jK,EAAAA,EAAAA,KAAyB/N,IAAW,CAAC,EAC5F2xK,EAAgBH,IAAiB3iI,KAAS1c,EAAAA,EAAAA,IAAcvkB,KAASykB,EAAAA,EAAAA,IAAYzkB,OAAWslB,EAAAA,EAAAA,IAAYtlB,GAEpGi9G,GAAWC,EAAAA,EAAAA,IAAY5/G,QAAsC7J,GAA5B0pH,EAAAA,EAAAA,KAAU/qH,EAAQkL,GACnD8jC,EAAeyM,GAAYxM,EAAAA,EAAAA,KAAmBjvC,EAAQkL,QAAU7J,EAChEqqD,EAAgBjQ,OAAiDp6C,GAArCsqD,EAAAA,EAAAA,KAAmB3rD,EAAQkL,GACvDs9G,EAAWx5E,GAAgB0c,EAC3BkmH,GAAUC,EAAAA,EAAAA,KAAc7xK,EAAQkL,GAEhCm9C,GAAQg2E,EAAAA,EAAAA,KAAYr+H,EAAQkL,EAAQ8C,GACpC8jK,EAAiBlkK,EAAKg7C,UAC1Bh7C,EAAKq9G,aAAc8mD,EAAAA,EAAAA,IAAkBnkK,EAAM,kBAAmB29C,EAAAA,EAAAA,IAAiB39C,EAAM,iBAEjFokK,EAAe3pH,IAAS4pH,EAAAA,EAAAA,IAAkBrkK,EAAMy6C,GAChD6pH,GAAYC,EAAAA,EAAAA,KAAgBnyK,EAAQkL,GAEpC8nJ,GAAeof,EAAAA,EAAAA,KAAuBpyK,EAAQkL,IAAWs9G,GAAU6pD,sBAGnEC,GADgBC,EAAAA,EAAAA,IAAiBrnK,EAAQ8C,EAAUhO,EAAO8yB,gBAC5Bic,EAAAA,EAAAA,KAAW/uC,EAAQ49C,OAAO5vC,SAAa3M,EACrEsvC,GAAkBC,EAAAA,EAAAA,KAA0B5wC,GAElD,MAAO,CACL4N,OACAkP,SAAS89G,EAAAA,GAAAA,IAAehtH,GAAMitH,EAAAA,EAAAA,KAAqB76H,IAAS86H,EAAAA,EAAAA,KAAsB96H,EAAQ4N,EAAKpP,KAC/Fi9C,YACA+2H,QAAS5kK,GAAMg7C,UAAY4oH,EAC3B5oH,QAASh7C,GAAMg7C,QACf6pH,kBAAmB7kK,GAAM6kK,kBACzBnB,gBACAoB,eAAeC,EAAAA,EAAAA,IAAiB/kK,GAChC+jK,gBACAC,UACAnpD,cAAeh/G,QAAQiiD,GAAcg9D,cACrCkqD,YAAa/nD,EAAU77E,GAAcsvB,SAASu0G,cAAWxxK,EACzDyxK,oBAAqBjoD,EAAU77E,GAAcsvB,SAASy0G,sBAAmB1xK,EACzE2xK,iBAAiBvlK,EAAAA,EAAAA,KAAezN,GAAQgzK,iBACnCvB,IAAkBvmK,GAAUwmK,IAAoB1jK,EACrD8jK,iBACAE,eACAE,YACAe,oBAAoBC,EAAAA,EAAAA,KAAyBlzK,GAC7CgzJ,eACApkB,UAAW5/F,GAAc4/F,UACzBukC,MAAO1pK,QAAQohH,GACf93F,iBACAu/I,cACA/T,gBAAiBvvH,GAAcuvH,gBAC/B5tH,qBA5DctjC,EAjsBmC+lK,EACrDloK,SACA8C,WACA3D,SACAgpK,mBACA17F,SACAzlD,YACA0gJ,cACAE,sBACAQ,mBACAd,UACA5pH,UACA6pH,oBACAO,kBACAO,cACAC,eACA7B,gBACA8B,YACAC,UACAC,UACAC,oBACAC,sBACAC,gBACAC,sBACAC,WACAC,oBACAC,qBACAtmK,OACA6tC,YACA3+B,UACA41J,gBACAd,UACAnpD,gBACA6oD,gBACAQ,iBACAE,eACAE,YACAe,qBACAjgB,eACApkB,YACAukC,QACApgJ,iBACAu/I,cACA6B,oBACA5V,kBACA5tH,kBACAyjI,qBACAC,sBACAC,qBACAC,iBACAC,qBACAjqK,WACAC,2BAEA,MAAM,qBACJ4jK,GAAoB,uBACpBqG,GAAsB,eACtBC,GAAc,WACdC,GAAU,8BACVC,GAA6B,gBAC7BC,GAAe,eACfC,GAAc,qBACdC,GAAoB,uBACpBC,GAAsB,4BACtBC,GAA2B,iBAC3BC,GAAgB,2BAChBC,GAA0B,oBAC1BC,GAAmB,cACnBC,GAAa,mBACbC,GAAkB,qBAClBC,GAAoB,mBACpBC,GAAkB,SAClBrsI,GAAQ,QACRvU,GAAO,iBACP6gJ,GAAgB,uBAChBC,GAAsB,UACtBv2H,GAAS,YACTD,GAAW,uBACXy2H,GAAsB,eACtBC,GAAc,eACd/4D,GAAc,iBACdx8E,KACE31B,EAAAA,EAAAA,MAEEynC,IAAUzmC,EAAAA,EAAAA,KACVD,IAAO2mC,EAAAA,GAAAA,MAEP,SAAEr0C,KAAaC,EAAAA,EAAAA,OACd8kD,GAAY+yH,KAAiBhrK,EAAAA,EAAAA,KAAS,IACtCirK,GAAiBC,KAAsBlrK,EAAAA,EAAAA,KAAS,IAChD0E,GAAmBymK,KAAwBnrK,EAAAA,EAAAA,KAAS,IACpDuwH,GAAiB66C,KAAsBprK,EAAAA,EAAAA,KAAS,IAChDgxH,GAAuBC,GAAqBC,KAAyBn+H,EAAAA,EAAAA,MACtE,EAAEsd,GAAC,EAAEsG,IAAMm2D,GAEjB/0D,EAAAA,GAAAA,GAA4BvY,EAAQG,QAAqBnJ,GAAW,GACpE,MAAM60K,IAAuBlrI,EAAAA,GAAAA,KACzBgoI,IAAmBpqH,SAAkBvnD,EAnGL,KAsG9B80K,IAAwB1vK,EAAAA,EAAAA,KAAQ,KACpC,GAAK83J,EAGL,OAAO7gH,OAAOyK,OAAOo2G,GAAiBtuD,MAAMxmG,WAC3C,CAAC80J,IAEEjjC,IAAiBrwH,EAAAA,EAAAA,IAAgB,KACrCgrK,IAAmB,GACnB1rK,QAGIS,IAAeC,EAAAA,EAAAA,IAAgB,KAC/B0lC,EACFqkI,MAEAa,IAAc,GACdh5D,GAAe,CAAE3xG,SAAQmG,WAAY,MAEvC9G,QAGI0nH,IAAehnH,EAAAA,EAAAA,IAAgB,KAC/B0lC,GACFqkI,KACAzqK,MAEAyrK,IAAqB,GAEvBH,IAAc,MAGVO,IAAYnrK,EAAAA,EAAAA,IAAgB,KAChC4qK,IAAc,GACdtrK,QAGI8rK,IAAsBprK,EAAAA,EAAAA,IAAgB,KAC1CqqK,GAAmB,CAAEpqK,SAAQ8C,aAC7B+nK,IAAoB9C,GACpBmD,QAGI3mK,IAAmBxE,EAAAA,EAAAA,IAAgB,KACvC+qK,IAAqB,GACrBzrK,QAGI+rK,IAAiBrrK,EAAAA,EAAAA,IAAgB,KACjC0lC,EACFqkI,KAEAN,GAAe,CAAE6B,QAAS,cAIxBC,IAAmBvrK,EAAAA,EAAAA,IAAgB,KACnC0lC,EACFqkI,KAEAL,GAAW,CAAEzpK,cAIXurK,IAAoBxrK,EAAAA,EAAAA,IAAgB,KACpC0lC,EACFqkI,KAEA5G,GAAqB,CAAEljK,SAAQ4R,SAAS,IAE1Cs5J,QAGIM,IAAkBzrK,EAAAA,EAAAA,IAAgB,KAClC0lC,GACFqkI,KACAoB,OAEAt6C,KACAm6C,IAAmB,IAErBJ,IAAc,MAGVc,IAAyB1rK,EAAAA,EAAAA,IAAgB,KACzC0lC,EACFqkI,MAEAO,GAAqB,CAAErqK,WACvB6qK,IAAoB9C,IAEtBmD,QAGIQ,IAAkB3rK,EAAAA,EAAAA,IAAgB,KAClC0lC,EACFqkI,MAEAS,GAAiB,CAAErkJ,OAAO,IAC1B2kJ,IAAoB9C,IAEtBmD,QAGIS,IAAuB5rK,EAAAA,EAAAA,IAAgB,KACvC0lC,EACFqkI,MAEAQ,GAAmB,CAAEtqK,SAAQo/C,QAAStmC,OAAOhW,KAC7C+nK,IAAoB9C,IAEtBmD,QAGIU,IAA0B7rK,EAAAA,EAAAA,IAAgB,KAC9Ck+B,GAAS,CAAE3qC,QAAI6C,IACfs0K,GAAuB,CAAEzqK,SAAQ0gE,WAAW,IAC5CwqG,QAGIW,IAA4B9rK,EAAAA,EAAAA,IAAgB,KAC5C0lC,EACFqkI,KACSd,EAETW,GAAgB,CACd3pK,WAGF0pK,GAA8B,CAC5B1pK,WAGJkrK,QAGIY,IAAwB/rK,EAAAA,EAAAA,IAAgB,KAC5C6pK,GAAe,CAAEt2K,GAAI0M,IACrBkrK,QAGIa,IAAkBhsK,EAAAA,EAAAA,IAAgB,KAClCkrK,IAAyBvoK,EAC3ByyB,GAAiB,CAAE9gC,QAASkM,GAAK,wBAGnC4pK,GAAc,CAAE6B,UAAWhsK,IACvBylC,EACFqkI,KAEAK,GAAc,CAAE6B,UAAWhsK,IAE7BkrK,SAGIe,IAAwBlsK,EAAAA,EAAAA,IAAgB,KACxC0lC,EACFqkI,KAEAD,GAAqB,CAAEz4I,OAAQpxB,IAEjCkrK,QAGIgB,IAAkBnsK,EAAAA,EAAAA,IAAgB,KAClC0lC,EACFqkI,KAEAV,IAEF8B,QAGIiB,IAAkBpsK,EAAAA,EAAAA,IAAgB,KAClC0lC,EACFqkI,KAEAC,GAA4B,CAAE34I,OAAQpxB,EAAQjF,SAAS,IAEzDmwK,QAGIkB,IAAarsK,EAAAA,EAAAA,IAAgB,KAC7B0lC,EACFqkI,KAEAC,GAA4B,CAAE34I,OAAQpxB,IAExCkrK,QAGI/+C,IAAepsH,EAAAA,EAAAA,IAAgB,KACnCspK,KACA6B,QAGImB,IAAwBtsK,EAAAA,EAAAA,IAAgB,KAC5CiqK,KACAa,IAAoB9C,GACpBmD,QAGIoB,IAA0BvsK,EAAAA,EAAAA,IAAgB,KAC9CkqK,GAA2B,CAAEjqK,WAC7B6qK,IAAoB9C,GACpBmD,QAGIqB,IAAmBxsK,EAAAA,EAAAA,IAAgB,KACnC0lC,EACFqkI,KACSlB,GACTsB,GAAoB,CAAElqK,WACtB6qK,IAAoB9C,IAEpB2C,GAAe,CAAE1qK,WAEnBkrK,QAGIsB,IAA2BzsK,EAAAA,EAAAA,IAAgB,KAC/CyqK,GAAuB,CAAExqK,SAAQ0gE,WAAW,IAC5CwqG,QAGIuB,IAAuB1sK,EAAAA,EAAAA,IAAgB,KACvC0lC,EACFqkI,KAEAP,KAEF2B,QAGIwB,IAAuB3sK,EAAAA,EAAAA,IAAgB,KAC3CupK,KACA4B,QAGIyB,IAAc5sK,EAAAA,EAAAA,IAAgB,KAC9B0lC,EACFqkI,KAEA71H,GAAU,CAAE7iB,OAAQpxB,IAEtBkrK,QAGI0B,IAAgB7sK,EAAAA,EAAAA,IAAgB,KAChC0lC,EACFqkI,KAEA91H,GAAY,CAAE5iB,OAAQpxB,IAExBkrK,QAGI2B,IAA2B9sK,EAAAA,EAAAA,IAAgB,KAC/Ck+B,GAAS,CAAE3qC,GAAI41K,IACfgC,SAGFntK,EAAAA,EAAAA,IAAUu0C,GAAAA,GAAkB,IAE5B,MAAMw6H,IAAavxK,EAAAA,EAAAA,KAAQ,KACzB,MAAMwxK,EAAiBrF,GAAazgK,KAAI,EAAGokK,cACzC,MAAM2B,EAAMhH,GAAYqF,GACxB,GAAK2B,EAOL,OACEv5K,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAEPT,KAAMumK,EAAIvmK,KAEVlF,QAVgBwW,KAClByxJ,GAAe,CAAE6B,QAAS,IAAIA,MAC9BH,MAQuB13K,SAEpByzC,GAAQ+lI,EAAItsK,QALR2qK,MAUL4B,EAAoBvF,GAAa/nE,MAAK,EAAG0rE,aAA0B,YAAZA,IAmB7D,MAAO,IAAI0B,GAAkB,GAjBP9E,IACpBx0K,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,iBAELlF,QAASA,KACH0rK,IAAsBrF,EACxB4B,GAAe,CAAE6B,QAAS,aAE1B3hJ,GAAQ,CAAE3e,IAAK68J,GAAuB3gI,GAAQ,6BAEhDikI,MACA13K,SAEDyzC,GAAQ,uBAImC/V,OAAO3yB,WACtD,CAACmpK,EAAazgI,GAAS2gI,EAAqBK,IAEzCiF,IAAc3xK,EAAAA,EAAAA,KAAQ,KAC1B,GAAKmH,EAEL,OACSukC,GADLmgI,EACa,SAGb72H,EACa,iBAGbi3H,EACa,0BAGbxgJ,EACa,eAGF,sBACd,CAACwgJ,EAAe9kK,EAAMskB,EAAWupB,EAAW62H,EAAangI,KAE5D,OACExzC,EAAAA,GAAAA,GAACsuG,GAAAA,EAAM,CAAAvuG,UACLH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,sBAAqBC,SAAA,EAClCH,EAAAA,GAAAA,IAACkgB,GAAAA,EAAI,CACHpU,OAAQy4C,GACR5wC,UAAU,QACV1N,MAAO,SAAS0W,aAAYsG,QAC5BjX,QAAS6rK,GACTN,gBAAiBA,GAAgBp3K,SAAA,CAEhCX,IAAY01K,IACX90K,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,SACLlF,QAAS4qH,GAAa34H,SAErByzC,GAAQ,YAGZmhI,GAAoBxB,IACnBvzK,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,WACLlF,QAASkqK,GAAuBj4K,SAE/ByzC,GAAQ,6BAEXxzC,EAAAA,GAAAA,GAAC05K,GAAAA,EAAa,OAGjBjE,IACCz1K,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,UACLlF,QAASsrK,GAAyBr5K,SAEjC+M,GAAK,wBAGTyqK,KACCv3K,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,OACLlF,QAAS4pK,GAAoB33K,SAElByzC,GAAVqgI,EAAkB,yBAAoC,4BAG1DN,IAAcF,IACbrzK,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,OACLlF,QAASmqK,GAAgBl4K,SAExByzC,GAAQ,UAGZ6/H,IACCrzK,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,OACLlF,QAASoqK,GAAqBn4K,SAE7ByzC,GAAQ,0BAGZp0C,KAAau1K,GAAoB1qH,IAAY4pH,IAC5C7zK,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,SACLlF,QAASqqK,GAAwBp4K,SAEhCyzC,GAAQ,8BAGZmhI,GAAoB7pK,QAAQsqK,KAC3Bx1K,EAAAA,GAAAA,IAAC6T,GAAAA,EAAQ,CACPT,KAAK,OACLlF,QAAS4nK,EAAoB31K,SAAA,CAEhByzC,GAAZjgB,EAAoB,oBAA+B,mBACpDvzB,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SAAEq1K,OAGjCT,IAAqBd,IAAYC,IAChC9zK,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,UACLlF,QAASmrK,GAAqBl5K,SAE7ByzC,GAAQ,gCAGZkhI,GAAoBE,IACnB50K,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,OACLlF,QAAS6pK,GAAe53K,SAEvByzC,GAAQ,cAGZkhI,GAAoBG,IACnB70K,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAMugB,EAAY,UAAY,QAC9BzlB,QAAS2qK,GAAgB14K,SAExByzC,GAAQjgB,EAAY,qBAAuB,sBAG/CiiJ,IAAsBL,IACrBn1K,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,gBACLlF,QAASgrK,GAAiB/4K,SAEzByzC,GAAQjgB,EAAY,2BAA6B,4BAGrDo/I,IACC3yK,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,WACLlF,QAAS0qK,GAAsBz4K,SAE9ByzC,GAAQ,gBAGZp0C,IAAY21K,IACX/0K,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,QACLlF,QAAS6qK,GAAW54K,SAEnByzC,GAAQ,UAGZuhI,IACC/0K,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,iBACLlF,QAAS4qK,GAAgB34K,SAExByzC,GAAQ,eAGZwhI,IAAY72J,GACXne,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,SACLlF,QAASgqK,GAAkB/3K,SAE1ByzC,GAAQ,kBAIT5zC,EAAAA,GAAAA,IAAC6T,GAAAA,EAAQ,CACPT,KAAK,OACLlF,QAASiqK,GAAgBh4K,SAAA,CAExByzC,GAAQ,aAAa,WAK1B8hI,GAAqBC,KACrBv1K,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,aACLlF,QAASsqK,GAA0Br4K,SAElCyzC,GAAQ+hI,EAAqB,gBAAkB,uBAGnDzrD,IACC9pH,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAMugB,EAAY,WAAa,UAC/BzlB,QAASuqK,GAAsBt4K,SAE9ByzC,GAAQjgB,EAAY,iBAAmB,+BAG1CohJ,IACA30K,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,SACLlF,QAASkrK,GAAqBj5K,SAE7ByzC,GAAQ,0BAGZ2hI,IACCn1K,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,gBACLlF,QAASgrK,GAAiB/4K,SAEzByzC,GAAQ,YAGZyhI,IACCj1K,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,QACLlF,QAAS8qK,GAAsB74K,SAE9ByzC,GAAQ,gBAGZjgB,GAAa2hJ,IACZl1K,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,cACLlF,QAAS+qK,GAAwB94K,SAEhCyzC,GAAQ,4BAGZ6gH,IACCr0J,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,WACLlF,QAASirK,GAAyBh5K,SAEjCyzC,GAAQ,2BAGZw/H,IACChzK,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,OACLlF,QAASzB,GAAatM,SAErByzC,GAAQ,uBAGZ6lI,GACApG,IACCjzK,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,OACLlF,QAASwqK,GAAgBv4K,SAExByzC,GAAQ,sBAGZghI,IACCx0K,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAMi9H,EAAY,OAAS,YAC3BniI,QAASmiI,EAAY4nC,GAAmBqB,GAAYn5K,SAEvCyzC,GAAZy8F,EAAoB,aAAwB,cAGhDnzF,IAAc1oB,IAAmBogJ,IAChCx0K,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAMi9H,EAAY,OAAS,YAC3BniI,QAASmiI,EAAYkpC,GAAgBD,GAAYn5K,SAEpCyzC,GAAZy8F,EAAoB,UAAqB,eAG7ColC,IACCz1K,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAC05K,GAAAA,EAAa,KACd15K,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPL,aAAW,EACXJ,KAAK,SACLlF,QAASwlH,GAAavzH,SAErB05K,WAKRxqK,IACCjP,EAAAA,GAAAA,GAAC25K,GAAAA,EAAe,CACdjuK,OAAQkF,GACRhF,QAASkF,GACT7B,KAAM0kK,GAAe1kK,EACrB2qK,cAAe9uK,QAAQ6oK,KAG1BqB,GAAW93C,IAAyBjuH,GAAMpP,KACzCG,EAAAA,GAAAA,GAAC49H,GAAAA,EAAa,CACZlyH,OAAQ+wH,GACR7wH,QAAS+wH,GACT9wH,oBAAqBuxH,GACrB7wH,OAAQ0C,EAAKpP,c,wCCj0BzB,UAAgB,KAAO,WAAW,OAAS,WAAW,KAAO,WAAW,OAAS,WAAW,KAAO,WAAW,SAAW,YCmFzH,IAAelB,EAAAA,EAAAA,KArDYk7K,EACzBtgK,WACA3Y,UACAk5K,aACAC,cACAC,iBACA71I,QACArkC,YACAgO,cAEA,MAAMhB,GAAOC,EAAAA,EAAAA,KACPktK,EAAqBr5K,EAAQu/B,aAAa+5I,eAE1CpmJ,EAAOkmJ,EAAiBD,EAAcD,EAEtCjyD,EAAamyD,GAAkBF,GAAaK,EAAAA,GAAAA,IAAqBrtK,EAAMlM,EAAQ2L,OAAQutK,QAAcp3K,EAErG4hB,GAAchY,EAAAA,EAAAA,IAAgB,KAClCwB,EAAQlN,MAGV,OACEhB,EAAAA,GAAAA,IAAA,OACE6pC,KAAK,SACLD,SAAU,EACV1pC,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAOygB,KAAMzkB,GAAYgE,GAAO2/B,OAAQp9C,GAClEgO,QAASwW,EAAYvkB,SAAA,EAErBC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CACL/zB,UAAWyd,GAAO9b,OAClBqyB,KAAMA,EACNjf,KAAMolK,EACN/5K,KAAK,YAEPN,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOoZ,KAAK52B,SAAA,EAC1BH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAO68J,OAAOr6K,SAAA,CAC1B+zB,IAAQ9zB,EAAAA,GAAAA,GAACgrD,GAAAA,EAAa,CAACl3B,KAAMA,EAAM07E,iBAAe,KAAQyqE,GAC5Dj6K,EAAAA,GAAAA,GAACq6K,GAAAA,EAAe,CAACv6K,UAAWyd,GAAO+8J,KAAM15K,QAASA,QAEpDhB,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOoV,SAAUvc,IAAI,OAAMrW,SAAA,CACxC8nH,IACCjoH,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,cAAaC,UAAEg0B,EAAAA,GAAAA,GAAW8zF,MAC1C7nH,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAC,UAG5BC,EAAAA,GAAAA,GAACu6K,GAAAA,EAAc,CAAC35K,QAASA,EAASu4H,UAAWh1F,EAAOq2I,eAhDtC,kBC5BxB,IAAgB,KAAO,WAAW,OAAS,WAAW,OAAS,WAAW,OAAS,WAAW,MAAQ,WAAW,OAAS,WAAW,QAAU,WAAW,aAAe,WAAW,mBAAqB,WAAW,SAAW,WAAW,eAAiB,WAAW,QAAU,WAAW,YAAc,WAAW,UAAY,WAAW,UAAY,WAAW,KAAO,WAAW,WAAa,WAAW,eAAiB,WAAW,KAAO,WAAW,YAAc,WAAW,WAAa,WAAW,aAAe,WAAW,OAAS,WAAW,mBAAmB,WAAW,gBAAkB,WAAW,QAAU,WAAW,iBAAmB,WAAW,iBAAmB,WAAW,mBAAqB,WAAW,OAAS,YCsFxsBC,GAA4B,CAChC5W,cAAc,EACdC,WAAY,iBACZ4W,SAAU,qBAINC,GAAyB,qBAEzBC,IAAwBxuJ,EAAAA,GAAAA,KAAUixC,GAAOA,KAAM,KAAK,GAsqB1D,IAAe1+D,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM8N,GAAqBC,EAAAA,EAAAA,KAAyB/N,GACpD,IAAK8N,EACH,MAAO,CAAC,EAEV,MAAM,OAAE5C,EAAM,SAAE8C,GAAaF,EAEvBF,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQkL,GAChC,IAAK0C,EACH,MAAO,CAAC,EAGV,MAAM,eACJ4rK,EAAc,SAAEC,EAAQ,QAAEhlD,EAAO,cAAEilD,EAAa,UAAEC,EAAS,KAAE95K,IAC3D+5K,EAAAA,EAAAA,KAA0B55K,IAAW,CAAC,GACpC,WAAEg7G,EAAU,SAAE/mF,EAAU6O,MAAO+2I,GAAoBplD,GAAW,CAAC,EAE/D3hG,EAAgB9yB,EAAO8yB,cACvB+2B,GAAkB72B,EAAAA,EAAAA,KAAqBhzB,EAAQkL,GAC/CqtK,GAAgBhG,EAAAA,EAAAA,IAAiBrnK,EAAQ8C,EAAU8kB,GAEnDgnJ,EAAYjwH,IAAoB0uH,EAAgBv4K,EAAO+5K,mBAAmBl9B,WAAQx7I,EAIxF,MAAO,CACLuM,OACAosK,eAJoBhxH,EAAAA,EAAAA,KAAuBhpD,EAAQkL,GAKnDsuK,iBACAx+D,aACAhtG,WACAimB,WACAgmJ,sBAAuBxwK,SAAQgE,EAAAA,EAAAA,KAAezN,GAAQ22D,2BACtDmjH,YACAL,WACAl7I,sBAAsB0B,EAAAA,EAAAA,KAA2BjgC,GACjD6pD,kBACA6vH,gBACAQ,eAAgBP,EAChB7mJ,gBACAqnJ,WAAYt6K,EACZg6K,qBA1CcxsK,EApqBiB+sK,EACnCliK,WACAtK,OACAosK,gBACAhsK,WACAwrK,iBACAM,YACAL,WACAz+D,aACA6+D,kBACA5lJ,WACAgmJ,wBACA17I,uBACAsrB,kBACA6vH,gBACAQ,iBACAC,aAAa,OACbrnJ,oBAEA,MAAM,mBACJunJ,EAAkB,kBAClBC,EAAiB,oBACjBC,EAAmB,aACnBtpJ,EAAY,kBACZupJ,EAAiB,oBACjBC,EAAmB,iBACnBn6I,EAAgB,sBAChBo6I,IACEhwK,EAAAA,EAAAA,MAEEiI,GAAM5K,EAAAA,EAAAA,MACN2vD,GAAW3vD,EAAAA,EAAAA,MACXigB,GAAejgB,EAAAA,EAAAA,MACf4yK,GAAwB5yK,EAAAA,EAAAA,KAAO,IAE/B,SAAEhK,IAAaC,EAAAA,EAAAA,MACfm0C,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,MAENtP,EAAO2e,IAAY52C,EAAAA,EAAAA,IAAS2uK,GAAkB,KAC9CoB,EAAcC,IAAmBhwK,EAAAA,EAAAA,IAAS,GAC3CiwK,EAAgB7mJ,GAAY2mJ,EAAe,EAC3CG,EAAgB9mJ,GAAY2mJ,EAAe3mJ,EAAS9zB,OAAS,GAE5D66K,EAAeC,IAAoBpwK,EAAAA,EAAAA,KAAUqN,GAC9CgjK,IAAiBnzK,EAAAA,EAAAA,MACjBozK,IAA0BpzK,EAAAA,EAAAA,KAAO,IAEhCqzK,GAAWC,GAAaC,KAAe19K,EAAAA,EAAAA,MACvC29K,GAAcC,KAAmB3wK,EAAAA,EAAAA,KAAS,IAC1CwoB,GAAWk0F,KAAgB18G,EAAAA,EAAAA,KAAS,IC9ItC,SACL4wK,EAAiC7kG,GAEjC,MAAM8kG,GAAqBzwK,EAAAA,EAAAA,IAAiBuiB,IACnBiuJ,EAAKxrE,OAAOt9F,GAC1BA,EAAIzK,UAAYyK,EAAIzK,QAAQqwB,SAAS/K,EAAMhiB,WAGhCorE,EAASppD,OAG/BvkB,EAAAA,EAAAA,KAAU,KACR1I,SAASkU,iBAAiB,QAASinK,GAC5B,KACLn7K,SAASmU,oBAAoB,QAASgnK,MAEvC,CAACA,GACN,CDqIEC,CAAgB,CAAChpK,IANU1H,EAAAA,EAAAA,IAAiBuiB,IACtC2tJ,GAAwBjzK,SAEvBslB,EAAMhiB,OAAuB8f,QAAQ,WAC1CgwJ,SAIF,MAAMM,GAAsBnyK,QAASq5B,GAAS7O,GAAaimJ,GACrD2B,GAAa3B,IAAmBp3I,EAChCg5I,GAAkBryK,QAAQq5B,GAAS7O,IAAaA,EAAS9zB,SAAWkzB,KAAcwoJ,IAGlFE,GAAqB7jK,IAAaqjK,KAAiBx9K,KAAcq9K,IADrB,YAAfjB,GAA2C,aAAfA,IAE1D1wK,QACDmyK,IAJ0BE,IAAmBD,IAIG/B,GAG9CkC,GAAevyK,QAASq5B,IAAU+4I,IAAepC,GACjDwC,GAAsC,SAAf9B,GAAyB1wK,QAAQwqB,GAAU9zB,QAElEw5B,IAAc1uB,EAAAA,EAAAA,IAAgB,KAClCuvK,OAGI0B,IAAajxK,EAAAA,EAAAA,IAAgB,MACjCqgC,EAAAA,EAAAA,KAAe,KACbosB,EAASxvD,SAASmwD,cAIhB8jH,IAAYlxK,EAAAA,EAAAA,IAAgB,KAChCysD,EAASxvD,SAASk0K,WAIpBnzK,EAAAA,EAAAA,KAAU,KACR,MAAM,eAAEozK,GAAmB/yK,OAC3B,IAAK+yK,EACH,OAGF,MAAMC,EAAS/7K,SAASo4B,eAAe,QACjCpkB,EAAeA,KACnB,MAAM,cAAEmmH,GAAkBn6H,SAC1B,GAAIm6H,GAAkBA,IAAkBhjE,EAASxvD,QAAU,CACzD,MAAM,QAAEq0K,EAAO,OAAE/zK,GAAW6zK,GAE5BvlK,EAAAA,EAAAA,KAAgB,KACdwlK,EAAO93K,MAAM6lB,UAAY,cAAckyJ,OACvCD,EAAO93K,MAAMgE,OAAS,GAAGA,MACzBjI,SAAS4kD,gBAAgBjsB,UAAYqjJ,IAEzC,MACEzlK,EAAAA,EAAAA,KAAgB,KACdwlK,EAAO93K,MAAM6lB,UAAY,GACzBiyJ,EAAO93K,MAAMgE,OAAS,OAO5B,OAFA6zK,EAAe5nK,iBAAiB,SAAUF,GAEnC,KACL8nK,EAAe3nK,oBAAoB,SAAUH,MAE9C,KAGHtL,EAAAA,EAAAA,KAAU,KACR4xK,GAAiB,KAChB,CAAChB,KAGJt/J,EAAAA,EAAAA,KAAgB,KACTjF,EAAAA,IAEL4uC,MAAM9pC,KAAK7Z,SAAS6D,iBAAmC,UAAU+R,SAAS0xB,IACxEA,EAAMhpB,SAAWpV,QAAQyO,GAAY2vB,IAAU6vB,EAASxvD,cAEzD,CAACgQ,KAGJjP,EAAAA,EAAAA,KAAU,KACHiP,GAOH+iK,GAAiB,GACjBjyK,aAAakyK,GAAehzK,WAP5BwvD,EAASxvD,QAASk0K,OAClBZ,IAAgB,GAChBX,EAAgB,GAChBp5H,EAAS,IACTy5H,GAAehzK,QAAUoB,OAAOC,YAAW,IAAM0xK,GAAiB,IAlJnD,QAuJhB,CAAC/iK,KAEJjP,EAAAA,EAAAA,KAAU,KACHuwK,GAAmB5rK,GAAMpP,KAC9BijD,EAAS+3H,GACTa,EAAmB,CAAEnvK,OAAQ0C,EAAKpP,GAAIwP,WAAUm1D,OAAQ,CAAEq2G,oBAAgBn4K,KAC1EkmH,IAAa,IAEbi1D,EAAAA,EAAAA,KAAoB,KAClB,MAAM30I,EAAQ6vB,EAASxvD,QAClB2/B,KACL0V,EAAAA,GAAAA,GAAqB1V,GAAO,GAAM,GAClCwzI,YAED,CAACztK,GAAMpP,GAAIg7K,EAAgBxrK,KAE9Bs2B,EAAAA,GAAAA,IAAsB,EAAEC,MAClBrsB,IAAaqsB,IAAiBzB,GAAS+2I,GACzCp4H,EAASo4H,KAEV,CAAC3hK,EAAU2hK,EAAiB/2I,KAE/BwB,EAAAA,GAAAA,IAAsB,EAAEm4I,MACjBvkK,GAAYukK,IAAuBxC,IACpCA,GACFkC,KACAb,MAEAY,QAED,CAACjC,EAAuB/hK,IAE3B,MAAM24H,IAAc5lI,EAAAA,EAAAA,IAAgB,KAC7B63B,GAAO3iC,QAAWs5K,GAKvBh4H,EAAS,IACT8lE,IAAa,GACb+yD,IACA4B,MAPEviJ,SAUJ1wB,EAAAA,EAAAA,KAAU,IAAOiP,GAAWiiB,EAAAA,EAAAA,GAAsB02G,SAAexvI,GAAY,CAAC6W,EAAUyhB,KAExF,MAAM+iJ,IAAiBj2K,EAAAA,EAAAA,KAAQ,KAC7B,GAAKqzK,EACL,OAAOp8H,OAAOyK,OAAO2xH,KACpB,CAACA,IAEE6C,GAAelzK,QAAQizK,IAAgBv8K,QACvCy8K,GAAuBD,KAAiBp+I,GAE9Ct1B,EAAAA,EAAAA,KAAU,KACJ4gD,GAAmB3xC,GAAUwiK,MAChC,CAAC7wH,EAAiB3xC,IAErB,MAAMm/G,IAAepsH,EAAAA,EAAAA,IAAgB,KACnC,MAAMC,EAAS0C,GAAMpP,GAChB0M,GAILquK,IAAsB,KAChBoB,EAAsBzyK,SAC1BqyK,EAAoB,CAAErvK,SAAQ8C,WAAU80B,gBAItC+5I,IAAoB5xK,EAAAA,EAAAA,IAAiB6xK,IAGzC,GAFAnC,EAAsBzyK,SAAU,EAE5B40K,EAASv7C,WAAW,OAAS24C,EAI/B,OAHAG,EAAmB,CAAEnvK,OAAQ0C,EAAMpP,GAAIwP,WAAUm1D,OAAQ,CAAEw2G,WAAW,KACtEl4H,EAASq7H,EAAS//H,MAAM,SACxBs6E,KAIF51E,EAASq7H,GAEJA,IACHv1D,IAAa,GACb+yD,IACAK,EAAsBzyK,SAAU,OAIpCe,EAAAA,EAAAA,KAAU,KACJ65B,GACFu0F,OAED,CAACv0F,KAEJ75B,EAAAA,EAAAA,KAAU,KACRs+G,GAAa99G,QAAQiwK,MACpB,CAACA,KAEJzwK,EAAAA,EAAAA,KAAU,KACHgrB,GAAU9zB,QACC8zB,EAAS9zB,OAASy6K,EA7PA,GA+PhCvjD,OAED,CAACujD,EAAc3mJ,GAAU9zB,UAE5B8I,EAAAA,EAAAA,KAAU,KACR,GAAKiP,EA4BL,OA1BAijK,GAAwBjzK,SAAU,EAoBlCoB,OAAOmL,iBAAiB,WAAY4jD,GACpC/uD,OAAOmL,iBAAiB,UAAW4jD,GAEnC/uD,OAAOmL,iBAAiB,aAAcsoK,GACtCzzK,OAAOmL,iBAAiB,YAAasoK,GAE9B,KACLA,IACAzzK,OAAOoL,oBAAoB,aAAcqoK,GACzCzzK,OAAOoL,oBAAoB,YAAaqoK,IA3B1C,SAAS1kH,IACPX,EAASxvD,SAASmwD,QAClBgjH,MAEA2B,EAAAA,GAAAA,KAAQ,KACN7B,GAAwBjzK,SAAU,IAEtC,CAEA,SAAS60K,IACPzzK,OAAOoL,oBAAoB,WAAY2jD,GACvC/uD,OAAOoL,oBAAoB,UAAW2jD,IAEtC2kH,EAAAA,GAAAA,KAAQ,KACN7B,GAAwBjzK,SAAU,IAEtC,IAaC,CAACgQ,KAEJuR,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQiQ,KAGV,MAAOktB,GAAaC,GAASM,GAAiB,IAAKL,EAAAA,GAAAA,GAAkBswE,GAAcpjG,GAE7EgpJ,IAAkBx2K,EAAAA,EAAAA,KAAQ,KAC9B,IAAMq8B,IAAU22I,IAAc5yH,IAAa1mD,OACzC,OAAO8iC,GAAAA,EAET,MAAMjjC,GAASwtC,EAAAA,EAAAA,MAEf,OAAOqZ,GAAY10C,KAAK+qK,IACtB,MAAOhyK,EAAQ1M,IAAMk7H,EAAAA,GAAAA,GAAqBwjD,GACpC39K,GAAUi0B,EAAAA,EAAAA,KAAkBxzB,EAAQkL,EAAQ1M,GAClD,IAAKe,EACH,OAGF,MAAM49K,EAAkBtzH,IAAmBihE,EAAAA,EAAAA,IAAY5/G,IAAWA,IAAWkyK,EAAAA,KACzEC,EAAAA,EAAAA,KAAsBr9K,EAAQT,QAAW8B,EACvCuvB,GAAgBC,EAAAA,EAAAA,KAAa7wB,EAAQT,GAK3C,MAAO,CACL29K,kBACA39K,UACAm5K,aAPkB3pI,EAAAA,EAAAA,KAAW/uC,EAAQT,EAAQ2L,QAQ7CutK,WANiB0E,GAAkBvsJ,MAQpCwL,OAAO3yB,WACT,CAACq5B,EAAO22I,EAAU5yH,GAAagD,IAE5ByzH,IAAqBryK,EAAAA,EAAAA,IAAiB1L,IAC1C,MAAM29K,GAAkBK,EAAAA,GAAAA,GAAmBh+K,GACrC0D,EAAQgxB,GAAU8G,QAAQmiJ,IAAoB,EAEpDrC,EADkB53K,EAAQmkD,IAGP,SAAf+yH,GACFqB,IAAgB,GAGlBvqJ,EAAa,CACX/lB,OAAQ3L,EAAQ2L,OAChBiM,UAAW5X,EAAQf,GACnBwP,SAAWksK,OAA4B74K,EAAX2M,IAG9BstK,QAGIkC,IAAyBvyK,EAAAA,EAAAA,IAAgB,KAC7CuwK,IAAiB5+G,IAAUA,IAC3By+G,QAGIn3J,IAAgBykC,EAAAA,GAAAA,GAA0B3gC,EAAc4zJ,IAAsB34K,IAClF,MAAMw6K,EAAcR,MAA6B,IAAXh6K,EAAe,EAAIA,GACrDw6K,IACFH,GAAmBG,EAAYl+K,SAC/Bs7K,EAAgB53K,EAAQmkD,OAEzB,IAAIkyH,MAA0B,GAE3BoE,IAAqBzyK,EAAAA,EAAAA,IAAiBk4D,IAC1Ck3G,EAAmB,CAAEnvK,OAAQ0C,EAAMpP,GAAIwP,WAAUm1D,WAEjDk0D,QAGIsmD,IAAoB1yK,EAAAA,EAAAA,IAAiB2yK,IACrChB,GACFt8I,EAAiB,CACfQ,eAAgB,eAKpB48I,GAAmB,CAAEjE,SAAUmE,OAG3BC,IAAuB5yK,EAAAA,EAAAA,IAAgB,KAC3CyyK,GAAmB,CAAEjE,cAAUp4K,OAG3By8K,IAAkB7yK,EAAAA,EAAAA,IAAgB,KAClCivK,EACFwD,GAAmB,CAAE/D,WAAW,IAI9BF,GACFoE,QAIEE,IAAyB9yK,EAAAA,EAAAA,IAAiBpL,IAC9C69K,GAAmB,CAAE79K,SACrB27K,IAAgB,MAGZwC,IAAmB/yK,EAAAA,EAAAA,IAAgB,KACvC,GAAmB,SAAfkvK,IACJmB,KACAa,KACIloJ,GAAU,CACZ,MAAMgqJ,EAAgBrD,EAAe,GAC9B1vK,EAAQiM,IAAauiH,EAAAA,GAAAA,GAAqBzlG,EAASgqJ,IAC1DhtJ,EAAa,CAAE/lB,SAAQiM,YAAWnJ,aAClC6sK,EAAgBoD,EAClB,KAGIC,IAAmBjzK,EAAAA,EAAAA,IAAgB,KACvC,GAAmB,SAAfkvK,IACJmB,KACAa,KACIloJ,GAAU,CACZ,MAAMgqJ,EAAgBrD,EAAe,GAC9B1vK,EAAQiM,IAAauiH,EAAAA,GAAAA,GAAqBzlG,EAASgqJ,IAC1DhtJ,EAAa,CAAE/lB,SAAQiM,YAAWnJ,aAClC6sK,EAAgBoD,EAClB,KAGF,SAASE,GAAct+K,EAAwBu+K,GAC7C,MAAM7+E,GAAc6+E,GAAYjE,IAAet6K,EAC/C,OAAQA,GACN,IAAK,OACH,OACElB,EAAAA,GAAAA,GAACsvG,GAAAA,EAAQ,CACPxvG,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAOi+J,WAAY56E,GAAcrjF,GAAOmiK,cAClE/zK,OAAQsD,GAAMpP,GACdqN,MAAOsmC,EAAQ,kBACfwtD,SAAS,OACTlzF,QAAS2xK,EAAWN,GAAkBC,KAG5C,IAAK,UACH,OACEp/K,EAAAA,GAAAA,GAACsvG,GAAAA,EAAQ,CACPxvG,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAOi+J,WAAY56E,GAAcrjF,GAAOmiK,cAClE/zK,OAAQwoB,EACR0Q,eAAa,EACb33B,MAAOsmC,EAAQ,oBACfwtD,SAAS,UACTlzF,QAAS2xK,EAAWN,GAAkBC,KAG5C,IAAK,WACH,OACEp/K,EAAAA,GAAAA,GAACsvG,GAAAA,EAAQ,CACPxvG,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAOi+J,WAAY56E,GAAcrjF,GAAOmiK,cAClE5mE,WAAY2hE,GACZvtK,MAAOsmC,EAAQ,qBACfwtD,SAAS,WACTlzF,QAAS2xK,EAAWN,GAAkBC,KAKhD,CAEA,SAASO,KACP,OACE//K,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAOqiK,UAAWxC,IAAsB7/J,GAAOsiK,gBAAgB9/K,SAAA,EAC1FX,IAAYY,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOuiK,YACpC9B,KAAiBzC,IAChBv7K,EAAAA,GAAAA,GAAA,OACEF,WAAWoW,EAAAA,GAAAA,GACTqH,GAAO49J,WACN/7K,GAAYme,GAAOwiK,KACpB,gBACAhgL,SAEDg+K,GAAevqK,KAAKyrK,IACnB,MAAMe,GAAW1xI,EAAAA,EAAAA,IAAe2wI,EAAI/vI,SAAU4rI,GAC9C,OACE96K,EAAAA,GAAAA,GAACigL,GAAAA,EAAc,CACbvxI,YAAY,eAEZQ,SAAU+vI,EAAI/vI,SACd+vI,IAAKA,EACLiB,WAAS,EACTl2K,WAAYi0K,GACZ+B,SAAUA,EACVlyK,QAASkyK,EAAWd,GAAuBF,KANtCxvI,EAAAA,EAAAA,IAAeyvI,EAAI/vI,gBAYjCqsI,IACC37K,EAAAA,GAAAA,IAAA,OACEE,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAO4iK,YAAa,gBAAgBpgL,SAAA,CAE7Dy/K,GAAc,QACdA,GAAc,WACdA,GAAc,eAGlBvC,KACCr9K,EAAAA,GAAAA,IAACslD,GAAAA,EAAc,CACblxC,IAAKqV,EACLvpB,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAOu4G,QAAS,iBAC1C3wE,MAAOm5H,GACPxyH,aAAc,IAAI6uH,KAClBp8G,iBAAkB,EAClBnZ,WAAY+C,GACZmD,UAAW/lC,GAAcxlB,SAAA,CAExBo9K,KACCn9K,EAAAA,GAAAA,GAAA,QAAoBF,UAAWyd,GAAOguC,YAAYxrD,SAC/CyzC,EAAQ,mBAAoBrP,IADrB,WAIX+4I,KACCl9K,EAAAA,GAAAA,GAAA,QAAsBF,UAAWyd,GAAOguC,YAAYxrD,SACjDyzC,EAAQ,6BADD,aAIX8qI,IAAiB9qK,KAAI,EACpB5S,UAASk5K,aAAYC,cAAawE,mBACjC94H,KACDzlD,EAAAA,GAAAA,GAAC65K,GAAkB,CAEjBuG,eAAgBx/K,EAAQoyB,KACxBlzB,UAAW66K,GACXx2I,MAAOA,EACPvjC,QAASA,EACTk5K,WAAYA,EACZC,YAAaA,EACbC,eAAgBuB,EAChBhiK,SAAU0iK,EAAexzH,KAAmBhD,EAC5C33C,QAAS6wK,IATJJ,UAgBnB,CAEA,OACE3+K,EAAAA,GAAAA,IAAA,OACEC,GAAG,eACHC,WAAWoW,EAAAA,GAAAA,GACTqH,GAAOygB,KACPzkB,GAAYgE,GAAO2/B,QAClB3jC,GAAY8iK,GAAiB,kBAC9BI,IAAal/J,GAAO8iK,QACpBjhL,GAAYme,GAAO+iK,QAErBtsK,IAAKA,EAAIjU,SAAA,EAETH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAO6qB,OAAOroC,SAAA,EAC1BX,IACAY,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CACL/zB,UAAWyd,GAAO9b,OAClBqyB,KAAMunJ,GAAiBpsK,EACvB/O,KAAK,SACLgrD,gBAAiBA,KAGrBtrD,EAAAA,GAAAA,IAACilD,GAAAA,EAAW,CACV7wC,IAAK+kD,EACLrsD,MAAOy3B,EACPrkC,WAAWoW,EAAAA,GAAAA,GACTqH,GAAO2rB,MACPk0I,IAAsB7/J,GAAOgjK,aAC7BnD,KAAuBh+K,GAAYme,GAAOijK,oBAE5CC,UAAWrhL,EACXs1B,UAAWA,GACXgsJ,oBAAqB,IAAInjK,GAAOu4G,YAAY6kD,KAC5CgG,YAAarD,KAAyBl+K,EACtCwhL,cAAetD,KAAyBl+K,EACxCmsD,YAA8B/X,EAAjB+nI,EAAyB,qBAAgC,UACtElyI,2BAAyB,EACzB77B,SAAU0wK,GACV2C,iBAAkB1B,GAClB3gH,QAAS0zE,GACT4uC,aAAc1hL,EACd08C,QAAS4gI,GACT2D,QAAS5D,GACTsE,UAAW3E,EAAgBiD,QAAmB38K,EAC9Cs+K,YAAa7E,EAAgBoD,QAAmB78K,EAAU3C,SAAA,EAE1DH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAO0jK,WAAWlhL,SAAA,CAC/B+6K,IACC96K,EAAAA,GAAAA,GAACigL,GAAAA,EAAc,CACbvxI,YAAY,oBACZ5uC,UAAWyd,GAAO2jK,eAClBhyI,SAAU4rI,EACVmE,IAAK9D,GAAW3rI,EAAAA,EAAAA,IAAesrI,IAC/BhtK,QAASoxK,KAGZ3D,IAAkBv7K,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAO66F,KAAKr4G,SAAC,UAEhDX,GAAYugL,SAEdvgL,IACAY,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAO4jK,MAAMphL,UAC3BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLnS,KAAK,UACL0N,MAAM,cAENE,QAASA,IAAMguK,EAAoB,CAAE7nH,YAAYmtH,EAAAA,GAAAA,IAAcn1J,KAAKC,SACpE5Z,UAAWkhC,EAAQ,cAAczzC,UAEjCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,oBAKlBlO,GAAYugL,KACZvgL,IACCQ,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOusB,OAAO/pC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLnS,KAAK,UACL0N,MAAM,cAENE,QAASA,IAAMguK,EAAoB,CAAE7nH,YAAYmtH,EAAAA,GAAAA,IAAcn1J,KAAKC,SACpE5Z,UAAWkhC,EAAQ,cAAczzC,UAEjCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,gBAEbtN,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAO8jK,QAAQthL,SAC5Bs9K,KACC/nJ,GAAU9zB,OACRgyC,EAAQ,KAAM,CAACvgC,KAAKma,IAAI6uJ,EAAe,EAAG,GAAI5/D,IAC5C/mF,IAAaA,EAAS9zB,QACxBgyC,EAAQ,eAIE,SAAfgoI,GAAyB1wK,QAAQwqB,GAAU9zB,UAC1CxB,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAWyd,GAAO+jK,UAClBphL,KAAK,UACL2N,QAAM,EACNu2C,OAAK,EACLqiF,mBAAiB,EACjB34H,QAAS+wK,GAAuB9+K,SAEhByzC,EAAfopI,GAAuB,eAA0B,kBAGrDU,KAAyBF,KACxBx9K,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOgkK,iBAAiBxhL,SAAA,EACtCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAOikK,kBAAmBpF,GAAiB7+J,GAAOkkK,oBAC5EpvK,OAAK,EACLnS,KAAK,UACL0N,MAAM,YACNE,QAASuxK,GACThwI,gBAAiB+sI,EACjB9pK,UAAWxF,EAAK,yBAAyB/M,UAEzCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,UAEbtN,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAOikK,kBAAmBrF,GAAiB5+J,GAAOkkK,oBAC5EpvK,OAAK,EACLnS,KAAK,UACL0N,MAAM,YACNE,QAASyxK,GACTlwI,gBAAiB8sI,EACjB7pK,UAAWxF,EAAK,yBAAyB/M,UAEzCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,wB,wCE3qB3B,MAAM87F,GAAsB,IAAMzzF,EAAAA,EAoUlC,IAAehX,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAM,SACJg9F,EAAQ,MACRc,EAAK,OACLq3E,EAAM,SACNC,EAAQ,OACRC,GACEvgL,EAAO89E,SAELj0B,GAAkB72B,EAAAA,EAAAA,KAAqBhzB,EAAQkL,GAC/C0C,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQkL,GAC1Bs1K,GAAoBpzK,EAAAA,EAAAA,IAASlC,QAA+D7J,GAArDsqD,EAAAA,EAAAA,KAAmB3rD,EAAQkL,IAAS8xF,YAAYx+F,GAE7F,MAAO,CACLoP,OACA6yK,eAAgBF,GAAQziG,SACxB4iG,aAAcH,GAAQ/3E,OACtBm4E,eAAgBN,EAAOviG,SACvBwlB,iBAAkBg9E,EAASxiG,SAC3BqqB,gBAAiBD,EACjB07D,YAAa56D,EAAMC,OACnBC,YAAY03E,EAAAA,EAAAA,KAAyB5gL,GACrC6pD,kBACAtrB,sBAAsB0B,EAAAA,EAAAA,KAA2BjgC,GACjDwgL,sBAzBcnzK,EAlU6BwzK,EAC/CjzK,OACAI,WACAvP,YACAuV,WACA8vF,gBACAxB,cACA+sE,kBACAsR,iBACAr9E,mBACAm9E,iBACAC,eACA9c,cACAz7D,kBACAq4E,mBACAt3E,aACAr/C,kBACAtrB,uBACAwlE,iBACA7I,WACAgJ,kBACA48E,mBAEA,MAAM,mBACJC,EAAkB,iBAClBC,EAAgB,cAChBC,EAAa,YACbC,EAAW,oBACXC,IACEz2K,EAAAA,EAAAA,MAEEsd,GAAejgB,EAAAA,EAAAA,MACfguB,GAAYhuB,EAAAA,EAAAA,MACZo1F,GAAkBp1F,EAAAA,EAAAA,OAGtB22C,aAAcqrD,EACdzrD,cAAe0rD,GACb5rD,KAEEgjI,GAAoBC,EAAAA,GAAAA,GAAqBzzK,GAAMpP,GAAIwP,GAEnDo8F,EAAS,GAAGlP,iBACZ,eACJE,EAAc,0BACdG,EAAyB,mCACzBkB,EAAkC,mCAClCL,EAAkC,6BAClCM,EAA4B,iBAC5B9U,GACEqT,GAA0BjzE,EAAc+N,EAAWq0E,EAAQp2F,GAEzDvI,GAAOC,EAAAA,EAAAA,KAEP4+F,EAAiB7gG,QAAQm6J,GAEzBr5D,GAAU9jG,EAAAA,EAAAA,KAAQ,KACtB,GAAIq6K,GAAgBL,EAAgB,CAClC,MAAMa,EAAiD,GAoBvD,OAnBIZ,GAAcvgL,QAChBmhL,EAAW5vK,KAAK,CACdlT,GAAIsoG,EAAAA,IACJL,WAAY,IACZ56F,MAAO,GACPiyE,SAAU4iG,EACV5uJ,MAAO4uJ,EAAavgL,OACpBqlG,SAAS,IAGTi7E,GAAgBtgL,QAClBmhL,EAAW5vK,KAAK,CACdlT,GAAIuoG,EAAAA,IACJN,WAAY,IACZ56F,MAAOJ,EAAK,kBACZqyE,SAAU2iG,EACV3uJ,MAAO2uJ,EAAetgL,SAGnBmhL,CACT,CAEA,IAAK1d,EACH,OAAO3gI,GAAAA,EAGT,MAAMunE,EAAc,GAEhBlH,EAAiBnjG,QACnBqqG,EAAY94F,KAAK,CACflT,GAAI6mG,EAAAA,IACJoB,WAAY,IACZ56F,MAAOJ,EAAK,oBACZqyE,SAAUwlB,EACVxxE,MAAOwxE,EAAiBnjG,SAIxBwgL,EAAexgL,QACjBqqG,EAAY94F,KAAK,CACflT,GAAIymG,EAAAA,IACJwB,WAAY,IACZ56F,MAAOJ,EAAK,kBACZqyE,SAAU6iG,EACV7uJ,MAAO6uJ,EAAexgL,SAI1B,MAAMkrG,EAAa,IAAKu4D,GAAe,IACnC4c,GACFn1E,EAAWV,QAAQ61E,GAGrB,MAAMe,EAAsB7jI,OAAOyK,QAAO8hD,EAAAA,GAAAA,IAAW9B,EAAiBkD,IAEtE,MAAO,IACFb,KACA+2E,KAEJ,CACD3d,EACAz7D,EACA7E,EACAq9E,EACAH,EACA/0K,EACAg1K,EACAK,EACAJ,IAGIl1E,GAAkB/kG,EAAAA,EAAAA,KAAQ,IAC9B6jG,GAC4D,IAAzDC,EAAQnuE,QAAQ/yB,GAAQA,EAAIy0E,UAAU39E,SAAQA,QAChD,CAACoqG,EAASD,KAEbrhG,EAAAA,EAAAA,KAAU,KACHq5F,IACLy+E,IACK1R,GACL+R,EAAkB,CAAEvhL,KAAM,qBACzB,CAACwvK,EAAiB/sE,EAAay+E,EAAoBK,IAEtD,MAAMvnD,GAAoBnuB,EAAAA,GAAAA,GAAkB,GAAI3Q,EAAAA,KAC1CymF,EAAuBl3E,GAAkBuvB,IACzCruB,IAAoB6jE,GAAmByR,IAE7CtoG,EAAAA,GAAAA,GAAoBziD,GAAYyrJ,IAAyBzrJ,EAAU7tB,UAGnEe,EAAAA,EAAAA,KAAU,KACR,IAAKqhG,EACH,OAGF,MAAMvjE,EAAShR,EAAU7tB,QACzB,IAAK6+B,EACH,OAGF,MAAM6kE,EAAUxQ,EAAiB2M,IAAuBhhE,EAAOyE,YAAc,EAAIu8D,GAAsB,IAEvG1jB,EAAAA,GAAAA,GAAwBt9C,EAAQ6kE,KAC/B,CAACtB,EAAgBlP,IAEpB,MAAMqmF,GAAsBx2K,EAAAA,EAAAA,IAAgB,CAAC+xE,EAAqB0yC,EAAoB8/C,KACpFtrE,EAAgBlnB,EAAS0yC,EAAU8/C,GAAgB,GACnDwR,EAAiB,CAAEhkG,eAGf0kG,IAAsBz2K,EAAAA,EAAAA,IAAiB+xE,IAC3CikG,EAAc,CAAEjkG,eAGZ2kG,IAAoB12K,EAAAA,EAAAA,IAAiB+xE,IACzCkkG,EAAY,CAAElkG,eAGV4kG,IAAkB32K,EAAAA,EAAAA,IAAgB,KACjCokK,GACL+R,EAAkB,CAAEvhL,KAAM,qBAGtBgiL,IAA4B52K,EAAAA,EAAAA,IAAiB+xE,IACjDmkG,EAAoB,CAAEnkG,eAGxB,IAAKpvE,EAAM,OA+DX,MAAMu+B,IAAgBt3B,EAAAA,GAAAA,GlK3UD,WkK2U6BpW,GAC5CqtG,IAAkBj3F,EAAAA,GAAAA,GACtBqH,GACA,gBACC8tF,GAAuB9tF,IAGpBmX,IAAamuJ,IAAyBnS,GAAmByR,KAAkBt1E,EAEjF,OACE7sG,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CAACj9B,UAAW0tC,GAAexQ,UAAWtI,GAAY,EAAI,EAAGpnB,KAAK,OAAOggG,eAAa,EAAAvtG,SACzF8iL,GASAjjL,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACIoiL,IACAniL,EAAAA,GAAAA,GAAA,OAAKgU,IAAKojB,EAAWt3B,UAAWqtG,GAAgBptG,UAC9CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,0BAAyBC,SAAA,EACtCC,EAAAA,GAAAA,GAAA,UAAQgU,IAAKwqF,EAAiB1+F,UAAU,kBACvC8rG,EAAQp4F,KAtFvB,SAAqB6qF,EAA8C/5F,GACjE,MAAMipG,EAAelP,EAAWlf,WAAW,GACrC3C,GAAkBtmE,EAAAA,GAAAA,GAAeqH,GAAqBjZ,IAAUm4F,GlKhRoJ,YkKiRpN+Q,EAAmBlpG,EAAQmpG,EAAAA,IAEjC,OAAIpP,EAAWx+F,KAAOymG,EAAAA,KACjBjI,EAAWx+F,KAAO6mG,EAAAA,KAClBrI,EAAWx+F,KAAOsjL,EAAAA,KAClB9kF,EAAWI,eACV8O,GAGFvtG,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAEL7N,UAAW08E,EACXlqE,UAAW+rF,EAAWnxF,MACtBmF,OAAK,EACLkyC,MAAO85C,EAAWx+F,KAAOymG,EAAAA,KAAwBjI,EAAWx+F,KAAO6mG,EAAAA,IACnE94F,MAAM,cAENE,QAASA,IAAMm7E,EAAiB3kF,GAAOvE,SAEtCs+F,EAAWx+F,KAAOymG,EAAAA,KACjBtmG,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,WACT+wF,EAAWx+F,KAAO6mG,EAAAA,KACpB1mG,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aACT+wF,EAAWx+F,KAAOsjL,EAAAA,KACpBnjL,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CAACC,KAAM7kB,EAAM/O,KAAK,WAEzBF,EAAAA,GAAAA,GAACo+F,GAAe,CACdC,WAAYA,EACZ/9E,QAASiqF,IAAe5G,EACxBpF,oBAAqBR,EACrBS,gBAAiBgP,EAAmBhP,OAAkB97F,EACtDslB,eAAa,KArBZq2E,EAAWx+F,KA4BlBG,EAAAA,GAAAA,GAACugG,GAAa,CAEZliB,QAASkvB,EACTrtG,KAAMo+F,EAAAA,IACNpxF,MAAOmxF,EAAWnxF,MAClBpN,UAAW08E,EACXl8D,QAASiqF,IAAe5G,EACxBpF,oBAAqBR,EACrByC,eAAa,EACb5gE,sBAAoB,EACpB4+D,gBAAiBgP,EAAmBhP,OAAkB97F,EACtDq+F,qBAAsBoE,EACtBr3F,QAASm7E,EACT+X,SAAU18F,EACV0jB,eAAa,GAbRq2E,EAAWx+F,GAiBxB,UA+BQG,EAAAA,GAAAA,GAAA,OACEgU,IAAKqV,EACLxD,YAAao9J,GACbj+H,SAAUomD,EACVtrG,WACEoW,EAAAA,GAAAA,GACEqH,GACAhI,EAAAA,GAAe,eAAiB,iBAC/B4sK,GAAgB5kK,IAEpBxd,SAEA6rG,EAAQp4F,KAAI,CAAC6qF,EAAY54C,KACxBzlD,EAAAA,GAAAA,GAACykG,GAAU,CAETpG,WAAYA,EACZsF,YAAa74F,QAAQy/F,GAAc5G,GACnCyB,eAAgBA,EAChB9gG,MAAOmhD,EACP82C,SAAUkP,EACVlN,oBAAqB3B,EACrBkB,mCAAoCA,EACpCL,mCAAoCA,EACpCiH,aAAcjI,GAAkBh3C,EAAI,GAAKg3C,GAAkBh3C,EAAI,EAC/Dk/C,iBAAkBA,EAClBz5C,gBAAiBA,EACjBtrB,qBAAsBA,EACtBulE,cAAeA,EACfD,iBAAkB7G,EAAWx+F,KAAOgiL,EACpCt8E,gBAAiBu9E,EACjBt9E,gBAAiBu9E,GACjBt9E,cAAeu9E,GACft9E,sBAAuBw9E,GACvBl7J,eAAa,EACb68E,iBAAkBxG,EAAWx+F,KAAOsoG,EAAAA,KApB/B9J,EAAWx+F,WA/BvB6wK,GAAoByR,EAEjBt1E,GACF7sG,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAsBxd,SAAE+M,EAAK,iBAE7C9M,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,KAJR1rD,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAsBxd,SAAE+M,EAAK,0CClMvD,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAM,mBAAE4zC,EAAkB,aAAE+pD,GAAiB7oG,EAAO++C,WAE9C,mBAAEgjI,GAAuB/hL,EAAO4uC,WAAa,CAAC,GAC9C,iBAAEozI,EAAgB,wBAAEv4E,IAA4B99C,EAAAA,EAAAA,KAAmB3rD,EAAQkL,IAAW,CAAC,EAE7F,MAAO,CACL82K,mBACAljI,qBACA+pD,eACAo5E,eAAgBF,EAChBv4E,mBAAoBC,KAZNp8F,EAhGqC60K,EACvD5/E,cACA0/E,mBACAljI,qBACA+pD,eACAnF,sBACA8F,qBACAjqG,UACA0iL,iBACAj+E,mBACAC,wBAEA,MAAM9G,GAAkBp1F,EAAAA,EAAAA,MAClBw6F,GAAoBx6F,EAAAA,EAAAA,OAClBI,MAAOmhB,IAAgBE,EAAAA,GAAAA,MACzB,cAAE24J,IAAkBnkL,EAAAA,EAAAA,MAEpBokL,EAAmB7iL,GAASw/C,WAAW01E,QAEvC4tD,EAA4BJ,GAAkBG,GAC/CA,EAAiBjiL,QAAU8hL,EAE1BK,GAAwB77K,EAAAA,EAAAA,KAAQ,KACpC,GAAI47K,EAA2B,CAC7B,MAAMtjI,EAAYqjI,EAAiBjwK,KAAI,EAAG07B,cAAeA,IAIzD,OAHI27D,GACFzqD,EAAU4rD,QAAQ,CAAE9qG,KAAM,SAErBk/C,CACT,CAEA,IAAKijI,EACH,MAAO,GAGT,GAA8B,QAA1BA,EAAiBniL,KAAgB,CACnC,MAAM0iL,GAA0CzjI,GAAsB,IAAI3sC,KAAI,EAAG07B,cAAeA,IAIhG,OAHI27D,GACF+4E,EAAgB53E,QAAQ,CAAE9qG,KAAM,UAE3B2iL,EAAAA,EAAAA,IAAcD,EAAiB15E,EACxC,CAEA,MAAM05E,EAAyCP,EAAiBS,QAAQ1lI,QAKxE,OAJIysD,GACF+4E,EAAgB53E,QAAQ,CAAE9qG,KAAM,UAG3B2iL,EAAAA,EAAAA,IAAcD,EAAiB15E,KACrC,CACD/pD,EAAoBkjI,EAAkBn5E,EAAcw5E,EAA2BD,EAAkB54E,IAG7Fk5E,GAAej8K,EAAAA,EAAAA,KAAQ,KAC3B,MAAMk8K,EAAc/wK,KAAK4a,IA1DD,MA0D2BlY,EAAAA,EAAKgV,GAClDs5J,GAAYt5J,EA9DK,IAIE,KACD,IAyD2EhV,EAAAA,EAC7FuiB,EAAiB8rJ,EA9DI,GA8DmCruK,EAAAA,EAExDuuK,EAAajxK,KAAKmI,OAAO8c,EAAiB+rJ,IAlE9B,GAkE2DA,IACvEn1G,EAAY77D,KAAKqpE,KAAKqnG,EAAsBniL,OAAS0iL,GAErDC,EArEY,GAqEMr1G,GAA6BA,EAAY,GAAKm1G,EAnE3C,GAmE+EtuK,EAAAA,EAAM,EAEhH,OAAO1C,KAAK4a,IApEa,GAoEclY,EAAAA,EAAKwuK,KAC3C,CAACR,EAAsBniL,OAAQmpB,IAElC,OACE3qB,EAAAA,GAAAA,GAAA,OAAKF,UCzHc,WDyHU+F,MAAO,WAAWk+K,MAAiBhkL,UAC9DC,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GC1HsB,WD0HSstK,EAAgB,eAAiB,iBAAiBzjL,UAC/FH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,+CAA8CC,SAAA,EAC3DC,EAAAA,GAAAA,GAAA,UAAQgU,IAAKwqF,EAAiB1+F,UAAU,mBACxCE,EAAAA,GAAAA,GAAA,UAAQgU,IAAK4vF,EAAmB9jG,UAAU,kBACzC6jL,EAAsBnwK,KAAK07B,IAC1B,MAAM+5D,GAAaz5D,EAAAA,EAAAA,IAAeN,GAC5B0xD,EAAaqI,EAAalE,GAAqBl1E,SAASo5E,QAAcvmG,EAE5E,OACE1C,EAAAA,GAAAA,GAAC0jG,GAAa,CAEZx0D,SAAUA,EACV0xD,WAAYA,EACZ+C,YAAaA,EACbxjD,mBAAoBA,EACpBryC,QAASu3F,EACTt/E,cAAeu/E,EACf9G,gBAAiBA,EACjBoF,kBAAmBA,GARdqF,iBErEfm7E,GAA0B,OAASzuK,EAAAA,EAoOzC,IAAehX,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAsBrN,IACxC,MAAM06D,GAAQjtD,EAAAA,EAAAA,KAAezN,GACvBgjL,EAAsBhjL,EAAOgjL,qBAC7B,OACJ93K,EAAM,UAAEiM,EAAS,YAAE8rK,EAAW,QAAEnhJ,EAAO,SAAE5jB,EAAQ,cAAEglK,EAAa,aAAEpC,GAChEpmH,EAAM3qB,gBAAkB,CAAC,EACvBzR,EAAQ2kJ,GAAenhJ,GACzBmD,EAAAA,EAAAA,KAAgBjlC,EAAQijL,EAAanhJ,QACrCzgC,EACEuM,EAAO1C,GAAS6jC,EAAAA,EAAAA,KAAW/uC,EAAQkL,QAAU7J,EAC7CqqD,EAAexgD,GAASygD,EAAAA,EAAAA,KAAmB3rD,EAAQkL,QAAU7J,EAC7D9B,EAAU2L,GAAUiM,GAAYqc,EAAAA,EAAAA,KAAkBxzB,EAAQkL,EAAQiM,QAAa9V,EAC/E4tH,GAAgB7hH,EAAAA,EAAAA,IAASlC,GAAU+3K,GAAe,IAClDE,EAAmE,SAAzCz3H,GAAcs2H,kBAAkBniL,MAC1D,mBAAEkiL,GAAuB/hL,EAAO4uC,WAAa,CAAC,EAC9Cw0I,EAAkE,QAAzC13H,GAAcs2H,kBAAkBniL,MAC1D6rD,GAAcs2H,kBAAkBqB,iBAE/BjB,EAAmB7iL,GAASw/C,WAAW01E,QACvC4tD,EAA4B54K,QAAQs4K,GAAsBK,GAC3DA,EAAiBjiL,QAAU4hL,GAEhC,MAAO,CACLxiL,UACA++B,QACApgB,WACAolK,sBAAsB11K,GAAM21K,aAAeJ,GAA2Bd,KACjEe,GAA0Bn0D,GAC/BnrB,eAAe0I,EAAAA,EAAAA,KAA+BxsG,GAC9Cu+B,sBAAsB0B,EAAAA,EAAAA,KAA2BjgC,GACjDkjL,gBACApC,eACA51K,SACA83K,yBAjCgB31K,EAlO8Bm2K,EAChDn5K,SACA9K,UACA++B,QACApgB,WACA4lF,gBACAvlE,uBACA+kJ,sBACAJ,gBACAh4K,SACA41K,eACAkC,0BAEA,MAAM,eACJS,EAAc,oBAAEC,EAAmB,YAAEv1H,EAAW,iBAAE9tB,EAAgB,kBAAEoM,EAAiB,kBAAEk3I,EAAiB,wBACxGC,EAAuB,qBAAEC,EAAoB,sBAAEC,IAC7Cp5K,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,KAEPq4K,GAAoBp5I,EAAAA,GAAAA,GAAiBprC,GAASf,IAAI,GAClDwlL,GAAiBr5I,EAAAA,GAAAA,GAAiBprC,GAAS2L,QAAQ,GACnD+4K,GAAsBt5I,EAAAA,GAAAA,GAAiBrM,GAAOh0B,QAAQ,GACtD45K,GAAkBv5I,EAAAA,GAAAA,GAAiBrM,GAAO9/B,IAC1C2lL,GAAiBx5I,EAAAA,GAAAA,GAAiBzsB,GAAU,GAC5CqyD,GAAUxoE,EAAAA,EAAAA,MACVq8K,GAAoB39K,EAAAA,EAAAA,KAAQ,KAChC,GAAK09K,EAIL,OAAID,EACKC,EAGF,CACLjpK,EAAGipK,EAAejpK,GAAKooK,GAxCQ,IACG,IAwClC9hK,EAAG2iK,EAAe3iK,GAAK8hK,GAzCgB,IACG,OA0C3C,CAACY,EAAiBC,EAAgBb,IAE/B5yG,GAAiBzlE,EAAAA,EAAAA,IAAgB,IAAMslE,EAAQroE,UAC/C04F,GAAY31F,EAAAA,EAAAA,IAAgB,KAAM,CACtC41F,YAAY,EACZwjF,SAAUJ,EACVK,SAASnqI,EAAAA,EAAAA,OAAiBo2B,EAAQroE,UAC5BqoE,EAAQroE,QAAQsjC,YAAcu3I,IAA2B,IAAIwB,KAC/D,MAGAC,GAA6Bv5K,EAAAA,EAAAA,IAAiB+xE,IAClD,IAAKgnG,IAAmBD,EACtB,OAEF,MAAMl2I,EAAwBmvC,EAAQujB,cAClC,CAAE1gG,KAAM,SAAU6nF,WAAY1K,EAAQx+E,IACtC,CAAEqB,KAAM,QAAS8jK,SAAU3mF,EAAQiO,OAEvCw4F,EAAe,CACbv4K,OAAQ84K,EAAgB7sK,UAAW4sK,EAAmBl2I,WAAU42I,mBAAmB,IAErFf,OAGIgB,GAAuBz5K,EAAAA,EAAAA,IAAiB4iC,IACvCm2I,GAAmBD,IAIF,SAAlBl2I,EAAShuC,KACXgkL,EAAqB,CACnB34K,OAAQ84K,EAAgB7sK,UAAW4sK,EAAmBjyJ,MAAO,IAG/D2xJ,EAAe,CACbv4K,OAAQ84K,EAAgB7sK,UAAW4sK,EAAmBl2I,WAAU42I,mBAAmB,IAGvFf,QAGIiB,GAA4B15K,EAAAA,EAAAA,IAAiB4iC,IAC3B,SAAlBA,EAAShuC,OAEbikL,EAAsB,CACpB54K,OAAQ84K,EACR7sK,UAAW4sK,IAEbL,QAGIkB,GAA4B35K,EAAAA,EAAAA,IAAiBqC,IACjD,GAAI,SAAUA,GAAsB,SAAdA,EAAKzN,KAAiB,OAE5C,MAAMguC,EAAW,OAAQvgC,EAAO,CAAEzN,KAAM,SAAU6nF,WAAYp6E,EAAK9O,IAAgB8O,EAE7E0vE,EAAU,SAAU1vE,GAAsB,WAAdA,EAAKzN,MAAoB2tC,EAAAA,EAAAA,MAAYi6C,aAAapiD,KAAK/3B,EAAKo6E,YAC1F,OAAQp6E,EAAOA,OAAOjM,EAE1B,GAAI27E,IAAYA,EAAQqjB,SAAW9hE,EAYjC,OAXA8B,EAAiB,CACf9gC,QAASkM,EAAK,0BACdnL,OAAQ,CACNA,OAAQ,mBACR2nI,QAAS,CAAEnnG,eAAgB,mBAE7B42G,WAAYjsI,EAAK,sBAGnBi4K,IAKF,IAAKR,EASH,OARAz2I,EAAkB,CAChBniC,OAAQ25K,EACRniJ,QAASoiJ,EACT72I,aAAaC,EAAAA,EAAAA,IAAY22I,EAAsBC,GAC/Cr2I,WACA42I,mBAAmB,SAErBf,IAIF,IAAIlwK,EACAm3E,EAEJ,GAAI,SAAUr9E,GAAsB,UAAdA,EAAKzN,KACzB2T,EAAOlG,EAAKq2J,aACP,CACL,MAAMkhB,GAAqBC,EAAAA,GAAAA,KAAyBC,EAAAA,GAAAA,IAAqB/nG,IACzExpE,EAAOqxK,EAAmBrxK,KAC1Bm3E,EAAWk6F,EAAmBl6F,QAChC,CAEAx8B,EAAY,CAAE36C,OAAMm3E,WAAUq6F,YAAY,IAC1CtB,OAGIjC,GAAsBx2K,EAAAA,EAAAA,IAAiB+xE,IAC3C,MAAMioG,EAAmBvnI,OAAOyK,OAAO66H,GACjCkC,EAAWD,EAAiB/0I,MAAMqwI,GAAWA,EAAO4E,kBAAoBnoG,EAAQx+E,MAAKA,GAEvF0M,GAAQy4K,EAAkB,CAAEz4K,SAAQ8C,SAAUksC,EAAAA,GAAgBgrI,aAE9DA,GAAUtB,EAAwB,CAAC,GACvCF,OAGIhgF,GAAsBj9F,EAAAA,EAAAA,KAAQ,KAC1BlH,GAASw/C,WAAW01E,SAAW,IAAIt3E,QAAiB,CAACiL,GAAOg9H,cAAav3I,oBAC3DxsC,IAAhB+jL,GACFh9H,EAAI12C,MAAKy8B,EAAAA,EAAAA,IAAeN,IAGnBua,IACN,KACF,CAAC7oD,GAASw/C,WAAW01E,UAExB,OACE91H,EAAAA,GAAAA,GAAC8f,GAAAA,EAAI,CACHpU,OAAQA,EACRsI,IAAK49D,EACL9xE,WAAWoW,EAAAA,GAAAA,GCtOM,WDsOsB,kBACvCs4F,iBAAiBt4F,EAAAA,GAAAA,GCvOyB,YDyOvCyuK,IAAwBY,GCzOiE,WD0O1FA,GC1O+D,YD4OjErjF,YAAU,EACVqM,WAAS,EACTv1B,OAAQysG,EACR1lK,UAAW4f,GAAS,SACpBkyC,kBAAmBA,GACnBC,eAAgBA,GAChBC,eAAgBA,EAChBkwB,UAAWA,EACXykF,yBAAyB,iBACzB96K,QAASm5K,EAAoBhlL,SAE5BoiL,GAAgB51K,GACfvM,EAAAA,GAAAA,GAACkiL,GAAa,CACZpiL,UAAU,GACVuV,UAAW3J,EACXi4F,YAAa74F,QAAQY,GAAUi5K,GAC/BpoF,SAAS,iBACTm0E,iBAAiB,EACjBtrE,gBAAgB,EAChB74F,OAAQA,EACR44F,cAAeA,EACfI,gBAAiBu9E,EACjBX,aAAcA,KAGhBviL,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAACgrG,GAAiB,CAChBz+F,OAAQ84K,EACR9oF,SAAS,qBACTlnF,UAAW3J,KAAYi5K,GAAuBY,GAC9C5hF,YAAa74F,QAAQY,GAAUi5K,GAC/B//E,kBAAgB,EAChB9kG,UAAY6kL,GAAwBY,OAAkC7iL,EC5QoC,WD6Q1GqiG,oBAAqBA,EACrBI,cAAeA,EACfgG,oBAAqBo6E,EAAkBU,EAA4BJ,EACnExgF,iBAAkBkgF,EAAkBU,EAA4BF,EAChEzgF,kBAAmB0gF,KAEnBrB,GAAuB75K,QAAQu6K,KAC/BrlL,EAAAA,GAAAA,GAACujL,GAAqB,CACpBh3K,OAAQ84K,EACR1hF,YAAaj4F,EACb25F,iBAAkBkgF,EAAkBU,EAA4BF,EAChEzgF,kBAAmB0gF,EACnBjhF,oBAAqBA,EACrBnkG,QAASA,aA8CvB,SAASixE,KACP,OAAOjwE,SAASuC,cAAc,OAChC,CAEA,SAAS2tE,KACP,OAAOlwE,SAASuC,cAAc,OAChC,C,4BE7UA,MAAMwiL,GAAM/kL,SAASuB,cAAc,O,sFCDnC,SAA4C,WAA5C,GAA+N,WC6BzNyjL,GAAmB,GAAKjxK,EAAAA,EAmH9B,IAAehX,EAAAA,EAAAA,KAjH2BkoL,EACxCC,aACAhnL,YACAyB,WACAwlL,0BACAC,uBACA1iL,QACAwuC,WACAm0I,sBAEA,MAAMC,EA2FD,SAAwBJ,EAA2BC,GACxD,GAAIA,GAA2BD,EAAWK,MAAO,CAC/C,GAAIC,EAAAA,IAA8Bt5F,IAAIg5F,EAAWO,UAC/C,MAAO,QAET,GAAIC,EAAAA,IAA8Bx5F,IAAIg5F,EAAWO,UAC/C,MAAO,OAEX,CACA,MAAO,MACT,CArGsBE,CAAeT,EAAYC,GAEzCS,GAAqBl7K,EAAAA,EAAAA,IAAgB,KACzC26K,IAAkB3iL,MAGdwO,GAAUhL,EAAAA,EAAAA,KAAQ,KACtB,OAAQo/K,GACN,IAAK,QACH,OACElnL,EAAAA,GAAAA,GAAA,OACEF,UAAWyd,GACX5Z,IAAKmjL,EAAW/9K,QAChBuf,IAAI,GACJ9kB,WAAW,IAGjB,IAAK,QACH,OACE5D,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,CACG+K,QAAQg8K,EAAWK,OAAOjuK,YACzBlZ,EAAAA,GAAAA,GAAA,OAAKF,UD9D+C,WC8DpBC,UAAEgc,EAAAA,GAAAA,IAAoB+qK,EAAWK,MAAMjuK,aAEzElZ,EAAAA,GAAAA,GAAA,SACEF,UAAWyd,GACX5Z,IAAKmjL,EAAW/9K,QAChBkd,UAAQ,EACRjB,OAAK,EACLoB,MAAI,EACJlE,yBAAuB,OAI/B,QACE,OACEtiB,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAACmnJ,GAAAA,EAAI,CACHrnJ,UD9E2I,WC+E3IwN,KAAMw5K,EAAW52G,SACjBu3G,WAAWC,EAAAA,GAAAA,IAAiBZ,EAAW52G,SAAU42G,EAAWO,UAC5DM,YAAab,EAAWt+K,eACxBtI,KAAM4mL,EAAW5mL,KACjBmkI,SAAO,IAERvxF,IACC9yC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CACHjF,KAAK,SACLxN,WAAWoW,EAAAA,GAAAA,GAAeqH,GDxFsO,YC0FhQzP,QAASA,IAAMglC,EAASxuC,WAMnC,CAACwiL,EAAYI,EAAa5iL,EAAOwuC,IAE9B80I,EAAqC,SAAhBV,IAA2BF,EAChDa,EAAuB/8K,QAAwB,SAAhBo8K,GAA0BJ,EAAWgB,qBACpEC,EAAsC,SAAhBb,EAEtBc,GAAgB9xK,EAAAA,GAAAA,GACpBpW,EDvGmB,WCuGKyB,GDvG0D,WCuG/BqmL,GDvGgF,YC0GrI,OACEhoL,EAAAA,GAAAA,IAAA,OAAKE,UAAWkoL,EAAcjoL,SAAA,CAC3B+S,GACD9S,EAAAA,GAAAA,GAACioL,GAAAA,EAAY,CACX9oK,UAAW0oK,EACX5+K,aAAc69K,EAAWt+K,gBAAkBs+K,EAAW/9K,QACtDS,MAAOo9K,GACP/8K,OAAQ+8K,KAETmB,IACCnoL,EAAAA,GAAAA,IAAA,OAAKE,UDpHiK,WCoHvIC,SAAA,EAC7BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CACHjF,KAAMw5K,EAAWgB,oBAAsB,kBAAoB,UAC3DhoL,UAAWyd,GACXzP,QAAS05K,IAEV10I,IAEC9yC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,SAASxN,UAAWyd,GAAmBzP,QAASA,IAAMglC,EAASxuC,c,uCC7HvE,SAAS4jL,GAAe3iL,EAAwBusB,EAAsBq2J,GAAe,GAClG,MAAMC,EAAa7iL,EAAU4iL,EAAe,aAAe,aACrDE,EAAaD,EAAa7iL,EAAU4iL,EAAe,cAAgB,gBACnEn6J,EAAK8D,EAAQq2J,EAAe,aAAe,aAC3CG,EAAKt6J,EAAK8D,EAAQq2J,EAAe,cAAgB,gBACvD,OAAOn6J,EAAKo6J,GAAcE,EAAKD,CACjC,CCNe,SAASE,GACtBhjL,EACAijL,EACA3qF,EAAS,EACT6nF,GAAU,EACV+C,GAAsB,EACtBN,GAAe,GAEf,MAAMC,EAAa7iL,EAAU4iL,EAAe,aAAe,aACrDE,EAAaD,EAAa7iL,EAAU4iL,EAAe,cAAgB,gBACnEO,EAA4C,iBAAvBF,EACvBjjL,EAAUE,iBAA8B+iL,GACxCA,GACE,OAAEhnL,GAAWknL,EACbC,EAA2B,GACjC,IAAIC,GAAU,EAEd,IAAK,IAAInjI,EAAI,EAAGA,EAAIjkD,EAAQikD,IAAK,CAC/B,MAAM3zB,EAAU42J,EAAYjjI,GACtBz3B,EAAK8D,EAAQq2J,EAAe,aAAe,aAC3CG,EAAKt6J,EAAK8D,EAAQq2J,EAAe,cAAgB,gBAKvD,GAJkBM,EACdH,GAAMF,EAAavqF,GAAUyqF,GAAMD,EAAaxqF,EAChD7vE,GAAMq6J,EAAaxqF,GAAUyqF,GAAMF,EAAavqF,EAGlD8qF,EAAe51K,KAAK0yC,GACpBmjI,GAAU,OACL,GAAIA,IAAYlD,EACrB,KAEJ,CAEA,MAAO,CAAEgD,cAAaC,iBACxB,CCzBe,SAASE,GAAsB92J,EAAkBztB,EAAe+kB,GAC7E,MAAM9jB,EAAY8jB,EAAa9f,QAC/B,IAAKhE,GAAajB,EAAQ,EACxB,OAEF,MAAM,eAAEqkL,EAAc,YAAED,GAAgBH,GACtChjL,EACAwsB,EAVoB,GAYpB,GACA,GAGF,IAAK22J,EAAYlnL,SAAWknL,EAAYpkL,GACtC,OAEF,MAAM8nF,EAAQu8F,EAAe,GAC7B,IAAKA,EAAe94J,SAASvrB,IACvBA,IAAU8nF,IAAU87F,GAAe3iL,EAAWmjL,EAAYt8F,IAAU,CACxE,MAAM7sE,EAAWjb,EAAQqkL,EAAeA,EAAennL,OAAS,GAAK,QAAU,OAC/E08F,EAAAA,GAAAA,IAAc,CACZ34F,YACAusB,QAAS42J,EAAYpkL,GACrBib,WACAs+E,OA1BgB,IA4BpB,CACF,CC7BO,SAASirF,IAAsB,SACpCvvK,EAAQ,aACR4uK,EAAY,iCACZY,EAAgC,6BAChCC,EAA4B,kBAC5BC,EAAiB,MACjB9jI,EAAK,kBACL+jI,EAAiB,SACjBvlJ,EAAQ,QACR/3B,IAYA,MAAOu9K,EAAmBC,IAAwBl9K,EAAAA,EAAAA,KAAU,GAEtDm9K,GAAmB/8K,EAAAA,EAAAA,IAAiB6vE,GACnCh3B,GAIEs6B,EAAAA,GAAAA,GAAct6B,EAAM3jD,OAAQ26E,IAHzB,IAMNmtG,GAAiBh9K,EAAAA,EAAAA,IAAgB,CAACI,EAAeE,KACrDA,EAAE6Y,iBACF2jK,GAAsB9kL,GAAW+kL,EAAiB/kL,EAAQoI,QAGtD68K,GAAmBj9K,EAAAA,EAAAA,IAAiBM,IAExC,GAAIA,EAAE48K,QAAU58K,EAAE2kB,SAAW3kB,EAAE68K,SAAW78K,EAAE88K,SAAU,OAAO,EAC7D,IAAKnwK,EAAU,OAAO,EAEtB,GAAI4rC,GAASA,EAAM3jD,QAAU2nL,GAAqB,EAAG,CACnD,MAAMx6K,EAAOw2C,EAAMgkI,GACnB,GAAIx6K,EAAM,CACR,IAAuB,IAAnBg1B,EAASh1B,GACX,OAAO,EAGT/B,EAAE6Y,gBACJ,CACF,CAEA,OAAO,MAGTnb,EAAAA,EAAAA,KAAU,KACHiP,GAAU6vK,EAAqBJ,GAAgC,EAAI,KACvE,CAACzvK,EAAUyvK,IAEd,MAAMW,GAAyBxkI,GAASgkI,EAAoBhkI,EAAM3jD,OAAS,EAmB3E,OAlBA8I,EAAAA,EAAAA,KAAU,KACHy+K,IAAoCY,GACvCP,EAAqBJ,GAAgC,EAAI,KAE1D,CAACW,EAAuBX,EAA8BD,KAEzDz+K,EAAAA,EAAAA,KAAU,IAAOiP,GAAWy/B,EAAAA,GAAAA,GAAyB,CACnDw6E,MAAO5nH,EACPg+K,KAAMX,GAAqBd,OAAezlL,EAAakK,GAAqB08K,GAAgB,EAAG18K,GAC/Fi9K,OAAQZ,GAAqBd,OAAezlL,EAAakK,GAAqB08K,EAAe,EAAG18K,GAChGssC,OAAQ+vI,IAAsBd,OAAezlL,EAAakK,GAAqB08K,GAAgB,EAAG18K,GAClGqsC,QAASgwI,IAAsBd,OAAezlL,EAAakK,GAAqB08K,EAAe,EAAG18K,GAClGk9K,MAAOZ,EAAoBK,OAAmB7mL,EAC9C0K,QAASm8K,SACN7mL,GAAY,CACfumL,EAAmBK,EAAgBC,EAAkBhwK,EAAU4uK,EAAcv8K,EAASs9K,IAGjFC,CACT,CC3DA,MAyFA,IAAexqL,EAAAA,EAAAA,KAzFsBorL,EACnCr+K,SACAE,UACAo+K,mBACAC,oBAEA,MAAM5gK,GAAejgB,EAAAA,EAAAA,OACf,aAAEya,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAA4BvY,OAAQhJ,OAAWA,GAAW,GAEnGwnL,GAAmB59K,EAAAA,EAAAA,IAAgB,CAACqxB,EAAgBwsJ,GAAa,KAErE,MACMj6I,GADYrB,EAAAA,EAAAA,MAAYpI,MAAMC,KACb/I,GAClBuS,GAIL85I,EAAiB95I,EAAMi6I,MAGnB7lK,GAAchY,EAAAA,EAAAA,IAAgB,CAACM,EAAqB/M,KACxD+M,EAAE6Y,iBAEFykK,EAAiBrqL,MAGbuqL,GAAsB99K,EAAAA,EAAAA,IAAiB+hH,IAC3C67D,EAAiB77D,EAAOxuH,IAAI,MAGxBwqL,EAAuBvB,GAAsB,CACjDvvK,SAAU7N,EACVy5C,MAAO8kI,EACPtmJ,SAAUymJ,EACVlB,mBAAmB,EACnBH,kCAAkC,EAClCn9K,aAGFtB,EAAAA,EAAAA,KAAU,KACRu+K,GAAsB,uBAAwBwB,EAAsBhhK,KACnE,CAACghK,KAEJ//K,EAAAA,EAAAA,KAAU,KACJ2/K,IAAkBA,EAAczoL,QAClCoK,MAED,CAACq+K,EAAer+K,IAEnB,MAAM0+K,GAAkBj0J,EAAAA,EAAAA,GACtB4zJ,GAAezoL,OACXyoL,OACAvnL,EACJmhB,GAEI0mK,EAAsBN,IAAkBA,EAAczoL,OACxD8oL,EACAL,EAEJ,IAAKpmK,GAAiB0mK,IAAwBA,EAAoB/oL,OAChE,OAGF,MAAM1B,GAAYoW,EAAAA,GAAAA,GAChB,gDACA6N,GAGF,OACE/jB,EAAAA,GAAAA,GAAA,OAAKF,UAAWA,EAAWkU,IAAKqV,EAAatpB,SAC1CwqL,GAAqB/2K,KAAI,EAAG3T,MAAMyE,KACjCtE,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAEPxiC,UAAU,+CACVgO,QAASwW,EACT08E,SAAUnhG,EACV65D,MAAO2wH,IAAyB/lL,EAAMvE,UAEtCC,EAAAA,GAAAA,GAACiiD,GAAAA,EAAe,CACdtkB,OAAQ99B,EACR42H,WAAW,QACX8F,cAAY,KATT18H,U,4BClGf,SAAma,WAAna,GAAwgB,WC8GlgB2qL,GAA4B,qBA2pBlC,IAAe7rL,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAM,cACJ4nB,EAAa,aACbs2J,EAAY,aACZ3hG,EAAY,mBACZ4hG,GACErpL,EAEE0rD,GAAeC,EAAAA,EAAAA,KAAmB3rD,EAAQkL,GAC1C6nB,GAAiBC,EAAAA,EAAAA,KAAqBhzB,EAAQkL,IAC9C,yBAAE+xI,GAA6Bj9I,EAAOqxC,SAASwrG,OAC/C,SAAEqC,IAAa/vE,EAAAA,GAAAA,GAAqBnvE,GACpCspL,EAAoBtpL,EAAOupL,cAAcC,EAAAA,KACzCD,EAAgBrqC,IAAasqC,EAAAA,IAA0BxpL,EAAOupL,cAAcrqC,QAAY79I,EAE9F,MAAO,CACL0xB,iBACAD,gBACA22J,iBAAkB/9H,GAAcilC,QAChCy4F,eACAE,kBAAmBA,GAAmBI,SACtCH,cAAeA,GAAeG,SAC9BzsC,2BACA0sC,oBAAqBliG,EAAamiG,SAAS9rG,SAC3C+rG,cAAc1hD,EAAAA,GAAAA,GAAmBnoI,EAAQ,iBACzCqpL,wBA1Bch8K,EAtpB+By8K,EACjD5+K,SACA8C,WACA+7K,cACAC,UACAC,iBACAC,wBACAL,eACA9xK,UACAgb,iBACAD,gBACA22J,mBACAL,eACAE,oBACAC,gBACAY,eACA3a,iBACAvyB,2BACA0sC,sBACAN,qBACAe,yBACAC,oBACAC,0BACAC,iBACAC,sBACAC,kBACAC,SACAC,eACAC,UACAC,eACAC,kBACAhhF,sBACAihF,iBACAC,gBACA1b,yBACA2b,cACAC,mBACAz6I,wBAEA,MAAM99B,GAAM5K,EAAAA,EAAAA,MACNojL,GAASpjL,EAAAA,EAAAA,OACT,qBAAEqjL,GAAoB,eAAEC,GAAc,yBAAEC,KAA6B5gL,EAAAA,EAAAA,MAErEynC,IAAUzmC,EAAAA,EAAAA,KACVD,IAAO2mC,EAAAA,GAAAA,KAEPm5I,IAAgBxjL,EAAAA,EAAAA,MAChB2vD,IAAW3vD,EAAAA,EAAAA,MAEXyjL,IAAiBzjL,EAAAA,EAAAA,MACjB0jL,IAAkBz2J,EAAAA,EAAAA,GAAsB+0J,GACxC2B,GAAuB3B,EAAY5pL,OAAS4pL,EAAc0B,IAC1D,SAAE1tL,KAAaC,EAAAA,EAAAA,MAEf2tL,GAAY1B,GAAkBxgL,QAAQwgL,GACtC/jK,GAAY+jK,GAAkBA,GAAgB2B,UAE9CC,GAA0C,UADnBF,IAAa5B,GAAa5pL,SAAU2rL,EAAAA,EAAAA,IAAuB/B,EAAY,MAG7FgC,GAAkBC,GAAgBC,KAAmBruL,EAAAA,EAAAA,KAEtDsuL,GAAuB7C,EAAmB8C,eAC1CC,GAAsB3iL,SACzByiL,IAAwB9B,GAA0BlkK,MAAemkK,IAE7DgC,GAAmBC,KAAwBzhL,EAAAA,EAAAA,IAASw+K,EAAmBgD,mBACxEE,GAAkBlD,EAAmBkD,iBACpCC,GAAyBC,KAA8B5hL,EAAAA,EAAAA,IAC5Dw+K,EAAmBmD,0BAEdE,GAAkCC,KAAuC9hL,EAAAA,EAAAA,IAAS2hL,KAGvF9tI,aAAckuI,GACdtuI,cAAeuuI,GACfruI,QAASsuI,IACP1uI,MAEIM,aAAcquI,GAAqBzuI,cAAe0uI,IAAyB5uI,KAE7E/zC,GAASZ,QAAQsgL,EAAY5pL,QAC7B8sL,GAAkBxjL,QAAQiiL,IAAsBvrL,SAC/C+sL,GAAWC,GAAaC,KAAiBxvL,EAAAA,EAAAA,KAE1CyvL,IAAWtlL,EAAAA,EAAAA,OAEjBkB,EAAAA,EAAAA,KAAU,KACHoB,KACH4hL,KACAX,GAAyB,CAAEiB,qBAAiBlrL,OAE7C,CAAC4qL,GAAiB5hL,KAErB,MAAOijL,GAAUC,KAAgB9mL,EAAAA,EAAAA,KAAQ,IACrBgD,QAAQiiL,IAAsBz7E,OAAO5tD,GAAMA,EAAEyjI,OAASzjI,EAAEmrI,SACpD,EAAC,GAAM,GAEtB,CADU/jL,QAAQiiL,IAAsB7gF,MAAMxoD,GAAMA,EAAEyjI,OAASzjI,EAAEmrI,UACtD,IACjB,CAAC9B,MAEG+B,GAAYC,KAAkBjnL,EAAAA,EAAAA,KAAQ,IACpBgD,QAAQiiL,IAAsBz7E,OAAO5tD,GAAMA,EAAEokI,uBACzC,EAAC,GAAM,GAE3B,CADeh9K,QAAQiiL,IAAsB7gF,MAAMxoD,GAAMA,EAAEokI,wBAC3C,IACtB,CAACiF,KAEEiC,IAAoBC,EAAAA,GAAAA,GAAqB,IAAIC,EAAAA,QAE7C,mBACJC,GAAkB,eAClBC,GAAc,qBACdC,GAAoB,YACpBC,GAAW,kBACXC,KACEC,EAAAA,GAAAA,GACF1kL,QAAQsO,IAAYuyK,IAA4BH,IAAiB8C,IACjEjD,EACAS,EACAoD,EAAAA,IACAzE,EACAE,EACAC,IAGI,yBACJ6E,GAAwB,kBACxBC,GAAiB,wBACjBC,KACEC,EAAAA,GAAAA,GACF9kL,QAAQsO,IAAYuyK,IAA4BH,IAAiB8C,IAAmBhwC,GACpF+sC,EACAS,EACAkD,GACAj2H,GACAiyH,IAGI,qBACJ6E,GAAoB,oBACpBC,GAAmB,cACnBC,GAAa,qBACbC,KACEC,EAAAA,GAAAA,GACFnlL,QAAQsO,GAAWuyK,GAA2B2C,IAC9CjD,EACAS,EACAkD,GACAj2H,GACA+xH,OACApoL,EACAyxB,GAkBF,SAAS+7J,GAAmBxjL,GAC1BigL,GAAyB,CAAEiB,gBAAiBlhL,GAC9C,EAjBApC,EAAAA,EAAAA,KAAU,IAAOoB,IAAS8vB,EAAAA,EAAAA,GAAsBywJ,QAAWvpL,GAAY,CAACgJ,GAAQugL,KAEhF3hL,EAAAA,EAAAA,KAAU,KACJoB,KACFiiL,GAAqBjD,EAAmBgD,mBACxCI,GAA2BpD,EAAmBmD,4BAE/C,CAACnD,EAAoBh/K,MAExBpB,EAAAA,EAAAA,KAAU,KACHoB,IACHihL,GAAyB,CAAEiB,qBAAiBlrL,MAE7C,CAACiqL,GAA0BjhL,MAM9BpB,EAAAA,EAAAA,KAAU,KACJoB,IAAUtM,KACZ+wL,EAAAA,GAAAA,QAED,CAAC/wL,GAAUsM,KAEd,MACEsmE,kBAAmBo+G,GAAoB,kBACvCl+G,GAAiB,uBACjBC,GAAsB,sBACtBC,KACEC,EAAAA,GAAAA,GAAuBu6G,IAAgBrB,IAA0B7/K,IAE/D2kL,IAAkB/jL,EAAAA,EAAAA,IAAgB,CAACykH,EAAoBu/D,KACvD5kL,OACamlK,GAAkByf,IAAwB9E,IAAiBF,EAAkBa,EACxFp7D,EAAWm7D,EAAeH,GACzB0B,GAAqBC,GAAmBE,IAC7CjB,GAAyB,CACvBa,eAAgBC,GAChBC,qBACAE,mBACAC,iCAKA0C,IAAmBjkL,EAAAA,EAAAA,IAAgB,KACvC+jL,IAAgB,MAGZG,IAAkBlkL,EAAAA,EAAAA,IAAgB,KACtC+jL,QAGII,IAAsBnkL,EAAAA,EAAAA,IAAgB,KAC1C+jL,IAAgB,GAAO,MAuBnBK,IAAkBpkL,EAAAA,EAAAA,IAAgBiM,UACtC3L,EAAE6Y,iBACFgpK,KAEA,MAAM,aAAEkC,GAAiB/jL,EAEnB6hD,QAAcmiI,EAAAA,GAAAA,GAA8BD,EAAaxrI,OAC3DsJ,GAAOjtD,QACTwqL,EAAav9H,EAAOsgI,OAalB5jC,IAAmB7+I,EAAAA,EAAAA,IAAiBM,IACxC,MAAM,MAAE6hD,GAAU7hD,EAAEC,OACdu+I,GAAiBC,EAAAA,EAAAA,IAAc58F,GAEjC28F,GAAgB5pJ,QAClBwqL,EAAa5gC,EAAgB2jC,OAI3B8B,IAAuBvkL,EAAAA,EAAAA,IAAgB,MAC3Ci/I,EAAAA,GAAAA,GAAsB,KAAM3+I,GAAMu+I,GAAiBv+I,QAG/C0mH,IAAehnH,EAAAA,EAAAA,IAAiBhI,IACpCunL,EAAoBT,EAAY3tJ,QAAO,CAACimB,EAAG+B,IAAMA,IAAMnhD,QAGnDwsL,IAAuBxkL,EAAAA,EAAAA,IAAgB,KAC3Cu/K,EAAoBT,EAAY53K,KAAKkwC,IAAC,IACjCA,EACHokI,qBAAqB,UAInBiJ,IAA6BzkL,EAAAA,EAAAA,IAAgB,KAEjDqgL,GAAyB,CAAEa,gBADTD,QAIdyD,IAAsB1kL,EAAAA,EAAAA,IAAgB,KAC1C,MAAMusF,GAAYg1F,GAClBC,GAA2Bj1F,GAC3B8zF,GAAyB,CAAEkB,wBAAyBh1F,OAGhDo4F,IAAwB3kL,EAAAA,EAAAA,IAAgB,KAC5Cu/K,EAAoBT,EAAY53K,KAAKkwC,IAAC,IAAWA,EAAGokI,yBAAqBplL,UAGrEwuL,IAAsB5kL,EAAAA,EAAAA,IAAiBhI,IAC3CunL,EAAoBT,EAAY53K,KAAI,CAACszK,EAAYrhI,IAC3CA,IAAMnhD,EACD,IACFwiL,EACHgB,qBAAsBhB,EAAWgB,0BAAuBplL,GAIrDokL,QAILlxK,IAAetJ,EAAAA,EAAAA,IAAgB,KACnC,MAAM6kL,EAAM3E,EAAOjjL,QACnB,IAAK4nL,EACH,OAGF,MAAM,MAAE3nL,EAAK,OAAEK,GAAWsnL,EAAIj1K,wBAC9Bi1K,EAAIvhH,QAAQwhH,QAAQ5nL,MAAQA,EAC5B2nL,EAAIvhH,QAAQwhH,QAAQvnL,OAASA,MAI/Bg+F,EAAAA,GAAAA,GAAkB7zF,EAAK4B,KAEvB3B,EAAAA,GAAAA,GAAc2B,KAEdtL,EAAAA,EAAAA,KAAU,KACR,MAAMu3D,EAAa+qH,GAAcrjL,QAC3B2/B,EAAQtnC,SAASo4B,eAAewwJ,IAEtC,IAAK3oH,IAAe34B,EAAO,OAE3B,MAAM,MAAE1/B,GAAUq4D,EAAW3lD,yBAE7B/D,EAAAA,EAAAA,KAAgB,KACd+wB,EAAMrjC,MAAMinC,YAAY,yBAA0B,GAAGtjC,YAEtD,CAACgqC,GAAS9nC,KAEb,MAAMw4C,IAAkEp8C,EAAAA,EAAAA,KAAQ,IACvE,EAAGsK,YAAW1G,OAAQy4C,MAC3BnkD,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLqN,QAAStgB,GACTc,KAAK,UACL0N,MAAM,cACN9N,UAAWqkD,EAAa,SAAW,GACnCr2C,QAASsE,EACTE,UAAU,eAAcvS,UAExBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,YAGd,CAAClO,KAEEiyL,IAAY/7K,EAAAA,GAAAA,IAAgB,KAChC,IAAKg5K,GAAiB,OAEtB,MAAMgD,EAAuBpG,GTjdCqG,ESidgClG,IThdhE1E,GAAI6K,UAAYD,GAChBE,EAAAA,GAAAA,IAAgB9K,IAChBA,GAAIlhL,iBAAiB,MAAM+R,SAASk6K,IAClCA,EAAGC,YAAY,SAEVhL,GAAIiL,aAAapoH,OAAOhoE,QAAU,GANpC,IAA2B+vL,ESkd9B,OAAOD,GArWoB,IAqW6BA,OAAuB5uL,IAC9E,CAACwoL,EAAcG,EAASiD,KAErBuD,GAAiBpE,IAAuBmB,IAEvCkD,GAAcC,GAAcC,GAAcC,KAAenqL,EAAAA,EAAAA,KAAQ,IACjE+pL,IAAmB9E,GAKjB,CAJYA,GAAqBz7E,OAAO5tD,GAAM0jI,EAAAA,IAA8Bt5F,IAAIpqC,EAAE2jI,YACtE0F,GAAqBz7E,OAAO5tD,GAAM4jI,EAAAA,IAA8Bx5F,IAAIpqC,EAAE2jI,YACtE0F,GAAqBz7E,OAAO5tD,GAAMwuI,EAAAA,IAA8BpkG,IAAIpqC,EAAE2jI,YACrE0F,GAAqB7gF,MAAMxoD,GAAM0jI,EAAAA,IAA8Bt5F,IAAIpqC,EAAE2jI,aAJpC,EAAC,GAAO,GAAO,IAMnE,CAAC0F,GAAsB8E,KAEpBM,IAAoBrqL,EAAAA,EAAAA,KAAQ,MAC3BilL,IACEA,GAAqB7gF,MAAMxoD,IAAOwuI,EAAAA,IAA8BpkG,IAAIpqC,EAAE2jI,aAC5E,CAAC0F,KAgBJ,IAdAziL,EAAAA,EAAAA,KAAU,KACR,GAAIujL,KAA4BE,GAKhC,OAJIW,GAASnlL,SAASc,aAAaqkL,GAASnlL,SAC5CmlL,GAASnlL,QAAUoB,OAAOC,YAAW,KACnCojL,GAAoCH,MA3XJ,KA6X3B,KACDa,GAASnlL,UACXc,aAAaqkL,GAASnlL,SACtBmlL,GAASnlL,aAAU7G,MAGtB,CAACmrL,GAAyBE,MAExBhB,GACH,OAGF,MAAMqF,GAAarF,GAAqBvrL,OAAS,EAE3C6wL,KACArF,KACC2B,MACAjD,GAAsBD,GAA2BgC,KAClD2E,IAAc1E,IAIpB,IAAIxgL,GAAQ,GACZ,MAAMolL,GAAoBvF,GAAqBvrL,OAE7C0L,GAAQsmC,GADNs+I,GACc9E,GAAY,0BAA4B,0BAC/C+E,GACO/E,GAAY,0BAA4B,0BAC/CgF,GACOhF,GAAY,0BAA4B,0BAExCA,GAAY,yBAA2B,yBAN4BsF,GAAmB,KAqGxG,MAAMC,IAAwBpE,KAAmCE,GAC3DmE,GAAoB1gJ,GAAoBoI,EAAAA,GAAAA,IAAkBptC,GAC9DwlL,GAAoBxgJ,EACpB,CACEhyC,UDhnBkJ,WCinBlJq6C,QAAQ,IACL3G,GAAQ,QAEf,OACExzC,EAAAA,GAAAA,GAACmN,EAAAA,EAAK,CACJzB,OAAQA,GACRE,QAASqgL,EACT7jJ,OAxGJ,WACE,GAAK2kJ,GAIL,OACEntL,EAAAA,GAAAA,IAAA,OAAKE,UAAU,yBAAyBsW,IAAKo9B,GAAQ5hB,MAAQ,WAAQlvB,EAAU3C,SAAA,EAC7EC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC0E,OAAK,EAACzE,MAAM,cAAc1N,KAAK,UAAUoS,UAAU,qBAAqBxE,QAASm+K,EAAQlsL,UAC/FC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAEbtN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SAAEmN,KAC7BggL,KAAmB3lK,KAEhB3nB,EAAAA,GAAAA,IAACyT,GAAAA,EAAY,CACXvT,UAAU,iEACVwT,QAAS4wC,GACT3wC,UAAU,QAAOxT,SAAA,CAEhB+K,SAASwgL,KACRtrL,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,MAAMlF,QAAS+iL,GAAqB9wL,SAAEyzC,GAAQ,SAE9Dm7I,KACC/uL,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,CAEIsyL,KAAoBzE,IAOlB5tL,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,oBAAoBlF,QAASA,IAAMoiL,QAAmBxtL,GAAW3C,SAC7E+M,GAAK,0BANR9M,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,kBAAkBlF,QAASA,IAAMoiL,IAAmB,GAAMnwL,SACtE+M,GAAK,yBAUT4+K,IAAsBD,IAA2BgC,IAEhDztL,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,WAAWlF,QAASijL,GAA2BhxL,SAC3DyzC,GAAQ4+I,GAAa,yBAA2B,4BAInDpyL,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,QAAQlF,QAASijL,GAA2BhxL,SACxDqyL,GAAa,oBAAsB,mBAIzC3E,KAAwBnC,GAAkB2G,KACzCjyL,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAM+6K,GAAmC,WAAa,WACtDjgL,QAASkjL,GAAoBjxL,SAE5B+M,GAAKihL,GAAmC,wBAA0B,uBAGtEN,IAAuB0E,IAAqBrnL,SAASwgL,KACpDwD,IACE9uL,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,kBAAkBlF,QAASmjL,GAAsBlxL,SAC7DyzC,GAAQ,gCAGXxzC,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,UAAUlF,QAASgjL,GAAqB/wL,SACpDyzC,GAAQ,kCAMlB4+I,KACC1E,IACE1tL,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CACPT,KAAK,kBAELlF,QAASA,IAAM6/K,IAAqB,GAAO5tL,SAC5C,uBAKDC,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,UAAUlF,QAASA,IAAM6/K,IAAqB,GAAM5tL,SAAC,0BASpF,CAcY+rF,GACRhsF,WAAWoW,EAAAA,GAAAA,GDznBM,WC2nBfq4K,IAAahxK,IACZ2wK,ID5nBmH,WC6nBpH9uL,ID7nBmC,WC8nBnCguL,ID9nB+D,WC+nB/DxB,GAAkB,wBAEpBzxG,iBAAe,EACftyB,oBAAkB,EAAA9nD,UAElBH,EAAAA,GAAAA,IAAA,OACEE,UAAWyd,GACXk1K,YAAajE,GACbkE,OAAQhC,GACRiC,WAjSN,SAAwB/lL,GACtBA,EAAE6Y,iBAEEonK,GAAetjL,UACjBoB,OAAON,aAAawiL,GAAetjL,SACnCsjL,GAAetjL,aAAU7G,EAE7B,EA2RMkwL,YAlUmBhmL,IACvB,MAAQimL,cAAeC,EAAUjmL,OAAQkmL,GAAenmL,EAGnDmmL,EAA8B/gK,QAAQ,IAAIzU,QAAyBu1K,IACtEjG,GAAetjL,QAAUoB,OAAOC,WAAW6jL,GA7NnB,MAiOtBsE,GAAeA,EAA2BpmK,QAAQ,IAAIpP,QAItDu1K,GACFlmL,EAAEuJ,kBAGJs4K,OAkTI3gL,QAAS2gL,GACT,0BAAyBj7I,GAAQ,4BAA6B,IAC9D,mBAAazzC,SAAA,EAEbC,EAAAA,GAAAA,GAAA,OAAKF,UD9oBwb,WC8oBjZC,UAC1CC,EAAAA,GAAAA,GAAA,QAAMF,UD/oB8c,WC+oB/ayc,EAAE,IAAIsG,EAAE,IAAIrZ,MAAM,OAAOK,OAAO,OAAOmpL,GAAG,SAEjFhzL,EAAAA,GAAAA,GAAA,OACEF,WAAWoW,EAAAA,GAAAA,GDlpB4J,WCopBrK,gBACAq8K,IDrpBmP,YCupBrPvtI,SAAUipI,GAAwBluL,SAEjCgtL,GAAqBv5K,KAAI,CAACszK,EAAYrhI,KACrCzlD,EAAAA,GAAAA,GAAC6mL,GAAmB,CAClBC,WAAYA,EACZC,wBAAyB0G,GACzBzG,qBAAsB0G,GACtBnsL,SAA0C,IAAhCwrL,GAAqBvrL,OAC/B8C,MAAOmhD,EAEP3S,SAAUwgF,GACV2zD,gBAAiBiK,IAFZpK,EAAWmM,UAAYxtI,QAMlC7lD,EAAAA,GAAAA,IAAA,OACEE,WAAWoW,EAAAA,GAAAA,GDvqBmS,WCyqB5Sq8K,IDzqB0W,YC0qB1WxyL,SAAA,EAEFC,EAAAA,GAAAA,GAAC+pL,GAAc,CACbr+K,OAAQmkL,GACR5F,cAAe+F,GACfhG,iBAAkB+F,GAClBnkL,QAASkkL,MAEX9vL,EAAAA,GAAAA,GAACkzL,GAAAA,EAAY,CACXxnL,OAAQyjL,GACRtlF,OAAQulF,GACRtmG,aAAcumG,GACd3C,eAAgBA,GAChBD,qBAAsBA,GACtBJ,cAAeiD,GACfnkF,oBAAqBmkF,GACrB1jL,QAAS2jL,MAEXvvL,EAAAA,GAAAA,GAACmzL,GAAAA,EAAkB,CACjB5mL,OAAQA,EACRb,OAAQ+jL,GACRhD,qBAAsBA,GACtBthF,oBAAqBukF,GACrB9jL,QAAS+jL,MAEX/vL,EAAAA,GAAAA,IAAA,OAAKE,UDnsB4X,WCmsBlWC,SAAA,EAC7BC,EAAAA,GAAAA,GAACozL,GAAAA,EAAgB,CACf7mL,OAAQA,EACR8C,SAAUA,EACVjQ,SAAUA,GACVga,QAASA,EACTg0K,iBAAkBA,GAClBC,eAAgBA,GAChBC,gBAAiBA,GACjBniF,oBAAqBA,EACrBihF,eAAgBA,EAChBC,cAAeA,EACfgH,mBAAiB,EACjBC,kBAAgB,EAChBxzL,UAAU,qDACVy8F,SAAS,aACTqvF,eAAgBA,KAElB5rL,EAAAA,GAAAA,GAACuzL,GAAAA,EAAY,CACXv/K,IAAK+kD,GACLl5D,GAAI2qL,GACJj+K,OAAQA,EACR8C,SAAUA,EACVmkL,wBAAsB,EACtBC,kBAAkB,aAClBr6K,QAASA,EACTG,SAAU7N,GACV2/K,QAASA,EACT1vI,gBAAiBuzI,EAAAA,IACjB3jI,YAAa/X,GAAQ,cACrB73B,SAAUmwK,EACVC,OAAQyE,GACRxrI,SAAUopI,GACVsF,aAAc5oL,QAAQsO,GAAWuyK,GAA2BP,EAAY5pL,QACxE0pL,aAAcmG,GACdsC,oBAAqBv0L,IAAYguL,GACjCwG,kBAAmBtG,MAErB1tL,EAAAA,GAAAA,IAAA,OAAKE,UDzuB0iB,WCyuB5gBC,SAAA,EACjCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLqG,IAAK44K,GACL9sL,UD5uB6jB,WC6uB7jBI,KAAK,UACL4N,QAAS0iL,GACTzqK,cAAewlK,EAAwBr5G,QAAoBxvE,EAAU3C,SAEpE8wK,IAAmBya,EAAiB93I,GAAQ,QACzC83I,EAAiB93I,GAAQ,QAAUg/I,KAExCjH,IACCvrL,EAAAA,GAAAA,GAAC6zL,GAAAA,EAAc,CACbnoL,OAAQ0kL,GACR9D,YAAaA,GAAed,EAC5BU,aAAe93J,OAAoC1xB,EAAnB6tL,GAChCuD,eAAgBrD,GAChB7kL,QAASumE,GACTtmE,oBAAqBumE,GACrBlnB,gBAAiB92B,EACjBm4J,iBAAkBA,EAClB5b,uBAAwBA,sBCnY1C,IAAehyK,EAAAA,EAAAA,KApVGo1L,EAChBroL,SACAsoL,SACAC,oBACAC,kBATiC,GAUjCnI,SACAE,cAEA,MAAMkI,GAAmB/qL,EAAAA,EAAAA,MACnBgrL,GAAiBhrL,EAAAA,EAAAA,OAEhB2+G,EAAUssE,IAAenoL,EAAAA,EAAAA,IAAiB,KAC1CqB,EAAS+mL,IAAcpoL,EAAAA,EAAAA,IAAmB,CAAC,MAC3CqoL,EAAaC,IAAkBtoL,EAAAA,EAAAA,KAAS,IACxCuoL,EAAmBC,IAAwBxoL,EAAAA,EAAAA,KAAS,IACpDyoL,EAAYC,IAAiB1oL,EAAAA,EAAAA,IAAS8nL,IAAU,IAChDa,EAAUC,IAAe5oL,EAAAA,EAAAA,IAAiB,KAC1C6oL,EAAeC,IAAoB9oL,EAAAA,EAAAA,OACnC+oL,EAAWC,IAAgBhpL,EAAAA,EAAAA,KAAkB,GAE9CY,GAAOC,EAAAA,EAAAA,KAEPooL,GAAuB7oL,EAAAA,EAAAA,IAAiBM,IAC5CkoL,EAAYloL,EAAEC,OAAOH,UAGjB6wK,GAAajxK,EAAAA,EAAAA,IAAiB0H,IAC9BtI,GAAUsI,EAAIzK,SAChByK,EAAIzK,QAAQmwD,YAIhBpvD,EAAAA,EAAAA,KAAU,IAAOoB,GAAS8vB,EAAAA,EAAAA,GAAsBywJ,QAAWvpL,GAAY,CAACgJ,EAAQugL,KAChF3hL,EAAAA,EAAAA,KAAU,KACHoB,IACH2oL,EAAY,IACZC,EAAW,CAAC,KACZE,GAAe,GACfE,GAAqB,GACrBE,EAAcZ,IAAU,GACxBc,EAAY,IACZE,OAAiBtyL,GACjBwyL,GAAa,MAEd,CAAClB,EAAQtoL,KAEZpB,EAAAA,EAAAA,KAAU,IAAMizK,EAAW4W,IAAmB,CAAC5W,EAAY7xK,IAE3D,MAAM0pL,GAAe9oL,EAAAA,EAAAA,IAAgB,CAAC+oL,EAAuB,MAC3Df,EAAW,IAAIe,EAAY,MAE3BxX,EAAAA,EAAAA,KAAoB,KAClB,MAAM90I,EAAOqrJ,EAAe7qL,QACvBw/B,IAIL4D,EAAAA,EAAAA,KAAe,KACb5D,EAAKwE,SAAS,CAAEnqB,IAAK2lB,EAAKiX,aAAcs1I,SAAU,oBAKlDC,GAAejpL,EAAAA,EAAAA,IAAgB,KAEnC,GADA4oL,GAAa,IACRxpL,EACH,OAGF,MAAM8pL,EAAyBb,SAAiCjyL,IAAlBqyL,IAAgCxnL,EAAQwnL,GAAevrH,QAE/FisH,EAAUloL,EACbiG,KAAI,CAACqB,EAAMvQ,KAGV,GAFAuQ,EAAOA,EAAK20D,OAIZ,MAAO,CACL30D,KAAM,CACJA,QAEFm0B,OAAQiW,OAAO36C,MACXA,IAAUywL,GAAiB,CAAEW,SAAS,OAE3Cj4J,OAAO3yB,SAEN6qL,EAAkB5tE,EAASv+C,OAAOosH,UAAU,EAzF1B,KA0FxB,IAAKD,GAAmBF,EAAQj0L,OAAS,EAAG,CAE1C,GADA6yL,EAAYsB,GACRF,EAAQj0L,OAAQ,CAClB,MAAMq0L,EAAiBtoL,EAAQiG,KAAKsiL,GAAMA,EAAEtsH,OAAOosH,UAAU,EA9F3C,OA8FkEn4J,OAAO3yB,SACvF+qL,EAAer0L,OAAS,EAC1B4zL,EAAaS,GAEbvB,EAAWuB,EAEf,MACET,IAGF,YADAF,GAAa,EAEf,CAEA,GAAIM,EAEF,YADAN,GAAa,GAIf,MAAM5rD,EAAsB,CAC1BysD,QAAS,CACPhuE,SAAU,CACRlzG,KAAM8gL,GAERF,cACKlB,GAAe,CAAE9lJ,UAAU,MAC5BgmJ,GAAqB,CAAEuB,gBAAgB,MACvCrB,GAAc,CAAEsB,MAAM,KAI9B,GAAItB,EAAY,CACd,MAAM,KAAE9/K,EAAI,SAAEm3E,GAAc6oG,IAAY1O,EAAAA,GAAAA,IAAyB0O,EAASe,UAAU,EA3H9D,OA4HjB,CAAC,EAENtsD,EAAQ2sD,KAAO,CACbC,eAAgB,CAACj3I,OAAO81I,OACpBlgL,GAAQ,CAAEggL,SAAUhgL,MACpBm3E,GAAY,CAAEmqG,iBAAkBnqG,GAExC,CAEA+/F,EAAOziD,MAGH8sD,GAAe9pL,EAAAA,EAAAA,IAAgB,CAAChI,EAAeuQ,KACnD,MAAMwgL,EAAa,IAAI9nL,GACvB8nL,EAAW/wL,GAASuQ,EAChBwgL,EAAWA,EAAW7zL,OAAS,GAAGgoE,OAAOhoE,QAAU6zL,EAAW7zL,OAAS0yL,EACzEkB,EAAaC,GAEbf,EAAWe,MAITgB,GAAe/pL,EAAAA,EAAAA,IAAiBhI,IACpC,MAAM+wL,EAAa,IAAI9nL,GACvB8nL,EAAWnnG,OAAO5pF,EAAO,GACzBgwL,EAAWe,QAEW3yL,IAAlBqyL,IACEA,IAAkBzwL,EACpB0wL,OAAiBtyL,GACR4B,EAAQywL,GACjBC,EAAiBD,EAAgB,KAIrClX,EAAAA,EAAAA,KAAoB,KACbuW,EAAe7qL,SAIpB6qL,EAAe7qL,QAAQnG,UAAU+zB,OAAO,YAAai9J,EAAe7qL,QAAQy2C,aAxK1D,WA4KhBs2I,GAA4BhqL,EAAAA,EAAAA,IAAiBusF,IACjDm8F,EAAiB3vK,OAAOwzE,OAGpB09F,GAA0BjqL,EAAAA,EAAAA,IAAiBM,IAC/C4nL,EAAe5nL,EAAEC,OAAOo8B,YAGpButJ,GAA8BlqL,EAAAA,EAAAA,IAAiBM,IACnD8nL,EAAqB9nL,EAAEC,OAAOo8B,YAG1BwtJ,GAAuBnqL,EAAAA,EAAAA,IAAiBM,IAC5CgoL,EAAchoL,EAAEC,OAAOo8B,YAGnBytJ,GAAiBpqL,EAAAA,EAAAA,IAAiBM,IACpB,KAAdA,EAAEwrC,SACJm9I,OAIEoB,GAAuBrqL,EAAAA,EAAAA,IAAiBM,IAC5CynL,EAAYznL,EAAEC,OAAOH,UAGjBkqL,GAAmBtqL,EAAAA,EAAAA,IAAgB,KACvC,GAAI2oL,IAAcltE,EAASv+C,OAAOhoE,OAChC,OAAOsL,EAAK,gCAMV+pL,GAAkBvqL,EAAAA,EAAAA,IAAiBhI,IACvC,MAAMuxL,EAAiBtoL,EAAQiG,KAAKsiL,GAAMA,EAAEtsH,SAAQ/rC,QAAQq4J,GAAMA,EAAEt0L,SACpE,GAAIyzL,GAAaY,EAAer0L,OAAS,IAAM+L,EAAQjJ,GAAOklE,OAAOhoE,OACnE,OAAOsL,EAAK,+BAwBhB,SAASgqL,IACP,OAAOvpL,EAAQiG,KAAI,CAACw1B,EAAQ1kC,KAC1B1E,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACR4wE,UA3OgB,IA4OhBrxE,MAAO3I,IAAUiJ,EAAQ/L,OAAS,GAAK+L,EAAQ/L,SAAW0yL,EACtDpnL,EAAK,cACLA,EAAK,wBACToiD,MAAO2nI,EAAgBvyL,GACvBoI,MAAOs8B,EAEPx7B,SAAWZ,GAAMwpL,EAAa9xL,EAAOsI,EAAE6X,cAAc/X,OACrDqqL,WAAYL,IAEbpyL,IAAUiJ,EAAQ/L,OAAS,IAC1BxB,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,uBACVuS,OAAK,EACLzE,MAAM,cACN1N,KAAK,UACLoS,UAAWxF,EAAK,UAEhBgB,QAASA,IAAMuoL,EAAa/xL,GAAOvE,UAEnCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,gBAKrB,CAeA,OACE1N,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CAACzB,OAAQA,EAAQE,QAASqgL,EAAS7jJ,QA9DvCxoC,EAAAA,GAAAA,IAAA,OAAKE,UAAU,yBAAwBC,SAAA,EACrCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC0E,OAAK,EAACzE,MAAM,cAAc1N,KAAK,UAAUoS,UAAU,uBAAuBxE,QAASm+K,EAAQlsL,UACjGC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAEbtN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SAAE+M,EAAK,cACnC9M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLC,MAAM,UACN1N,KAAK,UACLJ,UAAU,sBACVgO,QAASynL,EAAax1L,SAErB+M,EAAK,eAmDqDhN,UAAU,YAAWC,SAAA,EACpFC,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRsG,IAAKmgL,EACLlnL,MAAOH,EAAK,gBACZJ,MAAOq7G,EACP74D,MAAO0nI,IACPppL,SAAUmpL,EACVI,WAAYL,KAEd12L,EAAAA,GAAAA,GAAA,OAAKF,UAAU,qBAEfF,EAAAA,GAAAA,IAAA,OAAKE,UAAU,6BAA6BkU,IAAKogL,EAAer0L,SAAA,EAC9DC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,iBAAgBC,SAAE+M,EAAK,iBAEpCmoL,GAvBP,WACE,MAAMY,EAAiBtoL,EAAQiG,KAAKsiL,GAAMA,EAAEtsH,SAAQ/rC,QAAQq4J,GAAMA,EAAEt0L,SAEpE,OAAOmzL,SAAiCjyL,IAAlBqyL,IAAgCc,EAAed,MACnE/0L,EAAAA,GAAAA,GAAA,KAAGF,UAAU,aAAYC,SAAE+M,EAAK,6BAEpC,CAiBoBkqL,GACbrC,GACC30L,EAAAA,GAAAA,GAACqN,GAAAA,EAAU,CACTC,KAAK,gBACLC,QA/BDupL,IACJtjL,KAAI,CAACvG,EAAO3I,KAAU,CAAGoI,MAAOuyC,OAAO36C,GAAQ2I,QAAOksI,QAAS5rI,EAAQjJ,GAAOklE,WA+BzE/7D,SAAUwxC,OAAO81I,GACjBvnL,SAAU8oL,IAGZQ,QAKJ92L,EAAAA,GAAAA,GAAA,OAAKF,UAAU,qBAEfF,EAAAA,GAAAA,IAAA,OAAKE,UAAU,YAAWC,SAAA,EACxBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,wBAAuBC,SAAA,EAClCk0L,IACAj0L,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,iBACZm8B,QAASsrJ,EACT/mL,SAAU+oL,KAGdv2L,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,gBACZm8B,QAASwrJ,EACTv0K,SAAUy0K,EACVnnL,SAAUgpL,KAEZx2L,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,YACZm8B,QAAS0rJ,EACTz0K,SAAUu0K,QAAgC/xL,IAAXsxL,EAC/BxmL,SAAUipL,OAGb9B,IACC/0L,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,iBAAgBC,SAAE+M,EAAK,+BACrC9M,EAAAA,GAAAA,GAAC2+G,GAAAA,EAAQ,CACPjyG,MAAOmoL,EACPrnL,SAAU2nL,EACVr2E,mBAAiB,KAEnB9+G,EAAAA,GAAAA,GAAA,OAAKF,UAAU,OAAMC,SAAE+M,EAAK,4C,gBC/TxC,MA8VA,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAU6mC,YACT,MAAM,UAAE+H,GAAc5uC,EAEtB,MAAO,CACLiqL,eAFqBpjJ,GAAO1vB,WAAYqc,EAAAA,EAAAA,KAAkBxzB,EAAQ6mC,EAAM37B,OAAQ27B,EAAM1vB,gBAAa9V,EAGnGu0L,cAAehnJ,GAAWinJ,aAC1BC,eAAgBlnJ,GAAWmnJ,mBAC3BC,cAAepnJ,GAAWqnJ,qBARZ5oL,EA3VE6oL,EACpBrvJ,QACA+uJ,gBAAgBO,EAAAA,IAChBL,iBAAiBM,EAAAA,IACjBJ,gBAAgBK,EAAAA,IAChBpM,iBACAS,SACAE,cAEA,MAAM,SAAE0L,EAAQ,mBAAEC,EAAkB,eAAEC,IAAmB9rL,EAAAA,EAAAA,MAEnD+rL,GAAgB1uL,EAAAA,EAAAA,MAChB2uL,GAAe3uL,EAAAA,EAAAA,OAEd8D,EAAOw+J,IAAYx/J,EAAAA,EAAAA,IAAiB,KACpCi5C,EAAO6yI,IAAY9rL,EAAAA,EAAAA,IAAiB,CAAC,CAAErM,IAAIo4L,EAAAA,GAAAA,KAA0BpjL,KAAM,OAC3EqjL,EAAmBC,IAAwBjsL,EAAAA,EAAAA,KAAS,IACpDksL,EAAqBC,IAA0BnsL,EAAAA,EAAAA,KAAS,IACxD+oL,EAAWC,IAAgBhpL,EAAAA,EAAAA,KAAkB,GAE9CY,GAAO2mC,EAAAA,GAAAA,KAEP/nC,EAASZ,QAAQo9B,GACjB4mE,GAAiB9iE,EAAAA,GAAAA,GAAiB9D,GAElCowJ,EAAgBxpF,GAAgBypF,aAAejN,GAAgBkN,WAE/DC,EAAcnN,GAAgBx4K,QAAQ+vE,MAAMA,KAE5C61G,GAAc5wL,EAAAA,EAAAA,KAAQ,IACrBwwL,GAAkBG,EAIhBA,EAAYtzI,MAAM3xC,KAAK7E,IAAI,CAChC9O,GAAI8O,EAAK9O,GACTgV,KAAMlG,EAAKzB,MAAM2H,KACjB7K,YAAY,MANLs6B,GAAAA,GAQR,CAACg0J,EAAeG,IAEblb,GAAajxK,EAAAA,EAAAA,IAAiB0H,IAC9BtI,GAAUsI,EAAIzK,SAChByK,EAAIzK,QAAQmwD,YAIhB99C,EAAAA,EAAAA,KAAgB,KACd,GAAI68K,IACF/sB,EAAS+sB,EAAYvrL,MAAM2H,MAC3BsjL,EAAqBM,EAAYE,kBAAmB,GACpDN,EAAuBI,EAAYG,oBAAqB,IACnDN,GAAe,CAClB,MAAMO,EAAeJ,EAAYtzI,MAAM3xC,KAAK7E,IAAI,CAC9C9O,GAAI8O,EAAK9O,GACTgV,KAAMlG,EAAKzB,MAAM2H,SAEfgkL,EAAar3L,OAASy1L,GACxB4B,EAAa9lL,KAAK,CAAElT,IAAIo4L,EAAAA,GAAAA,KAA0BpjL,KAAM,KAE1DmjL,EAASa,EACX,IAED,CAACJ,EAAaH,EAAerB,KAEhC3sL,EAAAA,EAAAA,KAAU,IAAOoB,GAAS8vB,EAAAA,EAAAA,GAAsBywJ,QAAWvpL,GAAY,CAACgJ,EAAQugL,KAChF3hL,EAAAA,EAAAA,KAAU,KACHoB,IACHggK,EAAS,IACTssB,EAAS,CAAC,CAAEn4L,IAAIo4L,EAAAA,GAAAA,KAA0BpjL,KAAM,MAChDsjL,GAAqB,GACrBE,GAAuB,GACvBnD,GAAa,MAEd,CAACxpL,KAEJpB,EAAAA,EAAAA,KAAU,KACJoB,IAEFihC,EAAAA,EAAAA,KAAe,KACb,GAAImiE,GAAgBypF,WAAY,CAC9B,MAAMO,EAASf,EAAaxuL,SAAS9D,iBAAiB,SAChDszL,EAAYD,IAASA,EAAOt3L,OAAS,GAC3Cu3L,GAAWr/H,OACb,MACE6jH,EAAWua,QAIhB,CAACva,EAAY7xK,EAAQojG,GAAgBypF,aAExC,MAAMS,GAAa1sL,EAAAA,EAAAA,IAAiB2sL,IAClC,MAAMp5L,GAAKo4L,EAAAA,GAAAA,KACXD,EAAS,IAAIiB,EAAU,CAAEp5L,KAAIgV,KAAM,OAEnCgpK,EAAAA,EAAAA,KAAoB,KAClB,MAAM90I,EAAOgvJ,EAAaxuL,QACrBw/B,IAIL4D,EAAAA,EAAAA,KAAe,KACb5D,EAAKwE,SAAS,CAAEnqB,IAAK2lB,EAAKiX,aAAcs1I,SAAU,oBAKlDC,GAAejpL,EAAAA,EAAAA,IAAgB,KAEnC,GADA4oL,GAAa,IACRxpL,EACH,OAGF,MAAMwtL,EAAY/zI,EACf3xC,KAAK7E,IACJ,MAAMkG,EAAOlG,EAAKkG,KAAK20D,OAEvB,GAAK30D,EAEL,MAAO,CACLhV,GAAI8O,EAAK9O,GACTqN,MAAO,CACL2H,KAAMA,EAAK+gL,UAAU,EAAGyB,QAG3B55J,OAAO3yB,SAENquL,EAAejsL,EAAMs8D,OAAOosH,UAAU,EAAGuB,GAC/C,IAAKgC,GAAqC,IAArBD,EAAU13L,OAAc,CAE3C,GADAkqK,EAASytB,GACLD,EAAU13L,OAAQ,CACpB,MAAM43L,EAAej0I,EAAM3xC,KAAKsiL,IAAC,IAC1BA,EAAGjhL,KAAMihL,EAAEjhL,KAAK20D,OAAOosH,UAAU,EAAGyB,OACxC55J,QAAQq4J,GAAMA,EAAEjhL,KAAKrT,SACI,IAAxB43L,EAAa53L,OACfw3L,EAAW,IAEXhB,EAAS,IAAIoB,EAAc,CAAEv5L,IAAIo4L,EAAAA,GAAAA,KAA0BpjL,KAAM,KAErE,MACEmkL,EAAW,IAGb,YADA9D,GAAa,EAEf,CAEA,GAAIoD,GAAiBhN,EAOnB,OANAuM,EAAe,CACbtrL,OAAQ++K,EAAe/+K,OACvBiM,UAAW8yK,EAAezrL,GAC1BslD,MAAO+zI,SAETtB,IAIF,MAAMtuD,EAA2B,CAC/BzmD,KAAM,CACJ31E,MAAO,CACL2H,KAAMskL,GAERh0I,MAAO+zI,EACPP,gBAAiBT,EACjBU,kBAAmBR,IAInB9M,EACFqM,EAAS,CACPprL,OAAQ++K,EAAe/+K,OACvBs2E,KAAMymD,EACN9wH,UAAW8yK,EAAezrL,KAG5BksL,EAAOziD,GAGTsuD,OAGIyB,GAAa/sL,EAAAA,EAAAA,IAAgB,CAAChI,EAAeuQ,KACjD,MAAMokL,EAAW,IAAI9zI,GACrB8zI,EAAS30L,GAAS,IAAK20L,EAAS30L,GAAQuQ,QACpCokL,EAASA,EAASz3L,OAAS,GAAGqT,KAAK20D,OAAOhoE,QAAUy3L,EAASz3L,OAASy1L,EACxE+B,EAAWC,GAEXjB,EAASiB,MAIPK,GAAahtL,EAAAA,EAAAA,IAAiBhI,IAClC,MAAM20L,EAAW,IAAI9zI,GACrB8zI,EAAS/qG,OAAO5pF,EAAO,GACvB0zL,EAASiB,IAETpb,EAAAA,EAAAA,KAAoB,KACbka,EAAaxuL,SAIlBwuL,EAAaxuL,QAAQnG,UAAU+zB,OAAO,YAAa4gK,EAAaxuL,QAAQy2C,aA3MtD,WA+MhBu5I,GAAgCjtL,EAAAA,EAAAA,IAAiBM,IACrDurL,EAAqBvrL,EAAEC,OAAOo8B,YAE1BuwJ,GAAkCltL,EAAAA,EAAAA,IAAiBM,IACvDyrL,EAAuBzrL,EAAEC,OAAOo8B,YAG5BytJ,GAAiBpqL,EAAAA,EAAAA,IAAiBM,IACxB,UAAVA,EAAE4Y,KACJ+vK,OAIEtpB,GAAoB3/J,EAAAA,EAAAA,IAAiBM,IACzC8+J,EAAS9+J,EAAEC,OAAOH,UAGd+sL,GAAgBntL,EAAAA,EAAAA,IAAgB,KACpC,GAAI2oL,IAAc/nL,EAAMs8D,OAAOhoE,OAC7B,OAAOsL,EAAK,+BAMV4sL,GAAgBptL,EAAAA,EAAAA,IAAiBhI,IACrC,MAAM80L,EAAej0I,EAAM3xC,KAAKsiL,GAAMA,EAAEjhL,KAAK20D,SAAQ/rC,QAAQq4J,GAAMA,EAAEt0L,SACrE,GAAIyzL,GAAamE,EAAa53L,OAAS,IAAM2jD,EAAM7gD,GAAOuQ,KAAK20D,OAAOhoE,OACpE,OAAOsL,EAAK,+BA2DhB,OACElN,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CAACzB,OAAQA,EAAQE,QAASqgL,EAAS7jJ,OAvD3C,WACE,MAAMl7B,EAAQorL,EAAgB,sBAAwBhN,EAAiB,oBAAsB,mBAC7F,OACE1rL,EAAAA,GAAAA,IAAA,OAAKE,UAAU,yBAAwBC,SAAA,EACrCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC0E,OAAK,EAACzE,MAAM,cAAc1N,KAAK,UAAUoS,UAAWxF,EAAK,kBAAmBgB,QAASm+K,EAAQlsL,UACnGC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAEbtN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SAAE+M,EAAKI,MACnClN,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLC,MAAM,UACN1N,KAAK,UACLJ,UAAU,sBACVgO,QAASynL,EAAax1L,SAErB+M,EAAKwrL,EAAgB,MAAQhN,EAAiB,OAAS,cAIhE,CAqCmDx/F,GAAgBhsF,UAAU,gBAAeC,SAAA,EACtFu4L,IACAt4L,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRsG,IAAK8jL,EACL7qL,MAAOH,EAAK,cACZJ,MAAOQ,EACPgiD,MAAOuqI,IACPjsL,SAAUy+J,EACV8qB,WAAYL,IAGf4B,IACCt4L,EAAAA,GAAAA,GAAA,OAAKF,UAAU,iBAAgBC,SAC5BmN,KAGLlN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,qBAEfF,EAAAA,GAAAA,IAAA,OAAKE,UAAU,6BAA6BkU,IAAK+jL,EAAah4L,SAAA,EAC5DC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,eAAcC,SACzB+M,EAAK,mBAvDd,WACE,MAAM6sL,EAAgB,IAAIjB,KAAgBvzI,GAC1C,OAAOw0I,EAAcnmL,KAAI,CAAC7E,EAAMrK,KAC9B,MAAMs1L,EAAat1L,EAAQo0L,EAAYl3L,OACvC,OACE5B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACR4wE,UA1Qc,IA2QdrxE,MAAO3I,IAAUq1L,EAAcn4L,OAAS,GAAKm4L,EAAcn4L,SAAWy1L,EAClEnqL,EAAK,aACLA,EAAK,gBACToiD,MAAOwqI,EAAcE,GACrBltL,MAAOiC,EAAKkG,KACZqL,SAAUvR,EAAK3E,WACfwD,SAAWZ,GAAMysL,EAAWO,EAAYhtL,EAAE6X,cAAc/X,OACxDqqL,WAAYL,IAEbpyL,IAAUq1L,EAAcn4L,OAAS,IAAMmN,EAAK3E,aAC3ChK,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,qBACVuS,OAAK,EACLzE,MAAM,cACN1N,KAAK,UACLoS,UAAWxF,EAAK,UAChBgB,QAASA,IAAMwrL,EAAWM,GAAY75L,UAEtCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,iBAMvB,CA0BOusL,OAIH75L,EAAAA,GAAAA,GAAA,OAAKF,UAAU,mBAAkBC,SAC9B+M,EAAK,yBAA0B,CAC9BqmB,MAAO8jK,EAAgB9xI,EAAM3jD,QAAU82L,GAAiBG,EAAcA,EAAYtzI,MAAM3jD,OAAS,QAIrGxB,EAAAA,GAAAA,GAAA,OAAKF,UAAU,qBAEbw4L,IACAt4L,EAAAA,GAAAA,GAAA,OAAKF,UAAU,iBAAgBC,UAC7BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,wBAAuBC,SAAA,EACpCC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,uBACZm8B,QAASivJ,EACT1qL,SAAU+rL,KAEZv5L,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,yBACZm8B,QAASmvJ,EACT5qL,SAAUgsL,gB,4BCvXxB,MAuCA,IAAe76L,EAAAA,EAAAA,KAvCmBm7L,EAChCxtG,QAAO5yB,QAAO5rD,cAEd,MAAMwW,GAAchY,EAAAA,EAAAA,IAAiBM,IAEnCA,EAAE6Y,iBAEF3X,EAAQw+E,EAAMytG,OAAQztG,EAAMzsF,OAGxBC,GAAYoW,EAAAA,GAAAA,GAChB,cACAwjD,GAAS,SAGL/1D,EAAM,GAAGq2L,EAAAA,IAAuBC,EAAAA,IAAW,oBAAoB3tG,EAAM4tG,YACrE19I,EAAW29I,GAAAA,GAAcrsG,IAAInqF,GAEnC,OACE3D,EAAAA,GAAAA,GAAA,OACEF,UAAWA,EACXorC,YAAa5mB,EACbpX,MAAO,IAAIo/E,EAAM8tG,MAAM,MAAMr6L,SAE5Bs6L,EAAAA,GAAqB/tG,EAAMytG,QAC1B/5L,EAAAA,GAAAA,GAAA,OACE2D,IAAKA,EACL7D,UAAY08C,OAAwC95C,EAA7B,2BACvB4lB,IAAKgkE,EAAMytG,OACXO,QAAQ,OACR,YAAW32L,EACXlD,OAAS+7C,OAA6B95C,EAAlB63L,GAAAA,GACpB/2L,WAAW,SCjCfg3L,GAAe,KAAQ7kL,EAAAA,EACvB8kL,GAAwB,IAAO9kL,EAAAA,EAC/B+kL,GAA+B,GAAM/kL,EAAAA,EACrCglL,GAA2B,GAAMhlL,EAAAA,EAuEvC,IAAehX,EAAAA,EAAAA,KA5DqBi8L,EAClCC,WAAUv2L,QAAOw2L,YAAWv8F,sBAAqB16E,eAAcwoK,oBAE/D,MAAMr4K,GAAM5K,EAAAA,EAAAA,OAEZk3H,EAAAA,GAAAA,IAAetsH,EAAKuqF,GAEpB,MAAMx6E,GAAuBqyB,EAAAA,GAAAA,GAA6BvyB,GAEpD/W,GAAOC,EAAAA,EAAAA,MACP,SAAE3N,IAAaC,EAAAA,EAAAA,MAEf07L,EAAe37L,EACjB6T,KAAKmI,OACJ6c,EAAAA,EAAWhuB,MAAMT,MAAQmxL,GAA2BH,KAAiBp2F,EAAAA,IAAoBo2F,KA7B9D,EAgC1B3wL,EAASoJ,KAAKqpE,KAAKu+G,EAAShxF,OAAOroG,OAASu5L,IAC7C32F,EAAAA,KAAqBhlG,EAAWs7L,GAA+BD,KAEpE,OACE76L,EAAAA,GAAAA,IAAA,OACEoU,IAAKA,EAELnU,GAAI,kBAAkByE,IACtBxE,UAAU,aAAYC,SAAA,EAEtBC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,oBAAmBC,UAChCC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,kBAAkBsW,IAAI,OAAMrW,SACtC+M,EAAK+tL,EAASh7L,KAAOymG,EAAAA,IAAuB,iBAAmB,QAAQhiG,UAG5EtE,EAAAA,GAAAA,GAAA,OACEF,WAAWoW,EAAAA,GAAAA,GAAe,uBAAwB6N,GAClDle,MAAO,WAAWgE,OAClBuM,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAEnC8jB,GAAgBg3K,EAAShxF,OAAOr2F,KAAKlG,IACpC,MAAMg/E,EAAQwuG,EAAUxtL,GAExB,IAAKg/E,EACH,OAIF,MAAM0uG,EAAiB,OAAQ1uG,EAAQA,EAAQA,EAAM,GAErD,OACEtsF,EAAAA,GAAAA,GAAC85L,GAAW,CAEVxtG,MAAO0uG,EACPltL,QAASu+K,GAFJ2O,EAAen7L,WA1BvBg7L,EAASh7L,OCZdo7L,GAA8C,CAClDvZ,OAAQ,SACRwZ,OAAQ,QACRC,OAAQ,UACRC,MAAO,OACPC,SAAU,QACVC,OAAQ,MACRC,QAAS,OACTC,QAAS,WACTC,MAAO,QAKHp/F,GAAe,KAAO1mF,EAAAA,EACtByzF,GAAsB,MAAQzzF,EAAAA,EAG9B+lL,GAAmC,GAEzC,IAAIC,GACAC,GACAC,GA4LJ,UAAel9L,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IAAuB2uD,EAAAA,GAAAA,IAAK3uD,EAAQ,CAAC,kBADpBqN,EA1L2BotL,EAC7Ch8L,YACA2qL,eACA4B,oBAEA,MAAMhjK,GAAejgB,EAAAA,EAAAA,MACfguB,GAAYhuB,EAAAA,EAAAA,OAEXiiI,EAAY0wD,IAAiB7vL,EAAAA,EAAAA,OAC7B29F,EAAQmyF,IAAa9vL,EAAAA,EAAAA,OACrB+vL,EAAqBC,IAA0BhwL,EAAAA,EAAAA,IAAS,IACzD,SAAE9M,IAAaC,EAAAA,EAAAA,OAEnB0gD,aAAcqrD,EACdzrD,cAAe0rD,GACb5rD,MAEIk9C,QAAS4B,IAAwBtB,EAAAA,GAAAA,IAAwB,CAC/DC,QAAS7zE,EACTu0E,WA3B0B,MA4BxB5+C,IACFA,EAAQxnC,SAAS4lF,IACf,MAAM,GAAEv9F,GAAOu9F,EAAMvwF,OACrB,IAAKhN,IAAOA,EAAG+iI,WAAW,mBACxB,OAGF,MAAMt+H,EAAQ+gB,OAAOxlB,EAAGu3D,QAAQ,kBAAmB,KACnDskI,GAAsBp3L,GAAS84F,EAAMC,kBAGvC,MAAMC,EAAuBo+F,GAAsBl9I,QAAO,CAAC++C,EAAaF,EAAgB/4F,IAC/E+4F,GAAkB/4F,EAAQi5F,EAAcj5F,EAAQi5F,GACtDC,KAECF,IAAyBE,KAI7B0+F,EAAuB5+F,MAGnB49B,GAAoBnuB,EAAAA,GAAAA,GAAkB,GAAIovF,EAAAA,KAC1CnvF,EAAsBnD,GAAUqxB,GAEtCrhD,EAAAA,GAAAA,GAAoBziD,IAAah4B,GAAY4tG,KAG7C1iG,EAAAA,EAAAA,KAAU,KACR,IAAK+gI,EACH,OAGF,MAAMjjG,EAAShR,EAAU7tB,QACzB,IAAK6+B,EACH,OAGF,MAAM6kE,EAAUgvF,EAAsB7yF,GAAsBhhE,EAAOyE,YAAc,EAAIu8D,GAAsB,GAE3G1jB,EAAAA,GAAAA,GAAwBt9C,EAAQ6kE,KAC/B,CAACo+B,EAAY4wD,IAEhB,MAAMnvL,GAAOC,EAAAA,EAAAA,KAEPqvL,GAAgBt0L,EAAAA,EAAAA,KAAQ,KAC5B,IAAKujI,EACH,OAAO/mG,GAAAA,EAET,MAAM+3J,EAAkB,IAAIhxD,GAS5B,OARIo/C,GAAcjpL,QAChB66L,EAAgBrwF,QAAQ,CACtBnsG,GAAIymG,EAAAA,IACJh5F,KAAMR,EAAK,kBACX+8F,OAAQ4gF,IAIL4R,IACN,CAAChxD,EAAYv+H,EAAM29K,KAGtBngL,EAAAA,EAAAA,KAAU,KACRM,YAAW,KACT,MAAM0xL,EAAOA,KACXP,EAAcF,GAAUxwD,YAExB2wD,EAAUH,GAAUhyF,SAGlBgyF,GACFS,IAoFR/jL,iBAQE,OAPKojL,KACHA,GAAmB,oCACnBC,UAAsBD,IAAkBY,QAExCV,IAAYW,EAAAA,GAAAA,IAAgBZ,KAGvBD,EACT,CA3FQc,GACG92G,KAAK22G,KA1Ga,OA6GxB,IAEH,MAAMI,GAAiBpwL,EAAAA,EAAAA,IAAiBhI,IACtC43L,EAAuB53L,GACvB,MAAMq4L,EAAatzK,EAAa9f,QAASojB,QAAqB,oBAC3DxoB,cAA2B,mBAAmBG,MACjD45F,EAAAA,GAAAA,IAAc,CACZ34F,UAAW8jB,EAAa9f,QACxBuoB,QAAS6qK,EACTp9K,SAAU,QACVs+E,OAAQxB,GACR8B,YAvHyB,SA2HvB+O,GAAoB5gG,EAAAA,EAAAA,IAAgB,CAACggF,EAAeh/E,KACxD++K,EAAc//F,EAAOh/E,MAqBjBsvL,GAAqB1mL,EAAAA,GAAAA,GAAe,cAAepW,GACnDqtG,GAAkBj3F,EAAAA,GAAAA,GACtB,sBACCm1F,GAAuB,mBAG1B,OACErrG,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CAACj9B,UAAW88L,EAAoB5/J,UAAWgwE,EAAsB,EAAI,EAAG1/F,KAAK,OAAOggG,eAAa,EAAAvtG,SACxGitG,GAGAptG,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,OACEgU,IAAKojB,EACLt3B,UAAWqtG,EACX/2F,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAEnCq8L,EAAc5oL,KAnCzB,SAA8BqnL,EAA6Bv2L,GACzD,MAAM0O,EAAOioL,GAAkBJ,EAASh7L,IAExC,OAAOmT,IACLhT,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAW,sBAAqBwE,IAAU23L,EAAsB,YAAc,IAC9E5pL,OAAK,EACLkyC,OAAK,EACL32C,MAAM,cAENE,QAASA,IAAM4uL,EAAep4L,GAC9BgO,UAAWuoL,EAASvtL,KAAKvN,UAEzBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAM0F,KAGlB,OAqBQhT,EAAAA,GAAAA,GAAA,OACEgU,IAAKqV,EACL27B,SAAUomD,EACVtrG,WAAWoW,EAAAA,GAAAA,GAAe,mBAAoBX,EAAAA,GAAe,eAAiB,iBAAiBxV,SAE9Fq8L,EAAc5oL,KAAI,CAACqnL,EAAUp1I,KAC5BzlD,EAAAA,GAAAA,GAAC46L,GAAa,CACZC,SAAUA,EACVv2L,MAAOmhD,EACPq1I,UAAWjxF,EACXtL,oBAAqBA,EACrB16E,aAAco4K,GAAuBx2I,EAAI,GAAKw2I,GAAuBx2I,EAAI,EACzE4mI,cAAen/E,YAtBvBltG,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,UCPhB,IAAe/sD,EAAAA,EAAAA,KAlKiBk+L,EAC9BC,MACA9yL,aACAlK,YACAy+F,sBACAzwF,UACAivL,gBACA7xI,sBAEA,MAAMl3C,GAAM5K,EAAAA,EAAAA,MAEN0D,GAAOC,EAAAA,EAAAA,KAGP42F,GADiBtE,EAAAA,GAAAA,IAAkBrrF,EAAKuqF,KACPv0F,EACjCq2B,GAAey8J,EAAIE,iBAAmBF,EAAI18J,YAAa68J,EAAAA,EAAAA,IAAkBH,EAAK,aAC9Et0L,GAAiBJ,EAAAA,EAAAA,GAASi4B,GAAcsjE,IAEvCu5F,IAAahxL,EAAAA,EAAAA,IAAS4wL,EAAI18J,WAAWl3B,UAAYV,GAClDytC,GAAWC,EAAAA,GAAAA,GAAc4mJ,EAAI18J,WAAWl3B,SAAUg0L,GAElDC,GAAYC,EAAAA,EAAAA,IAAyBN,KAAQG,EAAAA,EAAAA,IAAkBH,EAAK,QACpEO,GAAYj1L,EAAAA,EAAAA,GAAS+0L,GAAYx5F,GAEjC25F,EAAoBxyL,QAAQ64F,GAAe05F,IAC3C,WAAEp/K,EAAU,kBAAEwF,IAAsBC,EAAAA,GAAAA,IAAa,GACjDI,EAAsB6/E,IAAgB1lF,EACtCs/K,EAAe55F,GAAe1lF,GAE9B,kBACJ+zD,EAAiB,kBAAEC,EAAiB,wBACpC8vB,EAAuB,kBAAE7vB,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBr+D,GAErB69D,GAAoBvlE,EAAAA,EAAAA,IAAgB,IAAM0H,EAAIzK,UAC9CuoE,GAAiBxlE,EAAAA,EAAAA,IAAgB,IAAM0H,EAAIzK,QAASojB,QAAQ,mCAC5DolD,GAAiBzlE,EAAAA,EAAAA,IAAgB,IAAM0H,EAAIzK,QAASpF,cAAc,+BAElEmgB,GAAchY,EAAAA,EAAAA,IAAgB,MAC9B0lE,GAAsBlkE,GAC1BA,EAAQ,IACHgvL,EACH/zL,QAASs0L,OAIPG,GAAoBlxL,EAAAA,EAAAA,IAAiBM,IACzCA,EAAEuJ,kBACFvJ,EAAE6Y,iBACFs3K,EAAeD,MAGXW,GAAsBnxL,EAAAA,EAAAA,IAAgB,KAC1CywL,IAAgBD,MAGZt6F,GAAkBl2F,EAAAA,EAAAA,IAAgB,KACtCwB,EAAS,IACJgvL,EACH/zL,QAASs0L,IACR,MAGC56F,GAAsBn2F,EAAAA,EAAAA,IAAgB,KAC1CwB,EAAS,IACJgvL,EACH/zL,QAASs0L,QACR36L,GAAW,MAGVooC,GAAkBx+B,EAAAA,EAAAA,IAAiBM,KACvCm2F,EAAAA,GAAAA,GAAoCn2F,GACpCm1F,EAAwBn1F,OAG1BtC,EAAAA,EAAAA,KAAU,KACJN,GAAYmoE,MACf,CAACA,EAAwBnoE,IAE5B,MAAMwjC,GAAgBt3B,EAAAA,GAAAA,GACpB,YACA4mL,EAAItzL,OAASszL,EAAIjzL,QAAUizL,EAAItzL,MAAQszL,EAAIjzL,OAAS,WAAa,aACjEiE,GAAW,cACXhO,GAGF,OACEF,EAAAA,GAAAA,IAAA,OACEoU,IAAKA,EACLlU,UAAW0tC,EACXtC,YAAaJ,EACbh9B,QAASwW,EACTyB,cAAemsD,EAAkBnyE,SAAA,EAE/BwV,EAAAA,IAAgBwnL,IAChB/8L,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,oBACV8N,MAAM,OACNm7F,MAAI,EACJtF,aAAW,EACX31F,QAAS0vL,EAAkBz9L,UAE3BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,QAAQxN,UAAU,6BAGhCo9L,IACCl9L,EAAAA,GAAAA,GAAA,UACEgU,IAAKiiC,EACLn2C,UAAU,cAGb0I,IAAmB+0L,IAClBv9L,EAAAA,GAAAA,GAAA,OACE2D,IAAK6E,EACL8f,IAAI,GACJxoB,UAAU,UACV0D,WAAW,IAGd85L,IACCt9L,EAAAA,GAAAA,GAAC66C,GAAAA,EAAc,CACbC,SAAO,EACPn3C,IAAK05L,EACLp3K,UAAQ,EACRG,MAAI,EACJpB,OAAK,EACL9C,yBAAuB,EACvBiE,aAAW,EACXu3K,QAAQ,UAEJj6K,IAGPK,IACC9jB,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,CAAC3a,MAAOpF,GAAkB00L,EAAY,QAAU,UAEzDpvL,QAAiCpL,IAAtBuvE,IACVryE,EAAAA,GAAAA,IAACkgB,GAAAA,EAAI,CACHpU,OAAQsmE,EACRgH,OAAQ/G,EACRJ,kBAAmBA,EACnBC,eAAgBA,EAChBC,eAAgBA,EAChBjyE,UAAU,mBACVkgB,WAAS,EACTpU,QAASumE,EACTtmE,oBAAqBumE,EAAsBryE,SAAA,EAEzCmrD,IAAmBlrD,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAAC3F,QAAS00F,EAAiBxvF,KAAK,OAAMjT,SAAE+M,EAAK,uBAC3E9M,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAAC3F,QAAS20F,EAAqBzvF,KAAK,WAAUjT,SACpD+M,EAAKo+C,EAAkB,cAAgB,qBAEzC6xI,IACC/8L,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACL,aAAW,EAACJ,KAAK,SAASlF,QAAS2vL,EAAoB19L,SAAE+M,EAAK,qBCnGpF,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM,OAAEkL,IAAW6C,EAAAA,EAAAA,KAAyB/N,IAAW,CAAC,EAClD6pD,EAAkBpgD,QAAQyB,KAAW8nB,EAAAA,EAAAA,KAAqBhzB,EAAQkL,GACxE,MAAO,CACL42E,UAAW9hF,EAAOs8L,KAAKC,MAAMD,KAC7BzyI,qBANcx8C,EA7DyBmvL,EAC3C/9L,YACA6jG,cACAm6F,cACA36G,YACAj4B,kBACA6yI,kBAEA,MAAM,cAAEC,EAAa,QAAEC,IAAYlyL,EAAAA,EAAAA,MAE7Bsd,GAAejgB,EAAAA,EAAAA,OAGnBuzF,QAAS4B,IACPtB,EAAAA,GAAAA,IAAwB,CAAEC,QAAS7zE,EAAc60K,WAhBzB,OAkB5B5zL,EAAAA,EAAAA,KAAU,KACJq5F,GACFq6F,MAED,CAACr6F,EAAaq6F,IAEjB,MAAMR,GAAoBlxL,EAAAA,EAAAA,IAAiBwwL,IACzCmB,EAAQ,CAAEnB,MAAKqB,cAAc,OAGzBjjE,GAAoBnuB,EAAAA,GAAAA,GAAkB,GAAI3Q,EAAAA,KAC1C1nE,EAAYopK,KAAiB5iE,IAAsB/3C,GAEzD,OACEnjF,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CACT/oB,IAAKqV,EACLvpB,WAAWoW,EAAAA,GAAAA,GAAe,YAAapW,EAAWyV,EAAAA,GAAe,eAAiB,iBAClFmzB,eAAe,gBACf1L,UAAWtI,EAAY,EAAI,EAC3BpnB,KAAK,OACLggG,eAAa,EAAAvtG,SAEX+9L,EAEE5iE,GAAqB/3C,GAAaA,EAAU3hF,OAC9C2hF,EAAU3vE,KAAKspL,IACb98L,EAAAA,GAAAA,GAAC68L,GAAS,CAERC,IAAKA,EACLv+F,oBAAqBA,EACrBv0F,YAAa25F,EACb71F,QAASgwL,EAAcC,OAAcr7L,EACrCq6L,cAAeS,EACftyI,gBAAiBA,GANZ4xI,EAAIj9L,MASXq7H,GAAqB/3C,GACvBnjF,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kBAAiBC,SAAC,oBAEjCC,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,CAAC99C,MAAM,YAhBf5N,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kBAAiBC,SAAC,oDCrDlC,IAAKq+L,GAAc,SAAdA,GAAc,OAAdA,EAAAA,EAAc,iBAAdA,EAAAA,EAAc,6BAAdA,EAAAA,EAAc,uBAAdA,EAAAA,EAAc,eAAdA,CAAc,MAOnB,MAAMC,GAAyD,CACpE,CAACD,GAAeE,OAAQ,QACxB,CAACF,GAAevyG,aAAc,yBAC9B,CAACuyG,GAAentC,UAAW,mBAC3B,CAACmtC,GAAeG,MAAO,WAGnBC,GAAwB,CAC5B,CAACJ,GAAeE,OAAQ,aACxB,CAACF,GAAevyG,aAAc,gBAC9B,CAACuyG,GAAentC,UAAW,gBAC3B,CAACmtC,GAAeG,MAAO,aAqEzB,IAAe5/L,EAAAA,EAAAA,KAlEwB8/L,EACrC91D,YAAWM,cAAamjD,iBAAgBsS,eAAcrL,oBACtDC,mBAAkBxe,gBAElB,MAAMhoK,GAAOC,EAAAA,EAAAA,KAEb,SAAS4xL,EAAgBhmH,GACvB,OACE34E,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAW,sBAAqB6oI,IAAchwD,EAAM,YAAc,IAElE7qE,QAASA,IAAMm7H,EAAYtwD,GAC3BrmE,UAAWxF,EAAKuxL,GAAuB1lH,IACvCtmE,OAAK,EACLkyC,OAAK,EACL32C,MAAM,cAAa7N,UAEnBC,EAAAA,GAAAA,GAAA,KAAGF,WAAWoW,EAAAA,GAAAA,GAAe,OAAQsoL,GAAsB7lH,OAGjE,CAEA,MAAMimH,GAAmBtyL,EAAAA,EAAAA,IAAgB,KACvCoyL,EAAa/1D,IAAcy1D,GAAentC,SAAW,WAAa,WAOpE,OACErxJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oBAAoBgO,QALrC,SAAyB+gB,GACvBA,EAAM1Y,iBACR,EAG+DC,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAA,CAC9F4oI,IAAcy1D,GAAeE,OAAS31D,IAAcy1D,GAAevyG,aAAeipF,IACjF90K,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,uBACVwS,UAAWq2H,IAAcy1D,GAAentC,SAAW,kBAAoB,cACvE5+I,OAAK,EACLkyC,OAAK,EACL32C,MAAM,cACNE,QAAS8wL,EAAiB7+L,UAE1BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAIdgmL,GAAoBqL,EAAgBP,GAAeE,OACnDhL,GAAoBqL,EAAgBP,GAAevyG,cAClDwnG,GAAqBsL,EAAgBP,GAAentC,WACpDoiC,GAAqBsL,EAAgBP,GAAeG,OAEpD51D,IAAcy1D,GAAeE,OAAS31D,IAAcy1D,GAAevyG,eACnE7rF,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,uBACVgO,QAASs+K,EACT95K,UAAU,gBACVD,OAAK,EACLkyC,OAAK,EACL32C,MAAM,cAAa7N,UAEnBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,wBCzBrB,IAAIkxE,IAAc,EAElB,MAyQA,IAAe7/E,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACQ,CACLw9L,mBAAmB/vL,EAAAA,EAAAA,KAAezN,GAAQw9L,kBAC1CC,yBAAyBjxF,EAAAA,EAAAA,KAA+BxsG,GACxDqmI,gBAAgBl3D,EAAAA,GAAAA,GAAqBnvE,GAAQqmI,kBAL/Bh5H,EAzQ0BqwL,EAC5CxyL,SACA8C,WACA3D,SACAglK,kBACAotB,cACAkB,oBACAziG,WACA82F,oBACAC,mBACAxzL,YACAW,SACAmL,UACAygL,gBACAlhF,sBACA5F,kBACAw4F,cACA3R,iBACAsS,eACAhS,iBACAD,uBACAoS,oBACAC,0BACAp3D,oBACGu3D,MAEH,MAAOt2D,EAAWC,IAAgB18H,EAAAA,EAAAA,IAAyBkyL,GAAeE,QACnE7T,EAAcyU,IAAmBhzL,EAAAA,EAAAA,IAAmB,KACpD69F,EAAoBo1F,IAAyBjzL,EAAAA,EAAAA,IAAmB,KACjE,SAAE9M,IAAaC,EAAAA,EAAAA,OAEd+/L,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAe5zL,EAAQE,OAASlJ,EAAWtD,IAClF,aAAEykB,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAA4BvY,EAAQE,GAAS,GAAO,GAE7FkB,GAAOC,EAAAA,EAAAA,MAERyxE,IAAe9yE,IAClB8yE,IAAc,IAGhBl0E,EAAAA,EAAAA,KAAU,KACR7J,MACC,CAACA,KAGJ6J,EAAAA,EAAAA,KAAU,KACJgpL,GACJ1qD,EAvFuB,KAwFtB,CAAC0qD,KAEJ13K,EAAAA,EAAAA,KAAgB,KACd,GAAKxc,GAAasM,IAAU2nL,EAO5B,OAHAzxL,SAASwd,KAAKhc,UAAUC,IAAI,iCAC5BzB,SAASwd,KAAKhc,UAAUC,IAAI,uBAErB,KACLzB,SAASwd,KAAKhc,UAAUic,OAAO,uBAE/BzU,YAAW,MACTuN,EAAAA,EAAAA,KAAgB,KACdvW,SAASwd,KAAKhc,UAAUic,OAAO,sCAxGd,QA4GtB,CAACg0K,EAAmBj0L,EAAUsM,IAEjC,MAAM6zL,GAAkBn2L,EAAAA,EAAAA,IAAOqhL,GAC/B8U,EAAgBh2L,QAAUkhL,GAC1BngL,EAAAA,EAAAA,KAAU,KACHi1L,EAAgBh2L,QAAQ/H,SAAUkK,IAIvC6zL,EAAgBh2L,QAAQiO,SAASlK,IAC/Bo/K,EAAe,CAAEpgG,MAAOh/E,OAG1B4xL,EAAgB,OACf,CAACxzL,EAAQghL,IAEZ,MAAMx/E,GAAoB5gG,EAAAA,EAAAA,IAAgB,CAACggF,EAAeh/E,KACxD4xL,GAAiBr1F,GAAW,IAAIA,EAAQv8F,KAExC++K,EAAc//F,MAGVkzG,GAAwBp2L,EAAAA,EAAAA,IAAO2gG,GACrCy1F,EAAsBj2L,QAAUwgG,GAChCz/F,EAAAA,EAAAA,KAAU,KACHk1L,EAAsBj2L,QAAQ/H,SAAUkK,IAI7C8zL,EAAsBj2L,QAAQiO,SAASuxE,IACrC0jG,EAAqB,CACnB1jG,kBAIJm2G,EAAgB,OACf,CAACxzL,EAAQ+gL,IAEZ,MAAMgT,GAA0BnzL,EAAAA,EAAAA,IAAiBggF,IAC/C6yG,GAAuBj7J,GAAQ,IAAIA,EAAKooD,EAAMzsF,MAE9CsrG,EAAoB7e,MAGhBosC,GAAepsH,EAAAA,EAAAA,IAAiBpL,IACpC0K,IACA8yL,EAAax9L,MAGT4hL,GAAsBx2K,EAAAA,EAAAA,IAAgB,CAC1C+xE,EAAqB0yC,EAAoB8/C,EAA0B6uB,KAEnEn6F,IAAkBlnB,EAAS0yC,EAAU8/C,GAAgB,EAAM6uB,MAyDvD5sL,GACJlT,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kBAAkBgO,QANrC,SAAyB+gB,GACvBA,EAAM1Y,iBACR,EAI8DpW,SACvDy+E,KACCx+E,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CACTzvB,MAAMs6H,EAAAA,GAAAA,GAAsB,QAASF,GACrC1qG,UAAW2rG,EACXO,YAAanqF,OAAOyK,OAAO60I,IAAwB78L,OAAOzB,SA7DpE,SAAuBwZ,EAAmBomL,GACxC,OAAQh3D,GACN,KAAKy1D,GAAeE,MAClB,OACEt+L,EAAAA,GAAAA,GAAC87L,GAAW,CACVh8L,UAAU,aACVusL,cAAen/E,IAGrB,KAAKkxF,GAAevyG,YAClB,OACE7rF,EAAAA,GAAAA,GAACgrG,GAAiB,CAChBlrG,UAAU,aACVuV,UAAW3J,IAAW6N,EACtBgjF,SAAUA,EACVoH,YAAaj4F,IAAW6N,GAAYomL,GACpCpzL,OAAQA,EACR44F,eAAgB/lG,GAAY0/L,EAC5B3zF,oBAAqBs0F,IAG3B,KAAKrB,GAAentC,SAClB,OACEjxJ,EAAAA,GAAAA,GAACkiL,GAAa,CACZpiL,UAAU,aACVuV,UAAW3J,IAAW6N,EACtBoqF,cAAa+sE,GAAkBhlK,IAAW6N,GAAYomL,GACtDpjG,SAAUA,EACVm0E,gBAAiBA,EACjBtrE,gBAAiB45F,EACjBzyL,OAAQA,EACR8C,SAAUA,EACV81F,eAAgB/lG,GAAY0/L,EAC5Bv5F,gBAAiBu9E,IAGvB,KAAKsb,GAAeG,KAClB,OACEv+L,EAAAA,GAAAA,GAAC69L,GAAS,CACR/9L,UAAU,aACV6jG,cAAam6F,GAAcpyL,IAAW6N,GAAYomL,GAClD7B,YAAaA,EACbC,YAAaA,IAMvB,MAmBK3+L,IACCY,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLkyC,OAAK,EACL32C,MAAM,cACN0E,UAAWxF,EAAK,SAChBhN,UAAU,sBACVI,KAAK,OACL4N,QAASlC,EAAQ7L,UAEjBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAGftN,EAAAA,GAAAA,GAACy+L,GAAgB,CACf91D,UAAWA,EACXM,YAAaL,EACbwjD,eAAgBA,EAChBtX,UAAWkqB,EACXN,aAAchmE,EACd26D,kBAAmBA,EACnBC,iBAAkBA,OAKxB,GAAIl0L,EAAU,CACZ,IAAKykB,EACH,OAGF,MAAM+7K,GAAkB1pL,EAAAA,GAAAA,GACtB,yBACA6N,EACA86K,GAAqB,mBACrBxL,GAAqB,sBACrB2L,GAAqB,oBAGvB,OAAI3L,GAEArzL,EAAAA,GAAAA,GAAA,OAAKF,UAAW8/L,EAAgB7/L,SAC7B+S,KAML9S,EAAAA,GAAAA,GAACsuG,GAAAA,EAAM,CAAAvuG,UACLC,EAAAA,GAAAA,GAAA,OAAKF,UAAW8/L,EAAgB7/L,SAC7B+S,KAIT,CAEA,OACE9S,EAAAA,GAAAA,GAAC8f,GAAAA,EAAI,CACHpU,OAAQA,EACRE,QAASA,EACTs2F,WAAYmxF,EACZvzL,WAAWoW,EAAAA,GAAAA,GAAe,aAAcpW,GACxC+L,oBAAqBD,EACrBi0L,aAAetqL,EAAAA,QAAkC7S,EAAnB08L,EAC9Bt5K,aAAevQ,EAAAA,QAAkC7S,EAAnB28L,EAC9B5wF,mBAAoBl5F,EAAAA,GACpBg5F,WAAS,KACJ8kF,EAAoB4L,EAAsB,CAC7C1rL,UAAW,OACXwM,UAAW,UACZhgB,SAEA+S,Q,gBC1TP,MAmCA,IAAenU,EAAAA,EAAAA,KAnCKmhM,EAClBC,aACArmI,QACAk+G,UACAzrK,cACA2nB,OACAktE,WACAlzF,cAEA,MAAMwW,GAAchY,EAAAA,EAAAA,IAAgB,KAClCwB,EAAQkzF,MAGV,OACEphG,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CAEPxiC,WAAWoW,EAAAA,GAAAA,GAAe,6CAA8C6pL,GAAc,eACtFx9J,WAAS,EACTz0B,QAASwW,EACTo1C,MAAOA,EAAM35D,SAAA,CAEZggM,IACC//L,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CAAC3zB,KAAK,QAAQ4zB,KAAMA,KAE7Bl0B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BH,EAAAA,GAAAA,IAAA,QAAME,UAAU,QAAOC,SAAA,CAAC,IAErB63K,MAEH53K,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,UAAEg0B,EAAAA,GAAAA,GAAW5nB,UAdpCyrK,MCiIX,IAAej5K,EAAAA,EAAAA,KAAKqhM,EAAAA,GAAAA,IA7HqBC,EACvCv0L,SACAa,SACAgwH,eACA03C,cACAisB,eACAC,qBACAC,OACA/U,UACAv9K,UACAlC,cAEA,MAAM,eAAEmqK,EAAc,eAAEsqB,IAAmBt0L,EAAAA,EAAAA,MAErCsd,GAAejgB,EAAAA,EAAAA,OACf,aAAEya,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAA4BvY,OAAQhJ,OAAWA,GAAW,GAEnG49L,GAAoBh0L,EAAAA,EAAAA,IAAgB,EAAGomD,QAAOklH,cAElD,MACM9oH,GADYjgB,EAAAA,EAAAA,MAAYpI,MAAMC,KACdgsB,GAEtBqjH,EAAe,CACb6B,QAAS,IAAIA,IAAUr7C,GAAgBztE,EAAM,KAAIuwG,EAAAA,EAAAA,IAAgBvwG,KAAS,OAE5EhhD,OAGIyyL,GAAuBj0L,EAAAA,EAAAA,IAAiBzM,IAC5CwgM,EAAe,CAAE9zL,SAAQi0L,aAAc3gM,IACvCiO,OAGI2yL,GAA8B34L,EAAAA,EAAAA,KAAQ,KAC1C,GAAKo4L,GAAc1+L,QAAW2+L,EAC9B,OAAOD,EAAa1sL,KAAKktL,IACvB,MAAM9/L,EAAUu/L,EAAmBO,EAAMC,cACzC,MAAO,CACL9gM,GAAI6gM,EAAM7gM,GACV+3K,QAAS8oB,EAAME,SACfz0L,YAAavL,GAASkS,QAAQ+B,MAAMA,MAAQ,SAG/C,CAACqrL,EAAcC,IAEZU,GAAuBv0L,EAAAA,EAAAA,IAAiBqC,KACvCA,EAAKipK,QAAQh1C,WAAWyoD,IAAUjtI,MAAM,MAIzC,OAAQzvC,EACV4xL,EAAqB5xL,EAAK9O,IAE1BygM,EAAkB3xL,IAGb,KASHmyL,EAAuBhY,GAAsB,CACjDvvK,SAAU7N,EACVy5C,OAR8Br9C,EAAAA,EAAAA,KAAQ,KACtC,GAAKmsK,GAAgBwsB,EACrB,MAAQ,GACL1yG,OAAO0yG,GAA+B,GAAIxsB,GAAe,MAC3D,CAACA,EAAawsB,IAKf98J,SAAUk9J,EACVj1L,YAGIm1L,EAAW9sB,IAAgBA,EAAYzyK,QAAY0+L,IAAiBA,EAAa1+L,OAYvF,IAVA8I,EAAAA,EAAAA,KAAU,KACJy2L,GACFn1L,MAED,CAACm1L,EAASn1L,KAEbtB,EAAAA,EAAAA,KAAU,KACRu+K,GAAsB,uBAAwBiY,EAAsBz3K,KACnE,CAACy3K,KAECj9K,GAAgBk9K,EACnB,OAGF,MAAMjhM,GAAYoW,EAAAA,GAAAA,GClIG,WDoInB,iCACA6N,GAGF,OACEnkB,EAAAA,GAAAA,IAAA,OAAKE,UAAWA,EAAWkU,IAAKqV,EAAatpB,SAAA,CAC1C0gM,GAA6BjtL,KAAI,CAACktL,EAAOp8L,KACxCtE,EAAAA,GAAAA,GAAC8/L,GAAW,CAEVloB,QAAS8oB,EAAM9oB,QACfzrK,YAAau0L,EAAMv0L,YACnB2nB,KAAMssK,EACNL,YAAU,EACV/+F,SAAU0/F,EAAM7gM,GAChBiO,QAASyyL,EACT7mI,MAAOonI,IAAyBx8L,GAP3B,cAAco8L,EAAM7gM,QAU5Bo0K,GAAazgK,KAAI,CAACokK,EAAStzK,KAC1BtE,EAAAA,GAAAA,GAAC8/L,GAAW,CAEVloB,QAASA,EAAQA,QACjBzrK,YAAayrK,EAAQzrK,YAErB2nB,MAAM+a,EAAAA,EAAAA,MAAYpI,MAAMC,KAAKkxI,EAAQllH,OACrCqtI,YAAU,EACV/+F,SAAU42E,EACV9pK,QAASwyL,EACT5mI,MAAOonI,GAAwBL,GAA6Bj/L,QAAU,KAAO8C,GARxE,GAAGszK,EAAQllH,SAASklH,EAAQA,oBEzF3C,IAAej5K,EAAAA,EAAAA,KAzCsBqiM,EACnCt1L,SAAQuoK,cAAaroK,cAErB,MAAM,eAAEmqK,IAAmBhqK,EAAAA,EAAAA,OACrB,SAAE3M,IAAaC,EAAAA,EAAAA,OAEd+/L,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAe5zL,EAAQE,OAASlJ,EAAWtD,GAElFklB,GAAchY,EAAAA,EAAAA,IAAiBsrK,IACnC7B,EAAe,CACb6B,QAAS,IAAIA,MAEfhsK,OAGF,OACE5L,EAAAA,GAAAA,GAAC8f,GAAAA,EAAI,CACHpU,OAAQA,EACR6H,UAAU,OACVwM,UAAU,SACVnU,QAASA,EACT9L,UAAU,iBACV+L,oBAAqBD,EACrBi0L,aAAetqL,EAAAA,QAAkC7S,EAAnB08L,EAC9Bt5K,aAAevQ,EAAAA,QAAkC7S,EAAnB28L,EAC9B5wF,mBAAoBl5F,EAAAA,GACpBg5F,WAAS,EAAAxuG,SAERk0K,EAAYzgK,KAAKytL,IAChBjhM,EAAAA,GAAAA,GAAC8/L,GAAW,CAEVloB,QAASqpB,EAAWrpB,QACpBzrK,YAAa80L,EAAW90L,YACxB60F,SAAUigG,EAAWrpB,QACrB9pK,QAASwW,GAJJ28K,EAAWrpB,gBC4C1B,IAAej5K,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAM,SAAE4yE,GAAa99E,EAAO89E,SAAS8rG,SAGrC,MAAO,CAAE9rG,WAAUj0B,iBAFK72B,EAAAA,EAAAA,KAAqBhzB,EAAQkL,GAEjBqzB,sBADP0B,EAAAA,EAAAA,KAA2BjgC,MAJxCqN,EA3D8BwyL,EAChD30L,SACA8C,WACA3D,SACA65F,kBACA35F,UACAuzE,WACAj0B,kBACAtrB,2BAEA,MAAMvW,GAAejgB,EAAAA,EAAAA,OACf,aAAEya,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAA4BvY,OAAQhJ,OAAWA,GAAW,GACnGy+L,GAAe9qK,EAAAA,EAAAA,GAAsB8oD,GAAU,GAC/CiiH,EAAoBjiH,GAAYgiH,EAChC1e,GAAoBC,EAAAA,GAAAA,GAAqBn2K,EAAQ8C,IAGrDstF,QAAS4B,IACPtB,EAAAA,GAAAA,IAAwB,CAAEC,QAAS7zE,EAAcu0E,WApBzB,OAsB5BtzF,EAAAA,EAAAA,KAAU,IAAOoB,GAAS8vB,EAAAA,EAAAA,GAAsB5vB,QAAWlJ,GAAY,CAACgJ,EAAQE,IAEhF,MAIM9L,GAAYoW,EAAAA,GAAAA,GAChB,gDACA6N,GACEq9K,GAAmB5/L,QAAW,UAGlC,OACExB,EAAAA,GAAAA,GAAA,OACEgU,IAAKqV,EACLvpB,UAAWA,EACX+lB,YAdoBo9J,KACtBR,EAAkB,CAAEvhL,KAAM,mBAaKnB,SAE5B8jB,GAAgBu9K,EACfA,EAAkB5tL,KAAK6qE,IACrBr+E,EAAAA,GAAAA,GAACugG,GAAa,CAEZliB,QAASA,EACTn+E,KAAMunG,EAAAA,IACNlJ,oBAAqBA,EACrBzwF,QAASpC,EAAS65F,OAAkB7iG,EACpCs+F,SAAU3iB,EACVnzB,gBAAiBA,EACjBw1C,YAAU,EACV9gE,qBAAsBA,GARjBy+C,EAAQx+E,MAWfgkB,GACF7jB,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,SACNhpD,QC3FV,IAAgB,KAAO,YAAY,YAAc,YC4GjD,IAAe/D,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAQ4yE,SAAU0f,GAAgBx9F,EAAOynF,aAAamiG,SAItD,MAAO,CAAEpsF,cAAa3zC,iBAHE72B,EAAAA,EAAAA,KAAqBhzB,EAAQkL,GAGdqzB,sBAFV0B,EAAAA,EAAAA,KAA2BjgC,MAJxCqN,EArEkCykL,EACpDznL,SACA+gL,uBACAthF,sBACAv/F,UACAizF,cACA3zC,kBACAtrB,uBACAtf,aAEA,MAAM,yBAAE+gL,IAA6Bt1L,EAAAA,EAAAA,MAE/Bsd,GAAejgB,EAAAA,EAAAA,OACf,aAAEya,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAA4BvY,OAAQhJ,OAAWA,GAAW,GACnGy+L,GAAe9qK,EAAAA,EAAAA,GAAsBwoE,GAAa,GAClDuiG,EAAoBviG,GAAesiG,GAEzCtnH,EAAAA,GAAAA,GAAoBxwD,GAEpB,MACEszE,QAAS4B,IACPtB,EAAAA,GAAAA,IAAwB,CAAEC,QAAS7zE,EAAcu0E,WAvBzB,IAuB4D5zF,YAAa0B,KAErGpB,EAAAA,EAAAA,KAAU,IAAOoB,GAAS8vB,EAAAA,EAAAA,GAAsB5vB,QAAWlJ,GAAY,CAACgJ,EAAQE,IAEhF,MAAM6zL,GAA0BnzL,EAAAA,EAAAA,IAAiBg1L,IAC1C51L,IACLy/F,EAAoBm2F,GACpB7U,EAAqB,CACnB1jG,WAAYu4G,EAAGzhM,KAEjBwhM,QAGIvhM,GAAYoW,EAAAA,GAAAA,GAChBqH,GAAOygB,KACP,mCACAja,GACCq9K,GAAmB5/L,QAAU+b,GAAO47H,QAGvC,OACEn5I,EAAAA,GAAAA,GAAA,OACEgU,IAAKqV,EACLvpB,UAAWA,EAAUC,SAEpB8jB,GAAgBu9K,EACfA,EAAkB5tL,KAAK6qE,IACrBr+E,EAAAA,GAAAA,GAACugG,GAAa,CAEZliB,QAASA,EACTv+E,UAAWyd,GAAOgkL,YAClBrhM,KAAMshM,EAAAA,IACNjjG,oBAAqBA,EACrBzwF,QAAS2xL,EACTz+F,SAAU3iB,EACVnzB,gBAAiBA,EACjBw1C,YAAU,EACV9gE,qBAAsBA,EACtBtf,OAAQA,GAVH+9D,EAAQx+E,MAafgkB,GACF7jB,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,SACNhpD,Q,gBCnDV,MA8HA,IAAe/D,EAAAA,EAAAA,KA5HsBk1L,EACnCnoL,SACA+1L,kBAAiB,EACjBv2I,kBACAohI,cACA3b,yBACAub,eACA4H,iBACAvH,mBACAmV,iBACA91L,UACAC,sBACAU,SACAo1L,cACAC,mBACAC,kBACAle,wBACAme,mBACAvmG,gBACA37D,uBACAmiK,oBACAC,kBACA5jD,4BAEA,MAAM,iBACJ6jD,IACEl2L,EAAAA,EAAAA,OAEGqzL,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAe5zL,EAAQE,IAC7Ds2L,EAA4BC,IAAiCj2L,EAAAA,EAAAA,KAAS,GAEvEsnC,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,MACN2uJ,EAAgBC,EAAWC,IAAarjM,EAAAA,EAAAA,MAE/C0mC,EAAAA,GAAAA,IAAsB,EAAEkvB,MAElBnpD,IAAWmpD,IACbytI,IACAH,EAA8Br3L,QAAQ6lK,OAEvC,CAACjlK,EAAQilK,IAEZ,MAAOv3J,EAASmpL,EAAaC,IAAiBvjM,EAAAA,EAAAA,KAExCwjM,GAAiCn2L,EAAAA,EAAAA,IAAiBiT,IACtD8iL,IACI91L,GAAQ01L,EAAiB,CAAE11L,SAAQgT,gBAczC,OAXAjV,EAAAA,EAAAA,KAAU,KACHoB,EAKLd,YAAW,KACT23L,MA3DqB,KAsDrBC,MAOD,CAAC92L,EAAQ62L,EAAaC,KAGvB5iM,EAAAA,GAAAA,IAACkgB,GAAAA,EAAI,CACHpU,OAAQA,EACRsU,WAAS,EACTzM,UAAU,QACVwM,UAAW0hL,EAAiB,MAAQ,SACpC3hM,WAAWoW,EAAAA,GAAAA,GACT,iBAAkB,QAAS,wBAAyByrL,GAAe,gBAErE/1L,QAASA,EACTC,oBAAqBA,EACrBg0L,aAAetqL,EAAAA,QAAkC7S,EAAnB08L,EAC9Bt5K,aAAevQ,EAAAA,QAAkC7S,EAAnB28L,EAC9B5wF,mBAAoBl5F,EAAAA,GAAaxV,SAAA,CAGhC4hM,IAAgBK,IACfhiM,EAAAA,GAAAA,GAAC0iM,GAAAA,EAAgB,CACf/e,sBAAuBA,EACvBke,gBAAiBA,EACjBpe,sBAAkB/gL,EAClBo/L,iBAAkBA,EAClBhlJ,WAAS,EACT1jC,QAASA,EACTmiF,cAAeA,EACf37D,qBAAsBA,EACtBmiK,kBAAmBA,EACnB5f,cAAY,EACZ/jC,sBAAuBA,EACvBukD,WAAYF,EACZ72L,QAASA,EACT9L,WAAWoW,EAAAA,GAAAA,GAAeksL,GAAkB,8BAIhDxiM,EAAAA,GAAAA,IAAA,OACEE,WAAWoW,EAAAA,GAAAA,GACT,uBACAksL,GAAkB,+BAEpBhsL,IAAKo9B,EAAQ5hB,MAAQ,WAAQlvB,EAAU3C,SAAA,CAEtCmsL,IAAgBlsL,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,OAAOlF,QAASo+K,EAAansL,SAAEyzC,EAAQ,sBACtE84I,GAAewH,IACd9zL,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,WAAWlF,QAASgmL,EAAe/zL,SAC/CyzC,EAAQ0X,EAAkB,cAAgB,qBAG9CohI,GAAewH,GAAkBoO,IAChCliM,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,cAAclF,QAASy+K,EAAiBxsL,SACpDyzC,EAAQ,oBAGZmuJ,GAAeC,IACd5hM,EAAAA,GAAAA,GAACyT,GAAAA,EAAQ,CAACT,KAAK,SAASlF,QAAS4zL,EAAe3hM,SAC7C+M,EAAK,2B,4BC9HlB,MAAM81L,GAAsE,CAC1EC,EAAG,OACHC,OAAQ,OACRC,EAAG,SACHC,GAAI,SACJC,EAAG,YACHC,IAAK,gBACLC,KAAM,YACNC,KAAM,WAEFC,GAAazhM,SAASuB,cAAc,OA0c1C,IAAexE,EAAAA,EAAAA,KAxcqB2kM,EAClC53L,SACA63L,iBACAC,gBACAC,mBACA73L,cAEA,MAAMyd,GAAejgB,EAAAA,EAAAA,MACfs6L,GAAkBt6L,EAAAA,EAAAA,OAClB,aAAEya,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAA4BvY,IACpEi4L,EAAmBC,EAAiBC,IAAoB5kM,EAAAA,EAAAA,MACxD8oE,EAAS+7H,IAAc53L,EAAAA,EAAAA,IAAS,KAChC63L,EAAeC,IAAoB93L,EAAAA,EAAAA,KAAS,IAC5C+3L,EAAgBC,IAAqBh4L,EAAAA,EAAAA,OACrCi4L,EAAqBC,IAA0Bl4L,EAAAA,EAAAA,IAA+B,CAAC,IAEtF5B,EAAAA,EAAAA,KAAU,IAAOoB,GAAS8vB,EAAAA,EAAAA,GAAsB5vB,QAAWlJ,GAAY,CAACgJ,EAAQE,KAChFy4L,EAAAA,GAAAA,GACE34L,EACA2d,EACAzd,GACA,IAGFtB,EAAAA,EAAAA,KAAU,KACJq5L,EACFD,EAAgBn6L,QAASmwD,SAEzBoqI,EAAW,IACXE,GAAiB,MAElB,CAACL,KAEJr5L,EAAAA,EAAAA,KAAU,KACHuZ,IACHggL,IACAO,EAAuB,CAAC,GACxBF,OAAkBxhM,MAEnB,CAACmhM,EAAkBhgL,KAEtBvZ,EAAAA,EAAAA,KAAU,KACR,IAAKoB,IAAW83L,EACd,OAGF,MAAMc,EAAwC,CAAC,EAC/C,IAAI,cAAEC,GAAkBf,EAAcgB,wBACtC,KAAOD,GAAiBA,EAAc1kM,KAAO4kM,EAAAA,KAAmB,CAC9D,MAAMC,EAAa9B,GAAwB2B,EAAcI,SACrDD,IACFJ,EAAgBI,IAAc,GAGhCH,EAAgBA,EAAcA,aAChC,CAEAH,EAAuBE,KACtB,CAAC54L,EAAQ83L,EAAeI,IAE3B,MAAMgB,GAAmBt4L,EAAAA,EAAAA,IAAgB,KACvC,IAAKk3L,EACH,OAGF,MAAMqB,EAAYl6L,OAAOm6L,eACrBD,IACFA,EAAUE,kBACVF,EAAUG,SAASxB,OAIjByB,GAAsB34L,EAAAA,EAAAA,IAAgB,KAC1C,MAAMu4L,EAAYl6L,OAAOm6L,eACrBD,GACFpB,EAAiBoB,EAAUK,WAAW,OAIpCC,GAAkB74L,EAAAA,EAAAA,IAAiB84L,IACvC,GAAK5B,EASL,OANAH,GAAWgC,gBAAgB7B,EAAc8B,iBACrCF,GACF/B,GAAW59L,iBAAiB8/L,GAAAA,IAA6B/tL,SAASs0H,IAChEA,EAAG6lD,YAAY7lD,EAAG05D,aAAa,WAG5BnC,GAAW7R,aAGdiU,GAAqBn5L,EAAAA,EAAAA,IAAgB,KACzC,GAAKk3L,EAIL,OAAOA,EAAcgB,wBAAwBD,iBAG/C,SAASmB,IACP,MAAMx8J,EAAQw6J,EAAgBn6L,QAC9B,IAAK2/B,EACH,OAGF,MAAM,YAAE2D,EAAW,YAAE84J,EAAW,WAAE5/G,GAAe78C,EACjD,GAAIy8J,GAAe94J,EAEjB,YADAq3J,OAAkBxhM,GAIpB,IAAI5C,EAAY,GACZimF,EAAa4/G,EAAc94J,IAC7B/sC,EAAY,cAEVimF,EAAa,IACfjmF,GAAa,cAGfokM,EAAkBpkM,EACpB,CAOA,SAAS8lM,EAAyBpgL,GAChC,GAAI2+K,EAAoB3+K,GACtB,MAAO,SAGT,GAAY,cAARA,GAA+B,kBAARA,GACzB,GAAIu5B,OAAO6K,KAAKu6I,GAAqBj4F,MAClC25F,GAASA,IAASrgL,GAAO1a,QAAQq5L,EAAoB0B,MAEtD,MAAO,gBAEJ,GAAI1B,EAAoB2B,WAAa3B,EAAoB4B,cAC9D,MAAO,UAIX,CAEA,MAAMC,GAAoB15L,EAAAA,EAAAA,IAAgB,KACxC,GAAI63L,EAAoB8B,QAAS,CAC/B,MAAMn0K,EAAU2zK,IAChB,IACGjC,IACG1xK,GACDA,EAAQ89H,QAAQs2C,aAAeC,EAAAA,GAAsBC,UACpDt0K,EAAQ8/J,YAEZ,OASF,OANA9/J,EAAQ6/J,YAAY7/J,EAAQ8/J,kBAC5BwS,GAAwBE,IAAe,IAClCA,EACH2B,SAAS,KAIb,CAEA,MAAMpxL,EAAOswL,IACbvjM,SAASykM,YACP,cAAc,EAAO,2CAA2CF,EAAAA,GAAsBC,YAAYvxL,YAEpGjJ,OAGI06L,GAAiBh6L,EAAAA,EAAAA,IAAgB,KACrC83L,GAAwBE,IAEtB1iM,SAASykM,YAAY/B,EAAgB1kL,KAAO,eAAiB,QAC7Dm/B,OAAO6K,KAAK06I,GAAiB9sL,SAASgO,IACvB,WAARA,GAA4B,cAARA,IAAwB1a,QAAQw5L,EAAgB9+K,KACvE5jB,SAASykM,YAAY7gL,MAIzBy/K,IACO,IACFX,EACH1kL,MAAO0kL,EAAgB1kL,YAKvB2mL,GAAmBj6L,EAAAA,EAAAA,IAAgB,KACvC1K,SAASykM,YAAY,UACrBpB,IACAb,GAAwBE,IAAe,IAClCA,EACHkC,QAASlC,EAAgBkC,cAIvBC,GAAsBn6L,EAAAA,EAAAA,IAAgB,KAC1C1K,SAASykM,YAAY,aACrBpB,IACAb,GAAwBE,IAAe,IAClCA,EACHoC,WAAYpC,EAAgBoC,iBAI1BC,GAA0Br6L,EAAAA,EAAAA,IAAgB,KAC9C,GAAI63L,EAAoB4B,cAAe,CACrC,MAAMj0K,EAAU2zK,IAChB,IACGjC,IACG1xK,GACmB,QAApBA,EAAQ6yK,UACP7yK,EAAQ8/J,YAEZ,OASF,OANA9/J,EAAQ6/J,YAAY7/J,EAAQ8/J,kBAC5BwS,GAAwBE,IAAe,IAClCA,EACHyB,eAAe,KAInB,CAEA,MAAMlxL,EAAOswL,IACbvjM,SAASykM,YAAY,cAAc,EAAO,QAAQxxL,WAClDjJ,OAGIg7L,GAAsBt6L,EAAAA,EAAAA,IAAgB,KAC1C,GAAI63L,EAAoB2B,UAAW,CACjC,MAAMh0K,EAAU2zK,IAChB,IACGjC,IACG1xK,GACmB,SAApBA,EAAQ6yK,UACP7yK,EAAQ8/J,YAEZ,OASF,OANA9/J,EAAQ6/J,YAAY7/J,EAAQ8/J,kBAC5BwS,GAAwBE,IAAe,IAClCA,EACHwB,WAAW,KAIf,CAEA,MAAMjxL,EAAOswL,GAAgB,GAC7BvjM,SAASykM,YAAY,cAAc,EAAO,6CAA6CxxL,YACvFjJ,OAGIi7L,GAAuBv6L,EAAAA,EAAAA,IAAgB,KAC3C,MAAMw6L,IAAoBp2I,EAAAA,GAAAA,IAAeqX,IAAY,IAAIiT,MAAM,KAAKxnE,IAAIuzL,WAAWrgL,KAAK,KAExF,GAAIq9K,EAAe,CACjB,MAAMjyK,EAAU2zK,IAChB,IAAK3zK,GAA+B,MAApBA,EAAQ6yK,QACtB,OAOF,OAJC7yK,EAA8B5e,KAAO4zL,OAEtCl7L,GAGF,CAEA,MAAMiJ,EAAOswL,GAAgB,GAC7BP,IACAhjM,SAASykM,YACP,cACA,EACA,WAAWS,yCAAwDjyL,SAErEjJ,OAGI2Z,GAAgBjZ,EAAAA,EAAAA,IAAiBM,IACrC,MAUMq0C,EAVqD,CACzDhzB,EAAG21K,EACHjgJ,EAAG2iJ,EACHU,EAAGP,EACHhhJ,EAAG8gJ,EACHU,EAAGL,EACH1gJ,EAAGygJ,EACHO,EAAGlB,GCjWM,SAAyBp5L,GACtC,MAAM4Y,EAAM5Y,EAAE4Y,KAAO5Y,EAAEoqD,KAEvB,OAAOxxC,EAAIo9G,WAAW,OAASp9G,EAAI44B,MAAM,GAAGmL,cAAgB/jC,CAC9D,CDgWoC2hL,CAAgBv6L,KAG9CA,EAAE48K,SACG58K,EAAE2kB,SAAW3kB,EAAE68K,UAChBxoI,IAKNr0C,EAAE6Y,iBACF7Y,EAAEuJ,kBACF8qC,SAGF32C,EAAAA,EAAAA,KAAU,KACJoB,GACF9J,SAASkU,iBAAiB,UAAWyP,GAGhC,IAAM3jB,SAASmU,oBAAoB,UAAWwP,KACpD,CAAC7Z,EAAQ6Z,IAEZ,MAAMzY,GAAOC,EAAAA,EAAAA,KASb,IAAK8W,EACH,OAGF,MAAM/jB,GAAYoW,EAAAA,GAAAA,GAChB,gBACA6N,EACA4/K,GAAqB,sBAGjByD,GAA0BlxL,EAAAA,GAAAA,GAC9B,iCACApL,QAAQi9D,EAAQvmE,SAAW,SAGvBqE,EAAQ09L,EACV,SAASA,EAAehnL,aAAagnL,EAAe1gL,8BAA8B0gL,EAAehnL,OACjG,GAEJ,OACE3c,EAAAA,GAAAA,IAAA,OACEoU,IAAKqV,EACLvpB,UAAWA,EACX+F,MAAOA,EACPylD,UA/BJ,SAAgC1+C,GAChB,UAAVA,EAAE4Y,KAAmBm+K,IACvBkD,IACAj6L,EAAE6Y,iBAEN,EA4BIylB,YAAaxnC,EAAAA,EAAU3D,SAAA,EAEvBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,wBAAuBC,SAAA,EACpCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLC,MAAM,cACN0E,UAAU,eACVxS,UAAW8lM,EAAyB,WACpC93L,QAASk4L,EAAkBjmM,UAE3BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,mBAEbtN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,2BACfE,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLC,MAAM,cACN0E,UAAU,YACVxS,UAAW8lM,EAAyB,QACpC93L,QAASw4L,EAAevmM,UAExBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,YAEbtN,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLC,MAAM,cACN0E,UAAU,cACVxS,UAAW8lM,EAAyB,UACpC93L,QAASy4L,EAAiBxmM,UAE1BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,cAEbtN,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLC,MAAM,cACN0E,UAAU,kBACVxS,UAAW8lM,EAAyB,aACpC93L,QAAS24L,EAAoB1mM,UAE7BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,kBAEbtN,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLC,MAAM,cACN0E,UAAU,qBACVxS,UAAW8lM,EAAyB,iBACpC93L,QAAS64L,EAAwB5mM,UAEjCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,qBAEbtN,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLC,MAAM,cACN0E,UAAU,iBACVxS,UAAW8lM,EAAyB,aACpC93L,QAAS84L,EAAoB7mM,UAE7BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,iBAEbtN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,2BACfE,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACC,MAAM,cAAc0E,UAAWxF,EAAK,2BAA4BgB,QAAS81L,EAAgB7jM,UAC/FC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,eAIftN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,6BAA4BC,UACzCH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,wBAAuBC,SAAA,EACpCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACC,MAAM,cAAc0E,UAAWxF,EAAK,UAAWgB,QAAS+1L,EAAiB9jM,UAC/EC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,kBAEbtN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,2BAEfE,EAAAA,GAAAA,GAAA,OACEF,WAAWoW,EAAAA,GAAAA,GAAe,uCAAwC+tL,GAAgBlkM,UAElFC,EAAAA,GAAAA,GAAA,SACEgU,IAAK0vL,EACL5jM,UAAU,+BACVoB,KAAK,OACLwL,MAAOq7D,EACPxc,YAAY,eACZg7D,aAAa,MACbxuD,UAAU,MACV3hD,IAAI,OACJ5I,SAvTZ,SAA6BZ,GAC3Bk3L,EAAWl3L,EAAEC,OAAOH,OACpBg5L,GACF,EAqTY1gJ,SAAU0gJ,OAId9lM,EAAAA,GAAAA,IAAA,OAAKE,UAAWsnM,EAAwBrnM,SAAA,EACtCC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,2BACfE,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLC,MAAM,cACN0E,UAAWxF,EAAK,QAChBhN,UAAU,gBACVgO,QAAS+4L,EAAqB9mM,UAE9BC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,0BEhczB,IAAe3O,EAAAA,EAAAA,KAhCyB0oM,EACtC/6G,QAAO5yB,QAAO5rD,UAASywF,0BAEvB,MAAMj6E,GAAchY,EAAAA,EAAAA,IAAiBM,IAEnCA,EAAE6Y,iBAEF3X,IAAUw+E,MAGNxsF,GAAYoW,EAAAA,GAAAA,GAChB,cACAwjD,GAAS,SAGX,OACE15D,EAAAA,GAAAA,GAAA,OACEF,UAAWA,EACXorC,YAAa5mB,EACbpX,MAAOo/E,EAAMA,MAAMvsF,UAEnBC,EAAAA,GAAAA,GAAC6rF,GAAAA,EAAW,CACV9C,WAAYuD,EAAMzsF,GAClBK,KAhCkB,GAiClBsjG,qBAAmB,EACnBH,sBAAoB,EACpBtD,8BAA+BxB,SC0HvC,IAAe5/F,EAAAA,EAAAA,KAvGoBu0L,EACjCxnL,SACAm+F,SACA/gB,eACAl9E,UACAygL,gBACAlhF,sBACAuhF,iBACAD,2BAEA,MAAMpjK,GAAejgB,EAAAA,EAAAA,OACf,aAAEya,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAA4BvY,OAAQhJ,OAAWA,GAAW,GACnG4kM,GAAqCj7J,EAAAA,GAAAA,GACzCw9D,EAAOroG,OAAS,IAAIsnF,KAAiB+gB,QAAUnnG,EAxD5B,MAyDhB,IAELm3E,EAAAA,GAAAA,GAAoBxwD,GAEpB,MACEszE,QAAS4B,IACPtB,EAAAA,GAAAA,IAAwB,CAAEC,QAAS7zE,EAAcu0E,WAtBzB,IAsB4D5zF,YAAa0B,IAE/F67L,GAAoBj7L,EAAAA,EAAAA,IAAiBggF,IACzC+/F,EAAc//F,EAAMytG,QACpBrN,EAAe,CAAEpgG,MAAOA,EAAMzsF,QAG1B4/L,GAA0BnzL,EAAAA,EAAAA,IAAiBggF,IAC/C6e,EAAoB7e,GACpBmgG,EAAqB,CAAE1jG,WAAYuD,EAAMzsF,QAGrCy4H,GAAehsH,EAAAA,EAAAA,IAAiBggF,IAChC,WAAYA,EACdi7G,EAAkBj7G,GAElBmzG,EAAwBnzG,MAItBhoE,GAAchY,EAAAA,EAAAA,IAAgB,CAACytL,EAAgBl6L,KACnDwsL,EAAc0N,GACdrN,EAAe,CAAEpgG,MAAOzsF,OAGpB2nM,GAAyBl7L,EAAAA,EAAAA,IAAiBggF,IAC9C6e,EAAoB7e,GACpBmgG,EAAqB,CAAE1jG,WAAYuD,EAAMzsF,QAGrC4nM,EAAgB3e,GAAsB,CAC1CvvK,SAAU7N,EACVy8K,cAAc,EACdhjI,MAAOmiJ,EACPte,8BAA8B,EAC9BrlJ,SAAU20F,EACV1sH,aAGF+5B,EAAAA,GAAAA,IAAsB,EAAE+hK,WACIhlM,IAAtBglM,IAA0D,IAAvBA,GArG3C,SAAwBpjM,EAAe+kB,GACrC,MAAM9jB,EAAY8jB,EAAa9f,QAC/B,IAAKhE,EACH,OAGF,MAAM,eAAEojL,EAAc,YAAED,GAAgBH,GACtChjL,EACA,eAZoB,GAcpB,GACA,GACA,GAGF,IAAKmjL,EAAYlnL,SAAWknL,EAAYpkL,GACtC,OAEF,MAAM8nF,EAAQu8F,EAAe,GAC7B,IAAKA,EAAe94J,SAASvrB,IACvBA,IAAU8nF,IAAU87F,GAAe3iL,EAAWmjL,EAAYt8F,IAAQ,GAAQ,CAC9E,MACM6gB,EAAuB,UADZ3oG,EAAQqkL,EAAeA,EAAennL,OAAS,GAAK,QAAU,OAxBxD,GAyBgB8C,EAA6B,GAEpEohF,EAAAA,GAAAA,GAAwBngF,EAAW0nG,EACrC,CACF,CA+EI06F,CAAeF,EAAep+K,KAC7B,CAACo+K,IAEJ,MAAM3nM,GAAYoW,EAAAA,GAAAA,GAChB,gDACA6N,GAGF,OACE/jB,EAAAA,GAAAA,GAAA,OACEgU,IAAKqV,EACLvpB,UAAWA,EAAUC,SAEpB8jB,GAAgByjL,EACfA,EAAW9zL,KAAI,CAAC84E,EAAOhoF,IACrB,WAAYgoF,GACVtsF,EAAAA,GAAAA,GAAC85L,GAAW,CAEVxtG,MAAOA,EACP5yB,MAAO+tI,IAAkBnjM,EACzBwJ,QAASwW,GAHJgoE,EAAMzsF,KAMbG,EAAAA,GAAAA,GAACqnM,GAAiB,CAEhB/6G,MAAOA,EACP5yB,MAAO+tI,IAAkBnjM,EACzBwJ,QAAS05L,EACTjpG,oBAAqBA,GAJhBjS,EAAMzsF,MAQfgkB,GACF7jB,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,SACNhpD,OCpGV,IAAe/D,EAAAA,EAAAA,KAxCkBipM,EAC/B16L,QACAf,cACAi0B,YACAsc,WACAgd,QACA31C,uBAAuB,GACvBjW,cAEA,IAAIgF,EAEJ,MAAM+0L,GAAmBz/L,EAAAA,EAAAA,GAASg4B,GAAY0nK,EAAAA,EAAAA,IAAmB1nK,QAAa19B,GAW9E,OAVAg6C,EAAWA,GAAYmrJ,GAGrB/0L,GACE9S,EAAAA,GAAAA,GAAA,OAAK2D,IAAK+4C,EAAU58C,UAAWikB,EAAsBuE,IAAI,GAAGy/K,SAAS,QAAQvkM,WAAW,IAEjF0J,IACT4F,GAAUstF,EAAAA,GAAAA,IAAgBlzF,EAAO,KAIjCtN,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPo3B,MAAOA,EACP55D,WAAWoW,EAAAA,GAAAA,GAAe,iCAAqD,iBAAZpD,GAAwB,aAC3Fo4B,YAAa63D,GAAAA,EACbj1F,QAASA,EAAQ/N,SAAA,EAEjBC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SACD,iBAAZ+S,GAAuBihB,EAAAA,GAAAA,GAAWjhB,GAAWA,KAEvDlT,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,CAC3BmN,IAAUlN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,QAAOC,SAAEmN,IAClCf,IAAgBnM,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SAAEoM,aCvBvD,IAAexN,EAAAA,EAAAA,KAvBqBqpM,EAAGtuI,QAAOuuI,eAAcn6L,cAC1D,MAAM,MACJZ,EAAK,YAAEf,GACL87L,EAEE3wL,EAAM,QAAS2wL,EAAeA,EAAa3wL,SAAM5U,EACjDwlM,EAAe,iBAAkBD,EAAeA,EAAaC,kBAAexlM,EAE5E4hB,GAAchY,EAAAA,EAAAA,IAAgB,KAClCwB,EAAQm6L,MAGV,OACEjoM,EAAAA,GAAAA,GAAC4nM,GAAU,CACTluI,MAAOA,EACPt5B,UAAW8nK,EACXh7L,MAAOA,GAASoK,EAChBnL,YAAaA,EACb2B,QAASwW,OCSf,IAAe3lB,EAAAA,EAAAA,KAxBiBwpM,EAC9BF,eAAc/8I,kBAAiB4yI,cAAav/F,sBAAqBzwF,cAEjE,MAAM,IAAEgvL,GAAQmL,EAEV3jL,GAAchY,EAAAA,EAAAA,IAAgB,CAAC87L,EAAgBr3E,EAAoB8/C,KACvE/iK,EAAQm6L,EAAcl3E,EAAU8/C,MAGlC,GAAKisB,EAIL,OACE98L,EAAAA,GAAAA,GAAC68L,GAAS,CACRC,IAAKA,EACLv+F,oBAAqBA,EACrBz+F,UAAU,sBACVgO,QAASgwL,EAAcx5K,OAAc5hB,EACrCwoD,gBAAiBA,OC2CvB,IAAevsD,EAAAA,EAAAA,KAvDmB0pM,EAChC3uI,QAAO4uI,eAAcL,eAAcn6L,cAEnC,IAAIjM,EACAu+B,EACA8nK,EAEA,UAAWD,IACbpmM,EAAQomM,EAAapmM,OAGnB,cAAeomM,IACjB7nK,EAAY6nK,EAAa7nK,WAEvB,iBAAkB6nK,IACpBC,EAAeD,EAAaC,cAG9B,MAAMK,GAAmBngM,EAAAA,EAAAA,IAAS0/L,EAAAA,EAAAA,IAAmBI,IAC/ClpE,GAAe52H,EAAAA,EAAAA,GAASvG,IAAS2mM,EAAAA,EAAAA,IAAkB3mM,EAAO,cAC1DkiB,GAAuBqyB,EAAAA,GAAAA,GAA6B4oF,GAAgBupE,GAEpEjkL,GAAchY,EAAAA,EAAAA,IAAgB,KAClCwB,EAAQm6L,MAGV,GAAIK,EACF,OACE1oM,EAAAA,GAAAA,IAAA,OAAKE,UAAU,kCAAkCgO,QAASwW,EAAYvkB,SAAA,EACpEC,EAAAA,GAAAA,GAAA,OAAK2D,IAAM9B,GAAOu+B,WAAWl3B,SAAYq/L,EAAkBjgL,IAAI,GAAG9kB,WAAW,KAC7ExD,EAAAA,GAAAA,GAAA,OACE2D,IAAKq7H,EACLl/H,WAAWoW,EAAAA,GAAAA,GAAe,aAAc6N,GACxCuE,IAAI,GACJ9kB,WAAW,OAMnB,MAAM,MAAE0J,EAAK,YAAEf,GAAgB87L,EAE/B,OACEjoM,EAAAA,GAAAA,GAAC4nM,GAAU,CACTluI,MAAOA,EACPt5B,UAAW8nK,EACXxrJ,SAAUsiF,GAAgB5+F,GAAWl3B,QACrC6a,qBAAsBA,EACtB7W,MAAOA,EACPf,YAAaA,EACb2B,QAASwW,OC3Bf,IAAe3lB,EAAAA,EAAAA,KA9BqB8pM,EAClCR,eACA/8I,kBACAqzC,sBACAzwF,UACA8xB,2BAEA,MAAM,QAAEy+C,GAAY4pH,EAEpB,GAAK5pH,EAIL,OACEr+E,EAAAA,GAAAA,GAACugG,GAAa,CACZliB,QAASA,EACTn+E,KAAMwoM,EAAAA,IACNnqG,oBAAqBA,EACrBrxF,MAAOmxE,EAAQiO,MACfxsF,UAAU,sBACVgO,QAASA,EACTkzF,SAAUinG,EACV/8I,gBAAiBA,EACjBw1C,YAAU,EACVI,eAAa,EACblhE,qBAAsBA,OCXtBw9B,IAAevnD,EAAAA,GAAAA,KAAUwnD,GAAOA,KAAM,KAAK,GA4MjD,IAAe1+D,EAAAA,EAAAA,KAzLwBgqM,EACrCj9L,SACAgnD,QACAk2I,YACAC,mBACAC,WACAC,gBACA79I,kBACA4yI,cACAp2I,WACA97C,UACAo9L,iBACAppK,2BAEA,MAAM,SACJ4K,EAAQ,SACRy+J,EAAQ,qBACRC,IACEn9L,EAAAA,EAAAA,MAEEsd,GAAejgB,EAAAA,EAAAA,OACf,aAAEya,EAAY,qBAAEE,IAAyBE,EAAAA,GAAAA,GAA4BvY,OAAQhJ,OAAWA,GAAW,GACnGymM,GAAoBn9J,EAAAA,GAAAA,GAAiB48J,EAAW/kL,IAEpD84E,QAAS4B,IACPtB,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS7zE,EACT60K,WA/C6B,IAgD7Bl0L,YAAa0B,IAGTu4C,GAAiB33C,EAAAA,EAAAA,IAAgB,EAAGggB,gBACpCA,IAAc6xC,EAAAA,GAAkBC,WAClChB,GAAa1V,MAIX+/I,EAAgB3e,GAAsB,CAC1CvvK,SAAU7N,EACVs9K,6BAA8BmgB,EAC9BlgB,kBAAmBkgB,EACnBhkJ,MAAO0jJ,EACPllK,SAAUqlK,EACVp9L,aAGFtB,EAAAA,EAAAA,KAAU,KACRu+K,GAAsB,uBAAwB4e,EAAep+K,KAC5D,CAACo+K,IAEJ,MAAM2B,GAAe98L,EAAAA,EAAAA,IAAgB,KACnCk+B,EAAS,CAAE3qC,GAAI6yD,IACfu2I,EAAS,CAAEv2I,MAAOA,EAAQ22I,MAAOP,EAAU/5I,gBAGvCu6I,GAAoBh9L,EAAAA,EAAAA,IAAgB,KACxC,MAAMgwD,GAAQC,EAAAA,GAAAA,KAEd2sI,EAAqB,CACnBx2I,MAAOA,EACPp7C,IAAKyxL,EAAezxL,IACpBxC,WAAYi0L,EAAel0L,KAC3BynD,QACAitI,qBAAqB,OAInBC,GAAuBnzK,EAAAA,EAAAA,GAC3BwyK,GAAkBrnM,OACdqnM,OACAnmM,EACJmhB,GAEI4lL,EAA2BZ,GAAkBrnM,OAASqnM,EAAmBW,EAE/E,IAAK3lL,IAAkB4lL,GAA0BjoM,SAAUsnM,EACzD,OAGF,MAAMhpM,GAAYoW,EAAAA,GAAAA,GAChB,oCACAX,EAAAA,GAAe,eAAiB,gBAChC4zL,GAAqB,UACrBplL,GAqFF,OACEnkB,EAAAA,GAAAA,IAACslD,GAAAA,EAAc,CACblxC,IAAKqV,EACLvpB,UAAWA,EACXqlD,MAAOskJ,EACP39I,aAAa,uBACbwS,YAAU,EACVlZ,WAAYnB,EACZylJ,cAAe,IAAI3pM,SAAA,CAElB+oM,IA1FD9oM,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAAC5iB,QAAM,EAAC5f,UAAU,wBAAwBgO,QAASs7L,EAAarpM,UACvEC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAE+oM,EAAUj0L,SA0FpCk0L,IAnFD/oM,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAAC5iB,QAAM,EAAC5f,UAAU,wBAAwBgO,QAASw7L,EAAkBvpM,UAC5EC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEgpM,EAAel0L,SAmFzC/J,QAAQ2+L,GAA0BjoM,SA7E9BioM,EAA0Bj2L,KAAI,CAACm2L,EAAiBrlM,KACrD,OAAQqlM,EAAgBzoM,MACtB,IAAK,MACH,OACElB,EAAAA,GAAAA,GAACmoM,GAAS,CAERF,aAAc0B,EACdprG,oBAAqBA,EACrBzwF,QAASk7L,EACT99I,gBAAiBA,EACjB4yI,YAAaA,GALR6L,EAAgB9pM,IAS3B,IAAK,QACH,OACEG,EAAAA,GAAAA,GAACqoM,GAAW,CAEVC,aAAca,EACdlB,aAAc0B,EACd77L,QAASk7L,GAHJW,EAAgB9pM,IAO3B,IAAK,UACH,OACEG,EAAAA,GAAAA,GAACyoM,GAAa,CAEZR,aAAc0B,EACdprG,oBAAqBA,EACrBzwF,QAASk7L,EACT99I,gBAAiBA,EACjBtrB,qBAAsBA,GALjB+pK,EAAgB9pM,IAS3B,IAAK,QACL,IAAK,OACL,IAAK,OACH,OACEG,EAAAA,GAAAA,GAACqoM,GAAW,CAEV3uI,MAAO+tI,IAAkBnjM,EACzB2jM,aAAc0B,EACd77L,QAASk7L,GAHJW,EAAgB9pM,IAM3B,IAAK,UACL,IAAK,QACL,IAAK,QACH,OACEG,EAAAA,GAAAA,GAACgoM,GAAa,CAEZtuI,MAAO+tI,IAAkBnjM,EACzB2jM,aAAc0B,EACd77L,QAASk7L,GAHJW,EAAgB9pM,IAO3B,QACE,iBCnEV,IAAelB,EAAAA,EAAAA,KAnHkBirM,EAC/Bl+L,SACAa,SACAs9L,mBACAC,gBACAlqK,uBACAh0B,cAEA,MAAM,kBAAEm+L,EAAiB,iBAAEroK,IAAqB31B,EAAAA,EAAAA,MAG1Co5B,GAAY0J,EAAAA,EAAAA,MAAYpI,MAAMC,KAC9BwiB,GAAYra,EAAAA,EAAAA,MAAYsa,MAAMziB,KAE9B55B,GAAOC,EAAAA,EAAAA,KACPsc,GAAejgB,EAAAA,EAAAA,OAEdg2L,EAAkBC,EAAkB2K,IAAmB1K,EAAAA,GAAAA,GAAe5zL,EAAQE,OAASlJ,IAE9F4H,EAAAA,EAAAA,KAAU,KACJoB,GACFs+L,MAED,CAACt+L,EAAQs+L,IAEZ,MAAM9f,GAAmB59K,EAAAA,EAAAA,IAAiBzM,IACxC+L,IACAm+L,EAAkB,CAAEx9L,OAAQA,EAAS09L,SAAUpqM,OAG3CqqM,EAAsBphB,GAAsB,CAChDvvK,SAAU7N,EACVy5C,MAAO2kJ,EACPnmK,SAAUumJ,EACVhB,mBAAmB,EACnBH,kCAAkC,EAClCn9K,YAaF,OAVAtB,EAAAA,EAAAA,KAAU,KACRu+K,GAAsB,uBAAwBqhB,EAAqB7gL,KAClE,CAAC6gL,KAEJ5/L,EAAAA,EAAAA,KAAU,KACJw/L,IAAkBA,EAActoM,QAClCoK,MAED,CAACk+L,EAAel+L,KAGjBhM,EAAAA,GAAAA,IAACkgB,GAAAA,EAAI,CACHpU,OAAQA,EACR6H,UAAU,OACVwM,UAAU,SACVnU,QAASA,EACT9L,UAAU,aACV+L,oBAAqBD,EACrBi0L,aAAetqL,EAAAA,QAAkC7S,EAAnB08L,EAC9Bt5K,aAAevQ,EAAAA,QAAkC7S,EAAnB28L,EAC9B5wF,mBAAoBl5F,EAAAA,GACpBg5F,WAAS,EAAAxuG,SAAA,EAETC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,gBAAgBsW,IAAI,OAAMrW,SAAE+M,EAAK,wBAC/Cq4B,GAAa+jB,GAAa4gJ,GAAet2L,KAAI,EAAG3T,KAAIikF,aAAax/E,KAChE,MAAM4rC,EAAO/K,EAAUtlC,GACjBoP,EAAOi6C,EAAUrpD,GACjBi0B,EAAOoc,GAAQjhC,EAiBfk7L,GAAkBj0L,EAAAA,GAAAA,GAAe2zL,IAAqBhqM,GAAM,YAElE,OACED,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CAEPxiC,UAAU,yDAEVgO,QAtBgBwW,MACbw/D,GAAalkD,EAChBsqJ,EAAiBrqL,GAEjB6hC,EAAiB,CACf9gC,QAASkM,EAAK,+BACdisI,WAAYjsI,EAAK,QACjBnL,OAAQ,CACNA,OAAQ,mBACR2nI,QAAS,CAAC,MAcd5vE,MAAOwwI,IAAwB5lM,EAC/Bo9C,cAAe9hB,GAAwBkkD,IAClC9jF,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAAaxN,UAAU,wBAAyBC,SAAA,EAEhEC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CACL3zB,KAAK,QACL4zB,KAAMA,EACNh0B,UAAWqqM,KAEbvqM,EAAAA,GAAAA,IAAA,OAAKE,UAAU,OAAMC,SAAA,CAClB+zB,IAAQ9zB,EAAAA,GAAAA,GAACgrD,GAAAA,EAAa,CAACl3B,KAAMA,EAAMs2K,QAAM,KAC1CpqM,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SACvBmwC,EACGpjC,EAAK,4BACLA,EAAK,cAAemC,GAAMo7L,aAAc,YAlB3CxqM,YCGjB,IAAelB,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAU6lG,mBACF,CACLx8F,KAAKu+E,EAAAA,EAAAA,KAAiB5nF,EAAQ6lG,GAC9B5H,YAAY2iF,EAAAA,EAAAA,KAAyB5gL,GACrCu+B,sBAAsB0B,EAAAA,EAAAA,KAA2BjgC,MALnCqN,EAzFgC47L,EAClDpjG,eAAc3I,sBAAqB7zF,MAAK40F,aACxC7vC,cAAa7vB,2BAEb,MAAM,aAAEwqD,EAAY,iBAAE0b,EAAgB,eAAEzb,IAAmBt+E,EAAAA,EAAAA,MAErDyyF,GAAkBp1F,EAAAA,EAAAA,MAElB0D,GAAOC,EAAAA,EAAAA,KACPmkK,EAAUxmK,IAAQA,EAAIu9F,YAAcn9F,QAAQJ,EAAIs9F,eAChDuiG,EAAoBz/L,QAAQJ,GAAKy0E,UAEjCiiH,GAAoBt5L,EAAAA,EAAAA,KAAQ,KAChC,IAAK4C,EACH,MAAO,GAGT,MAAM8/L,GAAqB9/L,EAAIy0E,UAAU1hD,QAAO,EAAGkkE,eAAgBA,KAAc,IAC9EvjD,MAAM,EArBuB,GAsB1BqsJ,GAAmB//L,EAAIggM,QAAU,IAAIl3L,KAAI,EAAG3T,QAASA,IACrD8qM,EAAgBjgM,EAAIy0E,SAAWz0E,EAAIy0E,SAAS1hD,QAAO,EAAG59B,SAAU4qM,EAAgB56K,SAAShwB,KAAO,GAEtG,MAAO,IAAI2qM,KAAuB9/L,EAAIggM,QAAU,MAAQC,GAAevsJ,MAAM,EAxBrD,KAyBvB,CAAC1zC,KAEJJ,EAAAA,EAAAA,KAAU,MAEHigM,GAAqBnJ,EAAkB5/L,OA7BpB,GA6BoDkJ,GAC1E0/E,EAAa,CACXlB,eAAgB,CACdjP,UAAWvvE,EAAIuvE,eAIpB,CAACswH,EAAmBnJ,EAAkB5/L,OAAQ4oF,EAAc1/E,EAAKw8F,IAEpE,MAAMD,GAAiBtnG,EAAAA,EAAAA,KAAY,KACjCmmG,EAAiB,CAAEoB,mBAClB,CAACpB,EAAkBoB,IAEhB0jG,GAAqBjrM,EAAAA,EAAAA,KAAa0+E,IACtCgM,EAAe,CAAEnB,eAAgB7K,EAAQ6K,mBACxC,CAACmB,IAEJ,IAAK3/E,EACH,OAGF,MAAMmgM,EAAoBzJ,EAAkB5/L,OAAS,EAErD,OACE5B,EAAAA,GAAAA,IAAA,OAAkBE,UAAU,cAAcsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAA,EAC5EH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,qBAAoBC,SAAA,EACjCH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,QAAQsW,IAAI,OAAMrW,SAAE2K,EAAIwC,SACtClN,EAAAA,GAAAA,GAAA,KAAGF,UAAU,QAAQsW,IAAI,OAAMrW,SAAE+M,EAAK,WAAYpC,EAAIyoB,MAAO,WAE/DnzB,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAWoxK,EAAU,gBAAaxuK,EAClCkL,MAAM,UACN1N,KAAK,OACL6oG,MAAI,EACJ3kD,OAAK,EACLt2C,QAASm5F,EAAelnG,SAEvB+M,EAAKokK,EAAU,qBAAuB,0BAG3CtxK,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2CAA0CC,SAAA,EACvDC,EAAAA,GAAAA,GAAA,UAAQgU,IAAKwqF,EAAiB1+F,UAAU,mBACtC+qM,IAAqB7qM,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,IAC9BsiL,GAAqBzJ,EAAkB5tL,KAAK6qE,IAC3Cr+E,EAAAA,GAAAA,GAACugG,GAAa,CACZliB,QAASA,EACTn+E,KAAM4qM,EAAAA,IACNvsG,oBAAqBA,EACrBj+E,QAASg/E,GAAc7vC,EACvBuxC,SAAU3iB,EACVvwE,QAAS88L,EACTpqG,eAAa,EACb5gE,qBAAsBA,EACtB4+D,gBAAiBA,WA9Bf9zF,EAAI7K,QCpDZu9D,IAAevnD,EAAAA,GAAAA,KAAUwnD,GAAOA,KAAM,KAAO,GA0EnD,IAAe1+D,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM+zB,GAAgB21K,EAAAA,EAAAA,KAA2B1pM,IAC3C,MAAE8iC,EAAK,UAAE6mK,GAAc51K,GAAiB,CAAC,GACzC,SAAE61K,GAAa5pM,EAAO89E,SAE5B,MAAO,CACLh7C,QACAulE,YAAauhG,EAAS3gG,OACtB0gG,YACAv7I,YAAa3kD,SAAQgE,EAAAA,EAAAA,KAAezN,GAAQ6pM,8BAV9Bx8L,EAxE6By8L,EAC/C5xL,WACA4qB,QACAulE,cACAshG,YACAv7I,cACA7jD,cAEA,MAAM,qBAAEw/L,IAAyBr/L,EAAAA,EAAAA,MAE3Bsd,GAAejgB,EAAAA,EAAAA,MAEf0D,GAAOC,EAAAA,EAAAA,MAGX4vF,QAAS4B,IACPtB,EAAAA,GAAAA,IAAwB,CAAEC,QAAS7zE,EAAcu0E,WApBzB,MAqE5B,OA7CAtzF,EAAAA,EAAAA,KAAU,KACR8yD,IAAa,KACXguI,WAIJtgL,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KAsCR5L,EAAAA,GAAAA,GAAA,OAAKgU,IAAKqV,EAAcvpB,UAAU,8BAA8BsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAnCtG,WACE,QAAc2C,IAAVyhC,EAIJ,OAAKA,GAASulE,EACLA,EAAYl2F,KAAK3T,IACtBG,EAAAA,GAAAA,GAACsqM,GAAgB,CAEfpjG,aAAcrnG,EACd0+F,oBAAqBA,EACrB9uC,YAAaA,GAHR5vD,KAQPmrM,EACGA,EAAUxpM,OAIRwpM,EAAUx3L,KAAK3T,IACpBG,EAAAA,GAAAA,GAACsqM,GAAgB,CAEfpjG,aAAcrnG,EACd0+F,oBAAqBA,EACrB9uC,YAAaA,GAHR5vD,MALAG,EAAAA,GAAAA,GAAA,KAAGF,UAAU,cAAcsW,IAAI,OAAMrW,SAAC,oBAa1CC,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,GACjB,CAIK6rD,SCiEP,IAAe54G,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM+zB,GAAgBi2K,EAAAA,EAAAA,KAAuBhqM,IACvC,MAAE8iC,EAAK,QAAE2xF,GAAY1gG,GAAiB,CAAC,GACvC,OAAE7oB,EAAM,SAAE8C,IAAaD,EAAAA,EAAAA,KAAyB/N,IAAW,CAAC,EAC5D4N,EAAO1C,GAAS6jC,EAAAA,EAAAA,KAAW/uC,EAAQkL,QAAU7J,EAC7CqqD,EAAexgD,GAASygD,EAAAA,EAAAA,KAAmB3rD,EAAQkL,QAAU7J,EAC7D6pH,EAAgBt9G,GAAOu9G,EAAAA,EAAAA,KAAoBnrH,EAAQ4N,QAAQvM,EAC3DwoD,EAAkBpgD,QAAQyB,KAAW8nB,EAAAA,EAAAA,KAAqBhzB,EAAQkL,GAClE8jK,EAAa9jK,GAAU8C,GAAWihK,EAAAA,EAAAA,KAAiBjvK,EAAQkL,EAAQ8C,QAAY3M,EAC/E6tK,EAAkBzlK,SAASulK,GAAYG,gBAAkBH,GAAYI,eACrE/mH,EAAQn9C,GAAU8C,GAAWqwH,EAAAA,EAAAA,KAAYr+H,EAAQkL,EAAQ8C,QAAY3M,EAI3E,MAAO,CACLyhC,QACA2xF,UACA7mH,OACAs9G,gBACArhE,kBACAogJ,cAToBxgM,QAAQmE,IAASnE,QAAQuE,KAC1Cs6C,EAAAA,EAAAA,IAAiB16C,EAAMy6C,EAAO6mH,EAAiBxjH,GASlD4jH,uBAAwB7lK,QAAQyB,KAAWqkK,EAAAA,EAAAA,KAA6BvvK,EAAQkL,GAChF4C,oBAAoBC,EAAAA,EAAAA,KAAyB/N,MAvB/BqN,EAlHyB68L,EAC3ChyL,WACA4qB,QACA2xF,UACA7mH,OACA89C,eACAw/D,gBACAokD,yBACAzlH,kBACAogJ,gBACAn8L,qBACAvD,cAEA,MAAM,eACJ4/L,EAAc,YACdh8I,EAAW,kBACXi8I,IACE1/L,EAAAA,EAAAA,MAEEsd,GAAejgB,EAAAA,EAAAA,OAEd+nK,EAAiBC,IAAYC,EAAAA,GAAAA,GAAYV,IAG9Ch0E,QAAS4B,IACPtB,EAAAA,GAAAA,IAAwB,CAAEC,QAAS7zE,EAAc60K,WA3BzB,MA6BtBJ,EAAcwN,IACfl7B,EAAAA,EAAAA,IAA4BnhK,EAAM89C,EAAcw/D,EAAerhE,GAAiB4yI,YAE/E4N,GAAiB/rM,EAAAA,EAAAA,KAAY,CAACm9L,EAAe/rE,EAAoB8/C,KACrE,GAAIitB,EAAa,CACf,IAAK3uL,EACH,OAGE0hK,EACFM,GAAiBK,IACfhiH,EAAY,CACVM,YAAa3gD,EACb2tL,MACAtrB,cACAzgD,gBAIJvhE,EAAY,CAAEM,YAAa3gD,EAAoB2tL,MAAK/rE,YAExD,CAEIx7G,EAAAA,IACFk2L,EAAkB,CAAEtnK,WAAOzhC,MAE5B,CAACo7L,EAAa3uL,EAAoBgiK,IAE/Bw6B,GAAuBhsM,EAAAA,EAAAA,KAAY,KACvC6rM,MACC,CAACA,IAEE1+L,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,IA+BV,MAAMggM,EAAa9gM,aAAkBpI,IAAVyhC,GAAuB2xF,GAAWA,EAAQt0H,QAErE,OACE5B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,YAAYsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAA,EAC7DC,EAAAA,GAAAA,GAACklD,GAAAA,EAAc,CACblxC,IAAKqV,EACLvpB,WAAWoW,EAAAA,GAAAA,GAAe,8BAA+B01L,GAAc,QACvEzmJ,MAAO2wE,EACPhqE,aAAa,aACbyS,iBA1GkB,GA2GlBD,YAAU,EACVlZ,WAAYumJ,EAAqB5rM,SAvCvC,WACE,QAAc2C,IAAVyhC,EAIJ,OAAK2xF,EAMAA,EAAQt0H,OAMNs0H,EAAQtiH,KAAKspL,IAClB98L,EAAAA,GAAAA,GAAC68L,GAAS,CAERC,IAAKA,EACLv+F,oBAAqBA,EACrBzwF,QAASgwL,EAAc4N,OAAiBhpM,EACxCwoD,gBAAiBA,GAJZ4xI,EAAIj9L,OANTG,EAAAA,GAAAA,GAAA,KAAGF,UAAU,cAAcsW,IAAI,OAAMrW,SAAE+M,EAAK,kBAN5C9M,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,GAmBd,CAeO6rD,KAEF65D,S,4BChKP,SAAuB,WAAvB,GAA8C,WAA9C,GAA6F,WAA7F,GAAsL,WAAtL,GAAyM,WAAzM,GAA2N,WAA3N,GAA6O,WAA7O,GAAuQ,WAAvQ,GAA6R,WAA7R,GAA+S,WCyC/S,IAAezyK,EAAAA,EAAAA,KAzBf,UAAkC,cAAEktM,IAClC,MAAMr4J,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,KACb,OACE7zC,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAYxd,SAAA,CACzB8rM,EAAcz9J,eAAiB,IAC9BxuC,EAAAA,GAAAA,IAAA,QAAME,UAAWyd,GAAoBxd,SAAA,EACnCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,gBAAgBxN,UAAWyd,MACrCo/C,EAAAA,GAAAA,IAAqB7vD,EAAM++L,EAAcz9J,mBAI7Cy9J,EAAc19J,cAAgB,IAC7BvuC,EAAAA,GAAAA,IAAA,QAAME,UAAWyd,GAAoBxd,SAAA,EACnCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,UAAUxN,UAAWyd,MAC/Bo/C,EAAAA,GAAAA,IAAqB7vD,EAAM++L,EAAc19J,mBAI5C09J,EAAc19J,gBAAkB09J,EAAcz9J,gBAC3CoF,EAAQ,8CAGnB,IC8BA,SAAS2qF,GAAcrxH,EAAiBlM,EAAqBmI,EAAkBq1H,GAC7E,OAAKr1H,GAKHnJ,EAAAA,GAAAA,IAAA,QAAAG,SAAA,EACEC,EAAAA,GAAAA,GAAA,OACE2D,IAAKoF,EACLuf,IAAI,GACJ9kB,WAAW,EACX1D,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAc6gH,GFhFgE,eEkFzGI,EAAAA,EAAAA,IAAgB59H,KAAYZ,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,UACvC+wH,EAAAA,EAAAA,GAAqBvxH,EAAMlM,GAAS,OAZhCy9H,EAAAA,EAAAA,GAAqBvxH,EAAMlM,EAetC,CAEA,UAAejC,EAAAA,EAAAA,KA3D+BmtM,EAAGD,gBAAejrM,cAC9D,MAAMkM,GAAOC,EAAAA,EAAAA,MACP,wBAAEg/L,IAA4BhgM,EAAAA,EAAAA,MAE9B9C,GAAe21H,EAAAA,GAAAA,GAAah+H,GAC5Bg/F,GAAYm/B,EAAAA,GAAAA,GAAoBn+H,EAAS,SACzCo+H,GAAe52H,EAAAA,EAAAA,GAASw3F,GACxBw+B,EAAetzH,SAAQm0H,EAAAA,EAAAA,IAAqBr+H,IAE5C0jB,GAAc3kB,EAAAA,EAAAA,KAAY,KAC9BosM,EAAwB,CAAEvzL,UAAW5X,EAAQf,OAC5C,CAACksM,EAAyBnrM,EAAQf,KAErC,OACED,EAAAA,GAAAA,IAAA,OACEE,WAAWoW,EAAAA,GAAAA,GACTqH,GACAzS,QAAQk0H,GAAgB/1H,IAAiBsU,IAE3CzP,QAASwW,EAAYvkB,SAAA,EAErBH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAaxd,SAAA,EAC3BC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAexd,SAC5Bo+H,GAAcrxH,EAAMlM,EAASo+H,GAAgB/1H,EAAcm1H,MAE9Dp+H,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAYxd,SACzB+M,EAAK,0BAA2B++L,EAAc39J,WAAY,WAI/DtuC,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAYxd,SAAA,EAC1BC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAYxd,UACzB+5F,EAAAA,GAAAA,IAAsC,IAAfl5F,EAAQoyB,KAAalmB,EAAKkqD,SAEpDh3D,EAAAA,GAAAA,GAACgsM,GAAwB,CAACH,cAAeA,aCGjD,SAAS1tE,GAAcrxH,EAAiBmC,EAAelG,GACrD,OACEnJ,EAAAA,GAAAA,IAAA,QAAAG,SAAA,CACGgJ,GACC/I,EAAAA,GAAAA,GAAA,QAAMF,UHtE4D,WGsE3BC,UACrCC,EAAAA,GAAAA,GAAA,OACE2D,IAAKoF,EACLuf,IAAI,GACJ9kB,WAAW,EACX1D,WAAWoW,EAAAA,GAAAA,GAAeqH,GH3E8F,WAA6B,iBG+EzJvd,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CACLC,KAAM7kB,EACN/O,KAAK,QACLJ,UAAWyd,GACX0uL,gBAAc,EACdC,uBAAqB,IAIxBp/L,EAAK,WAGZ,CAEA,UAAenO,EAAAA,EAAAA,KAjEf,UAA+B,KAAEsQ,EAAI,MAAE0wB,EAAK,cAAEksK,IAC5C,MAAM/+L,GAAOC,EAAAA,EAAAA,MACP,sBAAEo/L,IAA0BpgM,EAAAA,EAAAA,MAC5BywC,EAAW7c,GAAS,YAAaA,EAEjC79B,EAAQ06C,EAAW7c,EAAM7sB,QAAQhR,WAAQY,EACzC+5C,EAAYD,GAAWlc,EAAAA,EAAAA,IAAkBX,QAASj9B,EAClD0pM,GAAahkM,EAAAA,EAAAA,GAASq0C,GACtBoiF,EAAiButE,GAActqM,GAAOs+B,WAAWl3B,QAEjDob,GAAchY,EAAAA,EAAAA,IAAgB,KAClC6/L,EAAsB,CAAEhpK,QAAS0oK,EAAc1oK,aAGjD,OACEvjC,EAAAA,GAAAA,IAAA,OACEE,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAaA,IACvCzP,QAASwW,EAAYvkB,SAAA,EAErBH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAaxd,SAAA,EAC3BC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAexd,SAC5Bo+H,GAAcrxH,EAAMmC,EAAMm9L,GAAcvtE,MAE3C7+H,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAYxd,SACzB+M,EAAK,0BAA2B++L,EAAc39J,WAAY,WAI/DtuC,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAYxd,SAAA,EAC1BC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAYxd,SACzBy8C,GAAY1xC,QAAQ60B,EAAM3M,QAAS8mE,EAAAA,GAAAA,IAAoC,IAAbn6D,EAAM3M,KAAalmB,EAAKkqD,SAErFh3D,EAAAA,GAAAA,GAACgsM,GAAwB,CAACH,cAAeA,SAIjD,IChEA,GAAuB,WAAvB,GAA2K,WAA3K,GAAqS,WAArS,GAAwT,WAAxT,GAA2U,WAA3U,GAA+V,WCmC/V,IAAIQ,GACAC,GAWJ,MAAMC,GAAwB,CAC5BC,YAAa,4BACbC,eAAgB,+BAChBC,UAAW,mCACXC,cAAe,kCACfC,mBAAoB,mCACpBC,0BAA2B,0CAC3BC,eAAgB,8BAChBC,kBAAmB,kCACnBC,wBAAyB,+BACzBC,uBAAwB,6BACxBC,6BAA8B,uCAE1BC,GAAiBpuJ,OAAO6K,KAAK2iJ,IAE7Ba,GAAsB,CAC1BZ,YAAa,yBACba,aAAc,0BACdP,eAAgB,4BAChBQ,cAAe,2BACfC,aAAc,0BACdZ,cAAe,4BAEXa,GAAezuJ,OAAO6K,KAAKwjJ,IA4LjC,IAAezuM,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAMkhM,GAAaC,EAAAA,EAAAA,KAAiBrsM,EAAQkL,GACtC0C,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQkL,GAC1BohM,GAAO3gJ,EAAAA,EAAAA,KAAmB3rD,EAAQkL,IAASqhM,eAC3Cn6K,EAAyB,uBAAfxkB,GAAM/N,KAChB2sM,GAAe74K,EAAAA,EAAAA,KAAmB3zB,EAAQkL,GAC1CuhM,GAAcC,EAAAA,EAAAA,KAAkB1sM,EAAQkL,IAASm6B,KAEvD,MAAO,CACL+mK,aAAYE,OAAMl6K,UAASxkB,OAAM4+L,eAAcC,iBAVjCp/L,EA7KDs/L,EACjBzhM,SACA0C,OACAw+L,aACAE,OACAl6K,UACAo6K,eACAC,kBAEA,MAAMhhM,GAAOC,EAAAA,EAAAA,KACPsc,GAAejgB,EAAAA,EAAAA,OACdgQ,EAAS60L,IAAc/hM,EAAAA,EAAAA,KAAS,GACjCgiM,GAAe9kM,EAAAA,EAAAA,IAAoB,IAAIokF,KACvC2gH,GAAc/kM,EAAAA,EAAAA,IAAoB,IAAIokF,MAEtC,eAAE4gH,EAAc,yBAAEC,IAA6BtiM,EAAAA,EAAAA,MAC/C5B,GAAcC,EAAAA,EAAAA,MAEpBE,EAAAA,EAAAA,KAAU,KACR8jM,EAAe,CAAE7hM,SAAQknB,cACxB,CAAClnB,EAAQ6hM,EAAgB36K,IAE5B,MAAM66K,GAASxmM,EAAAA,EAAAA,KAAQ,IACd2rB,EAAU+5K,GAAeL,IAC/B,CAAC15K,IAEE86K,GAAczmM,EAAAA,EAAAA,KAAQ,IACnB2rB,EAAU25K,GAAsBb,IACtC,CAAC94K,IAqFJ,OAlFAnpB,EAAAA,EAAAA,KAAU,KACHmjM,GAILa,EAAO92L,SAASlK,IACd,MAAMkhM,EAAQf,EAAWngM,IACpBmhM,EAAAA,GAAAA,GAAQD,IAGuB,UAApBA,EAAME,WAGpBL,EAAyB,CACvB/gM,OACAf,SACAoiM,MAAOH,EAAMG,MAEbC,aAAuB,mBAATthM,SAInB,CAACghM,EAAQ/hM,EAAQkhM,EAAYY,KAEhC/jM,EAAAA,EAAAA,KAAU,KACR,iBAvGJiO,iBAME,OALK8zL,KACHA,GAAqB,gCACrBC,SAAoBD,IAGfA,EACT,CAiGYwC,GAEDz1L,EAKAq0L,GAAepkL,EAAa9f,UAIjC+kM,EAAO92L,SAAQ,CAAClK,EAAMhJ,KACpB,MAAMkqM,EAAQf,EAAWngM,GACzB,KAAKmhM,EAAAA,GAAAA,GAAQD,GACX,OAGF,MAAMM,EAA8B,UAApBN,EAAME,UAChBK,EAA8B,UAApBP,EAAME,UAEtB,GAAII,GAAWZ,EAAa3kM,QAAQukF,IAAIxgF,GACtC,OAGF,GAAIyhM,EAIF,OAHAb,EAAa3kM,QAAQlG,IAAIiK,QACzB6gM,EAAY5kM,QAAQlG,IAAIiK,GAK1B,MAAM,UAAE0hM,GAAcR,EAEtBlC,GAAY2C,OACV5lL,EAAa9f,QAASxJ,SAASuE,GAC/B,CACE4I,MAAOJ,EAAMyhM,EAAuCjhM,OACjD0hM,EAAY,CACbl/K,OAASvT,IAAc5D,EAAAA,GAAAA,IAAQ,4BAA6B,CAAEg2L,MAAOK,EAAWzyL,IAAGoxL,SACnFuB,aAAcpiM,EAAK,kBACjB,CAAC,KACF0hM,IAIPN,EAAa3kM,QAAQlG,IAAIiK,GAEzB+b,EAAa9f,QAASxJ,SAASuE,GAAOlB,UAAUic,OAAO9B,OAGzDpT,KA/CE8jM,GAAW,EAgDd,EApDD,KAqDC,CACDK,EAAQC,EAAan1L,EAASq0L,EAAY3gM,EAAMP,EAAQ8hM,EAA0BV,EAAMxjM,KAIxFvK,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAa,8BAA+BnE,GAAWmE,IAAcxd,SAAA,CACjG0tM,IACCztM,EAAAA,GAAAA,GAACmvM,GAAAA,EAAkB,CACjB1B,WAAYA,EACZvsM,KAAMuyB,EAAU,QAAU,UAC1BvmB,MAAOJ,EAAK,wBAIdohM,EAAa3kM,QAAQrJ,OAAQF,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,KAEvC1rD,EAAAA,GAAAA,GAAA,OAAKgU,IAAKqV,EAAatpB,SACpBuuM,EAAO96L,KAAKg7L,IACX,MAAMp1L,EAAU80L,EAAa3kM,QAAQukF,IAAI0gH,KAAWL,EAAY5kM,QAAQukF,IAAI0gH,GAC5E,OACExuM,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAeqH,IAAenE,GAAWmE,WAK9DzS,QAAS2iM,GAAqC2B,aAAa5tM,UAC1D5B,EAAAA,GAAAA,IAAA,OAAKE,UD5NkI,WC4NvGC,SAAA,EAC9BC,EAAAA,GAAAA,GAAA,MAAIF,UD7NoN,WC6NpLC,SAAE+M,EAAK,gCAEzC2gM,EAAoC2B,YAAY57L,KAAKq4L,IACrD,GAAI,UAAWA,EAAe,CAC5B,MAAMjrM,EAAUitM,EAAahC,EAAcx8E,OAC3C,IAAKzuH,KAAa,YAAaA,GAAU,OAEzC,OACEZ,EAAAA,GAAAA,GAAC8rM,GAAuB,CAEtBlrM,QAASA,EACTirM,cAAeA,GAFV,qBAAqBA,EAAcx8E,QAK9C,CAEA,GAAI,YAAaw8E,GAAiB58L,EAAM,CACtC,MAAM0wB,EAAQmuK,IAAcjC,EAAc1oK,SAE1C,OACEnjC,EAAAA,GAAAA,GAACqvM,GAAqB,CAEpBpgM,KAAMA,EACN0wB,MAAOA,EACPksK,cAAeA,GAHV,mBAAmBA,EAAc1oK,UAM5C,eCxPZ,GAAuB,WAAvB,GAA0C,WAA1C,GAA6D,WC4C7D,IAAexkC,EAAAA,EAAAA,KA1BsC2wM,EAAG72L,WACtD,MAAM3L,GAAOC,EAAAA,EAAAA,MACP,mBAAE+nG,IAAuB/oG,EAAAA,EAAAA,MAEzBkpG,GAAWntG,EAAAA,EAAAA,KAAQ,IAAO2Q,EAAKxJ,MAAOowJ,EAAAA,EAAAA,IAAgB5mJ,EAAKxJ,WAAQvM,GAAY,CAAC+V,EAAKxJ,OACrFqV,GAAc3kB,EAAAA,EAAAA,KAAY,KAC9Bm1G,EAAmB,CAAEG,SAAUA,EAAWz8F,UAAWC,EAAKD,cACzD,CAACC,EAAKD,UAAWs8F,EAAoBG,IAExC,OACEr1G,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAa,4BAA6BzP,QAASwW,EAAYvkB,SAAA,EAC5FC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CAAC3zB,KAAK,SAAS4zB,KAAMrb,EAAKxJ,QAEjCrP,EAAAA,GAAAA,IAAA,OAAAG,SAAA,EACEC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAaxd,SAC1B0Y,EAAKvL,SAGRlN,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAaxd,SAC1B+M,EAAK,0BAA2B2L,EAAKs1B,MAAO,gBCVvD,IAAIs+J,GACAC,GAWJ,MAAMiD,GAAe,CACnBC,WAAY,iCACZC,eAAgB,gCAEZC,GAAS3wJ,OAAO6K,KAAK2lJ,IAqK3B,IAAe5wM,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAMohM,GAAO3gJ,EAAAA,EAAAA,KAAmB3rD,EAAQkL,IAASqhM,eAC3C/+L,GAAWC,EAAAA,EAAAA,KAAezN,GAIhC,MAAO,CAAEosM,WAHU5+L,EAAS4+L,WAAWkC,eAGlBhC,OAAMn1L,UAFT3J,EAAS4+L,WAAWmC,oBALtBlhM,EAxJpB,UAA2B,OACzBnC,EAAM,SACNgN,EAAQ,WACRk0L,EAAU,KACVE,EAAI,UACJn1L,IAEA,MAAM1L,GAAOC,EAAAA,EAAAA,KACPsc,GAAejgB,EAAAA,EAAAA,OACdgQ,EAAS60L,IAAc/hM,EAAAA,EAAAA,KAAS,GACjCgiM,GAAe9kM,EAAAA,EAAAA,IAAoB,IAAIokF,KACvC2gH,GAAc/kM,EAAAA,EAAAA,IAAoB,IAAIokF,MAEtC,sBAAEqiH,EAAqB,0BAAEC,EAAyB,yBAAEzB,IAA6BtiM,EAAAA,EAAAA,MACjF5B,GAAcC,EAAAA,EAAAA,MAEpBE,EAAAA,EAAAA,KAAU,KACJkO,GACFq3L,EAAsB,CAAEtjM,SAAQiM,gBAEjC,CAACjM,EAAQsjM,EAAuBr3L,KAEnClO,EAAAA,EAAAA,KAAU,KACHiP,IAAYf,IACf01L,EAAa3kM,QAAQkB,QACrB0jM,EAAY5kM,QAAQkB,QACpBwjM,GAAW,MAEZ,CAAC10L,EAAUf,KAGdlO,EAAAA,EAAAA,KAAU,KACHmjM,GAILiC,GAAOl4L,SAASlK,IACd,MAAMkhM,EAAQf,EAAWngM,IACpBmhM,EAAAA,GAAAA,GAAQD,IAGuB,UAApBA,EAAME,WAGpBL,EAAyB,CAAE/gM,OAAMf,SAAQoiM,MAAOH,EAAMG,aAGzD,CAACpiM,EAAQkhM,EAAYY,KAExB/jM,EAAAA,EAAAA,KAAU,KACR,iBA5EJiO,iBAME,OALK8zL,KACHA,GAAqB,gCACrBC,SAAoBD,IAGfA,EACT,CAsEYwC,GAEDz1L,EAKAq0L,GAAepkL,EAAa9f,UAIjCmmM,GAAOl4L,SAAQ,CAAClK,EAAMhJ,KACpB,MAAMkqM,EAAQf,EAAWngM,GACzB,KAAKmhM,EAAAA,GAAAA,GAAQD,GACX,OAEF,MAAMM,EAA8B,UAApBN,EAAME,UAChBK,EAA8B,UAApBP,EAAME,UAEtB,GAAII,GAAWZ,EAAa3kM,QAAQukF,IAAIxgF,GACtC,OAGF,GAAIyhM,EAIF,OAHAb,EAAa3kM,QAAQlG,IAAIiK,QACzB6gM,EAAY5kM,QAAQlG,IAAIiK,GAK1B,MAAM,UAAE0hM,GAAcR,EAEtBlC,GAAY2C,OACV5lL,EAAa9f,QAASxJ,SAASuE,GAC/B,CACE4I,MAAOJ,EAAMyiM,GAAwCjiM,OAClD0hM,EAAY,CACbl/K,OAASvT,IAAc5D,EAAAA,GAAAA,IAAQ,4BAA6B,CAAEg2L,MAAOK,EAAWzyL,IAAGoxL,SACnFuB,aAAcpiM,EAAK,kBACjB,CAAC,KACF0hM,IAIPN,EAAa3kM,QAAQlG,IAAIiK,MAG3BnD,KA5CE8jM,GAAW,EA6Cd,EAjDD,KAkDC,CACD70L,EAASq0L,EAAY3gM,EAAMP,EAAQiM,EAAW61L,EAA0BV,EAAMxjM,IAGhF,MAAM85C,GAAiB33C,EAAAA,EAAAA,IAAgB,EAAGggB,gBACpCA,IAAc6xC,EAAAA,GAAkBC,WAAa5lD,GAC/Cs3L,EAA0B,CAAEvjM,SAAQiM,iBAIxC,OAAKY,GAAYq0L,GAAej1L,GAK9B5Y,EAAAA,GAAAA,IAAA,OAEEE,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAa,gBAAiBnE,GAAWmE,IAAcxd,SAAA,EAEjFC,EAAAA,GAAAA,GAACmvM,GAAAA,EAAkB,CAAC1B,WAAYA,EAAYvsM,KAAK,UAAUgM,MAAOJ,EAAK,yBAEpEohM,EAAa3kM,QAAQrJ,OAASutM,EAAWsC,sBAAuB/vM,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,KAE3E1rD,EAAAA,GAAAA,GAAA,OAAKgU,IAAKqV,EAAatpB,SACpB2vM,GAAOl8L,KAAKg7L,IACX,MAAMp1L,EAAU80L,EAAa3kM,QAAQukF,IAAI0gH,KAAWL,EAAY5kM,QAAQukF,IAAI0gH,GAC5E,OACExuM,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAeqH,IAAenE,GAAWmE,WAK9DzS,QAAQ2iM,EAAWuC,kBAClBpwM,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAsBxd,SAAA,EACpCC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAA2Bxd,SAAE+M,EAAK,iCAEjD9M,EAAAA,GAAAA,GAACklD,GAAAA,EAAc,CACbC,MAAOsoJ,EAAWsC,mBAClBjkJ,aAAa,4BACb1G,WAAYnB,EACZqa,YAAU,EAAAv+D,SAER0tM,EAAWsC,mBAAiDv8L,KAAK7E,IACjE3O,EAAAA,GAAAA,GAACsvM,GAA8B,CAAsB72L,KAAM9J,GAAtBA,EAAK6J,oBA3B7C,GAAGjM,KAAUiM,MALbxY,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,GAuCnB,KC7JA,IAAe/sD,EAAAA,EAAAA,KA3Bf,UAAwC,KAAE8Z,EAAI,UAAEywC,EAAS,UAAE/jB,IACzD,MAAMr4B,GAAOC,EAAAA,EAAAA,MACP,SAAEy9B,IAAaz+B,EAAAA,EAAAA,MACfmkC,EAAO/K,EAAU1sB,EAAK9M,QACtBsD,EAAOi6C,EAAUzwC,EAAK9M,QAEtB2Y,GAAchY,EAAAA,EAAAA,IAAgB,KAClCk+B,EAAS,CAAE3qC,GAAIqwC,EAAKrwC,QAGtB,OACED,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAa,4BAA6BzP,QAASwW,EAAYvkB,SAAA,EAC5FC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CAAC3zB,KAAK,SAAS4zB,KAAMoc,GAAQjhC,EAAMg9L,gBAAc,EAACC,uBAAqB,KAE9EtsM,EAAAA,GAAAA,IAAA,OAAAG,SAAA,EACEC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAaxd,SAC1BmwC,GAAOtG,EAAAA,EAAAA,IAAgBsG,IAAQke,EAAAA,EAAAA,IAAathD,EAAMmC,MAGrDjP,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAaxd,SAC1B0Y,EAAKy1B,WAAaphC,EAAK,0BAA2B2L,EAAKy1B,WAAY,KAAOphC,EAAK,kBAK1F,ICnBA,IAAIu/L,GACAC,GAWJ,MAAMiD,GAAe,CACnBC,WAAY,+BACZC,eAAgB,gCAEZC,GAAS3wJ,OAAO6K,KAAK2lJ,IAsL3B,IAAe5wM,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAMohM,GAAO3gJ,EAAAA,EAAAA,KAAmB3rD,EAAQkL,IAASqhM,eAC3C/+L,GAAWC,EAAAA,EAAAA,KAAezN,GAC1BosM,EAAa5+L,EAAS4+L,WAAWwC,aACjC9sK,EAAUt0B,EAAS4+L,WAAW7wJ,gBAC5BlW,KAAMvB,GAAc9jC,EAAOolC,OAC3BC,KAAMwiB,GAAc7nD,EAAO8nD,MAEnC,MAAO,CACLskJ,aAAYE,OAAMxqK,UAASgC,YAAW+jB,eAVxBx6C,EAvKpB,UAAyB,OACvBnC,EAAM,SACNgN,EAAQ,WACRk0L,EAAU,KACVE,EAAI,QACJxqK,EAAO,UACP+lB,EAAS,UACT/jB,IAEA,MAAMr4B,GAAOC,EAAAA,EAAAA,KACPsc,GAAejgB,EAAAA,EAAAA,OACdgQ,EAAS60L,IAAc/hM,EAAAA,EAAAA,KAAS,GACjCgiM,GAAe9kM,EAAAA,EAAAA,IAAoB,IAAIokF,KACvC2gH,GAAc/kM,EAAAA,EAAAA,IAAoB,IAAIokF,MAEtC,oBAAE0iH,EAAmB,wBAAEC,EAAuB,yBAAE9B,IAA6BtiM,EAAAA,EAAAA,MAC7E5B,GAAcC,EAAAA,EAAAA,MAEpBE,EAAAA,EAAAA,KAAU,KACJ64B,GACF+sK,EAAoB,CAAE3jM,SAAQ42B,cAE/B,CAAC52B,EAAQ42B,KAEZ74B,EAAAA,EAAAA,KAAU,KACHiP,IAAY4pB,IACf+qK,EAAa3kM,QAAQkB,QACrB0jM,EAAY5kM,QAAQkB,QACpBwjM,GAAW,MAEZ,CAAC10L,EAAU4pB,KAGd74B,EAAAA,EAAAA,KAAU,KACHmjM,GAILiC,GAAOl4L,SAASlK,IACd,MAAMkhM,EAAQf,EAAWngM,IACpBmhM,EAAAA,GAAAA,GAAQD,IAGuB,UAApBA,EAAME,WAGpBL,EAAyB,CAAE/gM,OAAMf,SAAQoiM,MAAOH,EAAMG,aAGzD,CAACpiM,EAAQkhM,EAAYY,KAExB/jM,EAAAA,EAAAA,KAAU,KACR,iBAhFJiO,iBAME,OALK8zL,KACHA,GAAqB,gCACrBC,SAAoBD,IAGfA,EACT,CA0EYwC,GAEDz1L,EAKAq0L,GAAepkL,EAAa9f,UAIjCmmM,GAAOl4L,SAAQ,CAAClK,EAAMhJ,KACpB,MAAMkqM,EAAQf,EAAWngM,GACzB,KAAKmhM,EAAAA,GAAAA,GAAQD,GACX,OAEF,MAAMM,EAA8B,UAApBN,EAAME,UAChBK,EAA8B,UAApBP,EAAME,UAEtB,GAAII,GAAWZ,EAAa3kM,QAAQukF,IAAIxgF,GACtC,OAGF,GAAIyhM,EAIF,OAHAb,EAAa3kM,QAAQlG,IAAIiK,QACzB6gM,EAAY5kM,QAAQlG,IAAIiK,GAK1B,MAAM,UAAE0hM,GAAcR,EAEtBlC,GAAY2C,OACV5lL,EAAa9f,QAASxJ,SAASuE,GAC/B,CACE4I,MAAOJ,EAAMyiM,GAAwCjiM,OAClD0hM,EAAY,CACbl/K,OAASvT,IAAc5D,EAAAA,GAAAA,IAAQ,4BAA6B,CAAEg2L,MAAOK,EAAWzyL,IAAGoxL,SACnFuB,aAAcpiM,EAAK,kBACjB,CAAC,KACF0hM,IAIPN,EAAa3kM,QAAQlG,IAAIiK,MAG3BnD,KA5CE8jM,GAAW,EA6Cd,EAjDD,KAkDC,CACD70L,EAASq0L,EAAY3gM,EAAMP,EAAQ42B,EAASkrK,EAA0BV,EAAMxjM,IAG9E,MAAM85C,GAAiB33C,EAAAA,EAAAA,IAAgB,KAChC62B,GAELgtK,EAAwB,CAAE5jM,SAAQ42B,eAGpC,OAAK/pB,GAAYq0L,GAAetqK,GAK9BvjC,EAAAA,GAAAA,IAAA,OAEEE,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAa,gBAAiBnE,GAAWmE,IAAcxd,SAAA,EAEjFC,EAAAA,GAAAA,GAACmvM,GAAAA,EAAkB,CAAC1B,WAAYA,EAAYvsM,KAAK,QAAQgM,MAAOJ,EAAK,wBAEnEohM,EAAa3kM,QAAQrJ,OAAQF,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,KAEvC1rD,EAAAA,GAAAA,GAAA,OAAKgU,IAAKqV,EAAatpB,SACpB2vM,GAAOl8L,KAAKg7L,IACX,MAAMp1L,EAAU80L,EAAa3kM,QAAQukF,IAAI0gH,KAAWL,EAAY5kM,QAAQukF,IAAI0gH,GAC5E,OACExuM,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAeqH,IAAenE,GAAWmE,WAK9DzS,QAAQ2iM,EAAWuC,kBAClBpwM,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAsBxd,SAAA,EACpCC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAA2Bxd,SAAE+M,EAAK,iCAEjD9M,EAAAA,GAAAA,GAACklD,GAAAA,EAAc,CACbC,MAAOsoJ,EAAWsC,mBAClBjkJ,aAAa,4BACb1G,WAAYnB,EACZqa,YAAU,EAAAv+D,SAET0tM,EAAWsC,mBAAoBv8L,KAAK7E,GAC/B,cAAeA,GAEf3O,EAAAA,GAAAA,GAACsvM,GAA8B,CAAmC72L,KAAM9J,GAAnC,WAAWA,EAAK6J,cAKvDxY,EAAAA,GAAAA,GAACowM,GAA4B,CAE3B33L,KAAM9J,EACNu6C,UAAWA,EACX/jB,UAAWA,GAHN,SAASx2B,EAAKw0B,oBAnC1B,GAAG52B,KAAU42B,MALbnjC,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,GAoDnB,K,gBCtEA,UAAe/sD,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUgvM,aACT,MAAM,OAAEC,EAAM,QAAEC,IAAYzhM,EAAAA,EAAAA,KAAezN,GAAQmvM,YAEnD,MAAO,CACLF,OAAQA,IAASD,EAAOrnK,QACxB7sB,OAASo0L,IAAUF,EAAOrnK,SAAY,MANxBt6B,EA9GiC+hM,EACnDxhM,OACArO,UACAyvM,SACAK,aACAC,cACAL,SACAn0L,aAEA,MAAM,sBACJy0L,EAAqB,SACrBpmK,EAAQ,iBACRqmK,IACE9kM,EAAAA,EAAAA,MAEE+kM,GAAkBz6K,EAAAA,EAAAA,GAA8Bq6K,EAAWK,cAC1Dr8K,EAAWk0F,IAAgB18G,EAAAA,EAAAA,KAAkB,GAC9C8kM,EAAkBlmM,QAAQwlM,IAC1B,OAAEtnK,EAAM,KAAEn0B,GAASw7L,EACnBvjM,GAAOC,EAAAA,EAAAA,MAEbzC,EAAAA,EAAAA,KAAU,KAEH0mM,GAAmBF,IAAoBJ,EAAWK,aACrDH,EAAsB,CACpB3hM,OAAMuJ,UAAW5X,EAAQf,GAAImpC,SAAQ7sB,SAAQuT,MA5B/B,EA4BqDuhL,mBAAmB,MAIzF,CAACP,EAAWK,YAAaC,IAE5B,MAAME,GAAsBvxM,EAAAA,EAAAA,KAAY,KACtCipH,GAAa,GACbgoF,EAAsB,CACpB3hM,OAAMuJ,UAAW5X,EAAQf,GAAImpC,SAAQ7sB,SAAQuT,MApC3B,OAsCnB,CAACzgB,EAAM2hM,EAAuBhwM,EAAQf,GAAIsc,EAAQ6sB,KAErD1+B,EAAAA,EAAAA,KAAU,KACRs+G,GAAa,KACZ,CAAC0nF,IAEJ,MAAMa,GAAoBxxM,EAAAA,EAAAA,KAAaE,IACrC2qC,EAAS,CAAE3qC,OACXgxM,MACC,CAACA,EAAkBrmK,IAetB,OACE5qC,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oBAAmBC,SAAA,EAChCH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,cAAaC,SAAA,CACzBuwM,EACGA,EAAO98L,KAAK3T,IACZG,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAEPxiC,UAAU,sBAEVgO,QAASA,IAAMqjM,EAAkBtxM,GAAIE,UAEpC0O,EAAAA,EAAAA,IAAS5O,IACRG,EAAAA,GAAAA,GAACiiD,GAAAA,EAAe,CACdw0E,WAAW,OACX94F,OAAQ99B,EACRglC,eAAa,EACbsd,kBAAgB,KAGlBniD,EAAAA,GAAAA,GAACoiD,GAAAA,EAAa,CACZq0E,WAAW,OACXlqH,OAAQ1M,EACRsiD,kBAAgB,KAhBftiD,MAqBPG,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,IACX4kJ,GAzCP,WACE,MAAMc,EAAkBV,EAAWK,YAAcT,EAAQ9uM,OAEzD,OAAOkvM,EAAWK,YArDA,GAqD+BK,EAAkB,IACjEpxM,EAAAA,GAAAA,GAACqxM,GAAAA,EAAc,CACbl+K,MAAOi+K,EACP30F,SAAS,QACT/nF,UAAWA,EACX5mB,QAASojM,GAGf,CA8BiBI,OAEb1xM,EAAAA,GAAAA,IAAA,OAAKE,UAAU,cAAcsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAA,EAC/DC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,eAAesW,IAAI,OAAMrW,UACtCurC,EAAAA,GAAAA,IAAuB,CACtBz2B,KAAMA,EAAKA,KACXm3E,SAAUn3E,EAAKm3E,cAGnBpsF,EAAAA,GAAAA,IAAA,QAAME,UAAU,iBAAiBsW,IAAKtJ,EAAK8kB,MAAQ,YAASlvB,EAAU3C,SAAA,EASvD2M,EAREgkM,EAAWK,YAQE1zC,EARWszC,EASxCtzC,EAAQ,GAAM3wJ,EAAQ2wJ,EAAS,KAAKxrI,UAAY,GATK,aAQ9D,IAAuBnlB,EAAe2wJ,MCvEtC,IAAe1+J,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MACEmvM,aAAa,OAAEjkM,EAAM,UAAEiM,KACrB1J,EAAAA,EAAAA,KAAezN,GAEnB,IAAKkL,IAAWiM,EACd,MAAO,CAAC,EAGV,MAAMvJ,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQkL,GAC1B3L,GAAUi0B,EAAAA,EAAAA,KAAkBxzB,EAAQkL,EAAQiM,GAGlD,MAAO,CACLvJ,OACArO,UACA2wM,KALW3wM,IAAW4wM,EAAAA,EAAAA,KAAsBnwM,EAAQT,MAZtC8N,EAjD2B+iM,EAC7Cl4L,WACAtK,OACArO,UACA2wM,OACA3lM,cAEA,MAAMkB,GAAOC,EAAAA,EAAAA,KAOb,IALA+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KAGLhL,IAAY2wM,IAAStiM,EACxB,OAAOjP,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,IAGjB,MAAM,QAAEqqI,EAAO,QAAEjgE,GAAYy7E,EAC7B,IAAKz7E,EAAQA,QACX,OAGF,MAAM47E,GAAkBC,EAAAA,GAAAA,IAAqB77E,EAAQA,QAAS,UAE9D,OACEl2H,EAAAA,GAAAA,IAAA,OAAKE,UAAU,cAAcsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAA,EAC/DC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,gBAAgBsW,IAAI,OAAMrW,UACrCurC,EAAAA,GAAAA,IAAuB,CACtBz2B,KAAMkhL,EAAQhuE,SAASlzG,KACvBm3E,SAAU+pG,EAAQhuE,SAAS/7B,cAG/BhsF,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kCAAiCC,SAC7Cg2L,EAAQN,QAAQjiL,KAAK68L,IACpBrwM,EAAAA,GAAAA,GAACywM,GAAiB,CAEhBxhM,KAAMA,EACNrO,QAASA,EACTyvM,OAAQA,EACRK,WAAYgB,EAAgBrB,EAAOrnK,QACnC2nK,YAAa76E,EAAQ66E,aALhB,GAAGY,EAAK1xM,MAAMwwM,EAAOrnK,qB,gBClEtC,SAAuB,WAAvB,GAA4C,WAA5C,GAAiE,WAAjE,GAAuG,WAAvG,GAA2H,WAA3H,GAAoJ,WAApJ,GAAsK,WAAtK,GAAkN,WAAlN,GAAmQ,WC6B7P4oK,GAAY,EAAIj8L,EAAAA,EA6ItB,IAAehX,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM,iBAAEwwM,IAAqB/iM,EAAAA,EAAAA,KAAezN,GAC5C,MAAO,CACL4N,KAAM4iM,GAAkBtlM,QAAS6jC,EAAAA,EAAAA,KAAW/uC,EAAQwwM,EAAiBtlM,aAAU7J,EAC/EmvM,mBACAjyK,sBAAsB0B,EAAAA,EAAAA,KAA2BjgC,MANnCqN,EAhI2BojM,EAC7Cv4L,WACAtK,OACA4iM,mBACAjyK,uBACAh0B,cAEA,MAAM,YAAEmmM,EAAW,iBAAEpwK,IAAqB51B,EAAAA,EAAAA,OACnCmB,EAAOw+J,IAAYx/J,EAAAA,EAAAA,IAAS,KAC5B8lM,EAAgBC,IAAqB/lM,EAAAA,EAAAA,IAAS,IAC9CgmM,EAAaC,IAAkBjmM,EAAAA,EAAAA,SAA6BxJ,GAC7DoK,GAAOC,EAAAA,EAAAA,KAEPs9H,EAAYv/H,QAAQoC,GACpBwnB,EAAY5pB,QAAQ+mM,GAAkBn9K,YAE5C5J,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KAGVtB,EAAAA,EAAAA,KAAU,KACHiP,IACHmyJ,EAAS,IACTymC,OAAezvM,MAEhB,CAAC6W,IAEJ,MAAM0yJ,GAAoBtsK,EAAAA,EAAAA,KAAaiN,IACrC8+J,EAAS9+J,EAAEC,OAAOH,SACjB,IAEG0lM,GAAkBzyM,EAAAA,EAAAA,KAAY,KAClCsyM,GAAmBh0I,IAASwhB,EAAAA,GAAAA,IAAc4yH,EAAAA,GAAAA,MAAiB7wM,OAAQy8D,EAAO,OACzE,IAEGq0I,GAAoB3yM,EAAAA,EAAAA,KAAY,KACpCoyM,EAAY,CACVxlM,OAAQ0C,EAAMpP,GACdqN,QACAqlM,WAAWF,EAAAA,GAAAA,MAAiBL,GAC5BE,kBAED,CAACjjM,EAAM8iM,EAAaC,EAAgBE,EAAahlM,IAE9CuyL,GAA0B9/L,EAAAA,EAAAA,KAAa2sF,IACtCA,EAAMoV,QAAW9hE,GAAwB0sD,EAAMzsF,KAAOunG,EAAAA,IAKvD9a,EAAMzsF,KAAOunG,EAAAA,IAKjB+qG,EAAe7lH,EAAMzsF,IAJnBsyM,OAAezvM,GALfi/B,EAAiB,CAAEQ,eAAgB,qBAUpC,CAACvC,EAAsB+B,IAEpB6wK,GAAa1qM,EAAAA,EAAAA,KAAQ,KAClB,CACLjI,GAAI,EACJqN,QACAqlM,WAAWF,EAAAA,GAAAA,MAAiBL,GAC5BE,iBAED,CAACF,EAAgBE,EAAahlM,IAEjC,GAAK+B,GAAMg7C,QAIX,OACErqD,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAYxd,SAAA,EAC1BH,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAgB,iBAAiBxd,SAAA,EAC9DH,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAgBA,IAAYxd,SAAA,EACzDC,EAAAA,GAAAA,GAAA,QAAMF,UAAWyd,GAAexd,SAAE+M,EAAK,uBACvC9M,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CACTzvB,KAAK,WACL0vB,UAAW3X,OAAOmtL,EAAWN,cAAgB,EAC7C5kG,eAAa,EACbhhF,UAAW,EACXxsB,UAAWyd,GAAmBxd,UAE9BC,EAAAA,GAAAA,GAAC4rD,GAAAA,EAAS,CACRlC,MAAO8oJ,EACP1yM,WAAWoW,EAAAA,GAAAA,GAAeqH,GDhIqJ,YCiI/KzP,QAASskM,EACTlyM,KAAM0xM,GACNa,aAAW,OAGfzyM,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRhB,MAAOQ,EACPM,SAAUy+J,EACVh/J,MAAOH,EAAK,yBACZoT,SAAUwU,EACV2U,2BAAyB,QAG7BrpC,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAgBA,IAAexd,UAC5DC,EAAAA,GAAAA,GAACgrG,GAAiB,CAChBzO,SAAS,0BACTlnF,UAAWkE,EACXoqF,YAAapqF,EACb4xF,oBAAqBs0F,EACrB3/L,UAAWyd,GACX0tF,oBAAoB,qBACpBC,uBAAqB,UAI3BlrG,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,QAASmkG,EACTnqH,SAAUwU,EACV5mB,QAASwkM,EACThgM,UAAWxF,EAAK,QAAQ/M,SAEvB20B,GACC10B,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf5N,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,mBCrIfskM,GAAY,EAAIj8L,EAAAA,EA4JtB,IAAehX,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM,eAAEqxM,IAAmB5jM,EAAAA,EAAAA,KAAezN,GAK1C,MAAO,CACL4N,KALWyjM,GAAgBnmM,QAAS6jC,EAAAA,EAAAA,KAAW/uC,EAAQqxM,EAAenmM,aAAU7J,EAMhFgnD,MALYgpJ,GAAgBnmM,QAAUmmM,GAAgB/mJ,SACpD+zE,EAAAA,EAAAA,KAAYr+H,EAAQqxM,EAAenmM,OAAQmmM,EAAe/mJ,cAAWjpD,EAKvEgwM,iBACA9yK,sBAAsB0B,EAAAA,EAAAA,KAA2BjgC,MAXnCqN,EA7IyBikM,EAC3Cp5L,WACAtK,OACAy6C,QACAgpJ,iBACA9yK,uBACAh0B,cAEA,MAAM,UAAEgnM,EAAS,iBAAEjxK,IAAqB51B,EAAAA,EAAAA,OACjCmB,EAAOw+J,IAAYx/J,EAAAA,EAAAA,IAAS,KAC5BgmM,EAAaC,IAAkBjmM,EAAAA,EAAAA,SAA6BxJ,GAC7DoK,GAAOC,EAAAA,EAAAA,KAEP2nB,EAAY5pB,QAAQ4nM,GAAgBh+K,WACpCm+K,EAAYnpJ,GAAO7pD,KAAOizM,EAAAA,KAEhChoL,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KAGVtB,EAAAA,EAAAA,KAAU,KACHiP,IACHmyJ,EAAS,IACTymC,OAAezvM,MAEhB,CAAC6W,KAEJjP,EAAAA,EAAAA,KAAU,MACJo/C,GAAOx8C,OAASw8C,GAAOwoJ,eACzBxmC,EAAShiH,EAAMx8C,OACfilM,EAAezoJ,EAAMwoJ,gBAEtB,CAACxoJ,IAEJ,MAAM2gF,GAAYviI,EAAAA,EAAAA,KAAQ,IACjBoF,IAAUw8C,GAAOx8C,OAASglM,IAAgBxoJ,GAAOwoJ,aACvD,CAACA,EAAahlM,EAAOw8C,GAAOwoJ,YAAaxoJ,GAAOx8C,QAE7C++J,GAAoBtsK,EAAAA,EAAAA,KAAaiN,IACrC,MAAMmmM,EAAWnmM,EAAEC,OAAOH,MAC1Bg/J,EAASqnC,KACR,IAEGC,GAAkBrzM,EAAAA,EAAAA,KAAY,KAClCizM,EAAU,CACRrmM,OAAQ0C,EAAMpP,GACdqN,QACAy+C,QAASjC,EAAO7pD,GAChBqyM,kBAED,CAACjjM,EAAM2jM,EAAWV,EAAahlM,EAAOw8C,IAEnC+1I,GAA0B9/L,EAAAA,EAAAA,KAAa2sF,IACtCA,EAAMoV,QAAW9hE,GAAwB0sD,EAAMzsF,KAAOunG,EAAAA,IAKvD9a,EAAMzsF,KAAOunG,EAAAA,IAKjB+qG,EAAe7lH,EAAMzsF,IAJnBsyM,EA1EgB,KAqEhBxwK,EAAiB,CAAEQ,eAAgB,qBAUpC,CAACvC,EAAsB+B,IAEpB6wK,GAAa1qM,EAAAA,EAAAA,KAAQ,KAClB,IACF4hD,EACHx8C,QACAglM,iBAED,CAACA,EAAahlM,EAAOw8C,IAExB,GAAKz6C,GAAMg7C,QAIX,OACErqD,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAYxd,SAAA,EAC1BH,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAgB,iBAAiBxd,SAAA,EAC5D2pD,IAAS1pD,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,IAClBhC,IACC9pD,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAgBA,GAAYs1L,GFlIe,YEkIc9yM,SAAA,EACtFC,EAAAA,GAAAA,GAAA,QAAMF,UAAWyd,GAAexd,SAAE+M,EAAK+lM,EAAY,0BAA4B,uBAC/E7yM,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CACTzvB,KAAK,WACL0vB,UAAW3X,OAAOmtL,EAAWN,cAAgB,EAC7C5kG,eAAa,EACbhhF,UAAW,EACXxsB,UAAWyd,GAAmBxd,UAE9BC,EAAAA,GAAAA,GAAC4rD,GAAAA,EAAS,CACRlC,MAAO8oJ,EACP1yM,UAAWyd,GACXrd,KAAM0xM,GACNa,aAAW,OAGfzyM,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRhB,MAAOQ,EACPM,SAAUy+J,EACVh/J,MAAOH,EAAK,yBACZoT,SAAUwU,EACV2U,2BAAyB,QAG3BwpK,IACA7yM,EAAAA,GAAAA,GAAA,OAAKF,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAgBA,IAAexd,UAC5DC,EAAAA,GAAAA,GAACgrG,GAAiB,CAChBzO,SAAS,wBACTlnF,UAAWkE,EACXoqF,YAAapqF,EACb4xF,oBAAqBs0F,EACrB3/L,UAAWyd,GACX0tF,oBAAoB,qBACpBC,uBAAqB,aAOjClrG,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,QAASmkG,EACTnqH,SAAUwU,EACV5mB,QAASklM,EACT1gM,UAAWxF,EAAK,QAAQ/M,SAEvB20B,GACC10B,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf5N,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,mBC7Hf2lM,GAAqB,sBAmM3B,IAAet0M,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUs8B,aACT,MAAMuS,GAAOk8E,EAAAA,EAAAA,KAAU/qH,EAAQs8B,GACzB0S,GAAeC,EAAAA,EAAAA,KAAmBjvC,EAAQs8B,IAC1C,SAAEhqB,IAAa7E,EAAAA,EAAAA,KAAezN,GAAQ6xM,WACtCtvD,GAAepa,EAAAA,GAAAA,GAAmBnoI,EAAQ,eAEhD,MAAO,CACLs8B,SACAuS,OACAv8B,WACAuwI,WAAY7zG,GAAc8zG,IAC1BP,kBAZcl1I,EAjMyBykM,EAC3Cx1K,SACAuS,OACAv8B,WACA/H,UACAs4I,aACA3qI,WACAqqI,mBAEA,MAAM,WACJwvD,EAAU,mBACVryC,EAAkB,0BAClBsyC,EAAyB,2BACzBC,IACEvnM,EAAAA,EAAAA,OAEGwnM,EAAgBC,EAAkBC,IAAwBx0M,EAAAA,EAAAA,IAAQ,IAClEy0M,EAAiBC,EAAmBC,IAAuB30M,EAAAA,EAAAA,IAAQ,IACnEiwD,EAAO01F,IAAY14I,EAAAA,EAAAA,MACpBY,GAAOC,EAAAA,EAAAA,KAEPkoG,GAAWntG,EAAAA,EAAAA,KAAQ,IAAOooC,GAAOmvH,EAAAA,EAAAA,IAAgBnvH,QAAQxtC,GAAY,CAACwtC,KAE5EplB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,IAGV,MAAMioM,EAAc3jK,GAAOie,EAAAA,EAAAA,IAAuBje,GAAQ,IAEnDruC,EAAOgjJ,IAAY34I,EAAAA,EAAAA,OACnBoB,EAAMwmM,IAAW5nM,EAAAA,EAAAA,IAAS2nM,GAAe,KACzC1vD,EAAKW,IAAU54I,EAAAA,EAAAA,IAASg4I,GAAc,IAEvCF,EAAoB9zG,IAAQ+zG,EAAAA,EAAAA,IAAkB/zG,GAC9C+0G,GAAuB78I,EAAAA,EAAAA,GAAS47I,GAAmB,EAAO37I,EAAAA,GAAeC,UAE/EgC,EAAAA,EAAAA,KAAU,KACRmpM,IACAG,MACC,CAACj2K,KAEJrzB,EAAAA,EAAAA,KAAU,KACRwpM,EAAQD,GAAe,IACvB/uD,EAAOZ,GAAc,MACpB,CAAC2vD,EAAa3vD,EAAYh0G,KAE7B5lC,EAAAA,EAAAA,KAAU,KACRu6I,OAASniJ,KACR,CAACuiJ,KAEJ36I,EAAAA,EAAAA,KAAU,KACJqJ,IAAaogM,EAAAA,GAAmBxuD,WAClCkuD,IACAG,IACAhvD,OAASliJ,MAEV,CAACiR,IAEJ,MAAMqgM,GAAmB1nM,EAAAA,EAAAA,IAAiBM,IACxCknM,EAAQlnM,EAAEC,OAAOH,OACjB8mM,IAEItkJ,IAAU+jJ,IACZruD,OAASliJ,MAIPgjJ,GAAkBp5I,EAAAA,EAAAA,IAAiBM,IACvCk4I,EAAOl4I,EAAEC,OAAOH,OAChB8mM,OAGIhuD,GAAoBl5I,EAAAA,EAAAA,IAAiBm5I,IACzCZ,EAASY,GACTkuD,OAGIhuD,GAAoBr5I,EAAAA,EAAAA,IAAgB,KACxC,MAAM2nM,EAAc3mM,EAAKk8D,OACnBs8E,EAAa3B,EAAI36E,OAElByqI,EAAYzyM,QAKjB4xM,EAAW,IACLG,GAAkB,CACpBzkJ,IAAK5e,EACL5iC,KAAM2mM,EACN9nM,YAAa25I,KAIbjkJ,GACFk/J,EAAmB,CACjB7Z,KAAMrlJ,KACF6xM,GAAmB,CAAE5kJ,IAAK5e,MAfhC00G,EAASquD,OAoBPiB,GAAwB5nM,EAAAA,EAAAA,IAAgB,KAC5CgnM,EAA2B,CAAEjK,MAAO,GAAGp0F,eAGnCk/F,GAA2B7nM,EAAAA,EAAAA,IAAgB,KAC/CgnM,EAA2B,CAAEjK,MAAO,GAAGp0F,kBAGnCm/F,GAAuB9nM,EAAAA,EAAAA,IAAgB,KAC3CgnM,EAA2B,CAAEjK,MAAOp0F,OAGhCl8C,GAAW3vD,EAAAA,EAAAA,MACXirM,GAAejrM,EAAAA,EAAAA,KAAO,GAEtBkrM,GAAqBhoM,EAAAA,EAAAA,IAAiB46I,IAC1CysD,IACAN,EAA0B,CAAE11K,SAAQupH,OAAMqtD,UAAWF,EAAa9qM,aAGpE,IAAK2mC,EACH,OAGF,MAAMxb,EAAY/gB,IAAaogM,EAAAA,GAAmB5uD,WAElD,OACEvlJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,aAAYC,SAAA,EACzBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAC+lJ,GAAAA,EAAc,CACbd,qBAAsBA,EACtBz3I,SAAUg4I,EACVt4I,MAAOJ,EAAK,uBACZoT,SAAUwU,KAEZ10B,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACR7N,GAAG,YACHoN,MAAOH,EAAK,uBACZU,SAAUwmM,EACVtnM,MAAOY,EACP4hD,MAAOA,IAAU+jJ,GAAqB/jJ,OAAQxsD,EAC9C2mC,2BAAyB,KAE3BrpC,EAAAA,GAAAA,GAAC2+G,GAAAA,EAAQ,CACPjyG,MAAOy3I,EACP32I,SAAUk4I,EACVz4I,MAAOH,EAAK,0BACZoT,SAAUwU,EACV4pD,UAAWslE,EACX/kC,mBAAoB+kC,GAAgBA,EAAeO,EAAI3iJ,QAAQ4kF,gBAAa1jF,QAGhF1C,EAAAA,GAAAA,GAAA,OAAKF,UAAU,UAASC,UACtBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAACtvB,KAAK,sBAAsB0M,QAAM,EAAC5R,QAASomM,EAAsBn0M,UACzEC,EAAAA,GAAAA,GAAA,QAAAD,SAAO+M,EAAK,qBAEd9M,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAACtvB,KAAK,cAAc0M,QAAM,EAAC5R,QAASqmM,EAAyBp0M,UACpEC,EAAAA,GAAAA,GAAA,QAAAD,SAAO+M,EAAK,wBAEd9M,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAACtvB,KAAK,OAAO0M,QAAM,EAAC5R,QAASsmM,EAAqBr0M,UACzDC,EAAAA,GAAAA,GAAA,QAAAD,SAAO+M,EAAK,0BAEd9M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,iCAAgCC,UAC5Cg0B,EAAAA,GAAAA,GAAWjnB,EAAK,iBAAkB,CAAC,qBAK5C9M,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,QAASqtK,GAAkBG,EAC3B5lM,QAAS63I,EACTzlI,SAAUwU,EACVpiB,UAAWxF,EAAK,QAAQ/M,SAEvB20B,GACC10B,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf5N,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAGftN,EAAAA,GAAAA,GAACwhK,GAAAA,EAAY,CACXh0J,SAAU8mM,EACVv7I,SAAUA,WC9LZy7I,GAAsB,+BAqU5B,IAAe71M,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAM0C,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQkL,IAC1B,WAAE2mM,IAAepkM,EAAAA,EAAAA,KAAezN,IAChC,SAAEsS,GAAau/L,GACf,QAAEtnE,GAAYsnE,EAAW34E,SAAShuH,IAAW,CAAC,EAC9CkoM,EAAkCpzM,EAAO4uC,WAAWykK,+BACpDC,EAAqB1lM,GAAM0lM,mBAC3BC,EAAiB3lM,GAAM4lM,MACvBC,KAA2BF,IAAkBH,IAC/CG,GAAkBH,EACtB,MAAO,CACLxlM,OACA89C,cAAcC,EAAAA,EAAAA,KAAmB3rD,EAAQkL,GACzCoH,WACAohM,eAAenoJ,EAAAA,EAAAA,IAAiB39C,EAAM,cACtC+lM,WAAWpoJ,EAAAA,EAAAA,IAAiB39C,EAAM,eAClCgmM,gBAAiBrpE,EACjBzrF,mBAAoB9+C,EAAO++C,UAAUD,mBACrCw0J,qBACAG,+BAGJ,CAACzzM,GAAUkL,YACFzB,SAAQslC,EAAAA,EAAAA,KAAW/uC,EAAQkL,KAxBlBmC,EAlU6BwmM,EAC/C3oM,SACA0C,OACA89C,eACAp5C,WACAohM,gBACAC,YACAC,kBACA17L,WACA4mC,qBACAg1J,iBACAvpM,UACA+oM,qBACAG,+BAEA,MAAM,WACJM,EAAU,gBACVC,EAAe,aACfC,EAAY,cACZC,EAAa,SACb/qK,EAAQ,wBACRgrK,EAAuB,qBACvBC,EAAoB,sBACpBC,IACE3pM,EAAAA,EAAAA,MAEE4pM,EAAe1mM,GAAM/B,OAAS,GAC9B0oM,EAAe7oJ,GAAcurD,OAAS,GACtCwR,EAAgBh/G,QAAQiiD,GAAcg9D,eAErC8rF,EAAoBC,EAAkBC,IAAqB92M,EAAAA,EAAAA,MAC3DylJ,EAAwBC,IAA6Bz4I,EAAAA,EAAAA,KAAS,IAC9DgB,EAAOw+J,IAAYx/J,EAAAA,EAAAA,IAASypM,IAC5Br9F,EAAOqzD,IAAYz/J,EAAAA,EAAAA,IAAS0pM,IAC5B/zM,EAAOgjJ,IAAY34I,EAAAA,EAAAA,OACnBgjD,EAAO01F,IAAY14I,EAAAA,EAAAA,MACpBuwC,EAAYxtC,IAAQg1I,EAAAA,EAAAA,IAAkBh1I,GACtCg2I,GAAuB78I,EAAAA,EAAAA,GAASq0C,GAAW,EAAOp0C,EAAAA,GAAeC,SACjEwE,GAAOC,EAAAA,EAAAA,KAEPipM,EAA8B/mM,IAAQukB,EAAAA,EAAAA,IAAcvkB,GAEpDgnM,GAA8B3pM,EAAAA,EAAAA,IAAgB,KAClDopM,EAAsB,CAAEnpM,SAAQ0gE,WAAY0nI,QAG9C7pL,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KAGVtB,EAAAA,EAAAA,KAAU,KACH0qM,IACLQ,EAAwB,CAAEjpM,WAC1BipM,EAAwB,CAAEjpM,SAAQ2pM,WAAW,IAC7CT,EAAqB,CAAElpM,cACtB,CAACA,EAAQyoM,KAEZ1qM,EAAAA,EAAAA,KAAU,KACJqJ,IAAaogM,EAAAA,GAAmBxuD,WAClCZ,GAA0B,GAC1BC,OAASliJ,MAEV,CAACiR,IAEJ,MAAMwiM,IAAcruM,EAAAA,EAAAA,KAAQ,IACnBi3C,OAAO6K,KAAKmD,GAAcklC,kBAAoB,CAAC,GAAGzwF,QACxD,CAACurD,GAAcklC,mBACZmkH,GAAoBrpJ,GAAcspJ,eAAe70M,QAAU,EAE3D80M,IAAsBhqM,EAAAA,EAAAA,IAAgB,KAC1C6oM,EAAeoB,EAAAA,GAAkBC,oBAG7BC,IAAwBnqM,EAAAA,EAAAA,IAAgB,KAC5C6oM,EAAeoB,EAAAA,GAAkBG,eAG7BC,IAAuBrqM,EAAAA,EAAAA,IAAgB,KAC3C6oM,EAAeoB,EAAAA,GAAkBK,cAG7BC,IAA4BvqM,EAAAA,EAAAA,IAAgB,KAChD6oM,EAAeoB,EAAAA,GAAkBO,uBAG7BC,IAAqBzqM,EAAAA,EAAAA,IAAgB,KACzC6oM,EAAeoB,EAAAA,GAAkBS,YAG7BC,IAAsB3qM,EAAAA,EAAAA,IAAgB,KAC1C6oM,EAAeoB,EAAAA,GAAkBW,iBAG7BC,IAAiB7qM,EAAAA,EAAAA,IAAiB46I,IACtCrC,EAASqC,GACTvC,GAA0B,MAGtBsnB,IAAoB3/J,EAAAA,EAAAA,IAAiBM,IACzC8+J,EAAS9+J,EAAEC,OAAOH,OAClBi4I,GAA0B,MAGtByyD,IAAoB9qM,EAAAA,EAAAA,IAAiBM,IACzC++J,EAAS/+J,EAAEC,OAAOH,OAClBi4I,GAA0B,MAGtB0yD,IAAsB/qM,EAAAA,EAAAA,IAAgB,KAC1C,MAAMgrM,EAAepqM,EAAMs8D,OACrB+tI,EAAej/F,EAAM9uC,OAEtB8tI,EAAa91M,OAKlB4zM,EAAW,CACT7oM,SACAW,MAAOoqM,EACPh/F,MAAOi/F,EACP11M,UARA+iJ,EAAS4vD,OAYPgD,IAAyBlrM,EAAAA,EAAAA,IAAgB,KAC7C6oM,EAAeoB,EAAAA,GAAkBkB,uBAG7BC,IAA0BprM,EAAAA,EAAAA,IAAgB,KAC9C6oM,EAAeoB,EAAAA,GAAkBoB,wBAG7BC,IAAsBtrM,EAAAA,EAAAA,IAAgB,KACtC2C,EAAKq9G,UACPipF,EAAc,CAAEhpM,OAAQ0C,EAAKpP,KAE7By1M,EAAa,CAAE/oM,OAAQ0C,EAAKpP,KAG9Bk2M,IACAV,IACA7qK,EAAS,CAAE3qC,QAAI6C,OAGXm1M,IAA2B/vM,EAAAA,EAAAA,KAAQ,KACvC,IAAKilD,GAAcs2H,iBACjB,OAAOv2K,EAAK,gBAGd,GAA2C,QAAvCigD,EAAas2H,iBAAiBniL,KAChC,OAAO4L,EAAK,gBAGd,MAAMgrM,EAAgB/qJ,EAAas2H,iBAAiBS,QAAQtiL,OACtDu2M,EAAc53J,GAAoB1iB,QAAQyR,IAAcA,EAASm9D,aAAY7qG,QAAU,EAE7F,OAAOu2M,EAAc,GAAGD,OAAmBC,IAAgBD,EAAc1xH,aACxE,CAACjmC,EAAoB4M,GAAcs2H,iBAAkBv2K,IAClDkrM,IAAkBlwM,EAAAA,EAAAA,KAAQ,KAAMqpF,EAAAA,EAAAA,IAAaliF,IAAO,CAACA,IAG3D,IADqByjK,EAAAA,EAAAA,MAAuB7jI,EAAAA,EAAAA,MAAatiC,IACrC0C,EAAK21K,YACvB,OAGF,MAAMlwJ,GAAY/gB,IAAaogM,EAAAA,GAAmB5uD,WAElD,OACEvlJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,aAAYC,SAAA,EACzBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,8BAA6BC,SAAA,EAC1CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAC+lJ,GAAAA,EAAc,CACbd,qBAAsBA,EACtBz3I,SAAU2pM,GACVj3L,UAAW60L,KAEbn1M,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACR7N,GAAG,gBACHoN,MAAOH,EAAK,oBACZU,SAAUy+J,GACVv/J,MAAOQ,EACPgiD,MAAOA,IAAUslJ,GAAsBtlJ,OAAQxsD,EAC/Cwd,UAAW60L,KAEb/0M,EAAAA,GAAAA,GAAC2+G,GAAAA,EAAQ,CACP9+G,GAAG,gBACHoN,MAAOH,EAAK,0BACZU,SAAU4pM,GACV1qM,MAAO4rG,EACPh6B,UAlMkB,IAmMlBugC,oBAnMkB,IAmM6BvG,EAAM92G,QAAQ4kF,WAC7DlmE,UAAW60L,EACXj2F,mBAAiB,OAGpB7vG,EAAKq9G,YACJ1sH,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CAACtvB,KAAK,OAAOuvB,WAAS,EAACz0B,QAASwoM,GAAoBv2M,SAAA,EAC3DC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAE+M,EAAK,kBAC9B9M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAoB+M,EAAlBkrM,GAAuB,aAAqB,qBAG5Ep4M,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPtvB,KAAK,UACLuvB,WAAS,EACTz0B,QAAS2oM,GACTv2L,UAAW60L,EAAch1M,SAAA,EAEzBC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAE+M,EAAK,iBAC9B9M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAkB+M,EAAhBg9G,EAAqB,mBAA2B,YAE7EkrF,IACCp1M,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPtvB,KAAK,OACLlF,QAASipM,GACTx0K,WAAS,EACTriB,UAAW+0L,EAAgBl1M,SAAA,EAE3BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAE+M,EAAK,4BAC9B9M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SACvBk1M,GAAkBgD,EAAAA,GAAAA,IAAchD,EAAgBzzM,QAAUsL,EAAK,gBAIrEhC,QAAQmE,EAAKipM,cAAc12M,UAC1B5B,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPtvB,KAAK,kBACLlF,QAASmpM,GACT10K,WAAS,EAAAxiC,SAAA,EAETC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAE+M,EAAK,wBAC9B9M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,UACvBk4M,EAAAA,GAAAA,IAAchpM,EAAKipM,aAAa12M,cAIvC5B,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPtvB,KAAK,gBACLuvB,WAAS,EACTz0B,QAAS6oM,GACTz2L,UAAW60L,EAAch1M,SAAA,EAEzBC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAE+M,EAAK,gBAC9B9M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWsW,IAAI,OAAMrW,SAClC83M,QAGJ7B,IACCp2M,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPtvB,KAAK,WACL+qG,QAAM,EACNr+F,QAAM,EACNQ,UAAW40L,EACXhnM,QAASmoM,EAA4Bl2M,SAAA,EAErCC,EAAAA,GAAAA,GAAA,QAAAD,SAAO+M,EAAK,2BACZ9M,EAAAA,GAAAA,GAAC6pC,GAAAA,EAAQ,CACPhqC,GAAG,mBACHoN,MAAOH,EAAK,wBACZm8B,QAAS0rK,WAKjB/0M,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBH,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPtvB,KAAK,QACLuvB,WAAS,EACTz0B,QAAS+oM,GAA0B92M,SAAA,EAEnCC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAE+M,EAAK,4BAC9B9M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAEo2M,SAE9Bv2M,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPtvB,KAAK,QACLuvB,WAAS,EACTz0B,QAAS0pM,GAAuBz3M,SAAA,EAEhCC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAQsW,IAAI,OAAMrW,SAAE+M,EAAK,yBACzC9M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWsW,IAAI,OAAMrW,UAAEk4M,EAAAA,GAAAA,IAAchpM,EAAKo7L,oBAE5DzqM,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPtvB,KAAK,cACLuvB,WAAS,EACTz0B,QAAS4pM,GAAwB33M,SAAA,EAEjCC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAE+M,EAAK,0BAC9B9M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAEq2M,YAGhCp2M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,UAASC,UACtBC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAACtvB,KAAK,SAAS0M,QAAM,EAACtM,aAAW,EAACtF,QAASgoM,EAAiB/1M,SAClEkP,EAAKq9G,UAAYx/G,EAAK,iBAAmBA,EAAK,wBAIrD9M,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,QAASw+G,EACT52I,QAASupM,GACTn3L,SAAUwU,GACVpiB,UAAWxF,EAAK,QAAQ/M,SAEvB20B,IACC10B,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf5N,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAGftN,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQmqM,EACRjqM,QAASmqM,EACTlhM,KAAM5F,EAAKq9G,UAAYx/G,EAAK,sBAAwBA,EAAK,qBACzDu2B,aAAcp0B,EAAKq9G,UAAYx/G,EAAK,iBAAmBA,EAAK,gBAC5Dw2B,eAAgBs0K,GAChBr0K,sBAAoB,WC3L5B,IAAe5kC,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAM0C,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQkL,GAChC,MAAO,CACL0C,OACAklB,cAAe9yB,EAAO8yB,cACtBZ,UAAWtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,GACjCgjF,kBAAkBjlC,EAAAA,EAAAA,KAAmB3rD,EAAQkL,IAAS0lF,oBAPxCvjF,EAtJwCypM,EAC1D5+L,WACAtK,OACAskB,YACAY,gBACA89D,mBACAkjH,iBACAiD,qBACAxsM,cAEA,MAAM,iBAAEysM,IAAqBtsM,EAAAA,EAAAA,MACvBe,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,IAGV,MAAM0sM,EAAuBxtM,QAAQmE,GAAMspM,oBACrCC,EAAqB1tM,QAAQmE,GAAMwpM,kBAEnCC,EAAkB5tM,QAAQmE,GAAMq9G,WAAcr9G,IAAQ29C,EAAAA,EAAAA,IAAiB39C,EAAM,cAC7E0pM,EAAsBplL,IAAaq5B,EAAAA,EAAAA,IAAiB39C,EAAO,gBAE3D2pM,GAAe9wM,EAAAA,EAAAA,KAAQ,KAC3B,IAAKmqF,EACH,MAAO,GAGT,MAAO9/D,EAAO0mL,IAAU5nE,EAAAA,GAAAA,IAAUlyF,OAAOyK,OAAOyoC,IAAoBo8B,GAAWA,EAAOyqF,UAEtF,MAAO,IAAI3mL,KAAU0mL,KACpB,CAAC5mH,IAEE8mH,GAAyBzsM,EAAAA,EAAAA,IAAiB+hH,IAC9C+pF,EAAmB/pF,EAAO1wF,OAAQ0wF,EAAO2qF,mBAAqB7kL,GAC9DghL,EAAeoB,EAAAA,GAAkB0C,oBAG7BC,GAAyB5sM,EAAAA,EAAAA,IAAgB,KAC7C+rM,EAAiB,CACf9rM,OAAQ0C,EAAMpP,GACd24M,qBACAF,sBAAuBA,OAIrBa,GAAuB7sM,EAAAA,EAAAA,IAAgB,KAC3C+rM,EAAiB,CACf9rM,OAAQ0C,EAAMpP,GACd24M,oBAAqBA,EACrBF,4BAIEc,GAAsB9sM,EAAAA,EAAAA,IAAgB,KAC1C6oM,EAAeoB,EAAAA,GAAkB8C,mBAG7BC,GAAkBhtM,EAAAA,EAAAA,IAAiB+hH,IACvC,GAAIA,EAAOyqF,QACT,OAAOhsM,EAAK,kBAId,MAAMq4B,GAAY0J,EAAAA,EAAAA,MAAYpI,MAAMC,KAC9B6yK,EAAiBlrF,EAAO2qF,iBAAmB7zK,EAAUkpF,EAAO2qF,uBAAoBt2M,EAEtF,OAAI62M,EACKzsM,EAAK,uBAAuB88B,EAAAA,EAAAA,IAAgB2vK,IAG9CzsM,EAAK,mBAGd,OACE9M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,aAAYC,UACzBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,8BAA6BC,SAAA,EAC1CC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,UAASC,UACtBH,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPtvB,KAAK,SACLuvB,WAAS,EACTriB,UAAQ,EAAAngB,SAAA,EAERC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAE+M,EAAK,eAC9B9M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAE+M,EAAKymB,EAAY,4BAA8B,8BAI/E3zB,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAAUsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAA,EAC3DC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAesW,IAAI,OAAMrW,SACnC+M,EAAKymB,EACF,sCACA,uCAGLqlL,EAAaplM,KAAK66G,IACjBruH,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAEPxiC,UAAU,sBAEVgO,QAASA,IAAMirM,EAAuB1qF,GAAQtuH,UAE9CC,EAAAA,GAAAA,GAACiiD,GAAAA,EAAe,CACdtkB,OAAQ0wF,EAAO1wF,OACf0jB,OAAQi4J,EAAgBjrF,GACxBxpF,eAAa,KARVwpF,EAAO1wF,WAahB39B,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,QAASwyK,EACT5qM,QAASsrM,EACT9mM,UAAWxF,EAAK,mCAAmC/M,UAEnDC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,yBAIdqrM,IACC/4M,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kBAAiBC,UAC9BC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7pB,QAASqvK,EACTrrM,MAAOH,EAAK,uBACZU,SAAU0rM,MAGbZ,IACC14M,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kBAAiBC,UAC9BC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7pB,QAASuvK,EACTvrM,MAAOH,EAAK,kCACZU,SAAU2rM,OAGdn5M,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAgCC,SAC1C+M,EAAK,4CC8HxB,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAM0C,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQkL,IAC1B,oBAAE+1I,EAAmB,gBAAEC,EAAe,MAAErzF,IAAUsqJ,EAAAA,EAAAA,IAAiBn4M,EAAQkL,GAEjF,MAAO,CACL0C,OACAskB,WAAWC,EAAAA,EAAAA,IAAcvkB,GACzB0E,UAAU7E,EAAAA,EAAAA,KAAezN,GAAQ6xM,WAAWv/L,SAC5Cu7C,QACAozF,sBACAC,kBACAjzI,YAAaL,GAAMK,YACnBmqM,gBAAgBjwE,EAAAA,GAAAA,GAAmBnoI,EAAQ,kBAC3Cq4M,mBAAmB1sJ,EAAAA,EAAAA,KAAmB3rD,EAAQkL,IAASotM,eAG3D,CAACt4M,GAAUkL,YACFzB,SAAQslC,EAAAA,EAAAA,KAAW/uC,EAAQkL,KAAWitM,EAAAA,EAAAA,IAAiBn4M,EAAQkL,KAlBtDmC,EAtPqCkrM,EACvD3qM,OACAsK,WACAga,YACA5f,WACA2uI,sBACAC,kBACArzF,QACA5/C,cACAmqM,iBACAC,oBACA9tM,cAEA,MAAM,iBACJiuM,EAAgB,kBAChBC,EAAiB,kBACjBC,EAAiB,sBACjBlwE,EAAqB,qBACrBmwE,IACEjuM,EAAAA,EAAAA,MAEEw4I,GAAwBz8I,EAAAA,EAAAA,KAAQ,IAAMmH,EAAK8xI,WAAWxvG,MAAK,EAAGswG,gBAAiBA,KAAa,CAAC5yI,EAAK8xI,YAClGqB,EAAkBmC,GAAuBtvC,UAAY,GACrDxmE,GAAW3mC,EAAAA,EAAAA,KAAQ,KAAMqpF,EAAAA,EAAAA,IAAaliF,IAAO,CAACA,KAE7Cy1I,EAAwBC,IAA6Bz4I,EAAAA,EAAAA,KAAS,IAC9D+tM,EAAaC,IAAkBhuM,EAAAA,EAAAA,IAAsBuiC,EAAW,SAAW,YAC3Es2G,EAAkBC,IAAuB94I,EAAAA,EAAAA,OACzCiuM,EAA2BC,EAAyBC,IAA4Bp7M,EAAAA,EAAAA,MAChFq7M,EAA0BC,EAAwBC,IAA2Bv7M,EAAAA,EAAAA,KAE9E2jJ,GAA8BvsH,EAAAA,EAAAA,GAAsBisH,GAGpDpyI,EAAYw0I,GAA0B55I,QACzB,WAAhBmvM,IACKl1D,GAAqB3C,GAAwC,KAArB2C,KAJXzC,GAAuBM,IAMtC,YAAhBq3D,GAA6BxrK,IAGnC3jB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KAGVtB,EAAAA,EAAAA,KAAU,KACRq6I,GAA0B,KACzB,CAACvC,KAEJ93I,EAAAA,EAAAA,KAAU,KACJ2vM,IAAgBP,GAClBI,MAED,CAACG,EAAaP,EAAmBI,IAEpC,MAAMz2D,GAAuB1jJ,EAAAA,EAAAA,KAAa+M,IACxCs4I,EAAoBt4I,GACpBi4I,GAA0B,GAEtBz1F,GACF8qJ,EAAqB,CACnBztM,OAAQ0C,EAAKpP,OAGhB,CAACoP,EAAKpP,GAAIqvD,IAEPurJ,GAAqB96M,EAAAA,EAAAA,KAAY,CAAC+M,EAAeE,KAIrD,GAHgBmyC,OAAOyK,QAAO3a,EAAAA,EAAAA,MAAYsa,MAAMziB,MAC7CjJ,QAAO,EAAG6uF,YAAWy0B,eAAgBz0B,GAAay0B,GAAW70C,MAAMwuG,GAAMA,EAAEnhM,aAElE/X,QAAUi4M,GAA4B,WAAV/sM,EAAoB,CAC1Dm9H,EAAsB,CAAEn6G,MAAO,mBAC/B,MAAMirL,EAAa/tM,EAAE6X,cAAckI,QAAQ,gBAK3C,OAFCguL,EAAWx2M,cAAc,kBAAuC8kC,SAAU,OAC1E0xK,EAAWx2M,cAAc,mBAAwC8kC,SAAU,EAE9E,CACAixK,EAAextM,GACfi4I,GAA0B,KACzB,CAAC80D,EAAgB5vE,IAEd+wE,GAA+Bj7M,EAAAA,EAAAA,KAAa+M,IAChDqtM,EAAkB,CAChBxtM,OAAQ0C,EAAKpP,GACbyP,YAAuB,cAAV5C,MAEd,CAACuC,EAAKpP,GAAIk6M,IAEPc,GAAal7M,EAAAA,EAAAA,KAAY,KACzB8uC,GAA4B,YAAhBwrK,EACdM,IAEAV,EAAiB,CAAE5kG,SAA0B,WAAhBglG,GAA4Bl1D,GAA0B,OAEpF,CAACt2G,EAAU8rK,EAAwBN,EAAaJ,EAAkB90D,IAE/D+1D,GAAkCn7M,EAAAA,EAAAA,KAAY,KAClDk6M,EAAiB,CAAE5kG,SAAU,GAAI8lG,wBAAwB,IACzDP,MACC,CAACA,EAAyBX,IAEvBmB,GAA0Br7M,EAAAA,EAAAA,KAAY,KAC1C06M,IACAP,MACC,CAACO,EAA0BP,IAExBhtM,GAAOC,EAAAA,EAAAA,KACPkuM,EAAc1nL,EAAY,UAAY,OACtC2nL,EAAc3nL,EAAY,UAAY,QAEtChmB,EAAU,CACd,CAAEb,MAAO,UAAWO,MAAOH,EAAK,GAAGmuM,YAAuBxsH,SAAU3hF,EAAK,GAAGmuM,iBAC5E,CAAEvuM,MAAO,SAAUO,MAAOH,EAAK,GAAGmuM,WAAsBxsH,SAAU3hF,EAAK,GAAGmuM,iBAGtEE,EAAoB,CAAC,CACzBzuM,MAAO,UACPO,MAAOH,EAAK,yCACX,CACDJ,MAAO,YACPO,MAAOH,EAAK,2CAGR4nB,EAAY/gB,IAAaogM,EAAAA,GAAmB5uD,WAC5CE,GAA8C,WAAhB40D,GAA4BhrM,EAAK8xI,WAAa9xI,EAAK8xI,UAAUv/I,OAAS,EAiB1G,OACE5B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,aAAYC,SAAA,EACzBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,8BAA6BC,SAAA,EAC1CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAAUsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAA,EAC3DC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,kBAAiBC,SAAE+M,EAAK,GAAGouM,YACzCl7M,EAAAA,GAAAA,GAACqN,GAAAA,EAAU,CACTI,SAAUwsM,EACV3sM,KAAK,eACLC,QAASA,EACTC,SAAUitM,OAGG,YAAhBR,GACCj6M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,UAAUsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAC1D25M,GACC95M,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAACwzG,GAAAA,EAAS,CAAChnB,KAAMktH,EAAmB55M,UAAU,iBAC9CE,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAesW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAC7D+M,EAAK,GAAGmuM,uBAGXj7M,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAACtvB,KAAK,SAAS0M,QAAM,EAACtM,aAAW,EAACtF,QAASssM,EAAwBr6M,SACzE+M,EAAK,iBAER9M,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQyuM,EACRvuM,QAASyuM,EACTxlM,KAAM/H,EAAK,eACXu2B,aAAcv2B,EAAK,gBACnBw2B,eAAgB03K,EAChBz3K,sBAAoB,QAIxBvjC,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,OAIZ9rD,EAAAA,GAAAA,IAAA,OAAKE,UAAU,oBAAmBC,SAAA,EAChCC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,iBAAgBC,UAC7BC,EAAAA,GAAAA,GAACmiJ,GAAa,CACZE,QAAM,EACND,gBAAiBA,EACjB1tH,UAAWA,EACX4tH,oBAAqBA,EACrBC,gBAAiBA,EACjB/0I,SAAU61I,MAGbn0F,IAAU82F,EAAAA,KAhErB,WACE,MAAMC,EAAmB,GAAGn9E,EAAAA,MAAkBo9E,EAAAA,MAE9C,OACElmJ,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAesW,IAAI,OAAMrW,SAClC+M,EAAK,mCACJsqD,QAAQ,SAAU,mBAClB4jB,MAAM,KACNxnE,KAAK0yC,GACU,kBAANA,GAAwBlmD,EAAAA,GAAAA,GAAC+5G,GAAAA,EAAQ,CAACziG,IAAK2uI,EAAkBpxI,KAAM,IAAIqxI,EAAAA,QAA0BhgG,KAI/G,CAmDgDigG,IACtCnmJ,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAesW,IAAI,OAAMrW,SACnC+M,EAAK,GAAGouM,wCAId71D,KACCrlJ,EAAAA,GAAAA,GAAC8gJ,GAAe,CACdv0I,OAAQ0C,EAAKpP,GACbkhJ,UAAW9xI,EAAK8xI,UAChBC,eAAgBqC,KAGpBzjJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAAUsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAA,EAC3DC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,kBAAiBC,SAC5B+M,EAAKymB,EAAY,4CAA8C,8CAElEvzB,EAAAA,GAAAA,GAACqN,GAAAA,EAAU,CACTI,SAAU6B,EAAc,YAAc,UACtChC,KAAK,kBACLC,QAAS4tM,EACT3tM,SAAUotM,KAEZ56M,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAgCC,SAEvC+M,EADHymB,EACQ,2CACA,mDAIfvzB,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,QAASh2B,EACTgQ,SAAUwU,EACVpiB,UAAWxF,EAAK,QAChBgB,QAAS+sM,EAAW96M,SAEnB20B,GACC10B,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf5N,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAGftN,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQ4uM,EACR1uM,QAAS4uM,EACT3lM,KAAM/H,EAAK,gDAAiDs1I,GAC5D9+G,eAAgBw3K,EAChBv3K,sBAAoB,WC1N5B,IAAe5kC,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAU4N,WACT,MAAM,cAAEklB,GAAkB9yB,EAE1B,MAAO,CACL8yB,gBACAinL,aAAapuJ,EAAAA,EAAAA,KAAmB3rD,EAAQ4N,EAAKpP,KAAKmyF,WANpCtjF,EAlDoC2sM,EACtDpsM,OACAklB,gBACAinL,cACA1vM,SACAE,cAEA,MAAM,gBACJ0vM,EAAe,iBACftuF,IACEjhH,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,MACN+3C,EAAQ2H,IAAavgD,EAAAA,EAAAA,IAAS,IAE/BqvM,GAAUzzM,EAAAA,EAAAA,KAAQ,KACtB,MAAM0zM,GAAsBJ,GAAe,IACxC58J,QAAO,CAACiL,EAAe4kE,KACjBA,EAAOzH,SAAYyH,EAAOyqF,SAAWzqF,EAAO1wF,SAAWxJ,GAC1Ds1B,EAAI12C,KAAKs7G,EAAO1wF,QAEX8rB,IACN,IAEL,OAAOxlB,EAAAA,GAAAA,IAAmB,CAAEC,IAAKs3K,EAAoBr3K,MAAO2gB,EAAQ5jD,KAAM,WACzE,CAACk6M,EAAajnL,EAAe2wB,IAE1Bb,GAAiB33C,EAAAA,EAAAA,IAAgB,KACrCgvM,EAAgB,CAAE/uM,OAAQ0C,EAAKpP,QAG3B8+J,GAAmBryJ,EAAAA,EAAAA,IAAiBqxB,IACxCqvF,EAAiB,CAAEzgH,OAAQ0C,EAAKpP,GAAI89B,WACpC/xB,OAGF,OACE5L,EAAAA,GAAAA,GAACunD,GAAgB,CACf77C,OAAQA,EACR87C,cAAe+zJ,EACf9zJ,kBAAmB36C,EAAK,oBACxBg4C,OAAQA,EACR6C,eAAgB8E,EAChB/E,SAAUzD,EACV2D,mBAAoB+2G,EACpB/yJ,QAASA,QCqDf,IAAejN,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAM0C,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQkL,IACxBm6B,KAAMvB,GAAc9jC,EAAOolC,MAGnC,MAAO,CACLx3B,OACAk2B,YACAs2K,iBALuBxsM,KAAS29C,EAAAA,EAAAA,IAAiB39C,EAAM,aAAeA,EAAKq9G,WAM3EovF,gBAAgB1uJ,EAAAA,EAAAA,KAAmB3rD,EAAQkL,IAAS8pM,eAAiB/xK,GAAAA,EACrE/Q,UAAWtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,MAXnBP,EA3FsCitM,EACxD1sM,OACAk2B,YACAs2K,mBACAC,iBACAnoL,YACA3nB,UACA2N,eAEA,MAAM,6BAAE4zG,IAAiCphH,EAAAA,EAAAA,MAEnCe,GAAOC,EAAAA,EAAAA,MACN6uM,EAAuBC,EAAqBC,IAAwB78M,EAAAA,EAAAA,MAE3E6rB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,IAGV,MAAMmwM,GAAep8M,EAAAA,EAAAA,KAAa0uH,IAChC,IAAKA,EAAO2tF,eACV,OAGF,MAAMC,EAAe92K,EAAUkpF,EAAO2tF,gBACtC,OAAKC,EAIEnvM,EAAK,iBAAiB88B,EAAAA,EAAAA,IAAgBqyK,SAJ7C,IAKC,CAACnvM,EAAMq4B,IAEJ+2K,GAAoBv8M,EAAAA,EAAAA,KAAa0uH,IACrC,GAAKp/G,EAIL,MAAO,CAAC,CACN/B,MAAOJ,EAAK,WACZkG,KAAM,SACNI,aAAa,EACb6tC,QAASA,IAAMksE,EAA6B,CAC1C5gH,OAAQ0C,EAAKpP,GACb89B,OAAQ0wF,EAAO1wF,OACfuyF,aAAc,CAAC,QAGlB,CAACpjH,EAAMmC,EAAMk+G,IAEhB,OACEntH,EAAAA,GAAAA,GAAA,OAAKF,UAAU,aAAYC,UACzBC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,8BAA6BC,UAC1CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAAUsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAA,EAC3DC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAcC,SAAE+M,EAAKymB,EAAY,oBAAsB,qBAEnEmoL,EAAeloM,KAAK66G,IACnBruH,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAEPxiC,UAAU,sBACV4f,QAAM,EACNkhC,eAAgBs7J,EAAkB7tF,GAAQtuH,UAE1CC,EAAAA,GAAAA,GAACiiD,GAAAA,EAAe,CACdtkB,OAAQ0wF,EAAO1wF,OACf0jB,OAAQ06J,EAAa1tF,GACrBxpF,eAAa,KARVwpF,EAAO1wF,UAYf89K,IACCz7M,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,SAAO,EACPp4B,QAAS+tM,EACTvpM,UAAWxF,EAAK,yCAAyC/M,UAEzDC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,sBAGd2B,GAAQwsM,IACPz7M,EAAAA,GAAAA,GAACq7M,GAAoB,CACnBpsM,KAAMA,EACNvD,OAAQkwM,EACRhwM,QAASkwM,eCmLvB,IAAen9M,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAM0C,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQkL,IAC1B,aAAEw9G,IAAiB/8D,EAAAA,EAAAA,KAAmB3rD,EAAQkL,IAAW,CAAC,GAC1D,iBAAE4vM,EAAkBz1K,KAAMk4H,GAAev9J,EAAO8nD,MAGtD,MAAO,CACLl6C,OACA2vJ,aACAu9C,mBACAC,WANiBryF,GAAe35E,EAAAA,EAAAA,KAAW/uC,EAAQ0oH,QAAgBrnH,EAOnE6wB,UAAWtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,MAZnBP,EA5PgC2tM,EAClDptM,OACArD,UACA2N,WACAhN,SACAqyJ,aACAw9C,aACAD,mBACA5oL,YACA4hL,qBAEA,MAAM,wBACJmH,EAAuB,oBACvBC,EAAmB,sBACnBC,EAAqB,kBACrBC,EAAiB,iBACjBC,IACE3wM,EAAAA,EAAAA,OAEG4wM,EAAeC,IAAoB1wM,EAAAA,EAAAA,OACnC2wM,EAAgCC,EAA8BC,IAAiC99M,EAAAA,EAAAA,MAC/F+9M,EAA8BC,EAA4BC,IAA+Bj+M,EAAAA,EAAAA,MACzFk+M,EAAcC,IAAmBlxM,EAAAA,EAAAA,IAASpB,QAAQsxM,GAAYe,gBAC9DE,EAAeC,IAAoBpxM,EAAAA,EAAAA,IAASpB,QAAQsxM,GAAYiB,gBACjEvwM,GAAOC,EAAAA,EAAAA,KACPg9G,EAAeqyF,GAAYv8M,IAEjCirB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KAGVtB,EAAAA,EAAAA,KAAU,KACRgyM,MACC,CAACA,KAEJhyM,EAAAA,EAAAA,KAAU,KACJiP,IACF6jM,EAAgBhB,GAAYe,eAAgB,GAC5CG,EAAiBlB,GAAYiB,gBAAiB,MAE/C,CAACjB,EAAY7iM,IAEhB,MAAMgkM,GAA4B59M,EAAAA,EAAAA,KAAY,KAC5Co9M,IACAP,EAAsB,CAAE/qK,UAAWle,EAAYhnB,EAASw9G,IACnDx2F,GACH4hL,EAAeoB,EAAAA,GAAkBiH,WAElC,CAACT,EAA+BP,EAAuBjpL,EAAWhnB,EAAQw9G,EAAcorF,IAErFsI,GAA0B99M,EAAAA,EAAAA,KAAY,KAC1Cu9M,IACAX,EAAoB,CAAE9qK,UAAWllC,EAAQA,OAAQowM,MAChD,CAACO,EAA6BX,EAAqBhwM,EAAQowM,IAExDe,GAAwB/9M,EAAAA,EAAAA,KAAaspC,IACzCm0K,EAAgBn0K,GAChByzK,EAAiB,CAAEnwM,OAAQw9G,EAAe98C,UAAWhkC,IAChDA,GACHq0K,GAAiB,KAElB,CAACvzF,EAAc2yF,IAEZiB,GAAyBh+M,EAAAA,EAAAA,KAAaspC,IAC1Cq0K,EAAiBr0K,GACjBwzK,EAAkB,CAAElwM,OAAQw9G,EAAe98C,UAAWhkC,MACrD,CAAC8gF,EAAc0yF,IA6FlB,MAAMmB,GAAsBtxM,EAAAA,EAAAA,IAAgB,KAC1C6oM,EAAeoB,EAAAA,GAAkBsH,uBAkDnC,OACE79M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,aAAYC,UACzBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,8BAA6BC,SAAA,EAC1CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAACqkG,GAAAA,EAAuB,CACtBjkG,OAAQC,GAAAA,EAAey9M,iBACvB59M,KAAM69M,EAAAA,IACNj+M,UAAU,iBAEXs8M,IA7FLx8M,EAAAA,GAAAA,IAAA,OAAAG,SAAA,CACGq8M,IACCp8M,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPxiC,UAAU,sBACV0iC,UAAQ,EAAAziC,UAERC,EAAAA,GAAAA,GAACoiD,GAAAA,EAAa,CAAC71C,OAAQ6vM,EAAWv8M,QAGtCG,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,SACL0M,QAAM,EACNtM,aAAW,EACXtF,QAASgvM,EAA6B/8M,SAErC+M,EAAKymB,EAAY,wBAA0B,8BAE9CvzB,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQmxM,EACRjxM,QAASmxM,EACT30K,QAvEJxoC,EAAAA,GAAAA,IAAA,OAAKE,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CACL3zB,KAAK,OACL4zB,KAAMsoL,KAERp8M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SACzB+M,EAAKymB,EAAY,wBAA0B,gCAkE5CzL,WAAWiM,EAAAA,GAAAA,GACTjnB,EAAKymB,EAAY,+BAAiC,6BAA8B6oL,GAAYlvM,OAC5F,CAAC,KAAM,oBAETm2B,aAAcv2B,EAAKymB,EAAY,wBAA0B,2BACzD+P,eAAgBi6K,EAChBh6K,sBAAoB,QAmElB64K,IAvDNx8M,EAAAA,GAAAA,IAAA,OAAAG,SAAA,EACEC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAesW,IAAI,OAAMrW,SAAE+M,EAAK,4BAE7ClN,EAAAA,GAAAA,IAAA,OAAKwyK,eAAa,EAAAryK,SAAA,EAChBC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAEPtvB,KAAK,QACL0M,QAAM,EACN5f,UAAU,cACVk+M,kBAAgB,EAChB59B,cAAe,EACftyK,QAAS8vM,EAAoB79M,SAE5B+M,EAAK,0BARF,gBAULqvM,EACCA,EAAiB3oM,KAAI,CAAC3T,EAAI4lD,KACxBzlD,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAEP89I,cAAe36H,EAAI,EACnB3lD,UAAU,kCACVgO,QAASA,KArHrB8uM,EAsHgC/8M,GArHhCo9M,KAsHcl9M,UAEFC,EAAAA,GAAAA,GAACoiD,GAAAA,EAAa,CAAC71C,OAAQ1M,KAPlBA,MAWTG,EAAAA,GAAAA,GAACm7H,GAAAA,EAAY,CAAqBilD,cAAe,EAAGvrK,KAAK,8BAAvC,qBAGtB7U,EAAAA,GAAAA,GAAA,KAAGF,UAAU,yBAAyBsW,IAAI,OAAMrW,SAAE+M,EAAK,6BACvD9M,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQsxM,EACRpxM,QAASsxM,EACT90K,OAlHR,WACE,IAAKu0K,EAAe,OACpB,MAAMsB,EAAcr/C,EAAW+9C,GAC/B,OAAKsB,GAGHr+M,EAAAA,GAAAA,IAAA,OAAKE,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CACL3zB,KAAK,OACL4zB,KAAMmqL,KAERj+M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,SACzB+M,EAAK,+CATZ,CAaF,CAkGgBoxM,GACRp2L,UAjGR,WACE,IAAK60L,EAAe,OACpB,MAAMsB,EAAcr/C,EAAW+9C,GAC/B,OAAKsB,GAED9sH,EAAAA,EAAAA,IAAa8sH,IACRlqL,EAAAA,GAAAA,GACL,yBAAyBkqL,EAAY/wM,sCAAsC+B,GAAM/B,WACjF,CAAC,KAAM,qBAIJ6mB,EAAAA,GAAAA,GAEL,yBAAyBkqL,EAAY/wM,sCAAsC+B,GAAM/B,kFACjF,CAAC,KAAM,yBAZT,CAcF,CAgFmBixM,GACX96K,aAAcv2B,EAAK,uBACnBw2B,eAAgBm6K,UAkBjBrB,IACCx8M,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,kBAAiBC,SAAE+M,EAAK,+BACtC9M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kBAAiBC,UAC9BC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7pB,QAASk0K,EACTpqJ,QAAS2qJ,EACTzwM,MAAOH,EAAK,iCAGfqwM,IACCn9M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kBAAiBC,UAC9BC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7pB,QAASo0K,EACTtqJ,QAAS4qJ,EACT1wM,MAAOH,EAAK,mCAIlB9M,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAgCC,SAC3B+M,EAAfqwM,EAAoB,iCAAyC,+CC7NtEiB,GAAoB,6BAGpBC,GAAoD,CACxD,eACA,aACA,YACA,aACA,cACA,cACA,eACA,aACA,aACA,kBACA,aACA,aACA,YAIIC,GAA0BD,GAAgB78M,OAAS,EAEnDk2J,IAAetrI,EAAAA,GAAAA,KAAUixC,GAAOA,KAAM,KAAK,GAuZjD,IAAe1+D,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAM0C,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQkL,GAC1BwgD,GAAeC,EAAAA,EAAAA,KAAmB3rD,EAAQkL,IAC1C,WAAE2mM,EAAU,kBAAEqL,IAAsBzvM,EAAAA,EAAAA,KAAezN,IACnD,SAAEsS,GAAau/L,EACfsL,EAAmB1zM,QAAQiiD,GAAcg9D,cACzC00F,GAAe/xF,EAAAA,EAAAA,IAAiBz9G,IAChC,QAAE28H,GAAYsnE,EAAW34E,SAAShuH,IAAW,CAAC,EAC9CmyM,GAAgBF,KAAqB5xJ,EAAAA,EAAAA,IAAiB39C,EAAM,eAAiBA,EAAKq9G,WAKxF,MAAO,CACLr9G,OACA89C,eACAp5C,WACA8qM,eACAD,mBACAzJ,cAVoB9lM,EAAKq9G,YAAa1/D,EAAAA,EAAAA,IAAiB39C,EAAM,cAW7Do9G,YAVkBp9G,EAAKq9G,YAAa1/D,EAAAA,EAAAA,IAAiB39C,EAAM,YAW3D+lM,UAVgB/lM,EAAKq9G,YAAa1/D,EAAAA,EAAAA,IAAiB39C,EAAM,eAWzDgmM,gBAAiBrpE,EACjB+yE,8BAA4D,aAA7BJ,GAAmB7uL,MAClDywB,mBAAoB9+C,EAAO++C,UAAUD,mBACrCu+J,mBAGJ,CAACr9M,GAAUkL,YACFzB,SAAQslC,EAAAA,EAAAA,KAAW/uC,EAAQkL,KA9BlBmC,EArZ2BkwM,EAC7CryM,SACA0C,OACA89C,eACAp5C,WACA8qM,eACAD,mBACAzJ,gBACA1oF,cACA2oF,YACA0J,eACAnlM,WACA07L,kBACA0J,gCACAx+J,qBACAg1J,iBACAvpM,cAEA,MAAM,uBACJizM,EAAsB,WACtBzJ,EAAU,WACV0J,EAAU,aACVxJ,EAAY,cACZC,EAAa,gBACbF,EAAe,SACf7qK,EAAQ,wBACRgrK,EAAuB,qBACvBC,EAAoB,YACpBsJ,IACEhzM,EAAAA,EAAAA,OAEG8pM,EAAoBC,EAAkBC,IAAqB92M,EAAAA,EAAAA,KAC5D02M,EAAe1mM,EAAK/B,MACpB0oM,EAAe7oJ,GAAcurD,OAAS,IAErCosC,EAAwBC,IAA6Bz4I,EAAAA,EAAAA,KAAS,IAC9DgB,EAAOw+J,IAAYx/J,EAAAA,EAAAA,IAASypM,IAC5Br9F,EAAOqzD,IAAYz/J,EAAAA,EAAAA,IAAS0pM,IAC5B/zM,EAAOgjJ,IAAY34I,EAAAA,EAAAA,OACnBgjD,EAAO01F,IAAY14I,EAAAA,EAAAA,OACnB8yM,EAAgBC,KAAqB/yM,EAAAA,EAAAA,IAAS+C,EAAKg7C,SACpDxN,IAAYwnG,EAAAA,EAAAA,IAAkBh1I,GAC9Bg2I,IAAuB78I,EAAAA,EAAAA,GAASq0C,IAAW,EAAOp0C,EAAAA,GAAeC,SACjE42M,IAAgBp3M,EAAAA,EAAAA,KAAQ,KAAMqpF,EAAAA,EAAAA,IAAaliF,IAAO,CAACA,IACnDnC,IAAOC,EAAAA,EAAAA,KACPoyM,IAAgC/1M,EAAAA,EAAAA,OAEtC0hB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KAGVtB,EAAAA,EAAAA,KAAU,KACJ0qM,IACFQ,EAAwB,CAAEjpM,WAC1BipM,EAAwB,CAAEjpM,SAAQ2pM,WAAW,IAC7CT,EAAqB,CAAElpM,cAExB,CAACA,EAAQyoM,KAGZ1qM,EAAAA,EAAAA,KAAU,KACR20M,GAAkBn0M,QAAQmE,EAAKg7C,YAC9B,CAACh7C,EAAKg7C,WAET3/C,EAAAA,EAAAA,KAAU,KACJqJ,IAAaogM,EAAAA,GAAmBxuD,WAClCZ,GAA0B,GAC1BC,OAASliJ,MAEV,CAACiR,IAEJ,MAAM2iM,IAAsBhqM,EAAAA,EAAAA,IAAgB,KAC1C6oM,EAAeoB,EAAAA,GAAkBC,oBAG7BC,IAAwBnqM,EAAAA,EAAAA,IAAgB,KAC5C6oM,EAAeoB,EAAAA,GAAkBG,eAG7BC,IAAuBrqM,EAAAA,EAAAA,IAAgB,KAC3C6oM,EAAeoB,EAAAA,GAAkBK,cAG7BwI,IAAyB9yM,EAAAA,EAAAA,IAAgB,KAC7C6oM,EAAeoB,EAAAA,GAAkB8I,qBAG7BxI,IAA4BvqM,EAAAA,EAAAA,IAAgB,KAChD6oM,EAAeoB,EAAAA,GAAkBO,uBAG7BC,IAAqBzqM,EAAAA,EAAAA,IAAgB,KACzC6oM,EAAeoB,EAAAA,GAAkBS,YAG7BC,IAAsB3qM,EAAAA,EAAAA,IAAgB,KAC1C6oM,EAAeoB,EAAAA,GAAkBW,iBAG7BC,IAAiB7qM,EAAAA,EAAAA,IAAiB46I,IACtCrC,EAASqC,GACTvC,GAA0B,MAGtBsnB,IAAoB3/J,EAAAA,EAAAA,IAAiBM,IACzC8+J,EAAS9+J,EAAEC,OAAOH,OAClBi4I,GAA0B,MAGtByyD,IAAoB9qM,EAAAA,EAAAA,IAAiBM,IACzC++J,EAAS/+J,EAAEC,OAAOH,OAClBi4I,GAA0B,MAGtB26D,IAAoBhzM,EAAAA,EAAAA,IAAgB,KACxC,MAAMgrM,EAAepqM,EAAMs8D,OACrB+tI,EAAej/F,EAAM9uC,OAEtB8tI,EAAa91M,OAKlB4zM,EAAW,CACT7oM,SACAW,MAAOoqM,EACPh/F,MAAOi/F,EACP11M,UARA+iJ,EAASw5D,OAYPmB,IAAqBjzM,EAAAA,EAAAA,IAAgB,KACzC6oM,EAAeoB,EAAAA,GAAkBiJ,iBAG7BC,IAAyBnzM,EAAAA,EAAAA,IAAgB,KAC7C,IAAKygD,EACH,OAGF,MAAM,mBAAE2yJ,GAAuB3yJ,EAE/B8xJ,EAAuB,CAAEtyM,OAAQ0C,EAAKpP,GAAIotE,WAAYyyI,OAGlDC,IAAoBrzM,EAAAA,EAAAA,IAAgB,KACxC2yM,IAAmB11M,IACjB,MAAMq2M,GAAqBr2M,EAM3B,OAJAmuJ,IAAa,KACXqnD,EAAY,CAAExyM,SAAQ0gE,UAAW2yI,OAG5BA,SAIXt1M,EAAAA,EAAAA,KAAU,KACR,IAAKq0M,EACH,OAKF,MAAMkB,EAAWV,GAA8B51M,SAASpF,cAAc,SACtE07M,EAAS52K,SAAW8jB,GAAc2yJ,qBACjC,CAACf,EAA+B5xJ,GAAc2yJ,qBAEjD,MAAM7H,IAA2B/vM,EAAAA,EAAAA,KAAQ,KACvC,IAAKilD,GAAcs2H,iBACjB,OAAOv2K,GAAK,gBAGd,GAA2C,QAAvCigD,EAAas2H,iBAAiBniL,KAChC,OAAO4L,GAAK,gBAGd,MAAMgrM,EAAgB/qJ,EAAas2H,iBAAiBS,QAAQtiL,OACtDu2M,EAAc53J,GAAoB1iB,QAAQyR,IAAcA,EAASm9D,aAAY7qG,QAAU,EAE7F,OAAOu2M,EACH,GAAGD,OAAmBC,IACtBD,EAAc1xH,aACjB,CAACjmC,EAAoB4M,GAAcs2H,iBAAkBv2K,KAElDgzM,IAA0Bh4M,EAAAA,EAAAA,KAAQ,KACtC,IAAKmH,EAAKo+G,oBACR,OAAO,EAGT,IAAIhR,EAAagiG,GAAgB5gL,QAC9BjY,KACa,iBAARA,IAA2Bw5L,GACvB/vM,EAAKo+G,oBAAqB7nG,MAEpChkB,OAEF,MAAM,aAAE0pH,EAAY,SAAEhC,GAAaj6G,EAAKo+G,oBAOxC,OAJKnC,GAAiBhC,IACpB7M,GAAc,GAGTA,IACN,CAACptG,EAAKo+G,oBAAqB2xF,IAExB7I,IAAcruM,EAAAA,EAAAA,KAAQ,IACnBi3C,OAAO6K,KAAKmD,GAAcklC,kBAAoB,CAAC,GAAGzwF,QACxD,CAACurD,GAAcklC,mBAEZ8tH,IAAoBzzM,EAAAA,EAAAA,IAAgB,KACpCmyM,EACFK,EAAW,CAAEvyM,OAAQ0C,EAAKpP,KAChBoP,EAAKq9G,UAGfipF,EAAc,CAAEhpM,OAAQ0C,EAAKpP,KAF7By1M,EAAa,CAAE/oM,OAAQ0C,EAAKpP,KAI9Bk2M,IACAV,IACA7qK,EAAS,CAAE3qC,QAAI6C,OAIjB,IADqBgwK,EAAAA,EAAAA,MAAuB7jI,EAAAA,EAAAA,MAAatiC,IACrC0C,EAAK21K,YACvB,OAGF,MAAMlwJ,GAAY/gB,IAAaogM,EAAAA,GAAmB5uD,WAElD,OACEvlJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,aAAYC,SAAA,EACzBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,8BAA6BC,SAAA,EAC1CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAC+lJ,GAAAA,EAAc,CACbi6D,WAAYhB,EACZ/5D,qBAAsBA,GACtBz3I,SAAU2pM,GACVj3L,UAAW60L,KAEbn1M,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACR7N,GAAG,cACHoN,MAAOH,GAAK,aACZU,SAAUy+J,GACVv/J,MAAOQ,EACPgiD,MAAOA,IAAUkvJ,GAAoBlvJ,OAAQxsD,EAC7Cwd,UAAW60L,KAEb/0M,EAAAA,GAAAA,GAAC2+G,GAAAA,EAAQ,CACP9+G,GAAG,cACHoN,MAAOH,GAAK,0BACZwxE,UArRgB,IAsRhBugC,oBAtRgB,IAsR6BvG,EAAM92G,QAAQ4kF,WAC3D54E,SAAU4pM,GACV1qM,MAAO4rG,EACPp4F,UAAW60L,EACXj2F,mBAAiB,OAGpB7vG,EAAKq9G,YACJ1sH,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CAACtvB,KAAK,OAAOuvB,WAAS,EAACz0B,QAASwoM,GAAoBv2M,SAAA,EAC3DC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAE+M,GAAK,gBAC9B9M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAkB+M,GAAhBoyM,GAAqB,aAAqB,oBAGzEV,IACC5+M,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPtvB,KAAK,UACLuvB,WAAS,EACTz0B,QAAS2oM,GAAsB12M,SAAA,EAE/BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAE+M,GAAK,oBAC9B9M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAE+M,GAAK,0BAGrClN,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPtvB,KAAK,cACLuvB,WAAS,EACTz0B,QAASsxM,GACTl/L,UAAWmsG,EAAYtsH,SAAA,EAEvBC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAE+M,GAAK,yBAC9BlN,EAAAA,GAAAA,IAAA,QAAME,UAAU,WAAWsW,IAAI,OAAMrW,SAAA,CAClC+/M,GAAwB,IAExBxB,IAA2BU,EAAiB,EAAI,UAGrDp/M,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPtvB,KAAK,gBACLuvB,WAAS,EACTz0B,QAAS6oM,GACTz2L,UAAW60L,EAAch1M,SAAA,EAEzBC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAE+M,GAAK,gBAC9B9M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWsW,IAAI,OAAMrW,SAClC83M,SAGLj4M,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPtvB,KAAK,QACLuvB,WAAS,EACTz0B,QAAS+oM,GAA0B92M,SAAA,EAEnCC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAE+M,GAAK,4BAC9B9M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,UAAEk4M,EAAAA,GAAAA,IAAc9B,SAE3CnB,IACCp1M,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPtvB,KAAK,OACLlF,QAASipM,GACTx0K,WAAS,EACTriB,UAAW+0L,EAAgBl1M,SAAA,EAE3BC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAE+M,GAAK,4BAC9B9M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SACvBk1M,GAAkBgD,EAAAA,GAAAA,IAAchD,EAAgBzzM,QAAUsL,GAAK,gBAIrEhC,QAAQmE,EAAKipM,cAAc12M,UAC1B5B,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPtvB,KAAK,kBACLlF,QAASmpM,GACT10K,WAAS,EAAAxiC,SAAA,EAETC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAE+M,GAAK,qBAC9B9M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,UACvBk4M,EAAAA,GAAAA,IAAchpM,EAAKipM,aAAa12M,aAItCk9M,IACC9+M,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEH,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CAACtvB,KAAK,SAAS0M,QAAM,EAAC5R,QAAS6xM,GAAkB5/M,SAAA,EACxDC,EAAAA,GAAAA,GAAA,QAAAD,SAAO+M,GAAK,oBACZ9M,EAAAA,GAAAA,GAAC6pC,GAAAA,EAAQ,CACPhqC,GAAG,sBACHoN,MAAOH,GAAK,iBACZm8B,QAAS+1K,EACTx8K,UAAQ,QAGZxiC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,iCAAgCC,SAAE+M,GAAK,mCAI5DlN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBH,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CAACtvB,KAAK,QAAQuvB,WAAS,EAACz0B,QAASyxM,GAAmBx/M,SAAA,EAC3DC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAE+M,GAAK,mBAC9B9M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,UAAEk4M,EAAAA,GAAAA,IAAchpM,EAAKo7L,cAAgB,SAG/D6U,KAAkBV,GAAoB1zM,QAAQiiD,KAC9C/sD,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kBAAkBkU,IAAKmrM,GAA8Bp/M,UAClEC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7pB,SAAU8jB,EAAa2yJ,mBACvBzyM,MAAOH,GAAK,eACZU,SAAUiyM,GACVhxH,SACE1hC,EAAa2yJ,mBAAqB5yM,GAAK,0BAA4BA,GAAK,0BAE1EoT,UAAWmsG,UAKnBrsH,EAAAA,GAAAA,GAAA,OAAKF,UAAU,UAASC,UACtBC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAACtvB,KAAK,SAAS0M,QAAM,EAACtM,aAAW,EAACtF,QAASgoM,EAAiB/1M,SAClE+M,GAAK,sBAIZ9M,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,QAASw+G,EACT52I,QAASwxM,GACTp/L,SAAUwU,GACVpiB,UAAWxF,GAAK,QAAQ/M,SAEvB20B,IACC10B,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf5N,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAGftN,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQmqM,EACRjqM,QAASmqM,EACTjuL,WAAWiM,EAAAA,GAAAA,GACT0qL,IAAiBxvM,EAAKq9G,UAClBx/G,GAAK,2BACLA,GAAK,oCAAqCmC,EAAK/B,OACnD,CAAC,KAAM,oBAETm2B,aAAco7K,IAAiBxvM,EAAKq9G,UAAYx/G,GAAK,cAAgBA,GAAK,qBAC1Ew2B,eAAgBy8K,GAChBx8K,sBAAoB,WC/D5B,IAAe5kC,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,SAAQ0zM,8BACjB,MAAMhxM,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQkL,GAC1Bs9G,GAAW78D,EAAAA,EAAAA,KAAmB3rD,EAAQkL,IACpCm6B,KAAMvB,GAAc9jC,EAAOolC,OAC7B,cAAEtS,GAAkB9yB,EACpBkyB,GAAYC,EAAAA,EAAAA,IAAcvkB,GAC1BixM,IAAwBjxM,EAAKq9G,WAAa2zF,GAGhD,MAAO,CACLhxM,OACAk2B,YACAhR,gBACAZ,YACA02B,QAPch7C,EAAKg7C,QAQnBi2J,sBACAC,cAAelxM,EAAKmxM,YACpBC,YAAav1M,QAAQ++G,GACrB53B,iBAAkB43B,GAAU53B,qBAGhC,CAAC5wF,GAAUkL,YACFzB,SAAQslC,EAAAA,EAAAA,KAAW/uC,EAAQkL,KAvBlBmC,EArXsC4xM,EACxD/mM,WACAgnM,aACAC,iBACAL,gBACAlxM,OACAk2B,YACAhR,gBACA89D,mBACAouH,cACA9sL,YACA02B,UACAi2J,sBACAt0M,UACAupM,qBAEA,MAAM,gBAAEsL,IAAoB10M,EAAAA,EAAAA,OAErBy8G,EAAaC,IAAkBv8G,EAAAA,EAAAA,IAA6B,CAAC,IAC7Dm+H,EAAWC,IAAgBp+H,EAAAA,EAAAA,IAASpB,QAAQy1M,KAC5C7rL,EAAWk0F,IAAgB18G,EAAAA,EAAAA,KAAS,IACpCw0M,EAAiCC,EAA+BC,IAAkC3hN,EAAAA,EAAAA,MAClG4hN,EAAaC,IAAkB50M,EAAAA,EAAAA,IAAS,IACzCY,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,IAGV,MAAMm1M,GAAqBj5M,EAAAA,EAAAA,KAAQ,KACjC,MAAMk5M,EAAsBR,EAAiBvuH,IAAmBuuH,QAAkB99M,EAIlF,IAAI69M,IAAeS,GAAwBR,EAA3C,CAIA,GAAID,EAAY,CACd,MAAMrwK,GAAOrB,EAAAA,EAAAA,MAAYpI,MAAMC,KAAK85K,GAEpC,OAAOtwK,EAAO,CACZvS,OAAQuS,EAAKrwC,GACbugN,YAAaD,EACbU,YAAa/zM,EAAK,gBAClBgsM,SAAS,EACTE,sBAAkBt2M,QAChBA,CACN,CAEA,OAAOs+M,CAdP,IAeC,CAAC/uH,EAAkBkuH,EAAeI,EAAYzzM,EAAM0zM,KAEvDl2M,EAAAA,EAAAA,KAAU,KACJ+1M,GAAeG,IAAmBO,GACpC5L,EAAeoB,EAAAA,GAAkBO,sBAElC,CAAC7nM,EAAMoxM,EAAalL,EAAgB4L,EAAoBP,KAE3Dl2M,EAAAA,EAAAA,KAAU,KACRm+G,EAAes4F,GAAoBX,aAAe,CAAC,GACnDU,GAAgBC,GAAoBF,aAAe,IAAI1rD,OAAO,EAhElC,KAiE5B7qB,EAAax/H,QAAQy1M,IACrB33F,GAAa,KACZ,CAACu3F,EAAeI,EAAYQ,IAE/B,MAAMl4F,GAAyBlpH,EAAAA,EAAAA,KAAaiN,IAC1C,MAAM,KAAEU,GAASV,EAAEC,OAMnB47G,GAAgBy+E,IAAC,UACZA,EACH,CAAC55L,IANgCZ,EAMCw6L,EAAE55L,IAL7BZ,QAAQhK,IADjB,IAAmCgK,KAQnC49H,GAAa,KACZ,IAEG22E,GAAwBthN,EAAAA,EAAAA,KAAY,KACnC6gN,IAIL53F,GAAa,GACb63F,EAAgB,CACdl0M,OAAQ0C,EAAKpP,GACb89B,OAAQ6iL,EACRJ,YAAa53F,EACbq4F,mBAED,CAACL,EAAgBC,EAAiBxxM,EAAKpP,GAAI2oH,EAAaq4F,IAErDK,GAAqBvhN,EAAAA,EAAAA,KAAY,KAChC6gN,IAILC,EAAgB,CACdl0M,OAAQ0C,EAAKpP,GACb89B,OAAQ6iL,EACRJ,YAAa,CAAC,IAEhBQ,OACC,CAAC3xM,EAAKpP,GAAI+gN,EAAgCJ,EAAgBC,IAEvDn2F,GAAuB3qH,EAAAA,EAAAA,KAAa6lB,MACpCknG,EAAAA,EAAAA,IAAiBz9G,KAIjBixM,GAAwBjxM,EAAKmxM,cAI7BnxM,EAAKq9G,WAIDr9G,EAAKmxM,YAAY56L,MACxB,CAACvW,EAAMixM,IAEJiB,GAAer5M,EAAAA,EAAAA,KAAQ,KAC3B,GAAIy4M,IAAeQ,EACjB,OAGF,GAAIA,EAAmBjI,QACrB,OAAOhsM,EAAK,kBAGd,MAAMysM,EAAiBwH,EAAmB/H,iBACtC7zK,EAAU47K,EAAmB/H,uBAC7Bt2M,EAEJ,OAAI62M,EACKzsM,EAAK,uBAAuB88B,EAAAA,EAAAA,IAAgB2vK,IAG9CzsM,EAAK,kBACX,CAACyzM,EAAYQ,EAAoB57K,EAAWr4B,IAEzCs0M,GAA0BzhN,EAAAA,EAAAA,KAAaiN,IAC3C,MAAM,MAAEF,GAAUE,EAAEC,OACpBi0M,EAAep0M,GACf49H,GAAa,KACZ,IAEH,GAAKy2E,EAIL,OACEnhN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,aAAYC,SAAA,EACzBC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,8BAA6BC,UAC1CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAACE,UAAQ,EAAC1iC,UAAU,sBAAqBC,UAChDC,EAAAA,GAAAA,GAACiiD,GAAAA,EAAe,CACdtkB,OAAQojL,EAAmBpjL,OAC3B0jB,OAAQ8/J,EACRt8K,eAAa,OAIjB7kC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAI,OAAMrW,SAAE+M,EAAK,yBAEtD9M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,aACL27B,QAASn+B,QAAQ09G,EAAYkD,YAC7Bz+G,MAAOH,EAAKymB,EAAY,6BAA+B,4BACvDq3F,UAAQ,EACR1qG,SAAUoqG,EAAqB,cAC/B98G,SAAUq7G,MAGbt1F,IACCvzB,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,eACL27B,QAASn+B,QAAQ09G,EAAY64F,cAC7Bp0M,MAAOH,EAAK,yBACZ89G,UAAQ,EACR1qG,SAAUoqG,EAAqB,gBAC/B98G,SAAUq7G,MAIft1F,IACCvzB,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,eACL27B,QAASn+B,QAAQ09G,EAAY84F,cAC7Br0M,MAAOH,EAAK,yBACZ89G,UAAQ,EACR1qG,SAAUoqG,EAAqB,gBAC/B98G,SAAUq7G,OAIhB7oH,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,iBACL27B,QAASn+B,QAAQ09G,EAAYsE,gBAC7B7/G,MAAOH,EAAKymB,EAAY,0BAA4B,gCACpDq3F,UAAQ,EACR1qG,SAAUoqG,EAAqB,kBAC/B98G,SAAUq7G,OAGd7oH,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,cACL27B,QAASn+B,QAAQ09G,EAAY+4F,aAC7Bt0M,MAAOH,EAAK,wBACZ89G,UAAQ,EACR1qG,SAAUoqG,EAAqB,eAC/B98G,SAAUq7G,OAGd7oH,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,cACL27B,QAASn+B,QAAQ09G,EAAYg5F,aAC7Bv0M,MAAOH,EAAK,wBACZ89G,UAAQ,EACR1qG,SAAUoqG,EAAqB,eAC/B98G,SAAUq7G,OAGd7oH,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,gBACL27B,QAASn+B,QAAQ09G,EAAYi5F,eAC7Bx0M,MAAOH,EAAK,0BACZ89G,UAAQ,EACR1qG,SAAUoqG,EAAqB,iBAC/B98G,SAAUq7G,OAGZt1F,IACAvzB,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,WACL27B,QAASn+B,QAAQ09G,EAAYk5F,UAC7Bz0M,MAAOH,EAAK,qBACZ89G,UAAQ,EACR1qG,SAAUoqG,EAAqB,YAC/B98G,SAAUq7G,OAIhB7oH,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,cACL27B,QAASn+B,QAAQ09G,EAAYgD,aAC7Bv+G,MAAOH,EAAK,qBACZ89G,UAAQ,EACR1qG,SAAUoqG,EAAqB,eAC/B98G,SAAUq7G,OAGZt1F,IACAvzB,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,cACL27B,QAASn+B,QAAQ09G,EAAYiD,aAC7Bx+G,MAAOH,EAAK,wBACZ89G,UAAQ,EACR1qG,SAAUoqG,EAAqB,eAC/B98G,SAAUq7G,OAIhB7oH,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,YACL27B,QAASn+B,QAAQ09G,EAAYm5F,WAC7B10M,MAAOH,EAAK,sBACZ89G,UAAQ,EACR1qG,SAAUoqG,EAAqB,aAC/B98G,SAAUq7G,OAGd7oH,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,aACL27B,QAASn+B,QAAQ09G,EAAYo5F,YAC7B30M,MAAOH,EAAK,2BACZ89G,UAAQ,EACR1qG,SAAUoqG,EAAqB,cAC/B98G,SAAUq7G,MAGb5+D,IACCjqD,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,eACL27B,QAASn+B,QAAQ09G,EAAYmD,cAC7B1+G,MAAOH,EAAK,0BACZ89G,UAAQ,EACR1qG,SAAUoqG,EAAqB,gBAC/B98G,SAAUq7G,OAIdt1F,IACAvzB,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAK,YACL27B,QAASn+B,QAAQ09G,EAAYq5F,WAC7B50M,MAAOH,EAAK,4BACZ89G,UAAQ,EACR1qG,SAAUoqG,EAAqB,aAC/B98G,SAAUq7G,MAKfq3F,IACClgN,EAAAA,GAAAA,GAAA,KAAGF,UAAU,oBAAoBsW,IAAI,OAAMrW,SACxC+M,EAAK,mCAIRymB,IACAvzB,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACR7N,GAAG,cACHoN,MAAOH,EAAK,iBACZU,SAAU4zM,EACV10M,MAAOm0M,EACP3gM,SAAUggM,EACV5hI,UAhVkB,KAoVrBnqD,IAAkBqsL,IAAmBN,IAAwBK,IAC5DvgN,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAACtvB,KAAK,SAAS0M,QAAM,EAACtM,aAAW,EAACtF,QAAS6yM,EAA8B5gN,SAC/E+M,EAAK,gCAMd9M,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,QAASmkG,EACTv8H,QAASmzM,EACT3uM,UAAWxF,EAAK,QAChBoT,SAAUwU,EAAU30B,SAEnB20B,GACC10B,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf5N,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAIbizM,IACAvgN,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQg1M,EACR90M,QAASg1M,EACT/rM,KAAK,+CACLwuB,aAAcv2B,EAAK,yBACnBw2B,eAAgB49K,EAChB39K,sBAAoB,W,0BCnW9B,MAoNA,IAAe5kC,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAM0C,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQkL,IACxB6lF,aAAco4E,GAAqBnpK,EAAOolC,OAC5C,QAAEurD,EAAO,iBAAEC,EAAgB,sBAAE6vH,IAA0B90J,EAAAA,EAAAA,KAAmB3rD,EAAQkL,IAAW,CAAC,EAC9FgnB,EAAYtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,IAChC82B,QAASg4H,GAAoB18J,EAAOmlC,aAAe,CAAC,EACtDu7K,EAAwB1gN,EAAO4uC,WAAW8xK,sBAE1CtG,EAAmBxsM,IAASA,EAAKq9G,YAAa1/D,EAAAA,EAAAA,IAAiB39C,EAAM,aAErE+yM,EAAsBvG,KAAqB/uF,EAAAA,EAAAA,IAAiBz9G,SAA+BvM,IAAtBuM,EAAKo7L,mBACjD3nM,IAA1Bq/M,GAAuC9yM,EAAKo7L,cAAgB0X,EAE3DE,EAAgBhzM,KAAU29C,EAAAA,EAAAA,IAAiB39C,EAAM,iBAChDskB,KAAc6/I,EAAAA,EAAAA,IAAkBnkK,EAAM,gBAC1CA,EAAKq9G,YAINnoF,MAAOP,EAAW,eAClB45B,EAAc,cACd0kJ,EAAa,aACbjkD,IACEnvJ,EAAAA,EAAAA,KAAezN,GAAQ28J,WAE3B,MAAO,CACL8jD,sBAAuBh3M,QAAQmE,GAAQ6yM,GACvC9vH,UACAiwH,gBACAhwH,mBACAu4E,mBACAj3I,YACAwqI,kBACAn6H,cACA+mI,YAAantG,EACb0kJ,gBACAjkD,eACAw9C,mBACAtnL,cAAe9yB,EAAO8yB,cACtB6tL,yBAxCctzM,EApNkCyzM,EACpD51M,SACA61M,WACApwH,UACAiwH,gBACAhwH,mBACAu4E,mBACAj3I,YACAha,WACA2oM,gBACAnkD,kBACAE,eACA0M,cACA/mI,cACAzP,gBACAsnL,mBACAqG,wBACAE,sBACAp2M,UACAupM,iBACAiD,yBAEA,MAAM,SACJ5tK,EAAQ,mBAAE2zH,EAAkB,gBAAEk3C,EAAe,yBAC7CgN,EAAwB,6BAAEC,EAA4B,iBAAExrC,IACtD/qK,EAAAA,EAAAA,MACEe,GAAOC,EAAAA,EAAAA,KACPgsD,GAAW3vD,EAAAA,EAAAA,MACXigB,GAAejgB,EAAAA,EAAAA,OAEdm5M,EAAgBC,IAAqBt2M,EAAAA,EAAAA,MAEtCu2M,GAAW36M,EAAAA,EAAAA,KAAQ,IAChBs6M,GAAYnwH,EAAmBlzC,OAAO6K,KAAKqoC,GAAoB,IACrE,CAACA,EAAkBmwH,IAEhBjwH,GAAYrqF,EAAAA,EAAAA,KAAQ,KAExB,MAAMq9B,GAAY0J,EAAAA,EAAAA,MAAYpI,MAAMC,KACpC,IAAKsrD,IAAY7sD,EACf,MAAO,GAGT,MAAMY,GAAUusD,EAAAA,EAAAA,IACdN,EAAQx+E,KAAI,EAAGmqB,YAAaA,IAC5BwH,EACAqlI,GAGF,OAAO43C,EAAWr8K,EAAQtI,QAAQE,IAAY8kL,EAAS5yL,SAAS8N,KAAWoI,IAC1E,CAACisD,EAASw4E,EAAkB43C,EAAUK,KAEzCC,EAAAA,GAAAA,GAAsBvwH,GAEtB,MAAMruD,GAAeh8B,EAAAA,EAAAA,KAAQ,KAE3B,MAAMq9B,GAAY0J,EAAAA,EAAAA,MAAYpI,MAAMC,KAC9Bi8K,EAAyB73M,QAAQ84B,GACjCg/K,EAAaD,EAEd5kD,GAAkB95H,EAAAA,GAAAA,IAAmB,CAAEC,IAAK65H,EAAiB55H,MAAOP,EAAa1iC,KAAM,SAAY,GADpGixF,EAGJ,OAAOjlC,EAAAA,GAAAA,IACLlpB,EAAAA,GAAAA,IAAO,IACF4+K,KACCD,GAAyB1kD,GAAqB,MAC9C0kD,GAAyBT,GAAsB,KAClDzkL,QAAQ6gI,IACT,MAAMpuH,EAAO/K,EAAUm5H,GACvB,OAAKpuH,IAIG3c,GAAa2c,EAAK+6H,uBAAwBx4E,EAAAA,EAAAA,IAAUviD,OACrDkyK,IAAaK,EAAS5yL,SAASyuI,QAExC,KAED,CAACnsE,EAAW4rE,EAAiBn6H,EAAaq6H,EAAcikD,EAAe3uL,EAAW6uL,EAAUK,KAExFv6J,EAAaC,IAAWC,EAAAA,GAAAA,QAAkB1lD,EAAWohC,EAAch5B,QAAQ84B,IAE5EutK,GAAoB7kM,EAAAA,EAAAA,IAAiBzM,IACrCuiN,GACFhK,EAAoBv4M,GAAI,GACxBs1M,EAAgBoB,EAAAA,GAAkBsM,sBAElCxN,IACA7qK,EAAS,CAAE3qC,WAITyuF,GAAqBhiF,EAAAA,EAAAA,IAAiBM,IAC1CuxJ,EAAmB,CAAEh6H,MAAOv3B,EAAEC,OAAOH,WAGjC6Y,GAAgBykC,EAAAA,GAAAA,GAA0B3gC,EAAc9P,GAAWjV,IACnE4jD,GAAeA,EAAY1mD,OAAS,GACtC2vM,EAAkBjpJ,GAAuB,IAAX5jD,EAAe,EAAIA,MAElD,oBAAoB,GAEjBw+M,GAAgCx2M,EAAAA,EAAAA,IAAgB,KACpDk2M,OAAkB9/M,MAGdqgN,GAAiCz2M,EAAAA,EAAAA,IAAgB,KACrD+1M,EAAyB,CAAE91M,SAAQ0gE,WAAY60I,OAG3CkB,GAA4B12M,EAAAA,EAAAA,IAAgB,KAChDwqK,IACAwrC,EAA6B,CAAEW,uBAAwBC,EAAAA,GAAuB/9D,gBA+BhF,OA5BAr6H,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KA2BRhM,EAAAA,GAAAA,IAAA,OAAKE,UAAU,aAAYC,SAAA,CACxBqiN,IAbDpiN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,qBAAqBsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,UACtEC,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRsG,IAAK+kD,EACLrsD,MAAOk3B,EACPp2B,SAAU8gF,EACV/iC,YAAaz+C,EAAK,eAStBlN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,8BAA6BC,SAAA,CACzCiiN,IAAwBzuL,IACvB3zB,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBH,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CAACtvB,KAAK,QAAQ0M,QAAM,EAAC5R,QAASi1M,EAA+BhjN,SAAA,EACpEC,EAAAA,GAAAA,GAAA,QAAAD,SAAO+M,EAAK,yBACZ9M,EAAAA,GAAAA,GAAC6pC,GAAAA,EAAQ,CAAC58B,MAAOH,EAAK,sBAAuBm8B,QAAS64K,QAExD9hN,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAcC,SACxB+M,EAAKg1M,EAAwB,+BAAiC,uCAIrE9hN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,UAASC,SACrBmoD,GAAa1mD,QACZxB,EAAAA,GAAAA,GAACklD,GAAAA,EAAc,CACbplD,UAAU,4BACVqlD,MAAOrhB,EACPshB,WAAY+C,EACZykC,gBAAiB9hF,QAAQ84B,GACzB5vB,IAAKqV,EACLiiC,UAAW/lC,EAAcxlB,SAExBmoD,EAAY10C,KAAK3T,IAChBG,SAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAEPxiC,UAAU,kCAEVgO,QAASA,IAAMqjM,EAAkBtxM,GACjC+gD,gBAtDgBuiK,EAsDuBtjN,EArD9CsjN,IAAahvL,GAAkBsnL,EAA+B,CAAC,CACpEvuM,MAAOJ,EAAK,iCACZkG,KAAM,OACNiuC,QAASA,KACPuhK,EAAkBW,WAJmCzgN,GAsD3Co/C,mBAAiB,EAAA/hD,UAEjBC,EAAAA,GAAAA,GAACiiD,GAAAA,EAAe,CAACtkB,OAAQ99B,EAAIglC,eAAa,EAACsW,WAAS,KAP/Ct7C,GAlDrB,IAAgCsjN,OA6DnBx4C,IAAeziH,GAAgBA,EAAY1mD,QAO9CxB,EAAAA,GAAAA,GAAC0rD,GAAAA,EAAO,KANR1rD,EAAAA,GAAAA,GAACm7H,GAAAA,EAAY,CACXilD,cAAe,EAEfvrK,KAAM0e,EAAY,uBAAyB,oBADvC,sBAQX0uL,IACCjiN,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,SAAO,EACPp4B,QAASk1M,EACT1wM,UAAWxF,EAAK,yBAAyB/M,UAEzCC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,sBAGdmuM,IACCz7M,EAAAA,GAAAA,GAACojN,GAAAA,EAAiB,CAChB13M,OAAQZ,QAAQy3M,GAChB5kL,OAAQ4kL,EACR32M,QAASk3M,WCqFnB,IAAenkN,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAM0C,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQkL,GAC1Bs9G,GAAW78D,EAAAA,EAAAA,KAAmB3rD,EAAQkL,IACtC,SAAEoH,IAAa7E,EAAAA,EAAAA,KAAezN,GAAQ6xM,WAEtCphK,EAAoB7iC,GAAM6iC,kBAC1BilG,EAA2C11I,EAAO4uC,WAAW+mG,mCAEnE,MAAO,CACL/nI,OACA0E,WACAwgB,cAAe9yB,EAAO8yB,cACtBiiL,kBAAmBvsF,GAAUwsF,eAAe70M,QAAU,EACtDwwF,QAAS63B,GAAU73B,QACnBqxH,yBAA0Bv4M,QAAQ++G,GAAUw5F,0BAA4BtsE,GACxEuB,qBAAsBxtI,QAAQgnC,GAAqBilG,GACnDusE,oBAAqBxxK,GAAqBsmG,EAAAA,OAjB5B1pI,EA/PsC60M,EACxDpO,iBACAiD,qBACAnpM,OACA0E,WACAwgB,gBACAiiL,oBACApkH,UACApmF,UACA2N,WACA8pM,2BACA/qE,uBACAgrE,0BAEA,MAAM,8BAAEE,EAA6B,wBAAEC,IAA4B13M,EAAAA,EAAAA,OAE7D,YACJy8G,EAAW,sBAAEE,EAAqB,UAAEh0F,EAAS,uBAAEm0F,EAAsB,aAAED,GACrEN,GAAqBr5G,GAAMo+G,qBACzB75E,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,MAEb3oB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,IAGV,MAAM8rM,GAA0B/3M,EAAAA,EAAAA,KAAY,KAC1Cw1M,EAAeoB,EAAAA,GAAkBmN,qBAChC,CAACvO,IAEEwO,GAA0BhkN,EAAAA,EAAAA,KAAY,KAC1Cw1M,EAAeoB,EAAAA,GAAkBqN,8BAChC,CAACzO,IAEE0O,GAA6BlkN,EAAAA,EAAAA,KAAa0uH,IAC9C+pF,EAAmB/pF,EAAO1wF,OAAQ0wF,EAAO2qF,mBAAqB7kL,GAC9DghL,EAAeoB,EAAAA,GAAkBuN,wBAChC,CAAC3vL,EAAeikL,EAAoBjD,KAEhClrF,EAAqBC,IAA0Bh+G,EAAAA,EAAAA,KAAS,IAExD63M,EAA2BC,EAA6BC,IAAiChlN,EAAAA,EAAAA,MACzFilN,EAAwBC,IAA6Bj4M,EAAAA,EAAAA,IAASosI,IAC9DlB,EAAmBqB,IAAwBvsI,EAAAA,EAAAA,IAAiBo3M,IAEnEh5M,EAAAA,EAAAA,KAAU,KACJqJ,IAAaogM,EAAAA,GAAmBxuD,UAClC0+D,MAED,CAACtwM,IAEJ,MAAMstM,GAAwB30M,EAAAA,EAAAA,IAAgB,KACvC2C,IAIL25G,GAAa,GACb46F,EAA8B,CAAEj3M,OAAQ0C,EAAKpP,GAAIqwH,aAAc1H,QAG3D47F,GAAgC93M,EAAAA,EAAAA,IAAgB,KAC/C2C,GACLw0M,EAAwB,CACtBl3M,OAAQ0C,GAAMpP,GACdiyC,kBAAmBoyK,EAAyB9sE,EAAoB,OAI9DitE,GAA0B/3M,EAAAA,EAAAA,IAAgB,KAC1Cy3M,GACFK,IAEE17F,GACFu4F,OAIEqD,GAAmBx8M,EAAAA,EAAAA,KAAQ,IAC1BkqF,EAIEA,EAAQv0D,QAAO,EAAGyyF,kBAAmBplH,QAAQolH,KAH3C,IAIR,CAACl+B,IAEEuyH,GAAsB5kN,EAAAA,EAAAA,KAAa0uH,IACvC,MAAM,aAAE6B,GAAiB7B,EACzB,IAAK6B,IAAiBjhH,EACpB,OAGF,MAAM,oBAAEo+G,GAAwBp+G,EAEhC,OAAO8vC,OAAO6K,KAAKsmE,GAAc1xE,QAAO,CAAC9lC,EAAQuV,KAC/C,MAAMzI,EAAMyI,EACZ,IACGiiG,EAAa1qG,IACV6nG,IAAsB7nG,IACf,eAARA,GAAgC,iBAARA,GAAkC,cAARA,EAErD,OAAO9M,EAGT,MAAMmqB,EA/IZ,SAAqCrd,GACnC,OAAQA,GACN,IAAK,eACH,MAAO,yBACT,IAAK,YACH,MAAO,8BACT,IAAK,eACH,MAAO,iCACT,IAAK,aACH,MAAO,+BACT,IAAK,YACH,MAAO,8BACT,IAAK,aACH,MAAO,+BACT,IAAK,cACH,MAAO,8BACT,IAAK,cACH,MAAO,8BACT,IAAK,eACH,MAAO,iCACT,IAAK,YACH,MAAO,6BACT,IAAK,WACH,MAAO,6BACT,IAAK,kBACH,MAAO,8BACT,IAAK,aACH,MAAO,8BACT,IAAK,aACH,MAAO,8BACT,IAAK,aACH,MAAO,+BACT,IAAK,aACH,MAAO,+BACT,QACE,OAEN,CA0GsBg/L,CAA4Bh/L,GAE5C,IAAKqd,EACH,OAAOnqB,EAGT,MAAM+rM,EAAmBjxK,EAAQ3Q,GAEjC,MAAO,GAAGnqB,IAAUA,EAAOlX,OAA4B,KAAKijN,IAAxBA,MACnC,MACF,CAACx1M,EAAMukC,IAEJkxK,GAA+Bp4M,EAAAA,EAAAA,IAAgB,KACnD63M,GAA2BD,GAC3BF,OAGI3sE,GAAgC/qI,EAAAA,EAAAA,IAAiBI,IACrD+rI,EAAqB/rI,GACrBs3M,OAGIW,EAAwBZ,GAA6Br7F,EACrDk8F,EAAwBjxM,IAAaogM,EAAAA,GAAmB5uD,YAAczwH,EAE5E,OACE90B,EAAAA,GAAAA,IAAA,OACEE,UAAU,mCACV+F,MAAO,qDAC6D9F,SAAA,EAEpEH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,8BAA6BC,SAAA,EAC1CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gCAA+BC,SAAA,EAC5CC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,kBAAkBsW,IAAI,OAAMrW,SAAE+M,EAAK,+BACjD9M,EAAAA,GAAAA,GAACgqH,GAAsB,CACrBz9G,OAAQ0C,GAAMpP,GACdoqH,oBAAqBA,EACrBC,uBAAwBA,EACxBrB,uBAAwBA,EACxBL,YAAaA,EACb4B,kBAAkB,mBAClBtqH,WAAWoW,EAAAA,GAAAA,GACT,eACA+zG,GAAuB,sBAEzBE,kBAAkBj0G,EAAAA,GAAAA,GAAe,OAAQ+zG,GAAuB,gBAInEo5F,IACCzjN,EAAAA,GAAAA,IAAA,OACEE,WAAWoW,EAAAA,GAAAA,GACT,UACA+zG,GAAuB,WACvBlqH,SAAA,EAEFH,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CAACx0B,QAAS42M,EAA6B3kN,SAAA,EAC9CC,EAAAA,GAAAA,GAAA,QAAAD,SAAO+M,EAAK,+BACZ9M,EAAAA,GAAAA,GAAC6pC,GAAAA,EAAQ,CACPhqC,GAAG,sBACHoN,MAAOH,EAAK,4BACZm8B,QAASi7K,QAGblkN,EAAAA,GAAAA,GAAA,KAAGF,UAAU,mCAAmCsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SACjF+M,EAAK,+BAKXo3M,IACClkN,EAAAA,GAAAA,GAAA,OACEF,WAAWoW,EAAAA,GAAAA,GACT,UACA+zG,GAAuB,WACvBlqH,UAEFC,EAAAA,GAAAA,GAACw5I,GAAgB,CACf9C,4BAA0B,EAC1BS,aAAW,EACXC,kBAAmBA,EACnB5pI,SAAU6pI,OAKhBr3I,EAAAA,GAAAA,GAAA,OACEF,WAAWoW,EAAAA,GAAAA,GACT,UACA+zG,GAAuB,WACvBlqH,UAEFH,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPtvB,KAAK,cACLuvB,WAAS,EACTw7E,QAAM,EACNjwG,QAAS4pM,EAAwB33M,SAAA,EAEjCC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAE+M,EAAK,0BAC9B9M,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAUC,SAAEq2M,UAIhCx2M,EAAAA,GAAAA,IAAA,OACEE,WAAWoW,EAAAA,GAAAA,GACT,UACA+zG,GAAuB,WACvBlqH,SAAA,EAEFC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,kBAAkBsW,IAAI,OAAMrW,SAAE+M,EAAK,wBAEjD9M,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,WACLlF,QAAS61M,EAAwB5jN,SAEhC+M,EAAK,yBAGPw3M,EAAiB9wM,KAAK66G,IACrBruH,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAEPxiC,UAAU,wCAEVgO,QAASA,IAAM+1M,EAA2Bx1F,GAAQtuH,UAElDC,EAAAA,GAAAA,GAACiiD,GAAAA,EAAe,CACdtkB,OAAQ0wF,EAAO1wF,OACf0jB,OAAQkjK,EAAoBl2F,GAC5BxpF,eAAa,KARVwpF,EAAO1wF,iBAepB39B,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,QAASy+K,EACT72M,QAASu2M,EACT/xM,UAAWxF,EAAK,QAChBoT,SAAU0kM,EAAsB7kN,SAE/B6kN,GACC5kN,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf5N,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,mBCnJrB,IAAe3O,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,SAAQ0zM,8BACjB,MAAMhxM,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQkL,GAC1Bs9G,GAAW78D,EAAAA,EAAAA,KAAmB3rD,EAAQkL,GAG5C,MAAO,CACL0C,OACAixM,sBAJ4BjxM,EAAKq9G,WAAa2zF,GAK9CI,YAAav1M,QAAQ++G,GACrB73B,QAAS63B,GAAU73B,YAGvB,CAAC3wF,GAAUkL,YACFzB,SAAQslC,EAAAA,EAAAA,KAAW/uC,EAAQkL,KAdlBmC,EAvJ0Cm2M,EAC5D51M,OACA61M,uBACAzE,cACAruH,UACAmjH,iBACA+K,sBACAt0M,UACA2N,eAEA,MAAM,6BAAE4zG,IAAiCphH,EAAAA,EAAAA,MAEnCg1M,GAAqBj5M,EAAAA,EAAAA,KAAQ,KACjC,GAAKkqF,EAIL,OAAOA,EAAQzgD,MAAK,EAAG5T,YAAaA,IAAWmnL,MAC9C,CAAC9yH,EAAS8yH,KAEP,YACJt8F,EAAW,sBAAEE,EAAqB,UAAEh0F,EAAS,uBAAEm0F,EAAsB,aAAED,GACrEN,GAAqBy4F,GAAoB7wF,cAAgBjhH,GAAMo+G,sBAC5D03F,EAA6BC,EAA2BC,IAA8BhmN,EAAAA,EAAAA,KACvF6N,GAAO2mC,EAAAA,GAAAA,KACPD,GAAUzmC,EAAAA,EAAAA,MAEhB+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KAGVtB,EAAAA,EAAAA,KAAU,KACJ+1M,GAAeyE,IAAyB/D,GAC1C5L,EAAeoB,EAAAA,GAAkB8I,oBAElC,CAACpwM,EAAMoxM,EAAalL,EAAgB4L,EAAoB+D,IAE3D,MAAM7D,GAAwBthN,EAAAA,EAAAA,KAAY,KACnCsP,GAAS61M,IAIdl8F,GAAa,GACbuE,EAA6B,CAC3B5gH,OAAQ0C,EAAKpP,GACb89B,OAAQmnL,EACR50F,aAAc1H,OAEf,CAACv5G,EAAM61M,EAAsBl8F,EAAcuE,EAA8B3E,IAEtE08F,GAAqBvlN,EAAAA,EAAAA,KAAY,KAChCsP,GAAS61M,GAId33F,EAA6B,CAC3B5gH,OAAQ0C,EAAKpP,GACb89B,OAAQmnL,EACR50F,aAAc,CACZi1F,cAAc,OAGjB,CAACl2M,EAAM61M,EAAsB33F,IAE1B7C,GAAuB3qH,EAAAA,EAAAA,KAAa6lB,KACpC06L,MAICjxM,IAASA,EAAKo+G,sBAIZp+G,EAAKo+G,oBAAoB7nG,IAC/B,CAACvW,EAAMixM,KAEHj2F,EAAqBC,IAA0Bh+G,EAAAA,EAAAA,KAAS,GAE/D,GAAK60M,EAIL,OACEnhN,EAAAA,GAAAA,IAAA,OACEE,UAAU,mCACV+F,MAAO,sDACuF9F,SAAA,EAE9FH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gCAA+BC,SAAA,EAC5CC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAACE,UAAQ,EAAC1iC,UAAU,sBAAqBC,UAChDC,EAAAA,GAAAA,GAACiiD,GAAAA,EAAe,CAACtkB,OAAQojL,EAAmBpjL,OAAQkH,eAAa,OAGnE7kC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,uBAAuBsW,IAAI,OAAMrW,SAAEyzC,EAAQ,4BACzDxzC,EAAAA,GAAAA,GAACgqH,GAAsB,CACrBz9G,OAAQ0C,GAAMpP,GACdoqH,oBAAqBA,EACrBC,uBAAwBA,EACxBrB,uBAAwBA,EACxBL,YAAaA,EACb1oH,WAAWoW,EAAAA,GAAAA,GACT,eACA+zG,GAAuB,sBAEzBG,kBAAkB,mBAClBD,kBAAkBj0G,EAAAA,GAAAA,GAAe,OAAQ+zG,GAAuB,WAChEK,qBAAsBA,QAIxB41F,IACAlgN,EAAAA,GAAAA,GAAA,OACEF,WAAWoW,EAAAA,GAAAA,GACT,UACA+zG,GAAuB,WACvBlqH,UAEFC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAACtvB,KAAK,cAAc0M,QAAM,EAACtM,aAAW,EAACtF,QAASk3M,EAA0BjlN,SAChFyzC,EAAQ,iCAMjBxzC,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,QAASwiF,EACT56G,QAASmzM,EACT3uM,UAAWkhC,EAAQ,QACnBtzB,SAAUwU,EAAU30B,SAEnB20B,GACC10B,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf5N,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAIftN,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQq5M,EACRn5M,QAASq5M,EACTpwM,KAAM/H,EAAK,iCACXu2B,aAAa,SACbC,eAAgB4hL,EAChB3hL,sBAAoB,WCrG5B,IAAe5kC,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAM0C,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQkL,IACxBm6B,KAAMvB,EAAWitD,aAAco4E,GAAqBnpK,EAAOolC,MAC7DurD,GAAUhlC,EAAAA,EAAAA,KAAmB3rD,EAAQkL,IAASylF,QAGpD,MAAO,CACLA,UACA7sD,YACAqlI,mBACAj3I,UANgBtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,MALxBP,EA7DgD02M,EAClEjgL,YACAqlI,mBACAx4E,UACAz+D,YACA4hL,iBACAiD,qBACAxsM,UACA2N,gBAEAuR,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,IAGV,MAAMumF,GAAYrqF,EAAAA,EAAAA,KAAQ,KACxB,GAAKkqF,GAAY7sD,EAIjB,OAAOmtD,EAAAA,EAAAA,IACLN,EAAQv0D,QAAQ4wF,IAAYA,EAAOyqF,UAAStlM,KAAI,EAAGmqB,YAAaA,IAChEwH,EACAqlI,KAED,CAACx4E,EAAS7sD,EAAWqlI,IAElBq5C,GAA6BlkN,EAAAA,EAAAA,KAAawjN,IAC9C/K,EAAmB+K,GACnBhO,EAAeoB,EAAAA,GAAkBuN,wBAChC,CAAC1L,EAAoBjD,IAExB,OACEn1M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,aAAYC,UACzBC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,gBAAeC,UAC5BC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,UAAUsyK,eAAa,EAAAryK,SACnCoyF,EACCA,EAAU3+E,KAAI,CAAC3T,EAAI4lD,KACjBzlD,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAEP89I,cAAe36H,EACf3lD,UAAU,kCAEVgO,QAASA,IAAM+1M,EAA2BhkN,GAAIE,UAE9CC,EAAAA,GAAAA,GAACiiD,GAAAA,EAAe,CAACtkB,OAAQ99B,EAAIglC,eAAa,KANrChlC,MAUTG,EAAAA,GAAAA,GAACm7H,GAAAA,EAAY,CACXilD,cAAe,EAEfvrK,KAAM0e,EAAY,uBAAyB,oBADvC,2BCzDZ8xL,GAAuB,CAAC,EAAG,GAAI,KAC/BC,GAAsB,CAC1BC,KAAM,KACNjyJ,IAAK,MACLkyJ,KAAM,QAEFC,GAA6BH,GAAoBC,KA+OvD,IAAe5mN,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAM,cAAEm5M,IAAkB52M,EAAAA,EAAAA,KAAezN,GAAQ6xM,WAAW34E,SAAShuH,IAAW,CAAC,EAEjF,MAAO,CACLm5M,mBALch3M,EAlO4Bi3M,EAC9Cp5M,SACAm5M,gBACAnsM,WACA3N,UACAupM,qBAEA,MAAM,uBAAEyQ,EAAsB,iBAAEC,IAAqB95M,EAAAA,EAAAA,MAE/Ce,GAAOC,EAAAA,EAAAA,MACNunF,EAAkBC,EAAcC,IAAiBv1F,EAAAA,EAAAA,MACjDy5G,EAAiBotG,IAAsB55M,EAAAA,EAAAA,KAAS,IAChDgB,EAAOw+J,IAAYx/J,EAAAA,EAAAA,IAAS,KAC5BkpF,EAAkBC,IAAuBnpF,EAAAA,EAAAA,IAAiB+f,KAAKC,MAAQu5L,KACvEM,EAAsBC,IAA2B95M,EAAAA,EAAAA,IAAS,cAC1D+5M,EAAkBC,IAAuBh6M,EAAAA,EAAAA,IAA6B,KACtEi6M,EAAqBC,IAA0Bl6M,EAAAA,EAAAA,IAAS,MACxDm6M,EAAiBC,IAAsBp6M,EAAAA,EAAAA,KAAS,IAEvD4e,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KAGVtC,EAAAA,EAAAA,IAAc,EAAEi9M,MACd,GAAIA,IAAqBb,EACzB,GAAKA,EAOE,CACL,MACEx4M,MAAOs5M,EAAY,WAAEC,EAAU,WAAE59K,EAAY6vE,gBAAiBguG,GAC5DhB,EAMJ,GALIc,GAAc96C,EAAS86C,GACvBC,IACFL,EAAuBf,GAAqBx1L,SAAS42L,GAAcA,EAAWrgI,WAAa,UAC3F8/H,EAAoBO,IAElB59K,EAAY,CACd,MAAM89K,GAAc5kL,EAAAA,GAAAA,MAAkB0jL,GACtCO,EAAwB,UACxB3wH,EAAwD,IAApCpiF,KAAKma,IAAIyb,EAAY89K,GAC3C,CACID,GACFZ,GAAmB,EAEvB,MAvBEp6C,EAAS,IACTs6C,EAAwB,aACxBI,EAAuB,KACvB/wH,EAAsC,KAAlBtzD,EAAAA,GAAAA,MAAyB0jL,IAC7CS,EAAoB,IACpBJ,GAAmB,KAmBpB,CAACJ,IAEJ,MAAMkB,GAAwBjnN,EAAAA,EAAAA,KAAaiN,IACzCk5M,EAAmBl5M,EAAEC,OAAOo8B,WAC3B,IAEGgjI,GAAoBtsK,EAAAA,EAAAA,KAAaiN,IACrC8+J,EAAS9+J,EAAEC,OAAOH,SACjB,IAEGm6M,GAA+BlnN,EAAAA,EAAAA,KAAaiN,IAChDs5M,EAAoB7gM,OAAOyhM,SAASl6M,EAAEC,OAAOH,MAAO,OACnD,IAEGwsF,GAAyBv5F,EAAAA,EAAAA,KAAaqzB,IAC1CqiE,EAAoBriE,EAAK8iC,WACzB0+B,MACC,CAACA,IAEEuyH,GAAkBpnN,EAAAA,EAAAA,KAAY,KAClC2mN,GAAmB,GACnB,MAAMG,EAAqC,WAAxBN,EAAmCF,EAAmB5gM,OAAO8gM,GAChF,IAAIt9K,EACJ,OAAQk9K,GACN,IAAK,SACHl9K,GAAa9G,EAAAA,GAAAA,OAAmBqzD,EAAmBnpE,KAAKC,OAAS,IACjE,MACF,IAAK,OACL,IAAK,MACL,IAAK,OACH2c,GAAa9G,EAAAA,GAAAA,MAAkBujL,GAAoBS,GAAwB,IAC3E,MACF,IAAK,YACHl9K,EAAa,EACb,MACF,QACEA,OAAanmC,EAGbgjN,EACFE,EAAuB,CACrBp5H,KAAMk5H,EAAcl5H,KACpBjgF,SACAW,QACAwrG,kBACA7vE,aACA49K,eAGFZ,EAAiB,CACft5M,SACAW,QACAwrG,kBACA7vE,aACA49K,eAGJtR,EAAeoB,EAAAA,GAAkBS,WAChC,CACDzqM,EAAQ6oF,EAAkB6wH,EAAkBL,EAAwBF,EACpEG,EAAkBntG,EAAiBqtG,EAAsBI,EAAqBj5M,EAAOioM,IAGvF,OACEv1M,EAAAA,GAAAA,IAAA,OAAKE,UAAU,0BAAyBC,SAAA,EACtCH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,8BAA6BC,SAAA,EAC1CC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,UAASC,UACtBC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOH,EAAK,qBACZ2hF,SAAU3hF,EAAK,gCACfm8B,QAASyvE,EACTlrG,SAAUo5M,OAGdhnN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACR5N,UAAU,YACVyrD,YAAaz+C,EAAK,gBAClBJ,MAAOQ,EACPM,SAAUy+J,KAEZjsK,EAAAA,GAAAA,GAAA,KAAGF,UAAU,oBAAmBC,SAAE+M,EAAK,sBAEzClN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kBAAiBC,SAAE+M,EAAK,oBACvC9M,EAAAA,GAAAA,GAACqN,GAAAA,EAAU,CACTC,KAAK,gBACLC,QAAS,CACP,CACEb,MAAO,OACPO,MAAOH,EAAK,QAAS,IAEvB,CACEJ,MAAO,MACPO,MAAOH,EAAK,OAAQ,IAEtB,CACEJ,MAAO,OACPO,MAAOH,EAAK,QAAS,IAEvB,CACEJ,MAAO,YACPO,MAAOH,EAAK,YAEd,CACEJ,MAAO,SACPO,MAAOH,EAAK,oCAGhBU,SAAUw4M,EACVv4M,SAAUs4M,IAEc,WAAzBA,IACCnmN,EAAAA,GAAAA,IAAC+N,EAAAA,EAAM,CAAC7N,UAAU,eAAe+N,QAAM,EAACC,QAASymF,EAAax0F,SAAA,EAC3DinN,EAAAA,GAAAA,IAAel6M,EAAMsoF,GACrB,KACAn+B,EAAAA,GAAAA,IAAWnqD,EAAMsoF,OAGtBp1F,EAAAA,GAAAA,GAAA,KAAGF,UAAU,oBAAmBC,SAAE+M,EAAK,uBAEvC4rG,IACA94G,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kBAAiBC,SAAE+M,EAAK,wBACvC9M,EAAAA,GAAAA,GAACqN,GAAAA,EAAU,CACTC,KAAK,eACLC,QAAS,IACJ83M,GAAqB7xM,KAAKyzM,IAAC,CAAQv6M,MAAOu6M,EAAE7gI,WAAYn5E,MAAOg6M,MAClE,CACEv6M,MAAO,IACPO,MAAOH,EAAK,YAEd,CACEJ,MAAO,SACPO,MAAOH,EAAK,mCAGhBU,SAAU44M,EACV34M,SAAU04M,IAEa,WAAxBA,IACCnmN,EAAAA,GAAAA,GAAA,SACEF,UAAU,2BACVoB,KAAK,SACL2sB,IAAI,IACJT,IAAI,QACJ1gB,MAAOu5M,EACPz4M,SAAUq5M,KAGd7mN,EAAAA,GAAAA,GAAA,KAAGF,UAAU,oBAAmBC,SAAE+M,EAAK,uBAG3C9M,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,SAAO,EACPp4B,QAASi5M,EACT7mM,SAAUmmM,EACV/zM,UAA2BxF,EAAhB44M,EAAqB,WAAmB,cAAc3lN,UAEjEC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,gBAGftN,EAAAA,GAAAA,GAACg0D,GAAa,CACZtoD,OAAQ4oF,EACRlgC,cAAY,EACZE,gBAAc,EACd1oD,QAAS4oF,EACT//B,SAAUykC,EACVjlC,WAAYmhC,EACZ7gC,kBAAmBznD,EAAK,iBC9FhC,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAM,WAAE8rG,IAAevpG,EAAAA,EAAAA,KAAezN,GAAQ6xM,WAAW34E,SAAShuH,IAAW,CAAC,GACxE,OAAE8oG,EAAM,UAAE6xG,EAAS,WAAEC,GAAe9uG,GAAc,CAAC,EACnDppG,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQkL,GAGhC,MAAO,CACL8oG,SACA6xG,YACAC,aACA5zL,UANgBtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,MALxBP,EAvIgC04M,EAClD76M,SACA8oG,SACA6xG,YACAC,aACA5zL,YACAha,WACA3N,cAEA,MAAM,wBACJy7M,EAAuB,yBACvBC,EAAwB,SACxB98K,IACEz+B,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,MACP,MACJw6M,EAAQ,EAAC,WAAEd,EAAU,KAAEj6H,EAAI,QAAEg7H,GAC3BnyG,GAAU,CAAC,EACTxsE,EAAawsE,GAAQxsE,YAAsD,KAAvCwsE,EAAOxsE,YAAa9G,EAAAA,GAAAA,OAA0B9V,KAAKC,MACvF62B,GAAcsyD,GAAQxsE,YAAc,IAAK9G,EAAAA,GAAAA,MAAmB,EAwElE,OAtEAz3B,EAAAA,EAAAA,KAAU,KACJkiF,IACF66H,EAAwB,CAAE96M,SAAQigF,SAClC86H,EAAyB,CAAE/6M,SAAQigF,YAEpC,CAACjgF,EAAQigF,EAAM66H,EAAyBC,KAE3Cx8L,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KA8DR5L,EAAAA,GAAAA,GAAA,OAAKF,UAAU,8BAA6BC,UAC1CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,8BAA6BC,SAAA,EACxCs1G,IACAr1G,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAcC,SAAE+M,EAAK,aAEnCuoG,IACCz1G,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAACwzG,GAAAA,EAAS,CAACtmG,MAAOmoG,EAAOnoG,MAAOs/E,KAAM6oB,EAAO7oB,KAAM1sF,UAAU,gBAC5DgL,QAAQ+9B,KACP7oC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAcC,SACxBgjD,EACGj2C,EAAK,eACLA,EAAK,gBAAiB,IAAGk6M,EAAAA,GAAAA,IAAel6M,EAAM+7B,OAAeouB,EAAAA,GAAAA,IAAWnqD,EAAM+7B,WAIvF2+K,IACC5nN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,kBAAiBC,SAAE+M,EAAK,qBACrC9M,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPxiC,UAAU,6CAEVgO,QAASA,IAAM08B,EAAS,CAAE3qC,GAAI2nN,IAAWznN,UAEzCC,EAAAA,GAAAA,GAACiiD,GAAAA,EAAe,CACdtkB,OAAQ6pL,EACRnmK,QAAQnuB,EAAAA,GAAAA,IAAoBpmB,EAAoB,IAAduoG,EAAOriF,MAAa,GACtD6R,eAAa,SAvFP4iL,MACtB,GAAKP,GAAW1lN,SAAU2lN,GAAY3lN,OACtC,OAAK0lN,GAEHtnN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,kBAAiBC,SAAEmnN,EAAU1lN,OAASsL,EAAK,eAAgBy6M,GAASz6M,EAAK,kBACtFlN,EAAAA,GAAAA,IAAA,KAAGE,UAAU,eAAcC,SAAA,EACvBmnN,EAAU1lN,SACVilN,EAAa35M,EAAK,4BAA6B25M,EAAac,GAASz6M,EAAK,mBAE3Eo6M,EAAU1zM,KAAKk0M,IACd,MAAMC,GAAWz0L,EAAAA,GAAAA,IAAoBpmB,EAAsB,IAAhB46M,EAAS10L,MAAa,GAC3DquB,EAASqmK,EAASE,eAAiB,GAAGD,OAAsB76M,EAAK,qBAAuB66M,EAC9F,OACE3nN,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPxiC,UAAU,6CAEVgO,QAASA,IAAM08B,EAAS,CAAE3qC,GAAI6nN,EAAS/pL,SAAU59B,UAEjDC,EAAAA,GAAAA,GAACiiD,GAAAA,EAAe,CACdtkB,OAAQ+pL,EAAS/pL,OACjB0jB,OAAQA,EACRxc,eAAa,gBApBJ7kC,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,KA0FtBk/L,GA5DcI,MACvB,IAAIxyG,GAAQ6gG,UAAZ,CACA,IAAKiR,GAAcD,EAAW,OAAOlnN,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,IAC7C,GAAK4+L,GAAY3lN,OACjB,OACE5B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,kBAAiBC,SAAc+M,EAAZymB,EAAiB,oBAA4B,qBAC7EvzB,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAcC,SACxBonN,EAAW3zM,KAAKs0M,IACf9nN,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPxiC,UAAU,6CAEVgO,QAASA,IAAM08B,EAAS,CAAE3qC,GAAIioN,EAAUnqL,SAAU59B,UAElDC,EAAAA,GAAAA,GAACiiD,GAAAA,EAAe,CACdtkB,OAAQmqL,EAAUnqL,OAClB0jB,QAAQnuB,EAAAA,GAAAA,IAAoBpmB,EAAuB,IAAjBg7M,EAAU90L,MAAa,GACzD6R,eAAa,YAhBc,GA4D9BgjL,eCrHPE,GAAS,IAEf,SAASC,GAAiBC,EAAuBC,GAC/C,MAAQC,YAAaC,EAAeb,MAAOc,EAAU,EAAGr1L,KAAMs1L,GAAWL,GACjEE,YAAaI,EAAehB,MAAOiB,EAAU,EAAGx1L,KAAMy1L,GAAWP,EACzE,OAAIE,GAAiBG,EAAsBljM,OAAO+iM,GAAiB/iM,OAAOkjM,GACtEF,GAAWG,EAAgBA,EAAUH,EAClCI,EAASH,CAClB,CAEA,MAoUA,IAAe3pN,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAM,QAAEq/H,EAAO,eAAE88E,IAAmB55M,EAAAA,EAAAA,KAAezN,GAAQ6xM,WAAW34E,SAAShuH,IAAW,CAAC,EACrF0C,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQkL,GAGhC,MAAO,CACL0oM,gBAAiBrpE,EACjB+8E,uBAAwBD,EACxBz5M,OACAskB,UANgBtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,MAJxBP,EApU6Bk6M,EAC/Cr8M,SACA0C,OACAgmM,kBACA0T,yBACApvM,WACAga,YACA3nB,UACAupM,qBAEA,MAAM,yBACJ0T,EAAwB,iBACxBnnL,EAAgB,uBAChBkkL,EAAsB,yBACtBkD,EAAwB,iCACxBC,EAAgC,oBAChCC,IACEj9M,EAAAA,EAAAA,MAEEe,GAAO2mC,EAAAA,GAAAA,KACPD,GAAUzmC,EAAAA,EAAAA,MAETk8M,EAA6BC,EAA2BC,IAA8BlqN,EAAAA,EAAAA,MACtFmqN,EAAoBC,EAAkBC,IAAqBrqN,EAAAA,EAAAA,MAC3DsqN,EAAgBC,IAAqBt9M,EAAAA,EAAAA,OACrC2pM,EAAoBC,EAAkBC,IAAqB92M,EAAAA,EAAAA,MAC3DwqN,EAAgBC,IAAqBx9M,EAAAA,EAAAA,OAE5C4e,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,IAGV,MAAM+9M,GAAuB7hN,EAAAA,EAAAA,KAAQ,KACnC,GAAKmtM,EACL,OAAOA,EACJ/oG,MAAK,EAAGrjE,gBACPA,GAAeA,GAAa9G,EAAAA,GAAAA,MAAkB6nL,GAAAA,GAAsB,QAEvE,CAAC3U,IACE9qM,GAAcC,EAAAA,EAAAA,MACpBytE,EAAAA,GAAAA,GAAY1tE,EAAaw/M,EAAuB,SAAOjnN,GAEvD,MAAMmnN,GAAmB/hN,EAAAA,EAAAA,KAAQ,IAAMmH,IAAQowJ,EAAAA,EAAAA,IAAgBpwJ,IAAO,CAACA,IACjE66M,EAAgB7U,GAAiB1jK,MAAK,EAAG42K,iBAAkBA,IAC3D4B,EAAoBF,EAAmB,GAAG/gJ,EAAAA,MAAkB+gJ,IAAqBC,GAAet9H,KAChGw9H,GAAkBliN,EAAAA,EAAAA,KAAQ,KAC9B,MAAM8jI,EAAU38H,GAAMwmC,YAAcw/J,EAAkBA,GAAiBx3K,QAAO,EAAG0qL,kBAAmBA,IACpG,OAAOv8E,GAASnoF,KAAKukK,MACpB,CAAC/4M,GAAMwmC,YAAaw/J,IAOjBgV,GAAetqN,EAAAA,EAAAA,KAAa01G,IAChC,MAAM,KACJ7oB,EAAI,MAAEt/E,EAAK,gBAAEwrG,EAAe,WAAE7vE,EAAU,WAAE49K,GACxCpxG,EACJuwG,EAAuB,CACrBr5M,SACAigF,OACAt/E,QACAwrG,kBACA7vE,aACA49K,aACAvQ,WAAW,MAEZ,CAAC3pM,EAAQq5M,IAENsE,GAAcvqN,EAAAA,EAAAA,KAAa01G,IAC/Bm0G,EAAkBn0G,GAClBg0G,MACC,CAACA,IAEEv4E,GAAenxI,EAAAA,EAAAA,KAAY,KAC1B4pN,IACLU,EAAaV,GACbC,OAAkB9mN,GAClB4mN,OACC,CAACA,EAAmBW,EAAcV,IAE/BY,GAAuBxqN,EAAAA,EAAAA,KAAY,KACvCw1M,EAAeoB,EAAAA,GAAkB6T,cAChC,CAACjV,IAEEkV,GAAsB1qN,EAAAA,EAAAA,KAAY,KAClCmqN,GACFI,EAAYJ,KAEb,CAACI,EAAaJ,IAEXQ,GAAyB3qN,EAAAA,EAAAA,KAAY,KACzCopN,EAAiC,CAAEx8M,WACnC48M,MACC,CAAC58M,EAAQ48M,EAA4BJ,IAElCwB,GAAiB5qN,EAAAA,EAAAA,KAAa01G,IAClC2zG,EAAoB,CAAEz8M,SAAQ8oG,WAC9B8/F,EAAeoB,EAAAA,GAAkBiU,cAChC,CAACj+M,EAAQ4oM,EAAgB6T,IAEtByB,GAAe9qN,EAAAA,EAAAA,KAAa01G,IAChCyzG,EAAyB,CAAEv8M,SAAQigF,KAAM6oB,EAAO7oB,SAC/C,CAACjgF,EAAQu8M,IAEN4B,GAAc/qN,EAAAA,EAAAA,KAAa01G,IAC/Bq0G,EAAkBr0G,GAClBygG,MACC,CAACA,IAEExiF,GAAe3zH,EAAAA,EAAAA,KAAY,KAC1B8pN,IACLgB,EAAahB,GACbC,OAAkBhnN,GAClBqzM,OACC,CAACA,EAAmB0U,EAAchB,IAE/BkB,IAAWhrN,EAAAA,EAAAA,KAAa6sF,KAC5BmtC,EAAAA,GAAAA,IAAoBntC,GACpB9qD,EAAiB,CACf9gC,QAAS4yC,EAAQ,kBAElB,CAACA,EAAS9R,IAEPkpL,GAAoBv1G,IACxB,MAAM,MACJkyG,EAAQ,EAAC,WAAEd,EAAU,WAAE59K,EAAU,YAAEs/K,EAAW,UAAE0C,EAAS,UAAE3U,GACzD7gG,EACJ,IAAIxgG,EAAO,GASX,GAPEA,GADGqhM,GAAauQ,GAAcc,EAAQd,EAC/BjzK,EAAQ,UAAWizK,EAAac,GAC9BA,EACF/zK,EAAQ,eAAgB+zK,GAExB/zK,EAAQ,eAGb0iK,EAEF,OADArhM,GAAQ,IAAIkzM,MAAUv0K,EAAQ,aACvB3+B,EAOT,GAJIg2M,IACFh2M,GAAQ,IAAIkzM,MAAUv0K,EAAQ,eAAgBq3K,WAG7BnoN,IAAf+jN,GAA4Bc,IAAUd,EACxC5xM,GAAQ,IAAIkzM,MAAUv0K,EAAQ,2BACzB,GAAI3K,EAAY,CACrB,MAAMiR,EAAOjR,GAAa9G,EAAAA,GAAAA,MAC1BltB,GAAQ,IAAIkzM,MAEVlzM,GADEilC,EAAO,EACDtG,EAAQ,wBAAwBs3K,EAAAA,GAAAA,IAAgBh+M,EAAMgtC,IAEtDtG,EAAQ,qBAEpB,MAAW20K,IACTtzM,GAAQ,IAAIkzM,MAAUv0K,EAAQ,gBAGhC,OAAO3+B,GAGHk2M,GAAsB11G,IAC1B,MAAM,MACJkyG,EAAQ,EAAC,WAAEd,EAAU,UAAEvQ,EAAS,WAAErtK,GAChCwsE,EACJ,OAAI6gG,EACK,wBAELuQ,GAAcc,EAAQd,EACjB,yBAEL59K,GAC4C,KAAhCA,GAAa9G,EAAAA,GAAAA,QACf,EACH,uBAGJ,yBAGHipL,GAAyB31G,IAC7B,MAAMjvE,EAAmC,GA8BzC,OA7BAA,EAAQrzB,KAAK,CACX7F,MAAOsmC,EAAQ,QACfxgC,KAAM,OACNiuC,QAASA,IAAM0pK,GAASt1G,EAAO7oB,QAG5B6oB,EAAO8yG,aAAgB9yG,EAAO6gG,WACjC9vK,EAAQrzB,KAAK,CACX7F,MAAOsmC,EAAQ,QACfxgC,KAAM,OACNiuC,QAASA,IAjJKo0D,KAClBwzG,EAAyB,CAAEt8M,SAAQ8oG,WACnC8/F,EAAeoB,EAAAA,GAAkB6T,aA+Ida,CAAW51G,KAIzBA,EAAO6gG,UAQV9vK,EAAQrzB,KAAK,CACX7F,MAAOsmC,EAAQ,cACfxgC,KAAM,SACNiuC,QAASA,IAAMypK,EAAYr1G,GAC3BjiG,aAAa,IAXfgzB,EAAQrzB,KAAK,CACX7F,MAAOsmC,EAAQ,gBACfxgC,KAAM,SACNiuC,QAASA,IAAMipK,EAAY70G,GAC3BjiG,aAAa,IAUVgzB,GAGT,OACExmC,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2BAA0BC,SAAA,EACvCH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,8BAA6BC,SAAA,EAC1CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAACqkG,GAAAA,EAAuB,CACtBjkG,OAAQC,GAAAA,EAAe6qN,OACvBhrN,KAAMirN,EAAAA,IACNrrN,UAAU,kBAEZE,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAcC,SAAcyzC,EAAZjgB,EAAoB,yBAAoC,wBAEtFw2L,IACC/pN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,UAASC,UACtBC,EAAAA,GAAAA,GAACwzG,GAAAA,EAAS,CACR1zG,UAAU,iBACV0sF,KAAMu9H,EACNt4E,WAAS,EACTC,SAAWziI,GAAM8xI,eAAkCr+I,EAAtB2nN,EAC7Bn9M,MAAyBsmC,EAAlBvkC,GAAM8xI,UAAoB,aAAwB,wCAI/DnhJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAAUsyK,eAAa,EAAAryK,SAAA,EACpCC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAACtvB,KAAK,MAAMgrM,kBAAgB,EAAcl+M,UAAU,cAAcgO,QAASq8M,EAAqBpqN,SACtGyzC,EAAQ,kBAD+B,YAGvCw2K,IAAoBA,EAAgBxoN,UAAWxB,EAAAA,GAAAA,GAACm7H,GAAAA,EAAY,CAACtmH,KAAK,kBAAqB,WACzFm1M,GAAiBx2M,KAAK6hG,IACrBz1G,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPG,aAAaziC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,OAAOxN,UAAW,oBAAoBirN,GAAmB11G,OACjF2I,cAAc,OACdz7E,WAAS,EAETz0B,QAASA,IAAMy8M,EAAel1G,GAC9Bz0D,eAAgBoqK,GAAsB31G,GAAQt1G,SAAA,EAG9CC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,qBAAoBC,SAAEs1G,EAAOnoG,OAASmoG,EAAO7oB,QAC7DxsF,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWsW,IAAI,OAAMrW,SAClC6qN,GAAiBv1G,OAJfA,EAAO7oB,SAQhBxsF,EAAAA,GAAAA,GAAA,KAAGF,UAAU,oBAAmBC,SAAmByzC,EAAQ,wBAAtB,iBAEtCm1K,GAA0B79M,QAAQ69M,EAAuBnnN,UACxD5B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAAUsyK,eAAa,EAAAryK,SAAA,EACpCC,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAcC,SAAcyzC,EAAQ,iBAAjB,UAChCxzC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPtvB,KAAK,SACLI,aAAW,EAEXtF,QAASo7M,EAA0BnpN,UAEnCC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEyzC,EAAQ,4BAH7B,UAKLm1K,GAAwBn1M,KAAK6hG,IAC5Bz1G,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPG,aAAaziC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,OAAOxN,UAAW,oBAAoBirN,GAAmB11G,OACjF2I,cAAc,OACdz7E,WAAS,EAETz0B,QAASA,IAAMy8M,EAAel1G,GAC9Bz0D,eAAgBoqK,GAAsB31G,GAAQt1G,SAAA,EAG9CC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,QAAOC,SAAEs1G,EAAOnoG,OAASmoG,EAAO7oB,QAChDxsF,EAAAA,GAAAA,GAAA,QAAMF,UAAU,WAAWsW,IAAI,OAAMrW,SAClC6qN,GAAiBv1G,OAJfA,EAAO7oB,eAWtBxsF,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQu9M,EACRr9M,QAASu9M,EACTj8M,MAAOsmC,EAAQ,yBACf3+B,KAAM2+B,EAAQ,4BACdjQ,sBAAoB,EACpBF,aAAcmQ,EAAQ,aACtBlQ,eAAgBgnL,KAElBtqN,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQ09M,EACRx9M,QAAS09M,EACTp8M,MAAOsmC,EAAQ,cACf3+B,KAAM2+B,EAAQ,eACdjQ,sBAAoB,EACpBF,aAAcmQ,EAAQ,gBACtBlQ,eAAgBwtG,KAElB9wI,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQmqM,EACRjqM,QAASmqM,EACT7oM,MAAOsmC,EAAQ,cACf3+B,KAAM2+B,EAAQ,kBACdjQ,sBAAoB,EACpBF,aAAcmQ,EAAQ,UACtBlQ,eAAgBgwF,WC1RxB,IAAe30H,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUs8B,aAGF,CACLuS,MAHWC,EAAAA,EAAAA,KAAW9uC,EAAQs8B,MAFhBjvB,EA3D2B08M,EAC7CztL,SACApxB,SACA+rG,QACAtlF,OACAO,YACA2c,WAEA,MAAM,SAAE1F,EAAQ,oBAAE6gL,IAAwBt/M,EAAAA,EAAAA,MAEpCmK,GAAiBo1M,EAAAA,GAAAA,GAAuB,eACxCx+M,GAAOC,EAAAA,EAAAA,KAEPi0C,GAAWpX,EAAAA,EAAAA,IAAgBsG,GAC3Bq7K,EAAuC,KAA1Bv4L,GAAO+O,EAAAA,GAAAA,OAA0B9V,KAAKC,MAEnDs/L,GAAaC,EAAAA,GAAAA,IAAQ,IAAIx/L,KAAKs/L,KAChCt0J,EAAAA,GAAAA,IAAWnqD,EAAMy+M,IAAaG,EAAAA,GAAAA,IAAgB5+M,EAAMy+M,GAAW,GAAM,GAAO,GAM1EI,GAAsBhsN,EAAAA,EAAAA,KAAY,KACtC0rN,EAAoB,CAAE9+M,SAAQoxB,SAAQiuL,YAAY,MACjD,CAACr/M,EAAQ8+M,EAAqB1tL,IAE3BkuL,GAAsBlsN,EAAAA,EAAAA,KAAY,KACtC0rN,EAAoB,CAAE9+M,SAAQoxB,SAAQiuL,YAAY,MACjD,CAACr/M,EAAQ8+M,EAAqB1tL,IAEjC,OACE/9B,EAAAA,GAAAA,IAAA,OAAKE,UAAWoW,EAAe,KAAKnW,SAAA,EAClCH,EAAAA,GAAAA,IAAA,OAAKE,UAAWoW,EAAe,OAAOnW,SAAA,EACpCH,EAAAA,GAAAA,IAAA,OAAKE,UAAWoW,EAAe,QAASpI,QAftBg+M,KACtBthL,EAAS,CAAE3qC,GAAI89B,KAcsD59B,SAAA,EAC/DC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CAEL3zB,KAAK,SACL4zB,KAAMoc,GAFDvS,IAIP/9B,EAAAA,GAAAA,IAAA,OAAKE,UAAWoW,EAAe,aAAanW,SAAA,EAC1CC,EAAAA,GAAAA,GAAA,OAAKF,UAAWoW,EAAe,aAAanW,SAAEihD,KAC9ChhD,EAAAA,GAAAA,GAAA,OAAKF,UAAWoW,EAAe,iBAAiBnW,SAAEu4G,WAGtDt4G,EAAAA,GAAAA,GAAA,OAAKF,UAAWoW,EAAe,QAAQnW,SAAEyrN,QAE3C5rN,EAAAA,GAAAA,IAAA,OAAKE,UAAWoW,EAAe,WAAWnW,SAAA,EACxCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC7N,UAAWoW,EAAe,UAAWpI,QAAS69M,EAAoB5rN,SAC3D+M,EAAZymB,EAAiB,sBAA8B,wBAElDvzB,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC7N,UAAWoW,EAAe,UAAWrI,QAAM,EAACC,QAAS+9M,EAAoB9rN,SAC9E+M,EAAK,8BC0ChB,IAAenO,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAM0C,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQkL,GAEhC,MAAO,CACL0C,OACAskB,UAAWtkB,IAAQukB,EAAAA,EAAAA,IAAcvkB,MANnBP,EA7FkCq9M,EACpD98M,OACA1C,SACAgN,WACAga,YACA3nB,cAEA,MAAM,wBAAEogN,EAAuB,qBAAEvW,IAAyB1pM,EAAAA,EAAAA,OACnDkgN,EAAuBC,EAAqBC,IAAwBltN,EAAAA,EAAAA,MACpEmtN,EAAuBC,EAAqBC,IAAwBrtN,EAAAA,EAAAA,KAErE6N,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,KAGVtB,EAAAA,EAAAA,KAAU,KACH2E,GAAMipM,eAAiBzpM,EAAAA,EAAAA,IAASlC,IACnCkpM,EAAqB,CAAElpM,aAExB,CAAC0C,EAAM1C,EAAQkpM,IAElB,MAAM8W,GAA0B5sN,EAAAA,EAAAA,KAAY,KAC1CqsN,EAAwB,CAAEz/M,SAAQq/M,YAAY,IAC9CO,MACC,CAACH,EAAyBz/M,EAAQ4/M,IAE/BK,GAA0B7sN,EAAAA,EAAAA,KAAY,KAC1CqsN,EAAwB,CAAEz/M,SAAQq/M,YAAY,IAC9CU,MACC,CAACN,EAAyBz/M,EAAQ+/M,IAErC,OACE1sN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gCAA+BC,SAAA,EAC5CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAACqkG,GAAAA,EAAuB,CACtBjkG,OAAQC,GAAAA,EAAe+qN,YACvBlrN,KAAMusN,EAAAA,IACN3sN,UAAU,iBAEXgL,QAAQmE,GAAMipM,cAAc12M,UAC3B5B,EAAAA,GAAAA,IAAA,OAAKE,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC7N,UAAU,qBAAqBgO,QAASo+M,EAAoBnsN,SAAC,gBACrEC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC7N,UAAU,qBAAqBgO,QAASu+M,EAAqBx+M,QAAM,EAAA9N,SAAC,uBAIlFH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAAUsyK,eAAa,EAAAryK,SAAA,EACpCC,EAAAA,GAAAA,GAAA,KAAAD,SACIkP,GAAMipM,aAAiCjpM,EAAKipM,aAAa12M,OACvDsL,EAAK,eAAgBmC,EAAKipM,aAAa12M,QAAUsL,EAAK,oBADnCA,EAAK,YADvB,UAILmC,GAAMipM,eACNl4M,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,GAAK,WAEiB,IAA/BtZ,GAAMipM,cAAc12M,SACnBxB,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAcC,SACZ+M,EAAZymB,EAAiB,iCAAyC,gCAD7B,SAIjCtkB,GAAMipM,cAAc1kM,KAAI,EAAGmqB,SAAQ26E,QAAOtlF,WACzChzB,EAAAA,GAAAA,GAACorN,GAAW,CACVztL,OAAQA,EACR26E,MAAOA,EACPtlF,KAAMA,EACNO,UAAWA,EACXhnB,OAAQA,GACHoxB,YAKb39B,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQugN,EACRrgN,QAASugN,EACTj/M,MAAM,uBACN2H,KAAK,gDACLyuB,eAAgBipL,KAElBvsN,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQ0gN,EACRxgN,QAAS0gN,EACTp/M,MAAM,uBACN2H,KAAK,gDACLyuB,eAAgBkpL,WCsJxB,IAAe7tN,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MAAM0C,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQkL,IAC1B,mBAAE62K,EAAqBspC,EAAAA,KAAyBrrN,EAAO4uC,WAAa,CAAC,EAErE8c,GAAeC,EAAAA,EAAAA,KAAmB3rD,EAAQkL,GAC1C+2K,EAAiBv2H,GAAcu2H,gBAAkBF,EACjD7vJ,GAAYC,EAAAA,EAAAA,IAAcvkB,GAEhC,MAAO,CACLo0K,iBAAkBt2H,GAAcs2H,iBAChCljI,mBAAoB9+C,EAAO++C,UAAUD,mBACrClxC,OACAm0K,qBACAE,iBACA/vJ,gBAGJ,CAAClyB,GAAUkL,YACFzB,SAAQslC,EAAAA,EAAAA,KAAW/uC,EAAQkL,KAnBlBmC,EAlO+Bi+M,EACjDxsK,qBACAkjI,mBACAp0K,OACAsK,WACA3N,UACAw3K,qBACAE,iBACA/vJ,gBAEA,MAAM,wBAAEq5L,IAA4B7gN,EAAAA,EAAAA,MAE9Be,GAAOC,EAAAA,EAAAA,MACNs9H,EAAWC,IAAgBp+H,EAAAA,EAAAA,KAAS,IACpCwoB,EAAWk0F,IAAgB18G,EAAAA,EAAAA,KAAS,IACpC2gN,EAAuBC,IAA4B5gN,EAAAA,EAAAA,IAAuCm3K,IAE1F0pC,EAAqBC,IAA0B9gN,EAAAA,EAAAA,IAASo3K,IAE/Dx4J,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,IAGV,MAAMqhN,GAAmBnlN,EAAAA,EAAAA,KAAQ,IAAM,CAAC,CACtC4E,MAAO,MACPO,MAAOH,EAAK,iBACX,CACDJ,MAAO,OACPO,MAAOH,EAAK,kBACX,CACDJ,MAAO,OACPO,MAAOH,EAAK,kBACV,CAACA,IAECogN,GAAsBvtN,EAAAA,EAAAA,KAAY,KACjCsP,IACL25G,GAAa,GAEbgkG,EAAwB,CACtBrgN,OAAQ0C,EAAKpP,GACbwjL,iBAAkBwpC,EAClBvpC,eAAgBypC,OAEjB,CAAC99M,EAAM49M,EAAuBD,EAAyBG,KAE1DziN,EAAAA,EAAAA,KAAU,KACRs+G,GAAa,GACb0hB,GAAa,GACbwiF,EAAyBzpC,GACzB2pC,EAAuB1pC,KACtB,CAACD,EAAkBC,IAEtB,MAAM6pC,GAA2BrlN,EAAAA,EAAAA,KAC/B,IAAMq4C,GAAoB1iB,QAAO,EAAG4uE,iBAAkBA,KACtD,CAAClsD,KAGH71C,EAAAA,EAAAA,KAAU,KACR,QAA4B5H,IAAxBqqN,GAAqCA,IAAwBzpC,EAAjE,CAKA,GAAoC,SAAhCupC,GAAuB3rN,MAC8B,QAA3BmiL,GAAkBniL,MAA6C,SAA3BmiL,GAAkBniL,MAEd,IAAzC2rN,EAAsB/oC,QAAQtiL,OAEvD,YADA8oI,GAAa,GAKjB,GAAIuiF,GAAuB3rN,OAASmiL,GAAkBniL,KAAtD,CAKA,GAAoC,SAAhC2rN,GAAuB3rN,MAA8C,SAA3BmiL,GAAkBniL,KAAiB,CAC/E,MAAMksN,EAAwBP,EAAsB/oC,QAC9CupC,EAA0BhqC,GAAkBS,QAElD,GAAIspC,EAAsB5rN,SAAW6rN,EAAwB7rN,QACxD4rN,EAAsB5rI,UAAU0qB,MAChCohH,IAAmBD,EAAwB97K,MACzCg8K,IAAoBj/K,EAAAA,EAAAA,IAAeg/K,EAAeC,OAIvD,YADAjjF,GAAa,EAGjB,CAEAA,GAAa,EAjBb,MAFEA,GAAa,EAZf,MAFEA,GAAa,KAkCd,CACDyiF,EACAzpC,EACAupC,EACAxpC,IAGF,MAAMmqC,GAA8B7tN,EAAAA,EAAAA,KAAa+M,IACjC,QAAVA,GACFogN,EAAyB,CAAE5rN,KAAM,QACjC8rN,EAAuB1pC,IACJ,SAAV52K,GACTogN,EAAyB,CACvB5rN,KAAM,OACN4iL,QAAoC,SAA3BT,GAAkBniL,KAAkBmiL,EAAiBS,QAAU,KAE1EkpC,EAAuB1pC,KAEvBwpC,OAAyBpqN,GACzBsqN,OAAuBtqN,MAExB,CAAC2gL,EAAkBC,IAEhBmqC,GAAuB9tN,EAAAA,EAAAA,KAAaiN,IACxC,IAAKqC,IAASk+M,EAA0B,OAExC,MAAM,KAAE7/M,EAAI,QAAE27B,GAAYr8B,EAAE6X,cAC5B,GAAoC,SAAhCooM,GAAuB3rN,KAAiB,CAC1C,MAAMguC,EAAW,CAAE81H,SAAU13J,GAE3Bw/M,EADE7jL,EACuB,CACvB/nC,KAAM,OACN4iL,QAAS,IAAI+oC,EAAsB/oC,QAAS50I,IAGrB,CACvBhuC,KAAM,OACN4iL,QAAS+oC,EAAsB/oC,QAAQrmJ,QAAQiwL,KAAWp/K,EAAAA,EAAAA,IAAeo/K,EAAOx+K,MAGtF,IACC,CAACi+K,EAA0Bl+M,EAAM49M,IAE9Bc,GAA6BhuN,EAAAA,EAAAA,KAAa+M,IAC9CsgN,EAAuBtgN,KACtB,IAEGkhN,GAA+BjuN,EAAAA,EAAAA,KAAa+M,GACzCI,EAAK,0CAA2CJ,IACtD,CAACI,IAEE+gN,EAA2Bt6L,IACK,QAAhCs5L,GAAuB3rN,MAAkD,SAAhC2rN,GAAuB3rN,MAEtE,OACEtB,EAAAA,GAAAA,IAAA,OAAKE,UAAU,aAAYC,SAAA,EACzBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,8BAA6BC,SAAA,CACzC+K,QAAQiiN,GAAuBc,KAC9BjuN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,kBAAiBC,SAC5B+M,EAAK,6BAER9M,EAAAA,GAAAA,GAAC2f,GAAAA,EAAW,CACVkO,IAAK,EACLT,IAAKg2J,EACL12K,MAAOqgN,EACPv/M,SAAUmgN,EACV9tE,YAAa+tE,EACbE,kBAAgB,KAElB9tN,EAAAA,GAAAA,GAAA,KAAGF,UAAU,iCAAgCC,SAC1C+M,EAAK,wCAIZlN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,kBAAiBC,SAC5B+M,EAAK,yBAER9M,EAAAA,GAAAA,GAACqN,GAAAA,EAAU,CACTI,SAAUo/M,GAAuB3rN,MAAQ,OACzCoM,KAAK,YACLC,QAAS0/M,EACTz/M,SAAUggN,KAEZ5tN,EAAAA,GAAAA,IAAA,KAAGE,UAAU,iCAAgCC,SAAA,CACV,QAAhC8sN,GAAuB3rN,MAAkB4L,EAAK,0BACd,SAAhC+/M,GAAuB3rN,MAAmB4L,EAAK,4BAC9C+/M,GAAyB//M,EAAK,8BAGH,SAAhC+/M,GAAuB3rN,OACtBtB,EAAAA,GAAAA,IAAA,OAAKE,UAAU,2BAA0BC,SAAA,EACvCC,EAAAA,GAAAA,GAAA,MAAIF,UAAU,kBAAiBC,SAC5B+M,EAAK,4BAEPqgN,GAA0B35M,KAAI,EAAG07B,WAAUhiC,YAC1ClN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPxlD,KAAM4hC,EAAS81H,SACf/7H,QAAS4jL,GAAuB/oC,QAAQ53E,MAAM/yB,IAAM7qC,EAAAA,EAAAA,IAAeY,EAAUiqC,KAC7ElsE,OACErN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,WAAUC,SAAA,EACvBC,EAAAA,GAAAA,GAAC2hD,GAAAA,EAAmB,CAACzS,SAAUA,EAAUiR,mBAAoBA,IAC5DjzC,KAGLwnG,UAAQ,EACRlnG,SAAUigN,eAQtBztN,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,QAASmkG,EACTv8H,QAASo/M,EACT56M,UAAWxF,EAAK,QAChBoT,SAAUwU,EAAU30B,SAEnB20B,GACC10B,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf5N,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,mBClNfm2I,GAA2B,4BA+OjC,IAAe9kJ,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUs8B,aACT,MAAMuS,GAAOC,EAAAA,EAAAA,KAAW9uC,EAAQs8B,GAC1B1uB,GAAOmhC,EAAAA,EAAAA,KAAW/uC,EAAQs8B,GAC1B0S,GAAeC,EAAAA,EAAAA,KAAmBjvC,EAAQs8B,IAC1C,SAAEhqB,IAAa7E,EAAAA,EAAAA,KAAezN,GAAQ6xM,WACtC/0L,EAAUlP,IAAQgtH,EAAAA,GAAAA,IAAehtH,GAAMitH,EAAAA,EAAAA,KAAqB76H,IAAS86H,EAAAA,EAAAA,KAAsB96H,EAAQ4N,EAAKpP,KACxGkzB,EAAgBsd,GAActd,cAGpC,MAAO,CACLmd,OAAMv8B,WAAUwK,UAAS4U,gBAAeg7L,iBAHjB19K,GAAcotH,cAAgBptH,GAAcxd,iBARrDnkB,EA7O0Bs/M,EAC5CrwL,SACAuS,OACAv8B,WACAwK,UACAvS,UACA2N,WACAwZ,gBACAg7L,uBAEA,MAAM,cACJr1J,EAAa,cACbjY,EAAa,gBACb40J,EAAe,0BACfhC,IACEtnM,EAAAA,EAAAA,OAEG8pM,EAAoBC,EAAkBC,IAAqB92M,EAAAA,EAAAA,MAC3DgvN,EAAgCC,EAA8BC,IAAiClvN,EAAAA,EAAAA,MAC/FylJ,EAAwBC,IAA6Bz4I,EAAAA,EAAAA,KAAS,IAC9DgjD,EAAO01F,IAAY14I,EAAAA,EAAAA,MACpBY,GAAOC,EAAAA,EAAAA,MAEb+d,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,IAGV,MAAMi4I,EAAmB3zG,GAAQA,EAAK8oB,WAAmB,GACnD8qF,EAAkB5zG,GAAQA,EAAKgpB,UAAkB,IAEhDF,EAAWC,IAAgB/sD,EAAAA,EAAAA,IAAS23I,IACpC3qF,EAAUC,IAAejtD,EAAAA,EAAAA,IAAS43I,IAClCsqE,EAAwBC,IAA6BniN,EAAAA,EAAAA,KAAUiS,IAEtE7T,EAAAA,EAAAA,KAAU,KACR+jN,GAA2BlwM,KAC1B,CAACA,KAEJ7T,EAAAA,EAAAA,KAAU,KACRq6I,GAA0B,GAC1BoxD,MACC,CAACA,EAAmBp4K,KAEvBrzB,EAAAA,EAAAA,KAAU,KACR2uD,EAAa4qF,GACb1qF,EAAY2qF,KACX,CAACD,EAAkBC,EAAiB5zG,KAEvC5lC,EAAAA,EAAAA,KAAU,KACJqJ,IAAaogM,EAAAA,GAAmBxuD,WAClCZ,GAA0B,GAC1BC,OAASliJ,GACTqzM,OAED,CAACA,EAAmBpiM,IAEvB,MAAMgmD,GAAwBh6D,EAAAA,EAAAA,KAAaiN,IACzCqsD,EAAarsD,EAAEC,OAAOH,OACtBi4I,GAA0B,GAEtBz1F,IAAUu0F,IACZmB,OAASliJ,KAEV,CAACwsD,IAEE4K,GAAuBn6D,EAAAA,EAAAA,KAAaiN,IACxCusD,EAAYvsD,EAAEC,OAAOH,OACrBi4I,GAA0B,KACzB,IAEG2pE,GAA2B3uN,EAAAA,EAAAA,KAAaiN,IAC5CyhN,EAA0BzhN,EAAEC,OAAOo8B,SACnC07G,GAA0B,KACzB,IAEGgB,GAAoBhmJ,EAAAA,EAAAA,KAAY,KACpC,MAAMimJ,EAAmB5sF,EAAUwQ,OAC7Bq8E,EAAkB3sF,EAASsQ,OAE5Bo8E,EAAiBpkJ,OAKtBk3D,EAAc,CACZ/6B,SACAxf,SAAUiwM,EACVp1J,UAAW4sF,EACX1sF,SAAU2sF,IARVjB,EAASnB,MAUV,CAACzqF,EAAWE,EAAUR,EAAe/6B,EAAQywL,IAE1CG,GAAsB5uN,EAAAA,EAAAA,KAAY,KACtC8gD,EAAc,CAAE9iB,WAChBo4K,IACAV,MACC,CAACU,EAAmBV,EAAiB50J,EAAe9iB,IAEjDo7B,GAAW3vD,EAAAA,EAAAA,MACXirM,GAAejrM,EAAAA,EAAAA,KAAO,GAEtBolN,GAAqB7uN,EAAAA,EAAAA,KAAY,KACrCo5D,EAASxvD,SAASg4J,QAClB8yC,EAAa9qM,SAAU,IACtB,IAEGklN,GAAyB9uN,EAAAA,EAAAA,KAAY,KACzCo5D,EAASxvD,SAASg4J,QAClB8yC,EAAa9qM,SAAU,IACtB,IAEGmlN,GAA4B/uN,EAAAA,EAAAA,KAAY,KAC5CwuN,IACAxpE,GAA0B,GAC1B0uD,EAA0B,CAAE11K,aAC3B,CAACwwL,EAA+B9a,EAA2B11K,IAExD22K,GAAqB30M,EAAAA,EAAAA,KAAaunJ,IACtCvC,GAA0B,GAC1B0uD,EAA0B,CAAE11K,SAAQupH,OAAMqtD,UAAWF,EAAa9qM,YACjE,CAAC8pM,EAA2B11K,IAE/B,IAAKuS,EACH,OAGF,MAAMy+K,IAAuBl8H,EAAAA,EAAAA,IAAUviD,IAASA,EAAKrwC,KAAOykK,EAAAA,IACtD5vI,EAAY/gB,IAAaogM,EAAAA,GAAmB5uD,WAElD,OACEvlJ,EAAAA,GAAAA,IAAA,OAAKE,UAAU,aAAYC,SAAA,EACzBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAACiiD,GAAAA,EAAe,CACdtkB,OAAQuS,EAAKrwC,GACb42H,WAAW,QACXt0E,kBAAgB,EAChBysK,eAAa,EACbC,cAAY,KAEdjvN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACR7N,GAAG,kBACHoN,MAAOH,EAAK,iCACZU,SAAUmsD,EACVjtD,MAAOssD,EACP9J,MAAOA,IAAUu0F,GAA2Bv0F,OAAQxsD,KAEtD1C,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACR7N,GAAG,iBACHoN,MAAOH,EAAK,gCACZU,SAAUssD,EACVptD,MAAOwsD,QAGXl5D,EAAAA,GAAAA,GAAA,OAAKF,UAAU,kBAAiBC,UAC9BC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7pB,QAASmlL,EACTnhN,MAAOH,EAAK,iBACZ2hF,SAAU3hF,EAAKshN,EACX,gCACA,kCACJ5gN,SAAU8gN,SAIfK,IACC/uN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAACtvB,KAAK,aAAa0M,QAAM,EAAC5R,QAAS0gN,EAAmBzuN,UAC7DC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,qBAAoBC,SAAE+M,EAAK,wBAAyBojC,EAAK8oB,gBAE3Eh5D,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAACtvB,KAAK,aAAa0M,QAAM,EAAC5R,QAAS2gN,EAAuB1uN,UACjEC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,qBAAoBC,SAAE+M,EAAK,0BAA2BojC,EAAK8oB,eAE5EjmC,IACC/yB,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CACPG,aACEziC,EAAAA,GAAAA,GAAC6zB,GAAAA,EAAM,CACLhyB,MAAOksN,EACPe,iBAAe,EACfh7L,KAAMoc,EACNhwC,KAAK,OACLJ,UAAU,mBAGd4f,QAAM,EACN5R,QAASogN,EAA6BnuN,SAErC+M,EAAK,gCAGV9M,EAAAA,GAAAA,GAAA,KAAGF,UAAU,eAAesW,IAAI,OAAMrW,SAAE+M,EAAK,2BAA4BojC,EAAK8oB,iBAGlFh5D,EAAAA,GAAAA,GAAA,OAAKF,UAAU,UAASC,UACtBC,EAAAA,GAAAA,GAACsiC,GAAAA,EAAQ,CAACtvB,KAAK,SAAS0M,QAAM,EAACtM,aAAW,EAACtF,QAASgoM,EAAiB/1M,SAClE+M,EAAK,yBAIZ9M,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,QAASw+G,EACT52I,QAAS63I,EACTzlI,SAAUwU,EACVpiB,UAAWxF,EAAK,QAAQ/M,SAEvB20B,GACC10B,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf5N,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAGftN,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQmqM,EACRjqM,QAASmqM,EACTlhM,KAAM/H,EAAK,2BACXu2B,aAAcv2B,EAAK,iBACnBw2B,eAAgBirL,EAChBhrL,sBAAoB,KAEtBvjC,EAAAA,GAAAA,GAACojC,GAAAA,EAAa,CACZ13B,OAAQuiN,EACRriN,QAASuiN,EACTt5M,KAAM/H,EAAK,oCAAqCojC,EAAK8oB,WACrD31B,aAAcv2B,EAAK,SACnBw2B,eAAgBorL,EAChBnrL,sBAAoB,KAEtBvjC,EAAAA,GAAAA,GAACwhK,GAAAA,EAAY,CACXh0J,SAAU8mM,EACVv7I,SAAUA,WC9JlB,IAAep6D,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAUkL,aACT,MACEoH,SAAUw3J,EACVj8G,MAAOk8G,IACLt8J,EAAAA,EAAAA,KAAezN,GAAQgqK,cAAgB,CAAC,EAG5C,MAAO,CACLp8J,MAHWmhC,EAAAA,EAAAA,KAAW/uC,EAAQkL,GAI9B4+J,mBACAC,mBAXc18J,EA7FkCmvM,EACpD5uM,OACArD,UACA2N,WACA4xJ,mBACAC,oBAEA,MAAM,cAAEK,IAAkB1/J,EAAAA,EAAAA,MACpBe,GAAO2mC,EAAAA,GAAAA,MAEb3oB,EAAAA,GAAAA,GAAe,CACbvR,WACAwR,OAAQnf,IAGV,MAAOsB,EAAOw+J,IAAYx/J,EAAAA,EAAAA,IAASY,EAAK,yBAA0B,CAAEQ,KAAM2B,GAAM/B,UACzErL,EAAOgjJ,IAAY34I,EAAAA,EAAAA,OACnBgjD,EAAO01F,IAAY14I,EAAAA,EAAAA,MAEpBwoB,EAAYy2I,IAAqBW,EAAAA,GAAqB3mB,WAEtD8mB,GAAoB3/J,EAAAA,EAAAA,IAAiBM,IACzC,MAAM,MAAEF,GAAUE,EAAE6X,cACdo0E,EAAWnsF,EAAMqiN,YAEvBrjD,EAAS7yE,GAELA,IAAansF,IACfE,EAAE6X,cAAc/X,MAAQmsF,MAItBuzE,EAAiBhB,GAAiBt+J,EAAK,4BAC3CoiD,IAAUpiD,EAAK,2BAA6BoiD,IAAUpiD,EAAK,6BACvDoiD,OACAxsD,GAGAwpK,GAAoB5/J,EAAAA,EAAAA,IAAgB,KACnCY,EAAM1L,OAINyN,GAELw8J,EAAc,CACZujD,oBAAqB//M,EAAKpP,GAC1BqN,QACArL,QACAkqH,cAAc,IATd64B,EAAS93I,EAAK,8BAalB,OACE9M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,aAAYC,UACzBC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,8BAA6BC,UAC1CH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,UAASC,SAAA,EACtBH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,uBAAsBC,SAAA,EACnCC,EAAAA,GAAAA,GAAC+lJ,GAAAA,EAAc,CACbv4I,SAAUq3I,EACV33I,MAAOJ,EAAK,eAEd9M,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRhB,MAAOQ,EACPM,SAAUy+J,EACVh/J,MAAOH,EAAK,aACZoiD,MAAOA,IAAUpiD,EAAK,2BACjBoiD,IAAUpiD,EAAK,6BAA+BoiD,OAAQxsD,IAG5D0pK,IACCpsK,EAAAA,GAAAA,GAAA,KAAGF,UAAU,QAAOC,SAAEqsK,QAI1BpsK,EAAAA,GAAAA,GAACimC,GAAAA,EAAoB,CACnBC,QAA0B,IAAjBh5B,EAAM1L,OACfsM,QAASo+J,EACThsJ,SAAUwU,EACVpiB,UAAWxF,EAAK,yBAAyB/M,SAExC20B,GACC10B,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,CAAC3a,MAAM,WAEf5N,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,6BCkLzB,IAAe3O,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IAGQ,CACL4tN,gBAHqBC,EAAAA,EAAAA,KAA4B7tN,MAFnCqN,EA7P0BygN,EAC5C5iN,SACAslI,gBACAizE,uBACA7E,0BACA9K,iBACAiD,qBACAxsM,UACA2N,WACA01M,qBAEA,OAAQp9E,GACN,KAAK0kE,EAAAA,GAAkBiH,QACrB,OAAQyR,GACN,IAAK,MACH,OACEjvN,EAAAA,GAAAA,GAACmzM,GAAS,CAERx1K,OAAQpxB,EACRX,QAASA,EACT2N,SAAUA,GAHLhN,GAMX,IAAK,OACH,OACEvM,EAAAA,GAAAA,GAACguN,GAAU,CAETrwL,OAAQpxB,EACRX,QAASA,EACT2N,SAAUA,GAHLhN,GAMX,IAAK,QACH,OACEvM,EAAAA,GAAAA,GAAC4+M,GAAW,CAEVryM,OAAQA,EACR4oM,eAAgBA,EAChBvpM,QAASA,EACT2N,SAAUA,GAAY,CACpBg9L,EAAAA,GAAkBC,gBAClBD,EAAAA,GAAkBG,WAClBH,EAAAA,GAAkB8I,iBAClB9I,EAAAA,GAAkBO,mBAClBP,EAAAA,GAAkBmN,kBAClBnN,EAAAA,GAAkBqN,2BAClBrN,EAAAA,GAAkBuN,qBAClBvN,EAAAA,GAAkB0C,gBAClB1C,EAAAA,GAAkBsM,mBAClBtM,EAAAA,GAAkB6Y,oBAClBv/L,SAASgiH,IAfNtlI,GAkBX,IAAK,UACH,OACEvM,EAAAA,GAAAA,GAACk1M,GAAa,CAEZ3oM,OAAQA,EACR4oM,eAAgBA,EAChBvpM,QAASA,EACT2N,SAAUA,GAAY,CACpBg9L,EAAAA,GAAkBkB,mBAClBlB,EAAAA,GAAkBO,mBAClBP,EAAAA,GAAkBoB,oBAClBpB,EAAAA,GAAkBG,WAClBH,EAAAA,GAAkBC,gBAClBD,EAAAA,GAAkB0C,gBAClB1C,EAAAA,GAAkBsM,mBAClBtM,EAAAA,GAAkB6Y,oBAClBv/L,SAASgiH,IAbNtlI,GAkBb,MAGF,KAAKgqM,EAAAA,GAAkBC,gBACrB,OACEx2M,EAAAA,GAAAA,GAAC45M,GAAqB,CACpBrtM,OAAQA,EACRgN,SAAUA,EACV3N,QAASA,IAIf,KAAK2qM,EAAAA,GAAkBG,WACrB,OACE12M,EAAAA,GAAAA,GAACq8M,GAAgB,CACf9vM,OAAQA,EACR4oM,eAAgBA,EAChB57L,SAAUA,EACV3N,QAASA,IAIf,KAAK2qM,EAAAA,GAAkB8I,iBACrB,OACEr/M,EAAAA,GAAAA,GAACujN,GAAsB,CACrBh3M,OAAQA,EACR4oM,eAAgBA,EAChBiD,mBAAoBA,EACpB7+L,SAAUA,GAAY,CACpBg9L,EAAAA,GAAkBmN,kBAClBnN,EAAAA,GAAkBqN,2BAClBrN,EAAAA,GAAkBuN,sBAClBj0L,SAASgiH,GACXjmI,QAASA,IAIf,KAAK2qM,EAAAA,GAAkBoB,oBACvB,KAAKpB,EAAAA,GAAkBmN,kBACrB,OACE1jN,EAAAA,GAAAA,GAAC27M,GAAsB,CACrBpvM,OAAQA,EACRgN,SAAUA,EACV3N,QAASA,IAIf,KAAK2qM,EAAAA,GAAkBqN,2BACrB,OACE5jN,EAAAA,GAAAA,GAAColN,GAAgC,CAC/B74M,OAAQA,EACR6rM,mBAAoBA,EACpBjD,eAAgBA,EAChB57L,SAAUA,GAAY,CACpBg9L,EAAAA,GAAkBuN,sBAClBj0L,SAASgiH,GACXjmI,QAASA,IAIf,KAAK2qM,EAAAA,GAAkBuN,qBACrB,OACE9jN,EAAAA,GAAAA,GAAC6kN,GAA0B,CACzBt4M,OAAQA,EACRu4M,qBAAsBA,EACtB7E,wBAAyBA,EACzB9K,eAAgBA,EAChB57L,SAAUA,EACV3N,QAASA,IAIf,KAAK2qM,EAAAA,GAAkBO,mBACrB,OACE92M,EAAAA,GAAAA,GAACm4M,GAAwB,CACvB5rM,OAAQA,EACR4oM,eAAgBA,EAChBiD,mBAAoBA,EACpB7+L,SAAUA,GAAY,CACpBg9L,EAAAA,GAAkB0C,gBAClB1C,EAAAA,GAAkBsM,mBAClBtM,EAAAA,GAAkB6Y,oBAClBv/L,SAASgiH,GACXjmI,QAASA,IAIf,KAAK2qM,EAAAA,GAAkBsH,mBACrB,OACE79M,EAAAA,GAAAA,GAAC69M,GAAkB,CACjBtxM,OAAQA,EACR4oM,eAAgBA,EAChB57L,SAAUA,EACV3N,QAASA,IAIf,KAAK2qM,EAAAA,GAAkBsM,mBACvB,KAAKtM,EAAAA,GAAkB0C,gBACrB,OACEj5M,EAAAA,GAAAA,GAACsgN,GAAsB,CACrB/zM,OAAQA,EACRg0M,WAAY1uE,IAAkB0kE,EAAAA,GAAkBsM,mBAChDrC,eAAgBsE,EAChB7E,wBAAyBA,EACzB9K,eAAgBA,EAChB57L,SAAUA,EACV3N,QAASA,IAIf,KAAK2qM,EAAAA,GAAkBkB,mBACvB,KAAKlB,EAAAA,GAAkBiJ,aACrB,OACEx/M,EAAAA,GAAAA,GAACmiN,GAAkB,CACjB51M,OAAQA,EACRgN,SAAUA,EACV3N,QAASA,IAGf,KAAK2qM,EAAAA,GAAkBS,QACrB,OACEh3M,EAAAA,GAAAA,GAAC4oN,GAAa,CACZr8M,OAAQA,EACRgN,SAAUA,EACV3N,QAASA,EACTupM,eAAgBA,IAGtB,KAAKoB,EAAAA,GAAkB6T,WACrB,OACEpqN,EAAAA,GAAAA,GAAC2lN,GAAY,CACXp5M,OAAQA,EACRgN,SAAUA,EACV3N,QAASA,EACTupM,eAAgBA,IAGtB,KAAKoB,EAAAA,GAAkB8C,eACrB,OACEr5M,EAAAA,GAAAA,GAACmiN,GAAkB,CACjB51M,OAAQA,EACR61M,UAAQ,EACR7oM,SAAUA,EACV3N,QAASA,EACTupM,eAAgBA,EAChBiD,mBAAoBA,IAI1B,KAAK7B,EAAAA,GAAkBK,UACrB,OACE52M,EAAAA,GAAAA,GAAC2sN,GAAe,CACdpgN,OAAQA,EACRgN,SAAUA,EACV3N,QAASA,IAGf,KAAK2qM,EAAAA,GAAkBiU,WACrB,OACExqN,EAAAA,GAAAA,GAAConN,GAAgB,CACf76M,OAAQA,EACRgN,SAAUA,EACV3N,QAASA,IAGf,KAAK2qM,EAAAA,GAAkBW,aACrB,OACEl3M,EAAAA,GAAAA,GAAC+rN,GAAkB,CACjBx/M,OAAQA,EACRgN,SAAUA,EACV3N,QAASA,SCjSbyjN,GAAO,OACPC,GAAc,UACdC,GAAc,eACdC,GAAM,YAEL,IAAKC,GAAQ,SAARA,GAAQ,OAARA,EAAAA,EAAQ,qBAARA,EAAAA,EAAQ,eAARA,EAAAA,EAAQ,2BAARA,EAAAA,EAAQ,aAARA,CAAQ,MAOpB,MAAMC,GAAgC,CACpC,CAACD,GAASE,SAAU,GACpB,CAACF,GAASG,MAAO,OACjB,CAACH,GAASI,YAAa,aACvB,CAACJ,GAASK,KAAM,OAGX,SAASC,GAAeC,GAE7B,OADAA,EAAaA,EAAW54J,QAAQ,MAAO,IACnCi4J,GAAKjsE,KAAK4sE,GACLP,GAASG,KAEdJ,GAAIpsE,KAAK4sE,GACJP,GAASK,IAEdR,GAAYlsE,KAAK4sE,IAAeT,GAAYnsE,KAAK4sE,GAC5CP,GAASI,WAEXJ,GAASE,OAClB,CCOA,MAAMxmF,GAA2B,CAC/B8mF,YAAa,GACbC,YAAa,GACbC,KAAM,GACNp0J,MAAO,GACPq0J,YAAa,GACbC,SAAU,GACVrvK,SAAU,GACVooF,MAAO,GACPhwE,MAAO,GACPk3J,SAAU,GACVN,WAAY,GACZO,WAAY,GACZC,OAAQ,GACRC,IAAK,GACLC,eAAgB,GAChBC,WAAY,GACZC,UAAU,EACVC,iBAAiB,EACjBC,WAAY,CAAC,EACbC,UAAW,EACXC,kBAAmB,IAGfC,GAAgDA,CAACl1J,EAAOp6D,KAC5D,OAAQA,EAAOT,MACb,IAAK,iBACH,MAAO,IACF66D,EACHk0J,YAAatuN,EAAO2nI,QACpBwnF,WAAY,IACP/0J,EAAM+0J,WACTb,iBAAavtN,IAGnB,IAAK,iBACH,MAAO,IACFq5D,EACHm0J,YAAavuN,EAAO2nI,QACpBwnF,WAAY,IACP/0J,EAAM+0J,WACTZ,iBAAaxtN,IAGnB,IAAK,aACH,MAAO,IACFq5D,EACHo0J,KAAMxuN,EAAO2nI,QACbwnF,WAAY,IACP/0J,EAAM+0J,WACTX,UAAMztN,IAGZ,IAAK,cACH,MAAO,IACFq5D,EACHA,MAAOp6D,EAAO2nI,QACdwnF,WAAY,IACP/0J,EAAM+0J,WACT/0J,WAAOr5D,IAGb,IAAK,gBACH,MAAO,IACFq5D,EACHq0J,YAAazuN,EAAO2nI,QAAQ35C,KAC5B+gI,eAAgB/uN,EAAO2nI,QAAQ15C,YAC/BkhI,WAAY,IACP/0J,EAAM+0J,WACTV,iBAAa1tN,IAGnB,IAAK,iBACH,MAAO,IACFq5D,EACHs0J,SAAU1uN,EAAO2nI,QACjBwnF,WAAY,IACP/0J,EAAM+0J,WACTT,cAAU3tN,IAGhB,IAAK,iBACH,MAAO,IACFq5D,EACH/a,SAAUr/C,EAAO2nI,QACjBwnF,WAAY,IACP/0J,EAAM+0J,WACT9vK,cAAUt+C,IAGhB,IAAK,cACH,MAAO,IACFq5D,EACHqtE,MAAOznI,EAAO2nI,QACdwnF,WAAY,IACP/0J,EAAM+0J,WACT1nF,WAAO1mI,IAGb,IAAK,cACH,MAAO,IACFq5D,EACH3C,MAAOz3D,EAAO2nI,QACdwnF,WAAY,IACP/0J,EAAM+0J,WACT13J,WAAO12D,IAGb,IAAK,iBACH,MAAO,IAAKq5D,EAAOu0J,SAAU3uN,EAAO2nI,SACtC,IAAK,mBACH,MAAO,IACFvtE,EACHi0J,WAAYruN,EAAO2nI,QACnBwnF,WAAY,IACP/0J,EAAM+0J,WACTd,gBAAYttN,IAGlB,IAAK,mBACH,MAAO,IACFq5D,EACHw0J,WAAY5uN,EAAO2nI,QACnBwnF,WAAY,IACP/0J,EAAM+0J,WACTP,gBAAY7tN,IAGlB,IAAK,mBACH,MAAO,IACFq5D,EACHy0J,OAAQ7uN,EAAO2nI,QACfwnF,WAAY,IACP/0J,EAAM+0J,WACTN,YAAQ9tN,IAGd,IAAK,gBACH,MAAO,IACFq5D,EACH00J,IAAK9uN,EAAO2nI,QACZwnF,WAAY,IACP/0J,EAAM+0J,WACTL,SAAK/tN,IAGX,IAAK,uBACH,MAAO,IACFq5D,EACH20J,eAAgB/uN,EAAO2nI,QACvBwnF,WAAY,IACP/0J,EAAM+0J,WACTJ,oBAAgBhuN,IAGtB,IAAK,mBACH,MAAO,IACFq5D,EACH40J,WAAYhvN,EAAO2nI,QACnBwnF,WAAY,IACP/0J,EAAM+0J,WACTH,gBAAYjuN,IAGlB,IAAK,iBACH,MAAO,IAAKq5D,EAAO60J,SAAUjvN,EAAO2nI,SACtC,IAAK,wBACH,MAAO,IAAKvtE,EAAO80J,gBAAiBlvN,EAAO2nI,SAC7C,IAAK,iBACH,OAAI3nI,EAAO2nI,QAAQ55C,QACV,IACF3zB,KACAp6D,EAAO2nI,QACVonF,eAAgB/uN,EAAO2nI,QAAQ55C,SAG5B,IAAK3zB,KAAUp6D,EAAO2nI,SAC/B,IAAK,gBACH,MAAO,IACFvtE,EACH+0J,WAAY,IACP/0J,EAAM+0J,cACNnvN,EAAO2nI,UAGhB,IAAK,eACH,MAAO,IACFvtE,EACHg1J,UAAWpvN,EAAO2nI,SAEtB,IAAK,0BACH,MAAO,IACFvtE,EACHi1J,kBAAmBrvN,EAAO2nI,SAE9B,IAAK,aACH,MAAO,IACFH,IAEP,QACE,OAAOptE,I,gBC7Ob,UAAgB,KAAO,WAAW,YAAc,WAAW,mBAAmB,WAAW,gBAAkB,WAAW,KAAO,WAAW,iBAAiB,WAAW,cAAgB,WAAW,uBAAuB,WAAW,oBAAsB,WAAW,aAAa,WAAW,UAAY,WAAW,kBAAkB,WAAW,cAAgB,WAAW,uBAAuB,WAAW,kBAAoB,WAAW,wBAAwB,WAAW,mBAAqB,WAAW,SAAW,WAAW,SAAW,WAAW,gBAAkB,WAAW,eAAiB,WAAW,eAAe,WAAW,YAAc,WAAW,SAAW,WAAW,OAAS,WAAW,YAAc,WAAW,gCAAgC,WAAW,0BAA4B,WAAW,+BAA+B,WAAW,yBAA2B,WAAW,eAAe,WAAW,YAAc,WAAW,KAAO,YC6Pp6B,IAAep9D,EAAAA,EAAAA,KApMgBuyN,EAC7BhkN,QACAf,cACAtK,QACAsvN,UACAC,iBACAC,eACAC,aACAz2I,gBACA8uD,WACA4nF,cACAR,YACAS,cACAC,qBACAC,mBACAC,mBACA11J,cAEA,MAAM,eAAE21J,IAAmB7lN,EAAAA,EAAAA,MAErBynC,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,KACPo+K,EAAgB/mN,QAAQ6+H,IAExB,SACJmoF,EAAQ,oBAAEC,EAAmB,aAAEC,GAC7Bb,GAAW,CAAC,GACV,cACJc,EAAa,gBACbC,EAAe,gBACfC,EAAe,KACf7kN,EAAI,MACJ8rD,EAAK,eACLg5J,GACGf,GAAgB,CAAC,EAEhBgB,GAAWjqN,EAAAA,EAAAA,IAAS0/L,EAAAA,EAAAA,IAAmBjmM,KAEvC,IAAEmS,IAAQs+M,EAAAA,GAAAA,GAAqC,CACnDC,aAAcznN,QAAQunN,KAGlBG,GAAkB7yN,EAAAA,EAAAA,KAAa8yN,IACnC9oF,EAAU,CAAEzoI,KAAM,eAAgBooI,QAAS0oF,EAAe/+M,KAAK4a,IAAI4kM,EAAMT,GAAgBS,MACxF,CAAC9oF,EAAUqoF,IAERU,GAA2B/yN,EAAAA,EAAAA,KAAY,KAC3CiyN,EAAe,CAAEh7E,KAAM86E,GAAkBlwN,OAASmxN,EAAAA,GAAYC,cAAgBD,EAAAA,GAAYE,gBACzF,CAACnB,GAAkBlwN,OAAQowN,IAExBkB,GAA6BnzN,EAAAA,EAAAA,KAAY,KAC7CiyN,EAAe,CAAEh7E,KAAM+7E,EAAAA,GAAYI,iBAClC,CAACnB,IAEEoB,GAA4BrzN,EAAAA,EAAAA,KAAY,KAC5CiyN,EAAe,CAAEh7E,KAAM+7E,EAAAA,GAAYM,aAClC,CAACrB,IAyDJ,OACEhyN,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOygB,KAAKj+B,SAAA,EAC1BH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOpR,YAAYpM,SAAA,CAChCsyN,IACCryN,EAAAA,GAAAA,GAAA,OACEgU,IAAKA,EACLlU,UAAWyd,GAAO21M,gBAClBvvN,IAAK0uN,EACL7uN,WAAW,EACXgG,MAAO3H,EAAOwJ,YAAY7B,MAC1BK,OAAQhI,EAAOwJ,YAAYxB,OAC3Bye,IAAI,MAGN+pM,GAAYxwN,IACZ7B,EAAAA,GAAAA,GAAC46C,GAAAA,EAAQ,CACPpxC,MAAO3H,EAAMwJ,YAAY7B,MACzBK,OAAQhI,EAAMwJ,YAAYxB,OAC1B/J,UAAWyd,GAAO21M,gBAClBC,kBAAgB,KAGpBvzN,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAO1I,KAAK9U,SAAA,EAC1BC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAO61M,cAAcrzN,SAAEmN,IACrCf,IACCnM,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAO81M,oBAAoBtzN,UACxCg0B,EAAAA,GAAAA,GAAW5nB,EAAa,CAAC,KAAM,QAAS,mBAKjDvM,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAO+1M,UAAUvzN,SAAA,CAC9BoxN,EAAQoC,OAAO//M,KAAK7E,GACnB6kN,GAAkB1mN,EAAM6B,EAAK1B,MAAO0B,EAAKsrC,OAAQk3K,EAAQ/rI,YAE1DgsI,GAAkBA,EAAe59M,KAAK7E,GACrC6kN,GAAkB1mN,EAAM6B,EAAK1B,MAAO0B,EAAKsrC,OAAQk3K,EAAQ/rI,YAE1D2sI,GAAuBA,EAAoBvwN,OAAS,IA3FvD5B,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOk2M,cAAc1zN,SAAA,EACnCC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOm2M,mBAAmB3zN,SACvCmN,KAEHlN,EAAAA,GAAAA,GAAA,OAAAD,UACGwlF,EAAAA,GAAAA,IAAez4E,EAAMikN,EAAYI,EAAQ/rI,gBAG9CplF,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOo2M,SAAS5zN,SAC7BgyN,EAAqBv+M,KAAKogN,IACzB5zN,EAAAA,GAAAA,GAAA,OAEEF,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAOs2M,SAAUD,IAAQ7C,GAAaxzM,GAAOu2M,iBACvEhmN,QAAS67H,EAAW,IAAM6oF,EAAgBoB,IAAQ7C,EAAY,EAAI6C,QAAOlxN,EAAU3C,UAElFwlF,EAAAA,GAAAA,IAAez4E,EAAM8mN,EAAKzC,EAAQ/rI,SAAU,CAAE2uI,qBAAqB,KAJ/DH,eAgFKlxN,IAAf4uN,GACCkC,GAAkB1mN,EAAM0mC,EAAQ,wBAAyB89K,EAAYH,EAAQ/rI,UAAU,OAG3FxlF,EAAAA,GAAAA,IAAA,OAAKE,UAAWyd,GAAOy2M,YAAYj0N,SAAA,EAC/B4xN,GAAoBsC,GAAmB,CACvC/mN,MAAO+kN,GAAiBP,IAAmB,GAAGxkN,MAC9CD,MAAOumC,EAAQ,yBACfxgC,KAAM,OACNlF,QAAS+jN,EAAgBa,OAA2BhwN,IAErDwvN,GAAmB+B,GAAmB,CACrC/mN,MAAOglN,EACPjlN,MAAOumC,EAAQ,2BACfqwF,YAAY3tH,EAAAA,GAAAA,GAAeqH,GAAO22M,SAAU32M,GAAO20M,EAAgB3oK,mBAEnEioK,IAAiBK,GAAiBM,IAAqB8B,GAAmB,CAC1E/mN,MAAOilN,EACPllN,MAAOumC,EAAQ,0BACfxgC,KAAM,WACNlF,QAAS+jN,EAAgBiB,OAA6BpwN,IAEvD4K,GAAQ2mN,GAAmB,CAC1B/mN,MAAOI,EACPL,MAAOumC,EAAQ,uBACfxgC,KAAM,SAEPomD,GAAS66J,GAAmB,CAC3B/mN,MAAOksD,EACPnsD,MAAOumC,EAAQ,8BACfxgC,KAAM,WAENy+M,IAAwBI,GAAiBO,IAAoB6B,GAAmB,CAChF/mN,MAAOklN,EACPnlN,MAAOumC,EAAQ,iCACfxgC,KAAM,QACNlF,QAAS+jN,EAAgBmB,OAA4BtwN,IAEtDovN,IA1FYx6M,EA0FUw6M,GAxFzB9xN,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAnBN,SAAuBqK,EAAasa,GAClC,MACMuiM,EADa3gL,EAAQ,iCAAkCyoB,GAC1B+e,MAAM,KACzC,OACEp7E,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,CACGo0N,EAAgB,IACjBn0N,EAAAA,GAAAA,GAAC+5G,GAAAA,EAAQ,CACPziG,IAAKA,EACLzC,KAAMs/M,EAAgB,GACtBviM,MAAOA,IAERuiM,EAAgB/1K,MAAM,KAG7B,CAKag2K,CAAc98M,EAAKk8B,EAAQ5hB,OAClCtkB,KAAK,eACL27B,QAASn+B,QAAQ+vE,GACjB/6E,UAAWyd,GAAO82M,YAClB7qL,SAAU,EACVupB,QAASw+J,WARf,IAAmBj6M,KAkGrB,SAASk8M,GACP1mN,EAAcI,EAAeR,EAAe04E,EAAkB6K,GAAO,GAErE,OACErwF,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GAAeqH,GAAOk2M,cAAexjI,GAAQ1yE,GAAO+2M,mBAAmBv0N,SAAA,EACrFC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOm2M,mBAAmB3zN,SACvCmN,KAEHlN,EAAAA,GAAAA,GAAA,OAAAD,UACGwlF,EAAAA,GAAAA,IAAez4E,EAAMJ,EAAO04E,OAIrC,CAEA,SAAS6uI,IAAmB,MAC1B/mN,EAAK,MACLD,EAAK,KACL+F,EAAI,WACJ6wH,EAAU,QACV/1H,IAQA,MAAMoH,EAAcpK,QAAQoC,GAASD,IAAUC,GAE/C,OACEtN,EAAAA,GAAAA,IAAC0iC,GAAAA,EAAQ,CACPxiC,UAAWyd,GAAOwrB,KAClBg1E,QAAM,EACNx7E,UAAWrtB,EACXlC,KAAMA,EACNwvB,UAAW10B,EACXA,QAASA,EACT20B,YAAaohG,IAAc7jI,EAAAA,GAAAA,GAAA,KAAGF,WAAWoW,EAAAA,GAAAA,GAAe,OAAQ2tH,KAAgB9jI,SAAA,EAEhFC,EAAAA,GAAAA,GAAA,OAAKF,UAAWyd,GAAOg3M,0BAA0Bx0N,SAC9CmN,GAASD,IAEXC,GAASD,IAAUC,IAClBlN,EAAAA,GAAAA,GAAA,KAAGF,UAAWyd,GAAOi3M,yBAAyBz0N,SAC3CkN,MAKX,CC7QA,MAmDA,IAAetO,EAAAA,EAAAA,KAnDsB81N,EACnCn9M,MAAKo9M,aAAY9oN,UAAS+oN,0BAE1B,MAAM,iBAAExzJ,IAAqBp1D,EAAAA,EAAAA,MAEvBe,GAAOC,EAAAA,EAAAA,KAEPy6D,GAAgB7nE,EAAAA,EAAAA,KAAakvB,IACjC,IACE,MAAMpW,EAAOmuD,KAAKa,MAAM54C,EAAMpW,OACxB,UAAEquD,EAAS,UAAEC,GAActuD,EACjC,OAAQquD,GACN,IAAK,uBACH,IAAK4tJ,EAAY,CACf,MAAM3sJ,EAAUe,EAAAA,IAAkB/B,EAAUgC,UAC5C5H,EAAiB,CAAE7pD,IAAKywD,GAC1B,CACAn8D,IACA,MACF,IAAK,sBACC+oN,GACFA,EAAoB5tJ,GAEtB,MACF,QACEn7D,IAGN,CAAE,MAAOnF,GACP,IAED,CAACmF,EAAS8oN,EAAYvzJ,EAAkBwzJ,IAO3C,OALArqN,EAAAA,EAAAA,KAAU,KACRK,OAAOmL,iBAAiB,UAAW0xD,GAC5B,IAAM78D,OAAOoL,oBAAoB,UAAWyxD,KAClD,CAACA,KAGFxnE,EAAAA,GAAAA,GAAA,OAAKF,UAAU,iBAAgBC,UAC7BC,EAAAA,GAAAA,GAAA,UACE2D,IAAK2T,EACLpK,MAAOJ,EAAK,kCACZijE,MAAM,UACND,QAAQ,gFACRhwE,UAAU,iCCblB,IAAenB,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAAsBrN,IACxC,MAAM,QAAE2+D,IAAYlxD,EAAAA,EAAAA,KAAezN,GACnC,MAAO,CACLq6G,SAAU17C,EAAQ9Q,OAAO0lK,WACzB95G,aAAcz5G,EAAOu5G,cAAcC,KACnC62G,iBAAyC,YAAvB1xJ,EAAQgmD,MAAM9kH,KAAqB8+D,EAAQgmD,KAAK0rG,sBAAmBhvN,KALrEgM,EAxC+BmmN,EACjDt7M,WACAmiG,WACA3/C,QACA21J,mBACA52G,eACAg6G,uBAEA,MAAM,kBAAEC,IAAsBhpN,EAAAA,EAAAA,MAExBynC,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,MAEN0nE,EAAoBC,IAAyBlvG,EAAAA,EAAAA,KAAS,GACvD8oN,GAAWltN,EAAAA,EAAAA,KAAQ,IAChB4pN,GAAkBlwN,QAAUu6D,EAAMi1J,kBACrCU,EAAiBngL,MAAK,EAAG1xC,QAASA,IAAOk8D,EAAMi1J,qBAAoB9jN,WACnExK,GACH,CAACgvN,EAAkB31J,EAAMi1J,oBAE5B,OACEpxN,EAAAA,GAAAA,IAAA,OAAKE,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,GAAAA,GAACpB,GAAAA,EAAc,CAACE,OAAK,EAACD,kBAAmBs8G,KAEzCn7G,EAAAA,GAAAA,GAACw7G,GAAAA,EAAY,CACXtsD,MAAOwsD,GAAY5uG,EAAK6uG,YAAYD,GACpCb,KAAMC,EACN3uG,YAAaqnC,EAAQ,6BAA8BwhL,GACnDzpK,YAAa/X,EAAQ,YACrBooE,WAAYm5G,EACZt5G,kBAAkB,EAClBI,iBAAkBtiG,EAClB1a,kBAAmBs8G,EACnBW,2BAA4BV,EAC5B65G,cAAeH,W,gBCvDR,SAASI,GACtBlhN,EAAmCmhN,EAHZ,MAKvB7qN,EAAAA,EAAAA,KAAU,KACJiL,EAAAA,IAIJ3K,YAAW,MACT+hC,EAAAA,EAAAA,KAAe,KACb34B,EAAIzK,SAASmwD,aAEdy7J,KACF,CAACnhN,EAAKmhN,GACX,C,gIC+CA,IAAex2N,EAAAA,EAAAA,KAzCiBy2N,EAAG1oN,QAAOwiD,QAAO1hD,eAC/C,MAAMV,GAAOC,EAAAA,EAAAA,KACPsoN,GAAgBjsN,EAAAA,EAAAA,MAEtB8rN,GAAuBG,GAEvB,MAAOC,EAAUC,IAAerpN,EAAAA,EAAAA,IAAiBujN,GAASE,UAC1DrlN,EAAAA,EAAAA,KAAU,KACR,MAAMkrN,EAAczF,GAAerjN,GACnC6oN,EAAYC,KAEX,IAEH,MAAMnuI,GAAe1nF,EAAAA,EAAAA,KAAaiN,IAChC,MAAMisF,EC9BH,SAA0B3vD,GAE/B,MAAM5V,GADN4V,EAAQA,EAAMkuB,QAAQ,SAAU,KACZkjC,MAAM,WAC1B,OAAOhnE,EAAQA,EAAM5M,KAAK,KAAO,EACnC,CD0BqB+uM,CAAiB7oN,EAAEC,OAAOH,OACrC8oN,EAAczF,GAAenjN,EAAEC,OAAOH,OAC5C6oN,EAAYC,GACZhoN,EAASqrF,KACR,CAACrrF,IAEEkoN,EAuBR,SAAqBJ,GACnB,OAAQA,GACN,KAAK7F,GAASI,WACZ,OAAO7vN,EAAAA,GAAAA,GAAA,OAAK2D,IAAKgyN,GAAoBnyN,WAAW,EAAO8kB,IAAI,KAC7D,KAAKmnM,GAASG,KACZ,OAAO5vN,EAAAA,GAAAA,GAAA,OAAK2D,IAAKiyN,GAAcpyN,WAAW,EAAO8kB,IAAI,KACvD,KAAKmnM,GAASK,IACZ,OAAO9vN,EAAAA,GAAAA,GAAA,OAAK2D,IAAKkyN,GAAaryN,WAAW,EAAO8kB,IAAI,KACtD,QACE,OAEN,CAlCmBwtM,CAAYR,GAE7B,OACE11N,EAAAA,GAAAA,IAAA,OAAKE,UAAU,YAAWC,SAAA,EACxBC,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRsG,IAAKqhN,EACLpoN,MAAOH,EAAK,qBACZU,SAAU65E,EACV36E,MAAOA,EACPqrD,UAAU,UACVj4D,UAAWw1N,EAAW,kBAAoB,GAC1CpmK,MAAOA,EACP1lB,SAAU,EACV80C,UAzCuB,GA0CvBj1C,2BAAyB,KAE3BrpC,EAAAA,GAAAA,GAAA,QAAMF,UAAU,cAAaC,SAAE21N,UEpBrC,IAAe/2N,EAAAA,EAAAA,KA3BmBo3N,EAAGrpN,QAAOwiD,QAAO1hD,eACjD,MAAMV,GAAOC,EAAAA,EAAAA,KAEPs6E,GAAe1nF,EAAAA,EAAAA,KAAaiN,IAChC,MAAMisF,EAAWjsF,EAAEC,OAAOH,MAEtBA,EAAMspN,SAAS,MAAQtpN,EAAMlL,OAASq3F,EAASr3F,OACjDgM,EAASqrF,GAETrrF,ED1BC,SAA0B07B,GAE/B,MAAM5V,GADN4V,EAAQA,EAAMkuB,QAAQ,SAAU,IAAIhZ,MAAM,EAAG,IACzBk8C,MAAM,WAO1B,OANIhnE,IAAQ,IAAMjO,OAAOiO,EAAM,IAAM,KACnCA,EAAM,GAAK,MAETA,IAAQ,IAA0B,IAApBA,EAAM,GAAG9xB,SAAiB8xB,EAAM,KAChDA,EAAM,GAAK,IAENA,EAAQA,EAAM5M,KAAK,KAAO,EACnC,CCgBeuvM,CAAiBrpN,EAAEC,OAAOH,UAEpC,CAACc,EAAUd,IAEd,OACE1M,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRT,MAAOH,EAAK,yBACZU,SAAU65E,EACV36E,MAAOA,EACPwiD,MAAOA,EACP6I,UAAU,UACVvuB,SAAU,EACV80C,UA7BmB,EA8BnBj1C,2BAAyB,OCsI/B,IAAe1qC,EAAAA,EAAAA,KA/ImBk0N,EAChC92J,QACAm6J,qBACAC,qBACAC,cACAC,UACA/9J,cACAqxE,eAEA,MAAM2sF,GAAmBltN,EAAAA,EAAAA,OAEzBkB,EAAAA,EAAAA,KAAU,KACJgsN,EAAiB/sN,SAChB+sN,EAAiB/sN,QAAQmD,QAAUqvD,EAAM20J,iBAC5C4F,EAAiB/sN,QAAQmD,MAAQqvD,EAAM20J,kBAExC,CAAC30J,EAAM20J,iBAEV,MAAM6F,GAAyB52N,EAAAA,EAAAA,KAAa+M,IAC1Ci9H,EAAS,CAAEzoI,KAAM,mBAAoBooI,QAAS58H,MAC7C,CAACi9H,IAEE6sF,GAAyB72N,EAAAA,EAAAA,KAAaiN,IAC1C+8H,EAAS,CAAEzoI,KAAM,mBAAoBooI,QAAS18H,EAAEC,OAAOH,MAAM+pN,kBAC5D,CAAC9sF,IAEE+sF,GAAqB/2N,EAAAA,EAAAA,KAAa+M,IACtCi9H,EAAS,CAAEzoI,KAAM,mBAAoBooI,QAAS58H,MAC7C,CAACi9H,IAEEgtF,GAAkBh3N,EAAAA,EAAAA,KAAaiN,IACnC,MAAMisF,EAAWjsF,EAAEC,OAAOH,MAAM0qD,QAAQ,UAAW,IACnDuyE,EAAS,CAAEzoI,KAAM,gBAAiBooI,QAASzwC,MAC1C,CAAC8wC,IAEEitF,GAAsBj3N,EAAAA,EAAAA,KAAaiN,IACvC+8H,EAAS,CAAEzoI,KAAM,uBAAwBooI,QAAS18H,EAAEC,OAAOH,UAC1D,CAACi9H,IAEEktF,GAA8Bl3N,EAAAA,EAAAA,KAAaiN,IAC/C+8H,EAAS,CAAEzoI,KAAM,mBAAoBooI,QAAS18H,EAAEC,OAAOH,UACtD,CAACi9H,IAEEmtF,GAA8Bn3N,EAAAA,EAAAA,KAAaiN,IAC/C+8H,EAAS,CAAEzoI,KAAM,wBAAyBooI,QAAS18H,EAAEC,OAAOH,UAC3D,CAACi9H,IAEEn2F,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,MAEP,WAAEq9K,EAAa,CAAC,GAAM/0J,EAE5B,OACE/7D,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,UAC1BH,EAAAA,GAAAA,IAAA,QAAAG,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,uBACbxzC,EAAAA,GAAAA,GAACo1N,GAAS,CACR5nN,SAAU+oN,EACV7pN,MAAOqvD,EAAMi0J,WACb9gK,MAAO4hK,EAAWd,YAAcljN,EAAK6uG,YAAYm1G,EAAWd,cAE7DmG,IACCn2N,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRT,MAAOumC,EAAQ,8CACfhmC,SAAUgpN,EACV9pN,MAAOqvD,EAAMw0J,WACbx4J,UAAU,OACVvuB,SAAU,EACV0lB,MAAO4hK,EAAWP,YAAczjN,EAAK6uG,YAAYm1G,EAAWP,eAGhE3wN,EAAAA,GAAAA,IAAA,WAASE,UAAU,gBAAeC,SAAA,EAChCC,EAAAA,GAAAA,GAAC+1N,GAAW,CACVrpN,MAAOqvD,EAAMy0J,OACbhjN,SAAUkpN,EACVxnK,MAAO4hK,EAAWN,QAAU1jN,EAAK6uG,YAAYm1G,EAAWN,WAE1DxwN,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRT,MAAOumC,EAAQ,yBACfhmC,SAAUmpN,EACVjqN,MAAOqvD,EAAM00J,IACb14J,UAAU,UACVumB,UAAW,EACX90C,SAAU,EACV0lB,MAAO4hK,EAAWL,KAAO3jN,EAAK6uG,YAAYm1G,EAAWL,KACrDpnL,2BAAyB,OAG5B+sL,GAAeC,GACdr2N,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,gCACX9wC,GACJ9C,EAAAA,GAAAA,IAAA,WAASE,UAAU,gBAAeC,SAAA,CAC/Bq2N,IACCp2N,EAAAA,GAAAA,GAAC+2N,GAAAA,EAAM,CACL9pN,MAAOumC,EAAQ,0BACfhmC,SAAUopN,EACVlqN,MAAOqvD,EAAM20J,eACbsG,SAAUlsN,SAAQ,GAClBjL,GAAG,kBACHqvD,MAAO4hK,EAAWJ,gBAAkB5jN,EAAK6uG,YAAYm1G,EAAWJ,gBAChElnL,SAAU,EACVx1B,IAAKsiN,EAAiBv2N,SAGpBu4D,EAAY9kD,KAAI,EAAGo8E,cAAatiF,WAC9BtN,EAAAA,GAAAA,GAAA,UACE0M,MAAOkjF,EACP9vF,UAAU,cACV2N,SAAUmiF,IAAgB7zB,EAAM20J,eAAe3wN,SAE9C6vF,GAAetiF,QAMzB+oN,IACCr2N,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRT,MAAOumC,EAAQ,iCACfhmC,SAAUqpN,EACVnqN,MAAOqvD,EAAM40J,WACb54J,UAAU,OACVvuB,SAAU,EACV80C,UAAW,GACXpvB,MAAO4hK,EAAWH,YAAc7jN,EAAK6uG,YAAYm1G,EAAWH,kBAIlE3wN,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBC,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOumC,EAAQ,qCACfvK,UAASitL,GAAqBn6J,EAAM80J,gBACpCrnL,SAAU,EACVilD,SAAUj7C,EAAQ0iL,EAAqB,gCAAkC,qBACzE1oN,SAAUspN,EACV52M,UAAWg2M,cC3GvB,IAAev3N,EAAAA,EAAAA,KAtC+Bs4N,EAC5Cl7J,QACA21J,mBACA/nF,WACAutF,qBAEA,MAAMpqN,GAAOC,EAAAA,EAAAA,KAEPQ,GAAUzF,EAAAA,EAAAA,KAAQ,IACf4pN,GAAkBlwN,OACrBkwN,EAAiBl+M,KAAI,EAAG3T,KAAIqN,YAAY,CAAGD,MAAOC,EAAOR,MAAO7M,MAChEykC,GAAAA,GACH,CAACotL,IAEElkN,GAAW7N,EAAAA,EAAAA,KAAa+M,IAC5Bi9H,EAAS,CAAEzoI,KAAM,0BAA2BooI,QAAS58H,MACpD,CAACi9H,IAEJ,OACE3pI,EAAAA,GAAAA,GAAA,OAAKF,UAAU,cAAaC,UAC1BH,EAAAA,GAAAA,IAAA,QAAAG,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAAD,SAAK+M,EAAK,uBAEV9M,EAAAA,GAAAA,GAACqN,GAAAA,EAAU,CACTC,KAAK,oBACLC,QAASA,EACTE,SAAUsuD,EAAMi1J,kBAChBxjN,SAAUA,KAGZxN,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAACE,QAAM,EAACC,QAASopN,EAAen3N,SACpC+M,EAAK,0CCehB,IAAenO,EAAAA,EAAAA,KAzCgBs0N,EAC7Bl3J,QACAo7J,kBACA/xI,WACAukD,eAEA,MAAMn2F,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,MAEbnpC,EAAAA,EAAAA,KAAU,KACH6sN,GAAoBA,EAAgB31N,SAAUu6D,EAAMu0J,UAGzD3mF,EAAS,CAAEzoI,KAAM,iBAAkBooI,QAAS6tF,EAAgB,GAAGt3N,OAC9D,CAACs3N,EAAiBp7J,EAAMu0J,SAAU3mF,IAErC,MAAMytF,GAAuBz3N,EAAAA,EAAAA,KAAa+M,IACxCi9H,EAAS,CAAEzoI,KAAM,iBAAkBooI,QAAS58H,MAC3C,CAACi9H,IAEEp8H,GAAUzF,EAAAA,EAAAA,KAAQ,IAAOqvN,EAAgB3jN,KAAI,EAAG3T,GAAI6M,EAAOQ,MAAOD,EAAOgtC,aAAa,CAC1FhtC,QACAwhF,UAAUlJ,EAAAA,GAAAA,IAAez4E,EAAMmtC,EAAQmrC,GACvC14E,aACI,CAACyqN,EAAiB/xI,EAAUt4E,IAElC,OACE9M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,WAAUC,UACvBH,EAAAA,GAAAA,IAAA,QAAAG,SAAA,EACEC,EAAAA,GAAAA,GAAA,KAAAD,SAAIyzC,EAAQ,4BACZxzC,EAAAA,GAAAA,GAACqN,GAAAA,EAAU,CACTC,KAAK,mBACLC,QAASA,EACTC,SAAU4pN,EACV3pN,SAAUsuD,EAAMu0J,mBC4J1B,IAAe3xN,EAAAA,EAAAA,KA1LoBo0N,EACjCh3J,QACAs7J,YACAC,YACAC,WACA/F,cACAl5J,cACAqxE,eAEA,MAAM5wE,GAAW3vD,EAAAA,EAAAA,MACXouN,GAAWpuN,EAAAA,EAAAA,MACXktN,GAAmBltN,EAAAA,EAAAA,OAEzBkB,EAAAA,EAAAA,KAAU,KACJgsN,EAAiB/sN,SAChB+sN,EAAiB/sN,QAAQmD,QAAUqvD,EAAMq0J,cAC5CkG,EAAiB/sN,QAAQmD,MAAQqvD,EAAMq0J,eAExC,CAACr0J,EAAMq0J,cAEV,MAAM58K,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,KAEbyhL,GAAuBn8J,GAEvB,MAAM0+J,GAAuB93N,EAAAA,EAAAA,KAAaiN,IACxC+8H,EAAS,CAAEzoI,KAAM,iBAAkBooI,QAAS18H,EAAEC,OAAOH,UACpD,CAACi9H,IAEE+tF,GAAuB/3N,EAAAA,EAAAA,KAAaiN,IACxC+8H,EAAS,CAAEzoI,KAAM,iBAAkBooI,QAAS18H,EAAEC,OAAOH,UACpD,CAACi9H,IAEEguF,GAAmBh4N,EAAAA,EAAAA,KAAaiN,IACpC+8H,EAAS,CAAEzoI,KAAM,aAAcooI,QAAS18H,EAAEC,OAAOH,UAChD,CAACi9H,IAEEiuF,GAAoBj4N,EAAAA,EAAAA,KAAaiN,IACrC+8H,EAAS,CAAEzoI,KAAM,cAAeooI,QAAS18H,EAAEC,OAAOH,UACjD,CAACi9H,IAEEitF,GAAsBj3N,EAAAA,EAAAA,KAAaiN,IACvC+8H,EAAS,CAAEzoI,KAAM,gBAAiBooI,QAAShxE,EAAY/mB,MAAMm+C,GAAYA,EAAQC,OAAS/iF,EAAEC,OAAOH,YAClG,CAAC4rD,EAAaqxE,IAEXkuF,GAAuBl4N,EAAAA,EAAAA,KAAaiN,IACxC+8H,EAAS,CAAEzoI,KAAM,iBAAkBooI,QAAS18H,EAAEC,OAAOH,UACpD,CAACi9H,IAEEmuF,GAAuBn4N,EAAAA,EAAAA,KAAaiN,IACxC+8H,EAAS,CAAEzoI,KAAM,iBAAkBooI,QAAS18H,EAAEC,OAAOH,UACpD,CAACi9H,IAEEouF,GAAoBp4N,EAAAA,EAAAA,KAAaiN,IACrC+8H,EAAS,CAAEzoI,KAAM,cAAeooI,QAAS18H,EAAEC,OAAOH,UACjD,CAACi9H,IAEE/vE,GAAoBj6D,EAAAA,EAAAA,KAAaiN,IACrC,IAAI,MAAEF,GAAUE,EAAEC,OAClBH,EAAQ,IAAIA,EAAM0qD,QAAQ,MAAO,MAC7BogK,EAASjuN,UACXiuN,EAASjuN,QAAQmD,MAAQA,GAE3Bi9H,EAAS,CAAEzoI,KAAM,cAAeooI,QAAS58H,MACxC,CAACi9H,IAEEquF,GAAuBr4N,EAAAA,EAAAA,KAAaiN,IACxC+8H,EAAS,CAAEzoI,KAAM,iBAAkBooI,QAAS18H,EAAEC,OAAOH,UACpD,CAACi9H,KAEE,WAAEmnF,GAAe/0J,EACvB,OACE/7D,EAAAA,GAAAA,GAAA,OAAKF,UAAU,eAAcC,UAC3BH,EAAAA,GAAAA,IAAA,QAAAG,SAAA,CACGyxN,GACC5xN,EAAAA,GAAAA,IAAA,OAAAG,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,6BACbxzC,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRsG,IAAK+kD,EACL9rD,MAAOumC,EAAQ,sCACfhmC,SAAUiqN,EACV/qN,MAAOqvD,EAAMk0J,YACbl4J,UAAU,OACVvuB,SAAU,EACV0lB,MAAO4hK,EAAWb,aAAenjN,EAAK6uG,YAAYm1G,EAAWb,gBAE/DjwN,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRT,MAAOumC,EAAQ,sCACfhmC,SAAUkqN,EACVhrN,MAAOqvD,EAAMm0J,YACbn4J,UAAU,OACVvuB,SAAU,EACV0lB,MAAO4hK,EAAWZ,aAAepjN,EAAK6uG,YAAYm1G,EAAWZ,gBAE/DlwN,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRT,MAAOumC,EAAQ,kCACfhmC,SAAUmqN,EACVjrN,MAAOqvD,EAAMo0J,KACbp4J,UAAU,OACVvuB,SAAU,EACV0lB,MAAO4hK,EAAWX,MAAQrjN,EAAK6uG,YAAYm1G,EAAWX,SAExDnwN,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRT,MAAOumC,EAAQ,mCACfhmC,SAAUoqN,EACVlrN,MAAOqvD,EAAMA,MACbhE,UAAU,OACV7I,MAAO4hK,EAAW/0J,OAASjvD,EAAK6uG,YAAYm1G,EAAW/0J,UAEzD/7D,EAAAA,GAAAA,GAAC+2N,GAAAA,EAAM,CACL9pN,MAAOumC,EAAQ,0BACfhmC,SAAUopN,EACVlqN,MAAOqvD,EAAMq0J,YACb4G,SAAUlsN,SAAQ,GAClBjL,GAAG,mBACHqvD,MAAO4hK,EAAWV,aAAetjN,EAAK6uG,YAAYm1G,EAAWV,aAC7Dp8M,IAAKsiN,EACL9sL,SAAU,EAAEzpC,SAEXu4D,EAAY9kD,KAAI,EAAGo8E,cAAatiF,OAAMqiF,WACrC3vF,EAAAA,GAAAA,GAAA,UACE0M,MAAOijF,EACP7vF,UAAU,cACV2N,SAAUkiF,IAAS5zB,EAAMq0J,YAAYrwN,SAEpC6vF,GAAetiF,SAKtBtN,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRT,MAAOumC,EAAQ,iCACfhmC,SAAUqqN,EACVnrN,MAAOqvD,EAAMs0J,SACbt4J,UAAU,OACVvuB,SAAU,EACV0lB,MAAO4hK,EAAWT,UAAYvjN,EAAK6uG,YAAYm1G,EAAWT,oBAG5D3tN,EACH60N,GAAYF,GAAaC,GACxBt3N,EAAAA,GAAAA,GAAA,MAAAD,SAAKyzC,EAAQ,kCACX9wC,EACH60N,IACCv3N,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRT,MAAOumC,EAAQ,uBACfhmC,SAAUsqN,EACVprN,MAAOqvD,EAAM/a,SACb+W,UAAU,OACVvuB,SAAU,EACV0lB,MAAO4hK,EAAW9vK,UAAYl0C,EAAK6uG,YAAYm1G,EAAW9vK,YAG7Dq2K,IACCr3N,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRT,MAAOumC,EAAQ,mCACfhmC,SAAUuqN,EACVrrN,MAAOqvD,EAAMqtE,MACbrxE,UAAU,QACVvuB,SAAU,EACV0lB,MAAO4hK,EAAW1nF,OAASt8H,EAAK6uG,YAAYm1G,EAAW1nF,SAG1DkuF,IACCt3N,EAAAA,GAAAA,GAAC0N,EAAAA,EAAS,CACRT,MAAOumC,EAAQ,8BACfhmC,SAAUosD,EACVltD,MAAOqvD,EAAM3C,MACbrB,UAAU,MACVvuB,SAAU,EACV0lB,MAAO4hK,EAAW13J,OAAStsD,EAAK6uG,YAAYm1G,EAAW13J,OACvDplD,IAAKwjN,KAGTx3N,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACP7lD,MAAOumC,EAAQ,uBACfi7C,SAAUj7C,EAAQ,2BAClBvK,QAASn+B,QAAQixD,EAAM60J,UACvBpnL,SAAU,EACVh8B,SAAUwqN,YCpKdC,GAAmB,SACnBC,GAAkB,cAElBC,GAAsB,IAAI3qI,IAAI,CAACyqI,GAAkBC,KAwjBvD,IAAev5N,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM,KACJ2kH,EAAI,KACJ4wB,EAAI,gBACJugF,EAAe,MACfjoK,EAAK,kBACLkpK,EAAiB,aACjBl4J,EAAY,UACZoK,EAAS,kBACT+tJ,EAAiB,uBACjBC,EAAsB,kBACtBC,EAAiB,gBACjBC,EAAe,IACflhN,IACExI,EAAAA,EAAAA,KAAezN,GAAQ2+D,SAErB,QAAEmxJ,EAAO,aAAEsH,EAAY,eAAEC,GAAmB1yG,GAAQ,CAAC,EACrD1tD,EAAcj3D,EAAOi3D,YAAYq7B,QAEvC,IAAIglI,EAAe3yG,GAAM0yG,gBACpBC,GAAgBrhN,IACnBqhN,EAAerhN,EAAIsrH,WA/kBG,oCA+kB+Bs1F,QAAkBx1N,GAGzE,MAAMuM,EAAOixD,GAAgB,WAAYA,GAAe9vB,EAAAA,EAAAA,KAAW/uC,EAAQ6+D,EAAa3zD,aAAU7J,EAC5Fk2N,EAAkB9tN,QAAQqmN,KAAawH,IAAiBR,GAAoBrqI,IAAI6qI,MAChF,mBAAExC,EAAkB,YAAEC,EAAW,QAAEC,GAAaoC,GAAgB,CAAC,EACjE3pK,EAAMk3D,GAAMtzD,OAAQviB,EAAAA,EAAAA,KAAW9uC,EAAQ2kH,EAAKtzD,YAAShwD,EACrDu5D,GAAUryB,EAAAA,EAAAA,IAAgBklB,GAEhC,MAAO,CACL8nF,OACA3nI,OACAkoN,kBACAuB,eAAgBC,EAChBC,kBACA5yG,OACAmrG,UACAgF,qBACAC,cACAC,UACAnnK,QACAkpK,kBAAmBA,GAAqB9gN,EACxCq6M,iBAAkB7mN,SAAS4tN,GAAkBphN,GAC7CghD,cACAgS,YACAmnJ,mBAAoB3mN,QAAQqsN,GAAiB31N,QAC7Cq3N,iBAAkBP,GAAwB3pB,MAC1CmqB,SAAUT,GAAmBx4N,GAC7Bk5N,mBAAoBR,GAAmBS,WACvCR,kBACAv8J,aApDcvtD,EArhB4BuqN,EAC9CvtN,SACAE,UACAgrI,OACAugF,kBACAnxG,OACA4yG,kBACAzH,UACAuH,iBACAvC,qBACAC,cACAC,UACA+B,oBACAlpK,QACAoJ,cACAm5J,qBACAnnJ,YACAuuJ,mBACAC,WACApH,mBACAqH,qBACAP,kBACA7G,mBACA11J,cAEA,MAAM,iBACJi9J,EAAgB,sBAChBC,EAAqB,gBACrBC,EAAe,eACfxH,EAAc,oBACdyH,EAAmB,kBACnBtE,EAAiB,wBACjBuE,EAAuB,uBACvBC,IACExtN,EAAAA,EAAAA,MAEEynC,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,MAENgc,EAAa3oB,EAAWC,IAAc9nC,EAAAA,EAAAA,MACtCu6N,EAAcC,IbyHdtwD,EAAAA,GAAAA,GAAW8nD,GAAS9nF,KaxHpBz0G,EAAWk0F,IAAgB18G,EAAAA,EAAAA,KAAS,IACpC2uE,EAAeC,IAAoB5uE,EAAAA,EAAAA,KAAS,IAC5CwtN,EAAeC,IAAoBztN,EAAAA,EAAAA,IAAS,IAC7C0tN,IAAWvjM,EAAAA,EAAAA,GAAsBugH,GAAM,GACvCijF,IAAgBxjM,EAAAA,EAAAA,GAAsBi0C,GACtCwvJ,GAAkBljF,IAAS+7E,EAAAA,GAAY8B,eAEvCsF,IAAUp6N,EAAAA,EAAAA,KAAaq6N,IAC3BpI,EAAe,CAAEh7E,KAAMojF,MACtB,CAACpI,KAEJtnN,EAAAA,EAAAA,KAAU,KACJoB,IACFiuN,EAAiB,IACjBT,IACApyL,OAED,CAACp7B,EAAQwtN,EAAkBpyL,KAG9Bx8B,EAAAA,EAAAA,KAAU,MACHoB,GAAU+jD,GACb1oB,MAED,CAACA,EAAY0oB,EAAa/jD,KAE7BpB,EAAAA,EAAAA,KAAU,WACK5H,IAATk0I,GAAsB1nF,IACxB05D,GAAa,KAEd,CAACguB,EAAM1nF,EAAOob,KAGjBhgE,EAAAA,EAAAA,KAAU,KAENssI,IAAS+7E,EAAAA,GAAYzB,UAClBt6E,IAASgjF,IACTtvJ,IAAcuvJ,IACbL,EAAaxI,mBACbwI,EAAaxJ,YAEjB+J,GAAQpH,EAAAA,GAAYE,eAErB,CAAC2G,EAAaxJ,WAAYwJ,EAAaxI,kBAAmB6I,GAAeD,GAAUtvJ,EAAWyvJ,GAASnjF,KAE1GtsI,EAAAA,EAAAA,KAAU,KACJ4kD,GAAO+qK,OACTR,EAAgB,CACdv4N,KAAM,gBACNooI,QAAS,CACP,CAACp6E,EAAM+qK,OAAQ/qK,EAAM0lK,gBAI1B,CAAC1lK,EAAOuqK,KAEXnvN,EAAAA,EAAAA,KAAU,KACR,GAAI07G,GAAMk0G,UAAW,CACnB,MACE5sN,KAAM0zC,EAAQ,MAAEoY,EAAK,MAAEgwE,EAAK,gBAAE+oF,GAC5BnsG,EAAKk0G,WACH,YACJ9J,KAAgB+J,GACdhI,GAAmB,CAAC,EAClBiI,EAAkBhK,GAAe93J,EAAY/mB,MAAK,EAAGo+C,UAAWA,IAASygI,IAAcxgI,YAC7F6pI,EAAgB,CACdv4N,KAAM,iBACNooI,QAAS,CACPtoF,WACAoY,MAAOA,GAA6B,MAApBA,EAAMihK,OAAO,GACzB,IAAIjhK,IACJA,EACJgwE,WACIgxF,GAAmB,CACrB1qI,QAAS0qI,EACThK,iBACG+J,KAIX,IACC,CAACn0G,EAAMyzG,EAAiBnhK,KAE3BhuD,EAAAA,EAAAA,KAAU,KACJonN,GAAkBlwN,QACpBi4N,EAAgB,CACdv4N,KAAM,0BACNooI,QAASooF,EAAiB,GAAG7xN,OAGhC,CAAC45N,EAAiB/H,IAErB,MAAM4I,IAAwB36N,EAAAA,EAAAA,KAAY,KACxCo1N,MACC,CAACA,IAEEzD,IAAaxpN,EAAAA,EAAAA,KAAQ,IACrB8uI,IAAS+7E,EAAAA,GAAYzB,SAChB,EA4cb,SACEqC,EAA4B,GAC5B4D,EACAoD,EACAxJ,GAEA,MAAMK,EAAiB+F,EACnBqD,GAAkBrD,EAAiBoD,GACnC,GACJ,IAAIl9D,EAAQ0zD,EAKZ,OAHA1zD,EADoBk2D,EAAOxlI,OAAOqjI,GAAkB,IAChC5yK,QAAO,CAACiL,EAAKgxK,IACxBhxK,EAAMgxK,EAAIxgL,QAChBojH,GACIA,CACT,CAxdWq9D,CAAcvJ,GAASoC,OAAQ4D,EAAiBqC,EAAalJ,SAAUkJ,EAAazI,YAC1F,CAACn6E,EAAMu6E,GAASoC,OAAQ4D,EAAiBqC,EAAalJ,SAAUkJ,EAAazI,YAE1EM,IAAevpN,EAAAA,EAAAA,KAAQ,KAC3B,GAAI8uI,IAAS+7E,EAAAA,GAAYzB,SAGzB,OAmdJ,SAAyBn1J,EAAkBo7J,EAA+CjF,GACxF,MAAMyI,Ed1pBD,SAA4B3K,GACjC,MAAMsF,EAAWvF,GAAeC,GAChC,OAAON,GAAM4F,IAAa,EAC5B,CcupBuBsF,CAAmB7+J,EAAMi0J,YACxCiC,EAAgB0I,GAAgB5+J,EAAMi0J,WAAa,GAAG2K,MAAiB5+J,EAAMi0J,WAAW5xK,OAAO,UAAO17C,EACtGyvN,EAAkBp2J,EAAMk0J,YAC1B,GAAGl0J,EAAMk0J,gBAAgBl0J,EAAMo0J,SAASp0J,EAAMq0J,mBAC9C1tN,GACE,MAAE02D,EAAOpY,SAAU1zC,GAASyuD,EAC5Bw+J,EAAiBpD,EAAkB0D,GAAmB1D,EAAiBp7J,EAAMu0J,eAAY5tN,EACzF0vN,EAAiBmI,GAAgBrtN,MACvC,MAAO,CACL+kN,gBACAC,kBACAC,kBACA7kN,OACA8rD,QACAg5J,iBAEJ,CApeW0I,CAAgBtB,EAAcrC,EAAiBuB,GAAkB,MACvE,CAAC9hF,EAAM4iF,EAAcrC,EAAiBuB,IAEnCqC,IAAqBp7N,EAAAA,EAAAA,KAAY,KACrCo6N,GAAQpH,EAAAA,GAAYE,eACnB,CAACkH,KAEEiB,IAA0Br7N,EAAAA,EAAAA,KAAY,KAC1Co1N,MACC,CAACA,IAyBEkG,IAAWt7N,EAAAA,EAAAA,KAAY,KAC3By5N,EAAgB,CACd8B,iBAAkB1B,EAAalJ,SAC/BO,gBAAiB2I,EAAa3I,gBAC9BG,kBAAmBwI,EAAaxI,kBAChCD,UAAWyI,EAAazI,cAEzB,CAACqI,EAAiBI,IAEf2B,IAA0Bx7N,EAAAA,EAAAA,KAAaonE,IAC3C,MAAM,YAAEq0J,GAAgBr0J,EACxBwyJ,EAAuB6B,GACvBH,OACC,CAACA,KA4FEI,IAAkB17N,EAAAA,EAAAA,KAAY,KAClC,MAAM,SAAEixN,GAAa4I,EACf8B,EAyVV,SAAwB9B,GACtB,MAAM,YACJvJ,EAAW,YACXC,EAAW,KACXC,EAAI,MACJp0J,EAAK,YACLq0J,EAAW,SACXC,EACArvK,SAAU1zC,EAAI,MACd8rD,EAAK,MACLgwE,GACEowF,EAWJ,MAAO,CACLlsN,OACA8rD,QACAgwE,QACA+oF,gBAbsB,CACtBlC,cACAC,cACAC,OACAp0J,QACAq0J,cACAC,YASJ,CArXwBkL,CAAe/B,GACnCL,EAAsB,CAAEmC,cAAa1K,eACpC,CAACuI,EAAuBK,IAErBgC,IAAkB77N,EAAAA,EAAAA,KAAY,KAClC,MAAMy7N,EA8XV,SAAwB5B,GACtB,MAAM,WACJxJ,EAAU,WAAEO,EAAU,OAAEC,EAAM,IAAEC,EAAG,eAAEC,EAAc,WAAEC,GACnD6I,GACGiC,EAAaC,GAAclL,EAAOx1I,MAAM,KAW/C,MAAO,CACLviE,KAXW,CACXu3M,aACAO,aACAkL,cACAC,aACAjL,MACA/gI,QAASghI,EACTiL,IAAKhL,GAMT,CAhZwBiL,CAAepC,GACnCH,EAAoB,CAClB+B,kBAED,CAAC/B,EAAqBG,IAEnB9mH,IAAoBpmG,EAAAA,EAAAA,IAAgB,KACxC,OAAQsqI,GACN,KAAK+7E,EAAAA,GAAYI,aACfnqG,GAAa,GACbyyG,KACA,MAEF,KAAK1I,EAAAA,GAAYM,SACf8G,GAAQpH,EAAAA,GAAYzB,UACpB,MAEF,KAAKyB,EAAAA,GAAYC,cACfmH,GAAQpH,EAAAA,GAAYkJ,iBACpB,MAEF,KAAKlJ,EAAAA,GAAYkJ,gBACf,GAAsB,KAAlBnC,EACF,OAGF9wG,GAAa,GACb0wG,EAAwB,CAAEj+G,SAAUq+G,IACpC,MAEF,KAAK/G,EAAAA,GAAYE,YACfjqG,GAAa,GACb4yG,KACA/B,EAAgB,CAAEv4N,KAAM,0BAA2BooI,QAAS,KAC5D,MAEF,KAAKqpF,EAAAA,GAAYzB,SAAU,CACzB,GAAIS,EAGF,OAFA/oG,GAAa,QACbmxG,GAAQpH,EAAAA,GAAY8B,gBAItB,GAAIzuG,GAAMk0G,YAAc5vJ,IAAckvJ,EAAalJ,SAGjD,OAFA1nG,GAAa,QACbyyG,KAIF,GACE7B,EAAaxI,qBACR+H,GAAsBA,GAAuB9sM,KAAKC,MAAQ,IA5VvC,GA+VxB,YADA6tM,GAAQpH,EAAAA,GAAYkJ,iBAItB,IACGrC,EAAaxI,oBAEX0H,IAAmBT,KAAqBa,GACrCJ,IAAmBR,KAAoBW,GAI7C,YADAkB,GAAQpH,EAAAA,GAAYE,aAItB,MAAM,MAAEz5J,EAAK,MAAEgwE,EAAK,SAAEpoF,GAAaw4K,EAC7BsC,EAA2B3K,GAAS4K,mBAAqB3yF,GACzD+nF,GAAS6K,mBAAqB5iK,GAC9B+3J,GAAS8K,kBAAoBj7K,EAEnC,GAAKmwK,GAAS+K,6BAA+B5xJ,GAAcwxJ,EAEzD,YADA/B,GAAQpH,EAAAA,GAAYI,cAItB,GAAI5B,GAAS+K,6BAA+B1C,EAAalJ,UAAY6G,GAAiB31N,OAEpF,YADAu4N,GAAQpH,EAAAA,GAAYM,UAItBrqG,GAAa,GACbqyG,KACA,KACF,OAIJ3wN,EAAAA,EAAAA,KAAU,IACDssI,IAAS+7E,EAAAA,GAAYkJ,iBACxB7iL,EAAAA,GAAAA,GAAyB,CAAE5rC,QAASslG,UACpChwG,GAEN,CAACgwG,GAAmBkkC,IAEpB,MAAMx+D,IAAmBz4E,EAAAA,EAAAA,KAAY,KACnC85N,EAAgB,CACdv4N,KAAM,eAER45E,GAAiB,GACjBlvE,MACC,CAACA,EAAS6tN,IAEPnqJ,IAAkB3vE,EAAAA,EAAAA,KAAY,KAClCo6N,GAAQnjF,IAAS+7E,EAAAA,GAAYkJ,gBAAkBlJ,EAAAA,GAAYC,cAAgBD,EAAAA,GAAYzB,YACtF,CAAC6I,GAASnjF,IAEP7wB,IAAcj+G,EAAAA,EAAAA,KAAQ,KAC1B,OAAQ8uI,GACN,KAAK+7E,EAAAA,GAAYzB,SACf,OAAO19K,EAAQ,mBACjB,KAAKm/K,EAAAA,GAAYI,aACf,OAAOv/K,EAAQ,uBACjB,KAAKm/K,EAAAA,GAAYM,SACf,OAAOz/K,EAAQ,yBACjB,KAAKm/K,EAAAA,GAAYC,cACf,OAAOp/K,EAAQ,yBACjB,KAAKm/K,EAAAA,GAAYkJ,gBACf,OAAOroL,EAAQ,gCACjB,KAAKm/K,EAAAA,GAAYE,YACf,OAAOr/K,EAAQ,mBACjB,KAAKm/K,EAAAA,GAAY8B,eACf,OAAOjhL,EAAQ,kCACjB,QACE,MAAO,MAEV,CAACojG,EAAMpjG,IAEJ1+B,GAAa8hI,IAAS+7E,EAAAA,GAAYzB,SACpC19K,EAAQ,qBAAqB8zC,EAAAA,GAAAA,IAAuBgqI,GAAYH,EAAS/rI,SAAU5xC,EAAQwjB,OAC3FlqD,EAAK,mBAwBT,GAAI8rN,EACF,OACEh5N,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJrN,UAAU,QACV4L,OAAQ+jD,EACR7jD,QAASm7B,EACTl7B,oBAAqBusE,GAAiBr4E,SAAA,EAEtCH,EAAAA,GAAAA,IAAA,KAAAG,SAAA,CAAG,yEAEA,KACDC,EAAAA,GAAAA,GAAA,SAAM,oDAGRA,EAAAA,GAAAA,GAAA,OAAKF,UAAU,sBAAqBC,UAClCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLE,QAAM,EACNC,QAASi5B,EAAWhnC,SAEnByzC,EAAQ,aAOnB,MAAM2oL,GAhDN,WACE,GAAIznM,EACF,OAAO,EAGT,OAAQkiH,GACN,KAAK+7E,EAAAA,GAAYzB,SACf,OAAOpmN,QAAQqmN,GAASW,YAAcj3I,EAExC,KAAK83I,EAAAA,GAAYE,YACf,OAAO/nN,QACuB,KAA5B0uN,EAAaxJ,YACTmG,GAAkD,KAA5BqD,EAAajJ,YACf,KAArBiJ,EAAa/I,KACW,KAAxB+I,EAAahJ,QAGpB,QACE,OAAO,EAEb,CA4ByB4L,GAEzB,OACEx8N,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJrN,WAAWoW,EAAAA,GAAAA,GAAe,eAAgBi7M,GAASkL,aAAe,aAClE3wN,OAAQ+jD,EACR7jD,QAASm7B,EACTl7B,oBAAqBusE,GAAiBr4E,SAAA,EAEtCH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,SAASsW,IAAKo9B,EAAQ5hB,MAAQ,WAAQlvB,EAAU3C,SAAA,EAC7DC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,eACV8N,MAAM,cACNyE,OAAK,EACLnS,KAAK,UACL4N,QAAS8oI,IAAS+7E,EAAAA,GAAYzB,SAAWnqL,EAAauoC,GACtDh9D,UAAU,QAAOvS,UAEjBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAMspI,IAAS+7E,EAAAA,GAAYzB,SAAW,QAAU,kBAExDlxN,EAAAA,GAAAA,GAAA,MAAAD,SAAKgmH,aAEGrjH,IAATk0I,GACC52I,EAAAA,GAAAA,GAAC+8B,GAAAA,GAAU,CACTzvB,KAAK,QACL0vB,UAAW45G,EACXtpC,eAAa,EACbgvH,eAAgB3J,EAAAA,GAAY8B,eAAe10N,UAE3CC,EAAAA,GAAAA,GAAA,OAAKF,UAAU,wBAAuBC,SApT9C,SAA4Bw8N,GAC1B,OAAQA,GACN,KAAK5J,EAAAA,GAAYzB,SACf,OACElxN,EAAAA,GAAAA,GAACkxN,GAAQ,CACPhkN,MAAO84G,EAAM94G,MACbf,YAAa65G,EAAM75G,YACnBtK,MAAOmkH,EAAMnkH,MACb8nI,SAAU8vF,EACVrI,eAAgBoI,EAAalJ,UAAY6G,EACrCqD,GAAkBrD,EAAiBqC,EAAalJ,eAChD5tN,EACJ4uN,WAAYA,GACZH,QAASA,EACTE,aAAcA,GACdM,iBAAkBA,EAClBF,mBAAoBA,EACpBV,UAAWyI,EAAazI,UACxBS,YAAa1mN,QAAQqmN,GAAS+K,4BAC9BxK,iBAAkBA,EAClB72I,cAAeA,EACf02I,YAAaz2I,EACb7e,QAASA,IAGf,KAAK02J,EAAAA,GAAYC,cACf,OACE5yN,EAAAA,GAAAA,GAACi3N,GAAuB,CACtBl7J,MAAOy9J,EACP9H,iBAAkBA,EAClB/nF,SAAU8vF,EACVvC,eAAgB6D,KAGtB,KAAKpI,EAAAA,GAAYkJ,gBACf,OACE77N,EAAAA,GAAAA,GAAC60N,GAAe,CACd94J,MAAOy9J,EACP9H,iBAAkBA,EAClBoD,iBAAkB6E,EAClBpgN,SAAUgjN,IAAgB3lF,IAGhC,KAAK+7E,EAAAA,GAAYE,YACf,OACE7yN,EAAAA,GAAAA,GAAC6yN,GAAW,CACV92J,MAAOy9J,EACP7vF,SAAU8vF,EACVvD,mBAAoBprN,SAASk7G,EAAMw2G,mBAAqBx2G,EAAMkwG,oBAC9DC,mBAAoBA,EACpBC,YAAaA,EACbC,QAASA,EACT/9J,YAAaA,IAGnB,KAAKq6J,EAAAA,GAAYI,aACf,OACE/yN,EAAAA,GAAAA,GAAC+yN,GAAY,CACXh3J,MAAOy9J,EACP7vF,SAAU8vF,EACVjI,YAAa1mN,QAAQqmN,GAAS+K,4BAC9B7E,UAAWvsN,QAAQqmN,GAAS4K,kBAAoB5K,GAASsL,uBACzDnF,UAAWxsN,QAAQqmN,GAAS6K,kBAAoB7K,GAASuL,uBACzDnF,SAAUzsN,QAAQqmN,GAAS8K,iBAC3B3jK,YAAaA,IAGnB,KAAKq6J,EAAAA,GAAYM,SACf,OACEjzN,EAAAA,GAAAA,GAACizN,GAAQ,CACPl3J,MAAOy9J,EACP7vF,SAAU8vF,EACVtC,gBAAiBA,GAAmB,GACpC/xI,SAAU+rI,EAAS/rI,WAGzB,KAAKutI,EAAAA,GAAY8B,eACf,OACEz0N,EAAAA,GAAAA,GAACy0N,GAAc,CACbn9M,IAAK8gN,EACL1D,WAAY8D,EACZ7D,oBAAqBwG,GACrBvvN,QAASm7B,IAGf,QACE,OAEN,CA6NW41L,CAAmB/lF,QAIxB52I,EAAAA,GAAAA,GAAA,OAAKF,UAAU,gBAAeC,UAC5BC,EAAAA,GAAAA,GAACuoB,GAAAA,EAAO,CAAC3a,MAAM,WAGlBksN,KACC95N,EAAAA,GAAAA,GAAA,OAAKF,UAAU,SAAQC,UACrBC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,cACVoB,KAAK,SACL4M,QAAS4kG,GACTxyF,SAAUi8M,GACVznM,UAAWA,EAAU30B,SAEpB+U,OAINo6C,IAAUA,EAAM+qK,OAhXrB,WACE,GAAK/qK,EAGL,OACEtvD,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJrN,UAAU,QACV4L,OAAQZ,QAAQokD,GAChBtjD,QAAS0uN,GAAsBv6N,SAAA,EAE/BC,EAAAA,GAAAA,GAAA,MAAAD,SAAKmvD,EAAM0tK,eAAiB9vN,EAAK6uG,YAAYzsD,EAAM0tK,gBAAkB9vN,EAAK,uBAC1E9M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,sBAAqBC,UAClCC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLE,QAAM,EACNC,QAASktN,GAAwBj7N,SAEhCyzC,EAAQ,YAKnB,CA2V8BqpL,UA8DhC,SAAShC,GAAmB1D,EAAmC2F,GAC7D,OAAO3F,EAAgB5lL,MAAK,EAAG1xC,QAASA,IAAOi9N,GACjD,CAEA,SAAStC,GAAkBrD,EAAmCoD,GAC5D,MAAMvxL,EAAS6xL,GAAmB1D,EAAiBoD,GACnD,OAAOvxL,GAAQuqL,MACjB,CC3oBA,MAmEA,IAAe50N,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAM,QAAE07N,IAAYjuN,EAAAA,EAAAA,KAAezN,GAAQ2+D,QAE3C,MAAO,CACL+8J,aALcruN,EAnE4BsuN,EAC9CtxN,SACAE,UACAmxN,cAEA,MAAMjwN,GAAO2mC,EAAAA,GAAAA,MAENgc,EAAa3oB,EAAWC,IAAc9nC,EAAAA,EAAAA,MAE7CqL,EAAAA,EAAAA,KAAU,KACJoB,GACFo7B,MAED,CAACp7B,EAAQo7B,IAEZ,MAAMm2L,GAAc9kH,EAAAA,GAAAA,GAAY4kH,GAC1BG,EAAmBH,GAAWE,EAE9B5L,GAAevpN,EAAAA,EAAAA,KAAQ,KAC3B,GAAKo1N,EACL,OAyDJ,SAAyBjL,EACvBt7L,EAKAy7L,GACA,IAAKz7L,EACH,MAAO,CAAEs7L,iBAEX,MAAM,gBAAEE,GAAoBx7L,EACtBwmM,EAAchL,GAAiBlC,YACjC,GAAGkC,EAAgBlC,gBAAgBkC,EAAgBhC,SAASgC,EAAgB/B,mBAC5E1tN,GACE,MAAE02D,EAAK,KAAE9rD,GAASqpB,EACxB,MAAO,CACLs7L,gBACAE,gBAAiBgL,EACjB7vN,OACA8rD,QACAg5J,iBAEJ,CA/EW0I,CAAgBoC,EAAiBE,iBAAkBF,EAAiBvmM,KAAMumM,EAAiB9K,kBACjG,CAAC8K,IAEJ,OACEl9N,EAAAA,GAAAA,GAACmN,EAAAA,EAAK,CACJrN,UAAU,oCACV4L,OAAQ+jD,EACR7jD,QAASm7B,EACTl7B,oBAAqBD,EAAQ7L,SAE5Bm9N,IACCt9N,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEH,EAAAA,GAAAA,IAAA,OAAKE,UAAU,SAASsW,IAAKtJ,EAAK8kB,MAAQ,WAAQlvB,EAAU3C,SAAA,EAC1DC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,eACV8N,MAAM,cACNyE,OAAK,EACLnS,KAAK,UACL4N,QAASi5B,EACTz0B,UAAU,QAAOvS,UAEjBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,aAEb1N,EAAAA,GAAAA,IAAA,MAAAG,SAAA,CACG,IACA+M,EAAK,kBACL,WAGL9M,EAAAA,GAAAA,GAAA,OAAKF,UAAU,gCAA+BC,UAC5CC,EAAAA,GAAAA,GAACkxN,GAAQ,CACPE,eAAgB8L,EAAiB9L,eACjCE,WAAY4L,EAAiBG,YAC7BtM,UAAWmM,EAAiBnM,UAC5BI,QAAS+L,EAAiB/L,QAC1BE,aAAcA,EACdnkN,MAAOgwN,EAAiBhwN,MACxBf,YAAa+wN,EAAiB/wN,YAC9BtK,MAAOq7N,EAAiBr7N,mBCrFtC,GAA4E,WAA5E,GAA+F,WCuM/F,IAAelD,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KAClB,CAACrN,GAAU6mC,YAGF,CACLj5B,KAHWi5B,GAAO37B,QAAS6jC,EAAAA,EAAAA,KAAW/uC,EAAQ6mC,EAAM37B,aAAU7J,KAFhDgM,EAnKkC4uN,EACpDp1L,QACAj5B,WAEA,MAAM,mBAAEsuN,EAAkB,wBAAEC,EAAuB,iBAAE77L,IAAqB51B,EAAAA,EAAAA,OACpE,aAAE0xN,GAAiBv1L,GAAS,CAAC,EAE7Bp7B,GAAOC,EAAAA,EAAAA,MACN+kF,EAAmB4rI,IAAwBxxN,EAAAA,EAAAA,IAAmB,IAE/D65B,GAAUj+B,EAAAA,EAAAA,KAAQ,IAAM21N,GAAcjqN,KAAK08B,GAASA,EAAKrwC,MAAOykC,GAAAA,GAAkB,CAACm5L,KAClFE,EAAiBC,IAAiB91N,EAAAA,EAAAA,KAAQ,KAC/C,IAAK21N,GAAcj8N,OAAQ,MAAO,CAAC,GAAI,IACvC,MAAOq8N,EAAmBC,IAAc7sF,EAAAA,GAAAA,IAAUwsF,GAAevtL,GAASA,EAAK6tL,8BAC/E,MAAO,CAACF,EAAkBrqN,KAAK08B,GAASA,EAAKrwC,KAAKi+N,EAAWtqN,KAAK08B,GAASA,EAAKrwC,QAC/E,CAAC49N,IAEEO,GAA0Bl2N,EAAAA,EAAAA,KAAQ,IAC/B21N,GAAchgM,QAAQyS,GAASA,EAAK+tL,4BAA8B/tL,EAAK6tL,8BAC3EvqN,KAAK08B,GAASA,EAAKrwC,MACrB,CAAC49N,IAEES,GAAyBp2N,EAAAA,EAAAA,KAAQ,KACrC,GAAK21N,EACL,OAAQA,EAAavxH,MAAMh8D,GAASA,EAAK+tL,6BAA+B/tL,EAAK6tL,gCAC5E,CAACN,IAEEU,GAAer2N,EAAAA,EAAAA,KAAQ,KAC3B,MAAM2+B,GAAQoI,EAAAA,EAAAA,MAAYpI,MAAMC,KAChC,OAAOs3L,GAAyBxqN,KAAK3T,GAAO4mC,EAAM5mC,OACjD,CAACm+N,KAEJ1zN,EAAAA,EAAAA,KAAU,KACRozN,EAAqBE,KACpB,CAACA,IAEJ,MAAM5iM,GAAc1uB,EAAAA,EAAAA,IAAgB,IAAMkxN,MAEpCY,GAAuBz+N,EAAAA,EAAAA,KAAY,KACvC49N,EAAmB,CAAEhxN,OAAQ0C,EAAMpP,GAAIkmC,QAAS+rD,IAChD0rI,MACC,CAAC1rI,EAAmB7iF,IAEjB0oI,GAAyBh4I,EAAAA,EAAAA,KAAY,KACzCgiC,MACC,IAEG08L,GAAoBv2N,EAAAA,EAAAA,KAAQ,KAChC,GAAKmH,EACL,OAAOnE,QAAQmE,GAAMq9G,WAAar9G,GAAMmxM,aAAa50F,eACpD,CAACv8G,IAEEqvN,GAAoBx2N,EAAAA,EAAAA,KAAQ,IACzBu2N,EACHvxN,EAA8B,IAAzB2wN,GAAcj8N,OAAe,0BAA4B,4BAC9DsL,EAAK,yBAA0B2wN,GAAcj8N,SAChD,CAAC68N,EAAmBvxN,EAAM2wN,GAAcj8N,SAErC+8N,GAAqBz2N,EAAAA,EAAAA,KAAQ,KACjC,IAAKk2N,GAAyBx8N,SAAW28N,GAAc38N,OAAQ,OAC/D,MAAMiqG,EAASyyH,EAAyB,8BAAgC,uBACxE,IAAIr7L,EAAU,GAAG4oE,OACbnqG,EAAS,EAACsoC,EAAAA,EAAAA,IAAgBu0L,EAAa,KAgB3C,OAfuC,IAAnCH,EAAwBx8N,QAC1BqhC,EAAU,GAAG4oE,OACbnqG,EAAS,EAACsoC,EAAAA,EAAAA,IAAgBu0L,EAAa,KAAKv0L,EAAAA,EAAAA,IAAgBu0L,EAAa,MAC7B,IAAnCH,EAAwBx8N,QACjCqhC,EAAU,GAAG4oE,SACbnqG,EAAS,EAACsoC,EAAAA,EAAAA,IAAgBu0L,EAAa,KAAKv0L,EAAAA,EAAAA,IAAgBu0L,EAAa,KAAKv0L,EAAAA,EAAAA,IAAgBu0L,EAAa,MAClGH,EAAwBx8N,OAAS,IAC1CqhC,EAAU,GAAG4oE,QACbnqG,EAAS,EACPsoC,EAAAA,EAAAA,IAAgBu0L,EAAa,KAC7Bv0L,EAAAA,EAAAA,IAAgBu0L,EAAa,KAC5BH,EAAwBx8N,OAAS,GAAG4kF,aAIlCt5E,EAAK+1B,EAASvhC,OAAQoB,EAAWy7N,EAAa38N,UACpD,CAACw8N,EAAyBE,EAAwBpxN,EAAMqxN,IAErDK,EAAoB1zN,QAAQqzN,GAAc38N,QAC1Ci9N,EAAuB3zN,QAAQ8yN,GAAep8N,QAEpD,OACE5B,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJzB,OAAQZ,QAAQi7B,GAAW92B,GAC3BmzB,iBD3HoB,WC4HpBx2B,QAASovB,EACTqH,QAAM,EAAAtiC,SAAA,EAENC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL0E,OAAK,EACLzE,MAAM,cACN1N,KAAK,UACLJ,UDnI2C,WCoI3CwS,UAAWxF,EAAK,SAChBgB,QAASktB,EAAYj7B,UAErBC,EAAAA,GAAAA,GAACuS,EAAAA,EAAI,CAACjF,KAAK,YAEZixN,IACC3+N,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAACmvC,GAAAA,EAAU,CACTrvC,UD5ImL,WC6InLsvC,MAAO+uL,EACPj+N,KAAK,WAEPF,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAaxd,SACL+M,EAApBuxN,EAAyB,4BAAoC,qCAEhEr+N,EAAAA,GAAAA,GAAA,KAAGF,UAAWyd,GAAmBxd,UAC9Bg0B,EAAAA,GAAAA,GAAWwqM,EAAoB,CAAC,uBAEnCv+N,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLg1B,qBAAmB,EACnBD,SAAO,EACPxiC,KAAK,UACL4N,QAAS6pI,EAAuB53I,SAE/B+M,EAAK,sCAIX0xN,GAAqBC,IACpBz+N,EAAAA,GAAAA,GAACq1H,GAAAA,EAAS,CAACv1H,UDjKmG,WCiKvEC,SACpC+M,EAAK,4BAGT2xN,IACC7+N,EAAAA,GAAAA,IAAAomC,GAAAA,GAAA,CAAAjmC,SAAA,EACEC,EAAAA,GAAAA,GAAA,MAAIF,UAAWyd,GAAaxd,SAAE+M,EAAK,yBACnC9M,EAAAA,GAAAA,GAAA,KAAGF,UAAWyd,GAAmBxd,SAC9Bu+N,KAEHt+N,EAAAA,GAAAA,GAACokC,GAAAA,EAAU,CACTtkC,UD5KkI,WC6KlIukC,QAAS0B,EACTtC,YAAaquD,EACb6/C,oBAAqBgsF,EACrBe,yBAA0B5xN,EAAK,4BAC/Bg4B,oBAAqB44L,EACrB7wI,YAAawxI,EACbr5L,eAAa,EACbC,YAAU,EACVC,cAAc,aAEfm5L,IACCr+N,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UDzLyJ,WC0LzJI,KAAK,UACL4N,QAASswN,EACTl+M,UAAW4xE,EAAkBtwF,OAAOzB,SAEnC+M,EAAK,2C,gBC9LpB,MCwGA,IAAenO,EAAAA,EAAAA,KAhFWggO,EACxBz2L,YAEA,MAAM,uBACJ02L,IACE7yN,EAAAA,EAAAA,MAEEe,GAAOC,EAAAA,EAAAA,KACPnM,GAAUorC,EAAAA,GAAAA,GAAiB9D,GAAOtnC,SAAS,IAE3C,aACJijB,EAAY,qBACZE,IACEE,EAAAA,GAAAA,GAA4BnZ,QAAQo9B,IAElC22L,GAAkBvyN,EAAAA,EAAAA,IAAgB,SAIlC0uB,GAAc1uB,EAAAA,EAAAA,IAAgB,KAClCsyN,OAGF,IAAK/6M,IAAiBjjB,EACpB,OAGF,MAAMk+N,GAAQC,EAAAA,EAAAA,IAAan+N,GACrB07D,GAAQuD,EAAAA,EAAAA,MAAYhxB,EAAAA,EAAAA,OACpBmwL,EAAwBlyN,EAARgyN,EAAa,0BAAkC,oCAgCrE,OACEl/N,EAAAA,GAAAA,IAAA,OAAKE,WAAWoW,EAAAA,GAAAA,GDtFG,WCsFyB6N,GAAsBhkB,SAAA,CA/BpE,WACE,IAAKa,GAASkS,QACZ,OAEF,MAAM,MAAEmsN,EAAK,MAAEn9N,GAAUlB,EAAQkS,QACjC,OAAImsN,GAEAj/N,EAAAA,GAAAA,GAACy7H,GAAAA,GAAK,CACJ37H,UD/D8G,WCgE9Gw8D,MAAOA,EACP17D,QAASA,EACTqC,OAAQy4H,EAAAA,GAAYwjG,aACpBj5M,UAAQ,EACRK,OAAQu4M,EACRr4M,QAASwU,IAGJl5B,GAAO2F,SAEdzH,EAAAA,GAAAA,GAACm/N,GAAAA,EAAU,CACTr/N,UD3EiI,WC4EjIc,QAASA,EACTqC,OAAO,eACPm8N,OAAQpkM,SANP,CAWT,CAIKqkM,IACDr/N,EAAAA,GAAAA,GAAA,OAAKF,UDxFoJ,WCwF3HC,UAC5BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL42C,OAAK,EACLz2C,QAASktB,EACT+tE,MAAI,EACJ7oG,KAAK,UACL0N,MAAiB,SAAV0uD,EAAmB,OAAS,YACnCx8D,UD/F2K,WC+FhJC,SAE1Bi/N,YCjBX,IAAergO,EAAAA,EAAAA,KA7DqC2gO,EAClD5zN,aAEA,MAAM8nC,GAAUzmC,EAAAA,EAAAA,KACVD,GAAO2mC,EAAAA,GAAAA,MACP,mCAAE8rL,EAAkC,iBAAE/jK,IAAqBzvD,EAAAA,EAAAA,OAE1DyzN,EAAoBC,IAAyBvzN,EAAAA,EAAAA,KAAS,GAEvDmd,GAAejgB,EAAAA,EAAAA,MAEfwC,GAAUjM,EAAAA,EAAAA,KAAY,KAC1B4/N,EAAmC,CAAEC,yBACpC,CAACA,IAEEl8L,GAAiB3jC,EAAAA,EAAAA,KAAY,KACjC67D,EAAiB,CAAEkkK,wBAAwB,IAC3CH,EAAmC,CAAEC,yBACpC,CAACA,IAEEG,GAAwBhgO,EAAAA,EAAAA,KAAa2E,KAC1B,IAAXA,GAAcg/B,MACjB,CAACA,IAEE/d,GAAgBykC,EAAAA,GAAAA,GAA0B3gC,EAAc3d,EAAQi0N,EAAuB,WAE7F,OACE//N,EAAAA,GAAAA,IAACuN,EAAAA,EAAK,CACJrN,WAAWoW,EAAAA,GAAAA,GAAe,WAC1BhJ,MAAOJ,EAAK,iBACZpB,OAAQA,EACRE,QAASA,EAAQ7L,SAAA,EAEjBC,EAAAA,GAAAA,GAAA,KAAAD,SAAI+M,EAAK,8BACT9M,EAAAA,GAAAA,GAAC8yD,GAAAA,EAAQ,CACPhzD,UAAU,kBACVmN,MAAOH,EAAK,iBACZm8B,QAASu2L,EACTzsK,QAAS0sK,KAEX7/N,EAAAA,GAAAA,IAAA,OACEE,UAAU,sBACVkU,IAAKqV,EACLiiC,UAAW/lC,EAAcxlB,SAAA,EAEzBC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UAAU,wBACV+N,QAAM,EACNC,QAASw1B,EACT11B,MAAM,SAAQ7N,SAEbyzC,EAAQ,cAEXxzC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CAAC7N,UAAU,wBAAwB+N,QAAM,EAACC,QAASlC,EAAQ7L,SAC/DyzC,EAAQ,qBCuDnB,IAAe70C,EAAAA,EAAAA,KAAK+P,EAAAA,EAAAA,KACjBrN,IACC,MAAMu+N,EAAkBv+N,EAAO4uC,WAAW2vL,gBACpCC,EAAkBx+N,EAAO4uC,WAAW4vL,gBACpCC,EAAkBz+N,EAAO0+N,mBAAoB5vL,EAAAA,EAAAA,KAAW9uC,EAAQA,EAAO0+N,wBAAqBr9N,EAGlG,MAAO,CACLk9N,kBACAC,kBACAG,wBAL8BF,IAAmBzgE,EAAAA,EAAAA,IAAgBygE,MALnDpxN,EAlGOuxN,EACzB/3L,QACA03L,kBACAC,kBACAG,8BAEA,MAAM,wBACJE,EAAuB,QACvBjqM,IACElqB,EAAAA,EAAAA,MACEe,GAAO2mC,EAAAA,GAAAA,KAEP/nC,EAASZ,QAAQo9B,GAEjBlN,GAAc1uB,EAAAA,EAAAA,IAAgB,KAClC4zN,OAGIC,GAAe7zN,EAAAA,EAAAA,IAAgB,KACnC4zN,IACIL,GACF5pM,EAAQ,CAAE3e,IAAKuoN,OAIbz3L,GAAStgC,EAAAA,EAAAA,KAAQ,KAEnBlI,EAAAA,GAAAA,IAAA,OAAKE,UCzDc,WDyDWC,SAAA,EAC5BC,EAAAA,GAAAA,GAACqkG,GAAAA,EAAuB,CACtBnkG,KAAM,IACNE,OAAQC,GAAAA,EAAe+/N,WACvB5/N,QAAM,KAERR,EAAAA,GAAAA,GAAA,OAAKF,UC/D+B,WD+DPC,SAC1B+M,EAAK,iCAIX,CAACA,IAEEg9B,GAAShiC,EAAAA,EAAAA,KAAQ,KACrB,GAAK4D,EACL,OACE9L,EAAAA,GAAAA,IAAA,OAAKE,UCzEqD,WDyE5BC,SAAA,EAC5BC,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACL7N,UC3EgF,WD4EhFI,KAAK,UACL4N,QAASqyN,EACT15F,mBAAiB,EAAA1mI,SAEhB+M,EAAK,mBAER9M,EAAAA,GAAAA,GAAC2N,EAAAA,EAAM,CACLE,QAAM,EACN3N,KAAK,UACL4N,QAASktB,EACTyrG,mBAAiB,EAAA1mI,SAEhB+M,EAAK,2BAIX,CAACA,EAAMpB,IAEV,IAAKk0N,IAAoBI,EAAyB,OAElD,MAAMhtM,EAAO,IAAI/G,KAAuB,IAAlB2zM,GAEhBS,GACJrgO,EAAAA,GAAAA,GAACu6F,GAAAA,EAAI,CAACzsF,QAASqyN,EAAc3lI,WAAS,EAAAz6F,UACnC05H,EAAAA,GAAAA,GAAeumG,KAIdhmH,EAAe,CACnB,CAAC,YAAaltG,EAAK,+BAAgCA,EAAK,mCACxD,CAAC,OAAQA,EAAK,8BAA+BA,EAAK,kCAClD,CAAC,cAAeA,EAAK,4BACnBA,EAAK,8BAA+B,CAClCuzN,UACArtM,MAAM+jC,EAAAA,GAAAA,GAAmB/jC,EAAMlmB,EAAKkqD,OACnC,CACD5c,WAAW,MAIjB,OACEp6C,EAAAA,GAAAA,GAACi6G,GAAAA,EAAe,CACdvuG,OAAQA,EACR08B,OAAQA,EACR4xE,aAAcA,EACdlwE,OAAQA,EACRw2L,aAAW,EACX10N,QAASovB,O","sources":["webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/mediaViewer/helpers/getViewableMedia.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/common/ReportAvatarModal.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/hooks/useCurrentTimeSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useVideoWaitingSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/story/StoryViewer.module.scss?5f32","webpack://telegram-t/./src/components/story/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/story/helpers/dimensions.ts","webpack://telegram-t/./src/components/story/hooks/useSlideSizes.ts","webpack://telegram-t/./src/components/story/hooks/useStoryProps.ts","webpack://telegram-t/./src/components/story/StealthModeModal.module.scss?40cf","webpack://telegram-t/./src/components/story/StealthModeModal.tsx","webpack://telegram-t/./src/components/story/StoryDeleteConfirmModal.tsx","webpack://telegram-t/./src/components/story/privacy/AllowDenyList.tsx","webpack://telegram-t/./src/components/story/privacy/CloseFriends.module.scss?5d02","webpack://telegram-t/./src/components/story/privacy/CloseFriends.tsx","webpack://telegram-t/./src/components/story/StorySettings.module.scss?b887","webpack://telegram-t/./src/components/story/StorySettings.tsx","webpack://telegram-t/./src/components/common/embedded/EmbeddedStoryForward.tsx","webpack://telegram-t/./src/components/story/StoryCaption.tsx","webpack://telegram-t/./src/components/story/StoryFooter.module.scss?19b1","webpack://telegram-t/./src/components/story/StoryFooter.tsx","webpack://telegram-t/./src/components/story/StoryProgress.tsx","webpack://telegram-t/./src/components/story/StoryProgress.module.scss?59b4","webpack://telegram-t/./src/components/story/Story.tsx","webpack://telegram-t/./src/components/story/StoryPreview.tsx","webpack://telegram-t/./src/components/story/StorySlides.tsx","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/story/StoryViewModal.module.scss?06b1","webpack://telegram-t/./src/components/story/StoryView.tsx","webpack://telegram-t/./src/components/story/StoryViewModal.tsx","webpack://telegram-t/./src/components/story/StoryViewer.tsx","webpack://telegram-t/./src/components/common/pickers/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.module.scss?0842","webpack://telegram-t/./src/components/modals/map/MapModal.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/hooks/useDraggable.ts","webpack://telegram-t/./src/components/modals/webApp/MinimizedWebAppModal.module.scss?a30f","webpack://telegram-t/./src/components/modals/webApp/MinimizedWebAppModal.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppGridItem.module.scss?b350","webpack://telegram-t/./src/components/modals/webApp/WebAppGridItem.tsx","webpack://telegram-t/./src/components/modals/webApp/MoreAppsTabContent.module.scss?8058","webpack://telegram-t/./src/components/modals/webApp/MoreAppsTabContent.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModalTabContent.module.scss?c843","webpack://telegram-t/./src/components/modals/webApp/WebAppModalTabContent.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/usePopupLimit.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.module.scss?615e","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.module.scss?e925","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.module.scss?b798","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/common/pickers/ItemPicker.tsx","webpack://telegram-t/./src/components/common/CountryPickerModal.module.scss?d5e6","webpack://telegram-t/./src/components/common/CountryPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayChannelPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.module.scss?6d7c","webpack://telegram-t/./src/components/main/premium/GiveawayUserPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.module.scss?ac86","webpack://telegram-t/./src/components/main/premium/GiveawayModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/common/StickerButton.tsx","webpack://telegram-t/./src/components/common/reactions/ReactionEmoji.module.scss?9dc8","webpack://telegram-t/./src/components/common/reactions/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.module.scss?77cd","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.module.scss?aeb4","webpack://telegram-t/./src/components/modals/boost/BoostModal.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.module.scss?1c77","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.tsx","webpack://telegram-t/./src/util/getClosestEntry.ts","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.module.scss?3c02","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.tsx","webpack://telegram-t/./src/components/modals/ageVerification/AgeVerificationModal.module.scss?9c37","webpack://telegram-t/./src/components/modals/ageVerification/AgeVerificationModal.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.module.scss?5f0b","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.module.scss?b66d","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.module.scss?2ca6","webpack://telegram-t/./src/components/common/AboutMonetizationModal.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.module.scss?bb6b","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.module.scss?4803","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.module.scss?843e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.module.scss?b26e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.module.scss?3c2e","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.module.scss?94bc","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.tsx","webpack://telegram-t/./src/components/modals/suggestMessage/SuggestMessageModal.module.scss?e7f0","webpack://telegram-t/./src/components/modals/suggestMessage/SuggestMessageModal.tsx","webpack://telegram-t/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.module.scss?7108","webpack://telegram-t/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/main/PermissionCheckboxList.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.module.scss?fbca","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/common/SeenByModal.module.scss?1d45","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.module.scss?a8aa","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.module.scss?68c3","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.module.scss?497f","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/BotAppResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultSponsored.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/PublicPostsSearchLauncher.module.scss?4ff7","webpack://telegram-t/./src/components/left/search/PublicPostsSearchLauncher.tsx","webpack://telegram-t/./src/components/left/search/PublicPostsResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/paidMessage/PaidMessageSlider.tsx","webpack://telegram-t/./src/components/common/paidMessage/PaidMessagePrice.tsx","webpack://telegram-t/./src/components/left/settings/PremiumStatusItem.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.module.scss?16a3","webpack://telegram-t/./src/components/left/settings/PrivacyMessages.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsAcceptedGift.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyLastSeen.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.module.scss?6993","webpack://telegram-t/./src/components/left/MuteChatModal.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearchResult.module.scss?f0ab","webpack://telegram-t/./src/components/middle/search/MiddleSearchResult.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.module.scss?725f","webpack://telegram-t/./src/components/middle/search/MiddleSearch.tsx","webpack://telegram-t/./src/hooks/events/useOutsideClick.ts","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.module.scss?0536","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.module.scss?695a","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/util/visibility/isFullyVisible.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/ToDoListModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommand.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.module.scss?f347","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/TextFormatter.tsx","webpack://telegram-t/./src/util/getKeyFromEvent.ts","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPost.module.scss?fea0","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPostMeta.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentStory.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.module.scss?96a0","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.module.scss?bbd6","webpack://telegram-t/./src/components/right/statistics/StatisticsMessagePublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsStoryPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageBot.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/NewDiscussionGroup.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.module.scss?717b","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.module.scss?de6c","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.module.scss?86e3"],"sourcesContent":["import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type {\n  ApiMessage, ApiPeer, ApiPeerPhotos, ApiSponsoredMessage,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { MediaViewerMedia } from '../../../types';\n\nimport { getMessageContent, isDocumentPhoto, isDocumentVideo } from '../../../global/helpers';\nimport { selectWebPageFromMessage } from '../../../global/selectors';\n\nexport type MediaViewerItem = {\n  type: 'message';\n  message: ApiMessage;\n  mediaIndex?: number;\n} | {\n  type: 'avatar';\n  avatarOwner: ApiPeer;\n  profilePhotos: ApiPeerPhotos;\n  mediaIndex: number;\n} | {\n  type: 'standalone';\n  media: MediaViewerMedia[];\n  mediaIndex: number;\n} | {\n  type: 'sponsoredMessage';\n  message: ApiSponsoredMessage;\n  mediaIndex?: number;\n};\n\nexport type ViewableMedia = {\n  media: MediaViewerMedia;\n  isSingle?: boolean;\n};\n\nexport function getMediaViewerItem({\n  message, avatarOwner, profilePhotos, standaloneMedia, mediaIndex, sponsoredMessage,\n}: {\n  message?: ApiMessage;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  standaloneMedia?: MediaViewerMedia[];\n  sponsoredMessage?: ApiSponsoredMessage;\n  mediaIndex?: number;\n}): MediaViewerItem | undefined {\n  if (avatarOwner && profilePhotos) {\n    return {\n      type: 'avatar',\n      avatarOwner,\n      profilePhotos,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (standaloneMedia) {\n    return {\n      type: 'standalone',\n      media: standaloneMedia,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (message) {\n    return {\n      type: 'message',\n      message,\n      mediaIndex,\n    };\n  }\n\n  if (sponsoredMessage) {\n    return {\n      type: 'sponsoredMessage',\n      message: sponsoredMessage,\n      mediaIndex,\n    };\n  }\n\n  return undefined;\n}\n\nexport default function selectViewableMedia(global: GlobalState, params?: MediaViewerItem): ViewableMedia | undefined {\n  if (!params) return undefined;\n\n  if (params.type === 'standalone') {\n    return {\n      media: params.media[params.mediaIndex],\n      isSingle: params.media.length === 1,\n    };\n  }\n\n  if (params.type === 'avatar') {\n    const avatar = params.profilePhotos?.photos[params.mediaIndex];\n    if (avatar) {\n      return {\n        media: avatar,\n      };\n    }\n    return undefined;\n  }\n\n  const {\n    action, document, photo, video, paidMedia,\n  } = getMessageContent(params.message);\n\n  if (action?.type === 'chatEditPhoto' || action?.type === 'suggestProfilePhoto') {\n    return {\n      media: action.photo!,\n      isSingle: true,\n    };\n  }\n\n  if (document && (isDocumentPhoto(document) || isDocumentVideo(document))) {\n    return {\n      media: document,\n    };\n  }\n\n  const webPage = selectWebPageFromMessage(global, params.message);\n  if (webPage?.webpageType === 'full') {\n    const { photo: webPagePhoto, video: webPageVideo, document: webPageDocument } = webPage;\n    const isDocumentMedia = webPageDocument && (isDocumentPhoto(webPageDocument) || isDocumentVideo(webPageDocument));\n    const mediaDocument = isDocumentMedia ? webPageDocument : undefined;\n    const media = webPageVideo || mediaDocument || webPagePhoto;\n    if (media) {\n      return {\n        media,\n        isSingle: true,\n      };\n    }\n  }\n\n  if (paidMedia) {\n    const extendedMedia = paidMedia.extendedMedia[params.mediaIndex || 0];\n    if (!('mediaType' in extendedMedia)) {\n      const { photo: extendedPhoto, video: extendedVideo } = extendedMedia;\n      return {\n        media: (extendedPhoto || extendedVideo)!,\n      };\n    }\n  }\n\n  const media = video || photo;\n\n  if (media) {\n    return {\n      media,\n      isSingle: video?.isGif,\n    };\n  }\n\n  return undefined;\n}\n","import type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport getOffsetToContainer from '../../../util/visibility/getOffsetToContainer';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport windowSize from '../../../util/windowSize';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n  mediaIndex?: number,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message, mediaIndex);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage, mediaIndex?: number,\n) {\n  const { container, mediaEl: toImage } = getNodes(origin, message, mediaIndex);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [\n      MediaViewerOrigin.Inline,\n      MediaViewerOrigin.ScheduledInline,\n      MediaViewerOrigin.Album,\n      MediaViewerOrigin.ScheduledAlbum,\n    ].includes(origin)\n    && !isMessageImageFullyVisible(toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n\n  const { top } = getOffsetToContainer(imageEl, messageListElement);\n\n  return top > messageListElement.scrollTop\n    && top + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage, index?: number) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      // eslint-disable-next-line @stylistic/max-len\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.PreviewMedia:\n      containerSelector = `#preview-media${index}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ChannelAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.StarsTransaction:\n      containerSelector = '.transaction-media-preview';\n      mediaSelector = index === 0 ? `.stars-transaction-media-${index} :is(img, video)` : undefined;\n      break;\n\n    case MediaViewerOrigin.SponsoredMessage:\n      containerSelector = '.Transition_slide-active > .MessageList .sponsored-media-preview';\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = mediaSelector\n    ? container?.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector) : undefined;\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.StarsTransaction:\n    case MediaViewerOrigin.PreviewMedia:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n    case MediaViewerOrigin.ChannelAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useCallback, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/browser/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: ElementRef<HTMLVideoElement>,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport type { MediaViewerMedia } from '../../../types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getMediaFileSize,\n  getMediaFormat,\n  getMediaHash,\n  getMediaThumbUri,\n  getPhotoFullDimensions,\n  getProfilePhotoMediaHash,\n  getVideoDimensions,\n  getVideoProfilePhotoMediaHash,\n  isDocumentPhoto,\n  isDocumentVideo,\n} from '../../../global/helpers';\nimport { AVATAR_FULL_DIMENSIONS, VIDEO_AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\n\nconst FALLBACK_DIMENSIONS = AVATAR_FULL_DIMENSIONS;\n\ntype UseMediaProps = {\n  media?: MediaViewerMedia;\n  isAvatar?: boolean;\n  origin?: MediaViewerOrigin;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  media,\n  isAvatar,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const isPhotoAvatar = isAvatar && media?.mediaType === 'photo' && !media.isVideo;\n  const isVideoAvatar = isAvatar && media?.mediaType === 'photo' && media.isVideo;\n  const isDocument = media?.mediaType === 'document';\n  const isVideo = (media?.mediaType === 'video' && !media.isRound) || (isDocument && isDocumentVideo(media));\n  const isPhoto = media?.mediaType === 'photo' || (isDocument && isDocumentPhoto(media));\n  const isGif = media?.mediaType === 'video' && media.isGif;\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaOrAvatarHash = useMemo(() => (isFull?: boolean) => {\n    if (!media) return undefined;\n\n    if ((isPhotoAvatar || isVideoAvatar) && !isFull) {\n      return getProfilePhotoMediaHash(media);\n    }\n\n    if (isVideoAvatar && isFull) {\n      return getVideoProfilePhotoMediaHash(media);\n    }\n\n    return getMediaHash(media, isFull ? 'full' : 'preview');\n  }, [isVideoAvatar, isPhotoAvatar, media]);\n\n  const pictogramBlobUrl = useMedia(\n    media\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocument)\n    && getMediaHash(media, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const previewMediaHash = getMediaOrAvatarHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaOrAvatarHash(true),\n    undefined,\n    media && getMediaFormat(media, 'full'),\n    delay,\n  );\n\n  const localBlobUrl = media && 'blobUrl' in media ? media.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && media && getMediaThumbUri(media));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    (!isVideoAvatar && !isVideo) ? (previewBlobUrl || pictogramBlobUrl || bestImageData) : undefined\n  );\n\n  const mediaSize = media && getMediaFileSize(media);\n\n  const isLocal = Boolean(localBlobUrl);\n\n  const dimensions = useMemo(() => {\n    if (isAvatar) {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n\n    if (isDocument) {\n      return media.mediaSize!;\n    }\n\n    if (isPhoto) {\n      return getPhotoFullDimensions(media);\n    }\n\n    if (isVideo) {\n      return getVideoDimensions(media);\n    }\n\n    return FALLBACK_DIMENSIONS;\n  }, [isAvatar, isDocument, isPhoto, isVideo, isVideoAvatar, media]);\n\n  return {\n    getMediaHash: getMediaOrAvatarHash,\n    media,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocument,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    mediaSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useBlur from './useBlur';\nimport useSyncEffect from './useSyncEffect';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto, ApiReportReason } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  peerId?: string;\n  photo?: ApiPhoto;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nconst ReportAvatarModal: FC<OwnProps> = ({\n  isOpen,\n  peerId,\n  photo,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { reportProfilePhoto } = getActions();\n\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = useLastCallback(() => {\n    reportProfilePhoto({\n      chatId: peerId, photo, reason: selectedReason, description,\n    });\n    onClose();\n  });\n\n  const handleSelectReason = useLastCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  });\n\n  const handleDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  });\n\n  const lang = useOldLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = useMemo(() => [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'illegalDrugs', label: 'Illegal Drugs' },\n    { value: 'personalDetails', label: 'Personal Details' },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ], [lang]);\n\n  if (!peerId || !photo) {\n    return undefined;\n  }\n\n  const title = lang('ReportPeer.Report');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      className=\"narrow\"\n      title={title}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n          {lang('lng_report_button')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAvatarModal);\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useUnmountCleanup(() => {\n    setZoomChange(1);\n  });\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\n\nimport { isUserId } from '../../util/entities/ids';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { ActiveDownloads, MediaViewerOrigin, MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { MenuItemProps } from '../ui/MenuItem';\nimport type { MediaViewerItem, ViewableMedia } from './helpers/getViewableMedia';\n\nimport {\n  getIsDownloading,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActionsSlow, selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n  selectIsMessageProtected,\n  selectTabState,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport selectViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useOldLang from '../../hooks/useOldLang';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  mediaData?: string;\n  isVideo: boolean;\n  canUpdateMedia?: boolean;\n  canReportAvatar?: boolean;\n  activeDownloads?: ActiveDownloads;\n  onReportAvatar: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  activeDownloads: ActiveDownloads;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  chat?: ApiChat;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  origin?: MediaViewerOrigin;\n  viewableMedia?: ViewableMedia;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  item,\n  mediaData,\n  isVideo,\n  chat,\n  isChatProtected,\n  isProtected,\n  canReportAvatar,\n  canDelete,\n  canUpdate,\n  messageListType,\n  activeDownloads,\n  origin,\n  viewableMedia,\n  onReportAvatar: onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMedia,\n    cancelMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n    openMediaViewer,\n    openDeleteMessageModal,\n  } = getActions();\n\n  const isMessage = item?.type === 'message';\n\n  const { media } = viewableMedia || {};\n  const fileName = media && getMediaFilename(media);\n  const isDownloading = media && getIsDownloading(activeDownloads, media);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    media && getMediaHash(media, 'download'),\n    !isDownloading,\n    media && getMediaFormat(media, 'download'),\n  );\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (!media) return;\n\n    if (isDownloading) {\n      cancelMediaDownload({ media });\n    } else {\n      const message = item?.type === 'message' ? item.message : undefined;\n      downloadMedia({ media, originMessage: message });\n    }\n  });\n\n  const handleZoomOut = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  });\n\n  const handleZoomIn = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  });\n\n  const handleUpdate = useLastCallback(() => {\n    if (item?.type !== 'avatar') return;\n    const { avatarOwner, profilePhotos, mediaIndex } = item;\n    const avatarPhoto = profilePhotos?.photos[mediaIndex];\n    if (isUserId(avatarOwner.id)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwner.id, photo: avatarPhoto });\n    }\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: avatarOwner.id,\n      mediaIndex: 0,\n      isAvatarView: true,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const lang = useOldLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModal() {\n    return (item?.type === 'avatar') ? (\n      <DeleteProfilePhotoModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        onConfirm={onBeforeDelete}\n        profileId={item.avatarOwner.id}\n        photo={item.profilePhotos.photos[item.mediaIndex]}\n      />\n    ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected || item?.type === 'standalone') {\n      return undefined;\n    }\n\n    return item?.type !== 'sponsoredMessage' && (isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <Icon name=\"download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <Icon name=\"download\" />\n      </Button>\n    ));\n  }\n\n  const openDeleteModalHandler = useLastCallback(() => {\n    if (item?.type === 'message' && chat) {\n      openDeleteMessageModal({\n        chatId: chat?.id,\n        messageIds: [item.message.id],\n        isSchedule: messageListType === 'scheduled',\n        onConfirm: onBeforeDelete,\n      });\n    } else {\n      openDeleteModal();\n    }\n  });\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (isMessage && item.message.isForwardingAllowed && !item.message.content.action && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'close' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReportAvatar) {\n      menuItems.push({\n        icon: 'flag',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModalHandler,\n        children: lang('Delete'),\n        destructive: true,\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children, destructive,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon as IconName}\n              href={href}\n              download={download}\n              onClick={onClick}\n              destructive={destructive}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModal()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {isMessage && item.message.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <Icon name=\"zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <Icon name=\"zoom-in\" />\n      </Button>\n      {canReportAvatar && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <Icon name=\"flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <Icon name=\"copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModalHandler}\n        >\n          <Icon name=\"delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {canDelete && renderDeleteModal()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    item, canUpdateMedia,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { origin } = tabState.mediaViewer;\n\n    const message = item?.type === 'message' ? item.message : undefined;\n    const avatarOwner = item?.type === 'avatar' ? item.avatarOwner : undefined;\n    const avatarPhoto = item?.type === 'avatar' && item.profilePhotos.photos[item.mediaIndex];\n\n    const chat = selectCurrentChat(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isProtected = selectIsMessageProtected(global, message);\n    const activeDownloads = selectActiveDownloads(global);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActionsSlow(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarPhotoId);\n    const canDeleteAvatar = canUpdateMedia && Boolean(avatarPhoto);\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && Boolean(avatarPhoto) && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n    const viewableMedia = selectViewableMedia(global, item);\n\n    return {\n      activeDownloads,\n      isProtected,\n      chat,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      origin,\n      viewableMedia,\n    };\n  },\n)(MediaViewerActions));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import { useUnmountCleanup } from '../lib/teact/teact';\n\nimport { createSignal } from '../util/signals';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useUnmountCleanup(() => {\n    setCurrentTime(0);\n  });\n\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { throttle } from '../../util/schedulers';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Button from '../ui/Button';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  buttonText?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', buttonText, isForVideo, onClick, handleSponsoredClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text');\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const onButtonClick = useLastCallback(() => {\n    handleSponsoredClick();\n  });\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll allow-selection ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">\n            {text}\n          </p>\n        </div>\n      )}\n      {Boolean(buttonText) && (\n        <Button\n          className={buildClassName('media-viewer-footer-content', 'media-viewer-button')}\n          size=\"default\"\n          color=\"primary\"\n          isRectangular\n          onClick={onButtonClick}\n        >\n          {buttonText}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nexport const [getIsVideoWaiting, setIsVideoWaiting] = createSignal(false);\n\nexport default function useVideoWaitingSignal() {\n  useUnmountCleanup(() => {\n    setIsVideoWaiting(false);\n  });\n\n  return [getIsVideoWaiting, setIsVideoWaiting] as const;\n}\n","import { ApiMediaFormat } from '../../api/types';\n\nimport { IS_ANDROID, IS_IOS } from '../../util/browser/windowEnvironment';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport { callApi } from '../../api/gramjs';\nimport { requestMutation } from '../fasterdom/fasterdom';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = IS_MOBILE ? 40 : 80;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames = new Map<number, ImageBitmap>();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => {\n    videoPreview?.destroy();\n    videoPreview = undefined;\n  };\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ingarEvU\",\"preview\":\"TqpEWfl3\",\"previewCanvas\":\"fKVz2lln\",\"previewTime\":\"bGiNvx5D\",\"previewTimeText\":\"mnkqvOMR\",\"track\":\"Od9ZSc1U\",\"buffered\":\"ANe2DKfp\",\"played\":\"igaGLblf\",\"seeking\":\"beUP6SqY\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { createVideoPreviews, getPreviewDimensions, renderVideoPreview } from '../../lib/video-preview/VideoPreview';\nimport { animateNumber } from '../../util/animation';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents } from '../../util/captureEvents';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp, round } from '../../util/math';\n\nimport { useThrottledSignal } from '../../hooks/useAsyncResolvers';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  playbackRate: number;\n  isActive?: boolean;\n  isPlaying?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst LOCK_TIMEOUT = 250;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\n\nconst SeekLine: FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  playbackRate,\n  url,\n  isActive,\n  isPlaying,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  const seekerRef = useRef<HTMLDivElement>();\n  const [getCurrentTimeSignal] = useCurrentTimeSignal();\n  const [getIsWaiting] = useVideoWaitingSignal();\n  const getCurrentTime = useThrottledSignal(getCurrentTimeSignal, LOCK_TIMEOUT);\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  const previewCanvasRef = useRef<HTMLCanvasElement>();\n  const previewRef = useRef<HTMLDivElement>();\n  const progressRef = useRef<HTMLDivElement>();\n  const previewTimeRef = useRef<HTMLDivElement>();\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useLastCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  });\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (cancelAnimation) cancelAnimation();\n    cancelAnimation = undefined;\n    if (!isLockedRef.current && !isSeeking) {\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime, playbackRate, duration]);\n\n  useEffect(() => {\n    if (!isPlaying || getIsWaiting()) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    }\n  }, [isPlaying, getSelectedTime, getIsWaiting]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n    // eslint-disable-next-line\n  }, [isPlaying, playbackRate, duration]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = getPointerPosition(e).x;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const stopAnimation = () => {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      stopAnimation();\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      stopAnimation();\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      stopAnimation();\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, LOCK_TIMEOUT);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n    playbackRate,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            // @ts-ignore\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef,\n  useSignal,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { IconName } from '../../types/icons';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport SeekLine from './SeekLine';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n  onSeekingChange: (isSeeking: boolean) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n  onSeekingChange,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const closeTimeoutRef = useRef<number | undefined>();\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n      return undefined;\n    }\n    closeTimeoutRef.current = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useOldLang();\n\n  const handleSeek = useLastCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n    onSeekingChange(false);\n  });\n\n  const handleSeekStart = useLastCallback(() => {\n    setIsSeeking(true);\n    onSeekingChange(true);\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPlaying={isPlaying}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        playbackRate={playbackRate}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <Icon name={isPlaying ? 'pause' : 'play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <Icon name=\"pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <Icon name={isFullscreen ? 'smallscreen' : 'fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/browser/windowEnvironment';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp } from '../../util/math';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useFullscreen from '../../hooks/window/useFullscreen';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  isClickDisabled?: boolean;\n  isSponsoredMessage?: boolean;\n  timestamp?: number;\n  handleSponsoredClick?: (isFromMedia?: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n  isSponsoredMessage,\n  timestamp,\n  handleSponsoredClick,\n  onClose,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  const videoRef = useRef<HTMLVideoElement>();\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useLastCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  });\n\n  const handleLeaveFullscreen = useLastCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  });\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n  const lastMousePosition = useRef({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const updateMousePosition = (e: MouseEvent | TouchEvent) => {\n      lastMousePosition.current = getPointerPosition(e);\n    };\n\n    window.addEventListener('mousemove', updateMousePosition);\n    window.addEventListener('touchmove', updateMousePosition);\n\n    return () => {\n      window.removeEventListener('mousemove', updateMousePosition);\n      window.removeEventListener('touchmove', updateMousePosition);\n    };\n  }, []);\n\n  const checkMousePositionAndToggleControls = useLastCallback((clientX: number, clientY: number) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (clientX <= bounds.left || clientX >= bounds.right\n      || clientY <= bounds.top || clientY >= bounds.bottom) {\n      if (!getIsSeeking()) {\n        toggleControls(false);\n      }\n    }\n  });\n\n  const handleVideoMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const handleVideoLeave = useLastCallback((e) => {\n    checkMousePositionAndToggleControls(e.clientX, e.clientY);\n  });\n\n  const handleSeekingChange = useLastCallback((isSeeking: boolean) => {\n    setIsSeeking(isSeeking);\n    if (!isSeeking) {\n      const { x, y } = lastMousePosition.current;\n      checkMousePositionAndToggleControls(x, y);\n    }\n  });\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const isUnsupported = useUnsupportedMedia(videoRef, undefined, !url);\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransitionDeprecated(\n    !isBuffered && !isUnsupported, undefined, undefined, 'slow',\n  );\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransitionDeprecated(\n    IS_IOS && !isPlaying && !shouldRenderSpinner && !isUnsupported, undefined, undefined, 'slow',\n  );\n\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [, setIsVideoWaiting] = useVideoWaitingSignal();\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen || isUnsupported) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted, isUnsupported]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  useEffect(() => {\n    if (!timestamp) return;\n    videoRef.current!.currentTime = timestamp;\n    setCurrentTime(timestamp);\n  }, [setCurrentTime, timestamp]);\n\n  const togglePlayState = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isSponsoredMessage) {\n      handleSponsoredClick?.(true);\n      onClose(e);\n    }\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  });\n\n  useVideoCleanup(videoRef, bufferingHandlers);\n\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setIsVideoWaiting(false);\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  });\n\n  const handleEnded = useLastCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  });\n\n  const handleFullscreenChange = useLastCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  });\n\n  const handleSeek = useLastCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  });\n\n  const handleVolumeChange = useLastCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handlePlaybackRateChange = useLastCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  });\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseLeave={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onWaiting={() => setIsVideoWaiting(true)}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n          src={url}\n        />\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <Icon name=\"play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !isSponsoredMessage && !isUnsupported && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n          onSeekingChange={handleSeekingChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type React from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiDimensions, ApiMessage, ApiSponsoredMessage,\n} from '../../api/types';\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { MediaViewerItem, ViewableMedia } from './helpers/getViewableMedia';\n\nimport { MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION } from '../../config';\nimport {\n  selectIsMessageProtected, selectTabState,\n} from '../../global/selectors';\nimport { selectMessageTimestampableDuration } from '../../global/selectors/media';\nimport { ARE_WEBCODECS_SUPPORTED } from '../../util/browser/globalEnvironment';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport selectViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport useThrottledCallback from '../../hooks/useThrottledCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  item: MediaViewerItem;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  isMoving?: boolean;\n  onClose: () => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: () => void;\n};\n\ntype StateProps = {\n  viewableMedia?: ViewableMedia;\n  textMessage?: ApiMessage | ApiSponsoredMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  threadId?: ThreadId;\n  timestamp?: number;\n  maxTimestamp?: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\nconst PLAYBACK_SAVE_INTERVAL = 1000;\n\nconst MediaViewerContent = ({\n  item,\n  viewableMedia,\n  isActive,\n  textMessage,\n  origin,\n  withAnimation,\n  isProtected,\n  volume,\n  playbackRate,\n  isMuted,\n  isHidden,\n  isMoving,\n  threadId,\n  timestamp,\n  maxTimestamp,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}: OwnProps & StateProps) => {\n  const { updateLastPlaybackTimestamp } = getActions();\n\n  const lang = useOldLang();\n\n  const isAvatar = item.type === 'avatar';\n  const isSponsoredMessage = item.type === 'sponsoredMessage';\n  const { media } = viewableMedia || {};\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    mediaSize,\n    loadProgress,\n  } = useMediaProps({\n    media, isAvatar, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n  const [getCurrentTime] = useCurrentTimeSignal();\n\n  const isOpen = Boolean(media);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const updatePlaybackTimestamp = useThrottledCallback(() => {\n    if (!isActive || !textMessage || media?.mediaType !== 'video') return;\n    if (media.duration < MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION) return;\n\n    const message = 'id' in textMessage ? textMessage : undefined;\n    const currentTime = getCurrentTime();\n    if (!currentTime || !message || message.isInAlbum) return;\n\n    // Reset timestamp if we are close to the end of the video\n    const newTimestamp = media.duration - currentTime > PLAYBACK_SAVE_INTERVAL / 1000 ? currentTime : undefined;\n    updateLastPlaybackTimestamp({ chatId: message.chatId, messageId: message.id, timestamp: newTimestamp });\n  }, [getCurrentTime, isActive, media, textMessage], PLAYBACK_SAVE_INTERVAL);\n\n  useSignalEffect(updatePlaybackTimestamp, [getCurrentTime]);\n\n  if (!media) return undefined;\n\n  if (item.type === 'avatar') {\n    if (!isVideoAvatar) {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={media.id}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={mediaSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n            isSponsoredMessage={isSponsoredMessage}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        </div>\n      );\n    }\n  }\n\n  const textParts = textMessage && (\n    textMessage.content.action\n      ? (textMessage.content.action.type === 'suggestProfilePhoto'\n        ? lang('Conversation.SuggestedPhotoTitle') : undefined)\n      : renderMessageText({\n        message: textMessage, maxTimestamp, threadId, forcePlayback: true, isForMediaViewer: true,\n      }));\n  const buttonText = textMessage && 'buttonText' in textMessage ? textMessage.buttonText : undefined;\n  const hasFooter = Boolean(textParts);\n  const posterSize = calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={media.id}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={mediaSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n          isSponsoredMessage={isSponsoredMessage}\n          handleSponsoredClick={handleSponsoredClick}\n          timestamp={timestamp}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          buttonText={buttonText}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { item }): StateProps => {\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n      origin,\n      timestamp,\n      threadId,\n    } = selectTabState(global).mediaViewer;\n    const message = item.type === 'message' ? item.message : undefined;\n    const sponsoredMessage = item.type === 'sponsoredMessage' ? item.message : undefined;\n    const textMessage = message || sponsoredMessage;\n    const viewableMedia = selectViewableMedia(global, item);\n\n    const maxTimestamp = message && selectMessageTimestampableDuration(global, message, true);\n\n    return {\n      origin,\n      textMessage,\n      isProtected: message && selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n      threadId,\n      timestamp,\n      maxTimestamp,\n      viewableMedia,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  chatId?: string;\n  threadId?: ThreadId;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  getNextItem: (from: MediaViewerItem, direction: number) => MediaViewerItem | undefined;\n  selectItem: (item: MediaViewerItem) => void;\n  loadMoreItemsIfNeeded: (item: MediaViewerItem) => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  onClose: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\nlet cancelZoomAnimation: ReturnType<typeof animateNumber> | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  item,\n  isVideo,\n  isGif,\n  isOpen,\n  withAnimation,\n  isHidden,\n  isLoadingMoreMedia,\n  isSynced,\n  loadMoreItemsIfNeeded,\n  getNextItem,\n  selectItem,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const activeSlideRef = useRef<HTMLDivElement>();\n  const leftSlideRef = useRef<HTMLDivElement>();\n  const rightSlideRef = useRef<HTMLDivElement>();\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveItem, setActiveItem] = useSignal<MediaViewerItem | undefined>(item);\n  const activeItemRef = useSignalRef(getActiveItem);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeItem = useDerivedState(getActiveItem);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectItemDebounced = useDebouncedCallback(selectItem, [selectItem], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  });\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveItem(item);\n    }\n  }, [item, setActiveItem, transformRef]);\n\n  useEffect(() => {\n    if (!isSynced || !activeItem || isLoadingMoreMedia) return;\n    loadMoreItemsIfNeeded(activeItem);\n  }, [activeItem, loadMoreItemsIfNeeded, isSynced, isLoadingMoreMedia]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeItemRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const cActiveItem = activeItemRef.current;\n      if (cActiveItem === undefined) return false;\n      const nextItem = getNextItem(cActiveItem, direction);\n      if (nextItem !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const cActiveItem = activeItemRef.current;\n      const nextItem = cActiveItem && getNextItem(cActiveItem, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (nextItem !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      withWheelDrag: true,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > SWIPE_DIRECTION_THRESHOLD || absOffsetX / absOffsetY > SWIPE_DIRECTION_TOLERANCE) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    activeItemRef,\n    clearSwipeDirectionDebounced,\n    clickXThreshold,\n    getNextItem,\n    isFullscreen,\n    isHidden,\n    onClose,\n    selectItemDebounced,\n    setActiveItem,\n    setIsActiveDebounced,\n    setTransform,\n    shouldCloseOnVideo,\n    transformRef,\n    windowHeight,\n    windowWidth,\n    withAnimation,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  const [prevItem, nextItem] = useMemo(() => {\n    if (activeItem === undefined) return [undefined, undefined];\n    return [getNextItem(activeItem, -1), getNextItem(activeItem, 1)];\n  }, [activeItem, getNextItem]);\n\n  if (activeItem === undefined) return undefined;\n\n  const hasPrev = prevItem !== undefined;\n  const hasNext = nextItem !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={prevItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          item={activeItem}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n          onClose={onClose}\n          onFooterClick={onFooterClick}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={nextItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiPeer } from '../../api/types';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport {\n  isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectSender,\n} from '../../global/selectors';\nimport { formatMediaDateTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n};\n\ntype StateProps = {\n  owner?: ApiPeer;\n};\n\nconst BULLET = '\\u2022';\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  owner,\n  item,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useLastCallback(() => {\n    closeMediaViewer();\n\n    if (item?.type !== 'message') return;\n\n    const message = item.message;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId: message.chatId, messageId: message.id });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId: message.chatId, messageId: message.id });\n    }\n  });\n\n  const lang = useOldLang();\n\n  const subtitle = useMemo(() => {\n    if (!item || item.type === 'standalone') return undefined;\n\n    const avatarOwner = item.type === 'avatar' ? item.avatarOwner : undefined;\n    const profilePhotos = item.type === 'avatar' ? item.profilePhotos : undefined;\n    const avatar = profilePhotos?.photos[item.mediaIndex!];\n    const isFallbackAvatar = avatar?.id === profilePhotos?.fallbackPhoto?.id;\n    const isPersonalAvatar = avatar?.id === profilePhotos?.personalPhoto?.id;\n    const date = item.type === 'message' ? item.message.date : avatar?.date;\n    if (!date) return undefined;\n\n    const formattedDate = formatMediaDateTime(lang, date * 1000, true);\n    const count = profilePhotos?.count\n      && (profilePhotos.count + (profilePhotos?.fallbackPhoto ? 1 : 0));\n    const currentIndex = item.mediaIndex! + 1 + (profilePhotos?.personalPhoto ? -1 : 0);\n    const countText = count && lang('Of', [currentIndex, count]);\n\n    const parts: string[] = [];\n    if (avatar) {\n      const chat = !isUserId(avatarOwner!.id) ? avatarOwner as ApiChat : undefined;\n      const isChannel = chat && isChatChannel(chat);\n      const isGroup = chat && isChatGroup(chat);\n      parts.push(lang(\n        isPersonalAvatar ? 'lng_mediaview_profile_photo_by_you'\n          : isFallbackAvatar ? 'lng_mediaview_profile_public_photo'\n            : isChannel ? 'lng_mediaview_channel_photo'\n              : isGroup ? 'lng_mediaview_group_photo' : 'lng_mediaview_profile_photo',\n      ));\n    }\n\n    if (countText && !isPersonalAvatar && !isFallbackAvatar) {\n      parts.push(countText);\n    }\n\n    parts.push(formattedDate);\n\n    return parts.join(` ${BULLET} `);\n  }, [item, lang]);\n\n  if (!owner) {\n    return undefined;\n  }\n\n  const senderTitle = getPeerTitle(lang, owner);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      <Avatar key={owner.id} size=\"medium\" peer={owner} />\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {subtitle}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { item }): StateProps => {\n    const message = item?.type === 'message' ? item.message : undefined;\n    const messageSender = message && selectSender(global, message);\n\n    const owner = item?.type === 'avatar' ? item.avatarOwner : messageSender;\n\n    return {\n      owner,\n    };\n  },\n)(SenderInfo);\n","import type React from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPeer,\n  ApiPeerPhotos,\n  ApiPhoto,\n  ApiSponsoredMessage,\n} from '../../api/types';\nimport { type MediaViewerMedia, MediaViewerOrigin, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatMediaMessageIds, getMessagePaidMedia, isChatAdmin,\n} from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChatMediaSearch,\n  selectCurrentSharedMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerPhotos,\n  selectPerformanceSettingsValue,\n  selectScheduledMessage, selectSponsoredMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { isUserId } from '../../util/entities/ids';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { getMediaViewerItem, type MediaViewerItem, type ViewableMedia } from './helpers/getViewableMedia';\nimport selectViewableMedia from './helpers/getViewableMedia';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Icon from '../common/icons/Icon';\nimport ReportAvatarModal from '../common/ReportAvatarModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  messageId?: number;\n  message?: ApiMessage;\n  collectedMessageIds?: number[];\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatar?: ApiPhoto;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  chatMessages?: Record<number, ApiMessage>;\n  sponsoredMessage?: ApiSponsoredMessage;\n  standaloneMedia?: MediaViewerMedia[];\n  mediaIndex?: number;\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  withDynamicLoading?: boolean;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n  currentItem?: MediaViewerItem;\n  viewableMedia?: ViewableMedia;\n};\n\nconst ANIMATION_DURATION = 250;\nconst AVATAR_LOAD_TRIGGER = 4;\n\nconst MediaViewer = ({\n  chatId,\n  threadId,\n  messageId,\n  message,\n  collectedMessageIds,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatar,\n  avatarOwner,\n  profilePhotos,\n  chatMessages,\n  sponsoredMessage,\n  standaloneMedia,\n  mediaIndex,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n  withDynamicLoading,\n  isLoadingMoreMedia,\n  isSynced,\n  currentItem,\n  viewableMedia,\n}: StateProps) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n    searchChatMediaMessages,\n    loadMoreProfilePhotos,\n    clickSponsored,\n    openUrl,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || message || standaloneMedia || sponsoredMessage);\n  const { isMobile } = useAppLayout();\n\n  const { media, isSingle } = viewableMedia || {};\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const senderId = message?.senderId || avatarOwner?.id || message?.chatId;\n  const prevSenderId = usePreviousDeprecated<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportAvatarModalOpen, openReportAvatarModal, closeReportAvatarModal] = useFlag();\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n  } = useMediaProps({\n    media, isAvatar: Boolean(avatarOwner), origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReportAvatar = (() => {\n    if (isChatWithSelf) return false;\n    if (currentItem?.type !== 'avatar' || !avatarOwner) return false;\n    const info = currentItem.profilePhotos;\n    if (media === info.personalPhoto) return false;\n    return true;\n  })();\n  const isVisible = !isHidden && isOpen;\n\n  const messageMediaIds = useMemo(() => {\n    return withDynamicLoading\n      ? collectedMessageIds\n      : getChatMediaMessageIds(chatMessages || {}, collectedMessageIds || [], isFromSharedMedia);\n  }, [chatMessages, collectedMessageIds, isFromSharedMedia, withDynamicLoading]);\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || animationKey.current === undefined)) {\n    animationKey.current = isSingle ? 0 : (messageId || mediaIndex);\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      requestMutation(() => {\n        document.body.classList.toggle('is-media-viewer-open', isOpen);\n      });\n    }\n  }, [isMobile, isOpen]);\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    mql.addEventListener('change', forceUpdate);\n\n    return () => {\n      mql.removeEventListener('change', forceUpdate);\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePreviousDeprecated<ApiMessage | undefined>(message);\n  const prevIsHidden = usePreviousDeprecated<boolean | undefined>(isHidden);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const prevItem = usePreviousDeprecated(currentItem);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const textParts = message ? renderMessageText({ message, forcePlayback: true, isForMediaViewer: true }) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevItem !== currentItem;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (shouldAnimateOpening || !prevItem)) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message, mediaIndex);\n    }\n\n    if (isGhostAnimation && !isOpen && prevItem) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage, prevItem?.mediaIndex);\n    }\n  }, [\n    bestImageData, dimensions, hasFooter, isGhostAnimation, isOpen, isVideo, message, origin,\n    prevBestImageData, prevItem, prevMessage, prevOrigin, shouldAnimateOpening, mediaIndex,\n  ]);\n\n  const handleClose = useLastCallback(() => closeMediaViewer());\n\n  const handleFooterClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (e.target instanceof HTMLElement && e.target.closest('a')) return; // Prevent closing on timestamp click\n\n    handleClose();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId });\n    }\n  });\n\n  const handleSponsoredClick = useLastCallback((isFromMedia?: boolean) => {\n    if (!sponsoredMessage || !chatId) return;\n\n    clickSponsored({ isMedia: isFromMedia, isFullscreen: true, randomId: sponsoredMessage.randomId });\n    openUrl({ url: sponsoredMessage.url });\n    closeMediaViewer();\n  });\n\n  const handleForward = useLastCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [messageId!],\n    });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const loadMoreItemsIfNeeded = useLastCallback((item?: MediaViewerItem) => {\n    if (!item || isLoadingMoreMedia) return;\n\n    if (item.type === 'avatar') {\n      const isNearEnd = item.mediaIndex >= item.profilePhotos.photos.length - AVATAR_LOAD_TRIGGER;\n      if (!isNearEnd) return;\n      loadMoreProfilePhotos({ peerId: item.avatarOwner.id });\n    }\n\n    if (item.type === 'message' && withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: item.message.id });\n    }\n  });\n\n  const getNextItem = useLastCallback((from: MediaViewerItem, direction: number): MediaViewerItem | undefined => {\n    if (direction === 0 || isSingle) return undefined;\n\n    if (from.type === 'standalone') {\n      const { media: fromMedia, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && nextIndex < fromMedia.length) {\n        return { type: 'standalone', media: fromMedia, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'avatar') {\n      const { avatarOwner: fromAvatarOwner, profilePhotos: fromProfilePhotos, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && fromProfilePhotos && nextIndex < fromProfilePhotos.photos.length) {\n        return {\n          type: 'avatar',\n          avatarOwner: fromAvatarOwner,\n          profilePhotos: fromProfilePhotos,\n          mediaIndex: nextIndex,\n        };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'sponsoredMessage') {\n      const { message: fromSponsoredMessage, mediaIndex: fromSponsoredMessageIndex } = from;\n      const nextIndex = fromSponsoredMessageIndex! + direction;\n      if (nextIndex >= 0 && fromSponsoredMessage) {\n        return { type: 'sponsoredMessage', message: fromSponsoredMessage, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    const { message: fromMessage, mediaIndex: fromMediaIndex } = from;\n\n    const paidMedia = getMessagePaidMedia(fromMessage);\n    if (paidMedia) {\n      const nextIndex = fromMediaIndex! + direction;\n\n      if (nextIndex >= 0 && nextIndex < paidMedia.extendedMedia.length) {\n        return { type: 'message', message: fromMessage, mediaIndex: nextIndex };\n      }\n    }\n\n    const index = messageMediaIds?.indexOf(fromMessage.id);\n    if (index === undefined) return undefined;\n    const nextIndex = index + direction;\n    const nextMessageId = messageMediaIds![nextIndex];\n    const nextMessage = chatMessages?.[nextMessageId];\n    if (nextMessage) {\n      return { type: 'message', message: nextMessage };\n    }\n\n    return undefined;\n  });\n\n  const openMediaViewerItem = useLastCallback((item?: MediaViewerItem) => {\n    if (!item) {\n      handleClose();\n      return;\n    }\n\n    const itemChatId = item.type === 'avatar'\n      ? item.avatarOwner.id : item.type === 'message'\n        ? item.message.chatId : undefined;\n    const itemMessageId = item.type === 'message' ? item.message.id : undefined;\n    const itemStandaloneMedia = item.type === 'standalone' ? item.media : undefined;\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: itemChatId,\n      messageId: itemMessageId,\n      standaloneMedia: itemStandaloneMedia,\n      mediaIndex: item.mediaIndex,\n      isAvatarView: item.type === 'avatar',\n      withDynamicLoading,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const handleBeforeDelete = useLastCallback(() => {\n    const mediaCount = profilePhotos?.photos.length\n      || standaloneMedia?.length || messageMediaIds?.length || 0;\n    if (mediaCount <= 1 || !currentItem) {\n      handleClose();\n      return;\n    }\n    // Before deleting, select previous media\n    const prevMedia = getNextItem(currentItem, -1);\n    if (prevMedia) {\n      openMediaViewerItem(prevMedia);\n      return;\n    }\n\n    if ((currentItem.type === 'avatar' && isUserId(currentItem.avatarOwner.id)) || currentItem.type === 'standalone') {\n      // Keep current item, it'll update when indexes shift\n      return;\n    }\n\n    handleClose();\n  });\n\n  const lang = useOldLang();\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined} ref={headerRef}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          <SenderInfo\n            key={media?.id}\n            item={currentItem}\n          />\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          item={currentItem}\n          canUpdateMedia={canUpdateMedia}\n          canReportAvatar={canReportAvatar}\n          onBeforeDelete={handleBeforeDelete}\n          onReportAvatar={openReportAvatarModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportAvatarModal\n          isOpen={isReportAvatarModalOpen}\n          onClose={closeReportAvatarModal}\n          photo={avatar}\n          peerId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        item={currentItem}\n        loadMoreItemsIfNeeded={loadMoreItemsIfNeeded}\n        isLoadingMoreMedia={isLoadingMoreMedia}\n        isSynced={isSynced}\n        getNextItem={getNextItem}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectItem={openMediaViewerItem}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n        handleSponsoredClick={handleSponsoredClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      messageId,\n      origin,\n      isHidden,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isAvatarView,\n      isSponsoredMessage,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId, isSynced } = global;\n    const isChatWithSelf = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    if (isAvatarView) {\n      const avatarOwner = selectPeer(global, chatId!);\n      let canUpdateMedia = false;\n      if (avatarOwner) {\n        canUpdateMedia = isUserId(avatarOwner.id)\n          ? avatarOwner.id === currentUserId : isChatAdmin(avatarOwner as ApiChat);\n      }\n\n      const profilePhotos = selectPeerPhotos(global, chatId!);\n\n      const currentItem = getMediaViewerItem({\n        avatarOwner, standaloneMedia, profilePhotos, mediaIndex,\n      });\n      const viewableMedia = selectViewableMedia(global, currentItem);\n\n      return {\n        profilePhotos,\n        avatar: profilePhotos?.photos[mediaIndex!],\n        avatarOwner,\n        isLoadingMoreMedia: profilePhotos?.isLoading,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n        standaloneMedia,\n        mediaIndex,\n        isSynced,\n        currentItem,\n        viewableMedia,\n      };\n    }\n\n    let message: ApiMessage | undefined;\n    if (chatId && messageId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        message = selectScheduledMessage(global, chatId, messageId);\n      } else {\n        message = selectChatMessage(global, chatId, messageId);\n      }\n    }\n\n    let sponsoredMessage: ApiSponsoredMessage | undefined;\n    if (isSponsoredMessage && chatId) {\n      if (origin === MediaViewerOrigin.SponsoredMessage) {\n        sponsoredMessage = selectSponsoredMessage(global, chatId);\n      }\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (chatId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        chatMessages = selectChatScheduledMessages(global, chatId);\n      } else {\n        chatMessages = selectChatMessages(global, chatId);\n      }\n    }\n\n    let isLoadingMoreMedia = false;\n    const isOriginInline = origin === MediaViewerOrigin.Inline;\n    const isOriginAlbum = origin === MediaViewerOrigin.Album;\n    let collectedMessageIds: number[] | undefined;\n\n    if (chatId && threadId && messageId) {\n      if (withDynamicLoading && (isOriginInline || isOriginAlbum)) {\n        const currentSearch = selectCurrentChatMediaSearch(global);\n        isLoadingMoreMedia = Boolean(currentSearch?.isLoading);\n        const { foundIds } = (currentSearch?.currentSegment) || {};\n        collectedMessageIds = foundIds;\n      } else if (origin === MediaViewerOrigin.SharedMedia) {\n        const currentSearch = selectCurrentSharedMediaSearch(global);\n        const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n        collectedMessageIds = foundIds;\n      } else if (isOriginInline || isOriginAlbum) {\n        const outlyingList = selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n        collectedMessageIds = outlyingList || selectListedIds(global, chatId, threadId);\n      }\n    }\n\n    const currentItem = getMediaViewerItem({\n      message, standaloneMedia, mediaIndex, sponsoredMessage,\n    });\n    const viewableMedia = selectViewableMedia(global, currentItem);\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      sponsoredMessage,\n      collectedMessageIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isLoadingMoreMedia,\n      isSynced,\n      currentItem,\n      viewableMedia,\n    };\n  },\n)(MediaViewer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"bu_hGbaa\",\"fullSize\":\"W9A8SEMl\",\"backdrop\":\"OFh6u50Q\",\"captionBackdrop\":\"Jd1DYS6Y\",\"backdropNonInteractive\":\"xe67dhtF\",\"close\":\"Mye8Dwxa\",\"wrapper\":\"gLHHo5k8\",\"slideAnimation\":\"GJVwqV9e\",\"slideAnimationToActive\":\"_Yn4SWUB\",\"content\":\"hGCH03qc\",\"slideAnimationFromActive\":\"ZecqXqKy\",\"storyHeader\":\"e7HHuS1g\",\"composer\":\"FXineBYO\",\"caption\":\"RKedwa0I\",\"captionGradient\":\"sHNAfxzf\",\"media\":\"PVZ8TOWS\",\"mediaPreview\":\"lQfkulvp\",\"contentInner\":\"Wi0DXPH2\",\"name\":\"Ka1CGfzq\",\"slide\":\"urTtSsk9\",\"mobileSlide\":\"AjXOHOgE\",\"slidePreview\":\"Sef28wEh\",\"activeSlide\":\"uAlXNXJN\",\"slideInner\":\"g8ypsnnC\",\"mediaWrapper\":\"YiuvOPgT\",\"forward\":\"pGKsAszF\",\"storyIndicators\":\"jGDd2sza\",\"sender\":\"eMYhXF_X\",\"senderInfoTransition\":\"PXnfXZur\",\"senderInfo\":\"WpyVfrsc\",\"senderMeta\":\"jmKI_lhC\",\"senderName\":\"H1uod43o\",\"storyMetaRow\":\"zimpR8Hz\",\"storyMeta\":\"hGTnZuar\",\"closeButton\":\"WlLsjJ2Z\",\"actions\":\"GrsJNw3y\",\"active\":\"q756IpZB\",\"visibilityButton\":\"prxptFFf\",\"visibilityButtonSelf\":\"_MVsZpgB\",\"button\":\"TkphaPyQ\",\"buttonMenu\":\"K0_xAdzf\",\"captionInner\":\"D_5mWNmi\",\"captionContent\":\"ilyTRZtw\",\"captionText\":\"hmFA5qb1\",\"hasOverflow\":\"e1gyTmKe\",\"expanded\":\"HIMnUViv\",\"animate\":\"CvnxnCxN\",\"withShowMore\":\"Vq8pl_kQ\",\"captionShowMore\":\"bM5rlQtM\",\"navigate\":\"nZ30pf4g\",\"prev\":\"SXpRZiax\",\"next\":\"twOBFwUE\",\"modal\":\"nLPOogqS\",\"thumbnail\":\"MnNC7VHS\",\"ghost\":\"fME2l_yv\",\"ghost2\":\"TYicp2_K\",\"ghostImage\":\"HjoURJRK\",\"forwardHeader\":\"JJFtefb9\",\"clickable\":\"BsqMBS2I\",\"headerTitle\":\"G8OgmMDJ\",\"forwardInfo\":\"_M8CgT7s\",\"fromPeer\":\"nJr8QgYX\"};","import type { IDimensions } from '../../../types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport fastBlur from '../../../lib/fastBlur';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getPeerStoryHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport storyRibbonStyles from '../StoryRibbon.module.scss';\nimport styles from '../StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 200;\nconst OFFSET_BOTTOM = 3.5 * REM;\nconst MOBILE_OFFSET = 0.5 * REM;\nconst MOBILE_WIDTH = 600;\n\nexport function animateOpening(\n  userId: string,\n  origin: StoryViewerOrigin,\n  thumb: string,\n  bestImageData: string | undefined,\n  dimensions: IDimensions,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, userId);\n  if (!fromImage) {\n    return;\n  }\n  const { width: windowWidth, height: windowHeight } = windowSize.get();\n  let { width: toWidth, height: toHeight } = dimensions;\n\n  const isMobile = windowWidth <= MOBILE_WIDTH;\n\n  if (isMobile) {\n    toWidth = windowWidth - 2 * MOBILE_OFFSET;\n    toHeight = windowHeight - OFFSET_BOTTOM - 2 * MOBILE_OFFSET;\n\n    const safeAreaBottom = getComputedStyle(document.documentElement).getPropertyValue('--safe-area-bottom');\n    if (safeAreaBottom) {\n      toHeight -= parseFloat(safeAreaBottom);\n    }\n  }\n\n  const toLeft = isMobile ? MOBILE_OFFSET : (windowWidth - toWidth) / 2;\n  const toTop = isMobile ? MOBILE_OFFSET : (windowHeight - (toHeight + OFFSET_BOTTOM)) / 2;\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || thumb, !bestImageData);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: '',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  userId: string,\n  origin: StoryViewerOrigin,\n  bestImageData: string,\n) {\n  const { mediaEl: toImage } = getNodes(origin, userId);\n\n  const fromImage = document.getElementById('StoryViewer')!.querySelector<HTMLImageElement>(\n    `.${styles.mobileSlide} .${styles.media}, .${styles.activeSlide} .${styles.media}`,\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: toTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  const toTranslateX = (toLeft + toWidth / 2) - (fromLeft + fromWidth / 2);\n  const toTranslateY = (toTop + toHeight / 2) - (fromTop + fromHeight / 2);\n  const toScaleX = toWidth / fromWidth;\n  const toScaleY = toHeight / fromHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData);\n    applyStyles(ghost, {\n      top: `${fromTop}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromHeight}px`,\n    });\n\n    const ghost2 = createGhost(toImage.src, undefined, true);\n    const ghost2Top = (fromTop + fromHeight / 2) - fromWidth / 2;\n    applyStyles(ghost2, {\n      top: `${ghost2Top}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromWidth}px`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.appendChild(ghost2);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX}, ${toScaleY})`,\n      });\n\n      applyStyles(ghost2, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX})`,\n        opacity: '1',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n\n          if (document.body.contains(ghost2)) {\n            document.body.removeChild(ghost2);\n          }\n\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nfunction createGhost(source: string, hasBlur = false, isGhost2 = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add(!isGhost2 ? styles.ghost : styles.ghost2);\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n  img.classList.add(styles.ghostImage);\n\n  if (hasBlur) {\n    const canvas = document.createElement('canvas');\n    canvas.classList.add(styles.thumbnail);\n    img.onload = () => {\n      const ctx = canvas.getContext('2d', { alpha: false })!;\n      const {\n        width,\n        height,\n      } = img;\n\n      requestMutation(() => {\n        canvas.width = width;\n        canvas.height = height;\n\n        if (IS_CANVAS_FILTER_SUPPORTED) {\n          ctx.filter = `blur(${RADIUS}px)`;\n        }\n\n        ctx.drawImage(img, -RADIUS * 2, -RADIUS * 2, width + RADIUS * 4, height + RADIUS * 4);\n\n        if (!IS_CANVAS_FILTER_SUPPORTED) {\n          fastBlur(ctx, 0, 0, width, height, RADIUS, ITERATIONS);\n        }\n      });\n    };\n    img.src = source;\n    ghost.appendChild(canvas);\n  } else {\n    img.src = source;\n    ghost.appendChild(img);\n  }\n\n  return ghost;\n}\n\nfunction getNodes(origin: StoryViewerOrigin, userId: string) {\n  let containerSelector;\n  const mediaSelector = `#${getPeerStoryHtmlId(userId)}`;\n\n  switch (origin) {\n    case StoryViewerOrigin.StoryRibbon:\n      containerSelector = `#LeftColumn .${storyRibbonStyles.root}`;\n      break;\n    case StoryViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo';\n      break;\n    case StoryViewerOrigin.ChatList:\n      containerSelector = '#LeftColumn .chat-list';\n      break;\n    case StoryViewerOrigin.SearchResult:\n      containerSelector = '#LeftColumn .LeftSearch--container';\n      break;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement>(`${mediaSelector} img`);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n","import type { IDimensions } from '../../../types';\n\nimport { roundToNearestEven } from '../../../util/math';\n\nexport const BASE_STORY_WIDTH = 720;\nexport const BASE_STORY_HEIGHT = 1280;\nconst BASE_SCREEN_WIDTH = 1200;\nconst BASE_SCREEN_HEIGHT = 800;\nconst BASE_ACTIVE_SLIDE_WIDTH = 405;\nconst BASE_ACTIVE_SLIDE_HEIGHT = 720;\nconst BASE_SLIDE_WIDTH = 135;\nconst BASE_SLIDE_HEIGHT = 240;\nconst BASE_GAP_WIDTH = 40;\n\nexport function calculateSlideSizes(windowWidth: number, windowHeight: number): {\n  activeSlide: IDimensions;\n  slide: IDimensions;\n  scale: number;\n  toActiveScale: number;\n  fromActiveScale: number;\n} {\n  const scale = calculateScale(BASE_SCREEN_WIDTH, BASE_SCREEN_HEIGHT, windowWidth, windowHeight);\n\n  const activeSlideWidth = roundToNearestEven(BASE_ACTIVE_SLIDE_WIDTH * scale);\n  const slideWidth = roundToNearestEven(BASE_SLIDE_WIDTH * scale);\n  // Avoid fractional values to prevent blurry text\n  return {\n    activeSlide: {\n      width: activeSlideWidth,\n      height: roundToNearestEven(BASE_ACTIVE_SLIDE_HEIGHT * scale),\n    },\n    slide: {\n      width: slideWidth,\n      height: roundToNearestEven(BASE_SLIDE_HEIGHT * scale),\n    },\n    scale,\n    toActiveScale: activeSlideWidth / slideWidth,\n    fromActiveScale: slideWidth / activeSlideWidth,\n  };\n}\n\nexport function calculateOffsetX({\n  scale,\n  slideAmount,\n  isActiveSlideSize,\n  isMoveThroughActiveSlide,\n  isBackward,\n}: {\n  scale: number;\n  slideAmount: number;\n  isActiveSlideSize: boolean;\n  isMoveThroughActiveSlide?: boolean;\n  isBackward: boolean;\n}) {\n  const mainOffset = BASE_GAP_WIDTH + (isActiveSlideSize ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH);\n  const additionalOffset = (Math.abs(slideAmount) - 1)\n    * ((isMoveThroughActiveSlide ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH) + BASE_GAP_WIDTH);\n  const totalOffset = roundToNearestEven((mainOffset + additionalOffset) * scale);\n\n  return isBackward ? -totalOffset : totalOffset;\n}\n\nfunction calculateScale(baseWidth: number, baseHeight: number, newWidth: number, newHeight: number) {\n  const widthScale = newWidth / baseWidth;\n  const heightScale = newHeight / baseHeight;\n\n  return Math.min(widthScale, heightScale);\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport { calculateSlideSizes } from '../helpers/dimensions';\n\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nexport default function useSlideSizes() {\n  const { width: windowWidth, height: windowHeight } = useWindowSize();\n  return useMemo(() => calculateSlideSizes(windowWidth, windowHeight), [windowWidth, windowHeight]);\n}\n","import type { ApiTypeStory } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStoryMediaHash, hasMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nexport default function useStoryProps(\n  story?: ApiTypeStory, isCurrentUserPremium = false, isDropdownMenuOpen = false,\n) {\n  const isLoadedStory = story && 'content' in story;\n  const isDeletedStory = story && 'isDeleted' in story;\n  const hasText = isLoadedStory ? hasMessageText(story) : false;\n  const hasForwardInfo = isLoadedStory && Boolean(story.forwardInfo);\n\n  let thumbnail: string | undefined;\n  if (isLoadedStory) {\n    if (story.content.photo?.thumbnail) {\n      thumbnail = story.content.photo.thumbnail.dataUri;\n    }\n    if (story.content.video?.thumbnail?.dataUri) {\n      thumbnail = story.content.video.thumbnail.dataUri;\n    }\n  }\n\n  const previewHash = isLoadedStory ? getStoryMediaHash(story) : undefined;\n  const previewBlobUrl = useMedia(previewHash);\n  const isVideo = Boolean(isLoadedStory && story.content.video);\n  const noSound = isLoadedStory && story.content.video?.noSound;\n  const fullMediaHash = isLoadedStory ? getStoryMediaHash(story, 'full') : undefined;\n  const fullMediaData = useMedia(fullMediaHash, !story, isVideo ? ApiMediaFormat.Progressive : ApiMediaFormat.BlobUrl);\n  const altMediaHash = isVideo && isLoadedStory ? getStoryMediaHash(story, 'full', true) : undefined;\n  const altMediaData = useMedia(altMediaHash, !story, ApiMediaFormat.Progressive);\n\n  const hasFullData = Boolean(fullMediaData || altMediaData);\n  const bestImageData = isVideo ? previewBlobUrl : fullMediaData || previewBlobUrl;\n  const hasThumb = !previewBlobUrl && !hasFullData;\n\n  const canDownload = isCurrentUserPremium && isLoadedStory && !story.noForwards;\n  const downloadHash = isLoadedStory ? getStoryMediaHash(story, 'download') : undefined;\n  const downloadMediaData = useMedia(downloadHash, !canDownload && !isDropdownMenuOpen);\n\n  return {\n    isLoadedStory,\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewHash,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaHash,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    bestImageData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GrE47IXS\",\"closeButton\":\"NlWSF1pA\",\"stealthIcon\":\"qKi5jsGM\",\"title\":\"BFctFGoT\",\"description\":\"fZIJH4IG\",\"listItem\":\"RGD70uBt\",\"icon\":\"HCYfPccW\",\"button\":\"AM_sxoXP\",\"subtitle\":\"L8oRQyKb\"};","import { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStealthMode } from '../../api/types';\n\nimport { selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport TextTimer from '../ui/TextTimer';\n\nimport styles from './StealthModeModal.module.scss';\n\ntype StateProps = {\n  isOpen?: boolean;\n  stealthMode?: ApiStealthMode;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StealthModeModal = ({ isOpen, stealthMode, isCurrentUserPremium }: StateProps) => {\n  const {\n    toggleStealthModal,\n    activateStealthMode,\n    showNotification,\n    openPremiumModal,\n  } = getActions();\n  const [isOnCooldown, setIsOnCooldown] = useState(false);\n\n  useEffect(() => {\n    if (!stealthMode) return;\n    const serverTime = getServerTime();\n    if (stealthMode.cooldownUntil && stealthMode.cooldownUntil > serverTime) {\n      setIsOnCooldown(true);\n    }\n  }, [stealthMode, isOpen]);\n\n  const lang = useOldLang();\n\n  const handleTimerEnds = useLastCallback(() => {\n    setIsOnCooldown(false);\n  });\n\n  const handleClose = useLastCallback(() => {\n    toggleStealthModal({ isOpen: false });\n  });\n\n  const handleActivate = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({ initialSection: 'stories' });\n      return;\n    }\n\n    activateStealthMode();\n    showNotification({\n      title: lang('StealthModeOn'),\n      message: lang('StealthModeOnHint'),\n    });\n    toggleStealthModal({ isOpen: false });\n  });\n\n  return (\n    <Modal\n      className=\"component-theme-dark\"\n      contentClassName={styles.root}\n      isOpen={isOpen}\n      isSlim\n      onClose={handleClose}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.stealthIcon}>\n        <Icon name=\"eye-crossed-outline\" />\n      </div>\n      <div className={styles.title}>{lang('StealthMode')}</div>\n      <div className={styles.description}>\n        {lang(isCurrentUserPremium ? 'StealthModeHint' : 'StealthModePremiumHint')}\n      </div>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-past\" className={styles.icon} />}\n      >\n        <span className=\"title\">{lang('HideRecentViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideRecentViewsDescription')}</span>\n      </ListItem>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-future\" className={styles.icon} aria-hidden />}\n      >\n        <span className=\"title\">{lang('HideNextViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideNextViewsDescription')}</span>\n      </ListItem>\n      <Button\n        className={styles.button}\n        size=\"smaller\"\n        disabled={isOnCooldown}\n        isShiny={!isCurrentUserPremium}\n        withPremiumGradient={!isCurrentUserPremium}\n        onClick={handleActivate}\n      >\n        {!isCurrentUserPremium ? lang('UnlockStealthMode')\n          : isOnCooldown\n            ? (<TextTimer langKey=\"AvailableIn\" endsAt={stealthMode!.cooldownUntil!} onEnd={handleTimerEnds} />)\n            : lang('EnableStealthMode')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const tabState = selectTabState(global);\n\n  return {\n    isOpen: tabState.storyViewer?.isStealthModalOpen,\n    stealthMode: global.stories.stealthMode,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StealthModeModal));\n","import { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ninterface OwnProps {\n  isOpen: boolean;\n  story?: ApiTypeStory;\n  onClose: NoneToVoidFunction;\n}\n\nfunction StoryDeleteConfirmModal({\n  isOpen, story, onClose,\n}: OwnProps) {\n  const { deleteStory, openNextStory } = getActions();\n\n  const lang = useOldLang();\n\n  const handleDeleteStoryClick = useCallback(() => {\n    if (!story) {\n      return;\n    }\n\n    openNextStory();\n    deleteStory({ peerId: story.peerId, storyId: story.id });\n    onClose();\n  }, [onClose, story]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('DeleteStoryTitle')}\n      text={lang('DeleteStorySubtitle')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteStoryClick}\n      confirmIsDestructive\n      className=\"component-theme-dark\"\n    />\n  );\n}\n\nexport default memo(StoryDeleteConfirmModal);\n","import { memo, useMemo, useState } from '../../../lib/teact/teact';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\n\ninterface OwnProps {\n  id: string;\n  contactListIds?: string[];\n  currentUserId: string;\n  selectedIds?: string[];\n  lockedIds?: string[];\n  onSelect: (selectedIds: string[]) => void;\n}\n\nfunction AllowDenyList({\n  id,\n  contactListIds,\n  currentUserId,\n  selectedIds,\n  lockedIds,\n  onSelect,\n}: OwnProps) {\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((userId) => userId !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...selectedIds || [], ...contactIds], query: searchQuery, type: 'user' }));\n  }, [contactListIds, currentUserId, searchQuery, selectedIds]);\n\n  return (\n    <PeerPicker\n      key={id}\n      itemIds={displayedIds}\n      selectedIds={selectedIds ?? MEMO_EMPTY_ARRAY}\n      lockedSelectedIds={lockedIds}\n      filterValue={searchQuery}\n      filterPlaceholder={lang('Search')}\n      searchInputId={`${id}-picker-search`}\n      isSearchable\n      withDefaultPadding\n      forceShowSelf\n      onSelectedIdsChange={onSelect}\n      onFilterChange={setSearchQuery}\n      allowMultiple\n      withStatus\n      itemInputType=\"checkbox\"\n    />\n  );\n}\n\nexport default memo(AllowDenyList);\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonHolder\":\"BDK_pgpt\",\"active\":\"N8ujSwlC\"};","import {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nimport styles from './CloseFriends.module.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  currentUserId: string;\n  usersById: Record<string, ApiUser>;\n  contactListIds?: string[];\n  onClose: NoneToVoidFunction;\n};\n\nfunction CloseFriends({\n  isActive, contactListIds, usersById, currentUserId, onClose,\n}: OwnProps) {\n  const { saveCloseFriends } = getActions();\n\n  const lang = useOldLang();\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>([]);\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((id) => id !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...closeFriendIds, ...contactIds], query: searchQuery, type: 'user' }));\n  }, [closeFriendIds, contactListIds, currentUserId, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (!prevIsActive && isActive) {\n      setIsSubmitShown(false);\n      setNewSelectedContactIds(closeFriendIds);\n    }\n  }, [isActive, closeFriendIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useLastCallback(() => {\n    saveCloseFriends({ userIds: newSelectedContactIds });\n    onClose();\n  });\n\n  return (\n    <>\n      <PeerPicker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        searchInputId=\"close-friends-picker-search\"\n        isSearchable\n        withDefaultPadding\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        withStatus\n        itemInputType=\"checkbox\"\n      />\n\n      <div className={buildClassName(styles.buttonHolder, isSubmitShown && styles.active)}>\n        <FloatingActionButton\n          isShown={isSubmitShown}\n          onClick={handleSubmit}\n          ariaLabel={lang('Save')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n    </>\n  );\n}\n\nexport default memo(CloseFriends);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"hz7SomkK\",\"header\":\"NV6Rt2g9\",\"closeButton\":\"SN1GFS6L\",\"headerTitle\":\"gi0Y6Ns6\",\"content\":\"sTaVDkiD\",\"section\":\"eUiuPoEC\",\"title\":\"iPPiw9DI\",\"list\":\"OUP1Ss0W\",\"option\":\"JL33Sa3b\",\"checked\":\"qVPo_cVL\",\"input\":\"zsDaUk0i\",\"icon\":\"AfYCVlys\",\"action\":\"njMeBBwY\",\"optionContent\":\"TUAAnG2w\",\"footer\":\"r24Qz2bf\",\"info\":\"ljeRVBOm\",\"submit\":\"RwNLN_rH\"};","import type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPrivacySettings, ApiStory, ApiUser, PrivacyVisibility,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectPeerStory, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getHours } from '../../util/dates/units';\nimport stopEvent from '../../util/stopEvent';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Switcher from '../ui/Switcher';\nimport Transition from '../ui/Transition';\nimport AllowDenyList from './privacy/AllowDenyList';\nimport CloseFriends from './privacy/CloseFriends';\n\nimport styles from './StorySettings.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  onClose?: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  story?: ApiStory;\n  visibility?: ApiPrivacySettings;\n  contactListIds?: string[];\n  usersById: Record<string, ApiUser>;\n  currentUserId: string;\n}\n\ntype PrivacyAction = 'blockUserIds' | 'closeFriends' | 'blockContactUserIds' | 'allowUserIds';\n\ninterface PrivacyOption {\n  name: string;\n  value: PrivacyVisibility;\n  color: [string, string];\n  icon: IconName;\n  actions?: PrivacyAction;\n}\n\nconst OPTIONS: PrivacyOption[] = [{\n  name: 'StoryPrivacyOptionEveryone',\n  value: 'everybody',\n  color: ['#50ABFF', '#007AFF'],\n  icon: 'channel-filled',\n  actions: 'blockUserIds',\n}, {\n  name: 'StoryPrivacyOptionContacts',\n  value: 'contacts',\n  color: ['#C36EFF', '#8B60FA'],\n  icon: 'user-filled',\n  actions: 'blockContactUserIds',\n}, {\n  name: 'StoryPrivacyOptionCloseFriends',\n  value: 'closeFriends',\n  color: ['#88D93A', '#30B73B'],\n  icon: 'favorite-filled',\n  actions: 'closeFriends',\n}, {\n  name: 'StoryPrivacyOptionSelectedContacts',\n  value: 'nobody',\n  color: ['#FFB743', '#F69A36'],\n  icon: 'group-filled',\n  actions: 'allowUserIds',\n}];\n\nenum Screens {\n  privacy,\n  allowList,\n  closeFriends,\n  denyList,\n}\n\nfunction StorySettings({\n  isOpen,\n  story,\n  visibility,\n  contactListIds,\n  usersById,\n  currentUserId,\n  onClose,\n}: OwnProps & StateProps) {\n  const { editStoryPrivacy, toggleStoryInProfile } = getActions();\n\n  const lang = useOldLang();\n  const [isOpenModal, openModal, closeModal] = useFlag(false);\n  const [privacy, setPrivacy] = useState<ApiPrivacySettings | undefined>(visibility);\n  const [isPinned, setIsPinned] = useState(story?.isInProfile);\n  const [activeKey, setActiveKey] = useState<Screens>(Screens.privacy);\n  const [editingBlockingCategory, setEditingBlockingCategory] = useState<PrivacyVisibility>('everybody');\n  const isBackButton = activeKey !== Screens.privacy;\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const lockedIds = useMemo(() => {\n    if (activeKey === Screens.allowList\n      && (!privacy?.allowUserIds?.length || privacy.allowUserIds[0] === currentUserId)\n    ) {\n      return [currentUserId];\n    }\n\n    return undefined;\n  }, [activeKey, currentUserId, privacy?.allowUserIds]);\n\n  const selectedBlockedIds = useMemo(() => {\n    if (editingBlockingCategory !== privacy?.visibility) return [];\n    return privacy?.blockUserIds || [];\n  }, [editingBlockingCategory, privacy?.blockUserIds, privacy?.visibility]);\n\n  const handleAllowUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      allowUserIds: newIds?.length ? newIds?.filter((id) => id !== currentUserId) : [currentUserId],\n    });\n  });\n\n  const handleDenyUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      blockUserIds: newIds,\n      visibility: editingBlockingCategory,\n    });\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      setActiveKey(Screens.privacy);\n      openModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setPrivacy(visibility);\n  }, [visibility]);\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (activeKey === Screens.privacy) {\n      closeModal();\n      return;\n    }\n\n    setActiveKey(Screens.privacy);\n  });\n\n  function handleVisibilityChange(newVisibility: PrivacyVisibility) {\n    setPrivacy({\n      ...privacy!,\n      visibility: newVisibility,\n    });\n  }\n\n  function handleActionClick(e: React.MouseEvent<HTMLDivElement>, action: PrivacyAction) {\n    stopEvent(e);\n\n    switch (action) {\n      case 'closeFriends':\n        setActiveKey(Screens.closeFriends);\n        break;\n      case 'allowUserIds':\n        setActiveKey(Screens.allowList);\n        break;\n      case 'blockUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('everybody');\n        break;\n      case 'blockContactUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('contacts');\n        break;\n    }\n  }\n\n  const handleIsPinnedToggle = useLastCallback(() => {\n    setIsPinned(!isPinned);\n  });\n\n  // console.warn(privacy?.visibility, story?.visibility, OPTIONS);\n\n  const handleSubmit = useLastCallback(() => {\n    editStoryPrivacy({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      privacy: privacy!,\n    });\n    if (story!.isInProfile !== isPinned) {\n      toggleStoryInProfile({ peerId: story!.peerId, storyId: story!.id, isInProfile: isPinned });\n    }\n    closeModal();\n  });\n\n  function renderActionName(action: PrivacyAction) {\n    if (action === 'closeFriends') {\n      if (closeFriendIds.length === 0) {\n        return lang('StoryPrivacyOptionCloseFriendsDetail');\n      }\n\n      if (closeFriendIds.length === 1) {\n        return getPeerTitle(lang, usersById[closeFriendIds[0]]);\n      }\n\n      return lang('StoryPrivacyOptionPeople', closeFriendIds.length, 'i');\n    }\n\n    if ((action === 'blockUserIds' && privacy?.visibility === 'everybody')\n      || (action === 'blockContactUserIds' && privacy?.visibility === 'contacts')) {\n      if (!privacy?.blockUserIds?.length) {\n        return lang('StoryPrivacyOptionContactsDetail');\n      }\n\n      if (privacy.blockUserIds.length === 1) {\n        return lang('StoryPrivacyOptionExcludePerson', getUserFullName(usersById[privacy.blockUserIds[0]]));\n      }\n\n      return lang('StoryPrivacyOptionExcludePeople', privacy.blockUserIds.length, 'i');\n    }\n\n    if (!privacy?.allowUserIds || privacy.allowUserIds.length === 0) {\n      return lang('StoryPrivacyOptionSelectedContactsDetail');\n    }\n\n    if (privacy.allowUserIds.length === 1) {\n      return getUserFullName(usersById[privacy.allowUserIds[0]]);\n    }\n\n    return lang('StoryPrivacyOptionPeople', privacy.allowUserIds.length, 'i');\n  }\n\n  function renderHeaderContent() {\n    switch (activeKey) {\n      case Screens.privacy:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertEditTitle')}</h3>;\n      case Screens.allowList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertSelectContactsTitle')}</h3>;\n      case Screens.closeFriends:\n        return <h3 className={styles.headerTitle}>{lang('CloseFriends')}</h3>;\n      case Screens.denyList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertExcludedContactsTitle')}</h3>;\n    }\n  }\n\n  function renderContent(isActive: boolean) {\n    switch (activeKey) {\n      case Screens.privacy:\n        return renderPrivacyList();\n      case Screens.closeFriends:\n        return (\n          <CloseFriends\n            key=\"close-friends\"\n            isActive={isActive}\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            onClose={handleCloseButtonClick}\n          />\n        );\n      case Screens.denyList:\n        return (\n          <AllowDenyList\n            key=\"deny-list\"\n            id=\"deny-list\"\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            selectedIds={selectedBlockedIds}\n            onSelect={handleDenyUserIdsChange}\n          />\n        );\n      case Screens.allowList:\n        return (\n          <AllowDenyList\n            key=\"allow-list\"\n            id=\"allow-list\"\n            contactListIds={contactListIds}\n            lockedIds={lockedIds}\n            currentUserId={currentUserId}\n            selectedIds={privacy?.allowUserIds}\n            onSelect={handleAllowUserIdsChange}\n          />\n        );\n    }\n  }\n\n  function renderPrivacyList() {\n    const storyLifeTime = story ? getHours(story.expireDate - story.date) : 0;\n\n    return (\n      <>\n        <div className={styles.section}>\n          <h3 className={styles.title}>{lang('StoryPrivacyAlertSubtitleProfile')}</h3>\n          <div className={styles.list}>\n            {OPTIONS.map((option) => (\n              <label\n                key={option.value}\n                className={buildClassName(styles.option, option.value === privacy?.visibility && styles.checked)}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"story_privacy\"\n                  className={styles.input}\n                  value={option.value}\n                  checked={option.value === privacy?.visibility}\n                  onChange={() => handleVisibilityChange(option.value)}\n                  teactExperimentControlled\n                />\n                <span\n                  className={styles.icon}\n                  style={`--color-from: ${option.color[0]}; --color-to: ${option.color[1]}`}\n                >\n                  <Icon name={option.icon} />\n                </span>\n                <div className={styles.optionContent}>\n                  <span className={buildClassName(styles.option_name)}>{lang(option.name)}</span>\n                  {option.actions && (\n                    <div\n                      tabIndex={0}\n                      role=\"button\"\n                      className={styles.action}\n                      aria-label={lang('Edit')}\n                      onClick={(e) => { handleActionClick(e, option.actions!); }}\n                    >\n                      <span className={styles.actionInner}>{renderActionName(option.actions)}</span>\n                      <Icon name=\"next\" />\n                    </div>\n                  )}\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <ListItem ripple onClick={handleIsPinnedToggle}>\n            <span>{lang('StoryKeep')}</span>\n            <Switcher\n              id=\"group-notifications\"\n              label={lang('StoryKeep')}\n              checked={isPinned}\n              inactive\n            />\n          </ListItem>\n        </div>\n        <div className={styles.footer}>\n          <div className={styles.info}>{lang('StoryKeepInfo', storyLifeTime)}</div>\n          <div className={styles.submit}>\n            <Button onClick={handleSubmit}>{lang('StoryPrivacyButtonSave')}</Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpenModal}\n      className={buildClassName(styles.modal, 'component-theme-dark')}\n      onClose={closeModal}\n      noBackdrop\n      onCloseAnimationEnd={onClose}\n    >\n      <div className={styles.header}>\n        <Button\n          className={buildClassName(styles.closeButton, 'close-button')}\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleCloseButtonClick}\n          ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n        >\n          <div className={buildClassName('animated-close-icon', isBackButton && 'state-back')} />\n        </Button>\n        <Transition name=\"slideFade\" activeKey={activeKey}>\n          {renderHeaderContent()}\n        </Transition>\n      </div>\n      <Transition\n        activeKey={activeKey}\n        name=\"slideFade\"\n        slideClassName=\"ChatOrUserPicker_slide\"\n        className={styles.content}\n      >\n        {renderContent}\n      </Transition>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      storyId, peerId,\n    },\n  } = selectTabState(global);\n  const story = (peerId && storyId)\n    ? selectPeerStory(global, peerId, storyId)\n    : undefined;\n\n  return {\n    story: story && 'content' in story ? story : undefined,\n    visibility: story && 'visibility' in story ? story.visibility : undefined,\n    contactListIds: global.contactList?.userIds,\n    usersById: global.users.byId,\n    currentUserId: global.currentUserId!,\n  };\n})(StorySettings));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStoryForwardInfo,\n  ApiTypeStory,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectPeer, selectPeerStory } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\nimport { renderTextWithEntities } from '../helpers/renderTextWithEntities';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\nimport PeerColorWrapper from '../PeerColorWrapper';\nimport EmojiIconBackground from './EmojiIconBackground';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  forwardInfo: ApiStoryForwardInfo;\n  className?: string;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  story?: ApiTypeStory;\n};\n\nconst EmbeddedStoryForward: FC<OwnProps & StateProps> = ({\n  className,\n  forwardInfo,\n  sender,\n  story,\n}) => {\n  const { openStoryViewer, loadPeerStoriesByIds, openChat } = getActions();\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!story && forwardInfo.fromPeerId && forwardInfo.storyId) {\n      loadPeerStoriesByIds({\n        peerId: forwardInfo.fromPeerId,\n        storyIds: [forwardInfo.storyId],\n      });\n    }\n  }, [forwardInfo, story]);\n\n  const senderTitle = sender ? getPeerTitle(lang, sender) : forwardInfo.fromName;\n\n  const openOriginalStory = useLastCallback(() => {\n    const { fromPeerId, storyId } = forwardInfo;\n    if (!fromPeerId) return;\n\n    const isStoryReady = story && !('isDeleted' in story && story.isDeleted);\n\n    if (isStoryReady) {\n      openStoryViewer({\n        peerId: fromPeerId,\n        storyId,\n        isSingleStory: true,\n      });\n    } else {\n      openChat({ id: fromPeerId });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(openOriginalStory);\n\n  function renderTextContent() {\n    if (story && 'content' in story && story.content.text) {\n      return (\n        <p className=\"embedded-text-wrapper\">\n          {renderTextWithEntities(story.content.text)}\n        </p>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSender() {\n    if (!sender || !senderTitle) {\n      return undefined;\n    }\n\n    const icon: IconName | undefined = !isUserId(sender.id) ? 'channel-filled' : 'user-filled';\n\n    return (\n      <>\n        {icon && <Icon name={icon} className=\"embedded-chat-icon\" />}\n        {senderTitle && renderText(senderTitle)}\n      </>\n    );\n  }\n\n  return (\n    <PeerColorWrapper\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        getPeerColorClass(sender, true, true),\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {sender?.color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          emojiDocumentId={sender.color.backgroundEmojiId}\n          className=\"EmbeddedMessage--background-icons\"\n        />\n      )}\n      <div className=\"message-text\">\n        {renderTextContent()}\n        <div className=\"message-title\">\n          {renderSender()}\n        </div>\n      </div>\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { forwardInfo }): StateProps => {\n    const sender = forwardInfo.fromPeerId ? selectPeer(global, forwardInfo.fromPeerId) : undefined;\n    const story = forwardInfo.storyId && forwardInfo.fromPeerId\n      ? selectPeerStory(global, forwardInfo.fromPeerId, forwardInfo.storyId) : undefined;\n    return {\n      sender,\n      story,\n    };\n  },\n)(EmbeddedStoryForward));\n","import {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../util/buildClassName';\nimport calcTextLineHeightAndCount from '../../util/element/calcTextLineHeightAndCount';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport EmbeddedStoryForward from '../common/embedded/EmbeddedStoryForward';\nimport MessageText from '../common/MessageText';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  story: ApiStory;\n  isExpanded: boolean;\n  className?: string;\n  onExpand: NoneToVoidFunction;\n  onFold?: NoneToVoidFunction;\n}\n\nconst EXPAND_ANIMATION_DURATION_MS = 400;\nconst LINES_TO_SHOW = 3;\n\nfunction StoryCaption({\n  story, isExpanded, className, onExpand, onFold,\n}: OwnProps) {\n  const lang = useOldLang();\n  const ref = useRef<HTMLDivElement>();\n  const contentRef = useRef<HTMLDivElement>();\n  const textRef = useRef<HTMLDivElement>();\n  const showMoreButtonRef = useRef<HTMLDivElement>();\n  const renderingStory = useCurrentOrPrev(story, true);\n\n  const caption = renderingStory?.content.text;\n\n  const [hasOverflow, setHasOverflow] = useState(false);\n  const prevIsExpanded = usePrevDuringAnimation(isExpanded || undefined, EXPAND_ANIMATION_DURATION_MS);\n  const isInExpandedState = isExpanded || prevIsExpanded;\n\n  useEffect(() => {\n    requestMutation(() => {\n      if (!contentRef.current) {\n        return;\n      }\n\n      if (isExpanded) {\n        addExtraClass(contentRef.current, styles.animate);\n      } else {\n        removeExtraClass(contentRef.current, styles.animate);\n      }\n    });\n  }, [isExpanded]);\n\n  const canExpand = hasOverflow && !isInExpandedState;\n  const { shouldRender: shouldRenderShowMore, transitionClassNames } = useShowTransitionDeprecated(\n    canExpand, undefined, true, 'slow', true,\n  );\n\n  // Setup gradient to clip caption before button\n  useLayoutEffect(() => {\n    requestMeasure(() => {\n      const container = contentRef.current;\n      const button = showMoreButtonRef.current;\n      if (!container || !button) {\n        return;\n      }\n\n      const { offsetWidth } = button;\n\n      requestMutation(() => {\n        container.style.setProperty('--expand-button-width', `${offsetWidth}px`);\n      });\n    });\n  }, [shouldRenderShowMore, lang]);\n\n  useLayoutEffect(() => {\n    requestForcedReflow(() => {\n      if (!contentRef.current || !textRef.current) {\n        return undefined;\n      }\n\n      const container = contentRef.current;\n      const textContainer = textRef.current;\n\n      const textOffsetTop = textContainer.offsetTop;\n      const { lineHeight, totalLines } = calcTextLineHeightAndCount(textContainer);\n      const isOverflowing = totalLines > LINES_TO_SHOW;\n      const overflowShift = textOffsetTop + lineHeight * LINES_TO_SHOW;\n\n      return () => {\n        if (isOverflowing) {\n          addExtraClass(container, styles.hasOverflow);\n          setHasOverflow(true);\n        }\n\n        container.style.setProperty('--_overflow-shift', `${overflowShift}px`);\n      };\n    });\n  }, [caption]);\n\n  useEffect(() => {\n    if (!isExpanded) {\n      ref.current?.scrollTo({ top: 0 });\n    }\n  }, [isExpanded]);\n\n  const fullClassName = buildClassName(\n    styles.captionContent,\n    isInExpandedState && styles.expanded,\n    shouldRenderShowMore && styles.withShowMore,\n  );\n\n  return (\n    <div className={buildClassName(styles.caption, className)}>\n      <div\n        ref={contentRef}\n        className={fullClassName}\n        role={canExpand ? 'button' : undefined}\n        onClick={canExpand ? onExpand : onFold}\n      >\n        <div\n          ref={ref}\n          className={buildClassName(styles.captionInner, 'allow-selection', 'custom-scroll')}\n        >\n          {renderingStory?.forwardInfo && (\n            <EmbeddedStoryForward\n              forwardInfo={renderingStory.forwardInfo}\n              className={styles.forwardInfo}\n            />\n          )}\n          {renderingStory && caption && (\n            <div ref={textRef} className={styles.captionText}>\n              <MessageText\n                messageOrStory={renderingStory}\n                withTranslucentThumbs\n                forcePlayback\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      {shouldRenderShowMore && (\n        <div\n          ref={showMoreButtonRef}\n          className={buildClassName(styles.captionShowMore, transitionClassNames)}\n          onClick={onExpand}\n        >\n          {lang('Story.CaptionShowMore')}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(StoryCaption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YVD19vOP\",\"viewInfo\":\"cknL5COh\",\"interactive\":\"pJAyeGkG\",\"avatars\":\"Vz_VtJ16\",\"spacer\":\"kKoeDk3Z\",\"reactionCount\":\"sf3u_6Vh\",\"reactionCountHeart\":\"Er2XKRqi\",\"footerItem\":\"vJRk_UUk\",\"views\":\"nIv3YAnZ\",\"viewIcon\":\"WyBiNM6e\",\"reactionButton\":\"lpDXVIuf\",\"reactionHeart\":\"twgMDT1y\"};","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { HEART_REACTION } from '../../config';\nimport {\n  getReactionKey, getStoryKey, isSameReaction,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport ReactionAnimatedEmoji from '../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../ui/Button';\n\nimport styles from './StoryFooter.module.scss';\n\ntype OwnProps = {\n  story: ApiStory;\n  className?: string;\n};\n\nconst StoryFooter = ({\n  story,\n  className,\n}: OwnProps) => {\n  const { openStoryViewModal, openForwardMenu, sendStoryReaction } = getActions();\n  const lang = useOldLang();\n\n  const {\n    views, isOut, peerId, id: storyId, sentReaction,\n  } = story;\n  const { viewsCount, forwardsCount, reactionsCount } = views || {};\n  const isChannel = !isUserId(peerId);\n\n  const isSentStoryReactionHeart = sentReaction && isSameReaction(sentReaction, HEART_REACTION);\n\n  const canForward = Boolean(\n    (isOut || isChannel)\n    && story.isPublic\n    && !story.noForwards,\n  );\n\n  const containerId = getStoryKey(peerId, storyId);\n\n  const recentViewers = useMemo(() => {\n    const { users: { byId: usersById } } = getGlobal();\n\n    const recentViewerIds = views && 'recentViewerIds' in views ? views.recentViewerIds : undefined;\n    if (!recentViewerIds) return undefined;\n\n    return recentViewerIds.map((id) => usersById[id]).filter(Boolean);\n  }, [views]);\n\n  const handleOpenStoryViewModal = useLastCallback(() => {\n    openStoryViewModal({ storyId });\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleLikeStory = useLastCallback(() => {\n    const reaction = sentReaction ? undefined : HEART_REACTION;\n    sendStoryReaction({\n      peerId,\n      storyId,\n      containerId,\n      reaction,\n    });\n  });\n\n  if (!viewsCount) {\n    return (\n      <div className={buildClassName(styles.root, className)}>\n        {lang('NobodyViewed')}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        className,\n      )}\n    >\n      <div\n        className={buildClassName(styles.viewInfo, !isChannel && styles.interactive)}\n        onClick={!isChannel ? handleOpenStoryViewModal : undefined}\n      >\n        {Boolean(recentViewers?.length) && (\n          <AvatarList\n            size=\"small\"\n            peers={recentViewers}\n            className={styles.avatars}\n          />\n        )}\n\n        {isChannel ? (\n          <span className={styles.views}>\n            <Icon name=\"channelviews\" className={styles.viewIcon} />\n            {viewsCount}\n          </span>\n        ) : (\n          <span className={styles.views}>{lang('Views', viewsCount, 'i')}</span>\n        )}\n        {Boolean(reactionsCount) && !isChannel && (\n          <span className={styles.reactionCount}>\n            <Icon name=\"heart\" className={styles.reactionCountHeart} />\n            {reactionsCount}\n          </span>\n        )}\n      </div>\n      <div className={styles.spacer} />\n      {canForward && (\n        <Button\n          color=\"translucent\"\n          size=\"smaller\"\n          round\n          onClick={handleForwardClick}\n          ariaLabel={lang('Forward')}\n          className={styles.footerItem}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {isChannel && (\n        <>\n          {Boolean(forwardsCount) && (\n            <div className={styles.footerItem}>\n              <Button\n                round\n                color=\"translucent\"\n                size=\"smaller\"\n                nonInteractive\n                ariaLabel={lang('PublicShares')}\n              >\n                <Icon name=\"loop\" />\n              </Button>\n              <span>{forwardsCount}</span>\n            </div>\n          )}\n          <div className={styles.footerItem}>\n            <Button\n              round\n              className={styles.reactionButton}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleLikeStory}\n              ariaLabel={lang('AccDescrLike')}\n            >\n              {sentReaction && (\n                <ReactionAnimatedEmoji\n                  key={getReactionKey(sentReaction)}\n                  containerId={containerId}\n                  reaction={sentReaction}\n                  withEffectOnly={isSentStoryReactionHeart}\n                />\n              )}\n              {(!sentReaction || isSentStoryReactionHeart) && (\n                <Icon\n                  name={isSentStoryReactionHeart ? 'heart' : 'heart-outline'}\n                  className={buildClassName(isSentStoryReactionHeart && styles.reactionHeart)}\n                />\n              )}\n            </Button>\n            {Boolean(reactionsCount) && (<span>{reactionsCount}</span>)}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StoryFooter);\n","import type React from '../../lib/teact/teact';\nimport {\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './StoryProgress.module.scss';\n\ninterface OwnProps {\n  isActive: boolean;\n  isViewed: boolean;\n  isVideo?: boolean;\n  duration?: number;\n  isPaused?: boolean;\n  onImageComplete: NoneToVoidFunction;\n}\n\nconst DEFAULT_STORY_DURATION_S = 6;\n\nfunction StoryProgress({\n  isActive, isViewed, isVideo, duration = DEFAULT_STORY_DURATION_S, isPaused, onImageComplete,\n}: OwnProps) {\n  const handleAnimationEnd = useLastCallback((event: React.AnimationEvent<HTMLElement>) => {\n    if (!isVideo && event.animationName === styles.progress) {\n      onImageComplete();\n    }\n  });\n\n  const classNames = buildClassName(\n    styles.root,\n    isViewed && styles.viewed,\n    isActive && styles.active,\n    isPaused && styles.paused,\n  );\n\n  return (\n    <span\n      className={classNames}\n      aria-hidden\n    >\n      {isActive && (\n        <i style={`--progress-duration: ${duration}s`} className={styles.inner} onAnimationEnd={handleAnimationEnd} />\n      )}\n    </span>\n  );\n}\n\nexport default memo(StoryProgress);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c1fbGgcx\",\"viewed\":\"xwOKghO2\",\"active\":\"ZuByYcIx\",\"inner\":\"qyBCpJct\",\"progress\":\"XY98E7VM\",\"paused\":\"n9V6B7hP\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMediaAreaChannelPost,\n  ApiPeer, ApiStealthMode, ApiStory, ApiTypeStory,\n} from '../../api/types';\nimport type { IDimensions } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { EDITABLE_STORY_INPUT_CSS_SELECTOR, EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { isChatChannel } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectChat,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPaidMessagesStars,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { IS_SAFARI } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatMediaDuration, formatRelativePastTime } from '../../util/dates/dateFormat';\nimport download from '../../util/download';\nimport { isUserId } from '../../util/entities/ids';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { round } from '../../util/math';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\nimport { BASE_STORY_HEIGHT, BASE_STORY_WIDTH } from './helpers/dimensions';\nimport { PRIMARY_VIDEO_MIME, SECONDARY_VIDEO_MIME } from './helpers/videoFormats';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout, { getIsMobile } from '../../hooks/useAppLayout';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport { useStreaming } from '../../hooks/useStreaming';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useStoryPreloader from './hooks/useStoryPreloader';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Avatar from '../common/Avatar';\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\nimport Transition from '../ui/Transition';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\nimport StoryCaption from './StoryCaption';\nimport StoryFooter from './StoryFooter';\nimport StoryProgress from './StoryProgress';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peerId: string;\n  storyId: number;\n  dimensions: IDimensions;\n\n  isDeleteModalOpen?: boolean;\n  isPrivateStories?: boolean;\n  isArchivedStories?: boolean;\n  isSingleStory?: boolean;\n  getIsAnimating: Signal<boolean>;\n  onDelete: (story: ApiTypeStory) => void;\n  onClose: NoneToVoidFunction;\n  onReport: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peer: ApiPeer;\n  forwardSender?: ApiPeer;\n  fromPeer?: ApiPeer;\n  story?: ApiTypeStory;\n  isMuted: boolean;\n  orderedIds?: number[];\n  shouldForcePause?: boolean;\n  storyChangelogUserId?: string;\n  viewersExpirePeriod: number;\n  isChatExist?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  isCurrentUserPremium?: boolean;\n  stealthMode: ApiStealthMode;\n  withHeaderAnimation?: boolean;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n}\n\nconst VIDEO_MIN_READY_STATE = IS_SAFARI ? 4 : 3;\nconst SPACEBAR_CODE = 32;\n\nconst STEALTH_MODE_NOTIFICATION_DURATION = 4000;\n\nfunction Story({\n  peerId,\n  storyId,\n  peer,\n  forwardSender,\n  fromPeer,\n  isMuted,\n  isArchivedStories,\n  isPrivateStories,\n  story,\n  orderedIds,\n  isSingleStory,\n  dimensions,\n  shouldForcePause,\n  storyChangelogUserId,\n  viewersExpirePeriod,\n  isChatExist,\n  arePeerSettingsLoaded,\n  getIsAnimating,\n  isCurrentUserPremium,\n  stealthMode,\n  withHeaderAnimation,\n  onDelete,\n  onClose,\n  onReport,\n  paidMessagesStars,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    viewStory,\n    setStoryViewerMuted,\n    openPreviousStory,\n    openNextStory,\n    loadPeerSkippedStories,\n    openForwardMenu,\n    copyStoryLink,\n    toggleStoryInProfile,\n    openChat,\n    showNotification,\n    openStoryPrivacyEditor,\n    loadPeerSettings,\n    fetchChat,\n    loadStoryViews,\n    toggleStealthModal,\n  } = getActions();\n  const serverTime = getServerTime();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const [isComposerHasFocus, markComposerHasFocus, unmarkComposerHasFocus] = useFlag(false);\n  const [isStoryPlaybackRequested, playStory, pauseStory] = useFlag(false);\n  const [isStoryPlaying, markStoryPlaying, unmarkStoryPlaying] = useFlag(false);\n  const [isAppFocused, markAppFocused, unmarkAppFocused] = useFlag(true);\n  const [isCaptionExpanded, expandCaption, foldCaption] = useFlag(false);\n  const [isPausedBySpacebar, setIsPausedBySpacebar] = useState(false);\n  const [isPausedByLongPress, markIsPausedByLongPress, unmarkIsPausedByLongPress] = useFlag(false);\n  const [isDropdownMenuOpen, markDropdownMenuOpen, unmarkDropdownMenuOpen] = useFlag(false);\n  const videoRef = useRef<HTMLVideoElement>();\n  const {\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  } = useStoryProps(story, isCurrentUserPremium, isDropdownMenuOpen);\n\n  const isLoadedStory = story && 'content' in story;\n  const isChangelog = peerId === storyChangelogUserId;\n  const isUserStory = isUserId(peerId);\n  const isChatStory = !isUserStory;\n  const isChannelStory = isChatStory && isChatChannel(peer as ApiChat);\n  const isOut = isLoadedStory && story.isOut;\n\n  const canPinToProfile = useCurrentOrPrev(\n    isOut ? !story.isInProfile : undefined,\n    true,\n  );\n  const canUnpinFromProfile = useCurrentOrPrev(\n    isOut ? story.isInProfile : undefined,\n    true,\n  );\n  const areViewsExpired = Boolean(\n    isOut && (story.date + viewersExpirePeriod) < getServerTime(),\n  );\n\n  const forwardSenderTitle = forwardSender ? getPeerTitle(oldLang, forwardSender)\n    : (isLoadedStory && story.forwardInfo?.fromName);\n\n  const canCopyLink = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !isChangelog\n    && peer?.hasUsername,\n  );\n\n  const canShare = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !story.noForwards\n    && !isChangelog\n    && !isCaptionExpanded,\n  );\n\n  const canPlayStory = Boolean(\n    hasFullData && !shouldForcePause && isAppFocused && !isComposerHasFocus && !isCaptionExpanded\n    && !isPausedBySpacebar && !isPausedByLongPress,\n  );\n\n  const duration = isLoadedStory && story.content.video?.duration\n    ? story.content.video.duration\n    : undefined;\n\n  const shouldShowComposer = !(isOut && isUserStory) && !isChangelog && !isChannelStory && !isAccountFrozen;\n  const shouldShowFooter = isLoadedStory && !shouldShowComposer && (isOut || isChannelStory);\n  const headerAnimation = isMobile && withHeaderAnimation ? 'slideFade' : 'none';\n\n  const {\n    shouldRender: shouldRenderSkeleton,\n    transitionClassNames: skeletonTransitionClassNames,\n  } = useShowTransitionDeprecated(!hasFullData);\n\n  const {\n    transitionClassNames: mediaTransitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(fullMediaData));\n\n  const thumbRef = useCanvasBlur(thumbnail, !hasThumb);\n  const previewTransitionClassNames = useMediaTransitionDeprecated(previewBlobUrl);\n\n  const {\n    shouldRender: shouldRenderComposer,\n    transitionClassNames: composerAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(shouldShowComposer);\n\n  const {\n    shouldRender: shouldRenderCaptionBackdrop,\n    transitionClassNames: captionBackdropTransitionClassNames,\n  } = useShowTransitionDeprecated(hasText && isCaptionExpanded);\n\n  const { transitionClassNames: appearanceAnimationClassNames } = useShowTransitionDeprecated(true);\n  const {\n    shouldRender: shouldRenderCaption,\n    transitionClassNames: captionAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(hasText || hasForwardInfo);\n\n  const isStreamingSupported = useStreaming(videoRef, fullMediaData, PRIMARY_VIDEO_MIME);\n\n  useStoryPreloader(peerId, storyId);\n\n  useEffect(() => {\n    if (storyId) {\n      viewStory({ peerId, storyId });\n    }\n  }, [storyId, peerId]);\n\n  useEffect(() => {\n    loadPeerSkippedStories({ peerId });\n  }, [peerId]);\n\n  // Fetching user privacy settings for use in Composer\n  useEffect(() => {\n    const canWrite = isUserId(peerId);\n    if (!isChatExist && canWrite) {\n      fetchChat({ chatId: peerId });\n    }\n  }, [isChatExist, peerId]);\n  useEffect(() => {\n    if (isChatExist && !arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId });\n    }\n  }, [arePeerSettingsLoaded, isChatExist, peerId]);\n\n  const handlePauseStory = useLastCallback(() => {\n    if (isVideo) {\n      videoRef.current?.pause();\n    }\n\n    unmarkStoryPlaying();\n    pauseStory();\n  });\n\n  const handlePlayStory = useLastCallback(() => {\n    if (!canPlayStory) return;\n\n    playStory();\n    if (!isVideo) markStoryPlaying();\n  });\n\n  const handleLongPressStart = useLastCallback(() => {\n    markIsPausedByLongPress();\n  });\n  const handleLongPressEnd = useLastCallback(() => {\n    unmarkIsPausedByLongPress();\n  });\n\n  const handleDropdownMenuOpen = useLastCallback(() => {\n    markDropdownMenuOpen();\n    handlePauseStory();\n  });\n\n  const handleDropdownMenuClose = useLastCallback(() => {\n    unmarkDropdownMenuOpen();\n    handlePlayStory();\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleLongPressStart,\n    onEnd: handleLongPressEnd,\n  });\n\n  const isUnsupported = useUnsupportedMedia(\n    videoRef,\n    undefined,\n    !isVideo || !fullMediaData || isStreamingSupported,\n  );\n\n  const hasAllData = fullMediaData && (!altMediaHash || altMediaData);\n  // Play story after media has been downloaded\n  useEffect(() => {\n    if (hasAllData && !isUnsupported) handlePlayStory();\n  }, [hasAllData, isUnsupported]);\n\n  useBackgroundMode(unmarkAppFocused, markAppFocused);\n\n  useEffect(() => {\n    if (!hasAllData) return;\n    videoRef.current?.load();\n  }, [hasAllData]);\n\n  useEffect(() => {\n    if (!isLoadedStory || isDeletedStory || areViewsExpired) return;\n\n    if (!isOut && !isChannelStory) return;\n\n    // Refresh counters each time\n    loadStoryViews({ peerId, storyId });\n  }, [isDeletedStory, areViewsExpired, isLoadedStory, peerId, storyId, isOut, isChannelStory]);\n\n  useEffect(() => {\n    if (\n      shouldForcePause || !isAppFocused || isComposerHasFocus\n      || isCaptionExpanded || isPausedBySpacebar || isPausedByLongPress\n    ) {\n      handlePauseStory();\n    } else {\n      handlePlayStory();\n    }\n  }, [\n    handlePlayStory, isAppFocused, isCaptionExpanded, isComposerHasFocus,\n    shouldForcePause, isPausedBySpacebar, isPausedByLongPress,\n  ]);\n\n  useEffect(() => {\n    if (isComposerHasFocus || shouldForcePause || isCaptionExpanded) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (e.keyCode === SPACEBAR_CODE) {\n        e.preventDefault();\n        setIsPausedBySpacebar(!isPausedBySpacebar);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isCaptionExpanded, isComposerHasFocus, isPausedBySpacebar, shouldForcePause]);\n\n  // Reset the state of `isPausedBySpacebar` when closing the caption, losing focus by composer or disable forced pause\n  useEffectWithPrevDeps(([\n    prevIsComposerHasFocus,\n    prevIsCaptionExpanded,\n    prevShouldForcePause,\n    prevIsAppFocused,\n    prevIsPausedByLongPress,\n  ]) => {\n    if (\n      !isPausedBySpacebar || isCaptionExpanded || isComposerHasFocus\n      || shouldForcePause || !isAppFocused || isPausedByLongPress\n    ) {\n      return;\n    }\n\n    if (\n      prevIsCaptionExpanded !== isCaptionExpanded\n      || prevIsComposerHasFocus !== isComposerHasFocus\n      || prevShouldForcePause !== shouldForcePause\n      || prevIsAppFocused !== isAppFocused\n      || prevIsPausedByLongPress !== isPausedByLongPress\n    ) {\n      setIsPausedBySpacebar(false);\n    }\n  }, [isComposerHasFocus, isCaptionExpanded, shouldForcePause, isAppFocused, isPausedByLongPress, isPausedBySpacebar]);\n\n  const handleOpenChat = useLastCallback(() => {\n    onClose();\n    openChat({ id: peerId });\n  });\n\n  const handleForwardPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: forwardSender!.id });\n  });\n\n  const handleFromPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: fromPeer!.id });\n  });\n\n  const handleOpenPrevStory = useLastCallback(() => {\n    openPreviousStory();\n  });\n\n  const handleOpenNextStory = useLastCallback(() => {\n    openNextStory();\n  });\n\n  const handleVideoStoryTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= VIDEO_MIN_READY_STATE) {\n      markStoryPlaying();\n    } else {\n      unmarkStoryPlaying();\n    }\n    if (duration && round(video.currentTime, 2) >= round(duration, 2)) {\n      handleOpenNextStory();\n    }\n  });\n\n  useEffect(() => {\n    return !getIsAnimating() && !isComposerHasFocus ? captureKeyboardListeners({\n      onRight: handleOpenNextStory,\n      onLeft: handleOpenPrevStory,\n    }) : undefined;\n  }, [getIsAnimating, isComposerHasFocus]);\n\n  const handleCopyStoryLink = useLastCallback(() => {\n    copyStoryLink({ peerId, storyId });\n  });\n\n  const handlePinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: true });\n  });\n\n  const handleUnpinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: false });\n  });\n\n  const handleDeleteStoryClick = useLastCallback(() => {\n    onDelete(story!);\n  });\n\n  const handleReportStoryClick = useLastCallback(() => {\n    onReport();\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleInfoPrivacyEdit = useLastCallback(() => {\n    openStoryPrivacyEditor();\n  });\n\n  const handleInfoPrivacyClick = useLastCallback(() => {\n    const visibility = !isLoadedStory || story.isPublic\n      ? undefined\n      : story.isForContacts ? 'contacts' : (story.isForCloseFriends ? 'closeFriends' : 'nobody');\n\n    let message;\n    const myName = getPeerTitle(oldLang, peer);\n    switch (visibility) {\n      case 'nobody':\n        message = oldLang('StorySelectedContactsHint', myName);\n        break;\n      case 'contacts':\n        message = oldLang('StoryContactsHint', myName);\n        break;\n      case 'closeFriends':\n        message = oldLang('StoryCloseFriendsHint', myName);\n        break;\n      default:\n        return;\n    }\n    showNotification({ message });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    if (noSound) {\n      showNotification({\n        message: oldLang('Story.TooltipVideoHasNoSound'),\n      });\n      return;\n    }\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setStoryViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handleOpenStealthModal = useLastCallback(() => {\n    if (stealthMode.activeUntil && getServerTime() < stealthMode.activeUntil) {\n      const diff = stealthMode.activeUntil - getServerTime();\n      showNotification({\n        title: oldLang('StealthModeOn'),\n        message: oldLang('Story.ToastStealthModeActiveText', formatMediaDuration(diff)),\n        duration: STEALTH_MODE_NOTIFICATION_DURATION,\n      });\n      return;\n    }\n\n    toggleStealthModal({ isOpen: true });\n  });\n\n  const handleDownload = useLastCallback(() => {\n    if (!downloadMediaData) return;\n    download(downloadMediaData, `story-${peerId}-${storyId}.${isVideo ? 'mp4' : 'jpg'}`);\n  });\n\n  useEffect(() => {\n    if (!isDeletedStory) return;\n\n    showNotification({\n      message: oldLang('StoryNotFound'),\n    });\n  }, [oldLang, isDeletedStory]);\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => {\n      return (\n        <Button\n          round\n          ripple={!isMobile}\n          size=\"tiny\"\n          color=\"translucent-white\"\n          onClick={onTrigger}\n          className={buildClassName(styles.button, isOpen && 'active')}\n          ariaLabel={oldLang('AccDescrOpenMenu2')}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      );\n    };\n  }, [isMobile, oldLang]);\n\n  function renderStoriesTabs() {\n    return (\n      <div className={styles.storyIndicators}>\n        {(isSingleStory ? [storyId] : orderedIds ?? []).map((id) => (\n          <StoryProgress\n            key={`progress-${id}`}\n            isActive={id === story?.id}\n            isVideo={isVideo}\n            isViewed={Boolean(story?.id && ((isPrivateStories || isArchivedStories) ? id > story?.id : id < story?.id))}\n            isPaused={!isStoryPlaying}\n            duration={duration}\n            onImageComplete={handleOpenNextStory}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderStoryPrivacyButton() {\n    if (!isUserStory) return undefined;\n\n    let privacyIcon: IconName = 'channel-filled';\n    const gradient: Record<string, [string, string]> = {\n      'channel-filled': ['#50ABFF', '#007AFF'],\n      'user-filled': ['#C36EFF', '#8B60FA'],\n      'favorite-filled': ['#88D93A', '#30B73B'],\n      'group-filled': ['#FFB743', '#F69A36'],\n    };\n\n    if (isOut) {\n      const { visibility } = (story && 'visibility' in story && story.visibility) || {};\n\n      switch (visibility) {\n        case 'everybody':\n          privacyIcon = 'channel-filled';\n          break;\n        case 'contacts':\n          privacyIcon = 'user-filled';\n          break;\n        case 'closeFriends':\n          privacyIcon = 'favorite-filled';\n          break;\n        case 'nobody':\n          privacyIcon = 'group-filled';\n      }\n    } else {\n      if (!story || !('content' in story) || story.isPublic) {\n        return undefined;\n      }\n\n      privacyIcon = story.isForCloseFriends\n        ? 'favorite-filled'\n        : (story.isForContacts ? 'user-filled' : 'group-filled');\n    }\n\n    return (\n      <div\n        className={buildClassName(styles.visibilityButton, isOut && styles.visibilityButtonSelf)}\n        onClick={isOut ? handleInfoPrivacyEdit : handleInfoPrivacyClick}\n        style={`--color-from: ${gradient[privacyIcon][0]}; --color-to: ${gradient[privacyIcon][1]}`}\n      >\n        <Icon name={privacyIcon} />\n        {isOut && <Icon name=\"next\" />}\n      </div>\n    );\n  }\n\n  function renderSenderInfo() {\n    return (\n      <div className={styles.senderInfo}>\n        <Avatar\n          peer={peer}\n          size=\"tiny\"\n          onClick={handleOpenChat}\n        />\n        <div className={styles.senderMeta}>\n          <span onClick={handleOpenChat} className={styles.senderName}>\n            {renderText(getPeerTitle(oldLang, peer) || '')}\n          </span>\n          <div className={styles.storyMetaRow}>\n            {forwardSenderTitle && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.forwardHeader, forwardSender && styles.clickable,\n                )}\n                onClick={forwardSender ? handleForwardPeerClick : undefined}\n              >\n                <Icon name=\"loop\" />\n                <span className={styles.headerTitle}>\n                  {renderText(forwardSenderTitle)}\n                </span>\n              </span>\n            )}\n            {fromPeer && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.fromPeer,\n                )}\n                onClick={handleFromPeerClick}\n              >\n                <Avatar peer={fromPeer} size=\"micro\" />\n                <span className={styles.headerTitle}>\n                  {renderText(getPeerTitle(oldLang, fromPeer) || '')}\n                </span>\n              </span>\n            )}\n            {story && 'date' in story && (\n              <span className={styles.storyMeta}>{formatRelativePastTime(oldLang, serverTime, story.date)}</span>\n            )}\n            {isLoadedStory && story.isEdited && (\n              <span className={styles.storyMeta}>{oldLang('Story.HeaderEdited')}</span>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSender() {\n    return (\n      <div className={styles.sender}>\n        <Transition activeKey={Number(peerId)} name={headerAnimation} className={styles.senderInfoTransition}>\n          {renderSenderInfo()}\n        </Transition>\n\n        <div className={styles.actions}>\n          {renderStoryPrivacyButton()}\n          {isVideo && (\n            <Button\n              className={styles.button}\n              round\n              ripple={!isMobile}\n              size=\"tiny\"\n              color=\"translucent-white\"\n              disabled={!hasFullData}\n              onClick={handleVolumeMuted}\n              ariaLabel={oldLang('Volume')}\n            >\n              <Icon name={(isMuted || noSound) ? 'speaker-muted-story' : 'speaker-story'} />\n            </Button>\n          )}\n          <DropdownMenu\n            className={styles.buttonMenu}\n            trigger={MenuButton}\n            positionX=\"right\"\n            onOpen={handleDropdownMenuOpen}\n            onClose={handleDropdownMenuClose}\n          >\n            {canCopyLink && <MenuItem icon=\"copy\" onClick={handleCopyStoryLink}>{oldLang('CopyLink')}</MenuItem>}\n            {canPinToProfile && (\n              <MenuItem icon=\"save-story\" onClick={handlePinClick}>\n                {oldLang(isUserStory ? 'StorySave' : 'SaveToPosts')}\n              </MenuItem>\n            )}\n            {canUnpinFromProfile && (\n              <MenuItem icon=\"delete\" onClick={handleUnpinClick}>\n                {oldLang(isUserStory ? 'ArchiveStory' : 'RemoveFromPosts')}\n              </MenuItem>\n            )}\n            {canDownload && (\n              <MenuItem icon=\"download\" disabled={!downloadMediaData} onClick={handleDownload}>\n                {oldLang('lng_media_download')}\n              </MenuItem>\n            )}\n            {!isOut && isUserStory && (\n              <MenuItem icon=\"eye-crossed-outline\" onClick={handleOpenStealthModal}>\n                {oldLang('StealthMode')}\n              </MenuItem>\n            )}\n            {!isOut && <MenuItem icon=\"flag\" onClick={handleReportStoryClick}>{oldLang('lng_report_story')}</MenuItem>}\n            {isOut && (\n              <MenuItem\n                icon=\"delete\"\n                destructive\n                onClick={handleDeleteStoryClick}\n              >\n                {oldLang('Delete')}\n              </MenuItem>\n            )}\n          </DropdownMenu>\n          <Button\n            className={buildClassName(styles.button, styles.closeButton)}\n            round\n            size=\"tiny\"\n            color=\"translucent-white\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const inputPlaceholder = paidMessagesStars\n    ? lang('ComposerPlaceholderPaidReply', {\n      amount: formatStarsAsIcon(lang, paidMessagesStars, { asFont: true, className: 'placeholder-star-icon' }),\n    }, {\n      withNodes: true,\n    })\n    : oldLang(isChatStory ? 'ReplyToGroupStory' : 'ReplyPrivately');\n\n  return (\n    <div\n      className={buildClassName(styles.slideInner, 'component-theme-dark')}\n      onMouseDown={handleLongPressMouseDown}\n      onMouseUp={handleLongPressMouseUp}\n      onMouseLeave={handleLongPressMouseLeave}\n      onTouchStart={handleLongPressTouchStart}\n      onTouchEnd={handleLongPressTouchEnd}\n    >\n      <div className={buildClassName(styles.storyHeader, appearanceAnimationClassNames)}>\n        {renderStoriesTabs()}\n        {renderSender()}\n      </div>\n\n      <div\n        className={styles.mediaWrapper}\n        style={`width: ${dimensions.width}px; height: ${dimensions.height}px`}\n      >\n        <canvas ref={thumbRef} className={styles.thumbnail} />\n        {previewBlobUrl && (\n          <img\n            key={`preview-${storyId}`}\n            src={previewBlobUrl}\n            draggable={false}\n            alt=\"\"\n            className={buildClassName(styles.media, styles.mediaPreview, previewTransitionClassNames)}\n          />\n        )}\n        {shouldRenderSkeleton && (\n          <Skeleton className={buildClassName(skeletonTransitionClassNames, styles.fullSize)} />\n        )}\n        {!isVideo && fullMediaData && (\n          <img\n            src={fullMediaData}\n            alt=\"\"\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            draggable={false}\n          />\n        )}\n        {isVideo && fullMediaData && (\n          <OptimizedVideo\n            ref={videoRef}\n            key={`video-${storyId}`}\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            canPlay={isStoryPlaybackRequested}\n            muted={isMuted}\n            width={BASE_STORY_WIDTH}\n            height={BASE_STORY_HEIGHT}\n            draggable={false}\n            playsInline\n            disablePictureInPicture\n            isPriority\n            onPause={unmarkStoryPlaying}\n            onWaiting={unmarkStoryPlaying}\n            disableRemotePlayback\n            onTimeUpdate={handleVideoStoryTimeUpdate}\n          >\n            <source src={fullMediaData} type={PRIMARY_VIDEO_MIME} width=\"720\" />\n            {altMediaData && <source src={altMediaData} type={SECONDARY_VIDEO_MIME} width=\"480\" />}\n          </OptimizedVideo>\n        )}\n\n        {!isPausedByLongPress && !isComposerHasFocus && (\n          <>\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.prev)}\n              onClick={handleOpenPrevStory}\n              aria-label={oldLang('Previous')}\n            />\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.next)}\n              onClick={handleOpenNextStory}\n              aria-label={oldLang('Next')}\n            />\n          </>\n        )}\n        {isLoadedStory && fullMediaData && (\n          <MediaAreaOverlay\n            key={`area-overlay-${storyId}-${peerId}`}\n            story={story}\n            isActive\n            isStoryPlaying={isDropdownMenuOpen}\n          />\n        )}\n        {!isMobile && (\n          <div className={styles.content}>\n            <div className={styles.contentInner}>\n              <Avatar\n                peer={peer}\n                withStory\n                storyViewerMode=\"disabled\"\n              />\n              <div className={styles.name}>{renderText(getPeerTitle(oldLang, peer) || '')}</div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldShowFooter && (\n        <StoryFooter story={story} className={appearanceAnimationClassNames} />\n      )}\n      {shouldRenderCaptionBackdrop && (\n        <div\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.captionBackdrop, captionBackdropTransitionClassNames)}\n          onClick={() => foldCaption()}\n          aria-label={oldLang('Close')}\n        />\n      )}\n      {hasText && <div className={buildClassName(styles.captionGradient, captionAppearanceAnimationClassNames)} />}\n      {shouldRenderCaption && (\n        <StoryCaption\n          key={`caption-${storyId}-${peerId}`}\n          story={story as ApiStory}\n          isExpanded={isCaptionExpanded}\n          onExpand={expandCaption}\n          onFold={foldCaption}\n          className={captionAppearanceAnimationClassNames}\n        />\n      )}\n      {shouldRenderComposer && (\n        <Composer\n          type=\"story\"\n          chatId={peerId}\n          threadId={MAIN_THREAD_ID}\n          storyId={storyId}\n          isReady={!isOut}\n          messageListType=\"thread\"\n          isMobile={getIsMobile()}\n          editableInputCssSelector={EDITABLE_STORY_INPUT_CSS_SELECTOR}\n          editableInputId={EDITABLE_STORY_INPUT_ID}\n          inputId=\"story-input-text\"\n          className={buildClassName(styles.composer, composerAppearanceAnimationClassNames)}\n          inputPlaceholder={inputPlaceholder}\n          onForward={canShare ? handleForwardClick : undefined}\n          onFocus={markComposerHasFocus}\n          onBlur={unmarkComposerHasFocus}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, {\n  peerId,\n  storyId,\n  isDeleteModalOpen,\n}): StateProps => {\n  const { appConfig } = global;\n  const user = selectUser(global, peerId);\n  const chat = selectChat(global, peerId);\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  const tabState = selectTabState(global);\n  const {\n    storyViewer: {\n      isMuted,\n      viewModal,\n      isPrivacyModalOpen,\n      isStealthModalOpen,\n      storyList,\n    },\n    forwardMessages: { storyId: forwardedStoryId },\n    premiumModal,\n    safeLinkModalUrl,\n    mapModal,\n    reportModal,\n    giftInfoModal,\n    isPaymentMessageConfirmDialogOpen,\n  } = tabState;\n  const { isOpen: isPremiumModalOpen } = premiumModal || {};\n  const story = selectPeerStory(global, peerId, storyId);\n  const isLoadedStory = story && 'content' in story;\n  const shouldForcePause = Boolean(\n    isPaymentMessageConfirmDialogOpen\n    || viewModal || forwardedStoryId || tabState.reactionPicker?.storyId || reportModal || isPrivacyModalOpen\n    || isPremiumModalOpen || isDeleteModalOpen || safeLinkModalUrl || isStealthModalOpen || mapModal || giftInfoModal,\n  );\n\n  const forwardInfo = isLoadedStory ? story.forwardInfo : undefined;\n  const mediaAreas = isLoadedStory ? story.mediaAreas : undefined;\n  const forwardSenderId = forwardInfo?.fromPeerId\n    || mediaAreas?.find((area): area is ApiMediaAreaChannelPost => area.type === 'channelPost')?.channelId;\n  const forwardSender = forwardSenderId ? selectPeer(global, forwardSenderId) : undefined;\n  const withHeaderAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  const fromPeer = isLoadedStory && story.fromId ? selectPeer(global, story.fromId) : undefined;\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, peerId);\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    peer: (user || chat)!,\n    forwardSender,\n    fromPeer,\n    story,\n    orderedIds: storyList?.storyIdsByPeerId[peerId],\n    isMuted,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    shouldForcePause,\n    storyChangelogUserId: appConfig!.storyChangelogUserId,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    isChatExist: Boolean(chat),\n    arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n    stealthMode: global.stories.stealthMode,\n    withHeaderAnimation,\n    paidMessagesStars,\n    isAccountFrozen,\n  };\n})(Story));\n","import { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPeer, ApiPeerStories, ApiTypeStory,\n} from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectTabState } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peer?: ApiPeer;\n  peerStories?: ApiPeerStories;\n}\n\ninterface StateProps {\n  lastViewedId?: number;\n  origin?: StoryViewerOrigin;\n  storyIdsForViewer?: number[];\n}\n\nfunction StoryPreview({\n  peer, peerStories, lastViewedId, storyIdsForViewer, origin,\n}: OwnProps & StateProps) {\n  const { openStoryViewer, loadPeerSkippedStories } = getActions();\n  const lang = useOldLang();\n\n  const story = useMemo<ApiTypeStory | undefined>(() => {\n    if (!peerStories) {\n      return undefined;\n    }\n\n    const {\n      orderedIds, lastReadId, byId,\n    } = peerStories;\n    const hasUnreadStories = orderedIds[orderedIds.length - 1] !== lastReadId;\n    const previewIndexId = lastViewedId && storyIdsForViewer?.includes(lastViewedId)\n      ? lastViewedId ?? (hasUnreadStories ? (lastReadId ?? -1) : -1)\n      : -1;\n    const resultId = byId[previewIndexId]?.id || storyIdsForViewer?.[0] || orderedIds[0];\n\n    return byId[resultId];\n  }, [lastViewedId, peerStories, storyIdsForViewer]);\n\n  const isLoaded = story && 'content' in story;\n\n  useEffect(() => {\n    if (story && !isLoaded) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [story, isLoaded]);\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  if (!peer || !story || 'isDeleted' in story) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={styles.slideInner}\n      onClick={() => { openStoryViewer({ peerId: story.peerId, storyId: story.id, origin }); }}\n    >\n      {thumbUrl && (\n        <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n      )}\n      {isLoaded && <MediaAreaOverlay story={story} />}\n\n      <div className={styles.content}>\n        <div className={styles.contentInner}>\n          <Avatar\n            peer={peer}\n            withStory\n            storyViewerMode=\"disabled\"\n          />\n          <div className={styles.name}>{renderText(getPeerTitle(lang, peer) || '')}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { peer }): StateProps => {\n  const {\n    storyViewer: {\n      lastViewedByPeerId: lastViewedByPeerIds,\n      origin,\n      storyList,\n    },\n  } = selectTabState(global);\n\n  return {\n    lastViewedId: peer?.id ? lastViewedByPeerIds?.[peer.id] : undefined,\n    origin,\n    storyIdsForViewer: peer?.id ? storyList?.storyIdsByPeerId[peer.id] : undefined,\n  };\n})(StoryPreview));\n","import type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiPeerStories, ApiTypeStory } from '../../api/types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getStoryKey } from '../../global/helpers';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeer,\n  selectTabState,\n} from '../../global/selectors';\nimport { IS_IOS } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport focusEditableElement from '../../util/focusEditableElement';\nimport { clamp } from '../../util/math';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { calculateOffsetX } from './helpers/dimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useSlideSizes from './hooks/useSlideSizes';\n\nimport Story from './Story';\nimport StoryPreview from './StoryPreview';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  isDeleteModalOpen?: boolean;\n  onDelete: (story: ApiTypeStory) => void;\n  onReport: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peerIds: string[];\n  currentPeerId?: string;\n  currentStoryId?: number;\n  byPeerId?: Record<string, ApiPeerStories>;\n  isSinglePeer?: boolean;\n  isSingleStory?: boolean;\n  isPrivate?: boolean;\n  isArchive?: boolean;\n}\n\nconst ACTIVE_SLIDE_VERTICAL_CORRECTION_REM = 1.75;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SCROLL_RELEASE_DELAY = 1500;\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nfunction StorySlides({\n  peerIds,\n  currentPeerId,\n  currentStoryId,\n  isOpen,\n  isSinglePeer,\n  isSingleStory,\n  isPrivate,\n  isArchive,\n  byPeerId,\n  isDeleteModalOpen,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const { stopActiveReaction } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n  const [renderingPeerId, setRenderingPeerId] = useState(currentPeerId);\n  const [renderingStoryId, setRenderingStoryId] = useState(currentStoryId);\n  const prevPeerId = usePreviousDeprecated(currentPeerId);\n  const renderingIsArchive = useCurrentOrPrev(isArchive, true);\n  const renderingIsPrivate = useCurrentOrPrev(isPrivate, true);\n  const renderingIsSinglePeer = useCurrentOrPrev(isSinglePeer, true);\n  const renderingIsSingleStory = useCurrentOrPrev(isSingleStory, true);\n  const slideSizes = useSlideSizes();\n  const { height: windowHeight, width: windowWidth } = useWindowSize();\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const { isMobile } = useAppLayout();\n\n  const rendersRef = useRef<Record<string, { current: HTMLDivElement }>>({});\n  const [getIsAnimating, setIsAnimating] = useSignal(false);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  function setRef(ref: HTMLDivElement | undefined, peerId: string) {\n    if (!ref) {\n      return;\n    }\n    if (!rendersRef.current[peerId]) {\n      rendersRef.current[peerId] = { current: ref };\n    } else {\n      rendersRef.current[peerId].current = ref;\n    }\n  }\n\n  const renderingPeerIds = useMemo(() => {\n    if (renderingPeerId && (renderingIsSinglePeer || renderingIsSingleStory)) {\n      return [renderingPeerId];\n    }\n\n    const index = renderingPeerId ? peerIds.indexOf(renderingPeerId) : -1;\n    if (!renderingPeerId || index === -1) {\n      return [];\n    }\n\n    const start = Math.max(index - 4, 0);\n    const end = Math.min(index + 5, peerIds.length);\n\n    return peerIds.slice(start, end);\n  }, [renderingIsSingleStory, renderingIsSinglePeer, renderingPeerId, peerIds]);\n\n  const renderingPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !renderingPeerId) {\n      return -1;\n    }\n\n    return renderingPeerIds.indexOf(renderingPeerId);\n  }, [renderingPeerId, renderingPeerIds]);\n\n  const currentPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !currentPeerId) {\n      return -1;\n    }\n    return renderingPeerIds.indexOf(currentPeerId);\n  }, [currentPeerId, renderingPeerIds]);\n\n  useEffect(() => {\n    if (!isMobile) return;\n\n    // If animation disabled, set rendering peer id to current peer\n    setRenderingPeerId(currentPeerId);\n  }, [currentPeerId, isMobile]);\n\n  // Handling the flipping of stories from a current user\n  useEffect(() => {\n    if (renderingPeerId === currentPeerId && currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n  }, [currentPeerId, currentStoryId, renderingPeerId, renderingStoryId]);\n\n  useEffect(() => {\n    if (isMobile) return undefined;\n    if (prevPeerId && prevPeerId !== currentPeerId) {\n      setIsAnimating(true);\n    }\n\n    return () => {\n      setIsAnimating(false);\n    };\n  }, [prevPeerId, currentPeerId, setIsAnimating, isMobile]);\n\n  useEffect(() => {\n    return () => {\n      if (!currentStoryId || !currentPeerId) return;\n      stopActiveReaction({\n        containerId: getStoryKey(currentPeerId, currentStoryId),\n      });\n    };\n  }, [currentStoryId, currentPeerId]);\n\n  const slideAmount = currentPeerPosition - renderingPeerPosition;\n  const isBackward = renderingPeerPosition > currentPeerPosition;\n\n  const calculateTransformX = useLastCallback(() => {\n    return peerIds.reduce<Record<string, number>>((transformX, peerId, index) => {\n      if (peerId === renderingPeerId) {\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: isBackward,\n        });\n      } else {\n        let isMoveThroughActiveSlide = false;\n        if (!isBackward && index > 0 && peerIds[index - 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n        if (isBackward && index < peerIds.length - 1 && peerIds[index + 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: currentPeerId === peerId && !isBackward,\n          isMoveThroughActiveSlide,\n        });\n      }\n\n      return transformX;\n    }, {});\n  });\n\n  useEffect(() => {\n    if (!containerRef.current || !isOpen) {\n      return undefined;\n    }\n\n    let offsetY = 0;\n\n    const getCurrentStoryRef = () => {\n      return renderingPeerId ? rendersRef.current[renderingPeerId]?.current : undefined;\n    };\n\n    const onRelease = (event: MouseEvent | TouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      const current = getCurrentStoryRef();\n      if (!current) return;\n\n      if (offsetY < -SWIPE_Y_THRESHOLD) {\n        const composer = document.getElementById(EDITABLE_STORY_INPUT_ID);\n        if (composer) {\n          requestMutation(() => {\n            focusEditableElement(composer);\n          });\n        }\n        return;\n      }\n\n      if (offsetY > SWIPE_Y_THRESHOLD) {\n        onClose();\n        if (event.type === 'wheel') {\n          disableScrolling();\n          setTimeout(enableScrolling, SCROLL_RELEASE_DELAY);\n        }\n      } else {\n        requestMutation(() => {\n          current.style.setProperty('--slide-translate-y', '0px');\n        });\n      }\n    };\n\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      withWheelDrag: true,\n      excludedClosestSelector: '.Composer',\n      onDrag: (event, captureEvent, {\n        dragOffsetX, dragOffsetY,\n      }) => {\n        if (isReleasedRef.current) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (event.type === 'mousemove') return;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const current = getCurrentStoryRef();\n        if (!current) return;\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(absOffsetY) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          offsetY = clamp(dragOffsetY, -limit, limit);\n          if (offsetY > 0) {\n            requestMutation(() => {\n              current.style.setProperty('--slide-translate-y', `${offsetY * (isMobile ? 1 : -1)}px`);\n            });\n          }\n          if (event.type === 'wheel' && Math.abs(offsetY) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onRelease,\n    });\n  }, [isOpen, onClose, windowWidth, windowHeight, isMobile, renderingPeerId]);\n\n  useLayoutEffect(() => {\n    if (isMobile) return;\n    const transformX = calculateTransformX();\n\n    Object.entries(rendersRef.current).forEach(([peerId, { current }]) => {\n      if (!current) return;\n\n      if (!getIsAnimating()) {\n        current.classList.remove(styles.slideAnimation, styles.slideAnimationToActive, styles.slideAnimationFromActive);\n        current.style.setProperty('--slide-translate-x', '0px');\n        current.style.setProperty('--slide-translate-y', '0px');\n        current.style.setProperty('--slide-translate-scale', '1');\n        current.style.setProperty('--slide-content-scale', String(slideSizes.toActiveScale));\n\n        return;\n      }\n\n      const getScale = () => {\n        if (currentPeerId === peerId) {\n          return String(slideSizes.toActiveScale);\n        }\n        if (peerId === renderingPeerId) {\n          return String(slideSizes.fromActiveScale);\n        }\n        return '1';\n      };\n\n      let offsetY = 0;\n      if (peerId === renderingPeerId) {\n        offsetY = -ACTIVE_SLIDE_VERTICAL_CORRECTION_REM * slideSizes.fromActiveScale;\n        current.classList.add(styles.slideAnimationFromActive);\n      }\n      if (peerId === currentPeerId) {\n        offsetY = ACTIVE_SLIDE_VERTICAL_CORRECTION_REM;\n        current.classList.add(styles.slideAnimationToActive);\n      }\n\n      current.classList.add(styles.slideAnimation);\n      current.style.setProperty('--slide-translate-x', `${transformX[peerId] || 0}px`);\n      current.style.setProperty('--slide-translate-y', `${offsetY}rem`);\n      current.style.setProperty('--slide-translate-scale', getScale());\n    });\n  }, [currentPeerId, getIsAnimating, renderingPeerId, slideSizes, isMobile]);\n\n  const handleTransitionEnd = useLastCallback((event: React.TransitionEvent<HTMLDivElement>) => {\n    // It is `target` that is needed here, not `currentTarget`\n    const target = event.target as HTMLDivElement | null;\n\n    if (!target || !target.classList.contains(styles.activeSlide)) return;\n\n    if (renderingPeerId !== currentPeerId) {\n      setRenderingPeerId(currentPeerId);\n      setRenderingStoryId(currentStoryId);\n    } else if (currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n    setIsAnimating(false);\n  });\n\n  if (isMobile) {\n    return (\n      <div className={styles.wrapper} ref={containerRef}>\n        <div\n          className={styles.mobileSlide}\n          ref={(ref) => setRef(ref, renderingPeerId!)}\n        >\n          <Story\n            peerId={renderingPeerId!}\n            storyId={renderingStoryId!}\n            onDelete={onDelete}\n            dimensions={slideSizes.activeSlide}\n            isPrivateStories={renderingIsPrivate}\n            isArchivedStories={renderingIsArchive}\n            isDeleteModalOpen={isDeleteModalOpen}\n            isSingleStory={isSingleStory}\n            getIsAnimating={getIsAnimating}\n            onClose={onClose}\n            onReport={onReport}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  function renderStoryPreview(peerId: string, index: number, position: number) {\n    const style = buildStyle(\n      `width: ${slideSizes.slide.width}px`,\n      `height: ${slideSizes.slide.height}px`,\n    );\n    const className = buildClassName(\n      styles.slide,\n      styles.slidePreview,\n      `slide-${position}`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={className}\n        style={style}\n      >\n        <StoryPreview\n          peer={selectPeer(getGlobal(), peerId)}\n          peerStories={byPeerId?.[peerId]}\n        />\n      </div>\n    );\n  }\n\n  function renderStory(peerId: string) {\n    const style = isMobile ? undefined : buildStyle(\n      `width: ${slideSizes.activeSlide.width}px`,\n      `--slide-media-height: ${slideSizes.activeSlide.height}px`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={buildClassName(styles.slide, styles.activeSlide)}\n        style={style}\n      >\n        <Story\n          peerId={peerId}\n          storyId={renderingStoryId!}\n          onDelete={onDelete}\n          dimensions={slideSizes.activeSlide}\n          isPrivateStories={renderingIsPrivate}\n          isArchivedStories={renderingIsArchive}\n          isDeleteModalOpen={isDeleteModalOpen}\n          isSingleStory={isSingleStory}\n          getIsAnimating={getIsAnimating}\n          onClose={onClose}\n          onReport={onReport}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.wrapper}\n      ref={containerRef}\n      style={`--story-viewer-scale: ${slideSizes.scale}`}\n      onTransitionEnd={handleTransitionEnd}\n    >\n      <div className={styles.fullSize} onClick={onClose} />\n      {renderingPeerIds.length > 1 && (\n        <div className={styles.backdropNonInteractive} style={`height: ${slideSizes.slide.height}px`} />\n      )}\n      {renderingPeerIds.map((peerId, index) => {\n        if (peerId === renderingPeerId) {\n          return renderStory(renderingPeerId);\n        }\n\n        return renderStoryPreview(peerId, index, index - renderingPeerPosition);\n      })}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      peerId: currentPeerId, storyId: currentStoryId, isSinglePeer, isSingleStory, isPrivate, isArchive, storyList,\n    },\n  } = selectTabState(global);\n  const { byPeerId, orderedPeerIds: { active } } = global.stories;\n\n  return {\n    byPeerId,\n    peerIds: storyList?.peerIds ?? active,\n    currentPeerId,\n    currentStoryId,\n    isSinglePeer,\n    isSingleStory,\n    isPrivate,\n    isArchive,\n  };\n}, (global) => selectIsStoryViewerOpen(global))(StorySlides));\n","import { useState } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  });\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"views-list\":\"gpDY8bos\",\"viewsList\":\"gpDY8bos\",\"views-list-loading\":\"vuRAfQ5v\",\"viewsListLoading\":\"vuRAfQ5v\",\"info\":\"AOSUIChK\",\"centeredInfo\":\"oGLhkkS7\",\"view-reaction\":\"MLaabS6n\",\"viewReaction\":\"MLaabS6n\",\"header\":\"d3N2bktu\",\"content\":\"QmRA3HZK\",\"top-button\":\"Dkv8GAxf\",\"topButton\":\"Dkv8GAxf\",\"contact-filter\":\"YpB_9VxE\",\"contactFilter\":\"YpB_9VxE\",\"selected\":\"DoUlpdZJ\",\"sort\":\"axDpgq9G\",\"sort-button\":\"Bm5VA66f\",\"sortButton\":\"Bm5VA66f\",\"icon-sort\":\"YVQiH93R\",\"iconSort\":\"YVQiH93R\",\"icon-down\":\"NXP9aMD0\",\"iconDown\":\"NXP9aMD0\",\"search\":\"QQQqBLK6\",\"bottom-info\":\"_CSv6suH\",\"bottomInfo\":\"_CSv6suH\",\"scrolled\":\"RYQ0liYe\",\"footer\":\"dUK7rP37\",\"closeButton\":\"abPzLiCH\",\"opacity-fade-in\":\"cX8oY3zb\",\"opacityFadeIn\":\"cX8oY3zb\",\"fadeIn\":\"Sx_aeh1o\",\"blocked\":\"L82sciL8\",\"check\":\"UqGBKwjg\",\"menuBubble\":\"dRqemuTA\",\"with-colored-status\":\"GQ96fta9\",\"withColoredStatus\":\"GQ96fta9\"};","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiPeer, ApiTypeStoryView, ApiUser,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectPeer } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\n\nimport styles from './StoryViewModal.module.scss';\n\ntype OwnProps = {\n  storyView: ApiTypeStoryView;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\nconst BULLET = '\\u2022';\n\nconst StoryView = ({\n  storyView,\n  peer,\n  availableReactions,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    closeStoryViewer,\n    unblockUser,\n    blockUser,\n    deleteContact,\n    updateStoryView,\n    focusMessage,\n    openStoryViewer,\n    closeStoryViewModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    const { type } = storyView;\n\n    if (type === 'repost') {\n      closeStoryViewModal();\n      openStoryViewer({\n        peerId: storyView.peerId,\n        storyId: storyView.storyId,\n      });\n      return;\n    }\n\n    closeStoryViewer();\n\n    setTimeout(() => {\n      if (type === 'user') {\n        openChat({ id: storyView.peerId });\n      } else if (type === 'forward') {\n        focusMessage({ chatId: storyView.peerId, messageId: storyView.messageId });\n      }\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const contextActions = useMemo(() => {\n    if (!isUserId(storyView.peerId)) return undefined;\n    const { peerId, areStoriesBlocked, isUserBlocked } = storyView;\n    const user = peer as ApiUser;\n    const { isContact } = user || {};\n    const fullName = getUserFullName(user);\n\n    const actions: MenuItemContextAction[] = [];\n\n    if (!isUserBlocked) {\n      if (!areStoriesBlocked) {\n        actions.push({\n          handler: () => {\n            blockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: true });\n          },\n          title: lang('StoryHideFrom', fullName),\n          icon: 'hand-stop',\n        });\n      } else {\n        actions.push({\n          handler: () => {\n            unblockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: false });\n          },\n          title: lang('StoryShowBackTo', fullName),\n          icon: 'play-story',\n        });\n      }\n    }\n\n    if (isContact) {\n      actions.push({\n        handler: () => {\n          deleteContact({ userId: peerId });\n        },\n        title: lang('DeleteContact'),\n        icon: 'delete-user',\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        handler: () => {\n          if (isUserBlocked) {\n            unblockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: false });\n          } else {\n            blockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: true });\n          }\n        },\n        title: lang(isUserBlocked ? 'Unblock' : 'BlockUser'),\n        icon: isUserBlocked ? 'user' : 'delete-user',\n        destructive: !isUserBlocked,\n      });\n    }\n\n    return actions;\n  }, [lang, storyView, peer]);\n\n  const statusIcon: IconName = storyView.type === 'user' ? 'message-read'\n    : storyView.type === 'forward' ? 'forward' : 'loop';\n  const shouldColorStatus = storyView.type === 'forward' || storyView.type === 'repost';\n\n  const status = useMemo(() => {\n    const isModified = storyView.type === 'repost' && storyView.story.forwardInfo?.isModified;\n    const parts = [formatDateAtTime(lang, storyView.date * 1000)];\n    if (isModified) {\n      parts.push(lang('lng_edited'));\n    }\n\n    return parts.join(` ${BULLET} `);\n  }, [lang, storyView]);\n\n  return (\n    <ListItem\n      key={storyView.peerId}\n      className={buildClassName(\n        'chat-item-clickable small-icon',\n        styles.opacityFadeIn,\n        (storyView.isUserBlocked || storyView.areStoriesBlocked) && styles.blocked,\n      )}\n      onClick={handleClick}\n      rightElement={storyView.type === 'user' && storyView.reaction ? (\n        <ReactionStaticEmoji\n          reaction={storyView.reaction}\n          className={styles.viewReaction}\n          size={DEFAULT_REACTION_SIZE}\n          availableReactions={availableReactions}\n          withIconHeart\n        />\n      ) : undefined}\n      contextActions={contextActions}\n      withPortalForMenu\n      menuBubbleClassName={styles.menuBubble}\n    >\n      {isUserId(storyView.peerId) ? (\n        <PrivateChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          userId={storyView.peerId}\n          noStatusOrTyping\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n          forceShowSelf\n        />\n      ) : (\n        <GroupChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          chatId={storyView.peerId}\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { storyView }) => {\n  const peer = selectPeer(global, storyView.peerId);\n\n  return {\n    peer,\n    availableReactions: global.reactions.availableReactions,\n  };\n})(StoryView));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStoryView } from '../../api/types';\n\nimport {\n  STORY_MIN_REACTIONS_SORT,\n  STORY_VIEWS_MIN_CONTACTS_FILTER,\n  STORY_VIEWS_MIN_SEARCH,\n} from '../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport PlaceholderChatInfo from '../ui/placeholder/PlaceholderChatInfo';\nimport SearchInput from '../ui/SearchInput';\nimport StoryView from './StoryView';\n\nimport styles from './StoryViewModal.module.scss';\n\ninterface StateProps {\n  story?: ApiStory;\n  isLoading?: boolean;\n  views?: ApiTypeStoryView[];\n  nextOffset?: string;\n  viewersExpirePeriod: number;\n  isCurrentUserPremium?: boolean;\n}\n\nconst REFETCH_DEBOUNCE = 250;\n\nfunction StoryViewModal({\n  story,\n  viewersExpirePeriod,\n  views,\n  nextOffset,\n  isLoading,\n  isCurrentUserPremium,\n}: StateProps) {\n  const {\n    loadStoryViewList, closeStoryViewModal, clearStoryViews,\n  } = getActions();\n\n  const [areJustContacts, markJustContacts, unmarkJustContacts] = useFlag(false);\n  const [areReactionsFirst, markReactionsFirst, unmarkReactionsFirst] = useFlag(true);\n  const [query, setQuery] = useState('');\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(story);\n  const isExpired = Boolean(story?.date) && (story.date + viewersExpirePeriod) < getServerTime();\n  const { viewsCount = 0, reactionsCount = 0 } = story?.views || {};\n\n  const shouldShowJustContacts = story?.isPublic && viewsCount > STORY_VIEWS_MIN_CONTACTS_FILTER;\n  const shouldShowSortByReactions = reactionsCount > STORY_MIN_REACTIONS_SORT;\n  const shouldShowSearch = viewsCount > STORY_VIEWS_MIN_SEARCH;\n  const hasHeader = shouldShowJustContacts || shouldShowSortByReactions || shouldShowSearch;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setQuery('');\n      unmarkJustContacts();\n      markReactionsFirst();\n    }\n  }, [isOpen]);\n\n  const refetchViews = useDebouncedCallback(() => {\n    clearStoryViews({ isLoading: true });\n  }, [], REFETCH_DEBOUNCE, true);\n\n  useEffect(() => {\n    refetchViews();\n  }, [areJustContacts, areReactionsFirst, query, refetchViews]);\n\n  const sortedViews = useMemo(() => {\n    return views?.sort(prepareComparator(areReactionsFirst));\n  }, [areReactionsFirst, views]);\n\n  const placeholderCount = !sortedViews?.length ? Math.min(viewsCount, 8) : 1;\n\n  const notAllAvailable = Boolean(sortedViews?.length) && sortedViews.length < viewsCount && isExpired;\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!story?.id || nextOffset === undefined) return;\n    loadStoryViewList({\n      peerId: story.peerId,\n      storyId: story.id,\n      offset: nextOffset,\n      areReactionsFirst: areReactionsFirst || undefined,\n      areJustContacts: areJustContacts || undefined,\n      query,\n    });\n  });\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const handleClose = useLastCallback(() => {\n    closeStoryViewModal();\n  });\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        fluid\n        size=\"tiny\"\n        color=\"translucent\"\n        className={buildClassName(!isMenuOpen && 'active', styles.sortButton, styles.topButton)}\n        faded={isMenuOpen}\n        onClick={onTrigger}\n        ariaLabel={lang('SortBy')}\n      >\n        <Icon name={areReactionsFirst ? 'heart-outline' : 'recent'} className={styles.iconSort} />\n        <Icon name=\"down\" className={styles.iconDown} />\n      </Button>\n    );\n  }, [areReactionsFirst, lang]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className=\"component-theme-dark\"\n      contentClassName={styles.viewsList}\n      isSlim\n    >\n      {hasHeader && (\n        <div className={styles.header}>\n          {shouldShowJustContacts && (\n            <div className={styles.contactFilter}>\n              <Button\n                className={buildClassName(!areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={unmarkJustContacts}\n              >\n                {lang('AllViewers')}\n              </Button>\n              <Button\n                className={buildClassName(areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={markJustContacts}\n              >\n                {lang('Contacts')}\n              </Button>\n            </div>\n          )}\n          {shouldShowSortByReactions && (\n            <DropdownMenu\n              className={styles.sort}\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"heart-outline\" onClick={markReactionsFirst}>\n                {lang('SortByReactions')}\n                {areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n              <MenuItem icon=\"recent\" onClick={unmarkReactionsFirst}>\n                {lang('SortByTime')}\n                {!areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n            </DropdownMenu>\n          )}\n          {shouldShowSearch && (\n            <SearchInput className={styles.search} value={query} onChange={setQuery} />\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(styles.content, !isAtBeginning && styles.topScrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {isExpired && !isLoading && !query && Boolean(!sortedViews?.length) && (\n          <div className={buildClassName(styles.info, styles.centeredInfo)}>\n            {renderText(\n              lang(isCurrentUserPremium ? 'ServerErrorViewers' : 'ExpiredViewsStub'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n        )}\n        {!isLoading && Boolean(query.length) && !sortedViews?.length && (\n          <div className={styles.info}>\n            {lang('Story.ViewList.EmptyTextSearch')}\n          </div>\n        )}\n        <InfiniteScroll\n          items={sortedViews}\n          onLoadMore={handleLoadMore}\n        >\n          {sortedViews?.map((view) => {\n            const additionalKeyId = view.type === 'forward' ? view.messageId\n              : view.type === 'repost' ? view.storyId : 'user';\n            return (\n              <StoryView key={`${view.peerId}-${view.date}-${additionalKeyId}`} storyView={view} />\n            );\n          })}\n          {isLoading && Array.from({ length: placeholderCount }).map((_, i) => (\n            <ListItem\n\n              key={`placeholder-${i}`}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              disabled\n            >\n              <PlaceholderChatInfo />\n            </ListItem>\n          ))}\n          {notAllAvailable && (\n            <div key=\"not-all-available\" className={buildClassName(styles.info, styles.bottomInfo)}>\n              {lang('Story.ViewList.NotFullyRecorded')}\n            </div>\n          )}\n        </InfiniteScroll>\n      </div>\n      <div className={buildClassName(styles.footer, 'dialog-buttons')}>\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.close)}\n          isText\n          onClick={handleClose}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nfunction prepareComparator(areReactionsFirst?: boolean) {\n  return (a: ApiTypeStoryView, b: ApiTypeStoryView) => {\n    if (areReactionsFirst) {\n      const reactionA = a.type === 'user' && a.reaction;\n      const reactionB = b.type === 'user' && b.reaction;\n      if (reactionA && !reactionB) {\n        return -1;\n      }\n      if (!reactionA && reactionB) {\n        return 1;\n      }\n    }\n\n    return b.date - a.date;\n  };\n}\n\nexport default memo(withGlobal((global) => {\n  const { appConfig } = global;\n  const { storyViewer: { viewModal } } = selectTabState(global);\n  const {\n    storyId, views, nextOffset, isLoading,\n  } = viewModal || {};\n  const story = storyId ? selectPeerStory(global, global.currentUserId!, storyId) : undefined;\n\n  return {\n    storyId,\n    views,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    story: story && 'content' in story ? story : undefined,\n    nextOffset,\n    isLoading,\n    availableReactions: global.reactions.availableReactions,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StoryViewModal));\n","import {\n  beginHeavyAnimation,\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport useSlideSizes from './hooks/useSlideSizes';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport StealthModeModal from './StealthModeModal';\nimport StoryDeleteConfirmModal from './StoryDeleteConfirmModal';\nimport StorySettings from './StorySettings';\nimport StorySlides from './StorySlides';\nimport StoryViewModal from './StoryViewModal';\n\nimport styles from './StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 250;\n\ninterface StateProps {\n  isOpen: boolean;\n  peerId: string;\n  storyId?: number;\n  story?: ApiTypeStory;\n  origin?: StoryViewerOrigin;\n  shouldSkipHistoryAnimations?: boolean;\n  withAnimation?: boolean;\n  isPrivacyModalOpen?: boolean;\n}\n\nfunction StoryViewer({\n  isOpen,\n  peerId,\n  storyId,\n  story,\n  origin,\n  shouldSkipHistoryAnimations,\n  withAnimation,\n  isPrivacyModalOpen,\n}: StateProps) {\n  const { closeStoryViewer, closeStoryPrivacyEditor, reportStory } = getActions();\n\n  const lang = useOldLang();\n  const [storyToDelete, setStoryToDelete] = useState<ApiTypeStory | undefined>(undefined);\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n\n  const { bestImageData, thumbnail } = useStoryProps(story);\n  const slideSizes = useSlideSizes();\n  const isPrevOpen = usePreviousDeprecated(isOpen);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const prevPeerId = usePreviousDeprecated(peerId);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setStoryToDelete(undefined);\n      closeDeleteModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      enableDirectTextInput();\n      stopPriorityPlayback();\n    };\n  }, [isOpen]);\n\n  const handleClose = useCallback(() => {\n    closeStoryViewer();\n  }, [closeStoryViewer]);\n\n  const handleOpenDeleteModal = useLastCallback((s: ApiTypeStory) => {\n    setStoryToDelete(s);\n    openDeleteModal();\n  });\n\n  const handleCloseDeleteModal = useLastCallback(() => {\n    closeDeleteModal();\n    setStoryToDelete(undefined);\n  });\n\n  const openMessageReport = useLastCallback(() => {\n    if (!storyId) return;\n    reportStory({ storyId, peerId });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isGhostAnimation && !isPrevOpen && isOpen && peerId && thumbnail && origin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(peerId, origin, thumbnail, bestImageData, slideSizes.activeSlide);\n    }\n    if (isGhostAnimation && isPrevOpen && !isOpen && prevPeerId && prevBestImageData && prevOrigin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevPeerId, prevOrigin, prevBestImageData);\n    }\n  }, [\n    isGhostAnimation,\n    bestImageData,\n    prevBestImageData,\n    isOpen,\n    isPrevOpen,\n    slideSizes.activeSlide,\n    thumbnail,\n    peerId,\n    prevPeerId,\n    origin,\n    prevOrigin,\n  ]);\n\n  return (\n    <ShowTransition\n      id=\"StoryViewer\"\n      className={styles.root}\n      isOpen={isOpen}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className={styles.backdrop} onClick={handleClose} />\n      <Button\n        className={styles.close}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n\n      <StorySlides\n        isOpen={isOpen}\n        isDeleteModalOpen={isDeleteModalOpen}\n        onReport={openMessageReport}\n        onClose={handleClose}\n        onDelete={handleOpenDeleteModal}\n      />\n\n      <StoryDeleteConfirmModal\n        isOpen={isDeleteModalOpen}\n        story={storyToDelete}\n        onClose={handleCloseDeleteModal}\n      />\n      <StoryViewModal />\n      <StealthModeModal />\n      <StorySettings isOpen={isPrivacyModalOpen} onClose={closeStoryPrivacyEditor} />\n    </ShowTransition>\n  );\n}\n\nexport default memo(withGlobal((global): StateProps => {\n  const {\n    shouldSkipHistoryAnimations, storyViewer: {\n      storyId, peerId, isPrivacyModalOpen, origin,\n    },\n  } = selectTabState(global);\n  const story = peerId && storyId ? selectPeerStory(global, peerId, storyId) : undefined;\n  const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  return {\n    isOpen: selectIsStoryViewerOpen(global),\n    shouldSkipHistoryAnimations,\n    peerId: peerId!,\n    storyId,\n    story,\n    origin,\n    withAnimation,\n    isPrivacyModalOpen,\n  };\n})(StoryViewer));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\n\nimport { PEER_PICKER_ITEM_HEIGHT_PX } from '../../../config';\nimport {\n  getCanPostInChat, getGroupStatus, getUserStatus, isUserOnline,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport { selectMonoforumChannel, selectPeer, selectTopics, selectUserStatus } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../helpers/mediaDimensions';\nimport renderText from '../helpers/renderText';\n\nimport useSelector from '../../../hooks/data/useSelector';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useInputFocusOnOpen from '../../../hooks/useInputFocusOnOpen';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport Avatar from '../Avatar';\nimport FullNameTitle from '../FullNameTitle';\nimport Icon from '../icons/Icon';\nimport TopicIcon from '../TopicIcon';\nimport PickerItem from './PickerItem';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  className?: string;\n  isLowStackPriority?: boolean;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\nconst ITEM_CLASS_NAME = 'ChatOrUserPicker-item';\nconst TOPIC_ITEM_HEIGHT_PX = 56;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  search,\n  searchPlaceholder,\n  className,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n}) => {\n  const { loadTopics } = getActions();\n\n  const oldLang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const topicContainerRef = useRef<HTMLDivElement>();\n  const searchRef = useRef<HTMLInputElement>();\n  const topicSearchRef = useRef<HTMLInputElement>();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds.indexOf(viewportIds![0]);\n\n  const resetSearch = useLastCallback(() => {\n    onSearchChange('');\n  });\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const selectTopicsById = useLastCallback((global: GlobalState) => {\n    if (!forumId) {\n      return undefined;\n    }\n\n    return selectTopics(global, forumId);\n  });\n\n  const forumTopicsById = useSelector(selectTopicsById);\n\n  const [topicIds, topics] = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const chatFullInfoById = global.chats.fullInfoById;\n\n    const chat = chatsById[forumId!];\n\n    if (!chat || !forumTopicsById) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = forumTopicsById\n      ? Object.values(forumTopicsById).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chat, topic, undefined, chatFullInfoById[forumId!])\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : forumTopicsById;\n\n    return [Object.keys(result).map(Number), result];\n  }, [forumId, topicSearch, forumTopicsById]);\n\n  const handleHeaderBackClick = useLastCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  });\n\n  const handleSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  });\n\n  const handleTopicSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatsById = getGlobal().chats.byId;\n\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById[chatId];\n      if (chat?.isForum) {\n        if (!forumTopicsById) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleClick = useLastCallback((chatId: string) => {\n    const chatsById = getGlobal().chats.byId;\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!forumTopicsById) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  });\n\n  const renderChatItem = useCallback((id: string, index: number) => {\n    const global = getGlobal();\n    let peer = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const monoforumChannel = selectMonoforumChannel(global, id);\n    if (monoforumChannel) {\n      peer = monoforumChannel;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (peer.id === currentUserId) return [oldLang('SavedMessagesInfo')];\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(oldLang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return [\n        getUserStatus(oldLang, peer, userStatus),\n        buildClassName(isUserOnline(peer, userStatus, true) && 'online'),\n      ];\n    }\n\n    const [subtitle, subtitleClassName] = getSubtitle() || [];\n\n    return (\n      <PickerItem\n        key={id}\n        className={ITEM_CLASS_NAME}\n        title={(\n          <div className=\"title-wrapper\">\n            <FullNameTitle\n              className=\"item-title\"\n              peer={peer}\n              isMonoforum={Boolean(monoforumChannel)}\n              isSavedMessages={isSelf}\n            />\n          </div>\n        )}\n        avatarElement={(\n          <Avatar\n            peer={peer}\n            asMessageBubble={Boolean(monoforumChannel)}\n            isSavedMessages={isSelf}\n            size=\"medium\"\n          />\n        )}\n        subtitle={subtitle}\n        subtitleClassName={subtitleClassName}\n        ripple\n        style={`top: ${(viewportOffset + index) * PEER_PICKER_ITEM_HEIGHT_PX}px;`}\n\n        onClick={() => handleClick(id)}\n      />\n    );\n  }, [currentUserId, oldLang, viewportOffset]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={oldLang('Back')} onClick={handleHeaderBackClick}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={(topicIds?.length || 0) * TOPIC_ITEM_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {!topicIds && <Loading />}\n          {topicIds?.map((topicId, i) => (\n            <PickerItem\n              key={`${forumId}_${topicId}`}\n              className={ITEM_CLASS_NAME}\n\n              onClick={() => onSelectChatOrUser(forumId!, topicId)}\n              style={`top: ${(viewportOffset + i) * TOPIC_ITEM_HEIGHT_PX}px;`}\n              avatarElement={(\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n              )}\n              title={renderText(topics[topicId].title)}\n            />\n          ))}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            itemSelector={`.${ITEM_CLASS_NAME}`}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds.length * PEER_PICKER_ITEM_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map(renderChatItem)}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{oldLang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName('ChatOrUserPicker', className)}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\" slideClassName=\"ChatOrUserPicker_slide\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatType } from '../../api/types';\nimport type { ThreadId } from '../../types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport {\n  getCanPostInChat,\n  getHasAdminRight,\n  isChatChannel,\n  isDeletedUser,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport {\n  filterChatIdsByType, selectChat, selectChatFullInfo, selectIsMonoforumAdmin, selectUser,\n} from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from './helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ChatOrUserPicker from './pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  className?: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  isLowStackPriority?: boolean;\n  isForwarding?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  className,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n  isForwarding,\n}) => {\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n\n    const peerIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = selectChat(global, id);\n      const user = selectUser(global, id);\n      const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n      const isChannel = chat && isChatChannel(chat);\n      if (isForwarding && isChannel && !hasAdminRights) return false;\n      if (user && !isDeletedUser(user)) return true;\n\n      if (!chat) return false;\n\n      if (chat.isMonoforum && selectIsMonoforumAdmin(global, id)) {\n        return false;\n      }\n\n      const chatFullInfo = selectChatFullInfo(global, id);\n      // TODO: Handle bulk check with API call\n      return !chatFullInfo || getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n    });\n\n    const sorted = sortChatIds(\n      filterPeersByQuery({\n        ids: unique([\n          ...(currentUserId ? [currentUserId] : []),\n          ...peerIds,\n          ...(contactIds || []),\n        ]),\n        query: search,\n      }),\n      undefined,\n      priorityIds,\n      currentUserId,\n    );\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [\n    isOpen,\n    pinnedIds,\n    currentUserId,\n    activeListIds,\n    search,\n    archivedListIds,\n    contactIds,\n    filter,\n    isForwarding,\n  ]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      className={className}\n      chatOrUserIds={renderingIds}\n      currentUserId={currentUserId}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ThreadId } from '../../types';\n\nimport { getChatTitle, getUserFirstOrLastName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n  isStory?: boolean;\n  isForwarding?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n  isStory,\n  isForwarding,\n}) => {\n  const {\n    openChatOrTopicWithReplyInDraft,\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    forwardStory,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingIsStory = usePreviousDeprecated(isStory, true);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    const isSelf = recipientId === currentUserId;\n    if (isStory) {\n      forwardStory({ toChatId: recipientId });\n      const global = getGlobal();\n      if (isUserId(recipientId)) {\n        showNotification({\n          message: isSelf\n            ? lang('Conversation.StoryForwardTooltip.SavedMessages.One')\n            : lang(\n              'StorySharedTo',\n              getUserFirstOrLastName(selectUser(global, recipientId)),\n            ),\n        });\n      } else {\n        const chat = selectChat(global, recipientId);\n        if (!chat) return;\n\n        showNotification({\n          message: lang('StorySharedTo', getChatTitle(lang, chat)),\n        });\n      }\n      return;\n    }\n\n    if (isSelf) {\n      const message = lang(\n        isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One',\n      );\n\n      forwardToSavedMessages();\n      showNotification({ message });\n    } else {\n      const chatId = recipientId;\n      const topicId = threadId ? Number(threadId) : undefined;\n      if (isForwarding) {\n        setForwardChatOrTopic({ chatId, topicId });\n      } else {\n        openChatOrTopicWithReplyInDraft({ chatId, topicId });\n      }\n    }\n  }, [currentUserId, isManyMessages, isStory, lang, isForwarding]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      className={renderingIsStory ? 'component-theme-dark' : undefined}\n      searchPlaceholder={lang(isForwarding ? 'ForwardTo' : 'ReplyToDialog')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n      isForwarding={isForwarding}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { messageIds, storyId } = selectTabState(global).forwardMessages;\n  const isForwarding = (messageIds && messageIds.length > 0);\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (messageIds?.length || 0) > 1,\n    isStory: Boolean(storyId),\n    isForwarding,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ThreadId } from '../../types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { selectCurrentMessageList, selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport renderText from '../common/helpers/renderText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  dialogs: (ApiError | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, currentMessageList }) => {\n  const {\n    dismissDialog,\n    sendMessage,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      if (!currentMessageList) {\n        return;\n      }\n\n      sendMessage({\n        contact: contactRequest,\n        messageList: currentMessageList,\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiContact) => {\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map((notification) => (\n        <Notification key={notification.localId} notification={notification} />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/browser/url';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (!url) {\n      return;\n    }\n\n    window.open(ensureProtocol(url), '_blank', 'noopener noreferrer');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlText', { url: renderingUrl }, { withNodes: true, withMarkdown: true }))}\n      confirmLabel={lang('OpenUrlConfirm')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VJDwJpsF\",\"buttons\":\"aYO2C2Hx\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { IS_IOS, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport { prepareMapUrl } from '../../../util/map';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './MapModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['mapModal'];\n};\n\nconst OpenMapModal = ({ modal }: OwnProps) => {\n  const { closeMapModal } = getActions();\n\n  const { point: geoPoint, zoom } = modal || {};\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(geoPoint);\n\n  const handleClose = useLastCallback(() => {\n    closeMapModal();\n  });\n\n  const [googleUrl, bingUrl, appleUrl, osmUrl] = useMemo(() => {\n    if (!geoPoint) {\n      return [];\n    }\n\n    const google = prepareMapUrl('google', geoPoint, zoom);\n    const bing = prepareMapUrl('bing', geoPoint, zoom);\n    const osm = prepareMapUrl('osm', geoPoint, zoom);\n    const apple = prepareMapUrl('apple', geoPoint, zoom);\n\n    return [google, bing, apple, osm];\n  }, [geoPoint, zoom]);\n\n  const openUrl = useLastCallback((url: string) => {\n    closeMapModal();\n    window.open(url, '_blank', 'noopener');\n  });\n\n  const handleGoogleClick = useLastCallback(() => {\n    openUrl(googleUrl!);\n  });\n\n  const handleBingClick = useLastCallback(() => {\n    openUrl(bingUrl!);\n  });\n\n  const handleAppleClick = useLastCallback(() => {\n    openUrl(appleUrl!);\n  });\n\n  const handleOsmClick = useLastCallback(() => {\n    openUrl(osmUrl!);\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.root}\n      title={lang('OpenMapWith')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      isSlim\n    >\n      <div className={styles.buttons}>\n        {(IS_IOS || IS_MAC_OS) && (\n          <Button fluid size=\"smaller\" onClick={handleAppleClick}>\n            Apple Maps\n          </Button>\n        )}\n        <Button fluid size=\"smaller\" onClick={handleGoogleClick}>\n          Google Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleBingClick}>\n          Bing Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleOsmClick}>\n          OpenStreetMap\n        </Button>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(OpenMapModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport renderText from '../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal?: TabState['urlAuth'];\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps & StateProps> = ({\n  modal, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(modal, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useOldLang();\n\n  const handleOpen = useCallback(() => {\n    if (modal?.url && isLoginChecked) {\n      const acceptAction = modal.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else if (currentAuth?.url) {\n      window.open(ensureProtocol(currentAuth.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    modal, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(modal?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    return {\n      currentUser,\n    };\n  },\n)(UrlAuthModal));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateToString, formatTime, getDayStart } from '../../util/dates/dateFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  description?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onDateChange?: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  description,\n  onClose,\n  onSubmit,\n  onDateChange,\n  onSecondButtonClick,\n}) => {\n  const lang = useOldLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  const isDisabled = (isFutureMode && selectedDate.getTime() < minDate.getTime())\n    || (isPastMode && selectedDate.getTime() > maxDate.getTime());\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      onDateChange?.(dateCopy);\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    if (isFutureMode && selectedDate < minDate) {\n      onSubmit(minDate);\n    } else if (isPastMode && selectedDate > maxDate) {\n      onSubmit(maxDate);\n    } else {\n      onSubmit(selectedDate);\n    }\n  }, [isFutureMode, isPastMode, minDate, maxDate, onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n    onDateChange?.(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate, onDateChange]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n    onDateChange?.(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate, onDateChange]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <Icon name=\"previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <Icon name=\"next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : gridDate ? 'clickable' : '',\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        {description && (\n          <div className=\"description\">\n            {description}\n          </div>\n        )}\n        <div className=\"footer\">\n          <Button\n            onClick={handleSubmit}\n            disabled={isDisabled}\n          >\n            {submitLabel}\n          </Button>\n          {secondButtonLabel && (\n            <Button onClick={onSecondButtonClick} isText>\n              {secondButtonLabel}\n            </Button>\n          )}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: OldLangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.getTime() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useOldLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useOldLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  const inputRef = useRef<HTMLInputElement>();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => {\n        inputRef.current?.focus();\n      }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            peer={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text NewContactModal__help-text__negative\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import type {\n  ElementRef } from '../lib/teact/teact';\nimport {\n  useEffect, useSignal, useState,\n} from '../lib/teact/teact';\n\nimport type { Point, Size } from '../types';\n\nimport { RESIZE_HANDLE_SELECTOR } from '../config';\nimport buildStyle from '../util/buildStyle';\nimport { captureEvents } from '../util/captureEvents';\nimport getPointerPosition from '../util/events/getPointerPosition';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport enum ResizeHandleType {\n  Top,\n  Bottom,\n  Left,\n  Right,\n  TopLeft,\n  TopRight,\n  BottomLeft,\n  BottomRight,\n}\n\ntype ResizeHandleSelectorType = 'top' | 'bottom' | 'left'\n  | 'right' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\nconst resizeHandleSelectorsMap: Record<ResizeHandleSelectorType, ResizeHandleType> = {\n  top: ResizeHandleType.Top,\n  bottom: ResizeHandleType.Bottom,\n  left: ResizeHandleType.Left,\n  right: ResizeHandleType.Right,\n  topLeft: ResizeHandleType.TopLeft,\n  topRight: ResizeHandleType.TopRight,\n  bottomLeft: ResizeHandleType.BottomLeft,\n  bottomRight: ResizeHandleType.BottomRight,\n};\n\nconst resizeHandleSelectors = Object.keys(resizeHandleSelectorsMap) as ResizeHandleSelectorType[];\n\nlet resizeTimeout: number | undefined;\nconst FULLSCREEN_POSITION = { x: 0, y: 0 };\n\nexport default function useDraggable(\n  ref: ElementRef<HTMLElement>,\n  dragHandleElementRef: ElementRef<HTMLElement>,\n  isDragEnabled: boolean = true,\n  originalSize: Size,\n  isFullscreen: boolean = false,\n  minimumSize: Size = { width: 0, height: 0 },\n  cachedPosition?: Point,\n) {\n  const [elementCurrentPosition, setElementCurrentPosition] = useState<Point | undefined>(cachedPosition);\n  const [elementCurrentSize, setElementCurrentSize] = useState<Size | undefined>(undefined);\n\n  const [getElementPositionOnStartTransform, setElementPositionOnStartTransform] = useSignal({ x: 0, y: 0 });\n  const [getElementSizeOnStartTransform, setElementSizeOnStartTransform] = useSignal({ width: 0, height: 0 });\n  const [getTransformStartPoint, setTransformStartPoint] = useSignal({ x: 0, y: 0 });\n\n  const elementPositionOnStartTransform = getElementPositionOnStartTransform();\n  const transformStartPoint = getTransformStartPoint();\n\n  const element = ref.current;\n  const dragHandleElement = dragHandleElementRef.current;\n\n  const [isInitiated, setIsInitiated] = useFlag(false);\n  const [wasElementShown, setWasElementShown] = useFlag(false);\n  const [isDragging, startDragging, stopDragging] = useFlag(false);\n  const [isResizing, startResizing, stopResizing] = useFlag(false);\n  const [isWindowsResizing, startWindowResizing, stopWindowResizing] = useFlag(false);\n\n  const [hitResizeHandle, setHitResizeHandle] = useState<ResizeHandleType | undefined>(undefined);\n\n  function getVisibleArea() {\n    return {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n  }\n\n  const updateCurrentPosition = useLastCallback((position: Point) => {\n    if (!isFullscreen) setElementCurrentPosition({ x: position.x, y: position.y });\n  });\n\n  const getActualPosition = useLastCallback(() => {\n    return isFullscreen ? FULLSCREEN_POSITION : elementCurrentPosition;\n  });\n\n  const getCenteredPosition = useLastCallback(() => {\n    if (!elementCurrentSize) return undefined;\n    const { width, height } = elementCurrentSize;\n\n    const visibleArea = getVisibleArea();\n    const viewportWidth = visibleArea.width;\n    const viewportHeight = visibleArea.height;\n\n    const centeredX = (viewportWidth - width) / 2;\n    const centeredY = (viewportHeight - height) / 2;\n\n    return { x: centeredX, y: centeredY };\n  });\n\n  useEffect(() => {\n    if (element) setWasElementShown();\n  }, [element]);\n\n  useEffect(() => {\n    if (!isInitiated && elementCurrentSize) {\n      const centeredPosition = getCenteredPosition();\n      if (!centeredPosition) return;\n\n      updateCurrentPosition(centeredPosition);\n      setIsInitiated();\n    }\n  }, [elementCurrentSize, isInitiated, element]);\n\n  const handleStartDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (targetElement.closest('.no-drag') || !element) {\n      return;\n    }\n    const { x, y } = getPointerPosition(event);\n\n    const { left, top } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setTransformStartPoint({ x, y });\n\n    startDragging();\n  });\n\n  function getResizeHandleFromTarget(targetElement: HTMLElement) {\n    const closest = (selector: string) => targetElement.closest(selector);\n\n    if (!closest(RESIZE_HANDLE_SELECTOR)) return undefined;\n    for (const selector of resizeHandleSelectors) {\n      if (closest(`.${selector}`)) {\n        return resizeHandleSelectorsMap[selector];\n      }\n    }\n    return undefined;\n  }\n\n  const handleStartResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (!element || !targetElement) {\n      return;\n    }\n    const resizeHandle = getResizeHandleFromTarget(targetElement);\n\n    if (resizeHandle === undefined) return;\n    setHitResizeHandle(resizeHandle);\n\n    const { x, y } = getPointerPosition(event);\n\n    const {\n      left, right, top, bottom,\n    } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setElementSizeOnStartTransform({ width: right - left, height: bottom - top });\n    setTransformStartPoint({ x, y });\n\n    startResizing();\n  });\n\n  const handleDragRelease = useLastCallback(() => {\n    stopDragging();\n  });\n\n  const handleResizeRelease = useLastCallback(() => {\n    stopResizing();\n  });\n\n  useEffect(() => {\n    if (!isDragEnabled) {\n      stopDragging();\n    }\n  }, [isDragEnabled]);\n\n  const ensurePositionInVisibleArea = (x: number, y: number) => {\n    const visibleArea = getVisibleArea();\n\n    const visibleAreaWidth = visibleArea.width;\n    const visibleAreaHeight = visibleArea.height;\n\n    const componentWidth = elementCurrentSize!.width;\n    const componentHeight = elementCurrentSize!.height;\n\n    let newX = x;\n    let newY = y;\n\n    if (newX < 0) newX = 0;\n    if (newY < 0) newY = 0;\n    if (newX + componentWidth > visibleAreaWidth) newX = visibleAreaWidth - componentWidth;\n    if (newY + componentHeight > visibleAreaHeight) newY = visibleAreaHeight - componentHeight;\n\n    return { x: newX, y: newY };\n  };\n\n  const adjustPositionWithinBounds = useLastCallback(() => {\n    if (isFullscreen) return;\n    const position = !wasElementShown && !cachedPosition ? getCenteredPosition() : elementCurrentPosition;\n    if (!elementCurrentSize || !position) return;\n    const newPosition = ensurePositionInVisibleArea(position.x, position.y);\n    updateCurrentPosition(newPosition);\n  });\n\n  const ensureSizeInVisibleArea = useLastCallback((sizeForCheck: Size) => {\n    const newSize = sizeForCheck;\n\n    const visibleArea = getVisibleArea();\n\n    const originalWidth = originalSize.width;\n    const originalHeight = originalSize.height;\n    newSize.width = Math.min(visibleArea.width, Math.max(originalWidth, newSize.width));\n    newSize.height = Math.min(visibleArea.height, Math.max(originalHeight, newSize.height));\n\n    return newSize;\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    const newSize = ensureSizeInVisibleArea({ width: originalSize.width, height: originalSize.height });\n    if (newSize) setElementCurrentSize(newSize);\n  }, [originalSize, isResizing]);\n\n  const adjustSizeWithinBounds = useLastCallback(() => {\n    if (!elementCurrentSize || isResizing) return;\n    const newSize = ensureSizeInVisibleArea(elementCurrentSize);\n    if (newSize) setElementCurrentSize(newSize);\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    adjustPositionWithinBounds();\n  }, [elementCurrentSize, isResizing]);\n\n  useEffect(() => {\n    const handleWindowResize = () => {\n      startWindowResizing();\n      adjustSizeWithinBounds();\n      adjustPositionWithinBounds();\n      if (resizeTimeout) {\n        clearTimeout(resizeTimeout);\n        resizeTimeout = undefined;\n      }\n      resizeTimeout = window.setTimeout(() => {\n        resizeTimeout = undefined;\n        stopWindowResizing();\n      }, 250);\n    };\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = undefined;\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, [adjustPositionWithinBounds]);\n\n  const handleDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isDragging || !element) return;\n    const { x, y } = getPointerPosition(event);\n\n    const offsetX = x - transformStartPoint.x;\n    const offsetY = y - transformStartPoint.y;\n\n    const newX = elementPositionOnStartTransform.x + offsetX;\n    const newY = elementPositionOnStartTransform.y + offsetY;\n\n    if (elementCurrentSize) setElementCurrentPosition(ensurePositionInVisibleArea(newX, newY));\n  });\n\n  const handleResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isResizing || !element || hitResizeHandle === undefined) return;\n    const { x, y } = getPointerPosition(event);\n    const sizeOnStartTransform = getElementSizeOnStartTransform();\n\n    const pageVisibleX = Math.min(Math.max(0, x), getVisibleArea().width);\n    const pageVisibleY = Math.min(Math.max(0, y), getVisibleArea().height);\n\n    const offsetX = pageVisibleX - transformStartPoint.x;\n    const offsetY = pageVisibleY - transformStartPoint.y;\n\n    const maxX = elementPositionOnStartTransform.x + sizeOnStartTransform.width - minimumSize.width;\n    const maxY = elementPositionOnStartTransform.y + sizeOnStartTransform.height - minimumSize.height;\n\n    const originalBounds = {\n      x: elementPositionOnStartTransform.x,\n      y: elementPositionOnStartTransform.y,\n      width: sizeOnStartTransform.width,\n      height: sizeOnStartTransform.height,\n    };\n\n    const newBounds = { ...originalBounds };\n\n    if (hitResizeHandle === ResizeHandleType.Left\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width - offsetX, minimumSize.width);\n      newBounds.x = Math.min(newBounds.x + offsetX, maxX);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Right\n      || hitResizeHandle === ResizeHandleType.TopRight\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width + offsetX, minimumSize.width);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Top\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.TopRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height - offsetY, minimumSize.height);\n      newBounds.y = Math.min(newBounds.y + offsetY, maxY);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Bottom\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height + offsetY, minimumSize.height);\n    }\n\n    setElementCurrentSize({ width: newBounds.width, height: newBounds.height });\n    setElementCurrentPosition({ x: newBounds.x, y: newBounds.y });\n  });\n\n  useEffect(() => {\n    let cleanup: NoneToVoidFunction | undefined;\n    if (dragHandleElement && isDragEnabled) {\n      cleanup = captureEvents(dragHandleElement, {\n        onCapture: handleStartDrag,\n        onDrag: handleDrag,\n        onRelease: handleDragRelease,\n        onClick: handleDragRelease,\n        onDoubleClick: handleDragRelease,\n      });\n    }\n    return cleanup;\n  }, [isDragEnabled, dragHandleElement]);\n\n  useEffect(() => {\n    const cleanups: NoneToVoidFunction[] = [];\n    if (element && isDragEnabled) {\n      for (const selector of resizeHandleSelectors) {\n        const resizeHandler = element.querySelector(`.resizeHandle.${selector}`) as HTMLElement;\n\n        if (resizeHandler) {\n          const cleanup = captureEvents(resizeHandler, {\n            onCapture: handleStartResize,\n            onDrag: handleResize,\n            onRelease: handleResizeRelease,\n            onClick: handleResizeRelease,\n            onDoubleClick: handleResizeRelease,\n          });\n\n          if (cleanup) {\n            cleanups.push(cleanup);\n          }\n        }\n      }\n    }\n\n    return () => {\n      cleanups.forEach((cleanup) => cleanup());\n    };\n  }, [isDragEnabled, element]);\n\n  const cursorStyle = isDragging ? 'cursor: grabbing !important; ' : '';\n\n  const actualPosition = getActualPosition();\n\n  if (!isInitiated || !elementCurrentSize || !actualPosition) {\n    return {\n      isDragging: false,\n      style: cursorStyle,\n    };\n  }\n\n  const style = buildStyle(\n    `left: ${actualPosition.x}px;`,\n    `top: ${actualPosition.y}px;`,\n    !isFullscreen && `max-width: ${elementCurrentSize.width}px;`,\n    !isFullscreen && `max-height: ${elementCurrentSize.height}px;`,\n    'position: fixed;',\n    (isDragging || isResizing || isWindowsResizing) && 'transition: none !important;',\n    cursorStyle,\n  );\n\n  return {\n    position: elementCurrentPosition,\n    size: elementCurrentSize,\n    isDragging,\n    isResizing,\n    style,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kUZmBlnN\",\"window-state-button\":\"Rax9j_TK\",\"windowStateButton\":\"Rax9j_TK\",\"button\":\"SMRJmUuE\",\"avatars\":\"GP17QhNN\",\"state-icon\":\"sdbTXCxq\",\"stateIcon\":\"sdbTXCxq\",\"icon\":\"P0P4gW6a\",\"title\":\"TZFjRaG4\"};","import {\n  memo, useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { WebApp } from '../../../types/webapp';\n\nimport { selectActiveWebApp, selectTabState, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './MinimizedWebAppModal.module.scss';\n\ntype StateProps = {\n  activeTabBot?: ApiUser;\n  isMinimizedState?: boolean;\n  openedWebApps?: Record<string, WebApp>;\n};\n\nconst MinimizedWebAppModal = ({\n  activeTabBot, isMinimizedState, openedWebApps,\n}: StateProps) => {\n  const {\n    changeWebAppModalState,\n    closeWebAppModal,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const ref = useRef<HTMLDivElement>();\n\n  const openedWebAppsValues = useMemo(() => {\n    return openedWebApps && Object.values(openedWebApps);\n  }, [openedWebApps]);\n\n  const openedTabsCount = openedWebAppsValues?.length;\n\n  const peers = useMemo(() => {\n    if (!openedTabsCount) return [];\n\n    const global = getGlobal();\n    const activeTabBotId = activeTabBot?.id;\n    const openedApps = unique([activeTabBotId, ...openedWebAppsValues.map((app) => app.botId)]);\n    const bots = openedApps.map((id) => id && selectUser(global, id)).filter(Boolean).slice(0, 3);\n    return bots;\n  }, [openedTabsCount, activeTabBot, openedWebAppsValues]);\n\n  const handleCloseClick = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleExpandClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  });\n\n  if (!isMinimizedState) return undefined;\n\n  function renderTitle() {\n    const activeTabName = peers.length > 0 && peers[0]?.firstName;\n    const title = openedTabsCount && activeTabName && openedTabsCount > 1\n      ? lang('MiniAppsMoreTabs',\n        {\n          botName: activeTabName,\n          count: openedTabsCount - 1,\n        },\n        {\n          pluralValue: openedTabsCount - 1,\n        })\n      : activeTabName;\n\n    return (\n      <div className={styles.title}>\n        {title}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        styles.root,\n      )}\n    >\n      <Button\n        className={styles.button}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        ariaLabel={oldLang('Close')}\n        onClick={handleCloseClick}\n      >\n        <Icon className={styles.icon} name=\"close\" />\n      </Button>\n      <AvatarList className={styles.avatars} size=\"mini\" peers={peers} />\n      {renderTitle()}\n      <Button\n        className={buildClassName(\n          styles.windowStateButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleExpandClick}\n      >\n        <Icon className={styles.stateIcon} name=\"expand-modal\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const webApps = tabState.webApps;\n\n    const { botId } = selectActiveWebApp(global) || {};\n    const { modalState, openedWebApps } = webApps || {};\n    const isMinimizedState = modalState === 'minimized';\n    const activeTabBot = botId ? selectUser(global, botId) : undefined;\n\n    return {\n      activeTabBot,\n      isMinimizedState,\n      openedWebApps,\n    };\n  },\n)(MinimizedWebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RFg0Ey2I\",\"user-count-badge\":\"UZtJ6ZXb\",\"userCountBadge\":\"UZtJ6ZXb\",\"user-badge-icon\":\"pTiZFhsG\",\"userBadgeIcon\":\"pTiZFhsG\",\"name\":\"TzA5nqCC\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PeerBadge from '../../common/PeerBadge';\n\nimport styles from './WebAppGridItem.module.scss';\n\nexport type OwnProps = {\n\n  chatId: string;\n  isPopularApp?: boolean;\n};\n\nexport type StateProps = {\n  user?: ApiUser;\n};\n\nfunction WebAppGridItem({ user, isPopularApp }: OwnProps & StateProps) {\n  const {\n    requestMainWebView,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useLastCallback(() => {\n    if (!user) {\n      return;\n    }\n    const botId = user?.id;\n    if (!botId) {\n      return;\n    }\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId,\n      peerId: botId,\n      theme,\n    });\n  });\n\n  if (!user) return undefined;\n\n  const title = user?.firstName;\n  const activeUserCount = user?.botActiveUsers;\n  const badgeText = activeUserCount && isPopularApp ? formatIntegerCompact(lang, activeUserCount) : undefined;\n\n  return (\n    <div\n      className={styles.container}\n      onClick={handleClick}\n    >\n      <PeerBadge\n        className={buildClassName(styles.avatarContainer, isPopularApp && 'PopularAppGridItem')}\n        textClassName={styles.name}\n        badgeClassName={styles.userCountBadge}\n        badgeIconClassName={styles.userBadgeIcon}\n        peer={user}\n        text={title}\n        badgeText={badgeText}\n        badgeIcon=\"user-filled\"\n      />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const user = selectUser(global, chatId);\n\n    return {\n      user,\n    };\n  },\n)(WebAppGridItem));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"BJV09FsC\",\"search\":\"bdi8G7GR\",\"section-title\":\"ex3kxgWX\",\"sectionTitle\":\"ex3kxgWX\",\"section-content\":\"uIZzLhEh\",\"sectionContent\":\"uIZzLhEh\",\"showMoreLink\":\"h_Zs9ypA\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback,\n  useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport WebAppGridItem from './WebAppGridItem';\n\nimport styles from './MoreAppsTabContent.module.scss';\n\nconst POPULAR_APPS_SLICE = 30;\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\nconst LESS_GRID_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MoreAppsTabContent: FC<StateProps> = ({\n  foundIds,\n  recentBotIds,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n  const {\n    searchPopularBotApps,\n  } = getActions();\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n\n    return filterPeersByQuery({ ids: foundIds, query: searchQuery, type: 'user' });\n  }, [foundIds, searchQuery]);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleSearchInputReset = useCallback(() => {\n    setSearchQuery('');\n  }, []);\n\n  return (\n    <InfiniteScroll\n      className={buildClassName(styles.root, 'custom-scroll')}\n      items={filteredFoundIds}\n      onLoadMore={handleLoadMore}\n      itemSelector=\".PopularAppGridItem\"\n      noFastList\n      preloadBackwards={POPULAR_APPS_SLICE}\n    >\n      <SearchInput\n        className={styles.search}\n        value={searchQuery}\n        onChange={setSearchQuery}\n        onReset={handleSearchInputReset}\n        placeholder={lang('SearchApps')}\n      />\n      {recentBotIds && !searchQuery && (\n        <div className={styles.section}>\n          <div className={styles.sectionTitle}>\n            <span>{oldLang('SearchAppsMine')}</span>\n            <span className={styles.showMoreLink} onClick={handleToggleShowMoreMine}>\n              {oldLang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n            </span>\n          </div>\n          <div className={styles.sectionContent}>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_GRID_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <WebAppGridItem\n                  chatId={id}\n                />\n              );\n            })}\n          </div>\n        </div>\n      )}\n      <div className={styles.section}>\n        <div className={styles.sectionTitle}>\n          {searchQuery ? lang('Apps') : lang('PopularApps')}\n        </div>\n        <div className={styles.sectionContent}>\n          {filteredFoundIds && filteredFoundIds.map((id) => {\n            return (\n              <WebAppGridItem\n                chatId={id}\n                isPopularApp={!searchQuery}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal((global) => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(MoreAppsTabContent));\n","import type { ElementRef } from '../../../../lib/teact/teact';\nimport { useCallback, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type { WebApp, WebAppInboundEvent, WebAppOutboundEvent } from '../../../../types/webapp';\n\nimport { VERIFY_AGE_MIN_DEFAULT } from '../../../../config';\nimport { getWebAppKey } from '../../../../global/helpers';\nimport { extractCurrentThemeParams } from '../../../../util/themeStyle';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst RELOAD_TIMEOUT = 500;\nconst FULLSCREEN_BUTTONS_AREA_HEIGHT = 3.675 * REM;\n\nconst useWebAppFrame = (\n  ref: ElementRef<HTMLIFrameElement>,\n  isOpen: boolean,\n  isFullscreen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  webApp?: WebApp,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n    setWebAppPaymentSlug,\n    openInvoice,\n    closeWebApp,\n    openSuggestedStatusModal,\n    updateWebApp,\n    updateContentSettings,\n  } = getActions();\n\n  const isReloadSupported = useRef<boolean>(false);\n  const reloadTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendFullScreenChanged = useCallback((value: boolean) => {\n    sendEvent({\n      eventType: 'fullscreen_changed',\n      eventData: {\n        is_fullscreen: value,\n      },\n    });\n  }, [sendEvent]);\n\n  const forceReloadFrame = useLastCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  });\n\n  const reloadFrame = useCallback((url: string) => {\n    if (isReloadSupported.current) {\n      sendEvent({\n        eventType: 'reload_iframe',\n      });\n      reloadTimeout.current = setTimeout(() => {\n        forceReloadFrame(url);\n      }, RELOAD_TIMEOUT);\n      return;\n    }\n\n    forceReloadFrame(url);\n  }, [sendEvent]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendSafeArea = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n    sendEvent({\n      eventType: 'safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n      },\n    });\n\n    sendEvent({\n      eventType: 'content_safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: isFullscreen ? FULLSCREEN_BUTTONS_AREA_HEIGHT : 0,\n        bottom: 0,\n      },\n    });\n  }, [sendEvent, isFullscreen, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n    const contentWindow = ref.current?.contentWindow;\n    const sourceWindow = event.source as Window;\n\n    if (contentWindow !== sourceWindow) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      const { eventType, eventData } = data;\n      // Handle some app requests here to simplify hook usage\n      if (eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (eventType === 'web_app_close') {\n        if (webApp) {\n          const key = getWebAppKey(webApp);\n          closeWebApp({ key, skipClosingConfirmation: true });\n        }\n      }\n\n      if (eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (eventType === 'web_app_request_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_content_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n        isReloadSupported.current = Boolean(eventData.reload_supported);\n      }\n\n      if (eventType === 'iframe_will_reload') {\n        clearTimeout(reloadTimeout.current);\n      }\n\n      if (eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      // Clipboard access temporarily disabled to address security concerns\n      if (eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_open_scan_qr_popup') {\n        showNotification({\n          message: 'Scanning QR code is not supported in this client yet',\n        });\n      }\n\n      if (eventType === 'web_app_open_invoice') {\n        setWebAppPaymentSlug({\n          slug: eventData.slug,\n        });\n        openInvoice({\n          type: 'slug',\n          slug: eventData.slug,\n        });\n      }\n\n      if (eventType === 'web_app_open_link') {\n        const linkUrl = eventData.url;\n        window.open(linkUrl, '_blank', 'noreferrer');\n      }\n\n      if (eventType === 'web_app_biometry_get_info') {\n        sendEvent({\n          eventType: 'biometry_info_received',\n          eventData: {\n            available: false,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_device_storage_clear'\n        || eventType === 'web_app_device_storage_get_key'\n        || eventType === 'web_app_device_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'device_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_secure_storage_clear'\n        || eventType === 'web_app_secure_storage_get_key'\n        || eventType === 'web_app_secure_storage_restore_key'\n        || eventType === 'web_app_secure_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'secure_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_accelerometer') {\n        sendEvent({\n          eventType: 'accelerometer_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_gyroscope') {\n        sendEvent({\n          eventType: 'gyroscope_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_device_orientation') {\n        sendEvent({\n          eventType: 'device_orientation_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_add_to_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_check_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_checked',\n          eventData: {\n            status: 'unsupported',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_set_emoji_status') {\n        const { custom_emoji_id, duration } = eventData;\n\n        if (!custom_emoji_id || typeof custom_emoji_id !== 'string') {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'SUGGESTED_EMOJI_INVALID',\n            },\n          });\n          return;\n        }\n\n        if (duration) {\n          try {\n            BigInt(duration);\n          } catch (e) {\n            sendEvent({\n              eventType: 'emoji_status_failed',\n              eventData: {\n                error: 'DURATION_INVALID',\n              },\n            });\n            return;\n          }\n        }\n\n        if (!webApp) {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'UNKNOWN_ERROR',\n            },\n          });\n          return;\n        }\n\n        openSuggestedStatusModal({\n          webAppKey: getWebAppKey(webApp),\n          customEmojiId: custom_emoji_id,\n          duration: Number(duration),\n          botId: webApp.botId,\n        });\n      }\n\n      if (eventType === 'web_app_verify_age') {\n        const { passed } = eventData;\n        const minAge = getGlobal().appConfig?.verifyAgeMin || VERIFY_AGE_MIN_DEFAULT;\n        const ageFromParam = eventData.age || 0;\n\n        if (passed && ageFromParam >= minAge) {\n          showNotification({\n            message: {\n              key: 'TitleAgeCheckSuccess',\n            },\n          });\n          updateContentSettings({ isSensitiveEnabled: true });\n        } else {\n          showNotification({\n            message: {\n              key: 'TitleAgeCheckFailed',\n            },\n          });\n        }\n      }\n\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [\n    isSimpleView, sendEvent, onEvent, sendCustomStyle, webApp,\n    sendTheme, sendViewport, sendSafeArea, onLoad, windowSize.isResizing,\n    ref,\n  ]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, sendSafeArea, windowSize]);\n\n  useEffect(() => {\n    if (!webApp?.plannedEvents?.length) return;\n    const events = webApp.plannedEvents;\n    events.forEach((event) => {\n      sendEvent(event);\n    });\n\n    updateWebApp({\n      key: getWebAppKey(webApp),\n      update: {\n        plannedEvents: [],\n      },\n    });\n  }, [sendEvent, webApp]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage, ref]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      sendSafeArea();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, isFullscreen, sendViewport, sendSafeArea, ref]);\n\n  return {\n    sendEvent, sendFullScreenChanged, reloadFrame, sendViewport, sendSafeArea, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LeeJZdwH\",\"multi-tab\":\"ESsGT5OD\",\"multiTab\":\"ESsGT5OD\",\"loadingPlaceholder\":\"jEAibDyh\",\"placeholderPath\":\"Gx1BIECZ\",\"fadeOpacityBreath\":\"N5Blieah\",\"defaultPlaceholderGrid\":\"Ig_t1R7i\",\"placeholderSquare\":\"ablUg8HU\",\"hide\":\"Wrl63uWL\",\"frame\":\"OmY14FFl\",\"with-button\":\"liDRl1xT\",\"withButton\":\"liDRl1xT\",\"hidden\":\"vOFiAq3l\",\"secondary-button\":\"ypxiUCFQ\",\"secondaryButton\":\"ypxiUCFQ\",\"main-button\":\"U_ggDKn1\",\"mainButton\":\"U_ggDKn1\",\"visible\":\"KwI4XdkC\",\"buttons-container\":\"mR_hsBdT\",\"buttonsContainer\":\"mR_hsBdT\",\"one-row\":\"YfQO314y\",\"oneRow\":\"YfQO314y\",\"two-rows\":\"gUldkEoy\",\"twoRows\":\"gUldkEoy\",\"left-to-right\":\"ntESqwQ_\",\"leftToRight\":\"ntESqwQ_\",\"right-to-left\":\"q6IUFEL0\",\"rightToLeft\":\"q6IUFEL0\",\"top-to-bottom\":\"gb4iHJ9H\",\"topToBottom\":\"gb4iHJ9H\",\"bottom-to-top\":\"R_bh3GF8\",\"bottomToTop\":\"R_bh3GF8\",\"hide-horizontal\":\"oYaRA7u4\",\"hideHorizontal\":\"oYaRA7u4\",\"secondary-button-spinner\":\"NYV0yA2J\",\"secondaryButtonSpinner\":\"NYV0yA2J\",\"main-button-spinner\":\"oq6HKJur\",\"mainButtonSpinner\":\"oq6HKJur\",\"web-app-popup\":\"YEOURXza\",\"webAppPopup\":\"YEOURXza\",\"without-title\":\"gvljUzY9\",\"withoutTitle\":\"gvljUzY9\",\"closeIcon\":\"BvNtfigU\",\"state-back\":\"rC2wkMIk\",\"stateBack\":\"rC2wkMIk\",\"backIconContainer\":\"JXsuZ01s\",\"moreIcon\":\"T58ozRyW\",\"headerPanel\":\"eYrhewMy\",\"icon\":\"a0AI_he5\",\"headerSplitButton\":\"Tl4_05AQ\",\"headerButton\":\"MvCwTbk_\",\"left\":\"emOpAMBm\",\"right\":\"z4C5VD5o\",\"buttonCaptionContainer\":\"dpZR3YT7\",\"backButtonCaption\":\"dWDprnWa\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiBotAppSettings, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { BotAppPermissions, ThemeKey } from '../../../types';\nimport type {\n  PopupOptions,\n  WebApp,\n  WebAppInboundEvent,\n  WebAppModalStateType,\n  WebAppOutboundEvent,\n} from '../../../types/webapp';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { convertToApiChatType } from '../../../global/helpers';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectBotAppPermissions,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { getGeolocationStatus, IS_GEOLOCATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle.ts';\nimport download from '../../../util/download';\nimport { extractCurrentThemeParams, validateHexColor } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport renderText from '../../common/helpers/renderText';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useFullscreen, { checkIfFullscreen } from '../../../hooks/window/useFullscreen';\nimport usePopupLimit from './hooks/usePopupLimit';\nimport useWebAppFrame from './hooks/useWebAppFrame';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Modal from '../../ui/Modal';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\n\nimport styles from './WebAppModalTabContent.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n  position?: 'left' | 'right' | 'top' | 'bottom';\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n  webApp?: WebApp;\n  registerSendEventCallback: (callback: (event: WebAppOutboundEvent) => void) => void;\n  registerReloadFrameCallback: (callback: (url: string) => void) => void;\n  onContextMenuButtonClick: (e: React.MouseEvent) => void;\n  isTransforming?: boolean;\n  isMultiTabSupported?: boolean;\n  modalHeight: number;\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n  botAppSettings?: ApiBotAppSettings;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n  isPremium?: boolean;\n  modalState?: WebAppModalStateType;\n  botAppPermissions?: BotAppPermissions;\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst ANIMATION_WAIT = 400;\nconst COLLAPSING_WAIT = 350;\nconst POPUP_SEQUENTIAL_LIMIT = 3;\nconst POPUP_RESET_DELAY = 2000; // 2s\nconst APP_NAME_DISPLAY_DURATION = 3800;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModalTabContent: FC<OwnProps & StateProps> = ({\n  modal,\n  webApp,\n  bot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n  registerSendEventCallback,\n  registerReloadFrameCallback,\n  isTransforming,\n  modalState,\n  isMultiTabSupported,\n  onContextMenuButtonClick,\n  botAppPermissions,\n  botAppSettings,\n  modalHeight,\n}) => {\n  const {\n    closeActiveWebApp,\n    sendWebViewData,\n    toggleAttachBot,\n    openTelegramLink,\n    setWebAppPaymentSlug,\n    switchBotInline,\n    sharePhoneWithBot,\n    updateWebApp,\n    resetPaymentStatus,\n    openChatWithInfo,\n    showNotification,\n    openEmojiStatusAccessModal,\n    openLocationAccessModal,\n    changeWebAppModalState,\n    closeWebAppModal,\n    openPreparedInlineMessageModal,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [secondaryButton, setSecondaryButton] = useState<WebAppButton | undefined>();\n\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n\n  const [popupParameters, setPopupParameters] = useState<PopupOptions | undefined>();\n  const [isRequestingPhone, setIsRequestingPhone] = useState(false);\n  const [isRequestingWriteAccess, setIsRequestingWriteAccess] = useState(false);\n  const [requestedFileDownload, setRequestedFileDownload] = useState<{ url: string; fileName: string } | undefined>();\n  const [bottomBarColor, setBottomBarColor] = useState<string | undefined>();\n  const {\n    unlockPopupsAt, handlePopupOpened, handlePopupClosed,\n  } = usePopupLimit(POPUP_SEQUENTIAL_LIMIT, POPUP_RESET_DELAY);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const headerButtonRef = useRef<HTMLDivElement>();\n\n  const headerButtonCaptionRef = useRef<HTMLDivElement>();\n\n  const isFullscreen = modalState === 'fullScreen';\n  const isMinimizedState = modalState === 'minimized';\n\n  const exitFullScreenCallback = useLastCallback(() => {\n    setTimeout(() => {\n      changeWebAppModalState({ state: 'maximized' });\n    }, COLLAPSING_WAIT);\n  });\n\n  const fullscreenElementRef = useRef<HTMLElement>();\n\n  useEffect(() => {\n    fullscreenElementRef.current = document.querySelector('#portals') as HTMLElement;\n  }, []);\n\n  const [, setFullscreen, exitFullscreen] = useFullscreen(fullscreenElementRef, exitFullScreenCallback);\n\n  const activeWebApp = modal?.activeWebAppKey ? modal.openedWebApps[modal.activeWebAppKey] : undefined;\n  const { appName: activeWebAppName, backgroundColor } = activeWebApp || {};\n  const {\n    url, buttonText, isBackButtonVisible,\n  } = webApp || {};\n\n  const {\n    placeholderPath,\n  } = botAppSettings || {};\n\n  const isCloseModalOpen = Boolean(webApp?.isCloseModalOpen);\n  const isRemoveModalOpen = Boolean(webApp?.isRemoveModalOpen);\n\n  const webAppKey = webApp && getWebAppKey(webApp);\n  const activeWebAppKey = activeWebApp && getWebAppKey(activeWebApp);\n\n  const isActive = (activeWebApp && webApp) && activeWebAppKey === webAppKey;\n\n  const isAvailable = IS_GEOLOCATION_SUPPORTED;\n  const isAccessRequested = botAppPermissions?.geolocation !== undefined;\n  const isAccessGranted = Boolean(botAppPermissions?.geolocation);\n\n  const updateCurrentWebApp = useLastCallback((updatedPartialWebApp: Partial<WebApp>) => {\n    if (!webAppKey) return;\n    updateWebApp({ key: webAppKey, update: updatedPartialWebApp });\n  });\n\n  const themeParams = useMemo(() => {\n    return extractCurrentThemeParams();\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [theme]);\n\n  useEffect(() => {\n    setBottomBarColor(themeParams.secondary_bg_color);\n  }, [themeParams]);\n\n  const themeBackgroundColor = themeParams.bg_color;\n  const [backgroundColorFromEvent, setBackgroundColorFromEvent] = useState<string | undefined>();\n  const backgroundColorFromSettings = theme === 'light' ? botAppSettings?.backgroundColor\n    : botAppSettings?.backgroundDarkColor;\n\n  useEffect(() => {\n    const color = backgroundColorFromEvent || backgroundColorFromSettings || themeBackgroundColor;\n\n    updateCurrentWebApp({ backgroundColor: color });\n  }, [themeBackgroundColor, backgroundColorFromEvent, backgroundColorFromSettings]);\n\n  const themeHeaderColor = themeParams.bg_color;\n  const [headerColorFromEvent, setHeaderColorFromEvent] = useState<string | undefined>();\n  const headerColorFromSettings = theme === 'light' ? botAppSettings?.headerColor\n    : botAppSettings?.headerDarkColor;\n\n  useEffect(() => {\n    const color = headerColorFromEvent || headerColorFromSettings || themeHeaderColor;\n\n    updateCurrentWebApp({ headerColor: color });\n  }, [themeHeaderColor, headerColorFromEvent, headerColorFromSettings]);\n\n  const frameRef = useRef<HTMLIFrameElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isOpen = modal?.isModalOpen || false;\n  const isSimple = Boolean(buttonText);\n\n  const {\n    reloadFrame, sendEvent, sendFullScreenChanged, sendViewport, sendSafeArea, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isFullscreen, isSimple, handleEvent, webApp, markLoaded);\n\n  useEffect(() => {\n    if (isActive) registerSendEventCallback(sendEvent);\n  }, [sendEvent, registerSendEventCallback, isActive]);\n\n  useEffect(() => {\n    if (isActive) registerReloadFrameCallback(reloadFrame);\n  }, [reloadFrame, registerReloadFrameCallback, isActive]);\n\n  const isMainButtonVisible = isLoaded && mainButton?.isVisible && mainButton.text.trim().length > 0;\n  const isSecondaryButtonVisible = isLoaded && secondaryButton?.isVisible && secondaryButton.text.trim().length > 0;\n\n  const handleHideCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ isCloseModalOpen: false });\n  });\n  const handleConfirmCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ shouldConfirmClosing: false, isCloseModalOpen: false });\n    setTimeout(() => {\n      closeActiveWebApp();\n    }, ANIMATION_WAIT);\n  });\n\n  const handleHideRemoveModal = useLastCallback(() => {\n    updateCurrentWebApp({ isRemoveModalOpen: false });\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  });\n\n  const handleSecondaryButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'secondary_button_pressed',\n    });\n  });\n\n  const handleAppPopupClose = useLastCallback((buttonId?: string) => {\n    setPopupParameters(undefined);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  });\n\n  const handleAppPopupModalClose = useLastCallback(() => {\n    handleAppPopupClose();\n  });\n\n  const sendThemeCallback = useLastCallback(() => {\n    sendTheme();\n  });\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendThemeCallback();\n    }, ANIMATION_WAIT);\n  }, [theme]);\n\n  const setFullscreenCallback = useLastCallback(() => {\n    if (!checkIfFullscreen() && isActive) {\n      setFullscreen?.();\n    }\n  });\n\n  const exitIfFullscreenCallback = useLastCallback(() => {\n    if (checkIfFullscreen() && isActive) {\n      exitFullscreen?.();\n    }\n  });\n\n  const sendFullScreenChangedCallback = useLastCallback(\n    (value: boolean) => {\n      if (isActive) sendFullScreenChanged(value);\n    },\n  );\n\n  useEffect(() => {\n    if (isFullscreen) {\n      setFullscreenCallback();\n      sendFullScreenChangedCallback(true);\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChangedCallback(false);\n    }\n  }, [isFullscreen]);\n\n  const visibilityChangedCallBack = useLastCallback((visibility: boolean) => {\n    sendEvent({\n      eventType: 'visibility_changed',\n      eventData: {\n        is_visible: visibility,\n      },\n    });\n  });\n\n  useEffect(() => {\n    if (isLoaded) {\n      visibilityChangedCallBack(Boolean(isActive));\n    }\n  }, [isActive, isLoaded]);\n\n  useEffectWithPrevDeps(([prevModalState]) => {\n    if (modalState === 'minimized') {\n      visibilityChangedCallBack(false);\n    }\n    if (modalState && prevModalState === 'minimized') {\n      visibilityChangedCallBack(true);\n    }\n  }, [modalState]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n      resetPaymentStatus();\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, webApp?.slug]);\n\n  const handleRemoveAttachBot = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: false,\n    });\n    closeActiveWebApp();\n  });\n\n  const handleRejectPhone = useLastCallback(() => {\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleAcceptPhone = useLastCallback(() => {\n    sharePhoneWithBot({ botId: bot!.id });\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'sent',\n      },\n    });\n  });\n\n  const handleRejectFileDownload = useLastCallback((shouldCloseActive?: boolean) => {\n    if (shouldCloseActive) {\n      setRequestedFileDownload(undefined);\n      handlePopupClosed();\n    }\n\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleRejectWriteAccess = useLastCallback(() => {\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  const handleAcceptWriteAccess = useLastCallback(async () => {\n    if (!bot) return;\n    const result = await callApi('allowBotSendMessages', { bot });\n    if (!result) {\n      handleRejectWriteAccess();\n      return;\n    }\n\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'allowed',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  async function handleRequestWriteAccess() {\n    if (!bot) return;\n    const canWrite = await callApi('fetchBotCanSendMessage', {\n      bot,\n    });\n\n    if (canWrite) {\n      sendEvent({\n        eventType: 'write_access_requested',\n        eventData: {\n          status: 'allowed',\n        },\n      });\n    }\n    setIsRequestingWriteAccess(!canWrite);\n  }\n\n  async function handleCheckDownloadFile(fileUrl: string, fileName: string) {\n    const canDownload = await callApi('checkBotDownloadFileParams', {\n      bot: bot!,\n      url: fileUrl,\n      fileName,\n    });\n\n    if (!canDownload) {\n      sendEvent({\n        eventType: 'file_download_requested',\n        eventData: {\n          status: 'cancelled',\n        },\n      });\n      return;\n    }\n\n    setRequestedFileDownload({ url: fileUrl, fileName });\n    handlePopupOpened();\n  }\n\n  const handleDownloadFile = useLastCallback(() => {\n    if (!requestedFileDownload) return;\n    setRequestedFileDownload(undefined);\n    handlePopupClosed();\n\n    download(requestedFileDownload.url, requestedFileDownload.fileName);\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'downloading',\n      },\n    });\n  });\n\n  async function handleInvokeCustomMethod(requestId: string, method: string, parameters: string) {\n    const result = await callApi('invokeWebViewCustomMethod', {\n      bot: bot!,\n      customMethod: method,\n      parameters,\n    });\n\n    sendEvent({\n      eventType: 'custom_method_invoked',\n      eventData: {\n        req_id: requestId,\n        ...result,\n      },\n    });\n  }\n\n  useEffect(() => {\n    if (!isOpen) {\n      setPopupParameters(undefined);\n      setIsRequestingPhone(false);\n      setIsRequestingWriteAccess(false);\n      setMainButton(undefined);\n      setSecondaryButton(undefined);\n      updateCurrentWebApp({\n        isSettingsButtonVisible: false,\n        shouldConfirmClosing: false,\n        isBackButtonVisible: false,\n        isCloseModalOpen: false,\n        isRemoveModalOpen: false,\n      });\n      markUnloaded();\n    }\n  }, [isOpen]);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChatWithInfo({ id: bot!.id });\n  });\n\n  function handleEvent(event: WebAppInboundEvent) {\n    const { eventType, eventData } = event;\n\n    if (eventType === 'web_app_request_fullscreen') {\n      if (getIsWebAppsFullscreenSupported()) {\n        changeWebAppModalState({ state: 'fullScreen' });\n      } else {\n        sendEvent({\n          eventType: 'fullscreen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n    }\n\n    if (eventType === 'web_app_exit_fullscreen') {\n      exitIfFullscreenCallback();\n    }\n\n    if (eventType === 'web_app_open_tg_link') {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl, shouldIgnoreCache: eventData.force_request });\n      closeActiveWebApp();\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      updateCurrentWebApp({ isBackButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_setup_settings_button') {\n      updateCurrentWebApp({ isSettingsButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      setBackgroundColorFromEvent(validateHexColor(eventData.color) ? eventData.color : undefined);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const key = eventData.color_key;\n      setHeaderColorFromEvent(eventData.color || (key ? themeParams[key] : undefined));\n    }\n\n    if (eventType === 'web_app_set_bottom_bar_color') {\n      setBottomBarColor(eventData.color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeActiveWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_secondary_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setSecondaryButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n        position: eventData.position,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      updateCurrentWebApp({ shouldConfirmClosing: true });\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (popupParameters || !eventData.message.trim().length || !eventData.buttons?.length\n        || eventData.buttons.length > 3 || isRequestingPhone || isRequestingWriteAccess\n        || unlockPopupsAt > Date.now()) {\n        handleAppPopupClose(undefined);\n        return;\n      }\n\n      setPopupParameters(eventData);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeActiveWebApp();\n    }\n\n    if (eventType === 'web_app_request_phone') {\n      if (popupParameters || isRequestingWriteAccess || unlockPopupsAt > Date.now()) {\n        handleRejectPhone();\n        return;\n      }\n\n      setIsRequestingPhone(true);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_request_write_access') {\n      if (popupParameters || isRequestingPhone || unlockPopupsAt > Date.now()) {\n        handleRejectWriteAccess();\n        return;\n      }\n\n      handleRequestWriteAccess();\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_invoke_custom_method') {\n      const { method, params, req_id: requestId } = eventData;\n      handleInvokeCustomMethod(requestId, method, JSON.stringify(params));\n    }\n\n    if (eventType === 'web_app_request_file_download') {\n      if (requestedFileDownload || unlockPopupsAt > Date.now()) {\n        handleRejectFileDownload();\n        return;\n      }\n      handleCheckDownloadFile(eventData.url, eventData.file_name);\n    }\n\n    if (eventType === 'web_app_send_prepared_message') {\n      if (!bot || !webAppKey) return;\n      const { id } = eventData;\n      openPreparedInlineMessageModal({ botId: bot.id, messageId: id, webAppKey });\n    }\n\n    if (eventType === 'web_app_request_emoji_status_access') {\n      if (!bot) return;\n      openEmojiStatusAccessModal({ bot, webAppKey });\n    }\n\n    if (eventType === 'web_app_check_location') {\n      const handleGeolocationCheck = () => {\n        sendEvent({\n          eventType: 'location_checked',\n          eventData: {\n            available: isAvailable,\n            access_requested: isAccessRequested,\n            access_granted: isAccessGranted,\n          },\n        });\n      };\n\n      handleGeolocationCheck();\n    }\n\n    if (eventType === 'web_app_request_location') {\n      const handleRequestLocation = async () => {\n        const geolocationData = await getGeolocationStatus();\n        const { accessRequested, accessGranted, geolocation } = geolocationData;\n\n        if (!accessGranted || !accessRequested) {\n          sendEvent({\n            eventType: 'location_requested',\n            eventData: {\n              available: false,\n            },\n          });\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n          return;\n        }\n\n        if (isAvailable) {\n          if (isAccessRequested) {\n            sendEvent({\n              eventType: 'location_requested',\n              eventData: {\n                available: Boolean(botAppPermissions?.geolocation),\n                latitude: geolocation?.latitude,\n                longitude: geolocation?.longitude,\n                altitude: geolocation?.altitude,\n                course: geolocation?.heading,\n                speed: geolocation?.speed,\n                horizontal_accuracy: geolocation?.accuracy,\n                vertical_accuracy: geolocation?.altitudeAccuracy,\n              },\n            });\n          } else {\n            openLocationAccessModal({ bot, webAppKey });\n          }\n        } else {\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n        }\n      };\n\n      handleRequestLocation();\n    }\n\n    if (eventType === 'web_app_open_location_settings') {\n      handleOpenChat();\n    }\n  }\n\n  const mainButtonCurrentColor = useCurrentOrPrev(mainButton?.color, true);\n  const mainButtonCurrentTextColor = useCurrentOrPrev(mainButton?.textColor, true);\n  const mainButtonCurrentIsActive = useCurrentOrPrev(mainButton && Boolean(mainButton.isActive), true);\n  const mainButtonCurrentText = useCurrentOrPrev(mainButton?.text, true);\n\n  const secondaryButtonCurrentPosition = useCurrentOrPrev(secondaryButton?.position, true);\n  const secondaryButtonCurrentColor = useCurrentOrPrev(secondaryButton?.color, true);\n  const secondaryButtonCurrentTextColor = useCurrentOrPrev(secondaryButton?.textColor, true);\n  const secondaryButtonCurrentIsActive = useCurrentOrPrev(secondaryButton && Boolean(secondaryButton.isActive), true);\n  const secondaryButtonCurrentText = useCurrentOrPrev(secondaryButton?.text, true);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideMainButton, setShouldHideMainButton] = useState(true);\n  const [shouldHideSecondaryButton, setShouldHideSecondaryButton] = useState(true);\n  const [shouldShowMainButton, setShouldShowMainButton] = useState(false);\n  const [shouldShowSecondaryButton, setShouldShowSecondaryButton] = useState(false);\n\n  const [shouldShowAppNameInFullscreen, setShouldShowAppNameInFullscreen] = useState(false);\n\n  const [backButtonTextWidth, setBackButtonTextWidth] = useState(0);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n      sendSafeArea();\n    }, isTransforming ? 0 : ANIMATION_WAIT);\n  }, [shouldShowSecondaryButton, shouldHideSecondaryButton,\n    shouldShowMainButton, shouldShowMainButton,\n    secondaryButton?.position, sendViewport, isTransforming, modalHeight,\n    sendSafeArea]);\n\n  const isVerticalLayout = secondaryButtonCurrentPosition === 'top' || secondaryButtonCurrentPosition === 'bottom';\n  const isHorizontalLayout = !isVerticalLayout;\n\n  const rowsCount = (isVerticalLayout && shouldShowMainButton && shouldShowSecondaryButton) ? 2\n    : shouldShowMainButton || shouldShowSecondaryButton ? 1 : 0;\n\n  const hideDirection = (isHorizontalLayout\n    && (!shouldHideMainButton && !shouldHideSecondaryButton)) ? 'horizontal' : 'vertical';\n\n  const mainButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const mainButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const appNameDisplayTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (isFullscreen && isOpen && Boolean(activeWebAppName)) {\n      setShouldShowAppNameInFullscreen(true);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n\n      appNameDisplayTimeout.current = setTimeout(() => {\n        setShouldShowAppNameInFullscreen(false);\n        appNameDisplayTimeout.current = undefined;\n      }, APP_NAME_DISPLAY_DURATION);\n    } else {\n      setShouldShowAppNameInFullscreen(false);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n        appNameDisplayTimeout.current = undefined;\n      }\n    }\n\n    return () => {\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n    };\n  }, [isFullscreen, isOpen, activeWebAppName]);\n\n  useEffect(() => {\n    if (mainButtonChangeTimeout.current) clearTimeout(mainButtonChangeTimeout.current);\n    if (mainButtonFastTimeout.current) clearTimeout(mainButtonFastTimeout.current);\n\n    if (isMainButtonVisible) {\n      mainButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowMainButton(true);\n      }, 35);\n      setShouldHideMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isMainButtonVisible) {\n      setShouldShowMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideMainButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isMainButtonVisible]);\n\n  useEffect(() => {\n    if (secondaryButtonChangeTimeout.current) clearTimeout(secondaryButtonChangeTimeout.current);\n    if (secondaryButtonFastTimeout.current) clearTimeout(secondaryButtonFastTimeout.current);\n\n    if (isSecondaryButtonVisible) {\n      secondaryButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowSecondaryButton(true);\n      }, 35);\n      setShouldHideSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isSecondaryButtonVisible) {\n      setShouldShowSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideSecondaryButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isSecondaryButtonVisible]);\n\n  useEffect(() => {\n    if (!shouldShowSecondaryButton && !shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowSecondaryButton, shouldShowMainButton]);\n\n  const frameStyle = buildStyle(\n    `background-color: ${backgroundColor || 'var(--color-background)'}`,\n    isTransforming && 'pointer-events: none;',\n  );\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChanged(false);\n      changeWebAppModalState({ state: 'maximized' });\n      closeWebAppModal();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    exitIfFullscreenCallback();\n  });\n\n  const handleShowContextMenu = useLastCallback((e: React.MouseEvent) => {\n    onContextMenuButtonClick(e);\n  });\n\n  const backIconClass = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n  const backButtonCaption = shouldShowAppNameInFullscreen ? activeWebAppName\n    : oldLang(isBackButtonVisible ? 'Back' : 'Close');\n\n  const hasHeaderElement = headerButtonCaptionRef?.current;\n\n  useEffect(() => {\n    const width = headerButtonCaptionRef?.current?.clientWidth || 0;\n    setBackButtonTextWidth(width);\n  }, [backButtonCaption, hasHeaderElement]);\n\n  function getBackButtonActiveKey() {\n    if (shouldShowAppNameInFullscreen) return 0;\n    return isBackButtonVisible ? 1 : 2;\n  }\n\n  function renderFullscreenBackButtonCaption() {\n    return (\n      <span\n        className={styles.buttonCaptionContainer}\n        style={\n          `width: ${backButtonTextWidth}px;`\n        }\n      >\n        <Transition\n          activeKey={getBackButtonActiveKey()}\n          name=\"slideFade\"\n        >\n          <div\n            ref={headerButtonCaptionRef}\n            className={styles.backButtonCaption}\n          >\n            {backButtonCaption}\n          </div>\n        </Transition>\n      </span>\n    );\n  }\n\n  function renderFullscreenHeaderPanel() {\n    return (\n      <div className={styles.headerPanel}>\n        <div ref={headerButtonRef} className={styles.headerButton} onClick={handleBackClick}>\n          <div className={styles.backIconContainer}>\n            <div className={backIconClass} />\n          </div>\n          {renderFullscreenBackButtonCaption()}\n        </div>\n        <div className={styles.headerSplitButton}>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.left,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-label={lang('WebAppCollapse')}\n            onClick={handleCollapseClick}\n          >\n            <Icon\n              name=\"down\"\n              className={styles.icon}\n            />\n          </div>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.right,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-haspopup=\"menu\"\n            aria-label={lang('AriaMoreButton')}\n            onClick={handleShowContextMenu}\n          >\n            <Icon\n              name=\"more\"\n              className={buildClassName(\n                styles.icon,\n                styles.moreIcon,\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderDefaultPlaceholder() {\n    const className = buildClassName(styles.loadingPlaceholder, styles.defaultPlaceholderGrid, isLoaded && styles.hide);\n    return (\n      <div className={className}>\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n      </div>\n    );\n  }\n\n  function renderPlaceholder() {\n    if (!placeholderPath) {\n      return renderDefaultPlaceholder();\n    }\n    return (\n      <svg\n        className={buildClassName(styles.loadingPlaceholder, isLoaded && styles.hide)}\n        viewBox=\"0 0 512 512\"\n      >\n        <path className={styles.placeholderPath} d={placeholderPath} />\n      </svg>\n    );\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(\n        styles.root,\n        !isActive && styles.hidden,\n        isMultiTabSupported && styles.multiTab,\n      )}\n    >\n      {isFullscreen && getIsWebAppsFullscreenSupported() && renderFullscreenHeaderPanel()}\n      {!isMinimizedState && renderPlaceholder()}\n      <iframe\n        className={buildClassName(\n          styles.frame,\n          shouldDecreaseWebFrameSize && styles.withButton,\n          !isLoaded && styles.hide,\n        )}\n        style={frameStyle}\n        src={url}\n        title={`${bot?.firstName} Web App`}\n        sandbox={SANDBOX_ATTRIBUTES}\n        allow=\"camera; microphone; geolocation; clipboard-write;\"\n        allowFullScreen\n        ref={frameRef}\n      />\n      {!isMinimizedState && (\n        <div\n          style={`background-color: ${bottomBarColor};`}\n          className={buildClassName(\n            styles.buttonsContainer,\n            secondaryButtonCurrentPosition === 'left' && styles.leftToRight,\n            secondaryButtonCurrentPosition === 'right' && styles.rightToLeft,\n            secondaryButtonCurrentPosition === 'top' && styles.topToBottom,\n            secondaryButtonCurrentPosition === 'bottom' && styles.bottomToTop,\n            hideDirection === 'horizontal' && styles.hideHorizontal,\n            rowsCount === 1 && styles.oneRow,\n            rowsCount === 2 && styles.twoRows,\n          )}\n        >\n          <Button\n            className={buildClassName(\n              styles.secondaryButton,\n              shouldShowSecondaryButton && !shouldHideSecondaryButton && styles.visible,\n              shouldHideSecondaryButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${secondaryButtonCurrentColor}; color: ${secondaryButtonCurrentTextColor}`}\n            disabled={!secondaryButtonCurrentIsActive && !secondaryButton?.isProgressVisible}\n            nonInteractive={secondaryButton?.isProgressVisible}\n            onClick={handleSecondaryButtonClick}\n            size=\"smaller\"\n          >\n            {!secondaryButton?.isProgressVisible && secondaryButtonCurrentText}\n            {secondaryButton?.isProgressVisible\n              && <Spinner className={styles.mainButtonSpinner} color=\"blue\" />}\n          </Button>\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && !shouldHideMainButton && styles.visible,\n              shouldHideMainButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive && !mainButton?.isProgressVisible}\n            nonInteractive={mainButton?.isProgressVisible}\n            onClick={handleMainButtonClick}\n            size=\"smaller\"\n          >\n            {!mainButton?.isProgressVisible && mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </div>\n      )}\n      {popupParameters && (\n        <Modal\n          isOpen={Boolean(popupParameters)}\n          title={popupParameters.title || NBSP}\n          onClose={handleAppPopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !popupParameters.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {popupParameters.message}\n          <div className=\"dialog-buttons mt-2\">\n            {popupParameters.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n\n                onClick={() => handleAppPopupClose(button.id)}\n              >\n                {button.text || oldLang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n\n      <ConfirmDialog\n        isOpen={isRequestingPhone}\n        onClose={handleRejectPhone}\n        title={oldLang('ShareYouPhoneNumberTitle')}\n        text={oldLang('AreYouSureShareMyContactInfoBot')}\n        confirmHandler={handleAcceptPhone}\n        confirmLabel={oldLang('ContactShare')}\n      />\n      <ConfirmDialog\n        isOpen={isRequestingWriteAccess}\n        onClose={handleRejectWriteAccess}\n        title={oldLang('lng_bot_allow_write_title')}\n        text={oldLang('lng_bot_allow_write')}\n        confirmHandler={handleAcceptWriteAccess}\n        confirmLabel={oldLang('lng_bot_allow_write_confirm')}\n      />\n      <ConfirmDialog\n        isOpen={Boolean(requestedFileDownload)}\n        title={oldLang('BotDownloadFileTitle')}\n        textParts={lang('BotDownloadFileDescription', {\n          bot: bot?.firstName,\n          filename: requestedFileDownload?.fileName,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n        })}\n        confirmLabel={oldLang('BotDownloadFileButton')}\n        onClose={handleRejectFileDownload}\n        confirmHandler={handleDownloadFile}\n      />\n\n      <ConfirmDialog\n        isOpen={isCloseModalOpen}\n        onClose={handleHideCloseModal}\n        title={oldLang('lng_bot_close_warning_title')}\n        text={oldLang('lng_bot_close_warning')}\n        confirmHandler={handleConfirmCloseModal}\n        confirmIsDestructive\n        confirmLabel={oldLang('lng_bot_close_warning_sure')}\n      />\n      <ConfirmDialog\n        isOpen={isRemoveModalOpen}\n        onClose={handleHideRemoveModal}\n        title={oldLang('BotRemoveFromMenuTitle')}\n        textParts={renderText(oldLang('BotRemoveFromMenu', bot?.firstName), ['simple_markdown'])}\n        confirmHandler={handleRemoveAttachBot}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n    const modalState = modal?.modalState;\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const userFullInfo = activeBotId ? selectUserFullInfo(global, activeBotId) : undefined;\n    const botAppSettings = userFullInfo?.botInfo?.appSettings;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status: regularPaymentStatus } = selectTabState(global).payment;\n    const { status: starsPaymentStatus, inputInvoice: starsInputInvoice } = selectTabState(global).starsPayment;\n    const botAppPermissions = bot ? selectBotAppPermissions(global, bot.id) : undefined;\n\n    const paymentStatus = starsPaymentStatus || regularPaymentStatus;\n\n    return {\n      attachBot,\n      bot,\n      currentUser,\n      theme,\n      isPaymentModalOpen: isPaymentModalOpen || Boolean(starsInputInvoice),\n      paymentStatus,\n      modalState,\n      botAppPermissions,\n      botAppSettings,\n    };\n  },\n)(WebAppModalTabContent));\n","import { useRef, useState } from '../../../../lib/teact/teact';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function usePopupLimit(sequentialLimit: number, resetAfter: number) {\n  const [unlockPopupsAt, setUnlockPopupsAt] = useState(0);\n  const sequentialCalls = useRef(0);\n  const lastClosedDate = useRef(0);\n\n  const handlePopupOpened = useLastCallback(() => {\n    const now = Date.now();\n\n    if (now - lastClosedDate.current > resetAfter) {\n      sequentialCalls.current = 0;\n    }\n\n    sequentialCalls.current += 1;\n\n    if (sequentialCalls.current >= sequentialLimit) {\n      setUnlockPopupsAt(now + resetAfter);\n    }\n  });\n\n  const handlePopupClosed = useLastCallback(() => {\n    if (unlockPopupsAt < Date.now()) { // Prevent confused user from extending lock time\n      lastClosedDate.current = Date.now();\n    }\n  });\n\n  return {\n    unlockPopupsAt,\n    handlePopupOpened,\n    handlePopupClosed,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"XWfkIDLY\",\"multi-tab\":\"gBVR7Hec\",\"multiTab\":\"gBVR7Hec\",\"close-icon\":\"RuJ3d9N6\",\"closeIcon\":\"RuJ3d9N6\",\"minimized\":\"dJ1Ld_PX\",\"fullScreen\":\"ciSTWz16\",\"tabs\":\"X18WbDa5\",\"tool-bar\":\"qK4q0Sat\",\"toolBar\":\"qK4q0Sat\",\"tab-button-wrapper\":\"oHX2d8Or\",\"tabButtonWrapper\":\"oHX2d8Or\",\"tab-button\":\"O4NxErFX\",\"tabButton\":\"O4NxErFX\",\"tab-right-mask\":\"dgdyQDsZ\",\"tabRightMask\":\"dgdyQDsZ\",\"tab-close-button\":\"xGefqS93\",\"tabCloseButton\":\"xGefqS93\",\"tab-button-curve-path\":\"bOuMHiVw\",\"tabButtonCurvePath\":\"bOuMHiVw\",\"tab-button-left-curve\":\"f7EicoVH\",\"tabButtonLeftCurve\":\"f7EicoVH\",\"tab-button-right-curve\":\"s6pBIYMI\",\"tabButtonRightCurve\":\"s6pBIYMI\",\"more-apps-tab-icon\":\"Obu3ui67\",\"moreAppsTabIcon\":\"Obu3ui67\",\"avatar-container\":\"z39ojrWc\",\"avatarContainer\":\"z39ojrWc\",\"web-app-tab-more-menu\":\"txS0KiU0\",\"webAppTabMoreMenu\":\"txS0KiU0\",\"more-button\":\"kKPD09tc\",\"moreButton\":\"kKPD09tc\",\"tab-more-button\":\"gkji2_RB\",\"tabMoreButton\":\"gkji2_RB\",\"more-apps-button\":\"cEuW1_hJ\",\"moreAppsButton\":\"cEuW1_hJ\",\"window-state-button\":\"XpHR_yo0\",\"windowStateButton\":\"XpHR_yo0\",\"header-button\":\"GE5AkJOU\",\"headerButton\":\"GE5AkJOU\",\"fullscreenButton\":\"otlJULGy\",\"tab-close-icon\":\"DoeOewUR\",\"tabCloseIcon\":\"DoeOewUR\",\"state-icon\":\"YRMGpqUS\",\"stateIcon\":\"YRMGpqUS\",\"icon\":\"b13oE9uA\",\"tab-avatar\":\"tI6TE6HP\",\"tabAvatar\":\"tI6TE6HP\",\"state-back\":\"IWA50OWU\",\"stateBack\":\"IWA50OWU\",\"loading-spinner\":\"ZvO65ZK4\",\"loadingSpinner\":\"ZvO65ZK4\",\"hide\":\"_90e04Jo\",\"frame\":\"zA1w1IOq\",\"with-button\":\"XsPaFD9G\",\"withButton\":\"XsPaFD9G\",\"main-button\":\"Os96PEjQ\",\"mainButton\":\"Os96PEjQ\",\"visible\":\"C8aMayAw\",\"hidden\":\"GllU9an9\",\"main-button-spinner\":\"nYSFrf_X\",\"mainButtonSpinner\":\"nYSFrf_X\",\"web-app-popup\":\"cTVKrIjM\",\"webAppPopup\":\"cTVKrIjM\",\"without-title\":\"d0DG1SkF\",\"withoutTitle\":\"d0DG1SkF\"};","import { type MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef,\n  useSignal, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { Point, Size, ThemeKey } from '../../../types';\nimport type { WebApp, WebAppOutboundEvent } from '../../../types/webapp';\n\nimport { RESIZE_HANDLE_CLASS_NAME } from '../../../config';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectCurrentChat, selectTheme, selectUser,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { getColorLuma } from '../../../util/colors';\nimport { hexToRgb } from '../../../util/switchTheme';\nimport windowSize from '../../../util/windowSize';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDraggable from '../../../hooks/useDraggable';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport MinimizedWebAppModal from './MinimizedWebAppModal';\nimport MoreAppsTabContent from './MoreAppsTabContent';\nimport WebAppModalTabContent from './WebAppModalTabContent';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppModalTab = {\n  bot?: ApiUser;\n  webApp: WebApp;\n  isOpen: boolean;\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  cachedSize?: Size;\n  cachedPosition?: Point;\n};\n\nconst PROLONG_INTERVAL = 45000; // 45s\nconst LUMA_THRESHOLD = 128;\n\nconst MINIMIZED_STATE_SIZE = { width: 300, height: 40 };\nconst DEFAULT_MAXIMIZED_STATE_SIZE = { width: 420, height: 730 };\nconst MAXIMIZED_STATE_MINIMUM_SIZE = { width: 300, height: 300 };\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  cachedSize,\n  cachedPosition,\n}) => {\n  const {\n    closeActiveWebApp,\n    closeWebAppModal,\n    prolongWebView,\n    toggleAttachBot,\n    openChat,\n    changeWebAppModalState,\n    openWebAppTab,\n    updateWebApp,\n    openMoreAppsTab,\n    closeMoreAppsTab,\n    updateMiniAppCachedPosition,\n    updateMiniAppCachedSize,\n  } = getActions();\n\n  const [getMaximizedStateSize, setMaximizedStateSize] = useSignal(cachedSize || DEFAULT_MAXIMIZED_STATE_SIZE);\n\n  function getSize() {\n    if (modal?.modalState === 'fullScreen') return windowSize.get();\n    if (modal?.modalState === 'maximized') return getMaximizedStateSize();\n    return MINIMIZED_STATE_SIZE;\n  }\n  function getMinimumSize() {\n    if (modal?.modalState === 'maximized') return MAXIMIZED_STATE_MINIMUM_SIZE;\n    return undefined;\n  }\n\n  const {\n    openedWebApps, activeWebAppKey, openedOrderedKeys, sessionKeys, isMoreAppsTabActive,\n  } = modal || {};\n  const activeWebApp = activeWebAppKey ? openedWebApps?.[activeWebAppKey] : undefined;\n  const {\n    isBackButtonVisible, headerColor, backgroundColor, isSettingsButtonVisible,\n  } = activeWebApp || {};\n\n  const tabs = useMemo(() => {\n    return openedOrderedKeys?.map((key) => {\n      const webApp = openedWebApps![key];\n      return {\n        bot: getGlobal().users.byId[webApp.botId],\n        webApp,\n        isOpen: Boolean(activeWebApp && (key === getWebAppKey(activeWebApp))),\n      };\n    });\n  }, [openedOrderedKeys, openedWebApps, activeWebApp]);\n\n  const { isMobile } = useAppLayout();\n  const isOpen = modal?.isModalOpen || false;\n  const isMaximizedState = modal?.modalState === 'maximized';\n  const isMinimizedState = modal?.modalState === 'minimized';\n  const isFullScreen = modal?.modalState === 'fullScreen';\n\n  const supportMultiTabMode = !isMobile;\n  const ref = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => ref.current!);\n\n  const getRootElement = useLastCallback(\n    () => ref.current!,\n  );\n\n  const getMenuElement = useLastCallback(\n    () => menuRef.current!,\n  );\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const [isDraggingEnabled, setIsDraggingEnabled] = useState(false);\n\n  const headerElement = headerRef.current;\n  const containerElement = ref.current;\n\n  useEffect(() => {\n    setIsDraggingEnabled(Boolean(supportMultiTabMode && headerElement && containerElement && !isFullScreen));\n  }, [supportMultiTabMode, headerElement, containerElement, isFullScreen]);\n\n  useEffect(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  }, [supportMultiTabMode]);\n\n  const {\n    isDragging,\n    isResizing,\n    style: draggableStyle,\n    size,\n    position,\n  } = useDraggable(\n    ref,\n    headerRef,\n    isDraggingEnabled,\n    getSize(),\n    isFullScreen,\n    getMinimumSize(),\n    cachedPosition,\n  );\n\n  const x = position?.x;\n  const y = position?.y;\n  useEffect(() => {\n    if (!isDragging && x !== undefined && y !== undefined) {\n      updateMiniAppCachedPosition({ position: { x, y } });\n    }\n  }, [isDragging, x, y]);\n\n  useEffect(() => {\n    if (!isDragging && size && isMaximizedState) {\n      updateMiniAppCachedSize({ size });\n    }\n  }, [isDragging, isMaximizedState, size]);\n\n  const currentSize = size || getSize();\n\n  const currentWidth = currentSize.width;\n  const currentHeight = currentSize.height;\n\n  useEffect(() => {\n    if (isResizing) {\n      setMaximizedStateSize({ width: currentWidth, height: currentHeight });\n    }\n  }, [currentHeight, currentWidth, isResizing, setMaximizedStateSize]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const {\n    queryId,\n  } = activeWebApp || {};\n\n  const openTabsCount = openedWebApps ? Object.values(openedWebApps).length : 0;\n\n  useInterval(() => {\n    if (!openedWebApps) return;\n    Object.keys(openedWebApps).forEach((key) => {\n      const webApp = openedWebApps[key];\n      if (webApp.queryId) {\n        prolongWebView({\n          botId: webApp.botId,\n          queryId: webApp.queryId,\n          peerId: webApp.peerId || chat!.id,\n          replyInfo: webApp.replyInfo,\n        });\n      }\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const sendEventCallback = useRef<((event: WebAppOutboundEvent) => void) | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const reloadFrameCallback = useRef<((url: string) => void) | null>(null);\n\n  const registerSendEventCallback = useLastCallback((callback: (event: WebAppOutboundEvent) => void) => {\n    sendEventCallback.current = callback;\n  });\n\n  const sendEvent = useLastCallback((event: WebAppOutboundEvent) => {\n    if (sendEventCallback.current) {\n      sendEventCallback.current(event);\n    }\n  });\n\n  const registerReloadFrameCallback = useLastCallback((callback: (url: string) => void) => {\n    reloadFrameCallback.current = callback;\n  });\n\n  const reloadFrame = useLastCallback((url: string) => {\n    if (reloadFrameCallback.current) {\n      reloadFrameCallback.current(url);\n    }\n  });\n\n  const handleSettingsButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  });\n\n  const handleRefreshClick = useLastCallback(() => {\n    reloadFrame(activeWebApp!.url);\n  });\n\n  const handleModalClose = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleCloseMoreAppsTab = useLastCallback(() => {\n    closeMoreAppsTab();\n  });\n\n  const handleTabClose = useLastCallback(() => {\n    if (openTabsCount > 1) {\n      closeActiveWebApp();\n    } else {\n      closeWebAppModal();\n    }\n  });\n\n  const handleToggleClick = useLastCallback(() => {\n    if (attachBot) {\n      const key = getWebAppKey(activeWebApp!);\n      updateWebApp({\n        key,\n        update: {\n          isRemoveModalOpen: true,\n        },\n      });\n      return;\n    }\n\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: true,\n    });\n  });\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleModalClose();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'minimized' });\n  });\n\n  const handleFullscreenClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'fullScreen' });\n  });\n\n  const handleOpenMoreAppsTabClick = useLastCallback(() => {\n    openMoreAppsTab();\n  });\n\n  const handleTabClick = useLastCallback((tab: WebAppModalTab) => {\n    openWebAppTab({ webApp: tab.webApp });\n  });\n\n  const openBotChat = useLastCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n  });\n\n  const MoreMenuButton:\n  FC<{ onTrigger: (e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        className={\n          buildClassName(\n            supportMultiTabMode ? styles.tabMoreButton : styles.moreButton,\n            isMenuOpen && 'active',\n          )\n        }\n        round\n        ripple={!isMobile}\n        size={supportMultiTabMode ? 'tiny' : 'smaller'}\n        color=\"translucent\"\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, supportMultiTabMode]);\n\n  function renderMenuItems() {\n    return (\n      <>\n        {chat && bot && chat.id !== bot.id && (\n          <MenuItem icon=\"bots\" onClick={openBotChat}>{oldLang('BotWebViewOpenBot')}</MenuItem>\n        )}\n        <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{oldLang('WebApp.ReloadPage')}</MenuItem>\n        {isSettingsButtonVisible && (\n          <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n            {oldLang('Settings')}\n          </MenuItem>\n        )}\n        {bot?.isAttachBot && (\n          <MenuItem\n            icon={attachBot ? 'stop' : 'install'}\n            onClick={handleToggleClick}\n            destructive={Boolean(attachBot)}\n          >\n            {oldLang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n          </MenuItem>\n        )}\n      </>\n    );\n  }\n\n  function renderMoreMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        ref={menuRef}\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        getTriggerElement={getTriggerElement}\n        getMenuElement={getMenuElement}\n        getRootElement={getRootElement}\n        autoClose\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n      >\n        {renderMenuItems()}\n      </Menu>\n    );\n  }\n\n  function renderDropdownMoreMenu() {\n    return (\n      <DropdownMenu\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        trigger={MoreMenuButton}\n        positionX={supportMultiTabMode ? 'left' : 'right'}\n      >\n        {renderMenuItems()}\n      </DropdownMenu>\n    );\n  }\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  const headerTextVar = useMemo(() => {\n    if (isMoreAppsTabActive) return 'color-text';\n    if (!headerColor) return undefined;\n    const { r, g, b } = hexToRgb(headerColor);\n    const luma = getColorLuma([r, g, b]);\n    const adaptedLuma = theme === 'dark' ? 255 - luma : luma;\n    return adaptedLuma > LUMA_THRESHOLD ? 'color-text' : 'color-background';\n  }, [headerColor, theme, isMoreAppsTabActive]);\n\n  function renderTabCurveBorder(className: string) {\n    return (\n      <svg\n        className={className}\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n      >\n        <path\n          className={styles.tabButtonCurvePath}\n          fill-rule=\"evenodd\"\n          clip-rule=\"evenodd\"\n          d=\"M16 16V0C16 12 12 16 0 16H16Z\"\n        />\n      </svg>\n    );\n  }\n\n  function renderActiveTab() {\n    const style = buildStyle(\n      headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n      headerColor && `--active-tab-background: ${headerColor}`,\n    );\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n        style={style}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.avatarContainer}>\n            <Avatar\n              size=\"mini\"\n              peer={bot}\n            />\n            <MoreMenuButton onTrigger={handleContextMenu} isOpen={isContextMenuOpen} />\n          </div>\n          {attachBot?.shortName ?? bot?.firstName}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleTabClose}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsTab() {\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.moreAppsTabIcon}>\n            <Icon className={styles.icon} name=\"add\" />\n          </div>\n          {lang('OpenApp')}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleCloseMoreAppsTab}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsButton() {\n    return (\n      <Button\n        className={buildClassName(\n          styles.moreAppsButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleOpenMoreAppsTabClick}\n      >\n        <Icon className={styles.icon} name=\"add\" />\n      </Button>\n    );\n  }\n\n  const containerRef = useRef<HTMLDivElement>();\n  useHorizontalScroll(containerRef, !isOpen || isMinimizedState || !(containerRef.current));\n\n  function renderTabs() {\n    return (\n      <div\n        className={styles.tabs}\n        ref={containerRef}\n      >\n        {tabs?.map((tab) => (\n          tab.isOpen ? (\n            renderActiveTab()\n          ) : (\n            <Avatar\n              className={styles.tabAvatar}\n              size=\"mini\"\n              peer={tab.bot}\n\n              onClick={() => handleTabClick(tab)}\n            />\n          )\n        ))}\n        {isMoreAppsTabActive && renderMoreAppsTab()}\n      </div>\n    );\n  }\n\n  function renderHeader() {\n    return (\n      <div\n        ref={headerRef}\n      >\n        {!supportMultiTabMode\n          ? renderSinglePageModeHeader()\n          : (isMaximizedState ? renderMultiTabHeader() : <MinimizedWebAppModal />)}\n      </div>\n    );\n  }\n\n  function renderMultiTabHeader() {\n    return (\n      <div\n        className={buildClassName(\n          'modal-header',\n          'multiTab',\n        )}\n        style={buildStyle(\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          className={styles.headerButton}\n          round\n          color=\"translucent\"\n          size=\"tiny\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        {renderTabs()}\n        {renderMoreMenu()}\n\n        <div className={styles.toolBar}>\n          {!isMoreAppsTabActive && renderMoreAppsButton()}\n\n          {!isMoreAppsTabActive && (\n            <Button\n              className={buildClassName(\n                styles.windowStateButton,\n                styles.fullscreenButton,\n                'no-drag',\n              )}\n              round\n              color=\"translucent\"\n              size=\"tiny\"\n              onClick={handleFullscreenClick}\n            >\n              <Icon className={styles.stateIcon} name=\"expand-modal\" />\n            </Button>\n          )}\n\n          <Button\n            className={buildClassName(\n              styles.windowStateButton,\n              'no-drag',\n            )}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            onClick={handleCollapseClick}\n          >\n            <Icon className={styles.stateIcon} name=\"collapse-modal\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSinglePageModeHeader() {\n    return (\n      <div\n        className=\"modal-header\"\n        style={buildStyle(\n          headerColor && `background-color: ${headerColor}`,\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{attachBot?.shortName ?? bot?.firstName}</div>\n        {!isMoreAppsTabActive && renderDropdownMoreMenu()}\n      </div>\n    );\n  }\n\n  function buildResizeHandleClass(handleClassName: string) {\n    return buildClassName(RESIZE_HANDLE_CLASS_NAME, handleClassName);\n  }\n\n  function renderResizeHandles() {\n    return (\n      <>\n        <div className={buildResizeHandleClass('top')} />\n        <div className={buildResizeHandleClass('bottom')} />\n        <div className={buildResizeHandleClass('left')} />\n        <div className={buildResizeHandleClass('right')} />\n        <div className={buildResizeHandleClass('topLeft')} />\n        <div className={buildResizeHandleClass('topRight')} />\n        <div className={buildResizeHandleClass('bottomLeft')} />\n        <div className={buildResizeHandleClass('bottomRight')} />\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      dialogRef={ref}\n      className={buildClassName(\n        styles.root,\n        supportMultiTabMode && styles.multiTab,\n        isMinimizedState && styles.minimized,\n        isFullScreen && styles.fullScreen,\n      )}\n      dialogStyle={supportMultiTabMode ? draggableStyle : undefined}\n      dialogContent={isDraggingEnabled && !isMinimizedState ? renderResizeHandles() : undefined}\n      isOpen={isOpen}\n      isLowStackPriority\n      onClose={handleModalClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor || 'var(--color-background)'}`}\n      noBackdrop\n      noBackdropClose\n    >\n      {isFullScreen && renderMoreMenu()}\n      {openedWebApps && sessionKeys?.map((key) => (\n        <WebAppModalTabContent\n          key={key}\n          modal={modal}\n          registerSendEventCallback={registerSendEventCallback}\n          registerReloadFrameCallback={registerReloadFrameCallback}\n          webApp={openedWebApps[key]}\n          isTransforming={isDragging || isResizing}\n          onContextMenuButtonClick={handleContextMenu}\n          isMultiTabSupported={supportMultiTabMode}\n          modalHeight={currentHeight}\n        />\n      ))}\n      {isMoreAppsTabActive && (<MoreAppsTabContent />)}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { miniAppsCachedPosition, miniAppsCachedSize } = selectSharedSettings(global);\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      cachedPosition: miniAppsCachedPosition,\n      cachedSize: miniAppsCachedSize,\n    };\n  },\n)(WebAppModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useOldLang();\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = type === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (type) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(bot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(bot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [bot, type, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', bot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { MINI_APP_TOS_URL } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['requestedAttachBotInstall'];\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  modal,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const bot = modal?.bot;\n\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n\n  const lang = useOldLang();\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed: Boolean(bot?.shouldRequestWriteAccess),\n    });\n  }, [confirmAttachBotInstall, bot]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsTosAccepted(false);\n    }\n  }, [bot]);\n\n  const tosLabel = useMemo(() => {\n    const base = lang('lng_mini_apps_disclaimer_button');\n    const split = base.split('{link}');\n    const linkText = lang('lng_mini_apps_disclaimer_link');\n    return [\n      split[0],\n      <a href={MINI_APP_TOS_URL} target=\"_blank\" rel=\"noopener noreferrer\">{linkText}</a>,\n      split[1],\n    ];\n  }, [lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={lang('lng_mini_apps_disclaimer_title')}\n      confirmHandler={handleConfirm}\n      isConfirmDisabled={!isTosAccepted}\n    >\n      {renderText(lang('lng_mini_apps_disclaimer_text', bot?.shortName), ['simple_markdown'])}\n      <Checkbox\n        className=\"dialog-checkbox\"\n        checked={isTosAccepted}\n        label={tosLabel}\n        onCheck={setIsTosAccepted}\n      />\n      {renderText(lang('WebBot.Account.Desclaimer.Desc', bot?.shortName), ['simple_markdown'])}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wn7D2H1e\",\"text\":\"IQ1U2TrZ\",\"header\":\"F6qqXRvD\",\"description\":\"ILLaH6qQ\",\"icon\":\"DzGwbpu5\",\"font-icon\":\"Pa9h5mh3\",\"fontIcon\":\"Pa9h5mh3\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport { hexToRgb, lerpRgb } from '../../../util/switchTheme';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps<T> = {\n  title: string;\n  text: string;\n  index: number;\n  count: number;\n  section: T;\n  onClick?: (section: T) => void;\n} & ({\n  icon: IconName;\n  isFontIcon: true;\n} | {\n  icon: string;\n  isFontIcon?: false;\n});\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n].map(hexToRgb);\n\nconst PremiumFeatureItem = <T,>({\n  icon,\n  isFontIcon,\n  title,\n  text,\n  index,\n  count,\n  section,\n  onClick,\n}: OwnProps<T>) => {\n  const newIndex = (index / count) * COLORS.length;\n  const colorA = COLORS[Math.floor(newIndex)];\n  const colorB = COLORS[Math.ceil(newIndex)] ?? colorA;\n  const { r, g, b } = lerpRgb(colorA, colorB, 0.5);\n\n  const handleClick = useLastCallback(() => {\n    onClick?.(section);\n  });\n\n  return (\n    <ListItem buttonClassName={styles.root} onClick={handleClick} inactive={!onClick}>\n      {isFontIcon ? (\n        <Icon name={icon} className={styles.fontIcon} style={`--item-color: rgb(${r},${g},${b})`} />\n      ) : (\n        <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: rgb(${r},${g},${b})`} draggable={false} />\n      )}\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HmY1pYD9\",\"arrow\":\"cqNhvdib\",\"right\":\"hIgQCprt\",\"arrow-hidden\":\"wDzTWXzO\",\"arrowHidden\":\"wDzTWXzO\",\"dot\":\"Ac0pMX9w\",\"medium\":\"yDo_8Y7X\",\"small\":\"bhODNwmU\",\"invisible\":\"O9pyrgj0\",\"active\":\"NYDxCNdz\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport Button from '../ui/Button';\nimport Icon from './icons/Icon';\n\nimport styles from './SliderDots.module.scss';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <Icon name=\"previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst || isInvisible) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <Icon name=\"next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"u84X0r2z\",\"floating-badge\":\"hPi4fICJ\",\"floatingBadge\":\"hPi4fICJ\",\"floating-badge-triangle\":\"jufjjcX9\",\"floatingBadgeTriangle\":\"jufjjcX9\",\"floating-badge-icon\":\"XkiOXdMP\",\"floatingBadgeIcon\":\"XkiOXdMP\",\"text\":\"YaiSoFKE\",\"floating-badge-value\":\"iC3LJrvy\",\"floatingBadgeValue\":\"iC3LJrvy\",\"left-text\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"leftText\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"right-text\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"rightText\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"right-value\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"rightValue\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"left-value\":\"RJosx238 YaiSoFKE\",\"leftValue\":\"RJosx238 YaiSoFKE\",\"line\":\"Hy5kWx0p\",\"left\":\"scGr4JS9\",\"right\":\"nPaUalQf\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { IconName } from '../../../../types/icons';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\ntype OwnProps = {\n  floatingBadgeIcon?: IconName;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <Icon name={floatingBadgeIcon} className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle}>\n            <svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\">\n              <path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\" />\n            </svg>\n          </div>\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXp65Wgy\",\"title\":\"W1xG3pjS\",\"description\":\"b_CBXIkT\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"O1fqNCy0\",\"sticker\":\"ogaoEAcn\",\"effect-sticker\":\"Stdz4UIW ogaoEAcn\",\"effectSticker\":\"Stdz4UIW ogaoEAcn\"};","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: (index: number) => void;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useLastCallback(() => {\n    onClick(realIndex);\n  });\n\n  const handleEnded = useLastCallback(() => {\n    inanimate();\n    onEnded(realIndex);\n  });\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\n\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useLastCallback((i: number) => {\n    setOffset(-i);\n  });\n\n  const handleEnded = useLastCallback((i: number) => {\n    const displayIndex = cycleRestrict(renderedStickers.length, i + offset);\n    if (displayIndex !== 0) return;\n\n    setTimeout(() => {\n      setOffset((current) => {\n        return cycleRestrict(renderedStickers.length, current + 1);\n      });\n    }, ENDED_DELAY);\n  });\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {Boolean(size) && renderedStickers?.map((sticker, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={sticker}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mFElmm7a\",\"header\":\"Jjbochk6\",\"circle\":\"ChteQ9C3\",\"title\":\"d2ayix6L\",\"features\":\"ensyCeMe\",\"mobile\":\"DFbZJafh\",\"scrolled\":\"iN1T0a2Y\"};","import { memo, useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\nimport type { IconName } from '../../../../types/icons';\n\nimport { selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useOldLang from '../../../../hooks/useOldLang';\nimport useScrolledState from '../../../../hooks/useScrolledState';\nimport useDevicePixelRatio from '../../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar, { AVATAR_SIZES } from '../../../common/Avatar';\nimport { drawGradientCircle } from '../../../common/AvatarStoryCircle';\nimport PremiumFeatureItem from '../PremiumFeatureItem';\n\nimport styles from './PremiumFeaturePreviewStories.module.scss';\n\ntype StateProps = {\n  currentUser: ApiUser;\n};\n\nconst STORY_FEATURE_TITLES = {\n  stories_order: 'PremiumStoriesPriority',\n  stories_stealth: 'PremiumStoriesStealth',\n  stories_views: 'PremiumStoriesViews',\n  stories_timer: 'lng_premium_stories_subtitle_expiration',\n  stories_save: 'PremiumStoriesSaveToGallery',\n  stories_caption: 'lng_premium_stories_subtitle_caption',\n  stories_link: 'lng_premium_stories_subtitle_links',\n};\n\nconst STORY_FEATURE_DESCRIPTIONS = {\n  stories_order: 'PremiumStoriesPriorityDescription',\n  stories_stealth: 'PremiumStoriesStealthDescription',\n  stories_views: 'PremiumStoriesViewsDescription',\n  stories_timer: 'PremiumStoriesExpirationDescription',\n  stories_save: 'PremiumStoriesSaveToGalleryDescription',\n  stories_caption: 'PremiumStoriesCaptionDescription',\n  stories_link: 'PremiumStoriesFormattingDescription',\n};\n\nconst STORY_FEATURE_ICONS: Record<string, IconName> = {\n  stories_order: 'story-priority',\n  stories_stealth: 'eye-crossed-outline',\n  stories_views: 'eye-outline',\n  stories_timer: 'timer',\n  stories_save: 'arrow-down-circle',\n  stories_caption: 'story-caption',\n  stories_link: 'link-badge',\n};\n\nconst STORY_FEATURE_ORDER = Object.keys(STORY_FEATURE_TITLES) as (keyof typeof STORY_FEATURE_TITLES)[];\n\nconst CIRCLE_SIZE = AVATAR_SIZES.giant + 0.25 * REM;\nconst CIRCLE_SEGMENTS = 8;\nconst CIRCLE_READ_SEGMENTS = 0;\n\nconst PremiumFeaturePreviewVideo = ({\n  currentUser,\n}: StateProps) => {\n  const circleRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const dpr = useDevicePixelRatio();\n\n  useLayoutEffect(() => {\n    if (!circleRef.current) {\n      return;\n    }\n\n    drawGradientCircle({\n      canvas: circleRef.current,\n      size: CIRCLE_SIZE * dpr,\n      segmentsCount: CIRCLE_SEGMENTS,\n      color: 'purple',\n      readSegmentsCount: CIRCLE_READ_SEGMENTS,\n      readSegmentColor: 'transparent',\n      dpr,\n    });\n  }, [dpr]);\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const maxSize = CIRCLE_SIZE;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.header}>\n        <Avatar forPremiumPromo peer={currentUser} size=\"giant\" />\n        <canvas className={styles.circle} ref={circleRef} style={`max-width: ${maxSize}px; max-height: ${maxSize}px`} />\n      </div>\n      <div className={styles.title}>{lang('UpgradedStories')}</div>\n      <div\n        className={buildClassName(styles.features, !isAtBeginning && styles.scrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {STORY_FEATURE_ORDER.map((section, index) => {\n          return (\n            <PremiumFeatureItem\n              key={section}\n              title={lang(STORY_FEATURE_TITLES[section])}\n              text={lang(STORY_FEATURE_DESCRIPTIONS[section])}\n              icon={STORY_FEATURE_ICONS[section]}\n              isFontIcon\n              index={index}\n              count={STORY_FEATURE_ORDER.length}\n              section={section}\n            />\n          );\n        })}\n        <div className={styles.mobile}>{lang('lng_premium_stories_about_mobile')}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      currentUser: selectUser(global, global.currentUserId!)!,\n    };\n  },\n)(PremiumFeaturePreviewVideo));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ot0dA1yZ\",\"wrapper\":\"yxSAGAc1\",\"down\":\"Jcy6cDoc\",\"frame\":\"Vn81yTTJ\",\"video\":\"rrVJClLL\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} draggable={false} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oyUTEj8I\",\"button\":\"EPfM7AgT\",\"button-content\":\"GysZk2mF\",\"buttonContent\":\"GysZk2mF\",\"back-button\":\"njYoMrKM\",\"backButton\":\"njYoMrKM\",\"white-back-button\":\"SB4pczOo\",\"whiteBackButton\":\"SB4pczOo\",\"content\":\"sJubG84j\",\"frame\":\"a7IoUtQG\",\"slide\":\"gubS9KP1\",\"limits\":\"U7ePgVBR\",\"stories\":\"J1M6fEdo\",\"limits-content\":\"n_rowVPI\",\"limitsContent\":\"n_rowVPI\",\"header\":\"mz2Hmd83\",\"no-header-border\":\"AgmNOqi7\",\"noHeaderBorder\":\"AgmNOqi7\",\"preview\":\"dIVBSdWi\",\"title\":\"iZLwcL8v\",\"description\":\"A7YHY8qF\",\"footer\":\"yN2611rA\",\"no-footer-border\":\"rCHMABcD\",\"noFooterBorder\":\"rCHMABcD\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { toggleExtraClass } from '../../../lib/teact/teact-dom';\n\nimport type {\n  ApiLimitTypeForPromo,\n  ApiPremiumPromo,\n  ApiPremiumSection,\n  ApiPremiumSubscriptionOption,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { LangPair } from '../../../types/language';\n\nimport { PREMIUM_BOTTOM_VIDEOS, PREMIUM_FEATURE_SECTIONS, PREMIUM_LIMITS_ORDER } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport SliderDots from '../../common/SliderDots';\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\nimport PremiumFeaturePreviewStories from './previews/PremiumFeaturePreviewStories';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n  translations: 'PremiumPreviewTranslations',\n  stories: 'PremiumPreviewStories',\n  saved_tags: 'PremiumPreviewTags2',\n  last_seen: 'PremiumPreviewLastSeen',\n  message_privacy: 'PremiumPreviewMessagePrivacy',\n  effects: 'Premium.MessageEffects',\n  todo: 'PremiumPreviewTodo',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n  translations: 'PremiumPreviewTranslationsDescription',\n  stories: 'PremiumPreviewStoriesDescription',\n  saved_tags: 'PremiumPreviewTagsDescription2',\n  last_seen: 'PremiumPreviewLastSeenDescription',\n  message_privacy: 'PremiumPreviewMessagePrivacyDescription',\n  effects: 'Premium.MessageEffectsInfo',\n  todo: 'PremiumPreviewTodoDescription',\n};\n\nconst LIMITS_TITLES: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n  recommendedChannels: 'SimilarChannelsLimitTitle',\n  moreAccounts: 'ConnectedAccountsLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n  recommendedChannels: 'SimilarChannelsLimitSubtitle',\n  moreAccounts: 'ConnectedAccountsLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  initialSection: ApiPremiumSection;\n  promo: ApiPremiumPromo;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumPromoOrder?: ApiPremiumSection[];\n  subscriptionOption?: ApiPremiumSubscriptionOption;\n  onBack: VoidFunction;\n  onClickSubscribe: (startParam?: string) => void;\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  isPremium,\n  limits,\n  premiumPromoOrder,\n  subscriptionOption,\n  onBack,\n  onClickSubscribe,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const scrollContainerRef = useRef<HTMLDivElement>();\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePreviousDeprecated(initialSection);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  const subscriptionButtonText = useMemo(() => {\n    if (!subscriptionOption) return undefined;\n\n    const { amount, months, currency } = subscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n\n    return isPremium\n      ? lang('OK')\n      : lang('SubscribeToPremium', { price: formatCurrency(lang, perMonthPrice, currency) }, { withNodes: true });\n  }, [isPremium, lang, subscriptionOption]);\n\n  const handleClick = useLastCallback(() => {\n    onClickSubscribe(initialSection);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const target = e.currentTarget;\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = target;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex}`);\n\n    requestMutation(() => {\n      target.style.setProperty('--scroll-progress', progress.toString());\n      target.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n\n      if (prevElement) toggleExtraClass(prevElement, 'reverse', false);\n      if (reverseElement) toggleExtraClass(reverseElement, 'reverse', true);\n    });\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = filteredSections.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, filteredSections, initialSection, prevInitialSection]);\n\n  const handleSelectSlide = useLastCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  });\n\n  const currentSection = filteredSections[currentSlideIndex];\n  const hasHeaderBackdrop = currentSection !== 'double_limits' && currentSection !== 'stories';\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, hasHeaderBackdrop && styles.whiteBackButton)}\n        color={hasHeaderBackdrop ? 'translucent-white' : 'translucent'}\n        onClick={onBack}\n        ariaLabel={oldLang('Back')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {filteredSections.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {PREMIUM_LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={oldLang(LIMITS_TITLES[limit])}\n                        description={oldLang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (PREMIUM_LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(oldLang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'stories') {\n            return (\n              <div className={buildClassName(styles.slide, styles.stories)}>\n                <PremiumFeaturePreviewStories />\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          const shouldUseNewLang = promo.videoSections[i] === 'todo';\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {shouldUseNewLang\n                  ? lang(\n                    PREMIUM_FEATURE_TITLES[promo.videoSections[i]] as keyof LangPair,\n                    undefined,\n                    { withNodes: true, renderTextFilters: ['br'] },\n                  )\n                  : oldLang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(shouldUseNewLang\n                  ? lang(\n                    PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]] as keyof LangPair,\n                    undefined,\n                    { withNodes: true, renderTextFilters: ['br'] },\n                  )\n                  : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]]), ['br'],\n                )}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        {Boolean(subscriptionButtonText) && (\n          <Button\n            className={buildClassName(styles.button)}\n            isShiny={!isPremium}\n            withPremiumGradient={!isPremium}\n            onClick={isPremium ? onBack : handleClick}\n          >\n            {subscriptionButtonText}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiPremiumGiftCodeOption, ApiPremiumSubscriptionOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport styles from './PremiumSubscriptionOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumSubscriptionOption | ApiPremiumGiftCodeOption;\n  isGiveaway?: boolean;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  className?: string;\n  onChange: (month: number) => void;\n};\n\nconst PremiumSubscriptionOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount,\n  onChange, className, isGiveaway,\n}) => {\n  const oldLang = useOldLang();\n\n  const {\n    months, amount, currency,\n  } = option;\n  const users = 'users' in option ? option.users : undefined;\n  const perMonth = Math.floor(amount / months);\n  const isUserCountPlural = users ? users > 1 : undefined;\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label\n      className={buildClassName(\n        isGiveaway ? styles.giveawayWrapper : styles.wrapper,\n        (checked && !isGiveaway) && styles.active,\n        className,\n      )}\n      dir={oldLang.isRtl ? 'rtl' : undefined}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"subscription_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>\n          {Boolean(discount) && (\n            <span\n              className={buildClassName(styles.giveawayDiscount, styles.discount)}\n              title={oldLang('GiftDiscount')}\n            >\n              {' '}\n              &minus;\n              {discount}\n              %\n            </span>\n          )}\n          {oldLang('Months', months)}\n        </div>\n        <div className={styles.perMonth}>\n          {(isGiveaway || isUserCountPlural) ? `${formatCurrencyAsString(amount, currency, oldLang.code)} x ${users!}`\n            : oldLang('PricePerMonth', formatCurrencyAsString(perMonth, currency, oldLang.code))}\n        </div>\n        <div className={styles.amount}>\n          {formatCurrencyAsString(amount, currency, oldLang.code)}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(PremiumSubscriptionOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"qZA6S2kc\",\"giveawayWrapper\":\"PkseWxFK\",\"active\":\"EJOQwnRj\",\"input\":\"WOEkhx6R\",\"content\":\"BHUCScsU\",\"month\":\"DfYCMUkL\",\"perMonth\":\"poxOXJ2o\",\"amount\":\"IGMrERf_\",\"discount\":\"uqDlP3Zt\",\"giveawayDiscount\":\"ublijP0j\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sfbpMFHM\",\"transition\":\"ELNkgPve\",\"button\":\"c1tMxuFH\",\"main\":\"ZpOIPrhp\",\"status-emoji\":\"mQwvY9LA\",\"statusEmoji\":\"mQwvY9LA\",\"sticker-wrapper\":\"sNJHQkwe\",\"stickerWrapper\":\"sNJHQkwe\",\"header-text\":\"y71v6ECL\",\"headerText\":\"y71v6ECL\",\"description\":\"cUcKXV3j\",\"list\":\"c3Ee2oSo\",\"no-button\":\"yWEHoJOL\",\"noButton\":\"yWEHoJOL\",\"header\":\"Bc_F0RKb\",\"hidden-header\":\"ltXo0Xi7\",\"hiddenHeader\":\"ltXo0Xi7\",\"close-button\":\"XyN3eWog\",\"closeButton\":\"XyN3eWog\",\"premium-header-text\":\"xysPdANX\",\"premiumHeaderText\":\"xysPdANX\",\"footer-text\":\"yKm9hKQP\",\"footerText\":\"yKm9hKQP\",\"primary-footer-text\":\"l1WlNpmu\",\"primaryFooterText\":\"l1WlNpmu\",\"footer\":\"nCnlO9UZ\",\"stickerSetText\":\"xw_GbDj7\",\"stickerSetLink\":\"FLzl2ng5\",\"stickerSetLinkIcon\":\"Y0jTcadE\",\"subscriptionOptions\":\"xZC_Oajr\",\"subscriptionOption\":\"gygsbDbE\",\"starParticlesHeader\":\"z0zfJObh\",\"giftParticlesHeader\":\"lzalivui\"};","import type { FC } from '@teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumPromo,\n  ApiPremiumSection,\n  ApiPremiumSubscriptionOption,\n  ApiStarGift,\n  ApiSticker,\n  ApiStickerSet,\n  ApiUser,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { LangPair } from '../../../types/language';\n\nimport { PREMIUM_FEATURE_SECTIONS, TME_LINK_PREFIX } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState, selectUser } from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { getStickerFromGift } from '../../common/helpers/gifts';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Icon from '../../common/icons/Icon';\nimport ParticlesHeader from '../../modals/common/ParticlesHeader.tsx';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport PremiumFeatureModal, { PREMIUM_FEATURE_DESCRIPTIONS, PREMIUM_FEATURE_TITLES } from './PremiumFeatureModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './PremiumMainModal.module.scss';\n\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumEffects from '../../../assets/premium/PremiumEffects.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumLastSeen from '../../../assets/premium/PremiumLastSeen.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumMessagePrivacy from '../../../assets/premium/PremiumMessagePrivacy.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumTags from '../../../assets/premium/PremiumTags.svg';\nimport PremiumTranslate from '../../../assets/premium/PremiumTranslate.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\n\nconst LIMIT_ACCOUNTS = 4;\nconst STATUS_EMOJI_SIZE = 8 * REM;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<ApiPremiumSection, string> = {\n  stories: PremiumStatus,\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n  translations: PremiumTranslate,\n  saved_tags: PremiumTags,\n  last_seen: PremiumLastSeen,\n  message_privacy: PremiumMessagePrivacy,\n  effects: PremiumEffects,\n  todo: PremiumBadge,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  fromUser?: ApiUser;\n  fromUserStatusEmoji?: ApiSticker;\n  fromUserStatusSet?: ApiStickerSet;\n  toUser?: ApiUser;\n  initialSection?: ApiPremiumSection;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  gift?: ApiStarGift;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: ApiPremiumSection[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  fromUserStatusEmoji,\n  fromUserStatusSet,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n  gift,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink, loadStickers, openStickerSet,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<ApiPremiumSection | undefined>(initialSection);\n  const [selectedSubscriptionOption, setSubscriptionOption] = useState<ApiPremiumSubscriptionOption>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setCurrentSection(undefined);\n    } else if (initialSection) {\n      setCurrentSection(initialSection);\n    }\n  }, [isOpen, initialSection]);\n\n  const handleOpenSection = useLastCallback((section: ApiPremiumSection) => {\n    setCurrentSection(section);\n  });\n\n  const handleResetSection = useLastCallback(() => {\n    setCurrentSection(undefined);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClickWithStartParam = useLastCallback((startParam?: string) => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        type: 'slug',\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (selectedSubscriptionOption) {\n      handleClickWithStartParam(String(selectedSubscriptionOption.months));\n    } else {\n      handleClickWithStartParam();\n    }\n  });\n\n  const handleChangeSubscriptionOption = useLastCallback((months: number) => {\n    const foundOption = promo?.options.find((option) => option.months === months);\n    setSubscriptionOption(foundOption);\n  });\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  useEffect(() => {\n    if (!fromUserStatusEmoji || fromUserStatusSet) return;\n    loadStickers({\n      stickerSetInfo: fromUserStatusEmoji.stickerSetInfo,\n    });\n  }, [loadStickers, fromUserStatusEmoji, fromUserStatusSet]);\n\n  useEffect(() => {\n    const [defaultOption] = promo?.options ?? [];\n    setSubscriptionOption(defaultOption);\n  }, [promo]);\n\n  const handleOpenStatusSet = useLastCallback(() => {\n    if (!fromUserStatusSet) return;\n\n    openStickerSet({\n      stickerSetInfo: fromUserStatusSet,\n    });\n  });\n\n  const fullMonthlyAmount = useMemo(() => {\n    const monthOption = promo?.options.find((option) => option.months === 1);\n    if (!monthOption) {\n      return undefined;\n    }\n    return Number(monthOption.amount);\n  }, [promo]);\n\n  const subscribeButtonText = useMemo(() => {\n    if (!selectedSubscriptionOption) {\n      return undefined;\n    }\n    const { amount, months, currency } = selectedSubscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n    return formatCurrency(\n      lang,\n      perMonthPrice,\n      currency,\n    );\n  }, [selectedSubscriptionOption, lang]);\n\n  if (!promo || (fromUserStatusEmoji && !fromUserStatusSet)) return undefined;\n\n  function getHeaderText() {\n    if (gift) {\n      return lang('PremiumGiftHeader');\n    }\n\n    if (isGift) {\n      return renderText(\n        fromUser?.id === currentUserId\n          ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n          : oldLang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]),\n        ['simple_markdown', 'emoji'],\n      );\n    }\n\n    if (fromUserStatusSet && fromUser) {\n      const template = oldLang('lng_premium_emoji_status_title').replace('{user}', getUserFullName(fromUser)!);\n      const [first, second] = template.split('{link}');\n\n      const emoji = fromUserStatusSet.thumbCustomEmojiId ? (\n        <CustomEmoji className={styles.stickerSetLinkIcon} documentId={fromUserStatusSet.thumbCustomEmojiId} />\n      ) : undefined;\n      const link = (\n        <span className={styles.stickerSetLink} onClick={handleOpenStatusSet}>\n          {emoji}\n          {renderText(fromUserStatusSet.title)}\n        </span>\n      );\n      return [renderText(first), link, renderText(second)];\n    }\n\n    return renderText(\n      fromUser\n        ? oldLang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n        : oldLang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium'),\n      ['simple_markdown', 'emoji'],\n    );\n  }\n\n  function getHeaderDescription() {\n    if (gift) {\n      const perUserTotal = gift.type !== 'starGiftUnique' ? gift.perUserTotal : 0;\n      return lang('DescriptionGiftPremiumRequired', { count: perUserTotal });\n    }\n\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : oldLang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    if (fromUserStatusSet) {\n      return oldLang('TelegramPremiumUserStatusDialogSubtitle');\n    }\n\n    return fromUser\n      ? oldLang('TelegramPremiumUserDialogSubtitle')\n      : oldLang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderHeader() {\n    if (gift) {\n      const giftSticker = getStickerFromGift(gift);\n      return (\n        <ParticlesHeader\n          model=\"sticker\"\n          sticker={giftSticker}\n          color=\"purple\"\n          title={getHeaderText()}\n          description={renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n          className={styles.giftParticlesHeader}\n        />\n      );\n    }\n\n    if (!fromUserStatusEmoji) {\n      return (\n        <ParticlesHeader\n          model=\"swaying-star\"\n          color=\"purple\"\n          title={getHeaderText()}\n          description={renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n          className={styles.starParticlesHeader}\n        />\n      );\n    }\n\n    return (\n      <>\n        <CustomEmoji\n          className={styles.statusEmoji}\n          onClick={handleOpenStatusSet}\n          documentId={fromUserStatusEmoji.id}\n          isBig\n          size={STATUS_EMOJI_SIZE}\n        />\n        <h2 className={buildClassName(styles.headerText, fromUserStatusSet && styles.stickerSetText)}>\n          {getHeaderText()}\n        </h2>\n        <div className={styles.description}>\n          {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n        </div>\n      </>\n    );\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={oldLang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.subscriptionOptions}>\n        {promo?.options\n          .map((option) => (\n            <PremiumSubscriptionOption\n              className={styles.subscriptionOption}\n              key={option.amount}\n              option={option}\n              onChange={handleChangeSubscriptionOption}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={selectedSubscriptionOption?.months === option.months}\n            />\n          ))}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={closePremiumModal}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              onClick={() => closePremiumModal()}\n              ariaLabel={oldLang('Close')}\n            >\n              <Icon name=\"close\" />\n            </Button>\n            {renderHeader()}\n            {!isPremium && !isGift && renderSubscriptionOptions()}\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {oldLang('TelegramPremium')}\n              </h2>\n            </div>\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                const shouldUseNewLang = section === 'todo';\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={shouldUseNewLang\n                      ? lang(PREMIUM_FEATURE_TITLES[section] as keyof LangPair)\n                      : oldLang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : shouldUseNewLang\n                        ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section] as keyof LangPair)\n                        : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    count={filteredSections.length}\n                    section={section}\n                    onClick={handleOpenSection}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={oldLang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && selectedSubscriptionOption && (\n              <div className={styles.footer}>\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {oldLang('SubscribeToPremium', subscribeButtonText)}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleResetSection}\n            promo={promo}\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n            premiumPromoOrder={premiumPromoOrder}\n            subscriptionOption={selectedSubscriptionOption}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n\n  const fromUser = premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined;\n  const fromUserStatusEmoji = fromUser?.emojiStatus ? global.customEmojis.byId[fromUser.emojiStatus.documentId]\n    : undefined;\n  const fromUserStatusSet = fromUserStatusEmoji ? selectStickerSet(global, fromUserStatusEmoji.stickerSetInfo)\n    : undefined;\n\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    gift: premiumModal?.gift,\n    fromUser,\n    fromUserStatusEmoji,\n    fromUserStatusSet,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","import type { TeactNode } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Radio from '../../ui/Radio';\nimport Icon from '../icons/Icon';\nimport PickerItem from './PickerItem';\n\nimport styles from './PickerStyles.module.scss';\n\nexport type ItemPickerOption = {\n  label: TeactNode;\n  subLabel?: string;\n  disabled?: boolean;\n  isLoading?: boolean;\n  value: string;\n};\n\ntype SingleModeProps = {\n  allowMultiple?: false;\n  itemInputType?: 'radio';\n  selectedValue?: string;\n  selectedValues?: never; // Help TS to throw an error if this is passed\n  onSelectedValueChange?: (value: string) => void;\n};\n\ntype MultipleModeProps = {\n  allowMultiple: true;\n  itemInputType: 'checkbox';\n  selectedValue?: never;\n  selectedValues: string[];\n  lockedSelectedValues?: string[];\n  lockedUnselectedValues?: string[];\n  onSelectedValuesChange?: (values: string[]) => void;\n};\n\ntype OwnProps = {\n  className?: string;\n  isSearchable?: boolean;\n  searchInputId?: string;\n  items: ItemPickerOption[];\n  itemClassName?: string;\n  filterValue?: string;\n  filterPlaceholder?: string;\n  notFoundText?: string;\n  isLoading?: boolean;\n  noScrollRestore?: boolean;\n  isViewOnly?: boolean;\n  withDefaultPadding?: boolean;\n  forceRenderAllItems?: boolean;\n  onFilterChange?: (value: string) => void;\n  onDisabledClick?: (value: string, isSelected: boolean) => void;\n  onLoadMore?: () => void;\n} & (SingleModeProps | MultipleModeProps);\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst ITEM_CLASS_NAME = 'ItemPickerItem';\n\nconst ItemPicker = ({\n  className,\n  isSearchable,\n  searchInputId,\n  items,\n  filterValue,\n  notFoundText,\n  isLoading,\n  noScrollRestore,\n  filterPlaceholder,\n  isViewOnly,\n  itemInputType,\n  itemClassName,\n  withDefaultPadding,\n  forceRenderAllItems,\n  onFilterChange,\n  onDisabledClick,\n  onLoadMore,\n  ...optionalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n\n  const allowMultiple = optionalProps.allowMultiple;\n  const lockedSelectedValues = allowMultiple ? optionalProps.lockedSelectedValues : undefined;\n  const lockedUnselectedValues = allowMultiple ? optionalProps.lockedUnselectedValues : undefined;\n\n  useEffect(() => {\n    if (!isSearchable) return undefined;\n    const timeoutId = window.setTimeout(() => {\n      requestMeasure(() => {\n        inputRef.current?.focus();\n      });\n    }, FOCUS_DELAY_MS);\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [isSearchable]);\n\n  const selectedValues = useMemo(() => {\n    if (allowMultiple) {\n      return optionalProps.selectedValues;\n    }\n\n    return optionalProps.selectedValue ? [optionalProps.selectedValue] : MEMO_EMPTY_ARRAY;\n  }, [allowMultiple, optionalProps.selectedValue, optionalProps.selectedValues]);\n\n  const lockedSelectedValuesSet = useMemo(() => new Set(lockedSelectedValues), [lockedSelectedValues]);\n  const lockedUnselectedValuesSet = useMemo(() => new Set(lockedUnselectedValues), [lockedUnselectedValues]);\n\n  const sortedItemValuesList = useMemo(() => {\n    if (filterValue) {\n      return items.map((item) => item.value);\n    }\n\n    const lockedSelectedBucket: ItemPickerOption[] = [];\n    const unlockedBucket: ItemPickerOption[] = [];\n    const lockedUnselectableBucket: ItemPickerOption[] = [];\n\n    items.forEach((item) => {\n      if (lockedSelectedValuesSet.has(item.value)) {\n        lockedSelectedBucket.push(item);\n      } else if (lockedUnselectedValuesSet.has(item.value)) {\n        lockedUnselectableBucket.push(item);\n      } else {\n        unlockedBucket.push(item);\n      }\n    });\n\n    return lockedSelectedBucket.concat(unlockedBucket, lockedUnselectableBucket).map((item) => item.value);\n  }, [filterValue, items, lockedSelectedValuesSet, lockedUnselectedValuesSet]);\n\n  const handleItemClick = useLastCallback((value: string) => {\n    if (allowMultiple) {\n      const newSelectedValues = selectedValues.slice();\n      const index = newSelectedValues.indexOf(value);\n      if (index >= 0) {\n        newSelectedValues.splice(index, 1);\n      } else {\n        newSelectedValues.push(value);\n      }\n\n      optionalProps.onSelectedValuesChange?.(newSelectedValues);\n      return;\n    }\n\n    optionalProps.onSelectedValueChange?.(value);\n  });\n\n  const [viewportValuesList, getMore] = useInfiniteScroll(\n    onLoadMore, sortedItemValuesList, Boolean(forceRenderAllItems || filterValue),\n  );\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange?.(value);\n  });\n\n  const renderItem = useCallback((value: string) => {\n    const item = items.find((itemOption) => itemOption.value === value);\n    if (!item) return undefined;\n\n    const { label, subLabel, isLoading: isItemLoading } = item;\n    const isAlwaysUnselected = lockedUnselectedValuesSet.has(value);\n    const isAlwaysSelected = lockedSelectedValuesSet.has(value);\n    const isLocked = isAlwaysUnselected || isAlwaysSelected;\n    const isChecked = selectedValues.includes(value);\n\n    function getInputElement() {\n      if (isLocked) return <Icon name=\"lock-badge\" />;\n      if (itemInputType === 'radio') {\n        return <Radio checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      if (itemInputType === 'checkbox') {\n        return <Checkbox checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      return undefined;\n    }\n\n    return (\n      <PickerItem\n        key={value}\n        className={buildClassName(ITEM_CLASS_NAME, itemClassName)}\n        title={label}\n        subtitle={subLabel}\n        disabled={isLocked}\n        inactive={isViewOnly}\n        ripple\n        inputElement={getInputElement()}\n\n        onClick={() => handleItemClick(value)}\n\n        onDisabledClick={onDisabledClick && (() => onDisabledClick(value, isAlwaysSelected))}\n      />\n    );\n  }, [\n    items, lockedUnselectedValuesSet, lockedSelectedValuesSet, selectedValues, isViewOnly, onDisabledClick,\n    itemInputType, itemClassName,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.container, className)}>\n      {isSearchable && (\n        <div className={buildClassName(styles.header, 'custom-scroll')} dir={lang.isRtl ? 'rtl' : undefined}>\n          <InputText\n            id={searchInputId}\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={filterPlaceholder || lang('Search')}\n          />\n        </div>\n      )}\n\n      {viewportValuesList?.length ? (\n        <InfiniteScroll\n          className={buildClassName(styles.pickerList, withDefaultPadding && styles.padded, 'custom-scroll')}\n          items={viewportValuesList}\n          itemSelector={`.${ITEM_CLASS_NAME}`}\n          onLoadMore={getMore}\n          noScrollRestore={noScrollRestore}\n        >\n          {viewportValuesList.map((value) => renderItem(value))}\n        </InfiniteScroll>\n      ) : !isLoading && viewportValuesList && !viewportValuesList.length ? (\n        <p className={styles.noResults}>{notFoundText || lang('SearchEmptyViewTitle')}</p>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ItemPicker);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wzzA3MFh\",\"pickerSelector\":\"xhujrq9i\",\"pickerTitle\":\"YuRK4e7S\",\"picker\":\"YF9nLkCK\",\"footer\":\"ATCZ2Q5G\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport ItemPicker from './pickers/ItemPicker';\n\nimport styles from './CountryPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (value: string[]) => void;\n  countryList: ApiCountry[];\n  selectionLimit?: number | undefined;\n};\n\nconst CountryPickerModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  countryList,\n  selectionLimit,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[]>([]);\n  const prevSelectedCountryIds = usePreviousDeprecated(selectedCountryIds);\n  const noPickerScrollRestore = prevSelectedCountryIds === selectedCountryIds;\n\n  const displayedIds = useMemo(() => {\n    if (!countryList) {\n      return [];\n    }\n\n    return countryList.filter((country) => !country.isHidden && country.iso2 !== 'FT')\n      .map(({\n        iso2, defaultName,\n      }) => ({\n        value: iso2,\n        label: defaultName,\n      }));\n  }, [countryList]);\n\n  const handleSelectedIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (selectionLimit && newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningCountries', selectionLimit),\n      });\n      return;\n    }\n    setSelectedCountryIds(newSelectedIds);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    onSubmit(selectedCountryIds);\n    onClose();\n  });\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleSubmit}\n    >\n      <div className={styles.container}>\n        <div className={styles.pickerSelector}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4 className={styles.pickerTitle}>\n            {lang('BoostingSelectCountry')}\n          </h4>\n        </div>\n      </div>\n\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedIds}\n          selectedValues={selectedCountryIds}\n          onSelectedValuesChange={handleSelectedIdsChange}\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <div className={styles.footer}>\n        <Button\n          size=\"smaller\"\n          onClick={handleSubmit}\n        >\n          {lang('SelectCountries.OK')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(CountryPickerModal);\n","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport {\n  isChatChannel, isChatPublic, isChatSuperGroup,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\nconst GiveawayChannelPickerModal = ({\n  isOpen,\n  giveawayChatId,\n  selectionLimit,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [pendingChannelId, setPendingChannelId] = useState<string | undefined>(undefined);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const channelIds = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const { active, archived } = global.chats.listIds;\n    const ids = (active || []).concat(archived || []);\n\n    return unique(ids).map((id) => chatsById[id])\n      .filter((chat) => (\n        chat && (\n          isChatChannel(chat) || isChatSuperGroup(chat)\n        ) && chat.id !== giveawayChatId\n      )).map((chat) => chat.id);\n  }, [giveawayChatId]);\n\n  const displayedChannelIds = useMemo(() => {\n    const foundChannelIds = channelIds ? filterPeersByQuery({ ids: channelIds, query: searchQuery, type: 'chat' }) : [];\n\n    return sortChatIds(foundChannelIds,\n      false,\n      selectedIds);\n  }, [channelIds, searchQuery, selectedIds]);\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    const chatsById = getGlobal().chats.byId;\n    const newlyAddedIds = newSelectedIds.filter((id) => !selectedIds.includes(id));\n    const privateLinkChannelId = newlyAddedIds.find((id) => {\n      const chat = chatsById[id];\n      return chat && !isChatPublic(chat);\n    });\n\n    if (selectedIds?.length >= selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningChannelsPlural', selectionLimit),\n      });\n      return;\n    }\n\n    if (privateLinkChannelId) {\n      setPendingChannelId(privateLinkChannelId);\n      openConfirmModal();\n    } else {\n      setSelectedIds(newSelectedIds);\n    }\n  });\n\n  const confirmPrivateLinkChannelSelection = useLastCallback(() => {\n    if (pendingChannelId) {\n      setSelectedIds(unique([...selectedIds, pendingChannelId]));\n    }\n    closeConfirmModal();\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('RequestPeer.ChooseChannelTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedChannelIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedChannelIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n      <ConfirmDialog\n        title={lang('BoostingGiveawayPrivateChannel')}\n        text={lang('BoostingGiveawayPrivateChannelWarning')}\n        confirmLabel={lang('Add')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmPrivateLinkChannelSelection}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(GiveawayChannelPickerModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './GiveawayTypeOption.module.scss';\n\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\n\ntype OwnProps = {\n  option: ApiGiveawayType;\n  name: string;\n  text: string;\n  img: string;\n  checked?: boolean;\n  isLink: boolean;\n  className?: string;\n  onChange: (value: ApiGiveawayType) => void;\n  onClickAction?: () => void;\n  userNames?: string;\n  selectedMemberIds?: string[];\n};\n\nconst GiveawayTypeOption: FC<OwnProps> = ({\n  option, checked,\n  name, text, img,\n  isLink, onChange, onClickAction, className,\n  userNames, selectedMemberIds,\n}) => {\n  const lang = useOldLang();\n\n  let displayText: string | undefined = lang(text);\n  if (isLink && selectedMemberIds?.length) {\n    displayText = selectedMemberIds.length > 2 ? selectedMemberIds.length.toString() : userNames;\n  }\n\n  const handleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(option);\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    onClickAction?.();\n  });\n\n  return (\n    <label\n      className={buildClassName(styles.wrapper, className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"giveaway_option\"\n        value={option}\n        checked={checked}\n        onChange={handleChange}\n        onClick={(e) => e.stopPropagation()}\n      />\n      <div className={styles.content}>\n        <img className={styles.optionImg} src={img} alt=\"\" draggable={false} />\n        <div className={styles.giveaway}>\n          <h3 className={styles.title}>\n            {lang(name)}\n          </h3>\n          {isLink ? (\n            <div className={styles.link} onClick={handleClick}>\n              <span>{displayText}</span>\n              <Icon name=\"next\" />\n            </div>\n          ) : (\n            <span className={styles.contentText}>{displayText}</span>\n          )}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiveawayTypeOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"w3OGYFKn\",\"input\":\"xy4AclZa\",\"content\":\"TTgSI7Xh\",\"notChecked\":\"JDcXsByU\",\"giveaway\":\"sEt7TF59\",\"title\":\"u4NzVBBi\",\"link\":\"y7XfPOoG\",\"optionImg\":\"lGhZJbMF\",\"contentText\":\"kt2ZKZ6j\"};","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember } from '../../../api/types';\n\nimport {\n  isUserBot,\n  sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\ntype OwnProps = {\n  isOpen?: boolean;\n\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst GiveawayUserPickerModal = ({\n  isOpen,\n  selectionLimit,\n  members,\n  adminMembersById,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const memberIds = useMemo(() => {\n    const global = getGlobal();\n    const { byId, statusesById } = global.users;\n    if (!members?.length) {\n      return [];\n    }\n\n    const adminIdsSet = adminMembersById && new Set(Object.keys(adminMembersById));\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      byId,\n      statusesById,\n    );\n\n    return adminIdsSet ? userIds.filter((userId) => !adminIdsSet.has(userId)) : userIds;\n  }, [adminMembersById, members]);\n\n  const displayedMemberIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const filteredUserIds = memberIds\n      ? filterPeersByQuery({ ids: memberIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(unique(filteredUserIds).filter((userId) => {\n      const user = usersById[userId];\n      if (!user) {\n        return true;\n      }\n\n      return !isUserBot(user);\n    }));\n  }, [memberIds, searchQuery]);\n\n  const handleSelectedMemberIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningUsers', selectionLimit),\n      });\n      return;\n    }\n    setSelectedIds(newSelectedIds);\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('BoostingAwardSpecificUsers')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedMemberIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedMemberIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { giveawayChatId }): StateProps => {\n  const chatFullInfo = giveawayChatId ? selectChatFullInfo(global, giveawayChatId) : undefined;\n  if (!chatFullInfo) {\n    return {};\n  }\n\n  return {\n    members: chatFullInfo.members,\n    adminMembersById: chatFullInfo.adminMembersById,\n  };\n})(GiveawayUserPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"P0kLOw15\",\"button\":\"ILuhBsJG\",\"main\":\"SqiN63Ef\",\"logo\":\"Me2hCsMs\",\"header-text\":\"UVDnB0Wq\",\"headerText\":\"UVDnB0Wq\",\"description\":\"v5yGzV6v\",\"header\":\"U6XNIToQ\",\"hidden-header\":\"tDZc21ZC\",\"hiddenHeader\":\"tDZc21ZC\",\"close-button\":\"OX6_HqAd\",\"closeButton\":\"OX6_HqAd\",\"premium-header-text\":\"v6hiGpEn\",\"premiumHeaderText\":\"v6hiGpEn\",\"primary-footer-text\":\"YGbiSd3e\",\"primaryFooterText\":\"YGbiSd3e\",\"section\":\"rZRDMqUL\",\"types\":\"sQ5PkKEs\",\"footer\":\"hD_AEzjd\",\"options\":\"JjDLNrKG\",\"giveawayTitle\":\"p5Hn4Q6E\",\"subscription\":\"rniPcuiP\",\"starSubscription\":\"bzRAETfR\",\"subscriptionOption\":\"ggZrgZnv\",\"status\":\"q1y2qUTn\",\"info\":\"IsT38nlq\",\"titleInfo\":\"nmsfBLut\",\"month\":\"TsGuei3B\",\"quantity\":\"G9H3tm6D\",\"floatingBadge\":\"xKl2UeV8\",\"floatingBadgeColor\":\"HLx3wTBD\",\"floatingBadgeButtonColor\":\"JLH0MExt\",\"floatingBadgeIcon\":\"Ftr7zf2v\",\"floatingBadgeValue\":\"Ce0Ob2tg\",\"subscriptionFooter\":\"rDFQAfTt\",\"premiumFeatures\":\"eNQ_nrKr\",\"dateButton\":\"GeKqKRgP\",\"title\":\"LZ3vPzak\",\"checkboxSection\":\"Z9QJQ6IS\",\"prizesSection\":\"eQVP0Nx8\",\"prizesInput\":\"qMYNwiUZ\",\"subLabelClassName\":\"txXJxVFu\",\"prepaidImg\":\"ldn4mh2T\",\"addButton\":\"sOXvh85b\",\"addChannel\":\"aGbyR60s\",\"removeChannel\":\"UZdErfVI\",\"starOptions\":\"cLhNkYPB\",\"transition\":\"vEI2Wewt\"};","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiCountry,\n  ApiPremiumGiftCodeOption,\n  ApiPrepaidGiveaway,\n  ApiPrepaidStarsGiveaway,\n  ApiStarGiveawayOption,\n  ApiTypePrepaidGiveaway,\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n  GIVEAWAY_MAX_ADDITIONAL_CHANNELS,\n  GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  GIVEAWAY_MAX_ADDITIONAL_USERS,\n  STARS_CURRENCY_CODE,\n} from '../../../config';\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { unique } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport CountryPickerModal from '../../common/CountryPickerModal';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport StarTopupOptionList from '../../modals/stars/StarTopupOptionList';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSliderWithMarks from '../../ui/RangeSliderWithMarks';\nimport Switcher from '../../ui/Switcher';\nimport GiveawayChannelPickerModal from './GiveawayChannelPickerModal';\nimport GiveawayTypeOption from './GiveawayTypeOption';\nimport GiveawayUserPickerModal from './GiveawayUserPickerModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './GiveawayModal.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumStar.svg';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  userIds?: string[];\n};\n\ntype StateProps = {\n  chatId?: string;\n  gifts?: ApiPremiumGiftCodeOption[];\n  isOpen?: boolean;\n  fromUser?: ApiUser;\n  selectedMemberList?: string[] | undefined;\n  selectedChannelList?: string[] | undefined;\n  giveawayBoostPerPremiumLimit?: number;\n  userSelectionLimit?: number;\n  countryList: ApiCountry[];\n  prepaidGiveaway?: ApiTypePrepaidGiveaway;\n  countrySelectionLimit: number | undefined;\n  isChannel?: boolean;\n  isStarsGiftEnabled?: boolean;\n  starsGiftOptions?: ApiStarGiveawayOption[] | undefined;\n};\n\ntype GiveawayAction = 'createPremiumGiveaway' | 'createStarsGiveaway';\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\ntype SubscribersType = 'all' | 'new';\n\ninterface TypeOption {\n  name: string;\n  text: string;\n  value: ApiGiveawayType;\n  img: string;\n  actions?: GiveawayAction;\n  isLink: boolean;\n  onClickAction?: () => void;\n}\n\nconst DEFAULT_CUSTOM_EXPIRE_DATE = 86400 * 3 * 1000; // 3 days\nconst MAX_ADDITIONAL_CHANNELS = 9;\nconst DEFAULT_BOOST_COUNT = 5;\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst GiveawayModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  gifts,\n  isOpen,\n  isChannel,\n  selectedMemberList,\n  selectedChannelList,\n  giveawayBoostPerPremiumLimit = GIVEAWAY_BOOST_PER_PREMIUM,\n  countryList,\n  prepaidGiveaway,\n  countrySelectionLimit = GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  userSelectionLimit = GIVEAWAY_MAX_ADDITIONAL_USERS,\n  isStarsGiftEnabled,\n  starsGiftOptions,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closeGiveawayModal, openInvoice, openPremiumModal,\n    launchPrepaidGiveaway, launchPrepaidStarsGiveaway,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isCountryPickerModalOpen, openCountryPickerModal, closeCountryPickerModal] = useFlag();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [isUserPickerModalOpen, openUserPickerModal, closeUserPickerModal] = useFlag();\n  const [isChannelPickerModalOpen, openChannelPickerModal, closeChannelPickerModal] = useFlag();\n\n  const TYPE_OPTIONS: TypeOption[] = [{\n    name: 'Premium.Title',\n    text: 'BoostingWinnersRandomly',\n    value: 'premium_giveaway',\n    img: GiftBlueRound,\n    actions: 'createPremiumGiveaway',\n    isLink: true,\n    onClickAction: () => {\n      openUserPickerModal();\n    },\n  }];\n\n  if (isStarsGiftEnabled) {\n    TYPE_OPTIONS.push({\n      name: 'TelegramStars',\n      text: 'BoostingWinnersRandomly',\n      value: 'stars_giveaway',\n      img: GiftStar,\n      actions: 'createStarsGiveaway',\n      isLink: false,\n    });\n  }\n\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedRandomUserCount, setSelectedRandomUserCount] = useState<number>(DEFAULT_BOOST_COUNT);\n  const [selectedGiveawayOption, setGiveawayOption] = useState<ApiGiveawayType>(TYPE_OPTIONS[0].value);\n  const [selectedStarOption, setSelectedStarOption] = useState<ApiStarGiveawayOption | undefined>();\n  const [selectedSubscriberOption, setSelectedSubscriberOption] = useState<SubscribersType>('all');\n  const [selectedMonthOption, setSelectedMonthOption] = useState<number | undefined>();\n  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n  const [selectedChannelIds, setSelectedChannelIds] = useState<string[]>([]);\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[] | undefined>([]);\n  const [shouldShowWinners, setShouldShowWinners] = useState<boolean>(false);\n  const [shouldShowPrizes, setShouldShowPrizes] = useState<boolean>(false);\n  const [prizeDescription, setPrizeDescription] = useState<string | undefined>(undefined);\n  const [dataPrepaidGiveaway, setDataPrepaidGiveaway] = useState<ApiPrepaidGiveaway | undefined>(undefined);\n  const [\n    dataStarsPrepaidGiveaway, setDataStarsPrepaidGiveaway,\n  ] = useState<ApiPrepaidStarsGiveaway | undefined>(undefined);\n\n  const isPremiumGiveaway = selectedGiveawayOption === 'premium_giveaway';\n  const isStarsGiveaway = selectedGiveawayOption === 'stars_giveaway';\n  const selectedUserCount = isPremiumGiveaway\n    && !selectedUserIds.length ? selectedRandomUserCount : selectedUserIds.length;\n  const boostQuantity = selectedUserCount * giveawayBoostPerPremiumLimit;\n  const boostStarsQuantity = selectedStarOption?.yearlyBoosts;\n\n  const SUBSCRIBER_OPTIONS = useMemo(() => [\n    {\n      value: 'all',\n      label: lang(isChannel ? 'BoostingAllSubscribers' : 'BoostingAllMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n    {\n      value: 'new',\n      label: lang(isChannel ? 'BoostingNewSubscribers' : 'BoostingNewMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n  ], [isChannel, lang, selectedCountryIds]);\n\n  const monthQuantity = lang('Months', selectedMonthOption);\n  const isStarsPrepaidGiveaway = prepaidGiveaway?.type === 'starsGiveaway';\n  const isPremiumPrepaidGiveaway = prepaidGiveaway?.type === 'giveaway';\n\n  const selectedGift = useMemo(() => {\n    return gifts?.find((gift) => gift.months === selectedMonthOption && gift.users === selectedUserCount);\n  }, [gifts, selectedMonthOption, selectedUserCount]);\n\n  const selectedStarsGift = useMemo(() => {\n    return starsGiftOptions?.find((gift) => {\n      return isStarsPrepaidGiveaway && gift.stars === (dataStarsPrepaidGiveaway?.stars);\n    });\n  }, [dataStarsPrepaidGiveaway, starsGiftOptions, isStarsPrepaidGiveaway]);\n\n  const filteredGifts = useMemo(() => {\n    return gifts?.filter((gift) => gift.users === selectedUserCount && gift.currency !== STARS_CURRENCY_CODE);\n  }, [gifts, selectedUserCount]);\n\n  const fullMonthlyAmount = useMemo(() => {\n    const basicGift = filteredGifts?.reduce((acc, gift) => {\n      return gift.amount < acc.amount ? gift : acc;\n    }, filteredGifts[0]);\n\n    return basicGift && Math.floor(basicGift.amount / basicGift.months);\n  }, [filteredGifts]);\n\n  const userCountOptions = useMemo(() => {\n    return unique((gifts?.filter((gift) => gift.currency !== STARS_CURRENCY_CODE)\n      ?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [gifts]);\n\n  const winnerCountOptions = useMemo(() => {\n    return unique((selectedStarOption?.winners?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [selectedStarOption]);\n\n  useEffect(() => {\n    if (isOpen && gifts?.length && !isStarsPrepaidGiveaway) {\n      setSelectedMonthOption(gifts?.[0].months);\n    }\n  }, [isOpen, gifts, isStarsPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && starsGiftOptions?.length && !isPremiumPrepaidGiveaway) {\n      setSelectedStarOption(starsGiftOptions?.[0]);\n    }\n  }, [isOpen, starsGiftOptions, isPremiumPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isStarsPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataStarsPrepaidGiveaway(prepaidGiveaway);\n    }\n  }, [isOpen, isStarsPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isPremiumPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataPrepaidGiveaway(prepaidGiveaway);\n      setSelectedMonthOption(prepaidGiveaway.months);\n    }\n  }, [isOpen, isPremiumPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (selectedMemberList) {\n      setSelectedUserIds(selectedMemberList);\n    }\n  }, [selectedMemberList]);\n\n  useEffect(() => {\n    if (selectedChannelList) {\n      setSelectedChannelIds(selectedChannelList);\n    }\n  }, [selectedChannelList]);\n\n  const handlePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    setDataStarsPrepaidGiveaway(undefined);\n    setDataPrepaidGiveaway(undefined);\n    setSelectedStarOption(undefined);\n    setSelectedMonthOption(undefined);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n    closeGiveawayModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (isPremiumGiveaway) {\n      if (selectedUserIds?.length) {\n        openInvoice({\n          type: 'giftcode',\n          boostChannelId: chatId!,\n          userIds: selectedUserIds,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      } else {\n        openInvoice({\n          type: 'giveaway',\n          chatId: chatId!,\n          additionalChannelIds: selectedChannelIds,\n          isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n          countries: selectedCountryIds,\n          areWinnersVisible: shouldShowWinners,\n          prizeDescription,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      }\n    } else {\n      openInvoice({\n        type: 'starsgiveaway',\n        chatId: chatId!,\n        additionalChannelIds: selectedChannelIds,\n        isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n        countries: selectedCountryIds,\n        areWinnersVisible: shouldShowWinners,\n        prizeDescription,\n        untilDate: customExpireDate / 1000,\n        currency: selectedStarOption!.currency,\n        amount: selectedStarOption!.amount,\n        stars: selectedStarOption!.stars,\n        users: selectedRandomUserCount,\n      });\n    }\n\n    handleClose();\n  });\n\n  const confirmLaunchPrepaidGiveaway = useLastCallback(() => {\n    if (isStarsPrepaidGiveaway) {\n      launchPrepaidStarsGiveaway({\n        chatId: chatId!,\n        giveawayId: dataStarsPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          stars: dataStarsPrepaidGiveaway!.stars,\n          currency: selectedStarsGift!.currency,\n          amount: selectedStarsGift!.amount,\n          users: dataStarsPrepaidGiveaway!.quantity,\n        },\n      });\n    } else {\n      launchPrepaidGiveaway({\n        chatId: chatId!,\n        giveawayId: dataPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n        },\n      });\n    }\n\n    closeConfirmModal();\n    handleClose();\n  });\n\n  const handleRandomUserCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handleWinnerCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handlePrizeDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setPrizeDescription(e.target.value);\n  });\n\n  const userNames = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    return selectedUserIds?.map((userId) => getUserFullName(usersById[userId])).join(', ');\n  }, [selectedUserIds]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleChangeSubscriberOption = useLastCallback((value) => {\n    setSelectedSubscriberOption(value);\n  });\n\n  const handleChangeTypeOption = useLastCallback((value: ApiGiveawayType) => {\n    setGiveawayOption(value);\n    setSelectedUserIds([]);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleSetCountriesListChange = useLastCallback((value: string[]) => {\n    setSelectedCountryIds(value);\n  });\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedUserIds(newSelectedIds);\n    if (!newSelectedIds.length) {\n      setGiveawayOption('premium_giveaway');\n    }\n  });\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedChannelIds(newSelectedIds);\n  });\n\n  const handleShouldShowWinnersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowWinners(e.target.checked);\n  });\n\n  const handleShouldShowPrizesChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowPrizes(e.target.checked);\n  });\n\n  const onClickActionHandler = useLastCallback(() => {\n    openCountryPickerModal();\n  });\n\n  const handleStarClick = useLastCallback((option) => {\n    setSelectedStarOption(option);\n  });\n\n  function renderTypeOptions() {\n    return (\n      <div className={styles.options}>\n        {TYPE_OPTIONS.map((option) => {\n          return (\n            <GiveawayTypeOption\n              key={option.name}\n              name={option.name}\n              text={option.text}\n              option={option.value}\n              img={option.img}\n              onChange={handleChangeTypeOption}\n              checked={selectedGiveawayOption === option.value}\n              isLink={option.isLink}\n              userNames={userNames}\n              selectedMemberIds={selectedUserIds}\n              onClickAction={option.onClickAction}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscribersOptions() {\n    return (\n      <div className={styles.options}>\n        <RadioGroup\n          name=\"subscribers\"\n          options={SUBSCRIBER_OPTIONS}\n          selected={selectedSubscriberOption}\n          onChange={handleChangeSubscriberOption}\n          onClickAction={onClickActionHandler}\n          subLabelClassName={styles.subLabelClassName}\n          isLink\n        />\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.options}>\n        {filteredGifts?.map((gift) => (\n          <PremiumSubscriptionOption\n            isGiveaway\n            key={gift.months}\n            option={gift}\n            fullMonthlyAmount={fullMonthlyAmount}\n            checked={gift.months === selectedMonthOption}\n            onChange={setSelectedMonthOption}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  function deleteParticipantsHandler(id: string) {\n    const filteredChannelIds = selectedChannelIds.filter((channelId) => channelId !== id);\n    setSelectedChannelIds(filteredChannelIds);\n  }\n\n  function renderStarOptionList() {\n    return (\n      <StarTopupOptionList\n        className={styles.starOptions}\n        options={starsGiftOptions}\n        selectedStarCount={selectedRandomUserCount}\n        selectedStarOption={selectedStarOption}\n        onClick={handleStarClick}\n      />\n    );\n  }\n\n  function renderGiveawayOptionList() {\n    return (\n      <>\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingChannelsGroupsIncludedGiveaway')}\n          </h2>\n\n          <ListItem\n            inactive\n            className=\"chat-item-clickable contact-list-item\"\n          >\n            <GroupChatInfo\n              chatId={chatId!}\n              status={lang(isChannel ? 'BoostingChannelWillReceiveBoost'\n                : 'BoostingGroupWillReceiveBoost', boostQuantity || boostStarsQuantity, 'i')}\n            />\n          </ListItem>\n\n          {selectedChannelIds?.map((channelId) => {\n            return (\n              <ListItem\n                ripple\n                key={channelId}\n                className=\"chat-item-clickable contact-list-item\"\n\n                onClick={() => deleteParticipantsHandler(channelId)}\n                rightElement={(<Icon name=\"close\" className={styles.removeChannel} />)}\n              >\n                <GroupChatInfo\n                  chatId={channelId.toString()}\n                />\n              </ListItem>\n            );\n          })}\n\n          {selectedChannelIds.length < MAX_ADDITIONAL_CHANNELS && (\n            <ListItem\n              icon=\"add\"\n              ripple\n              onClick={openChannelPickerModal}\n              className={styles.addButton}\n              iconClassName={styles.addChannel}\n            >\n              {lang('BoostingAddChannelOrGroup')}\n            </ListItem>\n          )}\n        </div>\n\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingEligibleUsers')}\n          </h2>\n\n          {renderSubscribersOptions()}\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang(isChannel ? 'BoostGift.LimitSubscribersInfo' : 'lng_giveaway_users_about_group'))}\n        </div>\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayAdditionalPrizes')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowPrizes}\n              onChange={handleShouldShowPrizesChange}\n            />\n          </div>\n\n          {shouldShowPrizes && (\n            <div className={styles.prizesSection}>\n              <h2 className={styles.title}>\n                {selectedRandomUserCount}\n              </h2>\n              <InputText\n                className={styles.prizesInput}\n                value={prizeDescription}\n                onChange={handlePrizeDescriptionChange}\n                label={lang('BoostingGiveawayEnterYourPrize')}\n              />\n            </div>\n          )}\n        </div>\n\n        {shouldShowPrizes ? (\n          !isStarsGiveaway && !isStarsPrepaidGiveaway ? (\n            <div className={styles.subscription}>\n              {prizeDescription?.length ? renderText(lang('BoostingGiveawayAdditionPrizeCountNameHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, prizeDescription, monthQuantity]\n                  : [selectedUserCount, prizeDescription, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown']) : renderText(lang('BoostingGiveawayAdditionPrizeCountHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, monthQuantity]\n                  : [selectedUserCount, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown'])}\n            </div>\n          ) : undefined\n        ) : (\n          <div className={styles.subscription}>\n            {renderText(lang('BoostingGiveawayAdditionPrizeHint'))}\n          </div>\n        )}\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayShowWinners')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowWinners}\n              onChange={handleShouldShowWinnersChange}\n            />\n          </div>\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang('BoostingGiveawayShowWinnersHint'))}\n        </div>\n\n        <div className={buildClassName(styles.section,\n          (dataPrepaidGiveaway || dataStarsPrepaidGiveaway || isStarsGiveaway) && styles.subscriptionFooter)}\n        >\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingDateWhenGiveawayEnds')}\n          </h2>\n\n          <Button\n            ariaLabel={lang('BoostGift.DateEnds')}\n            className={buildClassName(styles.dateButton, 'expire-limit')}\n            isText\n            onClick={openCalendar}\n          >\n            <h3 className={styles.title}>\n              {lang('BoostGift.DateEnds')}\n            </h3>\n            {formatDateTimeToString(customExpireDate, lang.code)}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={handleClose}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n      onEnter={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          onClick={handleClose}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n        <h2 className={styles.headerText}>\n          {renderText(lang('BoostingBoostsViaGifts'))}\n        </h2>\n        <div className={styles.description}>\n          {renderText(lang(isChannel ? 'BoostingGetMoreBoost' : 'BoostingGetMoreBoostsGroup'))}\n        </div>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.premiumHeaderText}>\n            {lang('BoostingBoostsViaGifts')}\n          </h2>\n        </div>\n        {(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? (\n          <div className={styles.status}>\n            <div>\n              {dataStarsPrepaidGiveaway ? (\n                <img className={styles.prepaidImg} src={GiftStar} alt=\"\" />\n              ) : (\n                <img\n                  className={styles.prepaidImg}\n                  src={GIVEAWAY_IMG_LIST[dataPrepaidGiveaway!.months] || GIVEAWAY_IMG_LIST[3]}\n                  alt=\"\"\n                />\n              )}\n            </div>\n            <div className={styles.info}>\n              <h3 className={styles.title}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Title', dataStarsPrepaidGiveaway?.stars)\n                  : lang('BoostingTelegramPremiumCountPlural', dataPrepaidGiveaway!.quantity)}\n              </h3>\n              <p className={styles.month}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', dataStarsPrepaidGiveaway?.quantity)\n                  : lang('PrepaidGiveawayMonths', dataPrepaidGiveaway?.months)}\n              </p>\n            </div>\n            <div className={styles.quantity}>\n              <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {dataStarsPrepaidGiveaway ? dataStarsPrepaidGiveaway?.boosts\n                    : dataPrepaidGiveaway!.quantity * (giveawayBoostPerPremiumLimit ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className={buildClassName(styles.section, styles.types)}>\n            {renderTypeOptions()}\n          </div>\n        )}\n\n        {isPremiumGiveaway && !selectedUserIds?.length && (\n          <>\n            {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingQuantityPrizes')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedUserCount}\n                    marks={userCountOptions}\n                    onChange={handleRandomUserCountChange}\n                  />\n                </div>\n\n                <div className={styles.subscription}>\n                  {renderText(lang('BoostingChooseHowMany'))}\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {isStarsGiveaway && (\n          <>\n            {!dataStarsPrepaidGiveaway && !dataPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingStarsOptions')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostStarsQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  {renderStarOptionList()}\n                </div>\n\n                <div className={buildClassName(styles.subscription, styles.starSubscription)}>\n                  {renderText(lang('BoostGift.Stars.Info'))}\n                </div>\n\n                <div className={styles.section}>\n                  <h2 className={styles.giveawayTitle}>\n                    {lang('BoostingStarsQuantityPrizes')}\n                  </h2>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedRandomUserCount}\n                    marks={winnerCountOptions}\n                    onChange={handleWinnerCountChange}\n                  />\n\n                  <div className={styles.subscription}>\n                    {renderText(lang('BoostingStarsQuantityPrizesInfo'))}\n                  </div>\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && isPremiumGiveaway && (\n          <>\n            <div className={styles.section}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingDurationOfPremium')}\n              </h2>\n\n              {renderSubscriptionOptions()}\n            </div>\n\n            <div className={buildClassName(styles.subscription, styles.subscriptionFooter)}>\n              {renderPremiumFeaturesLink()}\n            </div>\n          </>\n        )}\n\n        {selectedGiveawayOption && (\n          <div className={styles.footer}>\n            <Button\n              className={styles.button}\n              onClick={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n            >\n              {lang('BoostingStartGiveaway')}\n            </Button>\n          </div>\n        )}\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n      <CountryPickerModal\n        isOpen={isCountryPickerModalOpen}\n        onClose={closeCountryPickerModal}\n        countryList={countryList}\n        onSubmit={handleSetCountriesListChange}\n        selectionLimit={countrySelectionLimit}\n      />\n      <GiveawayUserPickerModal\n        isOpen={isUserPickerModalOpen}\n        onClose={closeUserPickerModal}\n        onSelectedIdsConfirmed={handleSelectedUserIdsChange}\n        initialSelectedIds={selectedUserIds}\n        selectionLimit={userSelectionLimit}\n        giveawayChatId={chatId}\n      />\n      <GiveawayChannelPickerModal\n        isOpen={isChannelPickerModalOpen}\n        onClose={closeChannelPickerModal}\n        initialSelectedIds={selectedChannelIds}\n        onSelectedIdsConfirmed={handleSelectedChannelIdsChange}\n        selectionLimit={GIVEAWAY_MAX_ADDITIONAL_CHANNELS}\n        giveawayChatId={chatId}\n      />\n      <ConfirmDialog\n        title={lang('BoostingStartGiveawayConfirmTitle')}\n        text={lang('BoostingStartGiveawayConfirmText')}\n        confirmLabel={lang('Start')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmLaunchPrepaidGiveaway}\n      />\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    giveawayModal,\n  } = selectTabState(global);\n  const chatId = giveawayModal?.chatId;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const isChannel = chat && isChatChannel(chat);\n\n  return {\n    chatId,\n    gifts: giveawayModal?.gifts,\n    selectedMemberList: giveawayModal?.selectedMemberIds,\n    selectedChannelList: giveawayModal?.selectedChannelIds,\n    giveawayBoostPerPremiumLimit: global.appConfig?.giveawayBoostsPerPremium,\n    isStarsGiftEnabled: global.appConfig?.isStarsGiftEnabled,\n    userSelectionLimit: global.appConfig?.giveawayAddPeersMax,\n    countrySelectionLimit: global.appConfig?.giveawayCountriesMax,\n    countryList: global.countryList.general,\n    prepaidGiveaway: giveawayModal?.prepaidGiveaway,\n    isChannel,\n    starsGiftOptions: giveawayModal?.starOptions,\n  };\n})(GiveawayModal));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiLimitTypeWithModal } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\nimport type { IconName } from '../../../../types/icons';\n\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogs',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, IconName> = {\n  dialogFiltersChats: 'chat-badge',\n  uploadMaxFileparts: 'file-badge',\n  dialogFilters: 'folder-badge',\n  dialogFolderPinned: 'pin-badge',\n  channelsPublic: 'link-badge',\n  channels: 'chats-badge',\n  chatlistInvites: 'link-badge',\n  chatlistJoined: 'folder-badge',\n  savedDialogsPinned: 'pin-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: OldLangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: OldLangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useOldLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>\n            {valueFormatter?.(\n              lang, isPremium ? premiumValue : defaultValue,\n            ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n          && (\n            <Button\n              className=\"confirm-dialog-button\"\n              isText\n              onClick={handleClick}\n              color=\"primary\"\n            >\n              {lang('IncreaseLimit')}\n              <Icon name=\"double-badge\" className={styles.x2} />\n            </Button>\n          )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QAs_iFxO\",\"limit-compare\":\"k0O6Rnjh\",\"limitCompare\":\"k0O6Rnjh\",\"limit-badge\":\"Q5d_7bB4\",\"limitBadge\":\"Q5d_7bB4\",\"limit-value\":\"ArEy3hhB\",\"limitValue\":\"ArEy3hhB\",\"limit-icon\":\"rbnU7JVX\",\"limitIcon\":\"rbnU7JVX\",\"dialog-buttons\":\"RVM_RSap\",\"dialogButtons\":\"RVM_RSap\",\"x2\":\"esB1OhAF\",\"button-icon\":\"ydpxmYS3\",\"buttonIcon\":\"ydpxmYS3\"};","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useRef, useState } from '../../../lib/teact/teact';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: ElementRef<HTMLDivElement>,\n  headerRef: ElementRef<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useLastCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll({\n        container: containerRef.current!,\n        element: stickerSetEl,\n        position: 'start',\n        margin: FOCUS_MARGIN,\n        maxDistance: isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      });\n\n      return index;\n    });\n  });\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"m6XpTzQX\",\"video\":\"OZHqKbDL\",\"image\":\"enA6c8gc\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  forcePlayback,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    hasThumbnail, hasVideoThumb, hasAnimatedThumb, hasStaticThumb, thumbCustomEmojiId,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, undefined, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const shouldFallbackToSticker = !hasThumbnail\n    || (hasVideoThumb && !IS_WEBM_SUPPORTED && !hasAnimatedThumb && !hasStaticThumb);\n  const firstStickerHash = shouldFallbackToSticker && stickerSet.stickers?.[0]\n    && getStickerMediaHash(stickerSet.stickers[0], 'preview');\n  const firstStickerMediaData = useMedia(firstStickerHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !firstStickerHash) || hasAnimatedThumb) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = thumbCustomEmojiId || mediaData || firstStickerMediaData;\n  const transitionClassNames = useMediaTransitionDeprecated(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: stickerSet,\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'sticker-set-cover')}\n      style={`--_size: ${size}px`}\n    >\n      {isReady ? (\n        thumbCustomEmojiId ? (\n          <CustomEmoji\n            documentId={thumbCustomEmojiId}\n            size={size}\n            observeIntersectionForPlaying={observeIntersection}\n            noPlay={noPlay}\n          />\n        ) : hasAnimatedThumb ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n            forceAlways={forcePlayback}\n          />\n        ) : (hasVideoThumb && !shouldFallbackToSticker) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            isPriority={forcePlayback}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || firstStickerMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n            draggable={false}\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { MouseEvent as ReactMouseEvent, ReactNode } from 'react';\nimport type {\n  ElementRef } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiBotInlineMediaResult, ApiSticker } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useDynamicColorListener from '../../hooks/stickers/useDynamicColorListener';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport Icon from './icons/Icon';\nimport Sparkles from './Sparkles';\nimport StickerView from './StickerView';\n\nimport './StickerButton.scss';\n\ntype OwnProps<T> = {\n  sticker: ApiSticker;\n  size: number;\n  noPlay?: boolean;\n  title?: string;\n  className?: string;\n  noContextMenu?: boolean;\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  canViewSet?: boolean;\n  isSelected?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldIgnorePremium?: boolean;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  withTranslucentThumb?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  observeIntersectionForShowing?: ObserveFn;\n  noShowPremium?: boolean;\n  onClick?: (arg: OwnProps<T>['clickArg'], isSilent?: boolean, shouldSchedule?: boolean) => void;\n  clickArg: T;\n  onFaveClick?: (sticker: ApiSticker) => void;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n  onRemoveRecentClick?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n  isEffectEmoji?: boolean;\n  withSparkles?: boolean;\n};\n\nconst contentForStatusMenuContext = [\n  { title: 'SetTimeoutFor.Hours', value: 1, arg: 3600 },\n  { title: 'SetTimeoutFor.Hours', value: 2, arg: 7200 },\n  { title: 'SetTimeoutFor.Hours', value: 8, arg: 28800 },\n  { title: 'SetTimeoutFor.Days', value: 1, arg: 86400 },\n  { title: 'SetTimeoutFor.Days', value: 2, arg: 172800 },\n];\n\nconst StickerButton = <T extends number | ApiSticker | ApiBotInlineMediaResult | undefined = undefined>({\n  sticker,\n  size,\n  noPlay,\n  title,\n  className,\n  noContextMenu,\n  isSavedMessages,\n  isStatusPicker,\n  canViewSet,\n  observeIntersection,\n  observeIntersectionForShowing,\n  isSelected,\n  isCurrentUserPremium,\n  shouldIgnorePremium,\n  noShowPremium,\n  sharedCanvasRef,\n  withTranslucentThumb,\n  forcePlayback,\n  onClick,\n  clickArg,\n  onFaveClick,\n  onUnfaveClick,\n  onRemoveRecentClick,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  isEffectEmoji,\n  withSparkles,\n}: OwnProps<T>) => {\n  const { openStickerSet, openPremiumModal, setEmojiStatus } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n  const lang = useOldLang();\n  const hasCustomColor = sticker.shouldUseTextColor;\n  const customColor = useDynamicColorListener(ref, undefined, !hasCustomColor);\n\n  const {\n    id, stickerSetInfo,\n  } = sticker;\n\n  const isPremium = (!sticker.isFree && isEffectEmoji) || sticker.hasEffect;\n  const isCustomEmoji = sticker.isCustomEmoji || isEffectEmoji;\n  const isLocked = !isCurrentUserPremium && isPremium && !shouldIgnorePremium;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const shouldLoad = isIntersecting;\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const isIntesectingForShowing = useIsIntersecting(ref, observeIntersectionForShowing);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const shouldRenderContextMenu = Boolean(!noContextMenu && contextMenuAnchor);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => {\n    return isStatusPicker ? menuRef.current : ref.current!.querySelector('.sticker-context-menu .bubble');\n  });\n  const getLayout = useLastCallback(() => ({ withPortal: isStatusPicker, shouldAvoidNegativePosition: true }));\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenuOpen?.();\n    } else {\n      onContextMenuClose?.();\n    }\n  }, [isContextMenuOpen, onContextMenuClose, onContextMenuOpen]);\n\n  useEffect(() => {\n    if (!isIntersecting) handleContextMenuClose();\n  }, [handleContextMenuClose, isIntersecting]);\n\n  const handleClick = () => {\n    if (isContextMenuOpen) return;\n    if (isLocked) {\n      if (isEffectEmoji) {\n        openPremiumModal({ initialSection: 'effects' });\n      } else {\n        openPremiumModal({ initialSection: 'premium_stickers' });\n      }\n      return;\n    }\n    onClick?.(clickArg);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleRemoveClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextRemoveRecent = useLastCallback(() => {\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextUnfave = useLastCallback(() => {\n    onUnfaveClick!(sticker);\n  });\n\n  const handleContextFave = useLastCallback(() => {\n    onFaveClick!(sticker);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick?.(clickArg, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick?.(clickArg, undefined, true);\n  });\n\n  const handleOpenSet = useLastCallback(() => {\n    openStickerSet({ stickerSetInfo });\n  });\n\n  const handleEmojiStatusExpiresClick = useLastCallback((e: React.SyntheticEvent, duration = 0) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    handleContextMenuClose();\n    onContextMenuClick?.();\n    setEmojiStatus({\n      emojiStatus: { type: 'regular', documentId: sticker.id, until: getServerTime() + duration },\n    });\n  });\n\n  const shouldShowCloseButton = !IS_TOUCH_ENV && onRemoveRecentClick;\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    onClick && 'interactive',\n    isSelected && 'selected',\n    isCustomEmoji && 'custom-emoji',\n    isEffectEmoji && 'effect-emoji',\n    className,\n  );\n\n  const contextMenuItems = useMemo(() => {\n    if (!shouldRenderContextMenu || noContextMenu || (isCustomEmoji && !isStatusPicker)) return [];\n\n    const items: ReactNode[] = [];\n\n    if (isCustomEmoji) {\n      contentForStatusMenuContext.forEach((item) => {\n        items.push(\n          <MenuItem onClick={handleEmojiStatusExpiresClick} clickArg={item.arg}>\n            {lang(item.title, item.value, 'i')}\n          </MenuItem>,\n        );\n      });\n\n      return items;\n    }\n\n    if (onUnfaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextUnfave}>\n          {lang('Stickers.RemoveFromFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (onFaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextFave}>\n          {lang('Stickers.AddToFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (!isLocked && onClick) {\n      if (!isSavedMessages) {\n        items.push(<MenuItem onClick={handleSendQuiet} icon=\"muted\">{lang('SendWithoutSound')}</MenuItem>);\n      }\n      items.push(\n        <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>,\n      );\n    }\n\n    if (canViewSet) {\n      items.push(\n        <MenuItem onClick={handleOpenSet} icon=\"stickers\">\n          {lang('ViewPackPreview')}\n        </MenuItem>,\n      );\n    }\n    if (onRemoveRecentClick) {\n      items.push(\n        <MenuItem icon=\"delete\" onClick={handleContextRemoveRecent}>\n          {lang('DeleteFromRecent')}\n        </MenuItem>,\n      );\n    }\n    return items;\n  }, [\n    shouldRenderContextMenu, noContextMenu, isCustomEmoji, isStatusPicker, onUnfaveClick, onFaveClick, isLocked,\n    onClick, canViewSet, onRemoveRecentClick, handleEmojiStatusExpiresClick, lang, handleContextUnfave,\n    handleContextFave, isSavedMessages, handleSendScheduled, handleSendQuiet, handleOpenSet, handleContextRemoveRecent,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker?.emoji)}\n      data-sticker-id={id}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {withSparkles && <Sparkles preset=\"button\" />}\n      {isIntesectingForShowing && (\n        <StickerView\n          containerRef={ref}\n          sticker={sticker}\n          isSmall\n          size={size}\n          shouldLoop\n          shouldPreloadPreview\n          noLoad={!shouldLoad}\n          noPlay={!shouldPlay}\n          noVideoOnMobile\n          withSharedAnimation\n          sharedCanvasRef={sharedCanvasRef}\n          withTranslucentThumb={withTranslucentThumb}\n          customColor={customColor}\n          forceAlways={forcePlayback}\n        />\n      )}\n      {!noShowPremium && isLocked && (\n        <div\n          className=\"sticker-locked\"\n        >\n          <Icon name=\"lock-badge\" />\n        </div>\n      )}\n      {!noShowPremium && isPremium && !isLocked && (\n        <div className=\"sticker-premium\">\n          <Icon name=\"star\" />\n        </div>\n      )}\n      {shouldShowCloseButton && (\n        <Button\n          className=\"sticker-remove-button\"\n          color=\"dark\"\n          round\n          noFastClick\n          onClick={handleRemoveClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      {Boolean(contextMenuItems.length) && (\n        <Menu\n          ref={menuRef}\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className=\"sticker-context-menu\"\n          autoClose\n          withPortal={isStatusPicker}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {contextMenuItems}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AVrrYEbM\",\"selected\":\"QkdO_lz1\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiReactionWithPaid } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../../config';\nimport { getDocumentMediaHash, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../helpers/animatedAssets';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../AnimatedIconWithPreview';\nimport CustomEmoji from '../CustomEmoji';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionWithPaid;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  sharedCanvasHqRef?: ElementRef<HTMLCanvasElement>;\n  forcePlayback?: boolean;\n  onClick: (reaction: ApiReactionWithPaid) => void;\n  onContextMenu?: (reaction: ApiReactionWithPaid) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  forcePlayback,\n  onClick,\n  onContextMenu,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const isCustom = reaction.type === 'custom';\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation, 'full') : undefined,\n    !animationId,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, reaction.type !== 'paid', undefined, undefined, undefined, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenu?.(reaction);\n\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, onContextMenu, handleContextMenuHide, isContextMenuOpen, reaction]);\n\n  const tgsUrl = reaction.type === 'paid' ? LOCAL_TGS_URLS.StarReaction : mediaData;\n  const handleClick = useLastCallback(() => {\n    onClick(reaction);\n  });\n\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n          forceAlways={forcePlayback}\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={tgsUrl}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n          forceAlways={forcePlayback}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiEmojiStatusType, ApiReactionWithPaid, ApiSticker,\n} from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport { getReactionKey } from '../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Icon from './icons/Icon';\nimport ReactionEmoji from './reactions/ReactionEmoji';\nimport StickerButton from './StickerButton';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isChatEmojiSet?: boolean;\n  isChatStickerSet?: boolean;\n  isTranslucent?: boolean;\n  noContextMenus?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  collectibleStatuses?: ApiEmojiStatusType[];\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps & StateProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isChatEmojiSet,\n  isChatStickerSet,\n  isTranslucent,\n  noContextMenus,\n  forcePlayback,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onReactionContext,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  collectibleStatuses,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransitionDeprecated(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isStatusCollectible = stickerSet.id === COLLECTIBLE_STATUS_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useLastCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  });\n\n  const handleAddClick = useLastCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  });\n\n  const handleDefaultTopicIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const handleDefaultStatusIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useLastCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  });\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  });\n\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isCurrentUserPremium && isPremiumSet && !isChatEmojiSet;\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID\n    && stickerSet.id !== POPULAR_SYMBOL_SET_ID && stickerSet.id !== EFFECT_EMOJIS_SET_ID\n    && stickerSet.id !== EFFECT_STICKERS_SET_ID && !isChatEmojiSet && !isChatStickerSet;\n\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = (withDefaultTopicIcon || withDefaultStatusIcon) ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const collectibleEmojiIdsSet = useMemo(() => (\n    collectibleStatuses ? new Set(collectibleStatuses.map(({ documentId }) => documentId)) : undefined\n  ), [collectibleStatuses]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && !isStatusCollectible\n    && isEmoji && !isPopular && !isChatEmojiSet\n    && (!isInstalled || (!isCurrentUserPremium && !isSavedMessages));\n  const addSetButtonText = useMemo(() => {\n    if (isLocked) {\n      if (isInstalled) return lang('lng_emoji_premium_restore');\n      return lang('Unlock');\n    }\n\n    return lang('Add');\n  }, [isLocked, lang, isInstalled]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-title', withAddSetButton && 'symbol-set-title-external')}>\n            {isLocked && <Icon name=\"lock-badge\" className=\"symbol-set-locked-icon\" />}\n            <span className=\"symbol-set-name\">{stickerSet.title}</span>\n            {(isChatEmojiSet || isChatStickerSet) && (\n              <span className=\"symbol-set-chat\">{lang(isChatEmojiSet ? 'GroupEmoji' : 'GroupStickers')}</span>\n            )}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">\n                {lang(isEmoji ? 'EmojiCount' : 'Stickers', stickerSet.stickers.length, 'i')}\n              </span>\n            )}\n          </p>\n          {isRecent && (\n            <Icon className=\"symbol-set-remove\" name=\"close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {addSetButtonText}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'symbol-set-container shared-canvas-container',\n          transitionClassNames,\n          stickerSet.id === EFFECT_EMOJIS_SET_ID && 'effect-emojis',\n        )}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" draggable={false} />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <Icon name=\"star\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              onContextMenu={onReactionContext}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n              forcePlayback={forcePlayback}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            const withSparkles = sticker.id === COLLECTIBLE_STATUS_SET_ID\n              || collectibleEmojiIdsSet?.has(sticker.id);\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                noContextMenu={noContextMenus}\n                isCurrentUserPremium={isCurrentUserPremium}\n                shouldIgnorePremium={isChatEmojiSet}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n                forcePlayback={forcePlayback}\n                isEffectEmoji={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n                noShowPremium={isCurrentUserPremium\n                  && (stickerSet.id === EFFECT_STICKERS_SET_ID || stickerSet.id === EFFECT_EMOJIS_SET_ID)}\n                withSparkles={withSparkles}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +\n            {totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return { collectibleStatuses };\n  },\n)(StickerSet));\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lq8BD6Hc\",\"main\":\"p7c8y0LH\",\"hasHeader\":\"zTGriBHY\",\"main_customEmoji\":\"U0BL1VvK\",\"mainCustomEmoji\":\"U0BL1VvK\",\"header\":\"Qn3lBUNs\",\"headerWithBorder\":\"HMspKpNp\",\"stickerCover\":\"YKO0Obwy\",\"activated\":\"y02WwQk6\",\"pickerDisabled\":\"BZfaP1GD\"};","import type { FC } from '@teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '@teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiEmojiStatusType,\n  ApiReaction, ApiReactionWithPaid, ApiSticker, ApiStickerSet,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChatFullInfo,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { pickTruthy, unique, uniqueByField } from '../../util/iteratees';\nimport { REM } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useScrolledState from '../../hooks/useScrolledState';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport Transition from '../ui/Transition.tsx';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  pickerListClassName?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  collectibleStatuses?: ApiEmojiStatusType[];\n  chatEmojiSetId?: string;\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  isWithPaidReaction?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst RECENT_DEFAULT_STATUS_COUNT = 7;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  pickerListClassName,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  collectibleStatuses,\n  stickerSetsById,\n  chatEmojiSetId,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  defaultTagReactions,\n  isWithPaidReaction,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onReactionContext,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const collectibleStatusEmojis = useMemo(() => {\n    const collectibleStatusEmojiIds = collectibleStatuses?.map((status) => status.documentId);\n    return customEmojisById && collectibleStatusEmojiIds?.map((id) => customEmojisById[id]).filter(Boolean);\n  }, [customEmojisById, collectibleStatuses]);\n\n  const prefix = `${idPrefix}-custom-emoji`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const canLoadAndPlay = usePrevDuringAnimation(loadAndPlay || undefined, SLIDE_TRANSITION_DURATION);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker && isSavedMessages) {\n      if (defaultTagReactions?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('PremiumPreviewTags'),\n          reactions: defaultTagReactions,\n          count: defaultTagReactions.length,\n          isEmoji: true,\n        });\n      }\n    }\n\n    if (isReactionPicker && !isSavedMessages) {\n      const topReactionsSlice: ApiReactionWithPaid[] = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (isWithPaidReaction) {\n        topReactionsSlice.unshift({ type: 'paid' });\n      }\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .filter(({ isInactive }) => !isInactive)\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = uniqueByField(defaultStatusIconsPack.stickers\n          .slice(0, RECENT_DEFAULT_STATUS_COUNT)\n          .concat(recentCustomEmojis || []), 'id');\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n          isEmoji: true,\n        });\n      }\n      if (collectibleStatusEmojis?.length) {\n        defaultSets.push({\n          id: COLLECTIBLE_STATUS_SET_ID,\n          accessHash: '',\n          count: collectibleStatusEmojis.length,\n          stickers: collectibleStatusEmojis,\n          title: lang('CollectibleStatusesCategory'),\n          isEmoji: true,\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: oldLang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const userSetIds = [...(addedCustomEmojiIds || [])];\n    if (chatEmojiSetId) {\n      userSetIds.unshift(chatEmojiSetId);\n    }\n\n    const setIdsToDisplay = unique(userSetIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, oldLang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId, isSavedMessages, defaultTagReactions, chatEmojiSetId,\n    isWithPaidReaction, collectibleStatusEmojis, lang,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <Icon name=\"recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !canLoadAndPlay}\n              forcePlayback\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !canLoadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n        forcePlayback\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    pickerListClassName,\n    pickerStyles.hasHeader,\n  );\n\n  const isLoading = !shouldRenderContent && !noPopulatedSets;\n\n  return (\n    <Transition className={fullClassName} name=\"fade\" activeKey={isLoading ? 0 : 1} shouldCleanup>\n      {!shouldRenderContent && !noPopulatedSets ? (\n        <Loading />\n      ) : !shouldRenderContent && noPopulatedSets ? (\n        <div className={pickerStyles.pickerDisabled}>{oldLang('NoStickers')}</div>\n      ) : (\n        <>\n          <div\n            ref={headerRef}\n            className={headerClassName}\n          >\n            <div className=\"shared-canvas-container\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n              {allSets.map(renderCover)}\n            </div>\n          </div>\n          <div\n            ref={containerRef}\n            onScroll={handleContentScroll}\n            className={listClassName}\n          >\n            {allSets.map((stickerSet, i) => {\n              const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n                || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n              const isChatEmojiSet = stickerSet.id === chatEmojiSetId;\n\n              return (\n                <StickerSet\n                  key={stickerSet.id}\n                  stickerSet={stickerSet}\n                  loadAndPlay={Boolean(canAnimate && canLoadAndPlay)}\n                  index={i}\n                  idPrefix={prefix}\n                  observeIntersection={observeIntersectionForSet}\n                  observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n                  observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n                  isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n                  isSavedMessages={isSavedMessages}\n                  isStatusPicker={isStatusPicker}\n                  isReactionPicker={isReactionPicker}\n                  shouldHideHeader={shouldHideHeader}\n                  withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n                  withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n                  isChatEmojiSet={isChatEmojiSet}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  selectedReactionIds={selectedReactionIds}\n                  availableReactions={availableReactions}\n                  isTranslucent={isTranslucent}\n                  onReactionSelect={onReactionSelect}\n                  onReactionContext={onReactionContext}\n                  onStickerSelect={handleEmojiSelect}\n                  onContextMenuOpen={onContextMenuOpen}\n                  onContextMenuClose={onContextMenuClose}\n                  onContextMenuClick={onContextMenuClick}\n                  forcePlayback\n                />\n              );\n            })}\n          </div>\n        </>\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      reactions: {\n        availableReactions,\n        recentReactions,\n        topReactions,\n        defaultTags,\n      },\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      customEmojisById,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      collectibleStatuses: isStatusPicker ? collectibleStatuses : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      chatEmojiSetId: chatFullInfo?.emojiSet?.id,\n      isWithPaidReaction: isReactionPicker && chatFullInfo?.isPaidReactionAvailable,\n      availableReactions: isReactionPicker ? availableReactions : undefined,\n      defaultTagReactions: isReactionPicker ? defaultTags : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qk9PEGRE\",\"activated\":\"WYeuJNQx\"};","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"hRzvfaRb\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: ElementRef<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"C9sWDINB\",\"topEmoji\":\"gdG3oY21\",\"description\":\"p7S4AH8A\",\"title\":\"KVpsce1g\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SuggestedStatusModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestedStatusModal'];\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n};\n\nconst CUSTOM_EMOJI_SIZE = 6 * REM;\n\nconst SuggestedStatusModal = ({ modal, currentUser, bot }: OwnProps & StateProps) => {\n  const { setEmojiStatus, closeSuggestedStatusModal, sendWebAppEvent } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !renderingModal) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: renderingModal.customEmojiId,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, renderingModal]);\n\n  const description = useMemo(() => {\n    if (!renderingModal || !bot) return undefined;\n\n    const botName = getUserFullName(bot);\n\n    if (renderingModal.duration) {\n      return lang('BotSuggestedStatusFor', {\n        bot: botName,\n        duration: formatShortDuration(lang, renderingModal.duration),\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n      });\n    }\n\n    return lang('BotSuggestedStatus', { bot: botName }, { withNodes: true, withMarkdown: true });\n  }, [bot, lang, renderingModal]);\n\n  const handleClose = useLastCallback(() => {\n    const webAppKey = renderingModal?.webAppKey;\n\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n      });\n    }\n\n    closeSuggestedStatusModal();\n  });\n\n  const handleSetStatus = useLastCallback(() => {\n    if (!renderingModal) return;\n\n    const expires = renderingModal.duration ? getServerTime() + renderingModal.duration : undefined;\n\n    setEmojiStatus({\n      referrerWebAppKey: renderingModal.webAppKey,\n      emojiStatus: { type: 'regular', documentId: renderingModal.customEmojiId, until: expires },\n    });\n    closeSuggestedStatusModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {renderingModal && (\n        <CustomEmoji\n          className={styles.topEmoji}\n          documentId={renderingModal.customEmojiId}\n          size={CUSTOM_EMOJI_SIZE}\n          loopLimit={1}\n          forceAlways\n        />\n      )}\n      <div>\n        <h3 className={styles.title}>{lang('BotSuggestedStatusTitle')}</h3>\n        <p className={styles.description}>{description}</p>\n      </div>\n      {mockPeerWithStatus && (\n        <PeerChip\n          mockPeer={mockPeerWithStatus}\n          withEmojiStatus\n        />\n      )}\n      <Button size=\"smaller\" onClick={handleSetStatus}>\n        {lang('GeneralConfirm')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const bot = modal?.botId ? selectUser(global, modal.botId) : undefined;\n\n    return {\n      currentUser,\n      bot,\n    };\n  },\n)(SuggestedStatusModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"pUyNTysT\",\"modal\":\"IK2mBqbm\",\"loading\":\"zjXCH3pT\",\"description\":\"j6xEoljc\",\"bold\":\"hAA6B1lc\",\"chip\":\"smWR78pO\",\"replaceModal\":\"GIFAjZPY\",\"replaceModalContent\":\"Jxyz9TaL\",\"avatarContainer\":\"OKp6HS1U\",\"arrow\":\"WSJdWV7L\",\"boostedWrapper\":\"NU9itcIm\",\"boostedMark\":\"upXvhNRY\"};","import { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiMyBoost } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getChatTitle, isChatAdmin, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\n\nimport styles from './BoostModal.module.scss';\n\ntype LoadedParams = {\n  boost?: ApiMyBoost;\n  leftText: string;\n  rightText?: string;\n  value: string;\n  progress: number;\n  descriptionText: string;\n  isBoosted?: boolean;\n  canBoostMore?: boolean;\n};\n\ntype BoostInfo = ({\n  isStatusLoaded: false;\n  title: string;\n} & Undefined<LoadedParams>) | ({\n  isStatusLoaded: true;\n  title: string;\n} & LoadedParams);\n\nexport type OwnProps = {\n  modal: TabState['boostModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  prevBoostedChat?: ApiChat;\n  isCurrentUserPremium?: boolean;\n};\n\nconst BoostModal = ({\n  modal,\n  chat,\n  chatFullInfo,\n  prevBoostedChat,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    applyBoost,\n    closeBoostModal,\n    requestConfetti,\n    openPremiumModal,\n    loadFullChat,\n  } = getActions();\n\n  const [isReplaceModalOpen, openReplaceModal, closeReplaceModal] = useFlag();\n  const [isWaitDialogOpen, openWaitDialog, closeWaitDialog] = useFlag();\n  const [isPremiumDialogOpen, openPremiumDialog, closePremiumDialog] = useFlag();\n\n  const isChannel = chat && isChatChannel(chat);\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (chat && !chatFullInfo) {\n      loadFullChat({ chatId: chat.id });\n    }\n  }, [chat, chatFullInfo]);\n\n  const chatTitle = useMemo(() => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, chat);\n  }, [chat, oldLang]);\n\n  const boostedChatTitle = useMemo(() => {\n    if (!prevBoostedChat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, prevBoostedChat);\n  }, [prevBoostedChat, oldLang]);\n\n  const {\n    isStatusLoaded,\n    isBoosted,\n    boost,\n    title,\n    leftText,\n    rightText,\n    value,\n    progress,\n    descriptionText,\n    canBoostMore,\n  }: BoostInfo = useMemo(() => {\n    if (!modal?.boostStatus || !chat) {\n      return {\n        isStatusLoaded: false,\n        title: oldLang('Loading'),\n      };\n    }\n\n    const {\n      hasMyBoost,\n    } = modal.boostStatus;\n\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, chat.id);\n    const areBoostsInDifferentChannels = modal?.myBoosts && !areAllBoostsInChannel(modal.myBoosts, chat.id);\n\n    const {\n      boosts,\n      currentLevel,\n      hasNextLevel,\n      levelProgress,\n      remainingBoosts,\n      isMaxLevel,\n    } = getBoostProgressInfo(modal.boostStatus, true);\n\n    const hasBoost = hasMyBoost;\n\n    const left = oldLang('BoostsLevel', currentLevel);\n    const right = hasNextLevel ? oldLang('BoostsLevel', currentLevel + 1) : undefined;\n\n    const moreBoosts = oldLang('ChannelBoost.MoreBoosts', remainingBoosts);\n\n    const modalTitle = isChannel ? oldLang('BoostChannel') : oldLang('BoostGroup');\n\n    const boostsLeftToUnrestrict = (chatFullInfo?.boostsToUnrestrict || 0) - (chatFullInfo?.boostsApplied || 0);\n\n    let description: string | undefined;\n    if (isMaxLevel) {\n      description = oldLang('BoostsMaxLevelReached');\n    } else if (boostsLeftToUnrestrict > 0 && !isChatAdmin(chat)) {\n      const boostTimes = oldLang('GroupBoost.BoostToUnrestrict.Times', boostsLeftToUnrestrict);\n      description = oldLang('GroupBoost.BoostToUnrestrict', [boostTimes, chatTitle]);\n    } else {\n      description = oldLang('ChannelBoost.MoreBoostsNeeded.Text', [chatTitle, moreBoosts]);\n    }\n\n    return {\n      isStatusLoaded: true,\n      title: modalTitle,\n      leftText: left,\n      rightText: right,\n      value: boosts.toString(),\n      progress: levelProgress,\n      remainingBoosts,\n      descriptionText: description,\n      boost: firstBoost,\n      isBoosted: hasBoost,\n      canBoostMore: areBoostsInDifferentChannels && !isMaxLevel,\n    };\n  }, [chat, chatTitle, modal, oldLang, chatFullInfo, isChannel]);\n\n  const isBoostDisabled = !modal?.myBoosts?.length && isCurrentUserPremium;\n  const isReplacingBoost = boost?.chatId && boost.chatId !== modal?.chatId;\n\n  const handleApplyBoost = useLastCallback(() => {\n    closeReplaceModal();\n    applyBoost({ chatId: chat!.id, slots: [boost!.slot] });\n    requestConfetti({});\n  });\n\n  const handleProceedPremium = useLastCallback(() => {\n    openPremiumModal();\n    closePremiumDialog();\n    closeBoostModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!boost) {\n      if (!isCurrentUserPremium) {\n        openPremiumDialog();\n        return;\n      }\n\n      closeBoostModal();\n      return;\n    }\n\n    if (!canBoostMore) {\n      closeBoostModal();\n      return;\n    }\n\n    if (boost.cooldownUntil) {\n      openWaitDialog();\n      return;\n    }\n\n    if (isReplacingBoost) {\n      openReplaceModal();\n      return;\n    }\n\n    handleApplyBoost();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeBoostModal();\n  });\n\n  function renderContent() {\n    if (!isStatusLoaded) {\n      return <Loading className={styles.loading} />;\n    }\n\n    return (\n      <>\n        <PremiumProgress\n          leftText={leftText}\n          rightText={rightText}\n          progress={progress}\n          floatingBadgeText={value}\n          floatingBadgeIcon=\"boost\"\n        />\n        {isBoosted && (\n          <div className={buildClassName(styles.description, styles.bold)}>\n            {oldLang('ChannelBoost.YouBoostedChannelText', chatTitle)}\n          </div>\n        )}\n        <div className={styles.description}>\n          {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n        </div>\n        <div className=\"dialog-buttons\">\n          <Button isText className=\"confirm-dialog-button\" disabled={isBoostDisabled} onClick={handleButtonClick}>\n            {canBoostMore ? (\n              <>\n                <Icon name=\"boost\" />\n                {oldLang(isChannel ? 'ChannelBoost.BoostChannel' : 'GroupBoost.BoostGroup')}\n              </>\n            ) : oldLang('OK')}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={handleCloseClick}>\n            {oldLang('Cancel')}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      className={styles.modal}\n      contentClassName={styles.content}\n      onClose={closeBoostModal}\n    >\n      {renderContent()}\n      {isReplacingBoost && boostedChatTitle && (\n        <Modal\n          isOpen={isReplaceModalOpen}\n          className={styles.replaceModal}\n          contentClassName={styles.replaceModalContent}\n          onClose={closeReplaceModal}\n        >\n          <div className={styles.avatarContainer}>\n            <div className={styles.boostedWrapper}>\n              <Avatar peer={prevBoostedChat} size=\"large\" />\n              <Icon name=\"boostcircle\" className={styles.boostedMark} />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar peer={chat} size=\"large\" />\n          </div>\n          <div>\n            {renderText(\n              oldLang('ChannelBoost.ReplaceBoost', [boostedChatTitle, chatTitle]), ['simple_markdown', 'emoji'],\n            )}\n          </div>\n          <div className=\"dialog-buttons\">\n            <Button isText className=\"confirm-dialog-button\" onClick={handleApplyBoost}>\n              {oldLang('Replace')}\n            </Button>\n            <Button isText className=\"confirm-dialog-button\" onClick={closeReplaceModal}>\n              {oldLang('Cancel')}\n            </Button>\n          </div>\n        </Modal>\n      )}\n      {Boolean(boost?.cooldownUntil) && (\n        <ConfirmDialog\n          isOpen={isWaitDialogOpen}\n          isOnlyConfirm\n          confirmLabel={oldLang('OK')}\n          title={oldLang('ChannelBoost.Error.BoostTooOftenTitle')}\n          onClose={closeWaitDialog}\n          confirmHandler={closeWaitDialog}\n        >\n          {renderText(\n            oldLang(\n              'ChannelBoost.Error.BoostTooOftenText',\n              formatShortDuration(lang, boost.cooldownUntil - getServerTime()),\n            ),\n            ['simple_markdown', 'emoji'],\n          )}\n        </ConfirmDialog>\n      )}\n      {!isCurrentUserPremium && (\n        <ConfirmDialog\n          isOpen={isPremiumDialogOpen}\n          confirmLabel={oldLang('Common.Yes')}\n          title={oldLang('PremiumNeeded')}\n          onClose={closePremiumDialog}\n          confirmHandler={handleProceedPremium}\n        >\n          {renderText(oldLang('PremiumNeededForBoosting'), ['simple_markdown', 'emoji'])}\n        </ConfirmDialog>\n      )}\n    </Modal>\n  );\n};\n\nfunction getFirstAvailableBoost(myBoosts: ApiMyBoost[], chatId?: string) {\n  return myBoosts.find((boost) => !boost.chatId)\n    || myBoosts.filter((b) => chatId && b.chatId !== chatId)\n      .sort((a, b) => a.date - b.date)[0];\n}\n\nfunction areAllBoostsInChannel(myBoosts: ApiMyBoost[], chatId: string) {\n  return myBoosts.every((boost) => boost.chatId === chatId);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal?.chatId);\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, modal.chatId);\n    const boostedChat = firstBoost?.chatId ? selectChat(global, firstBoost?.chatId) : undefined;\n\n    return {\n      chat,\n      chatFullInfo,\n      prevBoostedChat: boostedChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(BoostModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"clickable\":\"IzcASdzD\",\"centered\":\"xVLGjLub\",\"logo\":\"Mtx4SWww\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { selectChatMessage, selectSender } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport TableInfoModal, { type TableData } from '../common/TableInfoModal';\n\nimport styles from './GiftCodeModal.module.scss';\n\nimport PremiumLogo from '../../../assets/premium/PremiumStar.svg';\n\nexport type OwnProps = {\n  modal: TabState['giftCodeModal'];\n};\n\nexport type StateProps = {\n  currentUserId?: string;\n  messageSender?: ApiPeer;\n};\n\nconst GIFTCODE_PATH = 'giftcode';\n\nconst GiftCodeModal = ({\n  currentUserId,\n  modal,\n  messageSender,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, applyGiftCode, focusMessage,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const canUse = (!modal?.info.toId || modal?.info.toId === currentUserId) && !modal?.info.usedAt;\n\n  const handleOpenGiveaway = useLastCallback(() => {\n    if (!modal || !modal.info.giveawayMessageId) return;\n    focusMessage({\n      chatId: modal.info.fromId!,\n      messageId: modal.info.giveawayMessageId,\n    });\n    closeGiftCodeModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (canUse) {\n      applyGiftCode({ slug: modal!.slug });\n      return;\n    }\n    closeGiftCodeModal();\n  });\n\n  const modalData = useMemo(() => {\n    if (!modal) return undefined;\n    const { slug, info } = modal;\n\n    const fromId = info.fromId || messageSender?.id;\n\n    const header = (\n      <>\n        <img src={PremiumLogo} alt=\"\" className={styles.logo} />\n        <p className={styles.centered}>{renderText(lang('lng_gift_link_about'), ['simple_markdown'])}</p>\n        <LinkField title=\"BoostingGiftLink\" link={`${TME_LINK_PREFIX}/${GIFTCODE_PATH}/${slug}`} />\n      </>\n    );\n\n    const tableData: TableData = [\n      [lang('BoostingFrom'), fromId ? { chatId: fromId } : lang('BoostingNoRecipient')],\n      [lang('BoostingTo'), info.toId ? { chatId: info.toId } : lang('BoostingNoRecipient')],\n      [lang('BoostingGift'), lang('BoostingTelegramPremiumFor', lang('Months', info.months, 'i'))],\n    ];\n    if (info.isFromGiveaway) {\n      tableData.push([\n        lang('BoostingReason'),\n        (\n          <span\n            className={buildClassName(info.giveawayMessageId && styles.clickable)}\n            onClick={handleOpenGiveaway}\n          >\n            {info.isFromGiveaway && !info.toId\n              ? lang('BoostingIncompleteGiveaway')\n              : lang('BoostingGiveaway')}\n          </span>\n        ),\n      ]);\n    }\n    tableData.push([\n      lang('BoostingDate'),\n      formatDateTimeToString(info.date * 1000, lang.code, true),\n    ]);\n\n    const footer = (\n      <span className={styles.centered}>\n        {renderText(\n          info.usedAt ? lang('BoostingUsedLinkDate', formatDateTimeToString(info.usedAt * 1000, lang.code, true))\n            : lang('BoostingSendLinkToAnyone'),\n          ['simple_markdown'],\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [lang, messageSender?.id, modal]);\n\n  if (!modalData) return undefined;\n\n  return (\n    <TableInfoModal\n      isOpen={isOpen}\n      title={lang('lng_gift_link_title')}\n      tableData={modalData.tableData}\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={canUse ? lang('BoostingUseLink') : lang('Close')}\n      onButtonClick={handleButtonClick}\n      onClose={closeGiftCodeModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { message } = modal || {};\n    const chatMessage = message && selectChatMessage(global, message.chatId, message.messageId);\n    const sender = chatMessage && selectSender(global, chatMessage);\n\n    return {\n      currentUserId: global.currentUserId,\n      messageSender: sender,\n    };\n  },\n)(GiftCodeModal));\n","export function getClosestEntry(arr: number[], value: number): number {\n  return arr.reduce((prev, curr) => {\n    return Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev;\n  });\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"X6K5oA8U\"};","import { memo, useEffect, useMemo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup.tsx';\n\nimport styles from './DeleteAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['deleteAccountModal'];\n};\n\nexport type StateProps = {\n  selfDestructAccountDays?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst DeleteAccountModal = ({\n  modal,\n  selfDestructAccountDays,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, closeDeleteAccountModal, setAccountTTL,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const [selectedOption, setSelectedOption] = useState<string>();\n\n  const optionToDays = useLastCallback((value: string): number => {\n    return Number(value) * DAYS_PER_MONTH;\n  });\n\n  const initialSelectedOption = useMemo(() => {\n    if (!selfDestructAccountDays) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, selfDestructAccountDays / DAYS_PER_MONTH).toString();\n  }, [selfDestructAccountDays]);\n\n  useEffect(() => {\n    if (initialSelectedOption) {\n      setSelectedOption(initialSelectedOption);\n    }\n  }, [initialSelectedOption]);\n\n  const options: { value: string; label: string }[] = useMemo(() => {\n    return ACCOUNT_TTL_OPTIONS.map((months) => ({\n      value: String(months),\n      label: lang('Months', { count: months }, { pluralValue: 1 }),\n    }));\n  }, [lang]);\n\n  const handleChange = useLastCallback((value: string) => {\n    setSelectedOption(value);\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!selectedOption) return;\n    setAccountTTL({ days: optionToDays(selectedOption) });\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteAccountModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('SelfDestructTitle')}\n      onClose={closeGiftCodeModal}\n      className={styles.root}\n    >\n      <p>{lang('SelfDestructSessionsDescription')}</p>\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedOption}\n        onChange={handleChange}\n        withIcon\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n        >\n          {lang('Save')}\n        </Button>\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { selfDestructAccountDays } = modal || {};\n\n    return {\n      selfDestructAccountDays,\n    };\n  },\n)(DeleteAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OviJR58x\",\"content\":\"BlpqzGYt\",\"header\":\"b9RUzfpF\",\"iconWrapper\":\"l1X5kBUM\",\"icon\":\"qOoRnv_Y\",\"mainText\":\"s2SOQSml\",\"description\":\"wiKBjcl2\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { VERIFY_AGE_MIN_DEFAULT } from '../../../config';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './AgeVerificationModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['isAgeVerificationModalOpen'];\n};\n\ntype StateProps = {\n  verifyAgeBotUsername?: string;\n  verifyAgeMin: number;\n};\n\nconst AgeVerificationModal: FC<OwnProps & StateProps> = ({\n  modal,\n  verifyAgeBotUsername,\n  verifyAgeMin,\n}) => {\n  const { closeAgeVerificationModal, openChatByUsername } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const handleVerifyAge = useLastCallback(() => {\n    if (verifyAgeBotUsername) {\n      openChatByUsername({\n        shouldStartMainApp: true,\n        username: verifyAgeBotUsername,\n      });\n    }\n    closeAgeVerificationModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeAgeVerificationModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className={styles.root}\n    >\n      <div className={styles.content}>\n        <div className={styles.header}>\n          <div className={styles.iconWrapper}>\n            <Icon name=\"user\" className={styles.icon} />\n          </div>\n        </div>\n        <h2 className={styles.title}>\n          {lang('TitleAgeVerificationModal')}\n        </h2>\n        <p className={styles.mainText}>\n          {lang('TextAgeVerificationModal', { count: verifyAgeMin }, {\n            withMarkdown: true,\n            withNodes: true,\n            pluralValue: verifyAgeMin,\n          })}\n        </p>\n        <p className={styles.description}>\n          {lang('DescriptionAgeVerificationModal')}\n        </p>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          onClick={handleVerifyAge}\n        >\n          {lang('ButtonAgeVerification')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const appConfig = global.appConfig;\n  const verifyAgeBotUsername = appConfig?.verifyAgeBotUsername;\n  const verifyAgeMin = appConfig?.verifyAgeMin || VERIFY_AGE_MIN_DEFAULT;\n\n  return {\n    verifyAgeBotUsername,\n    verifyAgeMin,\n  };\n})(AgeVerificationModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"dl10exNi\",\"picker-wrapper\":\"gxWY5c6x\",\"pickerWrapper\":\"gxWY5c6x\",\"picker-header\":\"h8N7eyob\",\"pickerHeader\":\"h8N7eyob\",\"picker-header-info\":\"Rth2Qu07\",\"pickerHeaderInfo\":\"Rth2Qu07\",\"selection-toggle\":\"B6eAugx8\",\"selectionToggle\":\"B6eAugx8\",\"foldersWrapper\":\"mwcvgD2S\",\"folders\":\"LKavx8ww\",\"folder\":\"qglLx5Dn\",\"button-text\":\"bgaRuEMs\",\"buttonText\":\"bgaRuEMs\",\"button-badge\":\"rTe14Z22\",\"buttonBadge\":\"rTe14Z22\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const isNew = invite.alreadyPeerIds.length === 0;\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = isNew ? lang('FolderLinkSubtitleNew')\n    : newChatsCount ? lang('FolderLinkSubtitleAdd', {\n      chats: lang('FolderLinkSubtitleAddCount', { count: newChatsCount }, { pluralValue: newChatsCount }),\n      title: renderTextWithEntities({\n        text: folder.title.text,\n        entities: folder.title.entities,\n        noCustomEmojiPlayback: folder.noTitleAnimations,\n      }),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    }) : lang('FolderLinkSubtitleAlready');\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {oldLang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length\n                  ? oldLang('DeselectAll') : oldLang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.alreadyPeerIds}\n          lockedSelectedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && oldLang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {oldLang('FolderLinkButtonJoinPlural', selectedPeerIds.length, 'i')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>([]);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </div>\n        </>\n      )}\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {lang('FolderLinkSubtitleNew')}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? oldLang('DeselectAll') : oldLang('SelectAll')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.peerIds}\n          lockedSelectedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        size=\"smaller\"\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkAddFolder')}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport ChatlistNew from './ChatlistNew';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  modal?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  modal,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(modal);\n  const renderingInfo = usePreviousDeprecated(modal) || modal;\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) {\n      return renderTextWithEntities({\n        text: renderingFolder.title.text,\n        entities: renderingFolder.title.entities,\n        noCustomEmojiPlayback: renderingFolder.noTitleAnimations,\n      });\n    }\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) {\n      return renderTextWithEntities({\n        text: renderingInfo.invite.title.text,\n        entities: renderingInfo.invite.title.entities,\n        noCustomEmojiPlayback: renderingInfo.invite.noTitleAnimations,\n      });\n    }\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: TeactNode) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab\n            className={styles.folder}\n            isActive\n            badgeCount={folderTabNumber}\n            isBadgeActive\n            title={folderTitle}\n          />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { invite, removal } = modal || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MZ0RCecx\",\"title\":\"ar8XeydN\",\"participantCount\":\"un00TXYY\",\"participants\":\"YvkZ6c2D\",\"participant\":\"DHJSBDeE\",\"buttons\":\"KFtrPtNr\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport PeerBadge from '../../common/PeerBadge';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './ChatInviteModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['chatInviteModal'];\n};\n\nconst ChatInviteModal = ({ modal }: OwnProps) => {\n  const { acceptChatInvite, closeChatInviteModal, showNotification } = getActions();\n  const participantsRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const prevModal = usePrevious(modal);\n  const { hash, inviteInfo } = modal || prevModal || {};\n  const {\n    about, isBroadcast, participantIds, participantsCount, photo, isRequestNeeded,\n  } = inviteInfo || {};\n\n  const handleClose = useLastCallback(() => {\n    closeChatInviteModal();\n  });\n\n  const handleAccept = useLastCallback(() => {\n    acceptChatInvite({ hash: hash! });\n\n    if (isRequestNeeded) {\n      showNotification({\n        message: isBroadcast ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n\n    handleClose();\n  });\n\n  const acceptLangKey = isBroadcast ? 'ProfileJoinChannel' : 'JoinGroup';\n  const requestToJoinLangKey = isBroadcast ? 'MemberRequests.RequestToJoinChannel'\n    : 'MemberRequests.RequestToJoinGroup';\n\n  const customPeer = useMemo(() => {\n    if (!inviteInfo) return undefined;\n\n    return getCustomPeerFromInvite(inviteInfo);\n  }, [inviteInfo]);\n\n  const participants = useMemo(() => {\n    if (!participantIds) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n    return participantIds.map((id) => selectUser(global, id)).filter(Boolean);\n  }, [participantIds]);\n\n  useHorizontalScroll(participantsRef, !modal || !participants);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      contentClassName={styles.content}\n      isSlim\n      onClose={handleClose}\n      onEnter={handleAccept}\n    >\n      {customPeer && <Avatar size=\"jumbo\" photo={photo} peer={customPeer} withVideo />}\n      {customPeer && <FullNameTitle className={styles.title} peer={customPeer} />}\n      {about && <p className={styles.about}>{about}</p>}\n      <p className={styles.participantCount}>\n        {lang(isBroadcast ? 'Subscribers' : 'Members', participantsCount, 'i')}\n      </p>\n      {participants && (\n        <div ref={participantsRef} className={buildClassName(styles.participants, 'no-scrollbar')}>\n          {participants.map((participant) => (\n            <PeerBadge className={styles.participant} peer={participant} text={getUserFullName(participant)} />\n          ))}\n        </div>\n      )}\n      <div className={buildClassName('dialog-buttons', styles.buttons)}>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleAccept}>\n          {lang(isRequestNeeded ? requestToJoinLangKey : acceptLangKey)}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ChatInviteModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LFkgLoAk\",\"title\":\"La4sUYaq\",\"description\":\"Bn5kz5br\",\"moreButton\":\"JdN5pGTw\",\"secondary\":\"hbsLlXSH\",\"content\":\"TZE15Pt_\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { TableAboutData } from '../common/TableAboutModal';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport TableAboutModal from '../common/TableAboutModal';\n\nimport styles from './AboutAdsModal.module.scss';\n\nexport type OwnProps = {\n\n  modal: TabState['aboutAdsModal'];\n};\n\ntype StateProps = {\n  minLevelToRestrictAds?: number;\n};\n\nconst AboutAdsModal = ({ modal, minLevelToRestrictAds }: OwnProps & StateProps) => {\n  const { closeAboutAdsModal } = getActions();\n\n  const moreMenuRef = useRef<HTMLButtonElement>();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const {\n    canReport, randomId, additionalInfo, sponsorInfo,\n  } = renderingModal || {};\n  const isMonetizationSharing = canReport;\n\n  const renderingIsNewDesign = useCurrentOrPrev(isMonetizationSharing);\n\n  const oldLang = useOldLang();\n\n  const regularAdContent = useMemo(() => {\n    return (\n      <>\n        <h3>{oldLang('SponsoredMessageInfoScreen.Title')}</h3>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n        <p>\n          <SafeLink\n            url={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n            text={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n          />\n        </p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      </>\n    );\n  }, [oldLang]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(moreMenuRef, !renderingIsNewDesign);\n\n  const handleClose = useLastCallback(() => {\n    closeAboutAdsModal();\n    handleContextMenuClose();\n    handleContextMenuHide();\n  });\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <>\n        <h3 className={styles.title}>{oldLang('AboutRevenueSharingAds')}</h3>\n        <p className={buildClassName(styles.description, styles.secondary)}>\n          {oldLang('RevenueSharingAdsAlertSubtitle')}\n        </p>\n        <Button\n          ref={moreMenuRef}\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className={styles.moreButton}\n          onClick={handleContextMenu}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      </>\n    );\n\n    const listItemData = [\n      ['lock', oldLang('RevenueSharingAdsInfo1Title'),\n        renderText(oldLang('RevenueSharingAdsInfo1Subtitle'), ['simple_markdown'])],\n      ['revenue-split', oldLang('RevenueSharingAdsInfo2Title'),\n        renderText(oldLang('RevenueSharingAdsInfo2Subtitle'), ['simple_markdown'])],\n      ['nochannel', oldLang('RevenueSharingAdsInfo3Title'),\n        renderText(oldLang('RevenueSharingAdsInfo3Subtitle', minLevelToRestrictAds), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{renderText(oldLang('RevenueSharingAdsInfo4Title'), ['simple_markdown'])}</h3>\n        <p className={styles.description}>\n          {renderText(oldLang('RevenueSharingAdsInfo4Subtitle2', ''), ['simple_markdown'])}\n          <SafeLink\n            url={oldLang('PromoteUrl')}\n            text={oldLang('LearnMoreArrow')}\n          />\n        </p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, handleContextMenu, minLevelToRestrictAds]);\n\n  if (renderingIsNewDesign) {\n    return (\n      <>\n        <TableAboutModal\n          isOpen={isOpen}\n          listItemData={modalData?.listItemData}\n          headerIconName=\"channel\"\n          withSeparator\n          header={modalData?.header}\n          footer={modalData?.footer}\n          buttonText={oldLang('RevenueSharingAdsUnderstood')}\n          onClose={handleClose}\n        />\n        {contextMenuAnchor && randomId && (\n          <SponsoredMessageContextMenuContainer\n            isOpen={isContextMenuOpen}\n            anchor={contextMenuAnchor}\n            triggerRef={moreMenuRef}\n            randomId={randomId}\n            additionalInfo={additionalInfo}\n            canReport={canReport}\n            sponsorInfo={sponsorInfo}\n            shouldSkipAbout\n            onItemClick={handleClose}\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      {regularAdContent}\n      <Button\n        size=\"smaller\"\n        onClick={handleClose}\n      >\n        {oldLang('RevenueSharingAdsUnderstood')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const minLevelToRestrictAds = global.appConfig?.channelRestrictAdsLevelMin;\n\n    return {\n      minLevelToRestrictAds,\n    };\n  },\n)(AboutAdsModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"t9iZUzOj\",\"description\":\"mjveZmdr\",\"toncoin\":\"ATkOSqJ7\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\n\nimport type { TableAboutData } from '../modals/common/TableAboutModal';\n\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TableAboutModal from '../modals/common/TableAboutModal';\nimport Icon from './icons/Icon';\nimport SafeLink from './SafeLink';\n\nimport styles from './AboutMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\nconst AboutMonetizationModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const blockchainText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnLearnCoinAbout',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationInfoTONLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const monetizationTitle = useMemo(() => {\n    return lang(\n      'MonetizationInfoTONTitle',\n      undefined,\n      {\n        withNodes: true,\n        specialReplacement: { '💎': <Icon className={styles.toncoin} name=\"toncoin\" /> },\n      },\n    );\n  }, [lang]);\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <h3 className={styles.title}>{oldLang('lng_channel_earn_learn_title')}</h3>\n    );\n\n    const listItemData = [\n      ['channel', oldLang('lng_channel_earn_learn_in_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_in_about'), ['simple_markdown'])],\n      ['revenue-split', oldLang('lng_channel_earn_learn_split_subtitle'),\n        renderText(oldLang('Monetization.Intro.Split.Text'), ['simple_markdown'])],\n      ['cash-circle', oldLang('lng_channel_earn_learn_out_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_out_about'), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{monetizationTitle}</h3>\n        <p className={styles.description}>{blockchainText}</p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, monetizationTitle, blockchainText]);\n\n  if (!modalData) {\n    return undefined;\n  }\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      listItemData={modalData.listItemData}\n      headerIconName=\"cash-circle\"\n      withSeparator\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={oldLang('RevenueSharingAdsUnderstood')}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(AboutMonetizationModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WqeWhMAS\",\"content\":\"oofoCYlu\"};","import {\n  memo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Modal from '../ui/Modal';\nimport PasswordForm from './PasswordForm';\n\nimport styles from './VerificationMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['monetizationVerificationModal'];\n};\n\ntype StateProps = {\n  passwordHint?: string;\n};\n\nconst VerificationMonetizationModal = ({\n  modal,\n  passwordHint,\n}: OwnProps & StateProps) => {\n  const {\n    closeMonetizationVerificationModal, clearMonetizationVerificationError, processMonetizationRevenueWithdrawalUrl,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useLastCallback((password: string) => {\n    if (!renderingModal) return;\n    processMonetizationRevenueWithdrawalUrl({\n      peerId: renderingModal.chatId,\n      currentPassword: password,\n    });\n  });\n\n  const handleClearError = useLastCallback(() => {\n    clearMonetizationVerificationError();\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeMonetizationVerificationModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('CheckPasswordTitle')}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      <div className={buildClassName(styles.content, 'settings-content password-form custom-scroll')}>\n        <div className=\"settings-item pt-0\">\n          <PasswordForm\n            shouldShowSubmit\n            placeholder={lang('CheckPasswordPlaceholder')}\n            error={renderingModal?.errorKey && lang.withRegular(renderingModal.errorKey)}\n            description={lang('CheckPasswordDescription')}\n            clearError={handleClearError}\n            isLoading={renderingModal?.isLoading}\n            hint={passwordHint}\n            isPasswordVisible={shouldShowPassword}\n            shouldResetValue={isOpen}\n            onChangePasswordVisibility={setShouldShowPassword}\n            onSubmit={handleSubmit}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      passwordHint,\n    };\n  },\n)(VerificationMonetizationModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MKdSUg2P\",\"chatItem\":\"qEIwBtp0\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './EmojiStatusAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['emojiStatusAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n  stickerSet?: ApiStickerSet;\n  isPremium?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nconst INTERVAL = 3200;\n\nconst EmojiStatusAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n  stickerSet,\n  isPremium,\n  isAccountFrozen,\n}) => {\n  const {\n    closeEmojiStatusAccessModal,\n    toggleUserEmojiStatusPermission,\n    sendWebAppEvent,\n    openPremiumModal,\n    loadDefaultStatusIcons,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [currentStatusIndex, setCurrentStatusIndex] = useState<number>(0);\n\n  useEffect(() => {\n    if (isOpen && !stickerSet?.stickers && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n    }\n  }, [isOpen, stickerSet, isAccountFrozen]);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !stickerSet?.stickers) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: stickerSet.stickers[currentStatusIndex].id,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, stickerSet, currentStatusIndex]);\n\n  const totalCount = stickerSet?.stickers?.length;\n  useInterval(\n    () => {\n      if (!totalCount) return;\n      setCurrentStatusIndex((prevIndex) => (prevIndex + 1) % totalCount);\n    },\n    totalCount ? INTERVAL : undefined,\n  );\n\n  const renderPickerItem = useLastCallback(() => {\n    return (\n      <PeerChip\n        withEmojiStatus\n        className={styles.chatItem}\n        itemClassName={styles.itemName}\n        mockPeer={mockPeerWithStatus}\n      />\n    );\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      if (isPremium) {\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'allowed',\n            },\n          },\n        });\n        toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: true, isBotAccessEmojiGranted: true });\n      } else {\n        openPremiumModal();\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'cancelled',\n            },\n          },\n        });\n      }\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'emoji_status_access_requested',\n          eventData: {\n            status: 'cancelled',\n          },\n        },\n      });\n    }\n    if (isPremium) {\n      toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: false });\n    }\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('EmojiStatusAccessText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      contentClassName={styles.content}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderPickerItem()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const isPremium = selectIsCurrentUserPremium(global);\n    const stickerSet = global.defaultStatusIconsId ? selectStickerSet(global, global.defaultStatusIconsId) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUser,\n      stickerSet,\n      isPremium,\n      isAccountFrozen,\n    };\n  },\n)(EmojiStatusAccessModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { getGeolocationStatus } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './LocationAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['locationAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst LocationAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n}) => {\n  const {\n    closeLocationAccessModal, toggleUserLocationPermission, sendWebAppEvent,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const confirmHandler = useLastCallback(async () => {\n    const geolocationData = await getGeolocationStatus();\n    const { geolocation } = geolocationData;\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: true,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: true,\n            latitude: geolocation?.latitude,\n            longitude: geolocation?.longitude,\n            altitude: geolocation?.altitude,\n            course: geolocation?.heading,\n            speed: geolocation?.speed,\n            horizontal_accuracy: geolocation?.accuracy,\n            vertical_accuracy: geolocation?.accuracy,\n          },\n        },\n      });\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: false,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: false,\n          },\n        },\n      });\n    }\n  });\n\n  const renderInfo = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return (\n      <div className={styles.avatars}>\n        <Avatar\n          size=\"large\"\n          peer={currentUser}\n        />\n        <Icon name=\"next\" className={styles.arrow} />\n        <Avatar\n          size=\"large\"\n          peer={modal.bot}\n        />\n      </div>\n    );\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('LocationPermissionText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderInfo()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n\n    return {\n      currentUser,\n    };\n  },\n)(LocationAccessModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatars\":\"CGPoDaLo\",\"arrow\":\"pzERgD5x\"};","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"qJDgUtjV\",\"root\":\"njPBcVYr\",\"modalTitle\":\"ZAdG13Ah\",\"optionText\":\"oWujoaSC\",\"option\":\"aFbjDzNo\",\"optionButton\":\"VbE0HzDs\",\"sectionTitle\":\"jrA2dOiw\",\"description\":\"k71Zrc_P\",\"title\":\"mMmY6YR4\",\"titleMultiline\":\"lVVyV0py\",\"subtitle\":\"gSkAFc4u\",\"transition\":\"HjsGIG6e\"};","import {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportAdModal.module.scss';\n\nconst ADDED_PADDING = 56;\n\nexport type OwnProps = {\n  modal: TabState['reportAdModal'];\n};\n\nconst ReportAdModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportSponsored, closeReportAdModal, openPreviousReportAdModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const { chatId, randomId } = modal!;\n    reportSponsored({ peerId: chatId, randomId, option });\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    if (!renderingDepth) {\n      closeReportAdModal();\n      return;\n    }\n\n    openPreviousReportAdModal();\n  });\n\n  const bottomText = useMemo(() => {\n    if (!modal) return undefined;\n    const template = lang('lng_report_sponsored_reported_learn');\n    const parts = template.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        text={lang('lng_report_sponsored_reported_link')}\n        url={lang('ReportAd.Help_URL')}\n      />,\n      parts[1],\n    ];\n  }, [lang, modal]);\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(renderingDepth ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <Icon name={renderingDepth ? 'arrow-left' : 'close'} />\n        </Button>\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={styles.title}>{lang('ReportAd')}</h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.subtitle]);\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      className={styles.root}\n      header={header}\n      onClose={closeReportAdModal}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3>\n          {renderingSection?.options.map((option) => (\n            <ListItem\n              narrow\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n        </div>\n        <p className={styles.description}>{bottomText}</p>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAdModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"kq9LwNTZ\",\"root\":\"E1bGWeON\",\"content\":\"tNysQgHL\",\"modalTitle\":\"Lj_ezEWU\",\"header\":\"AlMDkK7c\",\"optionText\":\"FU8m6NUU\",\"option\":\"RoxwMzvA\",\"optionButton\":\"Z6skYdvb\",\"sectionTitle\":\"GSfUuTet\",\"description\":\"zwfjNhF9\",\"title\":\"QawchdxB\",\"hasDepth\":\"CV7kzv9H\",\"titleMultiline\":\"OYFbu8fQ\",\"subtitle\":\"OUFckTb7\",\"transition\":\"n2VxPirU\",\"block\":\"KpptZ3Mk\",\"optionInfo\":\"yc3szGcx\",\"reportIcon\":\"kO8JC4gK\"};","import type { ChangeEvent } from 'react';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport TextArea from '../../ui/TextArea';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportModal.module.scss';\n\nconst MAX_DESCRIPTION = 512;\nconst ADDED_PADDING = 20;\n\nexport type OwnProps = {\n  modal: TabState['reportModal'];\n};\n\nconst ReportModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportMessages, reportStory, closeReportModal, openPreviousReportModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const [text, setText] = useState('');\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    if (!messageIds) return;\n    switch (subject) {\n      case 'message':\n        reportMessages({ chatId: chatId!, messageIds, option });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds[0], peerId: peerId!, option,\n        });\n        break;\n    }\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal?.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    openPreviousReportModal();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeReportModal();\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        {renderingDepth ? (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Back')}\n            onClick={handleBackClick}\n          >\n            <Icon name=\"arrow-left\" />\n          </Button>\n        ) : (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={handleCloseClick}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={buildClassName(styles.title, renderingDepth && styles.hasDepth)}>\n            {renderingSection?.options\n              ? lang(modal?.subject === 'story' ? 'ReportStory' : 'Report') : renderingSection?.title}\n          </h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.options, renderingSection?.subtitle, renderingSection?.title]);\n\n  const handleTextChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n  });\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  const closeReportMessageModalHandler = useLastCallback(() => {\n    setText('');\n    closeReportModal();\n  });\n\n  const sendMessageReportHandler = useLastCallback(() => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    switch (subject) {\n      case 'message':\n        reportMessages({\n          chatId: chatId!, messageIds, option: renderingSection?.option, description: text,\n        });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds?.[0], peerId: peerId!, option: renderingSection?.option, description: text,\n        });\n        break;\n    }\n    closeReportMessageModalHandler();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      header={header}\n      onClose={closeReportMessageModalHandler}\n      contentClassName={styles.content}\n      className={buildClassName(styles.root, modal?.subject === 'story' && 'component-theme-dark')}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          {renderingSection?.options\n            ? <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3> : undefined}\n          {renderingSection?.options?.map((option) => (\n            <ListItem\n              narrow\n              nonInteractive\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n          {renderingSection?.option ? (\n            <div className={styles.block}>\n              <AnimatedIconWithPreview\n                tgsUrl={LOCAL_TGS_URLS.Report}\n                size={100}\n                className={styles.reportIcon}\n                nonInteractive\n                forceAlways\n                noLoop={false}\n              />\n              <TextArea\n                id=\"option\"\n                className={styles.optionInfo}\n                label={renderingSection.isOptional ? lang('Report2CommentOptional') : lang('Report2Comment')}\n                onChange={handleTextChange}\n                value={text}\n                maxLength={MAX_DESCRIPTION}\n                maxLengthIndicator={(MAX_DESCRIPTION - text.length).toString()}\n                noReplaceNewlines\n              />\n              <Button\n                size=\"smaller\"\n                onClick={sendMessageReportHandler}\n                disabled={!renderingSection.isOptional ? !text.length : undefined}\n              >\n                {lang('ReportSend')}\n              </Button>\n            </div>\n          ) : undefined}\n        </div>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Rzj2LMLf\",\"content\":\"Ve4u2KVI\",\"modalTitle\":\"E42tgAwD\",\"container\":\"pNSCKAVN\",\"header\":\"P1fPh6h8\",\"actionMessageView\":\"McJgXCtB\",\"info\":\"xWnXsG7q\",\"background\":\"_6w75ldP\",\"customBgImage\":\"CZkpv8n0\",\"customBgColor\":\"VJAYrDF_\",\"withTransition\":\"lElCwweL\",\"blurred\":\"m8xzfVvU\",\"withRightColumn\":\"rJCyBVMB\"};","import {\n  type FC,\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getMockPreparedMessageFromResult, getUserFullName } from '../../../global/helpers';\nimport { selectTheme, selectThemeValues, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Message from '../../middle/message/Message';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './PreparedMessageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['preparedMessageModal'];\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  bot?: ApiUser;\n};\n\nconst PreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  customBackground,\n  backgroundColor,\n  bot,\n}) => {\n  const {\n    closePreparedInlineMessageModal, sendWebAppEvent, openSharePreparedMessageModal,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const { webAppKey, message, botId } = modal || {};\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const handleOpenClick = useLastCallback(() => {\n    if (webAppKey && botId && message) {\n      openSharePreparedMessageModal({\n        webAppKey,\n        message,\n      });\n      closePreparedInlineMessageModal();\n    }\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closePreparedInlineMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.header}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang('Close')}\n          onClick={handleCloseClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <h3 className={buildClassName('modal-title', styles.modalTitle)}>\n          {lang('BotShareMessage')}\n        </h3>\n      </div>\n    );\n  }, [lang, modal]);\n\n  const localMessage = useMemo(() => {\n    if (!botId || !message || !webAppKey) return undefined;\n    return getMockPreparedMessageFromResult(botId, message);\n  }, [botId, message, webAppKey]);\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  return (\n    <Modal\n      dialogRef={containerRef}\n      isOpen={isOpen}\n      header={header}\n      onClose={handleCloseClick}\n      className={styles.root}\n      contentClassName={styles.content}\n    >\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        {localMessage && (\n          <Message\n            key={botId}\n            message={localMessage}\n            threadId={MAIN_THREAD_ID}\n            messageListType=\"thread\"\n            noComments\n            noReplies\n            appearanceOrder={0}\n            isJustAdded={false}\n            isFirstInGroup\n            isLastInGroup\n            isLastInList={false}\n            isFirstInDocumentGroup={false}\n            isLastInDocumentGroup={false}\n          />\n        )}\n      </div>\n      <div className={styles.container}>\n        <p className={styles.info}>\n          {lang('WebAppShareMessageInfo', { user: getUserFullName(bot) })}\n        </p>\n        <Button\n          size=\"smaller\"\n          onClick={handleOpenClick}\n        >\n          {lang('BotShareMessageShare')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }) => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n    } = selectThemeValues(global, theme) || {};\n    const bot = modal ? selectUser(global, modal?.botId) : undefined;\n\n    return {\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      bot,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(PreparedMessageModal));\n","import {\n  type FC,\n  memo, useEffect,\n} from '../../../lib/teact/teact';\nimport {\n  getActions, getGlobal, withGlobal,\n} from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectPeer, selectTabState,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePaidMessageConfirmation from '../../middle/composer/hooks/usePaidMessageConfirmation';\n\nimport PaymentMessageConfirmDialog from '../../common/PaymentMessageConfirmDialog';\nimport RecipientPicker from '../../common/RecipientPicker';\n\nexport type OwnProps = {\n  modal: TabState['sharePreparedMessageModal'];\n};\n\ntype StateProps = {\n  isPaymentMessageConfirmDialogOpen: boolean;\n  starsBalance: number;\n  isStarsBalanceModalOpen: boolean;\n};\n\nexport type SendParams = {\n  peerName?: string;\n  starsForSendMessage: number;\n};\n\nconst SharePreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal, isPaymentMessageConfirmDialogOpen, isStarsBalanceModalOpen, starsBalance,\n}) => {\n  const {\n    closeSharePreparedMessageModal,\n    sendInlineBotResult,\n    sendWebAppEvent,\n    showNotification,\n    updateSharePreparedMessageModalSendArgs,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const {\n    message, filter, webAppKey, pendingSendArgs,\n  } = modal || {};\n\n  const {\n    starsForSendMessage,\n  } = pendingSendArgs || {};\n\n  const {\n    closeConfirmDialog: closeConfirmModalPayForMessage,\n    dialogHandler: paymentMessageConfirmDialogHandler,\n    shouldAutoApprove: shouldPaidMessageAutoApprove,\n    setAutoApprove: setShouldPaidMessageAutoApprove,\n    handleWithConfirmation: handleActionWithPaymentConfirmation,\n  } = usePaidMessageConfirmation(starsForSendMessage || 0, isStarsBalanceModalOpen, starsBalance);\n\n  const handleClose = useLastCallback(() => {\n    closeSharePreparedMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const handleSend = useLastCallback((id: string, threadId?: ThreadId) => {\n    if (message && webAppKey) {\n      const global = getGlobal();\n      const peer = selectPeer(global, id);\n      sendInlineBotResult({\n        chatId: id,\n        threadId: threadId || MAIN_THREAD_ID,\n        id: message.result.id,\n        queryId: message.result.queryId,\n      });\n      if (!starsForSendMessage) {\n        showNotification({\n          message: lang('BotSharedToOne', getPeerTitle(lang, peer!)),\n        });\n      }\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_sent',\n        },\n      });\n      closeSharePreparedMessageModal();\n      updateSharePreparedMessageModalSendArgs({ args: undefined });\n    }\n  });\n\n  const handleSelectRecipient = useLastCallback((id: string, threadId?: ThreadId) => {\n    updateSharePreparedMessageModalSendArgs({ args: { peerId: id, threadId } });\n  });\n\n  const handleSendWithPaymentConfirmation = useLastCallback(() => {\n    if (pendingSendArgs) {\n      handleActionWithPaymentConfirmation(handleSend, pendingSendArgs.peerId, pendingSendArgs.threadId);\n    }\n  });\n\n  const handleClosePaymentMessageConfirmDialog = useLastCallback(() => {\n    closeConfirmModalPayForMessage();\n    updateSharePreparedMessageModalSendArgs({ args: undefined });\n  });\n\n  useEffect(() => {\n    if (pendingSendArgs) {\n      handleSendWithPaymentConfirmation();\n    }\n  }, [pendingSendArgs]);\n\n  const global = getGlobal();\n  const peer = pendingSendArgs ? selectPeer(global, pendingSendArgs.peerId) : undefined;\n  const peerName = peer ? getPeerTitle(lang, peer) : undefined;\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <>\n      <RecipientPicker\n        isOpen={isOpen}\n        searchPlaceholder={lang('Search')}\n        filter={filter}\n        onSelectRecipient={handleSelectRecipient}\n        onClose={handleClose}\n        onCloseAnimationEnd={unmarkIsShown}\n        isLowStackPriority\n      />\n      <PaymentMessageConfirmDialog\n        isOpen={isPaymentMessageConfirmDialogOpen}\n        onClose={handleClosePaymentMessageConfirmDialog}\n        userName={peerName}\n        messagePriceInStars={starsForSendMessage || 0}\n        messagesCount={1}\n        shouldAutoApprove={shouldPaidMessageAutoApprove}\n        setAutoApprove={setShouldPaidMessageAutoApprove}\n        confirmHandler={paymentMessageConfirmDialogHandler}\n      />\n    </>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { isPaymentMessageConfirmDialogOpen } = tabState;\n    const starsBalance = global.stars?.balance.amount || 0;\n    const isStarsBalanceModalOpen = Boolean(tabState.starsBalanceModal);\n    return {\n      isPaymentMessageConfirmDialogOpen,\n      starsBalance,\n      isStarsBalanceModalOpen,\n    };\n  },\n)(SharePreparedMessageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"iGABsB4C\",\"modalHeader\":\"Ofq4u4pq\",\"section\":\"k44LZ99u\",\"form\":\"VhNBPaMY\",\"label\":\"anDcU5bi\",\"input\":\"kYxuUcwe\",\"description\":\"A_JjwhXv\",\"timeInputIcon\":\"pHne2E6K\",\"offerButton\":\"d_PCM2tC\",\"currencySelector\":\"genSNudF\",\"currencyIcon\":\"fT5aRs0H\"};","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiDraft, ApiStarsAmount, ApiTypeCurrencyAmount } from '../../../api/types';\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  STARS_CURRENCY_CODE,\n  STARS_SUGGESTED_POST_AGE_MIN,\n  STARS_SUGGESTED_POST_AMOUNT_MAX,\n  STARS_SUGGESTED_POST_AMOUNT_MIN,\n  STARS_SUGGESTED_POST_FUTURE_MAX,\n  STARS_SUGGESTED_POST_FUTURE_MIN,\n  TON_CURRENCY_CODE,\n  TON_SUGGESTED_POST_AMOUNT_MAX,\n  TON_SUGGESTED_POST_AMOUNT_MIN } from '../../../config';\nimport { selectIsMonoforumAdmin, selectPeer } from '../../../global/selectors';\nimport { selectDraft } from '../../../global/selectors/messages';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatScheduledDateTime, formatShortDuration } from '../../../util/dates/dateFormat';\nimport { convertTonFromNanos, convertTonToNanos } from '../../../util/formatCurrency';\nimport {\n  formatStarsAsIcon,\n  formatStarsAsText,\n  formatTonAsIcon,\n  formatTonAsText } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SuggestMessageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestMessageModal'];\n};\n\nimport useFlag from '../../../hooks/useFlag';\n\ntype StateProps = {\n  starBalance?: ApiStarsAmount;\n  tonBalance?: number;\n  peer?: ApiPeer;\n  currentDraft?: ApiDraft;\n  maxStarsAmount: number;\n  minStarsAmount: number;\n  tonMaxAmount: number;\n  tonMinAmount: number;\n  ageMinSeconds: number;\n  futureMin: number;\n  futureMax: number;\n  isMonoforumAdmin?: boolean;\n};\n\nconst SuggestMessageModal = ({\n  modal,\n  starBalance,\n  tonBalance,\n  peer,\n  currentDraft,\n  maxStarsAmount,\n  minStarsAmount,\n  tonMaxAmount,\n  tonMinAmount,\n  ageMinSeconds,\n  futureMin,\n  futureMax,\n  isMonoforumAdmin,\n}: OwnProps & StateProps) => {\n  const { closeSuggestMessageModal, updateDraftSuggestedPostInfo, openStarsBalanceModal } = getActions();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n\n  const currentSuggestedPostInfo = currentDraft?.suggestedPostInfo;\n  const currentReplyInfo = currentDraft?.replyInfo;\n  const isInSuggestChangesMode = Boolean(currentReplyInfo);\n\n  const [currencyAmount, setCurrencyAmount] = useState<number | undefined>(\n    currentSuggestedPostInfo?.price?.amount || undefined,\n  );\n  const [selectedCurrency, setSelectedCurrency] = useState<ApiTypeCurrencyAmount['currency']>(\n    currentSuggestedPostInfo?.price?.currency || STARS_CURRENCY_CODE,\n  );\n  const [scheduleDate, setScheduleDate] = useState<number | undefined>(\n    currentSuggestedPostInfo?.scheduleDate\n      ? currentSuggestedPostInfo.scheduleDate * 1000\n      : undefined,\n  );\n\n  useEffect(() => {\n    const price = currentSuggestedPostInfo?.price;\n    const amount = price?.currency === TON_CURRENCY_CODE ? convertTonFromNanos(price.amount) : price?.amount;\n    setCurrencyAmount(amount);\n    setSelectedCurrency(currentSuggestedPostInfo?.price?.currency || STARS_CURRENCY_CODE);\n    setScheduleDate(currentSuggestedPostInfo?.scheduleDate\n      ? currentSuggestedPostInfo.scheduleDate * 1000\n      : undefined);\n  }, [currentSuggestedPostInfo]);\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const isCurrencyStars = selectedCurrency === STARS_CURRENCY_CODE;\n  const now = Math.floor(Date.now() / 1000);\n  const minAt = (now + futureMin) * 1000;\n  const maxAt = (now + futureMax) * 1000;\n  const defaultSelectedTime = (now + futureMin * 2) * 1000;\n\n  const handleAmountChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    const number = parseFloat(value);\n\n    const result = value === '' || Number.isNaN(number) ? undefined\n      : Math.min(Math.max(number, 0), currentMaxAmount);\n\n    setCurrencyAmount(result);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setScheduleDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleAnytimeClick = useLastCallback(() => {\n    setScheduleDate(undefined);\n    closeCalendar();\n  });\n\n  const currentMinAmount = isCurrencyStars ? minStarsAmount : convertTonFromNanos(tonMinAmount);\n  const currentMaxAmount = isCurrencyStars ? maxStarsAmount : convertTonFromNanos(tonMaxAmount);\n  const isDisabled = Boolean(currencyAmount) && currencyAmount < currentMinAmount;\n\n  const handleOffer = useLastCallback(() => {\n    const neededAmount = currencyAmount\n      ? (isCurrencyStars ? currencyAmount : convertTonToNanos(currencyAmount))\n      : 0;\n\n    if (isDisabled) {\n      return;\n    }\n\n    if (!isMonoforumAdmin) {\n      if (isCurrencyStars) {\n        const currentBalance = starBalance?.amount || 0;\n\n        if (neededAmount > currentBalance) {\n          openStarsBalanceModal({\n            topup: {\n              balanceNeeded: neededAmount,\n            },\n          });\n          return;\n        }\n      } else {\n        const currentTonBalance = tonBalance || 0;\n        if (neededAmount > currentTonBalance) {\n          openStarsBalanceModal({\n            currency: TON_CURRENCY_CODE,\n          });\n          return;\n        }\n      }\n    }\n\n    updateDraftSuggestedPostInfo({\n      price: { currency: selectedCurrency, amount: neededAmount, nanos: 0 },\n      scheduleDate: scheduleDate ? scheduleDate / 1000 : undefined,\n    });\n\n    closeSuggestMessageModal();\n  });\n\n  return (\n    <Modal\n      headerClassName={styles.modalHeader}\n      isOpen={Boolean(modal)}\n      onClose={closeSuggestMessageModal}\n      isSlim\n      isLowStackPriority\n      hasCloseButton\n      contentClassName={styles.content}\n      title={isInSuggestChangesMode ? lang('TitleSuggestedChanges') : lang('TitleSuggestMessage')}\n    >\n      <div className={styles.form}>\n        <div className={styles.section}>\n          <div className={styles.currencySelector}>\n            <Button\n              className={styles.currencyButton}\n              color={isCurrencyStars ? 'primary' : 'translucent'}\n              pill\n              fluid\n              size=\"tiny\"\n              noFastClick\n              onClick={() => setSelectedCurrency(STARS_CURRENCY_CODE)}\n            >\n              <Icon name=\"star\" className={styles.currencyIcon} />\n              {lang('CurrencyStars')}\n            </Button>\n            <Button\n              className={styles.currencyButton}\n              fluid\n              color={!isCurrencyStars ? 'primary' : 'translucent'}\n              pill\n              size=\"tiny\"\n              noFastClick\n              onClick={() => setSelectedCurrency(TON_CURRENCY_CODE)}\n            >\n              <Icon name=\"toncoin\" className={styles.currencyIcon} />\n              {lang('CurrencyTon')}\n            </Button>\n          </div>\n          <InputText\n            label={lang('InputPlaceholderPrice')}\n            className={buildClassName(styles.input)}\n            value={currencyAmount?.toString()}\n            onChange={handleAmountChange}\n            inputMode=\"numeric\"\n            tabIndex={0}\n            teactExperimentControlled={isCurrencyStars}\n          />\n          <div className={styles.description}>\n            {currencyAmount !== undefined && currencyAmount > 0 && currencyAmount < currentMinAmount\n              ? lang('DescriptionSuggestedPostMinimumOffer', {\n                amount: isCurrencyStars\n                  ? formatStarsAsText(lang, currentMinAmount)\n                  : formatTonAsText(lang, currentMinAmount) },\n              { withNodes: true, withMarkdown: true })\n              : isCurrencyStars\n                ? lang('SuggestMessagePriceDescriptionStars')\n                : lang('SuggestMessagePriceDescriptionTon')}\n          </div>\n        </div>\n\n        <div className={styles.section}>\n          <div className={buildClassName(styles.input, 'input-group', 'touched')}>\n            <input\n              type=\"text\"\n              className={buildClassName('form-control', isCalendarOpened && 'focus')}\n              value={scheduleDate\n                ? formatScheduledDateTime(scheduleDate / 1000, lang, oldLang)\n                : lang('SuggestMessageAnytime')}\n              autoComplete=\"off\"\n              onClick={openCalendar}\n              onFocus={openCalendar}\n              readOnly\n            />\n            <label>{lang('InputTitleSuggestMessageTime')}</label>\n            <Icon name=\"down\" className={styles.timeInputIcon} />\n          </div>\n          <div className={styles.description}>\n            {lang('SuggestMessageTimeDescription', {\n              hint: lang('SuggestMessageDateTimeHint'),\n              duration: formatShortDuration(lang, ageMinSeconds, true),\n            })}\n          </div>\n        </div>\n\n        <CalendarModal\n          isOpen={isCalendarOpened}\n          isFutureMode\n          withTimePicker\n          minAt={minAt}\n          maxAt={maxAt}\n          onClose={closeCalendar}\n          onSubmit={handleExpireDateChange}\n          selectedAt={scheduleDate || defaultSelectedTime}\n          submitButtonLabel={lang('Save')}\n          secondButtonLabel={lang('SuggestMessageAnytime')}\n          onSecondButtonClick={handleAnytimeClick}\n          description={lang('SuggestMessageDateTimeHint')}\n        />\n\n        <Button\n          className={styles.offerButton}\n          onClick={handleOffer}\n          size=\"smaller\"\n          disabled={isDisabled}\n        >\n          {isInSuggestChangesMode ? lang('ButtonUpdateTerms')\n            : currencyAmount ? lang('ButtonOfferAmount', {\n              amount: isCurrencyStars\n                ? formatStarsAsIcon(lang, currencyAmount, { asFont: true })\n                : formatTonAsIcon(lang, currencyAmount),\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            }) : lang('ButtonOfferFree')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const starBalance = global.stars?.balance;\n    const peer = modal ? selectPeer(global, modal.chatId) : undefined;\n    const currentDraft = modal ? selectDraft(global, modal.chatId, MAIN_THREAD_ID) : undefined;\n\n    const { appConfig } = global;\n    const maxStarsAmount = appConfig?.starsSuggestedPostAmountMax || STARS_SUGGESTED_POST_AMOUNT_MAX;\n    const minStarsAmount = appConfig?.starsSuggestedPostAmountMin || STARS_SUGGESTED_POST_AMOUNT_MIN;\n    const ageMinSeconds = appConfig?.starsSuggestedPostAgeMin || STARS_SUGGESTED_POST_AGE_MIN;\n    const futureMin = appConfig?.starsSuggestedPostFutureMin || STARS_SUGGESTED_POST_FUTURE_MIN;\n    const futureMax = appConfig?.starsSuggestedPostFutureMax || STARS_SUGGESTED_POST_FUTURE_MAX;\n\n    const tonMaxAmount = appConfig?.tonSuggestedPostAmountMax || TON_SUGGESTED_POST_AMOUNT_MAX;\n    const tonMinAmount = appConfig?.tonSuggestedPostAmountMin || TON_SUGGESTED_POST_AMOUNT_MIN;\n\n    const isMonoforumAdmin = modal ? selectIsMonoforumAdmin(global, modal.chatId) : false;\n\n    return {\n      peer,\n      starBalance,\n      tonBalance: global.ton?.balance?.amount,\n      currentDraft,\n      maxStarsAmount,\n      minStarsAmount,\n      tonMaxAmount,\n      tonMinAmount,\n      ageMinSeconds,\n      futureMin,\n      futureMax,\n      isMonoforumAdmin,\n    };\n  },\n)(SuggestMessageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"details\":\"xqyFGV8R\"};","import { memo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { STARS_CURRENCY_CODE, STARS_SUGGESTED_POST_AGE_MIN,\n  STARS_SUGGESTED_POST_COMMISSION_PERMILLE,\n  STARS_SUGGESTED_POST_FUTURE_MAX,\n  STARS_SUGGESTED_POST_FUTURE_MIN,\n  TON_CURRENCY_CODE,\n  TON_SUGGESTED_POST_COMMISSION_PERMILLE,\n} from '../../../config';\nimport { getPeerFullTitle } from '../../../global/helpers/peers';\nimport { selectChatMessage, selectIsMonoforumAdmin, selectSender } from '../../../global/selectors';\nimport { formatScheduledDateTime, formatShortDuration } from '../../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../../util/formatCurrency';\nimport { formatStarsAsText, formatTonAsText } from '../../../util/localization/format';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SuggestedPostApprovalModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestedPostApprovalModal'];\n};\n\ntype StateProps = {\n  commissionPermille: number;\n  tonCommissionPermille: number;\n  minAge: number;\n  futureMin: number;\n  futureMax: number;\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  isAdmin?: boolean;\n  scheduleDate?: number;\n};\n\nconst SuggestedPostApprovalModal = ({\n  modal,\n  message,\n  sender,\n  isAdmin,\n  commissionPermille,\n  tonCommissionPermille,\n  minAge,\n  futureMin,\n  futureMax,\n  scheduleDate,\n}: OwnProps & StateProps) => {\n  const {\n    closeSuggestedPostApprovalModal,\n    approveSuggestedPost,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n\n  const now = Math.floor(Date.now() / 1000);\n  const minAt = (now + futureMin) * 1000;\n  const maxAt = (now + futureMax) * 1000;\n  const defaultSelectedTime = now + futureMin * 2;\n\n  const [selectedScheduleDate, setSelectedScheduleDate] = useState<number>(defaultSelectedTime);\n\n  const handleClose = useLastCallback(() => {\n    closeSuggestedPostApprovalModal();\n  });\n\n  const handleApprove = useLastCallback((date?: number) => {\n    if (!modal) return;\n\n    approveSuggestedPost({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      scheduleDate: date,\n    });\n\n    closeSuggestedPostApprovalModal();\n  });\n\n  const handleCalendarDateChange = useLastCallback((date: Date) => {\n    const time = Math.floor(date.getTime() / 1000);\n    setSelectedScheduleDate(time);\n  });\n\n  const handleCalendarSubmit = useLastCallback((date: Date) => {\n    const time = Math.floor(date.getTime() / 1000);\n    closeCalendar();\n    handleApprove(time);\n  });\n\n  const handlePublishNow = useLastCallback(() => {\n    closeCalendar();\n    handleApprove();\n  });\n\n  const handleNext = useLastCallback(() => {\n    if (scheduleDate) {\n      handleApprove(scheduleDate);\n    } else {\n      openCalendar();\n    }\n  });\n\n  if (!modal || !message) {\n    return undefined;\n  }\n\n  const senderName = sender ? getPeerFullTitle(oldLang, sender) : '';\n\n  const renderContent = () => {\n    const price = message?.suggestedPostInfo?.price;\n    const amount = price?.amount;\n    const currency = price?.currency || STARS_CURRENCY_CODE;\n\n    const question = lang(\n      'SuggestedPostConfirmMessage',\n      { peer: senderName },\n      { withNodes: true, withMarkdown: true });\n\n    const questionText = renderText(question);\n    if (!amount) {\n      return questionText;\n    }\n\n    const currentCommissionPermille = currency === TON_CURRENCY_CODE ? tonCommissionPermille : commissionPermille;\n    const commission = (currentCommissionPermille / 10);\n    const amountWithCommission = amount / 100 * commission;\n\n    const formattedAmount = currency === TON_CURRENCY_CODE\n      ? formatTonAsText(lang, convertTonFromNanos(amountWithCommission))\n      : formatStarsAsText(lang, amountWithCommission);\n\n    const ageMinSeconds = minAge;\n    const duration = formatShortDuration(lang, ageMinSeconds, true);\n\n    if (scheduleDate) {\n      const time = formatScheduledDateTime(scheduleDate, lang, oldLang);\n\n      const key\n      = isAdmin ? 'SuggestedPostConfirmDetailsWithTimeAdmin' : 'SuggestedPostConfirmDetailsWithTimeUser';\n\n      return (\n        <>\n          <div>\n            {questionText}\n          </div>\n          <div className={styles.details}>\n            {renderText(lang(key, {\n              amount: formattedAmount,\n              commission,\n              duration,\n              time,\n            }, { withNodes: true, withMarkdown: true }))}\n          </div>\n        </>\n      );\n    }\n\n    const key = isAdmin ? 'SuggestedPostConfirmDetailsAdmin' : 'SuggestedPostConfirmDetailsUser';\n\n    return (\n      <>\n        <div>\n          {questionText}\n        </div>\n        <div className={styles.details}>\n          {renderText(lang(key, {\n            amount: formattedAmount,\n            commission,\n            duration,\n          }, { withNodes: true, withMarkdown: true }))}\n        </div>\n      </>\n    );\n  };\n\n  return (\n    <>\n      <ConfirmDialog\n        isOpen={Boolean(modal) && !isCalendarOpened}\n        onClose={handleClose}\n        title={lang('SuggestedPostConfirmTitle')}\n        confirmHandler={handleNext}\n        confirmLabel={scheduleDate ? lang('ButtonPublish') : lang('Next')}\n      >\n        {renderContent()}\n      </ConfirmDialog>\n\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        minAt={minAt}\n        maxAt={maxAt}\n        onClose={closeCalendar}\n        onSubmit={handleCalendarSubmit}\n        onDateChange={handleCalendarDateChange}\n        selectedAt={selectedScheduleDate * 1000}\n        submitButtonLabel={lang('ButtonPublishAtTime', {\n          time: formatScheduledDateTime(selectedScheduleDate, lang, oldLang),\n        })}\n        secondButtonLabel={lang('PublishNow')}\n        onSecondButtonClick={handlePublishNow}\n        description={lang('SuggestMessageDateTimeHint')}\n      />\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const sender = message ? selectSender(global, message) : undefined;\n    const isAdmin = modal && selectIsMonoforumAdmin(global, modal.chatId);\n    const { appConfig } = global;\n    const commissionPermille = appConfig?.starsSuggestedPostCommissionPermille\n      || STARS_SUGGESTED_POST_COMMISSION_PERMILLE;\n    const tonCommissionPermille = appConfig?.tonSuggestedPostCommissionPermille\n      || TON_SUGGESTED_POST_COMMISSION_PERMILLE;\n    const minAge = appConfig?.starsSuggestedPostAgeMin || STARS_SUGGESTED_POST_AGE_MIN;\n    const futureMin = (appConfig?.starsSuggestedPostFutureMin || STARS_SUGGESTED_POST_FUTURE_MIN) * 2;\n    const futureMax = appConfig?.starsSuggestedPostFutureMax || STARS_SUGGESTED_POST_FUTURE_MAX;\n    const scheduleDate = message?.suggestedPostInfo?.scheduleDate;\n\n    return {\n      minAge,\n      futureMin,\n      futureMax,\n      message,\n      sender,\n      isAdmin,\n      commissionPermille,\n      tonCommissionPermille,\n      scheduleDate,\n    };\n  },\n)(SuggestedPostApprovalModal));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  const resetPermissions = useCallback(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n  }, [defaultPermissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n    resetPermissions,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\n\nimport { isChatPublic } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  chatId?: string;\n  handlePermissionChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  permissions: ApiChatBannedRights;\n  isMediaDropdownOpen: boolean;\n  setIsMediaDropdownOpen: (open: boolean) => void;\n  className?: string;\n  shiftedClassName?: string;\n  dropdownClassName?: string;\n  withCheckbox?: boolean;\n  permissionGroup?: boolean;\n  getControlIsDisabled?: (key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => boolean | undefined;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasLinkedChat?: boolean;\n};\n\nconst permissionKeyList: (keyof ApiChatBannedRights)[] = [\n  'sendPhotos', 'sendVideos', 'sendStickers',\n  'sendAudios', 'sendDocs', 'sendVoices', 'sendRoundvideos', 'embedLinks', 'sendPolls',\n];\n\nconst PermissionCheckboxList: FC<OwnProps & StateProps> = ({\n  chat,\n  isMediaDropdownOpen,\n  setIsMediaDropdownOpen,\n  hasLinkedChat,\n  permissions,\n  handlePermissionChange,\n  className,\n  shiftedClassName,\n  dropdownClassName,\n  withCheckbox,\n  getControlIsDisabled,\n  permissionGroup,\n}) => {\n  const {\n    showNotification,\n  } = getActions();\n\n  const { isForum } = chat || {};\n\n  const lang = useOldLang();\n\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  const countCheckedPermissions = useMemo(() => {\n    return permissionKeyList.reduce((count, key) => {\n      if (!permissions[key]) {\n        count += 1;\n      }\n      return count;\n    }, 0);\n  }, [permissions]);\n\n  const handleOpenMediaDropdown = useLastCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  });\n\n  const handleDisabledClick = useLastCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  });\n\n  return (\n    <>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendPlain\"\n          checked={!permissions.sendPlain}\n          label={lang('UserRestrictionsSend')}\n          blocking\n          permissionGroup={permissionGroup}\n          onChange={handlePermissionChange}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendPlain')}\n        />\n      </div>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendMedia\"\n          checked={!permissions.sendMedia}\n          label={lang('UserRestrictionsSendMedia')}\n          labelText={`${countCheckedPermissions}/${permissionKeyList.length}`}\n          blocking\n          permissionGroup={permissionGroup}\n          rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n          onChange={handlePermissionChange}\n          onClickLabel={handleOpenMediaDropdown}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendMedia')}\n        />\n      </div>\n      <div className={dropdownClassName}>\n        <div\n          className={className}\n        >\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPhotos\"\n              checked={!permissions.sendPhotos}\n              label={lang('UserRestrictionsSendPhotos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPhotos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVideos\"\n              checked={!permissions.sendVideos}\n              label={lang('UserRestrictionsSendVideos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendStickers')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendAudios\"\n              checked={!permissions.sendAudios}\n              label={lang('UserRestrictionsSendMusic')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendAudios')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendDocs\"\n              checked={!permissions.sendDocs}\n              label={lang('UserRestrictionsSendFiles')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendDocs')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVoices\"\n              checked={!permissions.sendVoices}\n              label={lang('UserRestrictionsSendVoices')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVoices')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendRoundvideos\"\n              checked={!permissions.sendRoundvideos}\n              label={lang('UserRestrictionsSendRound')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendRoundvideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('embedLinks')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPolls')}\n            />\n          </div>\n        </div>\n      </div>\n      <div className={shiftedClassName}>\n        <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n          <Checkbox\n            name=\"inviteUsers\"\n            checked={!permissions.inviteUsers}\n            label={lang('UserRestrictionsInviteUsers')}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n            disabled={getControlIsDisabled && getControlIsDisabled('inviteUsers')}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"pinMessages\"\n            checked={!permissions.pinMessages}\n            label={lang('UserRestrictionsPinMessages')}\n            disabled={getControlIsDisabled ? getControlIsDisabled('pinMessages')\n              : shouldDisablePermissionForPublicGroup}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"changeInfo\"\n            checked={!permissions.changeInfo}\n            label={lang('UserRestrictionsChangeInfo')}\n            blocking\n            permissionGroup={permissionGroup}\n            disabled={getControlIsDisabled ? getControlIsDisabled('changeInfo')\n              : shouldDisablePermissionForPublicGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        {isForum && (\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"manageTopics\"\n              checked={!permissions.manageTopics}\n              label={lang('CreateTopicsPermission')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('manageTopics')}\n            />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const fullInfo = chat && selectChatFullInfo(global, chat.id);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      hasLinkedChat,\n    };\n  },\n)(PermissionCheckboxList));\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"_YNfwDqt\",\"root\":\"SeaF_shb\",\"container\":\"axa67kqo\",\"title\":\"U4IFhV0a\",\"singleTitle\":\"qd6OFHiG\",\"actionTitle\":\"yGhFKTl5\",\"restrictionTitle\":\"t3KOsBfm\",\"button\":\"goI3MITH\",\"options\":\"b6847Kh3\",\"dropdownList\":\"czTjjKim\",\"dialogButtons\":\"JTT_DIRv\",\"proceedButtons\":\"L4YzeG91\",\"restrictionContainer\":\"iv0u9Zw6\",\"restrictionContainerOpen\":\"qCQftA04\",\"dropdownListOpen\":\"Ifpyv7Jp\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../api/types';\nimport type { IRadioOption } from '../ui/CheckboxGroup';\n\nimport {\n  getHasAdminRight,\n  getPrivateChatUserId,\n  getUserFirstOrLastName, isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isSystemBot,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  getSendersFromSelectedMessages,\n  selectBot,\n  selectCanDeleteSelectedMessages,\n  selectChat,\n  selectChatFullInfo, selectIsChatWithBot,\n  selectSenderFromMessage,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { buildCollectionByCallback, unique } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useManagePermissions from '../right/hooks/useManagePermissions';\n\nimport PermissionCheckboxList from '../main/PermissionCheckboxList';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Avatar from './Avatar';\nimport AvatarList from './AvatarList';\nimport Icon from './icons/Icon';\n\nimport styles from './DeleteMessageModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isGroup?: boolean;\n  isChannel?: boolean;\n  isSuperGroup?: boolean;\n  messageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  currentUserId?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  chatBot?: boolean;\n  isSchedule?: boolean;\n  onConfirm?: NoneToVoidFunction;\n  canBanUsers?: boolean;\n  isCreator?: boolean;\n  linkedChatId?: string;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  isChannel,\n  isSuperGroup,\n  isSchedule,\n  currentUserId,\n  messageIds,\n  isCreator,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  chatBot,\n  adminMembersById,\n  canBanUsers,\n  linkedChatId,\n  onConfirm,\n}) => {\n  const {\n    closeDeleteMessageModal,\n    deleteMessages,\n    reportChannelSpam,\n    deleteChatMember,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n    updateChatMemberBannedRights,\n    deleteParticipantHistory,\n  } = getActions();\n\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    permissions, havePermissionChanged, handlePermissionChange, resetPermissions,\n  } = useManagePermissions(chat?.defaultBannedRights);\n\n  const [peerIdsToDeleteAll, setPeerIdsToDeleteAll] = useState<string[]>([]);\n  const [peerIdsToBan, setPeerIdsToBan] = useState<string[]>([]);\n  const [peerIdsToReportSpam, setPeerIdsToReportSpam] = useState<string[]>([]);\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const [isAdditionalOptionsVisible, setIsAdditionalOptionsVisible] = useState(false);\n  const [shouldDeleteForAll, setShouldDeleteForAll] = useState(true);\n\n  const peerList = useMemo(() => {\n    if (isChannel || !messageIds || !chat) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n    const senderArray = getSendersFromSelectedMessages(global, chat.id, messageIds);\n    return senderArray ? unique(senderArray)\n      .filter((peer) => (\n        peer?.id !== chat?.id\n        && peer?.id !== linkedChatId\n        && peer?.id !== chat?.linkedMonoforumId\n      )) : MEMO_EMPTY_ARRAY;\n  }, [chat, isChannel, linkedChatId, messageIds]);\n\n  const buildNestedOptionListWithAvatars = useLastCallback(() => {\n    return peerList.map((member) => {\n      return {\n        value: member.id,\n        label: getPeerTitle(lang, member) || '',\n        leftElement: <Avatar size=\"small\" peer={member} />,\n      };\n    });\n  });\n\n  const peerListToDeleteAll = useMemo(() => {\n    return peerList.filter((peer) => (\n      peer.id !== linkedChatId\n      && peer.id !== chat?.linkedMonoforumId\n      && peer.id !== currentUserId\n    ));\n  }, [peerList, currentUserId, linkedChatId, chat?.linkedMonoforumId]);\n\n  const peerListToReportSpam = useMemo(() => {\n    return peerList.filter((peer) => (\n      peer.id !== currentUserId\n      && peer.id !== linkedChatId\n      && peer.id !== chat?.linkedMonoforumId\n    ));\n  }, [peerList, currentUserId, linkedChatId, chat?.linkedMonoforumId]);\n\n  const peerListToBan = useMemo(() => {\n    const isCurrentUserInList = peerList.some((peer) => peer.id === currentUserId);\n    const shouldReturnEmpty = !canBanUsers || isCurrentUserInList || chat?.isMonoforum;\n\n    if (shouldReturnEmpty) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return peerList.filter((peer) => {\n      const isAdmin = adminMembersById?.[peer.id];\n      return isCreator || !isAdmin;\n    });\n  }, [peerList, isCreator, currentUserId, canBanUsers, adminMembersById, chat?.isMonoforum]);\n\n  const shouldShowAdditionalOptions = useMemo(() => {\n    return Boolean(peerListToDeleteAll.length || peerListToReportSpam.length || peerListToBan.length);\n  }, [peerListToDeleteAll, peerListToReportSpam, peerListToBan]);\n\n  const shouldShowOption = shouldShowAdditionalOptions\n    && !canDeleteForAll && !isSchedule && isSuperGroup;\n\n  const peerNames = useMemo(() => {\n    if (!peerList || isSchedule) return {};\n    return buildCollectionByCallback(peerList, (peer) => [peer.id, getPeerTitle(lang, peer)]);\n  }, [isSchedule, lang, peerList]);\n\n  const ACTION_SPAM_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'spam' : peerList?.[0]?.id,\n        label: oldLang('ReportSpamTitle'),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== chat?.linkedMonoforumId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, linkedChatId, chat?.linkedMonoforumId, currentUserId]);\n\n  const ACTION_DELETE_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'delete_all' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? oldLang('DeleteAllFromUsers')\n          : oldLang('DeleteAllFrom', Object.values(peerNames)[0]),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== chat?.linkedMonoforumId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, peerNames, linkedChatId, chat?.linkedMonoforumId, currentUserId]);\n\n  const ACTION_BAN_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'ban' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? (isAdditionalOptionsVisible ? oldLang('DeleteRestrictUsers') : oldLang('DeleteBanUsers'))\n          : (isAdditionalOptionsVisible ? oldLang('KickFromSupergroup')\n            : oldLang('DeleteBan', Object.values(peerNames)[0])),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars(),\n        ] : undefined,\n      },\n    ];\n  }, [isAdditionalOptionsVisible, oldLang, messageIds, peerList, peerNames]);\n\n  const toggleAdditionalOptions = useLastCallback(() => {\n    setIsAdditionalOptionsVisible((prev) => !prev);\n  });\n\n  const filterMessageIdByPeerId = useLastCallback((peerIds: string[], selectedMessageIdList: number[]) => {\n    if (!chat) return MEMO_EMPTY_ARRAY;\n    const global = getGlobal();\n    return selectedMessageIdList.filter((msgId) => {\n      const sender = selectSenderFromMessage(global, chat.id, msgId);\n      return sender && peerIds.includes(sender.id);\n    });\n  });\n\n  const handleReportSpam = useLastCallback((userMessagesMap: Record<string, number[]>) => {\n    Object.entries(userMessagesMap).forEach(([userId, messageIdList]) => {\n      if (messageIdList.length) {\n        reportChannelSpam({\n          participantId: userId,\n          chatId: chat!.id,\n          messageIds: messageIdList,\n        });\n      }\n    });\n  });\n\n  const handleDeleteMessages = useLastCallback((filteredMessageIdList: number[]) => {\n    deleteMessages({ messageIds: filteredMessageIdList, shouldDeleteForAll: true });\n  });\n\n  const handleDeleteAllPeerMessages = useLastCallback((peerIdList: string[]) => {\n    if (!chat) return;\n    peerIdList.forEach((peerId) => {\n      deleteParticipantHistory({ peerId, chatId: chat.id });\n    });\n  });\n\n  const handleDeleteMember = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      deleteChatMember({ chatId: chat!.id, userId });\n    });\n  });\n\n  const handleUpdateChatMemberBannedRights = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      updateChatMemberBannedRights({\n        chatId: chat!.id,\n        userId,\n        bannedRights: permissions,\n      });\n    });\n  });\n\n  const handleDeleteMessageList = useLastCallback(() => {\n    if (!chat || !messageIds) return;\n\n    onConfirm?.();\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else if (shouldShowOption) {\n      if (peerIdsToReportSpam?.length) {\n        const global = getGlobal();\n        const peerIdList = peerIdsToReportSpam.filter((option) => !Number.isNaN(Number(option)));\n        const messageList = messageIds.reduce<Record<string, number[]>>((acc, msgId) => {\n          const peer = selectSenderFromMessage(global, chat.id, msgId);\n          if (peer && peerIdList.includes(peer.id)) {\n            if (!acc[peer.id]) {\n              acc[peer.id] = [];\n            }\n            acc[peer.id].push(Number(msgId));\n          }\n          return acc;\n        }, {});\n\n        handleReportSpam(messageList);\n      }\n\n      if (peerIdsToDeleteAll?.length) {\n        const peerIdList = peerIdsToDeleteAll.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteAllPeerMessages(peerIdList);\n      }\n\n      if (peerIdsToBan?.length && !havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteMember(peerIdList);\n        const filteredMessageIdList = filterMessageIdByPeerId(peerIdList, messageIds);\n        handleDeleteMessages(filteredMessageIdList);\n      }\n\n      if (peerIdsToBan?.length && havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleUpdateChatMemberBannedRights(peerIdList);\n      }\n\n      if (!peerIdsToReportSpam?.length || !peerIdsToDeleteAll?.length || !peerIdsToBan?.length) {\n        deleteMessages({ messageIds, shouldDeleteForAll });\n      }\n    } else {\n      deleteMessages({ messageIds, shouldDeleteForAll });\n    }\n\n    closeDeleteMessageModal();\n    exitMessageSelectMode();\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteMessageModal();\n  });\n\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      setPeerIdsToReportSpam([]);\n      setPeerIdsToDeleteAll([]);\n      setPeerIdsToBan([]);\n      setShouldDeleteForAll(true);\n      setIsMediaDropdownOpen(false);\n      setIsAdditionalOptionsVisible(false);\n      resetPermissions();\n    }\n  }, [isOpen, prevIsOpen, resetPermissions]);\n\n  function renderHeader() {\n    return (\n      <div\n        className={shouldShowOption && styles.container}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldShowOption && (\n          <AvatarList\n            size=\"small\"\n            peers={peerList}\n          />\n        )}\n        <h3 className={buildClassName(shouldShowOption ? styles.title : styles.singleTitle)}>\n          {oldLang('Chat.DeleteMessagesConfirmation', messageIds?.length)}\n        </h3>\n      </div>\n    );\n  }\n\n  function renderAdditionalActionOptions() {\n    return (\n      <div className={styles.options}>\n        <CheckboxGroup\n          options={ACTION_SPAM_OPTION}\n          onChange={setPeerIdsToReportSpam}\n          selected={peerIdsToReportSpam}\n          nestedCheckbox={messageIds && peerList.length >= 2}\n        />\n        {peerListToDeleteAll?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_DELETE_OPTION}\n            onChange={setPeerIdsToDeleteAll}\n            selected={peerIdsToDeleteAll}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n        {peerListToBan?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_BAN_OPTION}\n            onChange={setPeerIdsToBan}\n            selected={peerIdsToBan}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderPartiallyRestrictedUser() {\n    return (\n      <div className={buildClassName(styles.restrictionContainer,\n        isAdditionalOptionsVisible && styles.restrictionContainerOpen)}\n      >\n        <h3 className={buildClassName(styles.actionTitle, styles.restrictionTitle)}>\n          {oldLang('UserRestrictionsCanDoUsers', peerList.length)}\n        </h3>\n        <PermissionCheckboxList\n          withCheckbox\n          chatId={chat?.id}\n          isMediaDropdownOpen={isMediaDropdownOpen}\n          setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n          handlePermissionChange={handlePermissionChange}\n          permissions={permissions}\n          className={buildClassName(\n            styles.dropdownList,\n            isMediaDropdownOpen && styles.dropdownListOpen,\n          )}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageList}\n      className={styles.root}\n    >\n      <div className={styles.main}>\n        {renderHeader()}\n        {shouldShowOption && (\n          <>\n            <p className={styles.actionTitle}>{oldLang('DeleteAdditionalActions')}</p>\n            {renderAdditionalActionOptions()}\n            {renderPartiallyRestrictedUser()}\n            {peerIdsToBan?.length && canBanUsers ? (\n              <ListItem\n                narrow\n                buttonClassName={styles.button}\n                onClick={toggleAdditionalOptions}\n              >\n                {oldLang(isAdditionalOptionsVisible ? 'DeleteToggleBanUsers' : 'DeleteToggleRestrictUsers')}\n                <Icon\n                  name={isAdditionalOptionsVisible ? 'up' : 'down'}\n                  className={buildClassName(styles.button, 'ml-2')}\n                />\n              </ListItem>\n            ) : setIsAdditionalOptionsVisible(false)}\n          </>\n        )}\n        {(canDeleteForAll || chatBot || !shouldShowOption) && (\n          <>\n            <p>\n              {messageIds && messageIds.length > 1\n                ? lang('AreYouSureDeleteFewMessages') : lang('AreYouSureDeleteSingleMessage')}\n            </p>\n            {willDeleteForCurrentUserOnly && (\n              <p>{oldLang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n            )}\n            {willDeleteForAll && (\n              <p>{oldLang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n            )}\n          </>\n        )}\n        {canDeleteForAll && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={contactName ? renderText(oldLang('DeleteMessagesOptionAlso', contactName))\n              : oldLang('Conversation.DeleteMessagesForEveryone')}\n            checked={shouldDeleteForAll}\n            onCheck={setShouldDeleteForAll}\n          />\n        )}\n        <div className={buildClassName('dialog-buttons',\n          isMediaDropdownOpen ? styles.dialogButtons : styles.proceedButtons)}\n        >\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageList}>\n            {shouldShowOption ? oldLang('DeleteProceedBtn') : lang('Delete')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>{oldLang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      deleteMessageModal,\n    } = selectTabState(global);\n    const messageIds = deleteMessageModal?.messageIds;\n    const chatId = deleteMessageModal?.chatId;\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global, messageIds);\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const linkedChatId = chatFullInfo?.linkedChatId;\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const isSchedule = deleteMessageModal?.isSchedule;\n    const onConfirm = deleteMessageModal?.onConfirm;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n    const chatBot = Boolean(chat && !isSystemBot(chat.id) && selectBot(global, chat.id));\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const canBanUsers = chat && getHasAdminRight(chat, 'banUsers');\n    const isCreator = chat?.isCreator;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const willDeleteForCurrentUserOnly = (chat && isChatBasicGroup(chat) && !canDeleteForAll) || isChatWithBot;\n    const willDeleteForAll = chat && (isChatSuperGroup(chat) || isChannel);\n\n    return {\n      chat,\n      isChannel,\n      isSuperGroup,\n      messageIds,\n      currentUserId: global.currentUserId,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n      adminMembersById,\n      chatBot,\n      canBanUsers,\n      linkedChatId,\n      isSchedule,\n      isCreator,\n      onConfirm,\n    };\n  },\n)(DeleteMessageModal));\n","import { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal = ({\n  isOpen,\n  chatId,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { pinMessage } = getActions();\n\n  const [shouldPinForAll, setShouldPinForAll] = useState(true);\n\n  const handlePinMessage = useLastCallback(() => {\n    pinMessage({\n      chatId,\n      messageId,\n      isUnpin: false,\n      isOneSide: !shouldPinForAll,\n      isSilent: !shouldPinForAll,\n    });\n    onClose();\n  });\n\n  const lang = useOldLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      {canPinForAll && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          label={contactName ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          checked={shouldPinForAll}\n          onCheck={setShouldPinForAll}\n        />\n      )}\n      <div className=\"dialog-buttons\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(useMemo(() => (isActive ? {\n    'Mod+C': handleCopy,\n  } : undefined), [isActive]));\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages, selectCurrentChat,\n  selectCurrentMessageList, selectHasProtectedMessage,\n  selectHasSvg,\n  selectSelectedMessagesCount,\n  selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n  shouldWarnAboutSvg?: boolean;\n  hasSvgs?: boolean;\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  chat,\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n  shouldWarnAboutSvg,\n  hasSvgs,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n    reportMessages,\n    openDeleteMessageModal,\n    setSharedSettingOption,\n  } = getActions();\n  const lang = useOldLang();\n\n  useCopySelectedMessages(isActive);\n\n  const [isSvgDialogOpen, openSvgDialog, closeSvgDialog] = useFlag();\n  const [shouldNotWarnAboutSvg, setShouldNotWarnAboutSvg] = useState(false);\n\n  const handleExitMessageSelectMode = useLastCallback(() => {\n    exitMessageSelectMode();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    openDeleteMessageModal({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n      isSchedule,\n    });\n  });\n\n  useEffect(() => {\n    return isActive && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? handleDelete : undefined,\n        onDelete: canDeleteMessages ? handleDelete : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, handleDelete, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useLastCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  });\n\n  const handleDownload = useLastCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  });\n\n  const handleMessageDownload = useLastCallback(() => {\n    if (shouldWarnAboutSvg && hasSvgs) {\n      openSvgDialog();\n      return;\n    }\n\n    handleDownload();\n  });\n\n  const handleSvgConfirm = useLastCallback(() => {\n    setSharedSettingOption({ shouldWarnAboutSvg: !shouldNotWarnAboutSvg });\n    closeSvgDialog();\n    handleDownload();\n  });\n\n  const prevSelectedMessagesCount = usePreviousDeprecated(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const openMessageReport = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    reportMessages({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n    });\n    exitMessageSelectMode();\n  });\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: IconName, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n        aria-label={label}\n      >\n        <Icon name={icon} />\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className={className}>\n        <div className=\"MessageSelectToolbar-inner\">\n          <Button\n            color=\"translucent\"\n            round\n            onClick={handleExitMessageSelectMode}\n            ariaLabel=\"Exit select mode\"\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n            {formattedMessagesCount}\n          </span>\n\n          {Boolean(selectedMessagesCount) && (\n            <div className=\"MessageSelectToolbar-actions\">\n              {messageListType !== 'scheduled' && canForwardMessages && (\n                renderButton(\n                  'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n                )\n              )}\n              {canReportMessages && (\n                renderButton('flag', lang('Conversation.ReportMessages'), openMessageReport)\n              )}\n              {canDownloadMessages && !hasProtectedMessage && (\n                renderButton('download', lang('lng_media_download'), handleMessageDownload)\n              )}\n              {!hasProtectedMessage && (\n                renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n              )}\n              {canDeleteMessages && (\n                renderButton('delete', lang('EditAdminGroupDeleteMessages'), handleDelete, true)\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isSvgDialogOpen}\n        onClose={closeSvgDialog}\n        confirmHandler={handleSvgConfirm}\n      >\n        {lang('lng_launch_svg_warning')}\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldNotWarnAboutSvg}\n          label={lang('lng_launch_exe_dont_ask')}\n          onCheck={setShouldNotWarnAboutSvg}\n        />\n      </ConfirmDialog>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n    const chat = selectCurrentChat(global);\n\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const hasSvgs = selectedMessageIds && chatId ? selectHasSvg(global, chatId, selectedMessageIds) : false;\n    const isShareMessageModalOpen = tabState.isShareMessageModalShown;\n    const isAnyModalOpen = Boolean(isShareMessageModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall || tabState.reportModal\n      || tabState.deleteMessageModal);\n\n    return {\n      chat,\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n      shouldWarnAboutSvg,\n      hasSvgs,\n    };\n  },\n)(MessageSelectToolbar));\n","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeSeenByModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"slqA9gR2\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"tauadiDm\",\"icon\":\"i4wZg_0J\",\"header\":\"MQxuEIRA\",\"desc\":\"AEAN1Au4\",\"separator\":\"sXXb5yOS\",\"button\":\"F7owtTHj\",\"closeButton\":\"i6iFv9YE\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTabState, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal, { ANIMATION_DURATION } from '../ui/Modal';\nimport Separator from '../ui/Separator';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\nimport Icon from './icons/Icon';\n\nimport styles from './PrivacySettingsNoticeModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isReadDate?: boolean;\n};\n\nconst CLOSE_ANIMATION_DURATION = ANIMATION_DURATION + ANIMATION_END_DELAY;\n\nconst PrivacySettingsNoticeModal = ({ isOpen, isReadDate, user }: OwnProps & StateProps) => {\n  const lang = useOldLang();\n  const {\n    updateGlobalPrivacySettings,\n    openPremiumModal,\n    closePrivacySettingsNoticeModal,\n    showNotification,\n    setPrivacyVisibility,\n    loadUser,\n  } = getActions();\n  const userName = getUserFirstOrLastName(user);\n\n  const handleShowReadTime = useLastCallback(() => {\n    updateGlobalPrivacySettings({ shouldHideReadMarks: false });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumReadSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleShowLastSeen = useLastCallback(() => {\n    setPrivacyVisibility({\n      privacyKey: 'lastSeen',\n      visibility: 'everybody',\n      onSuccess: () => loadUser({ userId: user!.id }),\n    });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumLastSeenSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleOpenPremium = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      openPremiumModal({ initialSection: 'last_seen' });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n  });\n\n  return (\n    <Modal isSlim isOpen={isOpen} onClose={handleClose}>\n      <div className={styles.container} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className={styles.closeButton}\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={handleClose}\n          ariaLabel=\"Close\"\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <AnimatedIconWithPreview\n          tgsUrl={isReadDate ? LOCAL_TGS_URLS.ReadTime : LOCAL_TGS_URLS.LastSeen}\n          size={84}\n          className={styles.icon}\n          nonInteractive\n          noLoop\n        />\n        <h2 className={styles.header}>\n          {lang(isReadDate ? 'PremiumReadHeader1' : 'PremiumLastSeenHeader1')}\n        </h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(\n              isReadDate ? 'PremiumReadText1' : 'PremiumLastSeenText1Locked',\n              userName,\n            ),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          size=\"smaller\"\n          onClick={isReadDate ? handleShowReadTime : handleShowLastSeen}\n          className={styles.button}\n        >\n          {lang(isReadDate ? 'PremiumReadButton1' : 'PremiumLastSeenButton1')}\n        </Button>\n        <Separator className={styles.separator}>{lang('PremiumOr')}</Separator>\n        <h2 className={styles.header}>{lang('PremiumReadHeader2')}</h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(isReadDate ? 'PremiumReadText2' : 'PremiumLastSeenText2', userName),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          withPremiumGradient\n          size=\"smaller\"\n          onClick={handleOpenPremium}\n          className={styles.button}\n        >\n          {lang('PremiumLastSeenButton2')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(\n  withGlobal<OwnProps>((global): StateProps => {\n    const { chatId, isReadDate } = selectTabState(global).privacySettingsNoticeModal || {};\n    const user = chatId ? selectUser(global, chatId) : undefined;\n\n    return { user, isReadDate };\n  })(PrivacySettingsNoticeModal),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { getReactionKey, isSameReaction } from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { unique } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\nimport Icon from '../common/icons/Icon';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on chats or users, so we avoid them\n  const chatsById = getGlobal().chats.byId;\n  const usersById = getGlobal().users.byId;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    startClosing();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  });\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const peerIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ peerId }) => peerId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ peerId }) => peerId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, peerIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={oldLang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n\n            onClick={() => setChosenTab(undefined)}\n          >\n            <Icon name=\"heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(lang, reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(lang, count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={oldLang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (peerId) => {\n                const peer = usersById[peerId] || chatsById[peerId];\n\n                const peerReactions = reactors?.reactions.filter((reactor) => reactor.peerId === peerId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[peerId];\n\n                peerReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-${getReactionKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <Avatar peer={peer} size=\"medium\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={peer} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <Icon name=\"heart-outline\" className=\"status-icon\" />\n                          {formatDateAtTime(oldLang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !peerReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <PrivateChatInfo\n                        userId={peerId}\n                        noStatusOrTyping\n                        avatarSize=\"medium\"\n                        status={seenByUser ? formatDateAtTime(oldLang, seenByUser * 1000) : undefined}\n                        statusIcon=\"message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {oldLang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.reactions.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../types';\n\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { IS_ANDROID } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useLastCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  });\n\n  const handleCancelAnimation = useLastCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  });\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      endHeavyAnimation();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceAlways\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport {\n  selectLanguageCode,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst ChatLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const {\n    requestMessageTranslation,\n    closeChatLanguageModal,\n    setSettingOption,\n    requestChatTranslation,\n  } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useOldLang();\n\n  const handleSelect = useLastCallback((langCode: string) => {\n    if (!chatId) return;\n\n    if (messageId) {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: langCode });\n    } else {\n      setSettingOption({ translationLanguage: langCode });\n      requestChatTranslation({ chatId, toLanguageCode: langCode });\n    }\n\n    closeChatLanguageModal();\n  });\n\n  const handleSearch = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  });\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeChatLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={buildClassName(styles.listItem, 'no-icon')}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).chatLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId\n      ? messageId\n        ? selectRequestedMessageTranslationLanguage(global, chatId, messageId)\n        : selectRequestedChatTranslationLanguage(global, chatId)\n      : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(ChatLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aMjNU9gm\",\"list-item\":\"T3An6Hoz\",\"listItem\":\"T3An6Hoz\",\"title\":\"dQ9wwFu1\",\"subtitle\":\"m_J41YYl\",\"languages\":\"r3YNWDQr\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"WEJIbFQj\",\"closeButton\":\"_vwPuDEM\",\"icon\":\"BUiGM8qZ\",\"title\":\"Q3NhXpNI\",\"description\":\"frZbGQ0G\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiCountryCode } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './CollectibleInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['collectibleInfoModal'];\n};\n\ntype StateProps = {\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst TOP_ICON_SIZE = 60;\n\nconst CollectibleInfoModal: FC<OwnProps & StateProps> = ({\n  modal,\n  phoneCodeList,\n}) => {\n  const {\n    closeCollectibleInfoModal,\n    openChat,\n    openUrl,\n    showNotification,\n  } = getActions();\n  const lang = useOldLang();\n\n  const isUsername = modal?.type === 'username';\n\n  const handleClose = useLastCallback(() => {\n    closeCollectibleInfoModal();\n  });\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: modal!.peerId });\n    handleClose();\n  });\n\n  const handleOpenUrl = useLastCallback(() => {\n    openUrl({\n      url: modal!.url,\n      shouldSkipModal: true,\n    });\n    handleClose();\n  });\n\n  const handleCopy = useLastCallback(() => {\n    const text = isUsername ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal!.collectible);\n    copyTextToClipboard(text);\n    showNotification({\n      message: lang(isUsername ? 'UsernameCopied' : 'PhoneCopied'),\n    });\n    handleClose();\n  });\n\n  const title = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameTitle' : 'FragmentPhoneTitle';\n    const formattedCollectible = isUsername\n      ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal.collectible);\n    return lang(key, formattedCollectible);\n  }, [modal, isUsername, phoneCodeList, lang]);\n\n  const description = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameMessage' : 'FragmentPhoneMessage';\n    const date = formatDateAtTime(lang, modal.purchaseDate * 1000);\n    const currency = formatCurrencyAsString(modal.amount, modal.currency, lang.code);\n    const cryptoCurrency = formatCurrencyAsString(modal.cryptoAmount, modal.cryptoCurrency, lang.code);\n    const paid = `${cryptoCurrency} (${currency})`;\n    return lang(key, [date, paid]);\n  }, [modal, isUsername, lang]);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      isSlim\n      contentClassName={styles.content}\n      onClose={closeCollectibleInfoModal}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.icon}>\n        <AnimatedIconWithPreview\n          tgsUrl={isUsername ? LOCAL_TGS_URLS.Mention : LOCAL_TGS_URLS.Fragment}\n          size={TOP_ICON_SIZE}\n        />\n      </div>\n      <h3 className={styles.title}>\n        {title && renderText(title, ['simple_markdown'])}\n      </h3>\n      <PeerChip\n        className={styles.chip}\n        peerId={modal?.peerId}\n        forceShowSelf\n        clickArg={modal?.peerId}\n        onClick={handleOpenChat}\n      />\n      <p className={styles.description}>\n        {description && renderText(description, ['simple_markdown'])}\n      </p>\n      <div className=\"dialog-buttons dialog-buttons-centered\">\n        <Button className=\"confirm-dialog-button\" onClick={handleOpenUrl}>\n          {lang('FragmentUsernameOpen')}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleCopy}>\n          {lang(isUsername ? 'FragmentUsernameCopy' : 'FragmentPhoneCopy')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { countryList } = global;\n\n    return {\n      phoneCodeList: countryList.phoneCodes,\n    };\n  },\n)(CollectibleInfoModal));\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { GlobalState, TabState } from '../../../../global/types';\nimport type { ThemeKey } from '../../../../types';\nimport type { SearchResultKey } from '../../../../util/keys/searchResultKey';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\nimport { selectSharedSettings } from '../../../../global/selectors/sharedState';\n\nexport type StateProps = {\n  theme: ThemeKey;\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: SearchResultKey[];\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  shouldWarnAboutSvg?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      shouldWarnAboutSvg,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading } from '../../../global/helpers';\nimport { selectMessageDownloadableMedia } from '../../../global/selectors/media';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const global = getGlobal();\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n\n      const media = selectMessageDownloadableMedia(global, message)!;\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Audio\n              key={message.id}\n              theme={theme}\n              message={message}\n              origin={AudioOrigin.Search}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              date={message.date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n              isDownloading={getIsDownloading(activeDownloads, media)}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  const buttonRef = useRef<HTMLDivElement>();\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat, selectIsChatPinned, selectNotifyDefaults, selectNotifyException, selectUser,\n} from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  withOpenAppButton?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n  withOpenAppButton,\n  onClick,\n}) => {\n  const { requestMainWebView } = getActions();\n  const oldLang = useOldLang();\n\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useLastCallback(() => {\n    onClick(chatId);\n  });\n\n  const handleOpenApp = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId: chatId,\n      peerId: chatId,\n      theme,\n    });\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo\n          userId={chatId}\n          withUsername={withUsername}\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={chatId}\n          withUsername={withUsername}\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      {withOpenAppButton && user?.hasMainMiniApp && (\n        <Button\n          className=\"ChatBadge miniapp\"\n          pill\n          fluid\n          size=\"tiny\"\n          onClick={handleOpenApp}\n        >\n          {oldLang('BotOpen')}\n        </Button>\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, chatId);\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\n\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst BotAppResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  foundIds,\n  recentBotIds,\n}) => {\n  const {\n    searchPopularBotApps,\n    openChatWithInfo,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n    const recentSet = new Set(recentBotIds);\n    const withoutRecent = foundIds.filter((id) => !recentSet.has(id));\n\n    return filterPeersByQuery({ ids: withoutRecent, query: searchQuery, type: 'user' });\n  }, [foundIds, recentBotIds, searchQuery]);\n\n  const handleChatClick = useLastCallback((id: string) => {\n    openChatWithInfo({ id, shouldReplaceHistory: true });\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content custom-scroll\"\n        items={canRenderContents ? filteredFoundIds : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && !filteredFoundIds?.length && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && !searchQuery && Boolean(recentBotIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">\n              {recentBotIds.length > LESS_LIST_ITEMS_AMOUNT && (\n                <Link className=\"Link\" onClick={handleToggleShowMoreMine}>\n                  {lang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n                </Link>\n              )}\n              {lang('SearchAppsMine')}\n            </h3>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_LIST_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n        {canRenderContents && Boolean(filteredFoundIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">{lang('SearchAppsPopular')}</h3>\n            {filteredFoundIds.map((id) => {\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(BotAppResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiMessageOutgoingStatus,\n  ApiUser,\n} from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageVideo,\n  getPrivateChatUserId,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const thumbDataUri = useThumbnail(message);\n  const mediaThumbnail = !getMessageSticker(message) ? thumbDataUri : undefined;\n  const mediaHash = useMessageMediaHash(message, 'micro');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  });\n\n  const lang = useOldLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  const peer = privateChatUser || chat;\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        peer={peer}\n        isSavedMessages={privateChatUser?.isSelf}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={peer}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: OldLangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n        draggable={false}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      ...(privateChatUserId && { privateChatUser }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <Icon name=\"calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { selectTopic } from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport TopicIcon from '../../common/TopicIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const topic = selectTopic(global, chatId, topicId);\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: SearchResultKey[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openThread } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      if (!searchChatId) return;\n      openThread({ chatId: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId } } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiSponsoredPeer } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { isUserId } from '../../../util/entities/ids';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport BadgeButton from '../../common/BadgeButton';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  sponsoredPeer: ApiSponsoredPeer;\n  observeIntersection?: ObserveFn;\n};\n\nconst LeftSearchResultSponsored: FC<OwnProps> = ({\n  sponsoredPeer,\n  observeIntersection,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const { clickSponsored, viewSponsored, openChat } = getActions();\n  const lang = useLang();\n\n  const {\n    peerId, randomId, additionalInfo, sponsorInfo,\n  } = sponsoredPeer;\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    if (entry.intersectionRatio === 1) {\n      viewSponsored({ randomId });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    clickSponsored({ randomId });\n    openChat({ id: peerId });\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const {\n    handleClick: handleBadgeClick,\n    handleMouseDown: handleBadgeMouseDown,\n  } = useFastClick((e: React.MouseEvent) => {\n    e.stopPropagation();\n    handleContextMenu(e);\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      ref={ref}\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n      buttonRef={buttonRef}\n    >\n      {isUserId(peerId) ? (\n        <PrivateChatInfo\n          userId={peerId}\n          withUsername\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={peerId}\n          withUsername\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      <BadgeButton className=\"search-sponsored-badge\" onMouseDown={handleBadgeMouseDown} onClick={handleBadgeClick}>\n        {lang('SponsoredPeerBadge')}\n        <Icon name=\"more\" />\n      </BadgeButton>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(LeftSearchResultSponsored);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  const topUsersRef = useRef<HTMLDivElement>();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useOldLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar peer={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3\n            className={buildClassName(\n              'section-heading mt-0 recent-chats-header',\n              !topUserIds && 'without-border',\n            )}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {lang('Recent')}\n\n            <Button\n              className=\"clear-recent-chats\"\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel={lang('Clear')}\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              withOpenAppButton\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageSearchContext, ApiSponsoredPeer } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { ALL_FOLDER_ID, GLOBAL_SUGGESTED_CHANNELS_ID } from '../../../config';\nimport {\n  isChatChannel,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectSimilarChannelIds, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { unique } from '../../../util/iteratees';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PeerChip from '../../common/PeerChip';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Transition from '../../ui/Transition';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport LeftSearchResultSponsored from './LeftSearchResultSponsored';\nimport RecentContacts from './RecentContacts';\n\nimport './ChatResults.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  isChannelList?: boolean;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  contactIds?: string[];\n  accountPeerIds?: string[];\n  globalPeerIds?: string[];\n  foundIds?: SearchResultKey[];\n  sponsoredPeer?: ApiSponsoredPeer;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  suggestedChannelIds?: string[];\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  isChannelList,\n  searchQuery,\n  searchDate,\n  dateSearchQuery,\n  currentUserId,\n  contactIds,\n  accountPeerIds,\n  globalPeerIds,\n  foundIds,\n  globalMessagesByChatId,\n  fetchingStatus,\n  suggestedChannelIds,\n  sponsoredPeer,\n  onReset,\n  onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal,\n    setGlobalSearchChatId, loadChannelRecommendations,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const chatSelectionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n  const [searchContext, setSearchContext] = useState<ApiMessageSearchContext>('all');\n  const ref = useRef<HTMLDivElement>();\n\n  useEffectOnce(() => {\n    if (isChannelList) loadChannelRecommendations({});\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: isChannelList ? 'channels' : 'text',\n          context: searchContext,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery, searchContext]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  function getSearchContextCaption(context: ApiMessageSearchContext) {\n    if (context === 'users') return lang('PrivateChatsSearchContext');\n    if (context === 'groups') return lang('GroupChatsSearchContext');\n    if (context === 'channels') return lang('ChannelsSearchContext');\n    return lang('AllChatsSearchContext');\n  }\n\n  const {\n    isContextMenuOpen, contextMenuAnchor, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getRootElement = useLastCallback(() => ref.current!);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.chatResultsContextMenu .bubble'));\n  const getTriggerElement = useLastCallback(() => ref.current!.querySelector('.menuTrigger'));\n\n  const handleClickContext = useLastCallback((e: React.MouseEvent): void => {\n    handleContextMenu(e);\n  });\n\n  const itemPlaceholderClass = buildClassName('icon', 'iconPlaceholder');\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getMenuElement={getMenuElement}\n        className=\"chatResultsContextMenu\"\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        autoClose\n      >\n        <>\n          <MenuItem\n            icon={searchContext === 'all' ? 'check' : undefined}\n            customIcon={searchContext !== 'all' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('all')}\n          >\n            {getSearchContextCaption('all')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'users' ? 'check' : undefined}\n            customIcon={searchContext !== 'users' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('users')}\n          >\n            {getSearchContextCaption('users')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'groups' ? 'check' : undefined}\n            customIcon={searchContext !== 'groups' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('groups')}\n          >\n            {getSearchContextCaption('groups')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'channels' ? 'check' : undefined}\n            customIcon={searchContext !== 'channels' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('channels')}\n          >\n            {getSearchContextCaption('channels')}\n          </MenuItem>\n        </>\n      </Menu>\n    );\n  }\n\n  const localResults = useMemo(() => {\n    if (!isChannelList && (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2))) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const orderedChatIds = getOrderedIds(ALL_FOLDER_ID) ?? [];\n    const filteredChatIds = orderedChatIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n    const localChatIds = filterPeersByQuery({ ids: filteredChatIds, query: searchQuery, type: 'chat' });\n\n    if (isChannelList) return localChatIds;\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(contactIds || []),\n    ];\n\n    const localContactIds = filterPeersByQuery({\n      ids: contactIdsWithMe, query: searchQuery, type: 'user',\n    });\n\n    const localPeerIds = [\n      ...localContactIds,\n      ...localChatIds,\n    ];\n\n    return unique([\n      ...sortChatIds(localPeerIds, undefined, currentUserId ? [currentUserId] : undefined),\n      ...sortChatIds(accountPeerIds || []),\n    ]);\n  }, [searchQuery, currentUserId, contactIds, accountPeerIds, isChannelList]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length || isChannelList, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalPeerIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const filteredIds = globalPeerIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n\n    return sortChatIds(filteredIds, true);\n  }, [globalPeerIds, isChannelList, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n        const chat = chatsById[chatId];\n        if (!chat) return undefined;\n        if (isChannelList && !isChatChannel(chat)) return undefined;\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean);\n  }, [searchQuery, searchDate, foundIds, isChannelList, globalMessagesByChatId]);\n\n  useEffect(() => {\n    if (!searchQuery) return;\n    searchMessagesGlobal({\n      type: isChannelList ? 'channels' : 'text',\n      context: searchContext,\n      shouldResetResultsByType: true,\n      shouldCheckFetchingMessagesStatus: true,\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [searchContext]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const chatsById = getGlobal().chats.byId;\n\n    const text = renderMessageSummary(oldLang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const actualFoundIds = foundMessages;\n\n  const nothingFound = searchContext === 'all' && fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !actualFoundIds.length;\n  const isMessagesFetching = fetchingStatus?.messages;\n\n  const shouldRenderTopPeers = !searchQuery && !searchDate && !isChannelList;\n\n  const { observe } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n    isDisabled: !shouldRenderTopPeers,\n  });\n\n  if (shouldRenderTopPeers) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  const shouldRenderMessagesSection = searchContext === 'all' ? Boolean(actualFoundIds.length) : true;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"LeftSearch--content custom-scroll\"\n      items={actualFoundIds}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          withSticker\n          text={oldLang('ChatList.Search.NoResults')}\n          description={oldLang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && !isChannelList && (\n        <div\n          className=\"chat-selection no-scrollbar\"\n          dir={oldLang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PeerChip\n              peerId={id}\n              className=\"left-search-local-suggestion\"\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {oldLang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {oldLang(isChannelList ? 'SearchMyChannels' : 'DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                withOpenAppButton\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {oldLang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {oldLang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {sponsoredPeer && (\n            <LeftSearchResultSponsored sponsoredPeer={sponsoredPeer} observeIntersection={observe} />\n          )}\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(suggestedChannelIds?.length) && !searchQuery && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {oldLang('SearchRecommendedChannels')}\n          </h3>\n          {suggestedChannelIds.map((id) => {\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      <div className=\"menuOwner\" ref={ref}>\n        {renderContextMenu()}\n        {shouldRenderMessagesSection && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n              {!isChannelList && (\n                <Link className=\"Link menuTrigger dropDownLink\" onClick={handleClickContext}>\n                  {lang('SearchContextCaption', {\n                    type: getSearchContextCaption(searchContext),\n                  }, {\n                    withNodes: true,\n                  })}\n\n                  <Transition\n                    name=\"fade\"\n                    shouldCleanup\n                    activeKey={Number(isMessagesFetching)}\n                    className=\"iconContainer\"\n                    slideClassName=\"iconContainerSlide\"\n                  >\n                    {isMessagesFetching && (<Loading />)}\n                    {!isMessagesFetching && <Icon name=\"down\" />}\n                  </Transition>\n                </Link>\n              )}\n              {oldLang('SearchMessages')}\n            </h3>\n            {actualFoundIds.map(renderFoundMessage)}\n          </div>\n        )}\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isChannelList }): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const {\n      currentUserId, messages,\n    } = global;\n\n    if (!contactIds) {\n      return {};\n    }\n\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType, sponsoredPeer,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: accountPeerIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.[isChannelList ? 'channels' : 'text']?.foundIds;\n    const { similarChannelIds } = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID) || {};\n\n    return {\n      currentUserId,\n      contactIds,\n      accountPeerIds,\n      globalPeerIds,\n      foundIds,\n      globalMessagesByChatId,\n      fetchingStatus,\n      sponsoredPeer,\n      suggestedChannelIds: similarChannelIds,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading, getMessageDocument } from '../../../global/helpers';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Document from '../../common/Document';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  shouldWarnAboutSvg,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n      const message = globalMessagesByChatId[chatId]?.byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              dir={lang.isRtl ? 'rtl' : undefined}\n              key={message.date}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Document\n              document={getMessageDocument(message)!}\n              message={message}\n              withDate\n              datetime={message.date}\n              smaller\n              sender={getSenderName(lang, message, chatsById, usersById)}\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, message.content.document!)}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport WebLink from '../../common/WebLink';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            dir={lang.isRtl ? 'rtl' : undefined}\n            key={message.id}\n          >\n            <WebLink\n              key={message.id}\n              message={message}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              isProtected={isChatProtected || message.isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Media from '../../common/Media';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport ChatMessage from './ChatMessage';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content LeftSearch--media\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className={classNames}\n        items={canRenderContents ? foundMessages : undefined}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"fHc6WtIe\",\"content\":\"N8GlyYo0\",\"loadingScreen\":\"l7JTscdP\",\"searchButtonContent\":\"dqfofU9e\",\"sticker\":\"bhaEA7Az\",\"title\":\"HkiOz0kI\",\"description\":\"B5FR0TSV\",\"searchButton\":\"Ii0w2ObZ\",\"remainingSearches\":\"fYxU7PVl\",\"searchIcon\":\"NMdA935k\",\"searchIconWithNext\":\"NqAG2PXY\",\"searchQuery\":\"eRsI0lkH\",\"limitTitle\":\"uAggPEqN\",\"limitDescription\":\"oirV9yqd\",\"paidSearchButton\":\"LMu5PMXS\",\"freeSearchUnlock\":\"IdgXsecy\",\"premiumTitle\":\"SBmNHjsL\",\"premiumDescription\":\"KoW3G8Sv\",\"subscribePremiumButton\":\"tGWjYFeK\",\"premiumSubtitle\":\"o2V6uF3Y\"};","import { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSearchPostsFlood } from '../../../api/types';\n\nimport {\n  PUBLIC_POSTS_SEARCH_DEFAULT_STARS_AMOUNT,\n  PUBLIC_POSTS_SEARCH_DEFAULT_TOTAL_DAILY,\n} from '../../../config';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_PREVIEW_URLS, LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport { useTransitionActiveKey } from '../../../hooks/animations/useTransitionActiveKey';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport TextTimer from '../../ui/TextTimer';\nimport Transition from '../../ui/Transition';\n\nimport styles from './PublicPostsSearchLauncher.module.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  searchFlood?: ApiSearchPostsFlood;\n  onSearch: () => void;\n  isLoading?: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  starsBalance: number;\n};\n\nconst WAIT_DELAY = 2;\n\nconst PublicPostsSearchLauncher = ({\n  searchQuery,\n  searchFlood,\n  onSearch,\n  isLoading,\n  isCurrentUserPremium,\n  starsBalance,\n}: OwnProps & StateProps) => {\n  const lang = useLang();\n  const queryIsFree = searchFlood?.queryIsFree;\n  const queryFromFlood = searchFlood?.query;\n\n  const searchButtonActiveKey = useTransitionActiveKey([searchQuery?.slice(0, 18).trimEnd()]);\n\n  const handleSearchClick = useLastCallback(() => {\n    onSearch();\n  });\n\n  useEffect(() => {\n    if (queryIsFree && searchQuery && queryFromFlood === searchQuery) {\n      onSearch();\n    }\n  }, [queryIsFree, searchQuery, queryFromFlood, onSearch]);\n\n  const handlePaidSearchClick = useLastCallback(() => {\n    const starsAmount = searchFlood?.starsAmount || 0;\n    const currentBalance = starsBalance;\n\n    if (currentBalance < starsAmount) {\n      openStarsBalanceModal({\n        topup: {\n          balanceNeeded: starsAmount,\n        },\n      });\n    } else {\n      onSearch();\n    }\n  });\n\n  const {\n    checkSearchPostsFlood,\n    openPremiumModal,\n    openStarsBalanceModal,\n  } = getActions();\n\n  const onCheckFlood = useLastCallback(() => {\n    checkSearchPostsFlood({});\n  });\n\n  const handleSubscribePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const renderLimitReached = () => {\n    const waitTill = searchFlood?.waitTill;\n    const starsAmount = searchFlood?.starsAmount || PUBLIC_POSTS_SEARCH_DEFAULT_STARS_AMOUNT;\n    const totalDaily = searchFlood?.totalDaily || PUBLIC_POSTS_SEARCH_DEFAULT_TOTAL_DAILY;\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <AnimatedIconWithPreview\n            className={styles.sticker}\n            size={120}\n            tgsUrl={LOCAL_TGS_URLS.Search}\n            previewUrl={LOCAL_TGS_PREVIEW_URLS.Search}\n            nonInteractive\n            noLoop={false}\n          />\n          <div className={styles.limitTitle}>\n            {lang('PublicPostsLimitReached')}\n          </div>\n          <div className={styles.limitDescription}>\n            {lang('HintPublicPostsSearchQuota', { count: totalDaily }, { pluralValue: totalDaily })}\n          </div>\n          <Button\n            className={styles.paidSearchButton}\n            color=\"primary\"\n            size=\"smaller\"\n            disabled={!searchQuery}\n            noForcedUpperCase\n            onClick={handlePaidSearchClick}\n          >\n            {lang('PublicPostsSearchForStars', {\n              stars: formatStarsAsIcon(lang, starsAmount, { asFont: true }),\n            }, { withNodes: true })}\n          </Button>\n          {Boolean(waitTill) && (\n            <div className={styles.freeSearchUnlock}>\n              <TextTimer\n                langKey=\"UnlockTimerPublicPostsSearch\"\n                endsAt={waitTill + WAIT_DELAY}\n                onEnd={onCheckFlood}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const renderSearchButton = () => {\n    const remainingSearches = searchFlood?.remains || 0;\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <AnimatedIconWithPreview\n            className={styles.sticker}\n            size={120}\n            tgsUrl={LOCAL_TGS_URLS.Search}\n            previewUrl={LOCAL_TGS_PREVIEW_URLS.Search}\n            nonInteractive\n            noLoop={false}\n          />\n          <div className={styles.title}>\n            {lang('GlobalSearch')}\n          </div>\n          <div className={styles.description}>\n            {lang('DescriptionPublicPostsSearch')}\n          </div>\n          <Button\n            className={styles.searchButton}\n            color=\"primary\"\n            size=\"smaller\"\n            noForcedUpperCase\n            disabled={!searchQuery}\n            onClick={handleSearchClick}\n          >\n            <Transition\n              name=\"fade\"\n              activeKey={searchButtonActiveKey}\n            >\n              <div className={styles.searchButtonContent}>\n                <Icon\n                  name=\"search\"\n                  className={\n                    buildClassName(styles.searchIcon,\n                      searchQuery && styles.searchIconWithNext)\n                  }\n                />\n                {lang('ButtonSearchPublicPosts', {\n                  query: searchQuery ? <span className={styles.searchQuery}>{searchQuery}</span> : '',\n                }, { withNodes: true })}\n                {searchQuery && <Icon name=\"next\" className={styles.nextIcon} />}\n              </div>\n            </Transition>\n          </Button>\n          <div className={styles.remainingSearches}>\n            {lang('RemainingPublicPostsSearch', { count: remainingSearches }, { pluralValue: remainingSearches })}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderPremiumRequired = () => {\n    return (\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <div className={styles.premiumTitle}>\n            {lang('GlobalSearch')}\n          </div>\n          <div className={styles.premiumDescription}>\n            {lang('PublicPostsPremiumFeatureDescription')}\n          </div>\n          <Button\n            className={styles.subscribePremiumButton}\n            color=\"primary\"\n            size=\"smaller\"\n            noForcedUpperCase\n            onClick={handleSubscribePremiumClick}\n          >\n            {lang('PublicPostsSubscribeToPremium')}\n          </Button>\n          <div className={styles.premiumSubtitle}>\n            {lang('PublicPostsPremiumFeatureSubtitle')}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const serverTime = getServerTime();\n  const shouldRenderPaidScreen = searchFlood?.remains === 0\n    || (searchFlood?.waitTill && searchFlood.waitTill > serverTime);\n\n  const renderLoading = () => {\n    return (\n      <div className={styles.container}>\n        <div className={buildClassName(styles.content, styles.loadingScreen)}>\n          <Loading />\n        </div>\n      </div>\n    );\n  };\n\n  const getActiveKey = () => {\n    if (!isCurrentUserPremium) {\n      return 3;\n    }\n    if (isLoading) {\n      return 2;\n    }\n    if (shouldRenderPaidScreen) {\n      return 0;\n    }\n    return 1;\n  };\n\n  const renderContent = () => {\n    if (!isCurrentUserPremium) {\n      return renderPremiumRequired();\n    }\n    if (isLoading) {\n      return renderLoading();\n    }\n    if (shouldRenderPaidScreen) {\n      return renderLimitReached();\n    }\n    return renderSearchButton();\n  };\n\n  return (\n    <Transition\n      name=\"fade\"\n      activeKey={getActiveKey()}\n    >\n      {renderContent()}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => ({\n  isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  starsBalance: global.stars?.balance?.amount || 0,\n}))(PublicPostsSearchLauncher));\n","import { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiSearchPostsFlood } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Transition from '../../ui/Transition';\nimport ChatMessage from './ChatMessage';\nimport PublicPostsSearchLauncher from './PublicPostsSearchLauncher.tsx';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype StateProps = {\n  foundIds?: SearchResultKey[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  searchFlood?: ApiSearchPostsFlood;\n  shouldShowSearchLauncher?: boolean;\n  isNothingFound?: boolean;\n  isLoading?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst PublicPostsResults = ({\n  searchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  searchFlood,\n  shouldShowSearchLauncher,\n  isNothingFound,\n  isLoading,\n  animationLevel,\n}: OwnProps & StateProps) => {\n  const { searchMessagesGlobal } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const handleSearch = useLastCallback(() => {\n    if (!searchQuery) return;\n\n    searchMessagesGlobal({\n      type: 'publicPosts',\n      shouldResetResultsByType: true,\n    });\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'publicPosts',\n        });\n      });\n    }\n  }, []);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const chatsById = getGlobal().chats.byId;\n\n    const text = renderMessageSummary(oldLang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        key={`${message.chatId}-${message.id}`}\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  return (\n    <Transition\n      name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n      activeKey={shouldShowSearchLauncher || isLoading ? 0 : 1}\n    >\n      {shouldShowSearchLauncher || isLoading ? (\n        <PublicPostsSearchLauncher\n          searchQuery={searchQuery}\n          searchFlood={searchFlood}\n          onSearch={handleSearch}\n          isLoading={isLoading}\n        />\n      ) : (\n        <div className=\"LeftSearch--content\">\n          <InfiniteScroll\n            key={searchQuery}\n            className=\"search-content custom-scroll chat-list\"\n            items={foundMessages}\n            onLoadMore={handleLoadMore}\n            noFastList\n          >\n            {isNothingFound && (\n              <NothingFound\n                text={oldLang('ChatList.Search.NoResults')}\n                description={oldLang('ChatList.Search.NoResultsDescription')}\n                withSticker\n              />\n            )}\n            {Boolean(foundMessages.length) && (\n              <div className=\"pb-2\">\n                <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n                  {lang('PublicPosts')}\n                </h3>\n                {foundMessages.map(renderFoundMessage)}\n              </div>\n            )}\n          </InfiniteScroll>\n        </div>\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { messages: { byChatId: globalMessagesByChatId } } = global;\n    const { resultsByType, searchFlood, fetchingStatus } = selectTabState(global).globalSearch;\n    const publicPostsResult = resultsByType?.publicPosts;\n    const { foundIds } = publicPostsResult || {};\n    const isLoading = Boolean(fetchingStatus?.publicPosts && !publicPostsResult);\n    const shouldShowSearchLauncher = !publicPostsResult && !isLoading;\n    const isNothingFound = publicPostsResult && !foundIds?.length;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return {\n      foundIds,\n      globalMessagesByChatId,\n      searchFlood,\n      shouldShowSearchLauncher,\n      isNothingFound,\n      isLoading,\n      animationLevel,\n    };\n  },\n)(PublicPostsResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { RegularLangKey } from '../../../types/language';\nimport { type AnimationLevel, GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport { parseDateString } from '../../../util/dates/dateFormat';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport AudioResults from './AudioResults';\nimport BotAppResults from './BotAppResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport ChatResults from './ChatResults';\nimport FileResults from './FileResults';\nimport LinkResults from './LinkResults';\nimport MediaResults from './MediaResults';\nimport PublicPostsResults from './PublicPostsResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n  animationLevel: AnimationLevel;\n};\n\ntype TabInfo = {\n  type: GlobalSearchContent;\n  key: RegularLangKey;\n};\n\nconst TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabChats' },\n  { type: GlobalSearchContent.ChannelList, key: 'SearchTabChannels' },\n  { type: GlobalSearchContent.BotApps, key: 'SearchTabApps' },\n  { type: GlobalSearchContent.PublicPosts, key: 'SearchTabPublicPosts' },\n  { type: GlobalSearchContent.Media, key: 'SearchTabMedia' },\n  { type: GlobalSearchContent.Links, key: 'SearchTabLinks' },\n  { type: GlobalSearchContent.Files, key: 'SearchTabFiles' },\n  { type: GlobalSearchContent.Music, key: 'SearchTabMusic' },\n  { type: GlobalSearchContent.Voice, key: 'SearchTabVoice' },\n];\n\nconst CHAT_TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabMessages' },\n  ...TABS.slice(3), // Skip ChatList, ChannelList and BotApps, replaced with All Messages\n];\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n    checkSearchPostsFlood,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  useEffect(() => {\n    if (isActive) {\n      checkSearchPostsFlood({});\n    }\n  }, [isActive]);\n\n  const tabs = useMemo(() => {\n    const arr = chatId ? CHAT_TABS : TABS;\n    return arr.map((tab) => ({\n      ...tab,\n      title: lang(tab.key),\n    }));\n  }, [chatId, lang]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    const tab = tabs[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  });\n\n  const handleSearchDateSelect = useLastCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const containerRef = useRef<HTMLDivElement>();\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n        renderCount={tabs.length}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n            case GlobalSearchContent.ChannelList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  isChannelList={currentContent === GlobalSearchContent.ChannelList}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.BotApps:\n              return (\n                <BotAppResults\n                  key=\"botApps\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.PublicPosts:\n              return (\n                <PublicPostsResults\n                  key=\"publicPosts\"\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return { currentContent, chatId, animationLevel };\n  },\n)(LeftSearch));\n","import type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { unique } from '../../../../util/iteratees';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Loading from '../../../ui/Loading';\n\ntype StateProps = {\n  maxChats: number;\n};\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n  maxChats,\n}) => {\n  const lang = useOldLang();\n\n  const { openLimitReachedModal } = getActions();\n\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = useMemo(() => selectChatFilters(state, mode, true), [mode, state]);\n  const chatTypes = mode === 'included' ? CUSTOM_PEER_INCLUDED_CHAT_TYPES : CUSTOM_PEER_EXCLUDED_CHAT_TYPES;\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  const displayedIds = useMemo(() => {\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...filterPeersByQuery({ ids: chatIds, query: chatFilter, type: 'chat' }),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, chatFilter]);\n\n  const handleFilterChange = useLastCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n    setIsTouched(true);\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    if (mode === 'included') {\n      if (ids.length >= maxChats) {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  const handleSelectedChatTypesChange = useLastCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <div className=\"Picker settings-folders-chat-list\">\n      <PeerPicker\n        categories={shouldHideChatTypes ? undefined : chatTypes}\n        itemIds={displayedIds}\n        selectedIds={selectedChatIds}\n        selectedCategories={selectedChatTypes}\n        filterValue={chatFilter}\n        filterPlaceholder={lang('Search')}\n        categoryPlaceholderKey=\"FilterChatTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        withDefaultPadding\n        withPeerTypes\n        allowMultiple\n        itemInputType=\"checkbox\"\n        onSelectedIdsChange={handleSelectedIdsChange}\n        onSelectedCategoriesChange={handleSelectedChatTypesChange}\n        onFilterChange={handleFilterChange}\n      />\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatFilters));\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { selectCanShareFolder } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { isUserId } from '../../../../util/entities/ids';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport Icon from '../../../common/icons/Icon';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n  maxChatLists: number;\n  chatListCount: number;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  maxChatLists,\n  chatListCount,\n  onSaveFolder,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'included'), [state]);\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'excluded'), [state]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (chatListCount >= maxChatLists && !state.folder.isChatList) {\n      openLimitReachedModal({\n        limit: 'chatlistJoined',\n      });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n      return;\n    }\n\n    openLimitReachedModal({\n      limit: 'chatlistInvites',\n    });\n  }, [\n    invites, state.folderId, state.isTouched, chatListCount, maxInviteLinks, isCreating, onSaveFolder,\n    onShareFolder, lang, maxChatLists, state.folder.isChatList,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? CUSTOM_PEER_INCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key)\n      : CUSTOM_PEER_EXCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.type}\n        className=\"settings-folders-list-item mb-1\"\n        narrow\n        inactive\n      >\n        <PrivateChatInfo\n          avatarSize=\"small\"\n          customPeer={chatType}\n        />\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ListItem\n            key=\"load-more\"\n            className=\"settings-folders-list-item\"\n            narrow\n\n            onClick={clickHandler}\n            icon=\"down\"\n          >\n            {lang('FilterShowMoreChats', leftChatsCount, 'i')}\n          </ListItem>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIconWithPreview\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title.text}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary\"\n            icon=\"add\"\n            narrow\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item\"\n              icon=\"link\"\n              narrow\n              multiline\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n    const chatListCount = Object.values(byId).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      chatListCount,\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { isBetween } from '../../../../util/math';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../../hooks/usePreviousDeprecated';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Draggable from '../../../ui/Draggable';\nimport ListItem from '../../../ui/ListItem';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 56;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePreviousDeprecated(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: {\n            text: lang('FilterAllChats'),\n            entities: [],\n          },\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n        noTitleAnimations: folder.noTitleAnimations,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIconWithPreview\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"settings-button with-icon\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <Icon name=\"add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                    allowSelection\n                  >\n                    <span className=\"title\">\n                      {renderTextWithEntities({\n                        text: folder.title.text,\n                        entities: folder.title.entities,\n                        noCustomEmojiPlayback: folder.noTitleAnimations,\n                      })}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                    {isBlocked && <Icon name=\"lock-badge\" className=\"settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <Icon name=\"link\" className=\"mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              narrow\n\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                  </span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { partition } from '../../../../util/iteratees';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Icon from '../../../common/icons/Icon';\nimport LinkField from '../../../common/LinkField';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  folder?: ApiChatFolder;\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  folder,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useLastCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  });\n\n  const itemIds = useMemo(() => {\n    return (folder?.includedChatIds || []).concat(folder?.pinnedChatIds || []);\n  }, [folder?.includedChatIds, folder?.pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useLastCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    if (!folderId || !url || !isTouched) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  });\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        {folder && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('FolderLinkTitleDescription', {\n              folder: renderTextWithEntities({\n                text: folder.title.text,\n                entities: folder.title.entities,\n                noCustomEmojiPlayback: folder.noTitleAnimations,\n              }),\n              chats: lang('FolderLinkTitleDescriptionChats', { count: chatsCount }, { pluralValue: chatsCount }),\n            }, {\n              withMarkdown: true,\n              withNodes: true,\n            })}\n          </p>\n        )}\n      </div>\n\n      <LinkField\n        className=\"settings-item\"\n        link={!url ? oldLang('Loading') : url}\n        withShare\n        onRevoke={handleRevoke}\n        isDisabled={!chatsCount || isTouched}\n      />\n\n      <div className=\"settings-item settings-item-picker\">\n        <PeerPicker\n          itemIds={itemIds}\n          lockedUnselectedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      folder,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n    openSettingsScreen,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  }, [state.mode, dispatch, currentScreen, onReset]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    const newState = dispatch({ type: 'saveFilters' });\n    handleReset();\n    saveState(newState);\n  }, [dispatch, handleReset, saveState]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n  }, [dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n  }, [dispatch]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersIncludedChatsFromChatList\n        : SettingsScreens.FoldersIncludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersExcludedChatsFromChatList\n        : SettingsScreens.FoldersExcludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [dispatch, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PasswordForm from '../../common/PasswordForm';\nimport PasswordMonkey from '../../common/PasswordMonkey';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useOldLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent })}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeTurnOff })}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram Web A.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram Web A and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { decryptSession } from '../../../../util/passcode';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n  }, [onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeCongratulations });\n  }, [onSetPasscode, passcode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onSetPasscode]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      openSettingsScreen({ screen: SettingsScreens.Privacy });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsText } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../icons/Icon';\n\ntype OwnProps = {\n  min?: number;\n  max: number;\n  value: number;\n  disabled?: boolean;\n  readOnly?: boolean;\n  bold?: boolean;\n  className?: string;\n  defaultValue: number;\n  onChange: (value: number) => void;\n  canChangeChargeForMessages?: boolean;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst PaidMessageSlider: FC<OwnProps> = ({\n  min = 0,\n  max,\n  value,\n  disabled,\n  readOnly,\n  bold,\n  className,\n  defaultValue,\n  onChange,\n  canChangeChargeForMessages,\n}) => {\n  const lang = useLang();\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < max) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= max) {\n        result.push(max);\n        break;\n      }\n    }\n\n    return result;\n  }, [max]);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    onChange(getValue(points, newValue));\n  });\n\n  const mainClassName = buildClassName(\n    className,\n    'RangeSlider',\n    disabled && 'disabled',\n    readOnly && 'readOnly',\n    bold && 'bold',\n  );\n\n  function renderTopRow() {\n    return (\n      <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"value-min\" dir=\"auto\">{lang.number(min)}</span>\n        <span className=\"settings-range-value\">\n          {!canChangeChargeForMessages && (<Icon name=\"lock-badge\" />)}\n          {formatStarsAsText(lang, getValue(points, getProgress(points, value)))}\n        </span>\n        <span className=\"value-max\" dir=\"auto\">{lang.number(max)}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className={mainClassName}>\n      {renderTopRow()}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          style={`width: ${(getProgress(points, value) / points.length) * 100}%`}\n        />\n        <input\n          min={0}\n          max={points.length}\n          defaultValue={getProgress(points, defaultValue)}\n          step=\"any\"\n          type=\"range\"\n          className=\"RangeSlider__input\"\n          onChange={handleChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const pointValue = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return pointValue < 100 ? Math.round(pointValue) : Math.round(pointValue / 10) * 10;\n}\n\nexport default memo(PaidMessageSlider);\n","import {\n  memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n  MINIMUM_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPercent } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Icon from '../icons/Icon';\nimport PaidMessageSlider from './PaidMessageSlider';\n\ntype OwnProps = {\n  chargeForMessages: number;\n  canChangeChargeForMessages?: boolean;\n  isGroupChat?: boolean;\n  onChange: (value: number) => void;\n};\n\ntype StateProps = {\n  starsUsdWithdrawRate: number;\n  starsPaidMessageAmountMax: number;\n  starsPaidMessageCommissionPermille: number;\n};\n\nfunction PaidMessagePrice({\n  starsUsdWithdrawRate,\n  starsPaidMessageAmountMax,\n  starsPaidMessageCommissionPermille,\n  canChangeChargeForMessages,\n  isGroupChat,\n  chargeForMessages,\n  onChange,\n}: OwnProps & StateProps) {\n  const { openPremiumModal } = getActions();\n\n  const lang = useLang();\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    onChange?.(value);\n  });\n\n  const handleUnlockWithPremium = useLastCallback(() => {\n    openPremiumModal({ initialSection: 'message_privacy' });\n  });\n\n  return (\n    <>\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('SectionTitleStarsForForMessages')}\n      </h4>\n      <PaidMessageSlider\n        defaultValue={chargeForMessages}\n        min={MINIMUM_CHARGE_FOR_MESSAGES}\n        max={starsPaidMessageAmountMax}\n        value={chargeForMessages}\n        onChange={handleChargeForMessagesChange}\n        canChangeChargeForMessages={canChangeChargeForMessages}\n        readOnly={!canChangeChargeForMessages}\n      />\n      {!canChangeChargeForMessages && (\n        <Button\n          color=\"primary\"\n          fluid\n          size=\"smaller\"\n          noForcedUpperCase\n          className=\"settings-unlock-button\"\n          onClick={handleUnlockWithPremium}\n        >\n          <span className=\"settings-unlock-button-title\">\n            {lang('UnlockButtonTitle')}\n            <Icon name=\"lock-badge\" className=\"settings-unlock-button-icon\" />\n          </span>\n        </Button>\n      )}\n      {canChangeChargeForMessages && (\n        <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang(isGroupChat ? 'SetPriceGroupDescription' : 'SectionDescriptionStarsForForMessages', {\n            percent: formatPercent(starsPaidMessageCommissionPermille * 100),\n            amount: formatCurrencyAsString(\n              chargeForMessages * starsUsdWithdrawRate * starsPaidMessageCommissionPermille,\n              'USD',\n              lang.code,\n            ),\n          }, {\n            withNodes: true,\n          })}\n        </p>\n      )}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const starsUsdWithdrawRateX1000 = global.appConfig?.starsUsdWithdrawRateX1000;\n    const starsUsdWithdrawRate = starsUsdWithdrawRateX1000 ? starsUsdWithdrawRateX1000 / 1000 : 1;\n    const configStarsPaidMessageCommissionPermille = global.appConfig?.starsPaidMessageCommissionPermille;\n    const starsPaidMessageCommissionPermille = configStarsPaidMessageCommissionPermille\n      ? configStarsPaidMessageCommissionPermille / 1000 : 100;\n\n    return {\n      starsPaidMessageCommissionPermille,\n      starsUsdWithdrawRate,\n      starsPaidMessageAmountMax: global.appConfig?.starsPaidMessageAmountMax || DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(PaidMessagePrice));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPremiumSection } from '../../../api/types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  premiumSection?: ApiPremiumSection;\n};\n\nfunction PremiumStatusItem({ premiumSection }: OwnProps) {\n  const { openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal({ initialSection: premiumSection }));\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n        onClick={handleOpenPremiumModal}\n      >\n        {lang('PrivacyLastSeenPremium')}\n      </ListItem>\n      <p\n        className=\"settings-item-description-larger premium-info\"\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {lang('lng_messages_privacy_premium_about')}\n      </p>\n    </div>\n  );\n}\n\nexport default memo(PremiumStatusItem);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './PrivacyLockedOption.module.scss';\n\ntype OwnProps = {\n  label: string;\n  isChecked?: boolean;\n};\n\nfunction PrivacyLockedOption({ label, isChecked }: OwnProps) {\n  const lang = useOldLang();\n  const { showNotification } = getActions();\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        isChecked && styles.checked,\n      )}\n      onClick={() => showNotification({ message: lang('OptionPremiumRequiredMessage') })}\n    >\n      <span>{label}</span>\n      <Icon name=\"lock-badge\" className={styles.lockIcon} />\n    </div>\n  );\n}\n\nexport default memo(PrivacyLockedOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sBptmiga\",\"lock-icon\":\"jWxrRbkh\",\"lockIcon\":\"jWxrRbkh\",\"checked\":\"U_6O1ebL\"};","import {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectNewNoncontactPeersRequirePremium,\n  selectNonContactPeersPaidStars,\n} from '../../../global/selectors';\n\nimport useDebouncedCallback from '../../../hooks/useDebouncedCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages?: boolean;\n  canLimitNewMessagesWithoutPremium?: boolean;\n  canChargeForMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  nonContactPeersPaidStars: number;\n  noPaidReactionsForUsersCount: number;\n  privacy: GlobalState['settings']['privacy'];\n};\n\nfunction PrivacyMessages({\n  isActive,\n  canLimitNewMessagesWithoutPremium,\n  canChargeForMessages,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  nonContactPeersPaidStars,\n  isCurrentUserPremium,\n  noPaidReactionsForUsersCount,\n  onReset,\n  privacy,\n}: OwnProps & StateProps) {\n  const { updateGlobalPrivacySettings, openSettingsScreen, showNotification } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const canChangeForContactsAndPremium = isCurrentUserPremium || canLimitNewMessagesWithoutPremium;\n  const canChangeChargeForMessages = isCurrentUserPremium && canChargeForMessages;\n  const [chargeForMessages, setChargeForMessages] = useState<number>(nonContactPeersPaidStars);\n  const [hasShownNotification, setHasShownNotification] = useState(false);\n\n  const selectedValue = useMemo(() => {\n    if (shouldChargeForMessages) return 'charge_for_messages';\n    if (shouldNewNonContactPeersRequirePremium) return 'contacts_and_premium';\n    return 'everybody';\n  }, [shouldChargeForMessages, shouldNewNonContactPeersRequirePremium]);\n\n  useEffectWithPrevDeps(([prevSelectedValue]) => {\n    if (\n      !hasShownNotification && prevSelectedValue !== undefined\n      && selectedValue !== 'everybody'\n      && selectedValue !== prevSelectedValue\n    ) {\n      if (privacy.chatInvite?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyInviteText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyGroupChats },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      if (privacy.phoneCall?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyCallsText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyPhoneCall },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      setHasShownNotification(true);\n    }\n  }, [selectedValue, shouldChargeForMessages, privacy, lang, hasShownNotification]);\n\n  const options = useMemo(() => {\n    return [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts_and_premium',\n        label: canChangeForContactsAndPremium ? (\n          oldLang('PrivacyMessagesContactsAndPremium')\n        ) : (\n          <PrivacyLockedOption\n            label={oldLang('PrivacyMessagesContactsAndPremium')}\n            isChecked={selectedValue === 'contacts_and_premium'}\n          />\n        ),\n        hidden: !canChangeForContactsAndPremium,\n        isCanCheckedInDisabled: true,\n      },\n      {\n        value: 'charge_for_messages',\n        label: canChangeChargeForMessages ? (\n          lang('PrivacyChargeForMessages')\n        ) : (\n          <PrivacyLockedOption\n            label={lang('PrivacyChargeForMessages')}\n            isChecked={selectedValue === 'charge_for_messages'}\n          />\n        ),\n        hidden: !canChangeChargeForMessages,\n        isCanCheckedInDisabled: true,\n      },\n    ];\n  }, [oldLang, lang, canChangeForContactsAndPremium, canChangeChargeForMessages, selectedValue]);\n\n  const handleChange = useLastCallback((privacyValue: string) => {\n    updateGlobalPrivacySettings({\n      shouldNewNonContactPeersRequirePremium: privacyValue === 'contacts_and_premium',\n      // eslint-disable-next-line no-null/no-null\n      nonContactPeersPaidStars: privacyValue === 'charge_for_messages' ? chargeForMessages : null,\n    });\n  });\n\n  const updateGlobalPrivacySettingsWithDebounced = useDebouncedCallback((value: number) => {\n    updateGlobalPrivacySettings({\n      nonContactPeersPaidStars: value,\n    });\n  }, [updateGlobalPrivacySettings], 300, true);\n\n  const handleChargeForMessagesChange = useCallback((value: number) => {\n    setChargeForMessages(value);\n    updateGlobalPrivacySettingsWithDebounced(value);\n  }, [setChargeForMessages, updateGlobalPrivacySettingsWithDebounced]);\n\n  function renderSectionNoPaidMessagesForUsers() {\n    const itemSubtitle = !noPaidReactionsForUsersCount ? lang('SubtitlePrivacyAddUsers')\n      : oldLang('Users', noPaidReactionsForUsersCount, 'i');\n\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('RemoveFeeTitle')}\n        </h4>\n        <ListItem\n          narrow\n          icon=\"delete-user\"\n\n          onClick={() => {\n            openSettingsScreen({ screen: SettingsScreens.PrivacyNoPaidMessages });\n          }}\n        >\n          <div className=\"multiline-item full-size\">\n            <span className=\"title\">{lang('ExceptionTitlePrivacyChargeForMessages')}</span>\n            <span className=\"subtitle\">\n              {\n                itemSubtitle\n              }\n            </span>\n          </div>\n        </ListItem>\n      </div>\n    );\n  }\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const privacyDescription = useMemo(() => {\n    if (shouldChargeForMessages) return lang('PrivacyDescriptionChargeForMessages');\n    return lang('PrivacyDescriptionMessagesContactsAndPremium');\n  }, [shouldChargeForMessages, lang]);\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('PrivacyMessagesTitle')}\n        </h4>\n        <RadioGroup\n          name=\"privacy-messages\"\n          options={options}\n          onChange={handleChange}\n          selected={selectedValue}\n        />\n        <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {privacyDescription}\n        </p>\n      </div>\n      {selectedValue === 'charge_for_messages' && (\n        <div className=\"settings-item fluid-container\">\n          <PaidMessagePrice\n            canChangeChargeForMessages={canChangeChargeForMessages}\n            chargeForMessages={chargeForMessages}\n            onChange={handleChargeForMessagesChange}\n          />\n        </div>\n      )}\n      {canChangeChargeForMessages && selectedValue === 'charge_for_messages' && renderSectionNoPaidMessagesForUsers()}\n      {!isCurrentUserPremium && selectedValue !== 'charge_for_messages'\n        && <PremiumStatusItem premiumSection=\"message_privacy\" />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    settings: {\n      privacy,\n    },\n  } = global;\n  const nonContactPeersPaidStars = selectNonContactPeersPaidStars(global);\n\n  const noPaidReactionsForUsersCount = global.settings.privacy.noPaidMessages?.allowUserIds.length || 0;\n\n  return {\n    shouldNewNonContactPeersRequirePremium: selectNewNoncontactPeersRequirePremium(global),\n    shouldChargeForMessages: Boolean(nonContactPeersPaidStars),\n    nonContactPeersPaidStars: nonContactPeersPaidStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    canLimitNewMessagesWithoutPremium: global.appConfig?.canLimitNewMessagesWithoutPremium,\n    canChargeForMessages: global.appConfig?.starsPaidMessagesAvailable,\n    noPaidReactionsForUsersCount,\n    privacy,\n  };\n})(PrivacyMessages));\n","import type { ApiSession } from '../../../../api/types';\nimport type { DeviceType } from '../../../../types/icons/device';\n\nexport default function getSessionIcon(session: ApiSession): DeviceType {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"M84mrPgu\",\"settingsActiveSession\":\"M84mrPgu\",\"iconDevice\":\"Add8P_K4\",\"iconDevice__android\":\"onkXVGY4\",\"iconDeviceAndroid\":\"onkXVGY4\",\"iconDevice__apple\":\"xw13aT8u\",\"iconDeviceApple\":\"xw13aT8u\",\"iconDevice__brave\":\"HESrGUdv\",\"iconDeviceBrave\":\"HESrGUdv\",\"iconDevice__chrome\":\"Vpej7wm7\",\"iconDeviceChrome\":\"Vpej7wm7\",\"iconDevice__edge\":\"ueWE77x9\",\"iconDeviceEdge\":\"ueWE77x9\",\"iconDevice__firefox\":\"_lMTmvya\",\"iconDeviceFirefox\":\"_lMTmvya\",\"iconDevice__linux\":\"cDVfvyG_\",\"iconDeviceLinux\":\"cDVfvyG_\",\"iconDevice__opera\":\"nWqlTxZt\",\"iconDeviceOpera\":\"nWqlTxZt\",\"iconDevice__safari\":\"ldFLp1Gf\",\"iconDeviceSafari\":\"ldFLp1Gf\",\"iconDevice__samsung\":\"VHNORBGL\",\"iconDeviceSamsung\":\"VHNORBGL\",\"iconDevice__ubuntu\":\"QBVivtdu\",\"iconDeviceUbuntu\":\"QBVivtdu\",\"iconDevice__unknown\":\"GbjIgrwU\",\"iconDeviceUnknown\":\"GbjIgrwU\",\"iconDevice__vivaldi\":\"yieVnjoI\",\"iconDeviceVivaldi\":\"yieVnjoI\",\"iconDevice__windows\":\"_0dnTFOE\",\"iconDeviceWindows\":\"_0dnTFOE\",\"iconDevice__xbox\":\"fbCjjDpU\",\"iconDeviceXbox\":\"fbCjjDpU\",\"title\":\"c6edjhlh\",\"note\":\"lRqTZAYn\",\"date\":\"oLnN6crs\",\"box\":\"wVEXuPlZ\",\"actionHeader\":\"olQS2T1n\",\"actionName\":\"KuX1APpO\",\"headerButton\":\"VT8pZfMu\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useOldLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName}\n          {' '}\n          {renderingSession?.appVersion}\n          ,\n          {' '}\n          {renderingSession?.platform}\n          {' '}\n          {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)}`} iconClassName=\"icon-device\">\n          <div className=\"multiline-item full-size\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName}\n              {' '}\n              {session.appVersion}\n              ,\n              {' '}\n              {session.platform}\n              {' '}\n              {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">\n              {session.ip}\n              {' '}\n              -\n              {' '}\n              {getLocation(session)}\n            </span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p className=\"settings-item-description-larger\">{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)}`}\n        iconClassName=\"icon-device\"\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName}\n            {' '}\n            {session.appVersion}\n            ,\n            {' '}\n            {session.platform}\n            {' '}\n            {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">\n            {session.ip}\n            {' '}\n            {getLocation(session)}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wd0fmiSY\",\"avatar\":\"OhZHdRsP\",\"title\":\"EQ7__xGn\",\"note\":\"YRYk96ki\",\"box\":\"kmCTIfvf\",\"action-header\":\"qkq5Fa0V\",\"actionHeader\":\"qkq5Fa0V\",\"action-name\":\"zFYUiy13\",\"actionName\":\"zFYUiy13\",\"header-button\":\"lUf0RJ2h\",\"headerButton\":\"lUf0RJ2h\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useOldLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): StateProps => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"v0wP46TR\",\"clear-help\":\"WnnxcARX\",\"clearHelp\":\"WnnxcARX\",\"subtitle\":\"uEUfjByC\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} peer={bot} size=\"tiny\" />\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}\n            ,\n            {session.browser}\n            ,\n            {session.platform}\n          </span>\n          <span className={buildClassName('subtitle', styles.subtitle)}>\n            {session.ip}\n            {' '}\n            {session.region}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\nconst STICKER_SET_CARD_HEIGHT = 56;\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useLastCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  });\n\n  if (!stickerSet?.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      className={buildClassName('StickerSetCard', 'small-icon', className)}\n      style={`height: ${STICKER_SET_CARD_HEIGHT}px;`}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', {\n      limit: lang('FileSizeMB', { count: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] }),\n    });\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettingsContacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsPrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsGroupChats')}\n          checked={canAutoLoadInGroups}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsChannels')}\n          checked={canAutoLoadInChannels}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadFilesTitle'),\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ys1i4ssl\",\"item\":\"skaVPMTF\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { partition } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useOldLang();\n  const language = lang.code || 'en';\n  const [displayedOptions, setDisplayedOptions] = useState<string[]>([]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedOptionList: ItemPickerOption[] = useMemo(() => {\n    const options = SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).filter(Boolean).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n\n    if (!searchQuery.trim()) {\n      const currentLanguageOption = options.find((option) => option.value === language);\n      const otherOptionList = options.filter((option) => option.value !== language);\n      return currentLanguageOption ? [currentLanguageOption, ...otherOptionList] : options;\n    }\n\n    return options?.filter((option) => option.label.toLowerCase().includes(searchQuery.toLowerCase()));\n  }, [language, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive, prevLanguage]) => {\n    if (prevIsActive === isActive && prevLanguage?.find((option) => option === language)) return;\n    const [selected] = partition(displayedOptionList, (option) => doNotTranslate.includes(option.value));\n    setDisplayedOptions([...selected.map((option) => option.value)]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, displayedOptionList]);\n\n  const handleChange = useLastCallback((newSelectedIds: string[]) => {\n    setDisplayedOptions(newSelectedIds);\n    setSettingOption({\n      doNotTranslate: newSelectedIds,\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content infinite-scroll')}>\n      <div className={buildClassName(styles.item)}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedOptionList}\n          selectedValues={displayedOptions}\n          onSelectedValuesChange={handleChange}\n          filterValue={searchQuery}\n          onFilterChange={setSearchQuery}\n          isSearchable\n          allowMultiple\n          withDefaultPadding\n          itemInputType=\"checkbox\"\n          searchInputId=\"lang-picker-search\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUsername } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { isBetween } from '../../util/math';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 56;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useOldLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePreviousDeprecated(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (!usernameForConfirm) {\n      return;\n    }\n\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">\n                    @\n                    {usernameData.username}\n                  </span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PaO1MMi5\",\"header\":\"wSswdVkR\",\"description\":\"oiJc22Aj\",\"sortableContainer\":\"lAeeBh9K\",\"item\":\"l04OwRBg\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  isUsernameValid, MAX_USERNAME_LENGTH, MIN_UPDATE_USERNAME_LENGTH, USERNAME_REGEX,\n} from '../../util/entities/username';\nimport { debounce } from '../../util/schedulers';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useOldLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_UPDATE_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    // Prevent prefix editing\n    if (asLink && !value.match(LINK_PREFIX_REGEX)) {\n      if (!value.length) {\n        setUsername('');\n        onChange?.('');\n      }\n      return;\n    }\n    const newUsername = value.replace(LINK_PREFIX_REGEX, '');\n\n    setUsername(newUsername);\n\n    const isValid = newUsername === '' ? true : isUsernameValid(newUsername, true);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-item\">\n          <div className=\"settings-input\">\n            <AvatarEditable\n              currentAvatarBlobUrl={currentAvatarBlobUrl}\n              onChange={handlePhotoChange}\n              title=\"Edit your profile photo\"\n              disabled={isLoading}\n            />\n            <InputText\n              value={firstName}\n              onChange={handleFirstNameChange}\n              label={lang('FirstName')}\n              disabled={isLoading}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              value={lastName}\n              onChange={handleLastNameChange}\n              label={lang('LastName')}\n              disabled={isLoading}\n            />\n            <TextArea\n              value={bio}\n              onChange={handleBioChange}\n              label={lang('UserBio')}\n              disabled={isLoading}\n              maxLength={maxBioLength}\n              maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n            />\n          </div>\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <div className=\"settings-input\">\n            <UsernameInput\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n          </div>\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}\n              <br />\n              <span className=\"username-link\">\n                {TME_LINK_PREFIX}\n                {editableUsername}\n              </span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser;\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { DEBUG_LOG_FILENAME } from '../../../config';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_ELECTRON,\n  IS_SNAP_EFFECT_SUPPORTED,\n  IS_WAVE_TRANSFORM_SUPPORTED,\n} from '../../../util/browser/windowEnvironment';\nimport { getDebugLogs } from '../../../util/debugConsole';\nimport download from '../../../util/download';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport { animateSnap } from '../../main/visualEffects/SnapEffectContainer';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldForceHttpTransport?: boolean;\n  shouldAllowHttpTransport?: boolean;\n  shouldCollectDebugLogs?: boolean;\n  shouldDebugExportedSenders?: boolean;\n};\n\nconst SettingsExperimental: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  shouldForceHttpTransport,\n  shouldAllowHttpTransport,\n  shouldCollectDebugLogs,\n  shouldDebugExportedSenders,\n}) => {\n  const { requestConfetti, setSharedSettingOption, requestWave } = getActions();\n\n  const snapButtonRef = useRef<HTMLDivElement>();\n  const [isSnapButtonAnimating, setIsSnapButtonAnimating] = useState(false);\n\n  const lang = useOldLang();\n\n  const [isAutoUpdateEnabled, setIsAutoUpdateEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsAutoUpdateEnabled);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDownloadLog = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    const url = URL.createObjectURL(file);\n    download(url, DEBUG_LOG_FILENAME);\n  });\n\n  const handleIsAutoUpdateEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsAutoUpdateEnabled(isChecked);\n  }, []);\n\n  const handleRequestWave = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    requestWave({ startX: e.clientX, startY: e.clientY });\n  });\n\n  const handleRequestConfetti = useLastCallback(() => {\n    requestConfetti({ withStars: true });\n  });\n\n  const handleSnap = useLastCallback(() => {\n    const button = snapButtonRef.current;\n    if (!button) return;\n\n    if (animateSnap(button)) {\n      setIsSnapButtonAnimating(true);\n      // Manual reset for debug\n      setTimeout(() => {\n        setIsSnapButtonAnimating(false);\n      }, 1500);\n    }\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          onClick={handleRequestConfetti}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n        <ListItem\n          onClick={handleRequestWave}\n          icon=\"story-expired\"\n          disabled={!IS_WAVE_TRANSFORM_SUPPORTED}\n        >\n          <div className=\"title\">Start wave</div>\n        </ListItem>\n        <ListItem\n          ref={snapButtonRef}\n          onClick={handleSnap}\n          icon=\"spoiler\"\n          disabled={!IS_SNAP_EFFECT_SUPPORTED}\n          style={isSnapButtonAnimating ? 'visibility: hidden' : ''}\n        >\n          <div className=\"title\">Vaporize this button</div>\n        </ListItem>\n\n        <Checkbox\n          label=\"Allow HTTP Transport\"\n          checked={Boolean(shouldAllowHttpTransport)}\n\n          onCheck={() => setSharedSettingOption({ shouldAllowHttpTransport: !shouldAllowHttpTransport })}\n        />\n\n        <Checkbox\n          label=\"Force HTTP Transport\"\n          disabled={!shouldAllowHttpTransport}\n          checked={Boolean(shouldForceHttpTransport)}\n\n          onCheck={() => setSharedSettingOption({ shouldForceHttpTransport: !shouldForceHttpTransport })}\n        />\n\n        <Checkbox\n          label={lang('DebugMenuEnableLogs')}\n          checked={Boolean(shouldCollectDebugLogs)}\n\n          onCheck={() => setSharedSettingOption({ shouldCollectDebugLogs: !shouldCollectDebugLogs })}\n        />\n\n        <Checkbox\n          label=\"Enable exported senders debug\"\n          checked={Boolean(shouldDebugExportedSenders)}\n\n          onCheck={() => setSharedSettingOption({ shouldDebugExportedSenders: !shouldDebugExportedSenders })}\n        />\n\n        {IS_ELECTRON && (\n          <Checkbox\n            label=\"Enable autoupdates\"\n            checked={Boolean(isAutoUpdateEnabled)}\n            onCheck={handleIsAutoUpdateEnabledChange}\n          />\n        )}\n\n        <ListItem\n          onClick={handleDownloadLog}\n          icon=\"bug\"\n        >\n          <div className=\"title\">Download log</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    } = selectSharedSettings(global);\n\n    return {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    };\n  },\n)(SettingsExperimental));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { SharedSettings } from '../../../global/types';\nimport type { ThemeKey, TimeFormat } from '../../../types';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_MAC_OS, IS_WINDOWS,\n} from '../../../util/browser/windowEnvironment';\nimport { setTimeFormat } from '../../../util/oldLangProvider';\nimport { getSystemTheme } from '../../../util/systemTheme';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<SharedSettings, (\n    'messageTextSize' |\n    'messageSendKeyCombo' |\n    'timeFormat' |\n    'theme' |\n    'shouldUseSystemTheme'\n  )>;\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n  onReset,\n}) => {\n  const {\n    setSharedSettingOption, openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const timeFormatOptions: IRadioOption[] = [{\n    label: lang('SettingsTimeFormat12'),\n    value: '12h',\n  }, {\n    label: lang('SettingsTimeFormat24'),\n    value: '24h',\n  }];\n\n  const appearanceThemeOptions: IRadioOption[] = [{\n    label: lang('EmptyChatAppearanceLight'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChatAppearanceDark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChatAppearanceSystem'),\n    value: 'auto',\n  }];\n\n  const keyboardSendOptions = !isMobileDevice ? [\n    { value: 'enter', label: lang('SettingsSendEnter'), subLabel: lang('SettingsSendEnterDescription') },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS || IS_IOS ? 'SettingsSendCmdenter' : 'SettingsSendCtrlenter'),\n      subLabel: lang('SettingsSendPlusEnterDescription'),\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSharedSettingOption({ messageTextSize: newSize });\n  }, []);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ThemeKey;\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, []);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSharedSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSharedSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, []);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSharedSettingOption({ messageSendKeyCombo: newCombo as SharedSettings['messageSendKeyCombo'] });\n  }, []);\n\n  const [isTrayIconEnabled, setIsTrayIconEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsTrayIconEnabled().then(setIsTrayIconEnabled);\n  }, []);\n\n  const handleIsTrayIconEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsTrayIconEnabled(isChecked);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Settings')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground })}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n\n        {IS_ELECTRON && IS_WINDOWS && (\n          <Checkbox\n            label={lang('SettingsTray')}\n            checked={Boolean(isTrayIconEnabled)}\n            onCheck={handleIsTrayIconEnabledChange}\n          />\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={appearanceThemeOptions}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsTimeFormat')}\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={timeFormatOptions}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {keyboardSendOptions && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SettingsKeyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={keyboardSendOptions}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      theme,\n      shouldUseSystemTheme,\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n    } = selectSharedSettings(global);\n\n    return {\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\n\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransitionDeprecated(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePreviousDeprecated(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransitionDeprecated(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { validateFiles } from '../../../util/files';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n    openSettingsScreen,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.GeneralChatBackgroundColor });\n  }, []);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = selectThemeValues(global, theme) || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\n\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { captureEvents } from '../../../util/captureEvents';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { pick } from '../../../util/iteratees';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  const containerRef = useRef<HTMLDivElement>();\n  const colorPickerRef = useRef<HTMLDivElement>();\n  const huePickerRef = useRef<HTMLDivElement>();\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: React.RefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: React.RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = selectThemeValues(global, theme) || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    openSettingsScreen({ screen: SettingsScreens.Experimental });\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{oldLang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{oldLang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{oldLang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{oldLang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{oldLang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{oldLang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{oldLang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{oldLang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{oldLang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{oldLang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{oldLang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{oldLang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{oldLang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{oldLang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{oldLang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{oldLang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyBio:\n        return <h3>{oldLang('PrivacyBio')}</h3>;\n      case SettingsScreens.PrivacyBirthday:\n        return <h3>{oldLang('PrivacyBirthday')}</h3>;\n      case SettingsScreens.PrivacyGifts:\n        return <h3>{lang('PrivacyGifts')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{oldLang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{oldLang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyMessages:\n        return <h3>{oldLang('PrivacyMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{oldLang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{oldLang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{oldLang('AlwaysShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{oldLang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{oldLang('AlwaysAllow')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{oldLang('NeverAllow')}</h3>;\n\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return <h3>{lang('RemoveFeeTitle')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('MenuAnimations')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{oldLang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{oldLang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{oldLang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{oldLang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{oldLang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{oldLang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{oldLang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{oldLang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{oldLang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{oldLang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{oldLang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{oldLang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{oldLang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{oldLang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{oldLang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{oldLang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {oldLang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {oldLang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {oldLang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openSettingsScreen({ screen: SettingsScreens.EditProfile })}\n              ariaLabel={oldLang('lng_settings_information')}\n            >\n              <Icon name=\"edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{oldLang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={oldLang('AccDescrGoBack')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={oldLang('lng_sure_logout')}\n        confirmLabel={oldLang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { SharedSettings } from '../../../global/types';\nimport type { AccountSettings, LangCode } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { oldSetLanguage } from '../../../util/oldLangProvider';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n} & Pick<AccountSettings, 'canTranslate' | 'canTranslateChats' | 'doNotTranslate'>\n& Pick<SharedSettings, 'language' | 'languages'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  languages,\n  language,\n  canTranslate,\n  canTranslateChats,\n  doNotTranslate,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n    setSharedSettingOption,\n    openPremiumModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const canTranslateChatsEnabled = isCurrentUserPremium && canTranslateChats;\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!languages?.length) {\n      loadLanguages();\n    }\n  }, [languages]);\n\n  const handleChange = useLastCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void oldSetLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSharedSettingOption({ language: langCode as LangCode });\n    });\n  });\n\n  const options = useMemo(() => {\n    if (!languages) return undefined;\n    const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n    const shortLangCode = currentLangCode.substr(0, 2);\n\n    return languages.map(({ langCode, nativeName, name }) => ({\n      value: langCode,\n      label: nativeName,\n      subLabel: name,\n      isLoading: langCode === selectedLanguage && isLoading,\n    } satisfies ItemPickerOption)).sort((a) => {\n      return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n    });\n  }, [isLoading, languages, selectedLanguage]);\n\n  const handleShouldTranslateChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  });\n\n  const handleShouldTranslateChatsChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslateChats: newValue });\n  });\n\n  const handleShouldTranslateChatsClick = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'translations',\n      });\n    }\n  });\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.DoNotTranslate });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          <Checkbox\n            label={lang('ShowTranslateChatButton')}\n            checked={canTranslateChatsEnabled}\n            disabled={!isCurrentUserPremium}\n            rightIcon={!isCurrentUserPremium ? 'lock' : undefined}\n            onClickLabel={handleShouldTranslateChatsClick}\n            onCheck={handleShouldTranslateChatsChange}\n          />\n          {(canTranslate || canTranslateChatsEnabled) && (\n            <ListItem\n              narrow\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item settings-item-picker\">\n        <h4 className=\"settings-item-header\">\n          {lang('Localization.InterfaceLanguage')}\n        </h4>\n        {options ? (\n          <ItemPicker\n            items={options}\n            selectedValue={selectedLanguage}\n            forceRenderAllItems\n            onSelectedValueChange={handleChange}\n            itemInputType=\"radio\"\n            className=\"settings-picker\"\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      canTranslate, canTranslateChats, doNotTranslate,\n    } = global.settings.byKey;\n    const { language, languages } = selectSharedSettings(global);\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      languages,\n      language,\n      canTranslate,\n      canTranslateChats,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarsAmount, ApiTonAmount } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { FAQ_URL, PRIVACY_URL, TON_CURRENCY_CODE } from '../../../config';\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport {\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectIsPremiumPurchaseBlocked,\n} from '../../../global/selectors';\nimport { convertCurrencyFromBaseUnit } from '../../../util/formatCurrency';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport ChatExtra from '../../common/profile/ChatExtra';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUserId?: string;\n  canBuyPremium?: boolean;\n  isGiveawayAvailable?: boolean;\n  starsBalance?: ApiStarsAmount;\n  tonBalance?: ApiTonAmount;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentUserId,\n  sessionCount,\n  canBuyPremium,\n  isGiveawayAvailable,\n  starsBalance,\n  tonBalance,\n  onReset,\n}) => {\n  const {\n    loadMoreProfilePhotos,\n    openPremiumModal,\n    openSupportChat,\n    openUrl,\n    openGiftRecipientPicker,\n    openStarsBalanceModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [isSupportDialogOpen, openSupportDialog, closeSupportDialog] = useFlag(false);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (currentUserId) {\n      loadMoreProfilePhotos({ peerId: currentUserId, isPreload: true });\n    }\n  }, [currentUserId]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleOpenSupport = useLastCallback(() => {\n    openSupportChat();\n    closeSupportDialog();\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu self-profile\">\n        {currentUserId && (\n          <ProfileInfo\n            peerId={currentUserId}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUserId && (\n          <ChatExtra\n            chatOrUserId={currentUserId}\n            isInSettings\n          />\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"settings\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.General })}\n        >\n          {lang('TelegramGeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Performance })}\n        >\n          {lang('MenuAnimations')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Notifications })}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.DataStorage })}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Privacy })}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Folders })}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveSessions })}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Language })}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.languageInfo.nativeName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Stickers })}\n        >\n          {lang('MenuStickers')}\n        </ListItem>\n      </div>\n      <div className=\"settings-main-menu\">\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n            narrow\n\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"gold\" size=\"big\" />}\n          narrow\n\n          onClick={() => openStarsBalanceModal({})}\n        >\n          {lang('MenuStars')}\n          {Boolean(starsBalance) && (\n            <span className=\"settings-item__current-value\">\n              {formatStarsAmount(lang, starsBalance)}\n            </span>\n          )}\n        </ListItem>\n        <ListItem\n          leftElement={<Icon className=\"icon ListItem-main-icon\" name=\"toncoin\" />}\n          narrow\n          onClick={() => openStarsBalanceModal({ currency: TON_CURRENCY_CODE })}\n        >\n          {lang('MenuTon')}\n          {Boolean(tonBalance) && (\n            <span className=\"settings-item__current-value\">\n              {convertCurrencyFromBaseUnit(tonBalance.amount, tonBalance.currency)}\n            </span>\n          )}\n        </ListItem>\n        {isGiveawayAvailable && (\n          <ListItem\n            icon=\"gift\"\n            narrow\n\n            onClick={() => openGiftRecipientPicker()}\n          >\n            {lang('MenuSendGift')}\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"ask-support\"\n          narrow\n          onClick={openSupportDialog}\n        >\n          {lang('AskAQuestion')}\n        </ListItem>\n        <ListItem\n          icon=\"help\"\n          narrow\n\n          onClick={() => openUrl({ url: FAQ_URL })}\n        >\n          {lang('MenuTelegramFaq')}\n        </ListItem>\n        <ListItem\n          icon=\"privacy-policy\"\n          narrow\n\n          onClick={() => openUrl({ url: PRIVACY_URL })}\n        >\n          {lang('MenuPrivacyPolicy')}\n        </ListItem>\n      </div>\n      <ConfirmDialog\n        isOpen={isSupportDialogOpen}\n        confirmLabel={lang('OK')}\n        title={lang('AskAQuestion')}\n        textParts={lang('MenuAskText', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        confirmHandler={handleOpenSupport}\n        onClose={closeSupportDialog}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const starsBalance = global.stars?.balance;\n    const tonBalance = global.ton?.balance;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUserId,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isGiveawayAvailable,\n      starsBalance,\n      tonBalance,\n    };\n  },\n)(SettingsMain));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNotifyPeerType, ApiPeerNotifySettings } from '../../../api/types';\n\nimport {\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n  playNotifySound,\n} from '../../../util/notifications';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  notifyDefaults?: Record<ApiNotifyPeerType, ApiPeerNotifySettings>;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  notifyDefaults,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: ApiNotifyPeerType,\n    setting: 'mute' | 'showPreviews',\n  ) => {\n    const currentIsMuted = Boolean(notifyDefaults?.[peerType]?.mutedUntil);\n    const currentShouldShowPreviews = Boolean(notifyDefaults?.[peerType]?.shouldShowPreviews);\n\n    updateNotificationSettings({\n      peerType,\n      isMuted: setting === 'mute' ? !e.target.checked : currentIsMuted,\n      shouldShowPreviews: setting === 'showPreviews' ? e.target.checked : currentShouldShowPreviews,\n    });\n  }, [notifyDefaults]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'mute');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NotificationsWeb')}\n        </h4>\n        <Checkbox\n          label={lang('NotificationsWeb')}\n          subLabel={lang(hasWebNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label={lang('NotificationsOffline')}\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          subLabel={areOfflineNotificationsSupported\n            ? lang(hasPushNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')\n            : lang('SettingsOfflineNotificationUnsupported')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label={lang('NotificationsSound')}\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          subLabel={lang(notifyDefaults?.users?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.users?.mutedUntil)}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.users?.mutedUntil}\n          subLabel={lang(notifyDefaults?.users?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.users?.shouldShowPreviews)}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(notifyDefaults?.groups?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.groups?.mutedUntil)}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.groups?.mutedUntil}\n          subLabel={lang(notifyDefaults?.groups?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.groups?.shouldShowPreviews)}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          subLabel={lang(notifyDefaults?.channels?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.channels?.mutedUntil)}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.channels?.mutedUntil}\n          subLabel={lang(notifyDefaults?.channels?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.channels?.shouldShowPreviews)}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MED,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { IS_BACKDROP_BLUR_SUPPORTED, IS_SNAP_EFFECT_SUPPORTED } from '../../../util/browser/windowEnvironment';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype PerformanceSection = [RegularLangKey, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: RegularLangKey;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderMedium',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderCustom',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['SettingsPerformanceInterfaceAnimations', [\n    { key: 'pageTransitions', label: 'SettingsPerformancePageTransitions' },\n    { key: 'messageSendingAnimations', label: 'SettingsPerformanceSending' },\n    { key: 'mediaViewerAnimations', label: 'SettingsPerformanceMediaViewer' },\n    { key: 'messageComposerAnimations', label: 'SettingsPerformanceComposer' },\n    { key: 'contextMenuAnimations', label: 'SettingsPerformanceContextAnimation' },\n    { key: 'contextMenuBlur', label: 'SettingsPerformanceContextBlur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'SettingsPerformanceRightColumn' },\n    { key: 'snapEffect', label: 'SettingsPerformanceThanos' },\n  ]],\n  ['SettingsPerformanceStickers', [\n    { key: 'animatedEmoji', label: 'SettingsPerformanceAnimatedEmoji' },\n    { key: 'loopAnimatedStickers', label: 'SettingsPerformanceLoopStickers' },\n    { key: 'reactionEffects', label: 'SettingsPerformanceReactionEffects' },\n    { key: 'stickerEffects', label: 'SettingsPerformanceStickerEffects' },\n  ]],\n  ['SettingsPerformanceMediaAutoplay', [\n    { key: 'autoplayGifs', label: 'SettingsPerformanceAutoplayGif' },\n    { key: 'autoplayVideos', label: 'SettingsPerformanceAutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSharedSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MED)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n\n  const animationLevelOptions = useMemo(() => {\n    const options = animationLevelState === ANIMATION_LEVEL_CUSTOM\n      ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n      : ANIMATION_LEVEL_OPTIONS;\n\n    return options.map((option) => lang(option));\n  }, [animationLevelState, lang]);\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MED : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel, wasAnimationLevelSetManually: true });\n    updatePerformanceSettings(performance);\n  }, []);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderTitle')}\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderSubtitle')}\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">Resource-Intensive Processes</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => {\n                    if (key === 'snapEffect' && !IS_SNAP_EFFECT_SUPPORTED) return undefined;\n                    return (\n                      <Checkbox\n                        key={key}\n                        name={key}\n                        checked={performanceSettings[key]}\n                        label={lang(label)}\n                        disabled={disabled}\n                        onChange={handlePropertyChange}\n                      />\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport {\n  selectCanSetPasscode, selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages: boolean;\n  canDisplayChatInTitle?: boolean;\n  isCurrentUserFrozen?: boolean;\n  needAgeVideoVerification?: boolean;\n  privacy: GlobalState['settings']['privacy'];\n  accountDaysTtl?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  canDisplayChatInTitle,\n  canSetPasscode,\n  needAgeVideoVerification,\n  privacy,\n  onReset,\n  isCurrentUserFrozen,\n  accountDaysTtl,\n}) => {\n  const {\n    openDeleteAccountModal,\n    loadPrivacySettings,\n    loadBlockedUsers,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    setSharedSettingOption,\n    openSettingsScreen,\n    loadAccountDaysTtl,\n    openAgeVerificationModal,\n  } = getActions();\n\n  useEffect(() => {\n    if (!isCurrentUserFrozen) {\n      loadBlockedUsers();\n      loadPrivacySettings();\n      loadWebAuthorizations();\n    }\n  }, [isCurrentUserFrozen]);\n\n  useEffect(() => {\n    if (isActive && !isCurrentUserFrozen) {\n      loadGlobalPrivacySettings();\n      loadAccountDaysTtl();\n    }\n  }, [isActive, isCurrentUserFrozen, loadGlobalPrivacySettings]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSharedSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings({ isSensitiveEnabled: isChecked });\n  }, [updateContentSettings]);\n\n  const handleAgeVerification = useCallback(() => {\n    openAgeVerificationModal();\n  }, [openAgeVerificationModal]);\n\n  const handleOpenDeleteAccountModal = useLastCallback(() => {\n    if (!accountDaysTtl) return;\n    openDeleteAccountModal({ days: accountDaysTtl });\n  });\n\n  const dayOption = useMemo(() => {\n    if (!accountDaysTtl) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, accountDaysTtl / DAYS_PER_MONTH).toString();\n  }, [accountDaysTtl]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    if (!setting) return oldLang('Loading');\n\n    const { visibility, shouldAllowPremium, botsPrivacy } = setting;\n\n    const isAllowBots = botsPrivacy === 'allow';\n    const isVisibilityEverybody = visibility === 'everybody';\n    const shouldShowBotsString = isAllowBots && !isVisibilityEverybody;\n\n    const blockCount = setting.blockChatIds.length + setting.blockUserIds.length;\n    const allowCount = setting.allowChatIds.length + setting.allowUserIds.length;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount && !isVisibilityEverybody) total.push(`+${allowCount}`);\n\n    const botPrivacyString = shouldShowBotsString ? lang('PrivacyValueBots') : '';\n    const totalString = lang.conjunction(total);\n\n    const exceptionString = [botPrivacyString, totalString].filter(Boolean).join(' ');\n    if (shouldShowBotsString && !isVisibilityEverybody) return exceptionString;\n\n    if (shouldAllowPremium) {\n      return oldLang(exceptionString ? 'ContactsAndPremium' : 'PrivacyPremium');\n    }\n\n    switch (visibility) {\n      case 'everybody':\n        return `${oldLang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${oldLang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${oldLang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBlockedUsers })}\n        >\n          {oldLang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n\n            onClick={() => openSettingsScreen({\n              screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            })}\n          >\n            <div className=\"multiline-item\">\n              <span className=\"title\">{oldLang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {oldLang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({\n            screen: hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {oldLang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveWebsites })}\n          >\n            {oldLang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{oldLang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.lastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.profilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBio })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBio')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.bio)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBirthday')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.birthday)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGifts })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{lang('PrivacyGifts')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.gifts)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.forwards)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          allowDisabledClick\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.voiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {shouldChargeForMessages ? lang('PrivacyPaidMessagesValue')\n                : shouldNewNonContactPeersRequirePremium\n                  ? oldLang('PrivacyMessagesContactsAndPremium')\n                  : oldLang('P2PEverybody')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.chatInvite)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item fluid-container\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={oldLang('lng_settings_sensitive_disable_filtering')}\n            subLabel={oldLang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive || (!isSensitiveEnabled && needAgeVideoVerification)}\n            onCheck={handleUpdateContentSettings}\n          />\n          {!isSensitiveEnabled && needAgeVideoVerification && (\n            <Button\n              color=\"primary\"\n              fluid\n              size=\"smaller\"\n              noForcedUpperCase\n              className=\"settings-unlock-button\"\n              onClick={handleAgeVerification}\n            >\n              <span className=\"settings-unlock-button-title\">\n                {lang('ButtonAgeVerification')}\n              </span>\n            </Button>\n          )}\n        </div>\n      )}\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={oldLang('ArchiveAndMute')}\n            subLabel={oldLang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={oldLang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('DeleteMyAccount')}\n        </h4>\n        <ListItem\n          narrow\n          onClick={handleOpenDeleteAccountModal}\n        >\n          {lang('DeleteAccountIfAwayFor')}\n          <span className=\"settings-item__current-value\">\n            {lang('Months', { count: dayOption }, { pluralValue: 1 })}\n          </span>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          shouldNewNonContactPeersRequirePremium, nonContactPeersPaidStars,\n        },\n        privacy,\n        accountDaysTtl,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    const { canDisplayChatInTitle } = selectSharedSettings(global);\n    const shouldChargeForMessages = Boolean(nonContactPeersPaidStars);\n    const isCurrentUserFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      shouldNewNonContactPeersRequirePremium,\n      shouldChargeForMessages,\n      needAgeVideoVerification: Boolean(appConfig?.needAgeVideoVerification),\n      privacy,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n      isCurrentUserFrozen,\n      accountDaysTtl,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockUser,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterPeersByQuery({ ids: availableContactIds, query: search, type: 'user' })\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    blockUser({ userId });\n    onClose();\n  }, [onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockUser } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((userId: string) => {\n    unblockUser({ userId });\n  }, [unblockUser]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, userId) => {\n      const isPrivate = isUserId(userId);\n      const user = isPrivate ? usersByIds[userId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[userId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = usersByIds[contactId];\n    const chat = chatsByIds[contactId];\n    const peer = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          peer={peer}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {peer && <FullNameTitle peer={peer} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (\n            <div className=\"contact-username\" dir=\"auto\">\n              @\n              {userMainUsername}\n            </div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container settings-item\">\n              {blockedIds.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        className=\"block-user-button\"\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <Icon name=\"add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { ApiPrivacyKey } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyBio:\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return 'bio';\n    case SettingsScreens.PrivacyBirthday:\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return 'birthday';\n    case SettingsScreens.PrivacyGifts:\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return 'gifts';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n    case SettingsScreens.PrivacyAddByPhone:\n      return 'addByPhone';\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return 'noPaidMessages';\n  }\n\n  return undefined;\n}\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiDisallowedGiftsSettings } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\n\ntype StateProps = {\n  disallowedGifts?: ApiDisallowedGiftsSettings;\n  isCurrentUserPremium: boolean;\n};\n\nconst SettingsAcceptedGift = ({\n  disallowedGifts, isCurrentUserPremium,\n}: StateProps) => {\n  const { showNotification, updateGlobalPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const handleOpenTelegramPremiumModal = useLastCallback(() => {\n    showNotification({\n      message: lang('PrivacySubscribeToTelegramPremium'),\n      action: {\n        action: 'openPremiumModal',\n        payload: {},\n      },\n      actionText: { key: 'Open' },\n      icon: 'star',\n    });\n  });\n\n  const handleLimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowLimitedStarGifts: !disallowedGifts?.shouldDisallowLimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUnlimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUnlimitedStarGifts: !disallowedGifts?.shouldDisallowUnlimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUniqueChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUniqueStarGifts: !disallowedGifts?.shouldDisallowUniqueStarGifts || undefined,\n      },\n    });\n  });\n\n  const handlePremiumSubscriptionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowPremiumGifts: !disallowedGifts?.shouldDisallowPremiumGifts || undefined,\n      },\n    });\n  });\n\n  return (\n    <div className=\"settings-item\">\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftTitle')}\n      </h4>\n      <ListItem onClick={handleLimitedEditionChange}>\n        <span>{lang('PrivacyGiftLimitedEdition')}</span>\n        <Switcher\n          id=\"limited_edition\"\n          label={disallowedGifts?.shouldDisallowLimitedStarGifts ? lang('PrivacyDisableLimitedEditionStarGifts')\n            : lang('PrivacyEnableLimitedEditionStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowLimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUnlimitedEditionChange}>\n        <span>{lang('PrivacyGiftUnlimited')}</span>\n        <Switcher\n          id=\"unlimited\"\n          label={disallowedGifts?.shouldDisallowUnlimitedStarGifts ? lang('PrivacyDisableUnlimitedStarGifts')\n            : lang('PrivacyEnableUnlimitedStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUnlimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUniqueChange}>\n        <span>{lang('PrivacyGiftUnique')}</span>\n        <Switcher\n          id=\"unique\"\n          label={disallowedGifts?.shouldDisallowUniqueStarGifts ? lang('PrivacyDisableUniqueStarGifts')\n            : lang('PrivacyEnableUniqueStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUniqueStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handlePremiumSubscriptionChange}>\n        <span>{lang('PrivacyGiftPremiumSubscription')}</span>\n        <Switcher\n          id=\"premium_subscription\"\n          label={disallowedGifts?.shouldDisallowPremiumGifts ? lang('PrivacyDisablePremiumGifts')\n            : lang('PrivacyEnablePremiumGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowPremiumGifts}\n        />\n      </ListItem>\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          disallowedGifts,\n        },\n      },\n    } = global;\n\n    return {\n      disallowedGifts,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsAcceptedGift));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { PrivacyVisibility } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium, selectShouldHideReadMarks } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  visibility?: PrivacyVisibility;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n  shouldHideReadMarks: boolean;\n};\n\nconst SettingsPrivacyLastSeen = ({\n  isCurrentUserPremium, shouldHideReadMarks, visibility,\n}: OwnProps & StateProps) => {\n  const { updateGlobalPrivacySettings, openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const canShowHideReadTime = visibility === 'nobody' || visibility === 'contacts';\n\n  const handleChangeShouldHideReadMarks = useLastCallback(\n    (isEnabled) => updateGlobalPrivacySettings({ shouldHideReadMarks: isEnabled }),\n  );\n\n  const handleOpenPremiumModal = useLastCallback(() => {\n    openPremiumModal({\n      initialSection: 'last_seen',\n    });\n  });\n\n  return (\n    <>\n      {canShowHideReadTime && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('HideReadTime')}\n            checked={shouldHideReadMarks}\n            onCheck={handleChangeShouldHideReadMarks}\n          />\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('HideReadTimeInfo'), ['br'])}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n          onClick={handleOpenPremiumModal}\n        >\n          {isCurrentUserPremium ? lang('PrivacyLastSeenPremiumForPremium') : lang('PrivacyLastSeenPremium')}\n        </ListItem>\n        <p\n          className=\"settings-item-description-larger premium-info\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          {isCurrentUserPremium\n            ? lang('PrivacyLastSeenPremiumInfoForPremium')\n            : lang('PrivacyLastSeenPremiumInfo')}\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldHideReadMarks: Boolean(selectShouldHideReadMarks(global)),\n    };\n  },\n)(SettingsPrivacyLastSeen));\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"Qvhl9Jjv\",\"fallbackPhoto\":\"Qvhl9Jjv\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPhoto } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  const inputRef = useRef<HTMLInputElement>();\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUserId });\n    }\n  }, [hasCurrentUserFullInfo, currentUserId, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        narrow\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          narrow\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiPrivacySettings, BotsPrivacyType } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../../global/selectors';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Switcher from '../../ui/Switcher';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\nimport SettingsAcceptedGift from './SettingsAcceptedGift';\nimport SettingsPrivacyLastSeen from './SettingsPrivacyLastSeen';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n  primaryPrivacy?: ApiPrivacySettings;\n  secondaryPrivacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n  shouldDisplayGiftsButton?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  primaryPrivacy,\n  secondaryPrivacy,\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n  isPremiumRequired,\n  onReset,\n  shouldDisplayGiftsButton,\n  isCurrentUserPremium,\n}) => {\n  const { updateGlobalPrivacySettings, showNotification } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleShowGiftIconInChats = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      showNotification({\n        message: lang('PrivacySubscribeToTelegramPremium'),\n        action: {\n          action: 'openPremiumModal',\n          payload: {},\n        },\n        actionText: { key: 'Open' },\n        icon: 'star',\n      });\n      return;\n    }\n    updateGlobalPrivacySettings({\n      shouldDisplayGiftsButton: !shouldDisplayGiftsButton,\n    });\n  });\n\n  const secondaryScreen = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneP2P;\n      case SettingsScreens.PrivacyPhoneNumber: {\n        return primaryPrivacy?.visibility === 'nobody' ? SettingsScreens.PrivacyAddByPhone : undefined;\n      }\n      default:\n        return undefined;\n    }\n  }, [primaryPrivacy, screen]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {screen === SettingsScreens.PrivacyGifts && (\n        <div className=\"settings-item\">\n          <ListItem onClick={handleShowGiftIconInChats}>\n            <span>{lang('PrivacyDisplayGiftsButton')}</span>\n            <Switcher\n              id=\"gift\"\n              disabled={!isCurrentUserPremium}\n              label={shouldDisplayGiftsButton ? lang('HideGiftsButton') : lang('DisplayGiftsButton')}\n              checked={shouldDisplayGiftsButton}\n            />\n          </ListItem>\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('PrivacyDisplayGiftIconInChats', {\n              icon: <Icon name=\"gift\" className=\"gift-icon\" />,\n              gift: lang('PrivacyDisplayGift'),\n            }, {\n              withNodes: true,\n            })}\n          </p>\n        </div>\n      )}\n      <PrivacySubsection\n        screen={screen}\n        privacy={primaryPrivacy}\n        isPremiumRequired={isPremiumRequired}\n      />\n      {screen === SettingsScreens.PrivacyProfilePhoto && primaryPrivacy?.visibility !== 'everybody' && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUserId={currentUserId}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n      {screen === SettingsScreens.PrivacyLastSeen && (\n        <SettingsPrivacyLastSeen visibility={primaryPrivacy?.visibility} />\n      )}\n      {screen === SettingsScreens.PrivacyGifts && (\n        <SettingsAcceptedGift />\n      )}\n      {Boolean(secondaryScreen) && (\n        <PrivacySubsection\n          screen={secondaryScreen}\n          privacy={secondaryPrivacy}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction PrivacySubsection({\n  screen,\n  privacy,\n  isPremiumRequired,\n}: {\n  screen: SettingsScreens;\n  privacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n}) {\n  const { setPrivacyVisibility, openSettingsScreen } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    const hasNobody = screen !== SettingsScreens.PrivacyAddByPhone;\n    const options = [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PContacts')} />\n        ) : (\n          oldLang('P2PContacts')\n        ),\n        hidden: isPremiumRequired,\n      },\n    ];\n\n    if (hasNobody) {\n      options.push({\n        value: 'nobody',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PNobody')} />\n        ) : (\n          oldLang('P2PNobody')\n        ),\n        hidden: isPremiumRequired,\n      });\n    }\n    return options;\n  }, [oldLang, screen, isPremiumRequired]);\n\n  const primaryExceptionLists = useMemo(() => {\n    if (screen === SettingsScreens.PrivacyAddByPhone) {\n      return {\n        shouldShowDenied: false,\n        shouldShowAllowed: false,\n      };\n    }\n\n    return {\n      shouldShowDenied: privacy?.visibility !== 'nobody',\n      shouldShowAllowed: privacy?.visibility !== 'everybody',\n    };\n  }, [privacy, screen]);\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsInfo');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('CustomHelp');\n      case SettingsScreens.PrivacyAddByPhone: {\n        return privacy?.visibility === 'everybody' ? oldLang('PrivacyPhoneInfo') : oldLang('PrivacyPhoneInfo3');\n      }\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesInfo');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen, privacy]);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return oldLang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyAddByPhone:\n        return oldLang('PrivacyPhoneTitle2');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return oldLang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyBio:\n        return oldLang('PrivacyBioTitle');\n      case SettingsScreens.PrivacyBirthday:\n        return oldLang('PrivacyBirthdayTitle');\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return oldLang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return oldLang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return oldLang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return oldLang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen]);\n\n  const prepareSubtitle = useLastCallback(\n    (userIds?: string[], chatIds?: string[], shouldAllowPremium?: boolean, botsPrivacy?: BotsPrivacyType) => {\n      const userIdsCount = userIds?.length || 0;\n      const chatIdsCount = chatIds?.length || 0;\n      const isAllowBots = botsPrivacy === 'allow';\n      const hasPeers = userIdsCount || chatIdsCount;\n\n      if (!hasPeers && !isAllowBots) {\n        return shouldAllowPremium ? oldLang('PrivacyPremium') : oldLang('EditAdminAddUsers');\n      } else if (shouldAllowPremium) {\n        return oldLang('ContactsAndPremium');\n      }\n\n      const userCountString = userIdsCount > 0 ? oldLang('Users', userIdsCount) : undefined;\n      const chatCountString = chatIdsCount > 0 ? oldLang('Chats', chatIdsCount) : undefined;\n\n      const botPrivacyString = isAllowBots ? lang('PrivacyValueBots') : '';\n      const peersString = lang.conjunction([userCountString, chatCountString].filter(Boolean));\n\n      return [botPrivacyString, peersString].filter(Boolean).join(' ');\n    },\n  );\n\n  const allowedString = useMemo(() => {\n    return prepareSubtitle(\n      privacy?.allowUserIds,\n      privacy?.allowChatIds,\n      privacy?.shouldAllowPremium,\n      privacy?.botsPrivacy,\n    );\n  }, [privacy]);\n\n  const blockString = useMemo(() => {\n    return prepareSubtitle(privacy?.blockUserIds, privacy?.blockChatIds);\n  }, [privacy]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioAllowedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayAllowedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioDeniedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayDeniedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={privacy?.visibility}\n        />\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n      {!isPremiumRequired && (primaryExceptionLists.shouldShowAllowed || primaryExceptionLists.shouldShowDenied) && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('PrivacyExceptions')}\n          </h4>\n          {primaryExceptionLists.shouldShowAllowed && (\n            <ListItem\n              narrow\n              icon=\"add-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: allowedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('AlwaysAllow')}</span>\n                <span className=\"subtitle\">{allowedString}</span>\n              </div>\n            </ListItem>\n          )}\n          {primaryExceptionLists.shouldShowDenied && (\n            <ListItem\n              narrow\n              icon=\"delete-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: deniedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('NeverAllow')}</span>\n                <span className=\"subtitle\">{blockString}</span>\n              </div>\n            </ListItem>\n          )}\n        </div>\n      )}\n      {isPremiumRequired && <PremiumStatusItem />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let primaryPrivacy: ApiPrivacySettings | undefined;\n    let secondaryPrivacy: ApiPrivacySettings | undefined;\n\n    const {\n      currentUserId,\n      settings: {\n        privacy,\n        byKey: {\n          shouldDisplayGiftsButton,\n        },\n      },\n    } = global;\n\n    const currentUserFullInfo = selectUserFullInfo(global, currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        primaryPrivacy = privacy.phoneNumber;\n        secondaryPrivacy = privacy.addByPhone;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        primaryPrivacy = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        primaryPrivacy = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyBio:\n        primaryPrivacy = privacy.bio;\n        break;\n\n      case SettingsScreens.PrivacyBirthday:\n        primaryPrivacy = privacy.birthday;\n        break;\n\n      case SettingsScreens.PrivacyGifts:\n        primaryPrivacy = privacy.gifts;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyPhoneCall:\n        primaryPrivacy = privacy.phoneCall;\n        secondaryPrivacy = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        primaryPrivacy = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        primaryPrivacy = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        primaryPrivacy = privacy.chatInvite;\n        break;\n    }\n\n    if (!primaryPrivacy) {\n      return {\n        currentUserId: currentUserId!,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      };\n    }\n\n    return {\n      primaryPrivacy,\n      secondaryPrivacy,\n      currentUserId: currentUserId!,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      isPremiumRequired: screen === SettingsScreens.PrivacyVoiceMessages && !selectIsCurrentUserPremium(global),\n      shouldDisplayGiftsButton,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { CustomPeerType, UniqueCustomPeer } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  isChatChannel, isDeletedUser,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { CUSTOM_PEER_PREMIUM } from '../../../util/objects/customPeer';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  withPremiumCategory?: boolean;\n  withMiniAppsCategory?: boolean;\n  usersOnly?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst PREMIUM_CATEGORY = [CUSTOM_PEER_PREMIUM];\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  withPremiumCategory,\n  withMiniAppsCategory,\n  screen,\n  isActive,\n  currentUserId,\n  settings,\n  usersOnly = false,\n  onReset,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const customPeerBots: UniqueCustomPeer = useMemo(() => {\n    return {\n      isCustomPeer: true,\n      type: 'bots',\n      title: lang('PrivacyValueBots'),\n      avatarIcon: 'bots',\n      isAvatarSquare: true,\n      peerColorId: 6,\n    };\n  }, [lang]);\n\n  const miniAppsCategory = useMemo(() => {\n    return [customPeerBots];\n  }, [customPeerBots]);\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const selectedCategoryTypes = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n    if (settings.shouldAllowPremium) {\n      return [CUSTOM_PEER_PREMIUM.type];\n    }\n    if (settings.botsPrivacy === 'allow' && isAllowList) {\n      return [customPeerBots.type];\n    }\n    return [];\n  }, [settings, isAllowList, customPeerBots]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n  const [newSelectedCategoryTypes, setNewSelectedCategoryTypes] = useState<CustomPeerType[]>(selectedCategoryTypes);\n\n  // Reset selected contact ids on change from other client when screen is not active\n  useEffect(() => {\n    if (!isActive) {\n      setNewSelectedContactIds(selectedContactIds);\n      setNewSelectedCategoryTypes(selectedCategoryTypes);\n    }\n  }, [isActive, selectedCategoryTypes, selectedContactIds]);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n        const user = usersById[chatId];\n        const isDeleted = user && isDeletedUser(user);\n        const isChannel = chat && isChatChannel(chat);\n        return (!usersOnly || user)\n          && chatId !== currentUserId\n          && chatId !== SERVICE_NOTIFICATIONS_USER_ID\n          && !isChannel && !isDeleted;\n      });\n\n    const filteredChats = filterPeersByQuery({ ids: chatIds, query: searchQuery });\n\n    // Show only relevant items\n    if (searchQuery) return filteredChats;\n\n    return unique([\n      ...selectedContactIds,\n      ...chatIds,\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, searchQuery, currentUserId, usersOnly]);\n\n  const handleSelectedCategoriesChange = useCallback((value: CustomPeerType[]) => {\n    setNewSelectedCategoryTypes(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      updatedIds: newSelectedContactIds,\n      isPremiumAllowed: newSelectedCategoryTypes.includes(CUSTOM_PEER_PREMIUM.type) || undefined,\n      botsPrivacy: (!withMiniAppsCategory) ? 'none'\n        : (newSelectedCategoryTypes.includes(customPeerBots.type) ? 'allow' : 'disallow'),\n    });\n\n    onReset();\n  }, [\n    isAllowList,\n    withMiniAppsCategory,\n    newSelectedCategoryTypes,\n    newSelectedContactIds,\n    onReset,\n    screen,\n    customPeerBots,\n  ]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function getCustomCategory() {\n    if (withPremiumCategory) return PREMIUM_CATEGORY;\n    if (withMiniAppsCategory && isAllowList) return miniAppsCategory;\n    return undefined;\n  }\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <PeerPicker\n        categories={getCustomCategory()}\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        selectedCategories={newSelectedCategoryTypes}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? oldLang('AlwaysAllowPlaceholder') : oldLang('NeverAllowPlaceholder')}\n        categoryPlaceholderKey=\"PrivacyUserTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onSelectedCategoriesChange={handleSelectedCategoriesChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        itemInputType=\"checkbox\"\n        withDefaultPadding\n        withStatus\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? oldLang('AlwaysAllow') : oldLang('NeverAllow')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return privacy.bio;\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return privacy.birthday;\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return privacy.gifts;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return privacy.noPaidMessages;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { type: 'emoji', emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n        withIcon\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { config, reactions } = global;\n\n    return {\n      availableReactions: reactions.availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<AccountSettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n    openSettingsScreen,\n  } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.CustomEmoji })}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.QuickReaction })}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.reactions.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.Privacy });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji, selectTabState } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n  recoveryEmail: string;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n  recoveryEmail,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {recoveryEmail && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('TwoStepAuth.ConfirmEmailDescription', recoveryEmail)}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  const tabState = selectTabState(global);\n  const recoveryEmail = tabState.recoveryEmail;\n\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n    recoveryEmail,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent })}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaTurnOff })}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword })}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useFlag from '../../../../hooks/useFlag';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Button from '../../../ui/Button';\nimport InputText from '../../../ui/InputText';\nimport Modal from '../../../ui/Modal';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {type === 'email' && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('RecoveryEmailSubtitle')}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  errorKey,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmailCode });\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCode });\n      }\n    }\n  }, [currentScreen, waitingEmailCodeLength, openSettingsScreen]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.Privacy });\n      },\n    });\n  }, [clearPassword, openSettingsScreen]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updateRecoveryEmail, openSettingsScreen]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          placeholder={oldLang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={oldLang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '@teact';\nimport { memo, useRef, useState } from '@teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\nimport type { AnimationLevel } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\n\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useScrollNotch from '../../../hooks/useScrollNotch.ts';\n\nimport Transition from '../../ui/Transition';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport PrivacyMessages from './PrivacyMessages';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsMain from './SettingsMain';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPerformance from './SettingsPerformance';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_BIO_SCREENS = [\n  SettingsScreens.PrivacyBioAllowedContacts,\n  SettingsScreens.PrivacyBioDeniedContacts,\n];\n\nconst PRIVACY_BIRTHDAY_SCREENS = [\n  SettingsScreens.PrivacyBirthdayAllowedContacts,\n  SettingsScreens.PrivacyBirthdayDeniedContacts,\n];\n\nconst PRIVACY_GIFTS_SCREENS = [\n  SettingsScreens.PrivacyGiftsAllowedContacts,\n  SettingsScreens.PrivacyGiftsDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nconst PRIVACY_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyNoPaidMessages,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  animationLevel: AnimationLevel;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onReset,\n  animationLevel,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal, openSettingsScreen } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  useScrollNotch({\n    containerRef,\n    selector: '.settings-content',\n  }, [currentScreen]);\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  });\n\n  function renderCurrentSectionContent(isScreenActive: boolean, activeScreen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBio]: PRIVACY_BIO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBirthday]: PRIVACY_BIRTHDAY_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGifts]: PRIVACY_GIFTS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyMessages]: PRIVACY_MESSAGES_SCREENS.includes(activeScreen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(activeScreen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(activeScreen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(activeScreen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(activeScreen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).map(Number).includes(activeScreen)\n      || Object.values(privacyAllowScreens).includes(true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            isActive={isScreenActive\n              || activeScreen === SettingsScreens.GeneralChatBackgroundColor\n              || activeScreen === SettingsScreens.GeneralChatBackground\n              || activeScreen === SettingsScreens.QuickReaction\n              || activeScreen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || activeScreen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            isActive={isScreenActive || activeScreen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyBio:\n      case SettingsScreens.PrivacyBirthday:\n      case SettingsScreens.PrivacyGifts:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            usersOnly={currentScreen === SettingsScreens.PrivacyNoPaidMessages}\n            withPremiumCategory={currentScreen === SettingsScreens.PrivacyGroupChatsAllowedContacts}\n            withMiniAppsCategory={currentScreen === SettingsScreens.PrivacyGiftsAllowedContacts}\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyMessages:\n        return (\n          <PrivacyMessages\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={activeScreen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(\n    isScreenActive: boolean,\n    _isFrom: boolean,\n    _currentKey: SettingsScreens,\n    activeKey: SettingsScreens,\n  ) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, activeKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      ref={containerRef}\n      id=\"Settings\"\n      name={resolveTransitionName('layers', animationLevel, shouldSkipTransition)}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n      withSwipeControl\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { sortUserIds } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterPeersByQuery({ ids: contactIds, query: filter, type: 'user' });\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable contact-list-item\"\n            onClick={() => handleClick(id)}\n          >\n            <PrivateChatInfo\n              userId={id}\n              forceShowSelf\n              avatarSize=\"large\"\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.ChatList}\n              ripple={!isMobile}\n            />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <Icon name=\"add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { isUserBot } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localPeerIds?: string[];\n  globalPeerIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localPeerIds,\n  globalPeerIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds\n      ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localPeerIds || []),\n        ...(globalPeerIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        return user && !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, searchQuery, localPeerIds, globalPeerIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n          withDefaultPadding\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <Icon name=\"arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: localPeerIds } = localResults || {};\n\n    return {\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalPeerIds,\n      localPeerIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst MAX_MEMBERS_FOR_GENERATE_CHAT_NAME = 4;\n\nconst NewChatStep2: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  useEffect(() => {\n    if (isChannel) {\n      return;\n    }\n    if (!memberIds.length || memberIds.length > MAX_MEMBERS_FOR_GENERATE_CHAT_NAME) {\n      setTitle('');\n      return;\n    }\n    const global = getGlobal();\n    const usersById = global.users.byId;\n    const memberFirstNames = [global.currentUserId!, ...memberIds]\n      .map((userId) => getUserFirstOrLastName(usersById[userId]))\n      .filter(Boolean);\n    const generatedChatName = memberFirstNames.slice(0, -1).join(', ')\n      + lang('CreateGroup.PeersTitleLastDelimeter')\n      + memberFirstNames[memberFirstNames.length - 1];\n    setTitle(generatedChatName);\n  }, [isChannel, memberIds, lang]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n      isChannel: true,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '@teact';\nimport { memo, useCallback, useState } from '@teact';\nimport { getActions } from '../../../global';\n\nimport { type AnimationLevel, LeftColumnContent } from '../../../types';\n\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\n\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  animationLevel: AnimationLevel;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  animationLevel,\n  onReset,\n}) => {\n  const { openLeftColumnContent, setGlobalSearchQuery } = getActions();\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    openLeftColumnContent({\n      contentKey: isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2,\n    });\n  }, [isChannel]);\n\n  const changeSelectedMemberIdsHandler = useLastCallback((ids: string[]) => {\n    const isSelection = ids.length > newChatMemberIds.length;\n\n    setNewChatMemberIds(ids);\n    if (isSelection) {\n      setGlobalSearchQuery({ query: '' });\n    }\n  });\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={resolveTransitionName('layers', animationLevel)}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={changeSelectedMemberIdsHandler}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { ANIMATION_DURATION } from '../story/helpers/ribbonAnimation';\n\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../common/icons/Icon';\nimport StoryRibbon from '../story/StoryRibbon';\nimport StoryToggler from '../story/StoryToggler';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  foldersDispatch: FolderEditDispatch;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  isStoryRibbonShown,\n  onReset,\n  onTopicSearch,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useLastCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransitionDeprecated(!isForumPanelOpen, undefined, undefined, false);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransitionDeprecated(\n    isStoryRibbonShown, undefined, undefined, '', false, ANIMATION_DURATION + ANIMATION_END_DELAY,\n  );\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className={buildClassName('left-header', !shouldRenderStoryRibbon && 'left-header-shadow')}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        <div className=\"story-toggler-wrapper\">\n          <StoryToggler canShow isArchived />\n        </div>\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'chat-list-wrapper',\n          shouldRenderStoryRibbon && 'with-story-ribbon',\n          storyRibbonClassNames,\n        )}\n      >\n        {shouldRenderStoryRibbon && (\n          <StoryRibbon isArchived className=\"left-header-shadow\" isClosing={isStoryRibbonClosing} />\n        )}\n        <ChatList\n          folderType=\"archived\"\n          isActive={isActive}\n          isForumPanelOpen={isForumPanelVisible}\n          isMainList\n          foldersDispatch={foldersDispatch}\n          archiveSettings={archiveSettings}\n        />\n      </div>\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatFolderModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useOldLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID)\n      .map((folderId) => {\n        const folder = foldersById ? foldersById[folderId] : undefined;\n        const label = folder ? renderTextWithEntities({\n          text: folder.title.text,\n          entities: folder.title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }) : '';\n        return {\n          label,\n          value: String(folderId),\n        };\n      }) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className={buildClassName(styles.root, 'delete')}\n      contentClassName={styles.modalContent}\n      title={lang('FilterAddTo')}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <CheckboxGroup\n          options={folders}\n          selected={selectedFolderIds}\n          onChange={setSelectedFolderIds}\n        />\n      </div>\n      <div className={styles.footer}>\n        <div className=\"dialog-buttons\">\n          <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n            {lang('FilterAddTo')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalContent\":\"EG5lPWY1\",\"root\":\"_fJBBCCE\",\"main\":\"heYMHiUt\",\"footer\":\"_jtqAaUU\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MAX_INT_32 } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useOldLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let mutedUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      mutedUntil = MAX_INT_32;\n    } else {\n      mutedUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, mutedUntil });\n    } else {\n      updateChatMutedState({ chatId, mutedUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectPeerPaidMessagesStars,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport renderText from './helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useSchedule from '../../hooks/useSchedule';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport Loading from '../ui/Loading';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePreviousDeprecated(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          messageList: currentMessageList, sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [currentMessageList, shouldSchedule, requestCalendar, onClose, shouldUpdateStickerSetOrder, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const chatBot = chatId && selectBot(global, chatId);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n\n    const sendOptions = chat\n      ? getAllowedAttachmentOptions(chat, chatFullInfo, Boolean(chatBot), isSavedMessages)\n      : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo)\n      && sendOptions?.canSendStickers,\n    );\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n    const paidMessagesStars = chatId ? selectPeerPaidMessagesStars(global, chatId) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: !paidMessagesStars && selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n      currentMessageList,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nZYT4vJ3\",\"sets\":\"JzkmXjFF\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiSticker } from '../../api/types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSetIds,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useOldLang();\n\n  const customEmojiSets = useMemo(() => {\n    return customEmojiSetIds?.map((id) => getGlobal().stickers.setsById[id]);\n  }, [customEmojiSetIds]);\n\n  const customEmojiModalRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePreviousDeprecated(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useLastCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => {\n          return (\n            <StickerSetCard\n              key={customEmojiSet.id}\n              className={styles.setCard}\n              stickerSet={customEmojiSet}\n              onClick={handleSetClick}\n              observeIntersection={observeIntersectionForCovers}\n              noPlay={!canPlayAnimatedEmojis}\n            />\n          );\n        })}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotCommand, ApiChat, ApiDisallowedGifts,\n} from '../../api/types';\nimport type { IAnchorPosition, ThreadId } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  getIsSavedDialog,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getIsChatMuted } from '../../global/helpers/notifications';\nimport {\n  selectBot,\n  selectCanGift,\n  selectCanManage,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsRightColumnShown,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectTopic,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { disableScrolling } from '../../util/scrollLock';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport Portal from '../ui/Portal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: IconName; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canViewBoosts?: boolean;\n  canViewMonetization?: boolean;\n  canShowBoostModal?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  canTranslate?: boolean;\n  channelMonoforumId?: string;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  botPrivacyPolicyUrl?: string;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  isForumAsMessages?: true;\n  canAddContact?: boolean;\n  canDeleteChat?: boolean;\n  canReportChat?: boolean;\n  canGift?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n  isRightColumnShown?: boolean;\n  canManage?: boolean;\n  canTranslate?: boolean;\n  isBlocked?: boolean;\n  isBot?: boolean;\n  isChatWithSelf?: boolean;\n  savedDialog?: ApiChat;\n  disallowedGifts?: ApiDisallowedGifts;\n  isAccountFrozen?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  botPrivacyPolicyUrl,\n  withForumActions,\n  isTopic,\n  isForum,\n  isForumAsMessages,\n  isChatInfoShown,\n  canStartBot,\n  canSubscribe,\n  canReportChat,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canViewMonetization,\n  canViewBoosts,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  canGift,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  canManage,\n  isRightColumnShown,\n  canTranslate,\n  isBlocked,\n  isBot,\n  isChatWithSelf,\n  savedDialog,\n  canShowBoostModal,\n  disallowedGifts,\n  isAccountFrozen,\n  channelMonoforumId,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    openFrozenAccountModal,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openMonetizationStatistics,\n    openBoostStatistics,\n    openGiftModal,\n    openThreadWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n    openUrl,\n    toggleManagement,\n    togglePeerTranslations,\n    blockUser,\n    unblockUser,\n    setViewForumAsMessages,\n    openBoostModal,\n    reportMessages,\n    showNotification,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [shouldCloseFast, setShouldCloseFast] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransitionDeprecated(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const areAllGiftsDisallowed = useMemo(() => {\n    if (!disallowedGifts) {\n      return undefined;\n    }\n    return Object.values(disallowedGifts).every(Boolean);\n  }, [disallowedGifts]);\n\n  const closeMuteModal = useLastCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  });\n\n  const handleReport = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      setIsMenuOpen(false);\n      reportMessages({ chatId, messageIds: [] });\n    }\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      onClose();\n    } else {\n      setIsDeleteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleViewGroupInfo = useLastCallback(() => {\n    openThreadWithInfo({ chatId, threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      sendBotCommand({ command: '/start' });\n    }\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      restartBot({ chatId });\n    }\n  });\n\n  const handleUnmuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      updateChatMutedState({ chatId, isMuted: false });\n    }\n    closeMenu();\n  });\n\n  const handleMuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      closeMenu();\n    } else {\n      markRenderMuteModal();\n      setIsMuteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const handleCreateTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openCreateTopicPanel({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      toggleManagement({ force: true });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openEditTopicPanel({ chatId, topicId: Number(threadId) });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleViewAsTopicsClick = useLastCallback(() => {\n    openChat({ id: undefined });\n    setViewForumAsMessages({ chatId, isEnabled: false });\n    closeMenu();\n  });\n\n  const handleEnterVoiceChatClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleLinkedChatClick = useLastCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  });\n\n  const handleGiftClick = useLastCallback(() => {\n    if (areAllGiftsDisallowed && chat) {\n      showNotification({ message: lang('SendDisallowError') });\n      return;\n    }\n    openGiftModal({ forUserId: chatId });\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openGiftModal({ forUserId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleAddContactClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openAddContactDialog({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSubscribe = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      onSubscribeChannel();\n    }\n    closeMenu();\n  });\n\n  const handleVideoCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    }\n    closeMenu();\n  });\n\n  const handleCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSearch = useLastCallback(() => {\n    onSearchClick();\n    closeMenu();\n  });\n\n  const handleStatisticsClick = useLastCallback(() => {\n    toggleStatistics();\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleMonetizationClick = useLastCallback(() => {\n    openMonetizationStatistics({ chatId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleBoostClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canViewBoosts) {\n      openBoostStatistics({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    } else {\n      openBoostModal({ chatId });\n    }\n    closeMenu();\n  });\n\n  const handleEnableTranslations = useLastCallback(() => {\n    togglePeerTranslations({ chatId, isEnabled: true });\n    closeMenu();\n  });\n\n  const handleSelectMessages = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      enterMessageSelectMode();\n    }\n    closeMenu();\n  });\n\n  const handleOpenAsMessages = useLastCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  });\n\n  const handleBlock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      blockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      unblockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSendChannelMessage = useLastCallback(() => {\n    openChat({ id: channelMonoforumId });\n    closeMenu();\n  });\n\n  useEffect(disableScrolling, []);\n\n  const botButtons = useMemo(() => {\n    const commandButtons = botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n\n          onClick={handleClick}\n        >\n          {oldLang(cmd.label)}\n        </MenuItem>\n      );\n    });\n\n    const hasPrivacyCommand = botCommands?.some(({ command }) => command === 'privacy');\n\n    const privacyButton = isBot && (\n      <MenuItem\n        icon=\"privacy-policy\"\n\n        onClick={() => {\n          if (hasPrivacyCommand && !botPrivacyPolicyUrl) {\n            sendBotCommand({ command: '/privacy' });\n          } else {\n            openUrl({ url: botPrivacyPolicyUrl || oldLang('BotDefaultPrivacyPolicy') });\n          }\n          closeMenu();\n        }}\n      >\n        {oldLang('BotPrivacyPolicy')}\n      </MenuItem>\n    );\n\n    return [...commandButtons || [], privacyButton].filter(Boolean);\n  }, [botCommands, oldLang, botPrivacyPolicyUrl, isBot]);\n\n  const deleteTitle = useMemo(() => {\n    if (!chat) return undefined;\n\n    if (savedDialog) {\n      return oldLang('Delete');\n    }\n\n    if (isPrivate) {\n      return oldLang('DeleteChatUser');\n    }\n\n    if (canDeleteChat) {\n      return oldLang('GroupInfo.DeleteAndExit');\n    }\n\n    if (isChannel) {\n      return oldLang('LeaveChannel');\n    }\n\n    return oldLang('Group.LeaveGroup');\n  }, [canDeleteChat, chat, isChannel, isPrivate, savedDialog, oldLang]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n          shouldCloseFast={shouldCloseFast}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {oldLang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {oldLang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {channelMonoforumId && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleSendChannelMessage}\n            >\n              {lang('ChannelSendMessage')}\n            </MenuItem>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? oldLang('lng_context_view_topic') : oldLang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canManage && !canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditClick}\n            >\n              {oldLang('Edit')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {oldLang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {oldLang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && !isForumAsMessages && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {oldLang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {oldLang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {oldLang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canShowBoostModal && !canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang(isChannel ? 'BoostingBoostChannelMenu' : 'BoostingBoostGroupMenu')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {oldLang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {oldLang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {oldLang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {oldLang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {oldLang('ChatsMute')}\n                ...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {oldLang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {oldLang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {oldLang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang('Boosts')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {oldLang('Statistics')}\n            </MenuItem>\n          )}\n          {isChannel && canViewMonetization && (\n            <MenuItem\n              icon=\"cash-circle\"\n              onClick={handleMonetizationClick}\n            >\n              {oldLang('lng_channel_earn_title')}\n            </MenuItem>\n          )}\n          {canTranslate && (\n            <MenuItem\n              icon=\"language\"\n              onClick={handleEnableTranslations}\n            >\n              {oldLang('lng_context_translate')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {oldLang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGift && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftClick}\n            >\n              {oldLang('ProfileSendAGift')}\n            </MenuItem>\n          )}\n          {isBot && (\n            <MenuItem\n              icon={isBlocked ? 'bots' : 'hand-stop'}\n              onClick={isBlocked ? handleRestartBot : handleBlock}\n            >\n              {isBlocked ? oldLang('BotRestart') : oldLang('Bot.Stop')}\n            </MenuItem>\n          )}\n          {isPrivate && !isChatWithSelf && !isBot && (\n            <MenuItem\n              icon={isBlocked ? 'user' : 'hand-stop'}\n              onClick={isBlocked ? handleUnblock : handleBlock}\n            >\n              {isBlocked ? oldLang('Unblock') : oldLang('BlockUser')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {deleteTitle}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={savedDialog || chat}\n            isSavedDialog={Boolean(savedDialog)}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isRestricted = selectIsChatRestricted(global, chatId);\n    if (!chat || isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n    const canReportChat = isMainThread && !user && (isChatChannel(chat) || isChatGroup(chat)) && !isChatAdmin(chat);\n\n    const chatBot = !isSystemBot(chatId) ? selectBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const fullInfo = userFullInfo || chatFullInfo;\n    const canGift = selectCanGift(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n    const canManage = selectCanManage(global, chatId);\n    // Context menu item should only be displayed if user hid translation panel\n    const canTranslate = selectCanTranslateChat(global, chatId) && fullInfo?.isTranslationDisabled;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const savedDialog = isSavedDialog ? selectChat(global, String(threadId)) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      chat,\n      isMuted: getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      isForumAsMessages: chat?.isForumAsMessages,\n      canAddContact,\n      canDeleteChat: getCanDeleteChat(chat),\n      canReportChat,\n      canGift,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      botPrivacyPolicyUrl: chatBot ? userFullInfo?.botInfo?.privacyPolicyUrl : undefined,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n      canManage,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      canTranslate,\n      isBlocked: userFullInfo?.isBlocked,\n      isBot: Boolean(chatBot),\n      isChatWithSelf,\n      savedDialog,\n      disallowedGifts: userFullInfo?.disallowedGifts,\n      isAccountFrozen,\n    };\n  },\n)(HeaderMenuContainer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vv5ppXel\",\"active\":\"FVgqrSSK\",\"info\":\"DboxqiZd\",\"topRow\":\"Ymu2m1PR\",\"meta\":\"A2rsvUBm\",\"subtitle\":\"qUzmwaIn\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\n\nimport { getMessageSenderName } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport LastMessageMeta from '../../common/LastMessageMeta';\nimport MessageSummary from '../../common/MessageSummary';\n\nimport styles from './MiddleSearchResult.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  message: ApiMessage;\n  senderPeer?: ApiPeer;\n  messageChat?: ApiChat;\n  shouldShowChat?: boolean;\n  query?: string;\n  className?: string;\n  onClick: (message: ApiMessage) => void;\n};\n\nconst TRUNCATE_LENGTH = 200;\n\nconst MiddleSearchResult = ({\n  isActive,\n  message,\n  senderPeer,\n  messageChat,\n  shouldShowChat,\n  query,\n  className,\n  onClick,\n}: OwnProps) => {\n  const lang = useOldLang();\n  const hiddenForwardTitle = message.forwardInfo?.hiddenUserName;\n\n  const peer = shouldShowChat ? messageChat : senderPeer;\n\n  const senderName = shouldShowChat && senderPeer ? getMessageSenderName(lang, message.chatId, senderPeer) : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(message);\n  });\n\n  return (\n    <div\n      role=\"button\"\n      tabIndex={0}\n      className={buildClassName(styles.root, isActive && styles.active, className)}\n      onClick={handleClick}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={peer}\n        text={hiddenForwardTitle}\n        size=\"medium\"\n      />\n      <div className={styles.info}>\n        <div className={styles.topRow}>\n          {(peer && <FullNameTitle peer={peer} withEmojiStatus />) || hiddenForwardTitle}\n          <LastMessageMeta className={styles.meta} message={message} />\n        </div>\n        <div className={styles.subtitle} dir=\"auto\">\n          {senderName && (\n            <>\n              <span className=\"sender-name\">{renderText(senderName)}</span>\n              <span className=\"colon\">:</span>\n            </>\n          )}\n          <MessageSummary message={message} highlight={query} truncateLength={TRUNCATE_LENGTH} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MiddleSearchResult);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FTMljUuX\",\"header\":\"OvmjSMwA\",\"active\":\"DEIUzXQd\",\"avatar\":\"mp1PmoMq\",\"input\":\"z2K8Q7ib\",\"mobile\":\"u0fb78AA\",\"focused\":\"dqF8dYNx\",\"withDropdown\":\"AqhBggrp\",\"adaptSearchBorders\":\"Q9RZQaTu\",\"dropdown\":\"MFGvbICO\",\"dropdownHidden\":\"Alee0CKy\",\"results\":\"RtfTOE72\",\"placeholder\":\"O1HoZFge\",\"separator\":\"_Yy43QLl\",\"savedTags\":\"BcvAfv1E\",\"wrap\":\"JkESCST6\",\"searchTags\":\"rO3pH3LI\",\"savedSearchTag\":\"qA4gov4D\",\"hash\":\"q5NOmUAM\",\"searchTypes\":\"rVYZG__K\",\"searchType\":\"nE1Xwoo7\",\"selectedType\":\"i29dP8iT\",\"footer\":\"jyS1l9yn\",\"keyboard-visible\":\"ao05jKHW\",\"keyboardVisible\":\"ao05jKHW\",\"counter\":\"NmmL_cO3\",\"mobileNavigation\":\"dLO1hlHU\",\"navigationButton\":\"Z4vLAlsu\",\"navigationDisabled\":\"IqA7R2xO\",\"jumpIn\":\"n9kXbTu6\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiReaction, ApiReactionKey, ApiSavedReactionTag,\n} from '../../../api/types';\nimport type {\n  CustomPeer, MiddleSearchParams, MiddleSearchType, ThreadId,\n} from '../../../types';\n\nimport { ANONYMOUS_USER_ID } from '../../../config';\nimport { requestMeasure, requestMutation, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog, getReactionKey, isSameReaction, isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectMonoforumChannel,\n  selectSender,\n  selectTabState,\n} from '../../../global/selectors';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport { getSearchResultKey, parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { debounce, fastRaf } from '../../../util/schedulers';\n\nimport { useClickOutside } from '../../../hooks/events/useOutsideClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport SavedTagButton from '../message/reactions/SavedTagButton';\nimport MiddleSearchResult from './MiddleSearchResult';\n\nimport styles from './MiddleSearch.module.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  monoforumChat?: ApiChat;\n  threadId?: ThreadId;\n  requestedQuery?: string;\n  savedTags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  savedTag?: ApiReaction;\n  totalCount?: number;\n  lastSearchQuery?: string;\n  foundIds?: SearchResultKey[];\n  isHistoryCalendarOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n  isSavedMessages?: boolean;\n  fetchingQuery?: string;\n  isHashtagQuery?: boolean;\n  searchType?: MiddleSearchType;\n  currentUserId?: string;\n};\n\nconst CHANNELS_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'channel-filled',\n  titleKey: 'SearchPublicPosts',\n};\nconst FOCUSED_SEARCH_TRIGGER_OFFSET = 5;\nconst HIDE_TIMEOUT = 200;\nconst RESULT_ITEM_CLASS_NAME = 'MiddleSearchResult';\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MiddleSearch: FC<StateProps> = ({\n  isActive,\n  chat,\n  monoforumChat,\n  threadId,\n  requestedQuery,\n  savedTags,\n  savedTag,\n  totalCount,\n  lastSearchQuery,\n  foundIds,\n  isHistoryCalendarOpen,\n  isCurrentUserPremium,\n  isSavedMessages,\n  fetchingQuery,\n  isHashtagQuery,\n  searchType = 'chat',\n  currentUserId,\n}) => {\n  const {\n    updateMiddleSearch,\n    resetMiddleSearch,\n    performMiddleSearch,\n    focusMessage,\n    closeMiddleSearch,\n    openHistoryCalendar,\n    openPremiumModal,\n    loadSavedReactionTags,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n  const shouldCancelSearchRef = useRef(false);\n\n  const { isMobile } = useAppLayout();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [query, setQuery] = useState(requestedQuery || '');\n  const [focusedIndex, setFocusedIndex] = useState(0);\n  const canFocusNewer = foundIds && focusedIndex > 0;\n  const canFocusOlder = foundIds && focusedIndex < foundIds.length - 1;\n\n  const [isFullyHidden, setIsFullyHidden] = useState(!isActive);\n  const hiddenTimerRef = useRef<number>();\n  const maybeLongPressActiveRef = useRef(true);\n\n  const [isFocused, markFocused, markBlurred] = useFlag();\n  const [isViewAsList, setIsViewAsList] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    if (maybeLongPressActiveRef.current) return;\n    // Ignore clicks inside modals\n    if ((event.target as HTMLElement).closest('.Modal')) return;\n    markBlurred();\n  });\n  useClickOutside([ref], handleClickOutside);\n\n  const hasResultsContainer = Boolean((query && foundIds) || isHashtagQuery);\n  const isOnlyHash = isHashtagQuery && !query;\n  const areResultsEmpty = Boolean(query && foundIds && !foundIds.length && !isLoading && !isOnlyHash);\n  const hasResultsPlaceholder = areResultsEmpty || isOnlyHash;\n  const isNonFocusedDropdownForced = searchType === 'myChats' || searchType === 'channels';\n  const hasResultsDropdown = isActive && (isViewAsList || !isMobile) && (isFocused || isNonFocusedDropdownForced)\n    && Boolean(\n      hasResultsContainer || hasResultsPlaceholder || savedTags,\n    );\n\n  const hasQueryData = Boolean((query && !isOnlyHash) || savedTag);\n  const hasNavigationButtons = searchType === 'chat' && Boolean(foundIds?.length);\n\n  const handleClose = useLastCallback(() => {\n    closeMiddleSearch();\n  });\n\n  const focusInput = useLastCallback(() => {\n    requestMeasure(() => {\n      inputRef.current?.focus();\n    });\n  });\n\n  const blurInput = useLastCallback(() => {\n    inputRef.current?.blur();\n  });\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Reset focus on query result\n  useEffect(() => {\n    setFocusedIndex(-1);\n  }, [lastSearchQuery]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n      setIsViewAsList(true);\n      setFocusedIndex(0);\n      setQuery('');\n      hiddenTimerRef.current = window.setTimeout(() => setIsFullyHidden(true), HIDE_TIMEOUT);\n    } else {\n      setIsFullyHidden(false);\n      clearTimeout(hiddenTimerRef.current);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (!requestedQuery || !chat?.id) return;\n    setQuery(requestedQuery);\n    updateMiddleSearch({ chatId: chat.id, threadId, update: { requestedQuery: undefined } });\n    setIsLoading(true);\n\n    requestNextMutation(() => {\n      const input = inputRef.current;\n      if (!input) return;\n      focusEditableElement(input, true, true);\n      markFocused();\n    });\n  }, [chat?.id, requestedQuery, threadId]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (isActive !== prevIsActive && !query && lastSearchQuery) {\n      setQuery(lastSearchQuery); // Restore query when returning back\n    }\n  }, [isActive, lastSearchQuery, query]);\n\n  useEffectWithPrevDeps(([prevIsCalendarOpen]) => {\n    if (!isActive || prevIsCalendarOpen === isHistoryCalendarOpen) return;\n    if (isHistoryCalendarOpen) {\n      blurInput();\n      markBlurred();\n    } else {\n      focusInput();\n    }\n  }, [isHistoryCalendarOpen, isActive]);\n\n  const handleReset = useLastCallback(() => {\n    if (!query?.length && !savedTag) {\n      handleClose();\n      return;\n    }\n\n    setQuery('');\n    setIsLoading(false);\n    resetMiddleSearch();\n    focusInput();\n  });\n\n  useEffect(() => (isActive ? captureEscKeyListener(handleReset) : undefined), [isActive, handleClose]);\n\n  const savedTagsArray = useMemo(() => {\n    if (!savedTags) return undefined;\n    return Object.values(savedTags);\n  }, [savedTags]);\n\n  const hasSavedTags = Boolean(savedTagsArray?.length);\n  const areSavedTagsDisabled = hasSavedTags && !isCurrentUserPremium;\n\n  useEffect(() => {\n    if (isSavedMessages && isActive) loadSavedReactionTags();\n  }, [isSavedMessages, isActive]);\n\n  const handleSearch = useLastCallback(() => {\n    const chatId = chat?.id;\n    if (!chatId) {\n      return;\n    }\n\n    runDebouncedForSearch(() => {\n      if (shouldCancelSearchRef.current) return;\n      performMiddleSearch({ chatId, threadId, query });\n    });\n  });\n\n  const handleQueryChange = useLastCallback((newQuery: string) => {\n    shouldCancelSearchRef.current = false;\n\n    if (newQuery.startsWith('#') && !isHashtagQuery) {\n      updateMiddleSearch({ chatId: chat!.id, threadId, update: { isHashtag: true } });\n      setQuery(newQuery.slice(1));\n      handleSearch();\n      return;\n    }\n\n    setQuery(newQuery);\n\n    if (!newQuery) {\n      setIsLoading(false);\n      resetMiddleSearch();\n      shouldCancelSearchRef.current = true;\n    }\n  });\n\n  useEffect(() => {\n    if (query) {\n      handleSearch();\n    }\n  }, [query]);\n\n  useEffect(() => {\n    setIsLoading(Boolean(fetchingQuery));\n  }, [fetchingQuery]);\n\n  useEffect(() => {\n    if (!foundIds?.length) return;\n    const isClose = foundIds.length - focusedIndex < FOCUSED_SEARCH_TRIGGER_OFFSET;\n    if (isClose) {\n      handleSearch();\n    }\n  }, [focusedIndex, foundIds?.length]);\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    maybeLongPressActiveRef.current = true;\n\n    function focus() {\n      inputRef.current?.focus();\n      markFocused();\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    function removeListeners() {\n      window.removeEventListener('touchend', focus);\n      window.removeEventListener('mouseup', focus);\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    window.addEventListener('touchend', focus);\n    window.addEventListener('mouseup', focus);\n\n    window.addEventListener('touchstart', removeListeners);\n    window.addEventListener('mousedown', removeListeners);\n\n    return () => {\n      removeListeners();\n      window.removeEventListener('touchstart', removeListeners);\n      window.removeEventListener('mousedown', removeListeners);\n    };\n  }, [isActive]);\n\n  useHistoryBack({\n    isActive,\n    onBack: handleClose,\n  });\n\n  const [viewportIds, getMore, viewportOffset = 0] = useInfiniteScroll(handleSearch, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if ((!query && !savedTag) || !viewportIds?.length) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n\n    return viewportIds.map((searchResultKey) => {\n      const [chatId, id] = parseSearchResultKey(searchResultKey);\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return undefined;\n      }\n\n      const originalSender = (isSavedMessages || isSystemBot(chatId) || chatId === ANONYMOUS_USER_ID)\n        ? selectForwardedSender(global, message) : undefined;\n      const messageSender = selectSender(global, message);\n      const messageChat = selectChat(global, message.chatId);\n\n      const senderPeer = originalSender || messageSender;\n\n      return {\n        searchResultKey,\n        message,\n        messageChat,\n        senderPeer,\n      };\n    }).filter(Boolean);\n  }, [query, savedTag, viewportIds, isSavedMessages]);\n\n  const handleMessageClick = useLastCallback((message: ApiMessage) => {\n    const searchResultKey = getSearchResultKey(message);\n    const index = foundIds?.indexOf(searchResultKey) || 0;\n    const realIndex = index + viewportOffset;\n    setFocusedIndex(realIndex);\n\n    if (searchType === 'chat') {\n      setIsViewAsList(false);\n    }\n\n    focusMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      threadId: !isHashtagQuery ? threadId : undefined,\n    });\n\n    markBlurred();\n  });\n\n  const handleTriggerViewStyle = useLastCallback(() => {\n    setIsViewAsList((prev) => !prev);\n    markFocused();\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, hasResultsContainer, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      handleMessageClick(foundResult.message);\n      setFocusedIndex(index + viewportOffset);\n    }\n  }, `.${RESULT_ITEM_CLASS_NAME}`, true);\n\n  const updateSearchParams = useLastCallback((update: Partial<MiddleSearchParams>) => {\n    updateMiddleSearch({ chatId: chat!.id, threadId, update });\n\n    handleSearch();\n  });\n\n  const activateSearchTag = useLastCallback((tag: ApiReaction) => {\n    if (areSavedTagsDisabled) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n      return;\n    }\n\n    updateSearchParams({ savedTag: tag });\n  });\n\n  const removeSearchSavedTag = useLastCallback(() => {\n    updateSearchParams({ savedTag: undefined });\n  });\n\n  const handleDeleteTag = useLastCallback(() => {\n    if (isHashtagQuery) {\n      updateSearchParams({ isHashtag: false });\n      return;\n    }\n\n    if (savedTag) {\n      removeSearchSavedTag();\n    }\n  });\n\n  const handleChangeSearchType = useLastCallback((type: MiddleSearchType) => {\n    updateSearchParams({ type });\n    setIsViewAsList(true);\n  });\n\n  const handleFocusOlder = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleFocusNewer = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  function renderTypeTag(type: MiddleSearchType, isForTag?: boolean) {\n    const isSelected = !isForTag && searchType === type;\n    switch (type) {\n      case 'chat':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={chat?.id}\n            title={oldLang('SearchThisChat')}\n            clickArg=\"chat\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'myChats':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={currentUserId}\n            forceShowSelf\n            title={oldLang('SearchMyMessages')}\n            clickArg=\"myChats\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'channels':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            customPeer={CHANNELS_PEER}\n            title={oldLang('SearchPublicPosts')}\n            clickArg=\"channels\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n    }\n    return undefined;\n  }\n\n  function renderDropdown() {\n    return (\n      <div className={buildClassName(styles.dropdown, !hasResultsDropdown && styles.dropdownHidden)}>\n        {!isMobile && <div className={styles.separator} />}\n        {hasSavedTags && !isHashtagQuery && (\n          <div\n            className={buildClassName(\n              styles.savedTags,\n              !isMobile && styles.wrap,\n              'no-scrollbar',\n            )}\n          >\n            {savedTagsArray.map((tag) => {\n              const isChosen = isSameReaction(tag.reaction, savedTag);\n              return (\n                <SavedTagButton\n                  containerId=\"local-search\"\n                  key={getReactionKey(tag.reaction)}\n                  reaction={tag.reaction}\n                  tag={tag}\n                  withCount\n                  isDisabled={areSavedTagsDisabled}\n                  isChosen={isChosen}\n                  onClick={isChosen ? removeSearchSavedTag : activateSearchTag}\n                />\n              );\n            })}\n          </div>\n        )}\n        {isHashtagQuery && (\n          <div\n            className={buildClassName(styles.searchTypes, 'no-scrollbar')}\n          >\n            {renderTypeTag('chat')}\n            {renderTypeTag('myChats')}\n            {renderTypeTag('channels')}\n          </div>\n        )}\n        {hasResultsContainer && (\n          <InfiniteScroll\n            ref={containerRef}\n            className={buildClassName(styles.results, 'custom-scroll')}\n            items={viewportResults}\n            itemSelector={`.${RESULT_ITEM_CLASS_NAME}`}\n            preloadBackwards={0}\n            onLoadMore={getMore}\n            onKeyDown={handleKeyDown}\n          >\n            {areResultsEmpty && (\n              <span key=\"nothing\" className={styles.placeholder}>\n                {oldLang('NoResultFoundFor', query)}\n              </span>\n            )}\n            {isOnlyHash && (\n              <span key=\"enterhash\" className={styles.placeholder}>\n                {oldLang('HashtagSearchPlaceholder')}\n              </span>\n            )}\n            {viewportResults?.map(({\n              message, senderPeer, messageChat, searchResultKey,\n            }, i) => (\n              <MiddleSearchResult\n                key={searchResultKey}\n                teactOrderKey={-message.date}\n                className={RESULT_ITEM_CLASS_NAME}\n                query={query}\n                message={message}\n                senderPeer={senderPeer}\n                messageChat={messageChat}\n                shouldShowChat={isHashtagQuery}\n                isActive={focusedIndex - viewportOffset === i}\n                onClick={handleMessageClick}\n              />\n            ))}\n          </InfiniteScroll>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      id=\"MiddleSearch\"\n      className={buildClassName(\n        styles.root,\n        isActive && styles.active,\n        !isActive && isFullyHidden && 'visually-hidden', // `display: none` would prevent focus on iOS\n        isFocused && styles.focused,\n        isMobile && styles.mobile,\n      )}\n      ref={ref}\n    >\n      <div className={styles.header}>\n        {!isMobile && (\n          <Avatar\n            className={styles.avatar}\n            peer={monoforumChat || chat}\n            size=\"medium\"\n            isSavedMessages={isSavedMessages}\n          />\n        )}\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          className={buildClassName(\n            styles.input,\n            hasResultsDropdown && styles.withDropdown,\n            hasResultsDropdown && !isMobile && styles.adaptSearchBorders,\n          )}\n          canClose={!isMobile}\n          isLoading={isLoading}\n          resultsItemSelector={`.${styles.results} .${RESULT_ITEM_CLASS_NAME}`}\n          hasUpButton={hasNavigationButtons && !isMobile}\n          hasDownButton={hasNavigationButtons && !isMobile}\n          placeholder={isHashtagQuery ? oldLang('SearchHashtagsHint') : oldLang('Search')}\n          teactExperimentControlled\n          onChange={handleQueryChange}\n          onStartBackspace={handleDeleteTag}\n          onReset={handleReset}\n          withBackIcon={isMobile}\n          onFocus={markFocused}\n          focused={isFocused}\n          onUpClick={canFocusOlder ? handleFocusOlder : undefined}\n          onDownClick={canFocusNewer ? handleFocusNewer : undefined}\n        >\n          <div className={styles.searchTags}>\n            {savedTag && (\n              <SavedTagButton\n                containerId=\"local-search-tags\"\n                className={styles.savedSearchTag}\n                reaction={savedTag}\n                tag={savedTags![getReactionKey(savedTag)]}\n                onClick={removeSearchSavedTag}\n              />\n            )}\n            {isHashtagQuery && <div className={styles.hash}>#</div>}\n          </div>\n          {!isMobile && renderDropdown()}\n        </SearchInput>\n        {!isMobile && (\n          <div className={styles.icons}>\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel={oldLang('JumpToDate')}\n            >\n              <Icon name=\"calendar\" />\n            </Button>\n          </div>\n        )}\n      </div>\n      {isMobile && renderDropdown()}\n      {isMobile && (\n        <div className={styles.footer}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n\n            onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n            ariaLabel={oldLang('JumpToDate')}\n          >\n            <Icon name=\"calendar\" />\n          </Button>\n          <div className={styles.counter}>\n            {hasQueryData && (\n              foundIds?.length ? (\n                oldLang('Of', [Math.max(focusedIndex + 1, 1), totalCount])\n              ) : foundIds && !foundIds.length && (\n                oldLang('NoResult')\n              )\n            )}\n          </div>\n          {searchType === 'chat' && Boolean(foundIds?.length) && (\n            <Button\n              className={styles.viewStyle}\n              size=\"smaller\"\n              isText\n              fluid\n              noForcedUpperCase\n              onClick={handleTriggerViewStyle}\n            >\n              {isViewAsList ? oldLang('SearchAsChat') : oldLang('SearchAsList')}\n            </Button>\n          )}\n          {hasNavigationButtons && !hasResultsDropdown && (\n            <div className={styles.mobileNavigation}>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusOlder && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusOlder}\n                nonInteractive={!canFocusOlder}\n                ariaLabel={lang('AriaSearchOlderResult')}\n              >\n                <Icon name=\"up\" />\n              </Button>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusNewer && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusNewer}\n                nonInteractive={!canFocusNewer}\n                ariaLabel={lang('AriaSearchNewerResult')}\n              >\n                <Icon name=\"down\" />\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n    const { chatId, threadId } = currentMessageList;\n\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const {\n      requestedQuery, savedTag, results, fetchingQuery, isHashtag, type,\n    } = selectCurrentMiddleSearch(global) || {};\n    const { totalCount, foundIds, query: lastSearchQuery } = results || {};\n\n    const currentUserId = global.currentUserId;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    const savedTags = isSavedMessages && !isSavedDialog ? global.savedReactionTags?.byKey : undefined;\n\n    const monoforumChat = selectMonoforumChannel(global, chatId);\n\n    return {\n      chat,\n      monoforumChat,\n      requestedQuery,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n      savedTags,\n      savedTag,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isSavedMessages,\n      fetchingQuery,\n      isHashtagQuery: isHashtag,\n      currentUserId,\n      searchType: type,\n      lastSearchQuery,\n    };\n  },\n)(MiddleSearch));\n","import type { ElementRef } from '../../lib/teact/teact';\nimport { useEffect } from '../../lib/teact/teact';\n\nimport useLastCallback from '../useLastCallback';\n\n// Fragile\nexport function useClickOutside(\n  refs: ElementRef<HTMLElement>[], callback: (event: MouseEvent) => void,\n) {\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    const clickedOutside = refs.every((ref) => {\n      return ref.current && !ref.current.contains(event.target as Node);\n    });\n\n    if (clickedOutside) callback(event);\n  });\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [handleClickOutside]);\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent, ThreadId } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectShouldLoopStickers,\n} from '../../../global/selectors';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { pickTruthy } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport StickerSetCover from './StickerSetCover';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  noContextMenus?: boolean;\n  idPrefix: string;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  isForEffects?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  effectStickers?: ApiSticker[];\n  effectEmojis?: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  effectStickers,\n  effectEmojis,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noContextMenus,\n  idPrefix,\n  onStickerSelect,\n  isForEffects,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat?.id, threadId);\n\n  const prefix = `${idPrefix}-sticker-set`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useOldLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (isForEffects && effectStickers) {\n      const effectSets: StickerSetOrReactionsSetOrRecent[] = [];\n      if (effectEmojis?.length) {\n        effectSets.push({\n          id: EFFECT_EMOJIS_SET_ID,\n          accessHash: '0',\n          title: '',\n          stickers: effectEmojis,\n          count: effectEmojis.length,\n          isEmoji: true,\n        });\n      }\n      if (effectStickers?.length) {\n        effectSets.push({\n          id: EFFECT_STICKERS_SET_ID,\n          accessHash: '0',\n          title: lang('StickerEffects'),\n          stickers: effectStickers,\n          count: effectStickers.length,\n        });\n      }\n      return effectSets;\n    }\n\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    const userSetIds = [...(addedSetIds || [])];\n    if (chatStickerSetId) {\n      userSetIds.unshift(chatStickerSetId);\n    }\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, userSetIds));\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds,\n    stickerSetsById,\n    favoriteStickers,\n    recentStickers,\n    chatStickerSetId,\n    lang,\n    effectStickers,\n    isForEffects,\n    effectEmojis,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents\n    && !noPopulatedSets && (canSendStickers || isForEffects);\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  });\n\n  const handleStickerUnfave = useLastCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  });\n\n  const handleStickerFave = useLastCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  });\n\n  const handleMouseMove = useLastCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  });\n\n  const handleRemoveRecentSticker = useLastCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  });\n\n  if (!chat) return undefined;\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <Icon name=\"recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <Icon name=\"favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar peer={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n              forcePlayback\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n          forcePlayback\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  const isLoading = !shouldRenderContents && (canSendStickers || isForEffects) && !noPopulatedSets;\n\n  return (\n    <Transition className={fullClassName} activeKey={isLoading ? 0 : 1} name=\"fade\" shouldCleanup>\n      {!shouldRenderContents ? (\n        !canSendStickers && !isForEffects ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )\n      ) : (\n        <>\n          {!isForEffects && (\n            <div ref={headerRef} className={headerClassName}>\n              <div className=\"shared-canvas-container\">\n                <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n                {allSets.map(renderCover)}\n              </div>\n            </div>\n          )}\n          <div\n            ref={containerRef}\n            onMouseMove={handleMouseMove}\n            onScroll={handleContentScroll}\n            className={\n              buildClassName(\n                styles.main,\n                IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n                !isForEffects && styles.hasHeader,\n              )\n            }\n          >\n            {allSets.map((stickerSet, i) => (\n              <StickerSet\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n                noContextMenus={noContextMenus}\n                index={i}\n                idPrefix={prefix}\n                observeIntersection={observeIntersectionForSet}\n                observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n                observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n                isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n                favoriteStickers={favoriteStickers}\n                isSavedMessages={isSavedMessages}\n                isCurrentUserPremium={isCurrentUserPremium}\n                isTranslucent={isTranslucent}\n                isChatStickerSet={stickerSet.id === chatStickerSetId}\n                onStickerSelect={handleStickerSelect}\n                onStickerUnfave={handleStickerUnfave}\n                onStickerFave={handleStickerFave}\n                onStickerRemoveRecent={handleRemoveRecentSticker}\n                forcePlayback\n                shouldHideHeader={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      effect,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      effectStickers: effect?.stickers,\n      effectEmojis: effect?.emojis,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo, useRef,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiMessage,\n  ApiReaction,\n  ApiReactionWithPaid,\n} from '../../../../api/types';\n\nimport {\n  getReactionKey, sortReactions,\n} from '../../../../global/helpers';\nimport { selectChatFullInfo } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nimport ReactionEmoji from '../../../common/reactions/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  selectedReactionIds?: string[];\n  message?: ApiMessage;\n  onReactionSelect: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  isWithPaidReaction?: boolean;\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  reactionsLimit?: number;\n  isCurrentUserPremium?: boolean;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  isWithPaidReaction,\n  message,\n  reactionsLimit,\n  onReactionSelect,\n  onReactionContext,\n}) => {\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const currentReactions = message?.reactions?.results;\n\n  const shouldUseCurrentReactions = reactionsLimit && currentReactions\n    && currentReactions.length >= reactionsLimit;\n\n  const allAvailableReactions = useMemo(() => {\n    if (shouldUseCurrentReactions) {\n      const reactions = currentReactions.map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactions.unshift({ type: 'paid' });\n      }\n      return reactions;\n    }\n\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      const reactionsToSort: ApiReactionWithPaid[] = (availableReactions || []).map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactionsToSort.unshift({ type: 'paid' });\n      }\n      return sortReactions(reactionsToSort, topReactions);\n    }\n\n    const reactionsToSort: ApiReactionWithPaid[] = enabledReactions.allowed.slice();\n    if (isWithPaidReaction) {\n      reactionsToSort.unshift({ type: 'paid' });\n    }\n\n    return sortReactions(reactionsToSort, topReactions);\n  }, [\n    availableReactions, enabledReactions, topReactions, shouldUseCurrentReactions, currentReactions, isWithPaidReaction,\n  ]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect}\n                onContextMenu={onReactionContext}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { availableReactions, topReactions } = global.reactions;\n\n    const { maxUniqueReactions } = global.appConfig || {};\n    const { enabledReactions, isPaidReactionAvailable } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n      reactionsLimit: maxUniqueReactions,\n      isWithPaidReaction: isPaidReactionAvailable,\n    };\n  },\n)(ReactionPickerLimited));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"MhpiTAwi\",\"wrapper\":\"NIaqmosK\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiReaction,\n  ApiReactionWithPaid,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n} from '../../../../api/types';\nimport type { IAnchorPosition } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\n\nimport { getReactionKey, getStoryKey } from '../../../../global/helpers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectIsContextMenuTranslucent,\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { isUserId } from '../../../../util/entities/ids';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { buildCustomEmojiHtml } from '../../composer/helpers/customEmoji';\n\nimport { getIsMobile } from '../../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../../../common/CustomEmojiPicker';\nimport Menu from '../../../ui/Menu';\nimport StickerPicker from '../../composer/StickerPicker';\nimport ReactionPickerLimited from './ReactionPickerLimited';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  shouldUseFullPicker?: boolean;\n  message?: ApiMessage;\n  story?: ApiStory | ApiStorySkipped;\n  isCurrentUserPremium?: boolean;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n  sendAsMessage?: boolean;\n  chatId?: string;\n  isForEffects?: boolean;\n  availableEffectById: Record<string, ApiAvailableEffect>;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\nconst REACTION_SELECTOR_WIDTH = 16.375 * REM;\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  story,\n  position,\n  isTranslucent,\n  isCurrentUserPremium,\n  shouldUseFullPicker,\n  sendAsMessage,\n  chatId,\n  isForEffects,\n  availableEffectById,\n}) => {\n  const {\n    toggleReaction, closeReactionPicker, sendMessage, showNotification, sendStoryReaction, saveEffectInDraft,\n    requestEffectInComposer, addLocalPaidReaction, openPaidReactionModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const renderedStoryPeerId = useCurrentOrPrev(story?.peerId, true);\n  const renderedStoryId = useCurrentOrPrev(story?.id);\n  const storedPosition = useCurrentOrPrev(position, true);\n  const menuRef = useRef<HTMLDivElement>();\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    if (renderedStoryId) {\n      return storedPosition;\n    }\n\n    return {\n      x: storedPosition.x + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [renderedStoryId, storedPosition, shouldUseFullPicker]);\n\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({\n    withPortal: true,\n    isDense: !renderedStoryPeerId,\n    deltaX: !getIsMobile() && menuRef.current\n      ? -(menuRef.current.offsetWidth - REACTION_SELECTOR_WIDTH) / 2 - FULL_PICKER_SHIFT_DELTA.x / 2\n      : 0,\n  }));\n\n  const handleToggleCustomReaction = useLastCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction: ApiReaction = sticker.isCustomEmoji\n      ? { type: 'custom', documentId: sticker.id }\n      : { type: 'emoji', emoticon: sticker.emoji! };\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    if (reaction.type === 'paid') {\n      addLocalPaidReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, count: 1,\n      });\n    } else {\n      toggleReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n      });\n    }\n    closeReactionPicker();\n  });\n\n  const handleReactionContextMenu = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (reaction.type !== 'paid') return;\n\n    openPaidReactionModal({\n      chatId: renderedChatId!,\n      messageId: renderedMessageId!,\n    });\n    closeReactionPicker();\n  });\n\n  const handleStoryReactionSelect = useLastCallback((item: ApiReactionWithPaid | ApiSticker) => {\n    if ('type' in item && item.type === 'paid') return; // Not supported for stories\n\n    const reaction = 'id' in item ? { type: 'custom', documentId: item.id } as const : item;\n\n    const sticker = 'type' in item && item.type === 'custom' ? getGlobal().customEmojis.byId[item.documentId]\n      : 'id' in item ? item : undefined;\n\n    if (sticker && !sticker.isFree && !isCurrentUserPremium) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n\n      closeReactionPicker();\n\n      return;\n    }\n\n    if (!sendAsMessage) {\n      sendStoryReaction({\n        peerId: renderedStoryPeerId!,\n        storyId: renderedStoryId!,\n        containerId: getStoryKey(renderedStoryPeerId!, renderedStoryId!),\n        reaction,\n        shouldAddToRecent: true,\n      });\n      closeReactionPicker();\n      return;\n    }\n\n    let text: string | undefined;\n    let entities: ApiMessageEntity[] | undefined;\n\n    if ('type' in item && item.type === 'emoji') {\n      text = item.emoticon;\n    } else {\n      const customEmojiMessage = parseHtmlAsFormattedText(buildCustomEmojiHtml(sticker!));\n      text = customEmojiMessage.text;\n      entities = customEmojiMessage.entities;\n    }\n\n    sendMessage({ text, entities, isReaction: true });\n    closeReactionPicker();\n  });\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker) => {\n    const availableEffects = Object.values(availableEffectById);\n    const effectId = availableEffects.find((effect) => effect.effectStickerId === sticker.id)?.id;\n\n    if (chatId) saveEffectInDraft({ chatId, threadId: MAIN_THREAD_ID, effectId });\n\n    if (effectId) requestEffectInComposer({});\n    closeReactionPicker();\n  });\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push(getReactionKey(reaction));\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(\n        styles.menuContent,\n        !shouldUseFullPicker && !renderedStoryId && styles.onlyReactions,\n        renderedStoryId && styles.storyMenu,\n      )}\n      withPortal\n      noCompact\n      anchor={renderingPosition}\n      positionY={story && 'bottom'}\n      getTriggerElement={getTriggerElement}\n      getRootElement={getRootElement}\n      getMenuElement={getMenuElement}\n      getLayout={getLayout}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      {isForEffects && chatId ? (\n        <StickerPicker\n          className=\"\"\n          isHidden={!isOpen}\n          loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n          idPrefix=\"message-effect\"\n          canSendStickers={false}\n          noContextMenus={false}\n          chatId={chatId}\n          isTranslucent={isTranslucent}\n          onStickerSelect={handleStickerSelect}\n          isForEffects={isForEffects}\n        />\n      ) : (\n        <>\n          <CustomEmojiPicker\n            chatId={renderedChatId}\n            idPrefix=\"message-emoji-set-\"\n            isHidden={!isOpen || !(shouldUseFullPicker || renderedStoryId)}\n            loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n            isReactionPicker\n            className={!shouldUseFullPicker && !renderedStoryId ? styles.hidden : undefined}\n            selectedReactionIds={selectedReactionIds}\n            isTranslucent={isTranslucent}\n            onCustomEmojiSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleCustomReaction}\n            onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n            onReactionContext={handleReactionContextMenu}\n          />\n          {!shouldUseFullPicker && Boolean(renderedChatId) && (\n            <ReactionPickerLimited\n              chatId={renderedChatId}\n              loadAndPlay={isOpen}\n              onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n              onReactionContext={handleReactionContextMenu}\n              selectedReactionIds={selectedReactionIds}\n              message={message}\n            />\n          )}\n        </>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const state = selectTabState(global);\n  const availableEffectById = global.availableEffectById;\n  const {\n    chatId, messageId, storyPeerId, storyId, position, sendAsMessage, isForEffects,\n  } = state.reactionPicker || {};\n  const story = storyPeerId && storyId\n    ? selectPeerStory(global, storyPeerId, storyId) as ApiStory | ApiStorySkipped\n    : undefined;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = isUserId(chatId || storyPeerId || '');\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const { maxUniqueReactions } = global.appConfig || {};\n  const areAllReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  const currentReactions = message?.reactions?.results;\n  const shouldUseCurrentReactions = Boolean(maxUniqueReactions && currentReactions\n    && currentReactions.length >= maxUniqueReactions);\n\n  return {\n    message,\n    story,\n    position,\n    shouldUseFullPicker: (chat?.isForbidden || areSomeReactionsAllowed || shouldUseCurrentReactions) ? false\n      : (areAllReactionsAllowed || isPrivateChat),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    sendAsMessage,\n    isForEffects,\n    chatId,\n    availableEffectById,\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"gBh4WvBC\",\"menuContent\":\"qSfKwMzX\",\"storyMenu\":\"srpBMrqr\",\"onlyReactions\":\"dRNSqkOC\",\"hidden\":\"KVwgF6DG\"};","import { fixImageContent } from '../../../../util/parseHtmlAsFormattedText';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QucaiGVU\",\"preview\":\"SHoF85Vw\",\"duration\":\"nI2M1SBH\",\"single\":\"FjrnqGba\",\"no-grouping\":\"g0cTsM9d\",\"noGrouping\":\"g0cTsM9d\",\"file\":\"B6f6GcvN\",\"overlay\":\"bX7LdgxW\",\"action-item\":\"Zo7u5epf\",\"actionItem\":\"Zo7u5epf\",\"delete-file\":\"CYJwy9T_\",\"deleteFile\":\"CYJwy9T_\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { SUPPORTED_PHOTO_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport File from '../../common/File';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useLastCallback(() => {\n    onToggleSpoiler?.(index);\n  });\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'photo':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <Icon\n                name=\"delete\"\n                className={buildClassName(styles.actionItem, styles.deleteFile)}\n\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          <Icon\n            name={attachment.shouldSendAsSpoiler ? 'spoiler-disable' : 'spoiler'}\n            className={styles.actionItem}\n            onClick={handleSpoilerClick}\n          />\n          {onDelete && (\n\n            <Icon name=\"delete\" className={styles.actionItem} onClick={() => onDelete(index)} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport function getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_PHOTO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'photo';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","export default function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","import { type ElementRef } from '../lib/teact/teact';\n\nimport isFullyVisible from './visibility/isFullyVisible';\nimport animateScroll from './animateScroll';\nimport findInViewport from './findInViewport';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: ElementRef<HTMLElement>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll({\n      container,\n      element: allElements[index],\n      position,\n      margin: SCROLL_MARGIN,\n    });\n  }\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useLastCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  });\n\n  const handleArrowKey = useLastCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  });\n\n  const handleItemSelect = useLastCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (!isActive) return false;\n\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  });\n\n  useEffect(() => {\n    if (!isActive) setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n  }, [isActive, shouldRemoveSelectionOnReset]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useLastCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  });\n\n  const handleSelectMention = useLastCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  });\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePreviousDeprecated(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item smaller-icon\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"a27O2Qlr\",\"mobile\":\"khvUZbGZ\",\"symbolMenuOpen\":\"ir5kkMy1\",\"header-border\":\"Pc1k8G8s\",\"headerBorder\":\"Pc1k8G8s\",\"sendButtonStar\":\"C1OOt81o\",\"attachments\":\"_bxSIFgj\",\"attachments-bottom-padding\":\"RPVunBe2\",\"attachmentsBottomPadding\":\"RPVunBe2\",\"caption-wrapper\":\"EtmiUn2k\",\"captionWrapper\":\"EtmiUn2k\",\"caption-top-border\":\"FjjSKMYe\",\"captionTopBorder\":\"FjjSKMYe\",\"caption\":\"Te7lIfpB\",\"dropTarget\":\"AT_d9l0W\",\"dropOutlineContainer\":\"d9O65j_I\",\"dropOutline\":\"jzCBDWMw\",\"outline\":\"xjNY3Z8u\",\"hovered\":\"AnO3BgVv\",\"send-wrapper\":\"wDqWK9MD\",\"sendWrapper\":\"wDqWK9MD\",\"send\":\"kNlWmBJI\",\"is-pointer-env\":\"rYZmraWo\",\"isPointerEnv\":\"rYZmraWo\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAttachment, ApiChatMember, ApiMessage, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getAttachmentMediaType } from '../../../global/helpers';\nimport { selectChatFullInfo, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { validateFiles } from '../../../util/files';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { removeAllSelections } from '../../../util/selection';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useFlag from '../../../hooks/useFlag';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport MentionTooltip from './MentionTooltip';\nimport MessageInput from './MessageInput';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  attachments: ApiAttachment[];\n  editingMessage?: ApiMessage;\n  messageListType?: MessageListType;\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  isForMessage?: boolean;\n  shouldSchedule?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  forceDarkTheme?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n  canScheduleUntilOnline?: boolean;\n  canSchedule?: boolean;\n  onSendWhenOnline?: NoneToVoidFunction;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  editingMessage?: ApiMessage;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  editingMessage,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  isForMessage,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  forceDarkTheme,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n  canScheduleUntilOnline,\n  canSchedule,\n  onSendWhenOnline,\n  paidMessagesStars,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const svgRef = useRef<SVGSVGElement>();\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const mainButtonRef = useRef<HTMLButtonElement>();\n  const inputRef = useRef<HTMLDivElement>();\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePreviousDeprecated(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const isEditing = editingMessage && Boolean(editingMessage);\n  const isInAlbum = editingMessage && editingMessage?.groupedId;\n  const isEditingMessageFile = isEditing && attachments?.length && getAttachmentMediaType(attachments[0]);\n  const notEditingFile = isEditingMessageFile !== 'file';\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const shouldSendCompressed = attachmentSettings.shouldCompress;\n  const isSendingCompressed = Boolean(\n    (shouldSendCompressed || shouldForceCompression || isInAlbum) && !shouldForceAsFile,\n  );\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n  const isInvertedMedia = attachmentSettings.isInvertedMedia;\n  const [shouldSendInHighQuality, setShouldSendInHighQuality] = useState(\n    attachmentSettings.shouldSendInHighQuality,\n  );\n  const [renderingShouldSendInHighQuality, setRenderingShouldSendInHighQuality] = useState(shouldSendInHighQuality);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  const timerRef = useRef<number | undefined>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n      setShouldSendInHighQuality(attachmentSettings.shouldSendInHighQuality);\n    }\n  }, [attachmentSettings, isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [updateAttachmentSettings, isOpen]);\n\n  function setIsInvertedMedia(value?: true) {\n    updateAttachmentSettings({ isInvertedMedia: value });\n  }\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useLastCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = ((shouldSchedule || shouldSendScheduled) && isForMessage && !editingMessage) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped, isInvertedMedia);\n      updateAttachmentSettings({\n        shouldCompress: isSendingCompressed,\n        shouldSendGrouped,\n        isInvertedMedia,\n        shouldSendInHighQuality,\n      });\n    }\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendAttachments(true);\n  });\n\n  const handleSendClick = useLastCallback(() => {\n    sendAttachments();\n  });\n\n  const handleScheduleClick = useLastCallback(() => {\n    sendAttachments(false, true);\n  });\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  });\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  });\n\n  const handleDelete = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  });\n\n  const handleEnableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: true,\n    })));\n  });\n\n  const handleToggleShouldCompress = useLastCallback(() => {\n    const newValue = !shouldSendCompressed;\n    updateAttachmentSettings({ shouldCompress: newValue });\n  });\n\n  const handleToggleQuality = useLastCallback(() => {\n    const newValue = !shouldSendInHighQuality;\n    setShouldSendInHighQuality(newValue);\n    updateAttachmentSettings({ shouldSendInHighQuality: newValue });\n  });\n\n  const handleDisableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  });\n\n  const handleToggleSpoiler = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  });\n\n  const handleResize = useLastCallback(() => {\n    const svg = svgRef.current;\n    if (!svg) {\n      return;\n    }\n\n    const { width, height } = svg.getBoundingClientRect();\n    svg.viewBox.baseVal.width = width;\n    svg.viewBox.baseVal.height = height;\n  });\n\n  // Can't listen for SVG resize\n  useResizeObserver(ref, handleResize);\n\n  useEffectOnce(handleResize);\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [oldLang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios, hasAnyPhoto] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    const hasAnyPhoto = renderingAttachments.some((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio, hasAnyPhoto];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  useEffect(() => {\n    if (shouldSendInHighQuality === renderingShouldSendInHighQuality) return;\n    if (timerRef.current) clearTimeout(timerRef.current);\n    timerRef.current = window.setTimeout(() => {\n      setRenderingShouldSendInHighQuality(shouldSendInHighQuality);\n    }, CLOSE_MENU_ANIMATION_DURATION);\n    return () => {\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n        timerRef.current = undefined;\n      }\n    };\n  }, [shouldSendInHighQuality, renderingShouldSendInHighQuality]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  const canInvertMedia = (() => {\n    if (isEditing) return false;\n    if (!hasMedia) return false;\n    if (!shouldForceAsFile && !shouldForceCompression && !isSendingCompressed) return false;\n    if (isMultiple && shouldSendGrouped) return false;\n    return true;\n  })();\n\n  let title = '';\n  const attachmentsLength = renderingAttachments.length;\n  if (areAllPhotos) {\n    title = oldLang(isEditing ? 'EditMessageReplacePhoto' : 'PreviewSender.SendPhoto', attachmentsLength, 'i');\n  } else if (areAllVideos) {\n    title = oldLang(isEditing ? 'EditMessageReplaceVideo' : 'PreviewSender.SendVideo', attachmentsLength, 'i');\n  } else if (areAllAudios) {\n    title = oldLang(isEditing ? 'EditMessageReplaceAudio' : 'PreviewSender.SendAudio', attachmentsLength, 'i');\n  } else {\n    title = oldLang(isEditing ? 'EditMessageReplaceFile' : 'PreviewSender.SendFile', attachmentsLength, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        {notEditingFile && !isInAlbum\n          && (\n            <DropdownMenu\n              className=\"attachmeneditingMessaget-modal-more-menu with-menu-transitions\"\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              {Boolean(!editingMessage) && (\n                <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{oldLang('Add')}</MenuItem>\n              )}\n              {hasMedia && (\n                <>\n                  {\n                    canInvertMedia && (!isInvertedMedia ? (\n\n                      <MenuItem icon=\"move-caption-up\" onClick={() => setIsInvertedMedia(true)}>\n                        {lang('ContextMoveTextUp')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"move-caption-down\" onClick={() => setIsInvertedMedia(undefined)}>\n                        {lang('ContextMoveTextDown')}\n                      </MenuItem>\n                    ))\n                  }\n                  {\n                    !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n\n                      <MenuItem icon=\"document\" onClick={handleToggleShouldCompress}>\n                        {oldLang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"photo\" onClick={handleToggleShouldCompress}>\n                        {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                      </MenuItem>\n                    ))\n                  }\n                  {isSendingCompressed && !editingMessage && hasAnyPhoto && (\n                    <MenuItem\n                      icon={renderingShouldSendInHighQuality ? 'sd-photo' : 'hd-photo'}\n                      onClick={handleToggleQuality}\n                    >\n                      {lang(renderingShouldSendInHighQuality ? 'SendInStandardQuality' : 'SendInHighQuality')}\n                    </MenuItem>\n                  )}\n                  {isSendingCompressed && hasAnySpoilerable && Boolean(!editingMessage) && (\n                    hasSpoiler ? (\n                      <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                        {oldLang('Attachment.DisableSpoiler')}\n                      </MenuItem>\n                    ) : (\n                      <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                        {oldLang('Attachment.EnableSpoiler')}\n                      </MenuItem>\n                    )\n                  )}\n                </>\n              )}\n              {isMultiple && (\n                shouldSendGrouped ? (\n                  <MenuItem\n                    icon=\"grouped-disable\"\n\n                    onClick={() => setShouldSendGrouped(false)}\n                  >\n                    Ungroup All Media\n                  </MenuItem>\n                ) : (\n\n                  <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                    Group All Media\n                  </MenuItem>\n                )\n              )}\n            </DropdownMenu>\n          )}\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n  const buttonSendCaption = paidMessagesStars ? formatStarsAsIcon(lang,\n    attachmentsLength * paidMessagesStars,\n    {\n      className: styles.sendButtonStar,\n      asFont: true,\n    }) : oldLang('Send');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n        forceDarkTheme && 'component-theme-dark',\n      )}\n      noBackdropClose\n      isLowStackPriority\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={oldLang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <svg className={styles.dropOutlineContainer}>\n          <rect className={styles.dropOutline} x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" rx=\"8\" />\n        </svg>\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n              idPrefix=\"attachment\"\n              forceDarkTheme={forceDarkTheme}\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              customEmojiPrefix=\"attachment\"\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={oldLang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                size=\"smaller\"\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule && !editingMessage ? oldLang('Next')\n                  : editingMessage ? oldLang('Save') : buttonSendCaption}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  canSchedule={canSchedule && isForMessage}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                  onSendWhenOnline={onSendWhenOnline}\n                  canScheduleUntilOnline={canScheduleUntilOnline}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { shouldSuggestCustomEmoji } = global.settings.byKey;\n    const { language } = selectSharedSettings(global);\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent } from 'react';\nimport type { ElementRef } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport TextArea from '../../ui/TextArea';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  maxOptionsCount?: number;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst FALLBACK_MAX_OPTIONS_COUNT = 12;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal = ({\n  isOpen,\n  isQuiz,\n  shouldBeAnonymous,\n  maxOptionsCount = FALLBACK_MAX_OPTIONS_COUNT,\n  onSend,\n  onClear,\n}: OwnProps) => {\n  const questionInputRef = useRef<HTMLInputElement>();\n  const optionsListRef = useRef<HTMLDivElement>();\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useOldLang();\n\n  const handleSolutionChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setSolution(e.target.value);\n  });\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  const addNewOption = useLastCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const isNoCorrectOptionError = isQuizMode && (correctOption === undefined || !options[correctOption].trim());\n\n    const answers = options\n      .map((text, index) => {\n        text = text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          text: {\n            text,\n          },\n          option: String(index),\n          ...(index === correctOption && { correct: true }),\n        };\n      }).filter(Boolean);\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    if (!questionTrimmed || answers.length < 2) {\n      setQuestion(questionTrimmed);\n      if (answers.length) {\n        const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter(Boolean);\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isNoCorrectOptionError) {\n      setHasErrors(true);\n      return;\n    }\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: {\n          text: questionTrimmed,\n        },\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseHtmlAsFormattedText(solution.substring(0, MAX_SOLUTION_LENGTH)))\n        || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  });\n\n  const updateOption = useLastCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < maxOptionsCount) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  });\n\n  const removeOption = useLastCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleCorrectOptionChange = useLastCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  });\n\n  const handleIsAnonymousChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  });\n\n  const handleMultipleAnswersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  });\n\n  const handleQuizModeChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  });\n\n  const handleQuestionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  });\n\n  const getQuestionError = useLastCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  });\n\n  const getOptionsError = useLastCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          maxLength={MAX_OPTION_LENGTH}\n          label={index !== options.length - 1 || options.length === maxOptionsCount\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n\n            onClick={() => removeOption(index)}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: !options[index].trim() }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <div className=\"dialog-checkbox-group\">\n          {!shouldBeAnonymous && (\n            <Checkbox\n              label={lang('PollAnonymous')}\n              checked={isAnonymous}\n              onChange={handleIsAnonymousChange}\n            />\n          )}\n          <Checkbox\n            label={lang('PollMultiple')}\n            checked={isMultipleAnswers}\n            disabled={isQuizMode}\n            onChange={handleMultipleAnswersChange}\n          />\n          <Checkbox\n            label={lang('PollQuiz')}\n            checked={isQuizMode}\n            disabled={isMultipleAnswers || isQuiz !== undefined}\n            onChange={handleQuizModeChange}\n          />\n        </div>\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <TextArea\n              value={solution}\n              onChange={handleSolutionChange}\n              noReplaceNewlines\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import type { ChangeEvent } from 'react';\nimport type { ElementRef } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNewMediaTodo } from '../../../api/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { TabState } from '../../../global/types/tabState';\n\nimport {\n  TODO_ITEM_LENGTH_LIMIT,\n  TODO_ITEMS_LIMIT,\n  TODO_TITLE_LENGTH_LIMIT,\n} from '../../../config';\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectChatMessage } from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { generateUniqueNumberId } from '../../../util/generateUniqueId';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport './ToDoListModal.scss';\n\nexport type OwnProps = {\n  modal: TabState['todoListModal'];\n  onSend: (todoList: ApiNewMediaTodo) => void;\n  onClear: () => void;\n};\n\nexport type StateProps = {\n  editingMessage?: ApiMessage;\n  maxItemsCount?: number;\n  maxTitleLength?: number;\n  maxItemLength?: number;\n};\n\ntype Item = {\n  id: number;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTION_LENGTH = 100;\n\nconst ToDoListModal = ({\n  modal,\n  maxItemsCount = TODO_ITEMS_LIMIT,\n  maxTitleLength = TODO_TITLE_LENGTH_LIMIT,\n  maxItemLength = TODO_ITEM_LENGTH_LIMIT,\n  editingMessage,\n  onSend,\n  onClear,\n}: OwnProps & StateProps) => {\n  const { editTodo, closeTodoListModal, appendTodoList } = getActions();\n\n  const titleInputRef = useRef<HTMLInputElement>();\n  const itemsListRef = useRef<HTMLDivElement>();\n\n  const [title, setTitle] = useState<string>('');\n  const [items, setItems] = useState<Item[]>([{ id: generateUniqueNumberId(), text: '' }]);\n  const [isOthersCanAppend, setIsOthersCanAppend] = useState(true);\n  const [isOthersCanComplete, setIsOthersCanComplete] = useState(true);\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  // Treat \"Add task\" as edit mode for own checklists\n  const isAddTaskMode = renderingModal?.forNewTask && !editingMessage?.isOutgoing;\n\n  const editingTodo = editingMessage?.content.todo?.todo;\n\n  const frozenTasks = useMemo(() => {\n    if (!isAddTaskMode || !editingTodo) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return editingTodo.items.map((item) => ({\n      id: item.id,\n      text: item.title.text,\n      isDisabled: true,\n    }));\n  }, [isAddTaskMode, editingTodo]);\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (editingTodo) {\n      setTitle(editingTodo.title.text);\n      setIsOthersCanAppend(editingTodo.othersCanAppend ?? false);\n      setIsOthersCanComplete(editingTodo.othersCanComplete ?? false);\n      if (!isAddTaskMode) {\n        const editingItems = editingTodo.items.map((item) => ({\n          id: item.id,\n          text: item.title.text,\n        }));\n        if (editingItems.length < maxItemsCount) {\n          editingItems.push({ id: generateUniqueNumberId(), text: '' });\n        }\n        setItems(editingItems);\n      }\n    }\n  }, [editingTodo, isAddTaskMode, maxItemsCount]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setTitle('');\n      setItems([{ id: generateUniqueNumberId(), text: '' }]);\n      setIsOthersCanAppend(true);\n      setIsOthersCanComplete(true);\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (isOpen) {\n      // Wait for the DOM to be updated\n      requestMeasure(() => {\n        if (renderingModal?.forNewTask) {\n          const inputs = itemsListRef.current?.querySelectorAll('input');\n          const lastInput = inputs?.[inputs.length - 1];\n          lastInput?.focus();\n        } else {\n          focusInput(titleInputRef);\n        }\n      });\n    }\n  }, [focusInput, isOpen, renderingModal?.forNewTask]);\n\n  const addNewItem = useLastCallback((newItems: Item[]) => {\n    const id = generateUniqueNumberId();\n    setItems([...newItems, { id, text: '' }]);\n\n    requestNextMutation(() => {\n      const list = itemsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const todoItems = items\n      .map((item) => {\n        const text = item.text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          id: item.id,\n          title: {\n            text: text.substring(0, maxItemLength),\n          },\n        };\n      }).filter(Boolean);\n\n    const titleTrimmed = title.trim().substring(0, maxTitleLength);\n    if (!titleTrimmed || todoItems.length === 0) {\n      setTitle(titleTrimmed);\n      if (todoItems.length) {\n        const itemsTrimmed = items.map((o) => (\n          { ...o, text: o.text.trim().substring(0, maxItemLength) }))\n          .filter((o) => o.text.length);\n        if (itemsTrimmed.length === 0) {\n          addNewItem([]);\n        } else {\n          setItems([...itemsTrimmed, { id: generateUniqueNumberId(), text: '' }]);\n        }\n      } else {\n        addNewItem([]);\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isAddTaskMode && editingMessage) {\n      appendTodoList({\n        chatId: editingMessage.chatId,\n        messageId: editingMessage.id,\n        items: todoItems,\n      });\n      closeTodoListModal();\n      return;\n    }\n\n    const payload: ApiNewMediaTodo = {\n      todo: {\n        title: {\n          text: titleTrimmed,\n        },\n        items: todoItems,\n        othersCanAppend: isOthersCanAppend,\n        othersCanComplete: isOthersCanComplete,\n      },\n    };\n\n    if (editingMessage) {\n      editTodo({\n        chatId: editingMessage.chatId,\n        todo: payload,\n        messageId: editingMessage.id,\n      });\n    } else {\n      onSend(payload);\n    }\n\n    closeTodoListModal();\n  });\n\n  const updateItem = useLastCallback((index: number, text: string) => {\n    const newItems = [...items];\n    newItems[index] = { ...newItems[index], text };\n    if (newItems[newItems.length - 1].text.trim().length && newItems.length < maxItemsCount) {\n      addNewItem(newItems);\n    } else {\n      setItems(newItems);\n    }\n  });\n\n  const removeItem = useLastCallback((index: number) => {\n    const newItems = [...items];\n    newItems.splice(index, 1);\n    setItems(newItems);\n\n    requestNextMutation(() => {\n      if (!itemsListRef.current) {\n        return;\n      }\n\n      itemsListRef.current.classList.toggle('overflown', itemsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleIsOthersCanAppendChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsOthersCanAppend(e.target.checked);\n  });\n  const handleIsOthersCanCompleteChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsOthersCanComplete(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleCreate();\n    }\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  });\n\n  const getTitleError = useLastCallback(() => {\n    if (hasErrors && !title.trim().length) {\n      return lang('ToDoListErrorChooseTitle');\n    }\n\n    return undefined;\n  });\n\n  const getItemsError = useLastCallback((index: number) => {\n    const itemsTrimmed = items.map((o) => o.text.trim()).filter((o) => o.length);\n    if (hasErrors && itemsTrimmed.length < 1 && !items[index].text.trim().length) {\n      return lang('ToDoListErrorChooseTasks');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    const title = isAddTaskMode ? 'TitleAppendToDoList' : editingMessage ? 'TitleEditToDoList' : 'TitleNewToDoList';\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('AriaToDoCancel')} onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang(title)}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang(isAddTaskMode ? 'Add' : editingMessage ? 'Save' : 'Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderItems() {\n    const tasksToRender = [...frozenTasks, ...items];\n    return tasksToRender.map((item, index) => {\n      const stateIndex = index - frozenTasks.length;\n      return (\n        <div className=\"item-wrapper\">\n          <InputText\n            maxLength={MAX_OPTION_LENGTH}\n            label={index !== tasksToRender.length - 1 || tasksToRender.length === maxItemsCount\n              ? lang('TitleTask')\n              : lang('TitleAddTask')}\n            error={getItemsError(stateIndex)}\n            value={item.text}\n            disabled={item.isDisabled}\n            onChange={(e) => updateItem(stateIndex, e.currentTarget.value)}\n            onKeyPress={handleKeyPress}\n          />\n          {index !== tasksToRender.length - 1 && !item.isDisabled && (\n            <Button\n              className=\"item-remove-button\"\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              ariaLabel={lang('Delete')}\n              onClick={() => removeItem(stateIndex)}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          )}\n        </div>\n      );\n    });\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"ToDoListModal\">\n      {!isAddTaskMode && (\n        <InputText\n          ref={titleInputRef}\n          label={lang('InputTitle')}\n          value={title}\n          error={getTitleError()}\n          onChange={handleTitleChange}\n          onKeyPress={handleKeyPress}\n        />\n      )}\n      {isAddTaskMode && (\n        <div className=\"readonly-title\">\n          {title}\n        </div>\n      )}\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={itemsListRef}>\n        <h3 className=\"items-header\">\n          {lang('TitleToDoList')}\n        </h3>\n\n        {renderItems()}\n\n      </div>\n\n      <div className=\"items-count-hint\">\n        {lang('HintTodoListTasksCount', {\n          count: maxItemsCount - items.length - (isAddTaskMode && editingTodo ? editingTodo.items.length : 0),\n        })}\n      </div>\n\n      <div className=\"options-divider\" />\n\n      {!isAddTaskMode && (\n        <div className=\"options-footer\">\n          <div className=\"dialog-checkbox-group\">\n            <Checkbox\n              label={lang('AllowOthersAddTasks')}\n              checked={isOthersCanAppend}\n              onChange={handleIsOthersCanAppendChange}\n            />\n            <Checkbox\n              label={lang('AllowOthersMarkAsDone')}\n              checked={isOthersCanComplete}\n              onChange={handleIsOthersCanCompleteChange}\n            />\n          </div>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { appConfig } = global;\n    const editingMessage = modal?.messageId ? selectChatMessage(global, modal.chatId, modal.messageId) : undefined;\n    return {\n      editingMessage,\n      maxItemsCount: appConfig?.todoItemsMax,\n      maxTitleLength: appConfig?.todoTitleLengthMax,\n      maxItemLength: appConfig?.todoItemLengthMax,\n    };\n  },\n)(ToDoListModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport { BASE_URL, IS_PACKAGED_ELECTRON } from '../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji/emoji';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `${IS_PACKAGED_ELECTRON ? BASE_URL : '.'}/img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n          draggable={false}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransitionDeprecated(shouldRender);\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { IconName } from '../../../types/icons';\nimport type { EmojiData, EmojiModule, EmojiRawData } from '../../../util/emoji/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport animateScroll from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { uncompressEmoji } from '../../../util/emoji/emoji';\nimport { pick } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, IconName> = {\n  recent: 'recent',\n  people: 'smile',\n  nature: 'animals',\n  foods: 'eats',\n  activity: 'sport',\n  places: 'car',\n  objects: 'lamp',\n  symbols: 'language',\n  flags: 'flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule> | undefined;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useOldLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useLastCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector<HTMLElement>(`#emoji-category-${index}`)!;\n    animateScroll({\n      container: containerRef.current!,\n      element: categoryEl,\n      position: 'start',\n      margin: FOCUS_MARGIN,\n      maxDistance: SMOOTH_SCROLL_DISTANCE,\n    });\n  });\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  });\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <Icon name={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <Transition className={containerClassName} activeKey={shouldRenderContent ? 1 : 0} name=\"fade\" shouldCleanup>\n      {!shouldRenderContent ? (\n        <Loading />\n      ) : (\n        <>\n          <div\n            ref={headerRef}\n            className={headerClassName}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {allCategories.map(renderCategoryButton)}\n          </div>\n          <div\n            ref={containerRef}\n            onScroll={handleContentScroll}\n            className={buildClassName('EmojiPicker-main', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n          >\n            {allCategories.map((category, i) => (\n              <EmojiCategory\n                category={category}\n                index={i}\n                allEmojis={emojis}\n                observeIntersection={observeIntersection}\n                shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n                onEmojiSelect={handleEmojiSelect}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </Transition>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { getVideoMediaHash, getVideoPreviewMediaHash } from '../../global/helpers';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Spinner from '../ui/Spinner';\nimport Icon from './icons/Icon';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewHash = !gif.hasVideoPreview && gif.thumbnail && getVideoMediaHash(gif, 'pictogram');\n  const previewBlobUrl = useMedia(previewHash, !loadAndPlay);\n\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n\n  const videoHash = getVideoPreviewMediaHash(gif) || getVideoMediaHash(gif, 'full');\n  const videoData = useMedia(videoHash, !loadAndPlay);\n\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.gif-context-menu .bubble'));\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  });\n\n  const handleUnsaveClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  });\n\n  const handleContextDelete = useLastCallback(() => {\n    onUnsaveClick?.(gif);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <Icon name=\"close\" className=\"gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n          draggable={false}\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport GifButton from '../../common/GifButton';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useLastCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  });\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const isLoading = canSendGifs && (!canRenderContents || !savedGifs);\n\n  return (\n    <Transition\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      slideClassName=\"GifPickerGrid\"\n      activeKey={isLoading ? 0 : 1}\n      name=\"fade\"\n      shouldCleanup\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading color=\"yellow\" />\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  canSearch?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  Emoji,\n  CustomEmoji,\n  Stickers,\n  GIFs,\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText, canSearch,\n}) => {\n  const lang = useOldLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useLastCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  });\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && canSearch && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <Icon name=\"search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <Icon name=\"delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import type { FC } from '@teact';\nimport {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '@teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\nimport type { AnimationLevel, ThreadId } from '../../../types';\nimport type { MenuPositionOptions } from '../../ui/Menu';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectIsContextMenuTranslucent, selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport GifPicker from './GifPicker';\nimport StickerPicker from './StickerPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  isMessageComposer?: boolean;\n  idPrefix: string;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n}\n& MenuPositionOptions;\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isBackgroundTranslucent?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isMessageComposer,\n  idPrefix,\n  isAttachmentModal,\n  canSendPlainText,\n  className,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  isLeftColumnShown,\n  isBackgroundTranslucent,\n  animationLevel,\n  ...menuPositionOptions\n}) => {\n  const [activeTab, setActiveTab] = useState<SymbolMenuTabs>(SymbolMenuTabs.Emoji);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, onClose, false, false);\n\n  const lang = useOldLang();\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  });\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleSearch = useLastCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  });\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            idPrefix={idPrefix}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            idPrefix={idPrefix}\n            canSendStickers={canSendStickers}\n            noContextMenus={!isMessageComposer}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name={resolveTransitionName('slide', animationLevel)}\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        canSearch={isMessageComposer}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n      isMessageComposer && 'in-middle-column',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      {...(isAttachmentModal ? menuPositionOptions : {\n        positionX: 'left',\n        positionY: 'bottom',\n      })}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n      animationLevel: selectSharedSettings(global).animationLevel,\n    };\n  },\n)(SymbolMenu));\n","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatCommand.scss';\n\ntype OwnProps<T = undefined> = {\n  command: string;\n  description: string;\n  peer?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  clickArg: T;\n  onClick: (arg: T) => void;\n};\n\nconst ChatCommand = <T,>({\n  withAvatar,\n  focus,\n  command,\n  description,\n  peer,\n  clickArg,\n  onClick,\n}: OwnProps<T>) => {\n  const handleClick = useLastCallback(() => {\n    onClick(clickArg);\n  });\n\n  return (\n    <ListItem\n      key={command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={handleClick}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" peer={peer} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">\n          /\n          {command}\n        </span>\n        <span className=\"subtitle\">{renderText(description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(ChatCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiBotCommand, ApiMessage, ApiQuickReply, ApiUser,\n} from '../../../api/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport freezeWhenClosed from '../../../util/hoc/freezeWhenClosed';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ChatCommand from './ChatCommand';\n\nimport styles from './ChatCommandTooltip.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  quickReplies?: ApiQuickReply[];\n  quickReplyMessages?: Record<number, ApiMessage>;\n  self: ApiUser;\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype QuickReplyWithDescription = {\n  id: number;\n  command: string;\n  description: string;\n};\n\nconst ChatCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  withUsername,\n  botCommands,\n  quickReplies,\n  quickReplyMessages,\n  self,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand, sendQuickReply } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useLastCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${getMainUsername(bot)}` : ''}`,\n    });\n    onClick();\n  });\n\n  const handleSendQuickReply = useLastCallback((id: number) => {\n    sendQuickReply({ chatId, quickReplyId: id });\n    onClick();\n  });\n\n  const quickRepliesWithDescription = useMemo(() => {\n    if (!quickReplies?.length || !quickReplyMessages) return undefined;\n    return quickReplies.map((reply) => {\n      const message = quickReplyMessages[reply.topMessageId];\n      return {\n        id: reply.id,\n        command: reply.shortcut,\n        description: message?.content.text?.text || '',\n      } satisfies QuickReplyWithDescription;\n    });\n  }, [quickReplies, quickReplyMessages]);\n\n  const handleKeyboardSelect = useLastCallback((item: ApiBotCommand | QuickReplyWithDescription) => {\n    if (!item.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    if ('id' in item) {\n      handleSendQuickReply(item.id);\n    } else {\n      handleSendCommand(item);\n    }\n\n    return true;\n  });\n\n  const keyboardNavigationItems = useMemo(() => {\n    if (!botCommands && !quickRepliesWithDescription) return undefined;\n    return ([] as (ApiBotCommand | QuickReplyWithDescription)[])\n      .concat(quickRepliesWithDescription || [], botCommands || []);\n  }, [botCommands, quickRepliesWithDescription]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: keyboardNavigationItems,\n    onSelect: handleKeyboardSelect,\n    onClose,\n  });\n\n  const isEmpty = (botCommands && !botCommands.length) || (quickReplies && !quickReplies.length);\n\n  useEffect(() => {\n    if (isEmpty) {\n      onClose();\n    }\n  }, [isEmpty, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  if (!shouldRender || isEmpty) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {quickRepliesWithDescription?.map((reply, index) => (\n        <ChatCommand\n          key={`quickReply_${reply.id}`}\n          command={reply.command}\n          description={reply.description}\n          peer={self}\n          withAvatar\n          clickArg={reply.id}\n          onClick={handleSendQuickReply}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n      {botCommands?.map((command, index) => (\n        <ChatCommand\n          key={`${command.botId}_${command.command}`}\n          command={command.command}\n          description={command.description}\n          // No need for expensive global updates on users and chats, so we avoid them\n          peer={getGlobal().users.byId[command.botId]}\n          withAvatar\n          clickArg={command}\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex + (quickRepliesWithDescription?.length || 0) === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(freezeWhenClosed(ChatCommandTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iaTB59vy\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport ChatCommand from './ChatCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useLastCallback((command: string) => {\n    sendBotCommand({\n      command: `/${command}`,\n    });\n    onClose();\n  });\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <ChatCommand\n          key={botCommand.command}\n          command={botCommand.command}\n          description={botCommand.description}\n          clickArg={botCommand.command}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ThreadId } from '../../../types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_8sFuAomM\",\"emojiButton\":\"crWzZ2jr\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useLastCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  });\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport ReactionSelector from '../message/reactions/ReactionSelector';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onRemoveEffect?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  chatId?: string;\n  withEffects?: boolean;\n  hasCurrentEffect?: boolean;\n  effectReactions?: ApiReaction[];\n  allAvailableReactions?: ApiAvailableReaction[];\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n  isInSavedMessages?: boolean;\n  isInStoryViewer?: boolean;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst ANIMATION_DURATION = 200;\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canSchedule,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onRemoveEffect,\n  onClose,\n  onCloseAnimationEnd,\n  chatId,\n  withEffects,\n  hasCurrentEffect,\n  effectReactions,\n  allAvailableReactions,\n  onToggleReaction,\n  canBuyPremium,\n  isCurrentUserPremium,\n  isInSavedMessages,\n  isInStoryViewer,\n  canPlayAnimatedEmojis,\n}) => {\n  const {\n    openEffectPicker,\n  } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [areItemsHidden, hideItems, showItems] = useFlag();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      showItems();\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleOpenMessageEffectsPicker = useLastCallback((position: IAnchorPosition) => {\n    hideItems();\n    if (chatId) openEffectPicker({ chatId, position });\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className={buildClassName(\n        'CustomSendMenu', 'fluid', 'with-menu-transitions', withEffects && 'with-effects',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n\n      {withEffects && !isInStoryViewer && (\n        <ReactionSelector\n          allAvailableReactions={allAvailableReactions}\n          effectReactions={effectReactions}\n          currentReactions={undefined}\n          onToggleReaction={onToggleReaction!}\n          isPrivate\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isInSavedMessages={isInSavedMessages}\n          isForEffects\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenMessageEffectsPicker}\n          onClose={onClose}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'CustomSendMenu_items',\n          areItemsHidden && 'CustomSendMenu_items-hidden',\n        )}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{oldLang('SendWithoutSound')}</MenuItem>}\n        {canSchedule && onSendSchedule && (\n          <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n            {oldLang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n        )}\n        {canSchedule && onSendSchedule && displayScheduleUntilOnline && (\n          <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n            {oldLang('SendWhenOnline')}\n          </MenuItem>\n        )}\n        {withEffects && hasCurrentEffect && (\n          <MenuItem icon=\"delete\" onClick={onRemoveEffect}>\n            {lang('RemoveEffect')}\n          </MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { IAnchorPosition } from '../../../types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../../util/getKeyFromEvent';\nimport stopEvent from '../../../util/stopEvent';\nimport { INPUT_CUSTOM_EMOJI_SELECTOR } from './helpers/customEmoji';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport useVirtualBackdrop from '../../../hooks/useVirtualBackdrop';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './TextFormatter.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  anchorPosition?: IAnchorPosition;\n  selectedRange?: Range;\n  setSelectedRange: (range: Range) => void;\n  onClose: () => void;\n};\n\ninterface ISelectedTextFormats {\n  bold?: boolean;\n  italic?: boolean;\n  underline?: boolean;\n  strikethrough?: boolean;\n  monospace?: boolean;\n  spoiler?: boolean;\n}\n\nconst TEXT_FORMAT_BY_TAG_NAME: Record<string, keyof ISelectedTextFormats> = {\n  B: 'bold',\n  STRONG: 'bold',\n  I: 'italic',\n  EM: 'italic',\n  U: 'underline',\n  DEL: 'strikethrough',\n  CODE: 'monospace',\n  SPAN: 'spoiler',\n};\nconst fragmentEl = document.createElement('div');\n\nconst TextFormatter: FC<OwnProps> = ({\n  isOpen,\n  anchorPosition,\n  selectedRange,\n  setSelectedRange,\n  onClose,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const linkUrlInputRef = useRef<HTMLInputElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen);\n  const [isLinkControlOpen, openLinkControl, closeLinkControl] = useFlag();\n  const [linkUrl, setLinkUrl] = useState('');\n  const [isEditingLink, setIsEditingLink] = useState(false);\n  const [inputClassName, setInputClassName] = useState<string | undefined>();\n  const [selectedTextFormats, setSelectedTextFormats] = useState<ISelectedTextFormats>({});\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n  useVirtualBackdrop(\n    isOpen,\n    containerRef,\n    onClose,\n    true,\n  );\n\n  useEffect(() => {\n    if (isLinkControlOpen) {\n      linkUrlInputRef.current!.focus();\n    } else {\n      setLinkUrl('');\n      setIsEditingLink(false);\n    }\n  }, [isLinkControlOpen]);\n\n  useEffect(() => {\n    if (!shouldRender) {\n      closeLinkControl();\n      setSelectedTextFormats({});\n      setInputClassName(undefined);\n    }\n  }, [closeLinkControl, shouldRender]);\n\n  useEffect(() => {\n    if (!isOpen || !selectedRange) {\n      return;\n    }\n\n    const selectedFormats: ISelectedTextFormats = {};\n    let { parentElement } = selectedRange.commonAncestorContainer;\n    while (parentElement && parentElement.id !== EDITABLE_INPUT_ID) {\n      const textFormat = TEXT_FORMAT_BY_TAG_NAME[parentElement.tagName];\n      if (textFormat) {\n        selectedFormats[textFormat] = true;\n      }\n\n      parentElement = parentElement.parentElement;\n    }\n\n    setSelectedTextFormats(selectedFormats);\n  }, [isOpen, selectedRange, openLinkControl]);\n\n  const restoreSelection = useLastCallback(() => {\n    if (!selectedRange) {\n      return;\n    }\n\n    const selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(selectedRange);\n    }\n  });\n\n  const updateSelectedRange = useLastCallback(() => {\n    const selection = window.getSelection();\n    if (selection) {\n      setSelectedRange(selection.getRangeAt(0));\n    }\n  });\n\n  const getSelectedText = useLastCallback((shouldDropCustomEmoji?: boolean) => {\n    if (!selectedRange) {\n      return undefined;\n    }\n    fragmentEl.replaceChildren(selectedRange.cloneContents());\n    if (shouldDropCustomEmoji) {\n      fragmentEl.querySelectorAll(INPUT_CUSTOM_EMOJI_SELECTOR).forEach((el) => {\n        el.replaceWith(el.getAttribute('alt')!);\n      });\n    }\n    return fragmentEl.innerHTML;\n  });\n\n  const getSelectedElement = useLastCallback(() => {\n    if (!selectedRange) {\n      return undefined;\n    }\n\n    return selectedRange.commonAncestorContainer.parentElement;\n  });\n\n  function updateInputStyles() {\n    const input = linkUrlInputRef.current;\n    if (!input) {\n      return;\n    }\n\n    const { offsetWidth, scrollWidth, scrollLeft } = input;\n    if (scrollWidth <= offsetWidth) {\n      setInputClassName(undefined);\n      return;\n    }\n\n    let className = '';\n    if (scrollLeft < scrollWidth - offsetWidth) {\n      className = 'mask-right';\n    }\n    if (scrollLeft > 0) {\n      className += ' mask-left';\n    }\n\n    setInputClassName(className);\n  }\n\n  function handleLinkUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setLinkUrl(e.target.value);\n    updateInputStyles();\n  }\n\n  function getFormatButtonClassName(key: keyof ISelectedTextFormats) {\n    if (selectedTextFormats[key]) {\n      return 'active';\n    }\n\n    if (key === 'monospace' || key === 'strikethrough') {\n      if (Object.keys(selectedTextFormats).some(\n        (fKey) => fKey !== key && Boolean(selectedTextFormats[fKey as keyof ISelectedTextFormats]),\n      )) {\n        return 'disabled';\n      }\n    } else if (selectedTextFormats.monospace || selectedTextFormats.strikethrough) {\n      return 'disabled';\n    }\n\n    return undefined;\n  }\n\n  const handleSpoilerText = useLastCallback(() => {\n    if (selectedTextFormats.spoiler) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.dataset.entityType !== ApiMessageEntityTypes.Spoiler\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        spoiler: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand(\n      'insertHTML', false, `<span class=\"spoiler\" data-entity-type=\"${ApiMessageEntityTypes.Spoiler}\">${text}</span>`,\n    );\n    onClose();\n  });\n\n  const handleBoldText = useLastCallback(() => {\n    setSelectedTextFormats((selectedFormats) => {\n      // Somehow re-applying 'bold' command to already bold text doesn't work\n      document.execCommand(selectedFormats.bold ? 'removeFormat' : 'bold');\n      Object.keys(selectedFormats).forEach((key) => {\n        if ((key === 'italic' || key === 'underline') && Boolean(selectedFormats[key])) {\n          document.execCommand(key);\n        }\n      });\n\n      updateSelectedRange();\n      return {\n        ...selectedFormats,\n        bold: !selectedFormats.bold,\n      };\n    });\n  });\n\n  const handleItalicText = useLastCallback(() => {\n    document.execCommand('italic');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      italic: !selectedFormats.italic,\n    }));\n  });\n\n  const handleUnderlineText = useLastCallback(() => {\n    document.execCommand('underline');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      underline: !selectedFormats.underline,\n    }));\n  });\n\n  const handleStrikethroughText = useLastCallback(() => {\n    if (selectedTextFormats.strikethrough) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'DEL'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        strikethrough: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand('insertHTML', false, `<del>${text}</del>`);\n    onClose();\n  });\n\n  const handleMonospaceText = useLastCallback(() => {\n    if (selectedTextFormats.monospace) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'CODE'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        monospace: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    document.execCommand('insertHTML', false, `<code class=\"text-entity-code\" dir=\"auto\">${text}</code>`);\n    onClose();\n  });\n\n  const handleLinkUrlConfirm = useLastCallback(() => {\n    const formattedLinkUrl = (ensureProtocol(linkUrl) || '').split('%').map(encodeURI).join('%');\n\n    if (isEditingLink) {\n      const element = getSelectedElement();\n      if (!element || element.tagName !== 'A') {\n        return;\n      }\n\n      (element as HTMLAnchorElement).href = formattedLinkUrl;\n\n      onClose();\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    restoreSelection();\n    document.execCommand(\n      'insertHTML',\n      false,\n      `<a href=${formattedLinkUrl} class=\"text-entity-link\" dir=\"auto\">${text}</a>`,\n    );\n    onClose();\n  });\n\n  const handleKeyDown = useLastCallback((e: KeyboardEvent) => {\n    const HANDLERS_BY_KEY: Record<string, AnyToVoidFunction> = {\n      k: openLinkControl,\n      b: handleBoldText,\n      u: handleUnderlineText,\n      i: handleItalicText,\n      m: handleMonospaceText,\n      s: handleStrikethroughText,\n      p: handleSpoilerText,\n    };\n\n    const handler = HANDLERS_BY_KEY[getKeyFromEvent(e)];\n\n    if (\n      e.altKey\n      || !(e.ctrlKey || e.metaKey)\n      || !handler\n    ) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    handler();\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      document.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, handleKeyDown]);\n\n  const lang = useOldLang();\n\n  function handleContainerKeyDown(e: React.KeyboardEvent<HTMLDivElement>) {\n    if (e.key === 'Enter' && isLinkControlOpen) {\n      handleLinkUrlConfirm();\n      e.preventDefault();\n    }\n  }\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'TextFormatter',\n    transitionClassNames,\n    isLinkControlOpen && 'link-control-shown',\n  );\n\n  const linkUrlConfirmClassName = buildClassName(\n    'TextFormatter-link-url-confirm',\n    Boolean(linkUrl.length) && 'shown',\n  );\n\n  const style = anchorPosition\n    ? `left: ${anchorPosition.x}px; top: ${anchorPosition.y}px;--text-formatter-left: ${anchorPosition.x}px;`\n    : '';\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      style={style}\n      onKeyDown={handleContainerKeyDown}\n      // Prevents focus loss when clicking on the toolbar\n      onMouseDown={stopEvent}\n    >\n      <div className=\"TextFormatter-buttons\">\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Spoiler text\"\n          className={getFormatButtonClassName('spoiler')}\n          onClick={handleSpoilerText}\n        >\n          <Icon name=\"eye-crossed\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Bold text\"\n          className={getFormatButtonClassName('bold')}\n          onClick={handleBoldText}\n        >\n          <Icon name=\"bold\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Italic text\"\n          className={getFormatButtonClassName('italic')}\n          onClick={handleItalicText}\n        >\n          <Icon name=\"italic\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Underlined text\"\n          className={getFormatButtonClassName('underline')}\n          onClick={handleUnderlineText}\n        >\n          <Icon name=\"underlined\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Strikethrough text\"\n          className={getFormatButtonClassName('strikethrough')}\n          onClick={handleStrikethroughText}\n        >\n          <Icon name=\"strikethrough\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Monospace text\"\n          className={getFormatButtonClassName('monospace')}\n          onClick={handleMonospaceText}\n        >\n          <Icon name=\"monospace\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button color=\"translucent\" ariaLabel={lang('TextFormat.AddLinkTitle')} onClick={openLinkControl}>\n          <Icon name=\"link\" />\n        </Button>\n      </div>\n\n      <div className=\"TextFormatter-link-control\">\n        <div className=\"TextFormatter-buttons\">\n          <Button color=\"translucent\" ariaLabel={lang('Cancel')} onClick={closeLinkControl}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <div className=\"TextFormatter-divider\" />\n\n          <div\n            className={buildClassName('TextFormatter-link-url-input-wrapper', inputClassName)}\n          >\n            <input\n              ref={linkUrlInputRef}\n              className=\"TextFormatter-link-url-input\"\n              type=\"text\"\n              value={linkUrl}\n              placeholder=\"Enter URL...\"\n              autoComplete=\"off\"\n              inputMode=\"url\"\n              dir=\"auto\"\n              onChange={handleLinkUrlChange}\n              onScroll={updateInputStyles}\n            />\n          </div>\n\n          <div className={linkUrlConfirmClassName}>\n            <div className=\"TextFormatter-divider\" />\n            <Button\n              color=\"translucent\"\n              ariaLabel={lang('Save')}\n              className=\"color-primary\"\n              onClick={handleLinkUrlConfirm}\n            >\n              <Icon name=\"check\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(TextFormatter);\n","export default function getKeyFromEvent(e: KeyboardEvent) {\n  const key = e.key || e.code;\n\n  return key.startsWith('Key') ? key.slice(3).toLowerCase() : key;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/visibility/isFullyVisible';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport CustomEmojiButton from './CustomEmojiButton';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useLastCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  });\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const handleSelect = useLastCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  });\n\n  const handleClick = useLastCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  });\n\n  const handleCustomEmojiClick = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    shouldRemoveSelectionOnReset: true,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '@teact';\nimport { memo } from '@teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getWebDocumentHash } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName.ts';\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? getWebDocumentHash(thumbnail) : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className={buildClassName('BaseResult chat-item-clickable', typeof content === 'string' && 'with-text')}\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult;\n  onClick: (result: ApiBotInlineResult | ApiBotInlineMediaResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, description,\n  } = inlineResult;\n\n  const url = 'url' in inlineResult ? inlineResult.url : undefined;\n  const webThumbnail = 'webThumbnail' in inlineResult ? inlineResult.webThumbnail : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiVideo } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useLastCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  });\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport { getPhotoMediaHash, getWebDocumentHash } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailBlobUrl = useMedia(getWebDocumentHash(webThumbnail));\n  const mediaBlobUrl = useMedia(photo && getPhotoMediaHash(photo, 'pictogram'));\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl || thumbnailBlobUrl);\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailBlobUrl} alt=\"\" draggable={false} />\n        <img\n          src={mediaBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      thumbUrl={mediaBlobUrl || thumbnail?.dataUri}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport MediaResult from './inlineResults/MediaResult';\nimport StickerResult from './inlineResults/StickerResult';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean,\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useLastCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  });\n\n  const handleOpenWebview = useLastCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n      isFromSwitchWebView: true,\n    });\n  });\n\n  const prevInlineBotResults = usePreviousDeprecated(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useLastCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  });\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = usersById[id];\n        const chat = chatsById[id];\n        const peer = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <Icon name=\"lock-badge\" className=\"send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              peer={peer}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {peer && <FullNameTitle peer={peer} noFake />}\n              <span className=\"subtitle\">\n                {user\n                  ? lang('VoipGroupPersonalAccount')\n                  : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerButton from '../common/StickerButton';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { throttle } from '../../util/schedulers';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiVideo } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf, selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport GifButton from '../common/GifButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n  currentMessageList?: MessageList;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  chatFullInfo,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat\n    && getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (!currentMessageList) {\n        return;\n      }\n\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({\n            messageList: currentMessageList,\n            gif,\n            scheduledAt,\n            isSilent,\n          });\n        });\n      } else {\n        sendMessage({ messageList: currentMessageList, gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, currentMessageList, requestCalendar]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canPostInChat = Boolean(chat) && Boolean(threadId)\n      && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(GifSearch));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OAKzmAva\",\"withImage\":\"BQ6HUOqN\",\"imageContainer\":\"TmJvv2A6\",\"image\":\"U96CW2I7\",\"round\":\"yxjDeIct\",\"circle\":\"cdfiLmXo\",\"withStoryCircle\":\"BOfHPv20\",\"summary\":\"vXi2JQlj\",\"title\":\"bi3fL59p\",\"info\":\"GUK4ajPK\",\"meta\":\"YH6jeZIh\",\"metaWithIcon\":\"q1LnuIUn\",\"metaIcon\":\"PJZzyVLK\",\"date\":\"C7NpG5Y9\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { StatisticsMessageInteractionCounter, StatisticsStoryInteractionCounter } from '../../../api/types';\n\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\ninterface OwnProps {\n  postStatistic: StatisticsStoryInteractionCounter | StatisticsMessageInteractionCounter;\n}\n\nfunction StatisticsRecentPostMeta({ postStatistic }: OwnProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  return (\n    <div className={styles.meta}>\n      {postStatistic.reactionsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"heart-outline\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.reactionsCount)}\n        </span>\n      )}\n\n      {postStatistic.forwardsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"forward\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.forwardsCount)}\n        </span>\n      )}\n\n      {!postStatistic.forwardsCount && !postStatistic.reactionsCount\n        && oldLang('ChannelStats.SharesCount_ZeroValueHolder')}\n    </div>\n  );\n}\n\nexport default memo(StatisticsRecentPostMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsMessageInteractionCounter } from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport {\n  getMessageRoundVideo,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  postStatistic: StatisticsMessageInteractionCounter;\n  message: ApiMessage;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ postStatistic, message }) => {\n  const lang = useOldLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const thumbDataUri = useThumbnail(message);\n  const mediaHash = useMessageMediaHash(message, 'micro');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        Boolean(mediaBlobUrl || thumbDataUri) && styles.withImage,\n      )}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, message, mediaBlobUrl || thumbDataUri, isRoundVideo)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: OldLangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span>\n      <img\n        src={blobUrl}\n        alt=\"\"\n        draggable={false}\n        className={buildClassName(styles.image, isRoundVideo && styles.round)}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiTypeStory,\n  StatisticsStoryInteractionCounter,\n} from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport { getStoryMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  story?: ApiTypeStory;\n  postStatistic: StatisticsStoryInteractionCounter;\n};\n\nfunction StatisticsRecentStory({ chat, story, postStatistic }: OwnProps) {\n  const lang = useOldLang();\n  const { toggleStoryStatistics } = getActions();\n  const isLoaded = story && 'content' in story;\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const mediaThumbnail = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  const handleClick = useLastCallback(() => {\n    toggleStoryStatistics({ storyId: postStatistic.storyId });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, styles.withImage)}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, chat, imgBlobUrl || mediaThumbnail)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {isLoaded && Boolean(story.date) && formatDateTimeToString(story.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n}\n\nfunction renderSummary(lang: OldLangFn, chat: ApiChat, blobUrl?: string) {\n  return (\n    <span>\n      {blobUrl ? (\n        <span className={styles.imageContainer}>\n          <img\n            src={blobUrl}\n            alt=\"\"\n            draggable={false}\n            className={buildClassName(styles.image, styles.circle, styles.withStoryCircle)}\n          />\n        </span>\n      ) : (\n        <Avatar\n          peer={chat}\n          size=\"small\"\n          className={styles.image}\n          withStorySolid\n          forceUnreadStorySolid\n        />\n      )}\n\n      {lang('Story')}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentStory);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"T1l_4J8z\",\"pie-slim-in\":\"EgyLOizu\",\"pieSlimIn\":\"EgyLOizu\",\"pie-slim-out\":\"TBiNdFb4\",\"pieSlimOut\":\"TBiNdFb4\",\"messages\":\"suY9dEIz\",\"publicForwards\":\"S1x1ovkC\",\"messages-title\":\"evQIkAqx\",\"messagesTitle\":\"evQIkAqx\",\"publicForwards-title\":\"WxL3i5PM\",\"publicForwardsTitle\":\"WxL3i5PM\",\"ready\":\"aUrozL5_\",\"graph\":\"QQHwjG88\",\"hidden\":\"QGctP1Nk\"};","import {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChannelStatistics,\n  ApiChat,\n  ApiGroupStatistics,\n  ApiMessage,\n  ApiTypeStory,\n} from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStories,\n  selectStatistics,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\nimport { isGraph } from './helpers/isGraph';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\nimport StatisticsRecentStory from './StatisticsRecentStory';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n  reactionsByEmotionGraph: 'ChannelStats.Graph.Reactions',\n  storyInteractionsGraph: 'ChannelStats.Graph.Stories',\n  storyReactionsByEmotionGraph: 'ChannelStats.Graph.StoriesReactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  chat?: ApiChat;\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n  messagesById: Record<string, ApiMessage>;\n  storiesById?: Record<string, ApiTypeStory>;\n};\n\nconst Statistics = ({\n  chatId,\n  chat,\n  statistics,\n  dcId,\n  isGroup,\n  messagesById,\n  storiesById,\n}: OwnProps & StateProps) => {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      if (!isGraph(graph)) {\n        return;\n      }\n      const isAsync = graph.graphType === 'async';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph.token,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        if (!isGraph(graph)) {\n          return;\n        }\n\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.add(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll', isReady && styles.ready)}>\n      {statistics && (\n        <StatisticsOverview\n          statistics={statistics}\n          type={isGroup ? 'group' : 'channel'}\n          title={lang('StatisticOverview')}\n        />\n      )}\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => {\n          const isReady = loadedCharts.current.has(graph) && !errorCharts.current.has(graph);\n          return (\n            <div className={buildClassName(styles.graph, !isReady && styles.hidden)} />\n          );\n        })}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics)?.recentPosts?.length) && (\n        <div className={styles.messages}>\n          <h2 className={styles.messagesTitle}>{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentPosts.map((postStatistic) => {\n            if ('msgId' in postStatistic) {\n              const message = messagesById[postStatistic.msgId];\n              if (!message || !('content' in message)) return undefined;\n\n              return (\n                <StatisticsRecentMessage\n                  key={`statistic_message_${postStatistic.msgId}`}\n                  message={message}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            if ('storyId' in postStatistic && chat) {\n              const story = storiesById?.[postStatistic.storyId];\n\n              return (\n                <StatisticsRecentStory\n                  key={`statistic_story_${postStatistic.storyId}`}\n                  chat={chat}\n                  story={story}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            return undefined;\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n    const messagesById = selectChatMessages(global, chatId);\n    const storiesById = selectPeerStories(global, chatId)?.byId;\n\n    return {\n      statistics, dcId, isGroup, chat, messagesById, storiesById,\n    };\n  },\n)(Statistics));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oXLpD4Y4\",\"title\":\"paQ2VBe_\",\"views\":\"WvFuOAIf\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsMessagePublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useOldLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => (data.chat ? getMainUsername(data.chat) : undefined), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={data.chat} />\n\n      <div>\n        <div className={styles.title}>\n          {data.title}\n        </div>\n\n        <div className={styles.views}>\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsMessagePublicForward);\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessagePublicForward,\n  ApiPostStatistics,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\nimport { isGraph } from './helpers/isGraph';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nfunction MessageStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const { loadMessageStatistics, loadMessagePublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      if (!isGraph(graph)) {\n        return;\n      }\n      const isAsync = graph.graphType === 'async';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph.token });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.add(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards && messageId) {\n      loadMessagePublicForwards({ chatId, messageId });\n    }\n  });\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div\n      key={`${chatId}-${messageId}`}\n      className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}\n    >\n      <StatisticsOverview statistics={statistics} type=\"message\" title={lang('StatisticOverview')} />\n\n      {(!loadedCharts.current.size || !statistics.publicForwardsData) && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => {\n          const isReady = loadedCharts.current.has(graph) && !errorCharts.current.has(graph);\n          return (\n            <div className={buildClassName(styles.graph, !isReady && styles.hidden)} />\n          );\n        })}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            noFastList\n          >\n            {(statistics.publicForwardsData as ApiMessagePublicForward[]).map((item) => (\n              <StatisticsMessagePublicForward key={item.messageId} data={item} />\n            ))}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(MessageStatistics));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiStoryPublicForward, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiStoryPublicForward;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nfunction StatisticsMessagePublicForward({ data, chatsById, usersById }: OwnProps) {\n  const lang = useOldLang();\n  const { openChat } = getActions();\n  const user = usersById[data.peerId];\n  const chat = chatsById[data.peerId];\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: user.id });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={user || chat} withStorySolid forceUnreadStorySolid />\n\n      <div>\n        <div className={styles.title}>\n          {user ? getUserFullName(user) : getChatTitle(lang, chat)}\n        </div>\n\n        <div className={styles.views}>\n          {data.viewsCount ? lang('ChannelStats.ViewsCount', data.viewsCount, 'i') : lang('NoViews')}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(StatisticsMessagePublicForward);\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiPostStatistics,\n  ApiUser,\n} from '../../../api/types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\nimport { isGraph } from './helpers/isGraph';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsStoryPublicForward from './StatisticsStoryPublicForward';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.StoryInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  storyId?: number;\n  dcId?: number;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n};\n\nfunction StoryStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  storyId,\n  chatsById,\n  usersById,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const { loadStoryStatistics, loadStoryPublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (storyId) {\n      loadStoryStatistics({ chatId, storyId });\n    }\n  }, [chatId, storyId]);\n\n  useEffect(() => {\n    if (!isActive || storyId) {\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n      setIsReady(false);\n    }\n  }, [isActive, storyId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      if (!isGraph(graph)) {\n        return;\n      }\n      const isAsync = graph.graphType === 'async';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph.token });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.add(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, storyId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!storyId) return;\n\n    loadStoryPublicForwards({ chatId, storyId });\n  });\n\n  if (!isReady || !statistics || !storyId) {\n    return <Loading />;\n  }\n\n  return (\n    <div\n      key={`${chatId}-${storyId}`}\n      className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}\n    >\n      <StatisticsOverview statistics={statistics} type=\"story\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => {\n          const isReady = loadedCharts.current.has(graph) && !errorCharts.current.has(graph);\n          return (\n            <div className={buildClassName(styles.graph, !isReady && styles.hidden)} />\n          );\n        })}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            noFastList\n          >\n            {statistics.publicForwardsData!.map((item) => {\n              if ('messageId' in item) {\n                return (\n                  <StatisticsMessagePublicForward key={`message_${item.messageId}`} data={item} />\n                );\n              }\n\n              return (\n                <StatisticsStoryPublicForward\n                  key={`story_${item.storyId}`}\n                  data={item}\n                  chatsById={chatsById}\n                  usersById={usersById}\n                />\n              );\n            })}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentStory;\n    const storyId = tabState.statistics.currentStoryId;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      statistics, dcId, storyId, usersById, chatsById,\n    };\n  },\n)(StoryStatistics));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport ShowMoreButton from '../ui/ShowMoreButton';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePreviousDeprecated<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useOldLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n\n              onClick={() => handleMemberClick(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo\n                  avatarSize=\"tiny\"\n                  userId={id}\n                  forceShowSelf\n                  noStatusOrTyping\n                />\n              ) : (\n                <GroupChatInfo\n                  avatarSize=\"tiny\"\n                  chatId={id}\n                  noStatusOrTyping\n                />\n              )}\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: text.text,\n            entities: text.entities,\n          })}\n        </span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}\n          %\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiPoll } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectPollFromMessage, selectTabState,\n} from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport PollAnswerResults from './PollAnswerResults';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  poll?: ApiPoll;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  message,\n  poll,\n  onClose,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !poll || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = poll;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n        })}\n      </h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${poll.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n    const poll = message && selectPollFromMessage(global, message);\n\n    return {\n      chat,\n      message,\n      poll,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xrnUE4e6\",\"content\":\"z7kF7tij\",\"section\":\"T6wFpdQO\",\"general\":\"YftUWqqw\",\"top\":\"CWsWIKQ1\",\"bottom\":\"KBl0ycLl\",\"iconWrapper\":\"iJ1U9kDD\",\"icon\":\"Rk6PT_yc\",\"clickable\":\"K1CTKtBS\",\"heading\":\"qlo3vSEw\",\"icon-picker\":\"r06zwL42\",\"iconPicker\":\"r06zwL42\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getTopicColors } from '../../util/forumColors';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            pickerListClassName=\"fab-padding-bottom\"\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport {\n  selectChat, selectIsCurrentUserPremium, selectTabState, selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Loading from '../ui/Loading';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top, isGeneral && styles.general)}>\n              <span className={styles.heading}>{lang(isGeneral ? 'CreateGeneralTopicTitle' : 'CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  pickerListClassName=\"fab-padding-bottom\"\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.chatId && editTopicPanel?.topicId\n      ? selectTopic(global, editTopicPanel.chatId, editTopicPanel.topicId) : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotInfo, ApiUser } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  getChatAvatarHash, getMainUsername, getUserFirstOrLastName,\n} from '../../../global/helpers';\nimport {\n  selectBot,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  userId?: string;\n  user?: ApiUser;\n  chatBot?: ApiBotInfo;\n  currentBio?: string;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  maxBioLength: number;\n};\n\nconst ERROR_NAME_MISSING = 'Please provide name';\n\nconst ManageBot: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  onClose,\n  currentBio,\n  isActive,\n  maxBioLength,\n}) => {\n  const {\n    setBotInfo,\n    uploadProfilePhoto,\n    uploadContactProfilePhoto,\n    startBotFatherConversation,\n  } = getActions();\n\n  const [isFieldTouched, markFieldTouched, unmarkProfileTouched] = useFlag(false);\n  const [isAvatarTouched, markAvatarTouched, unmarkAvatarTouched] = useFlag(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useOldLang();\n\n  const username = useMemo(() => (user ? getMainUsername(user) : undefined), [user]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentName = user ? getUserFirstOrLastName(user) : '';\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [name, setName] = useState(currentName || '');\n  const [bio, setBio] = useState(currentBio || '');\n\n  const currentAvatarHash = user && getChatAvatarHash(user);\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  useEffect(() => {\n    unmarkProfileTouched();\n    unmarkAvatarTouched();\n  }, [userId]);\n\n  useEffect(() => {\n    setName(currentName || '');\n    setBio(currentBio || '');\n  }, [currentName, currentBio, user]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkProfileTouched();\n      unmarkAvatarTouched();\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleNameChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    markFieldTouched();\n\n    if (error === ERROR_NAME_MISSING) {\n      setError(undefined);\n    }\n  });\n\n  const handleBioChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    markFieldTouched();\n  });\n\n  const handlePhotoChange = useLastCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n    markAvatarTouched();\n  });\n\n  const handleProfileSave = useLastCallback(() => {\n    const trimmedName = name.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedName.length) {\n      setError(ERROR_NAME_MISSING);\n      return;\n    }\n\n    setBotInfo({\n      ...(isFieldTouched && {\n        bot: user,\n        name: trimmedName,\n        description: trimmedBio,\n      }),\n    });\n\n    if (photo) {\n      uploadProfilePhoto({\n        file: photo,\n        ...(isAvatarTouched && { bot: user }),\n      });\n    }\n  });\n\n  const handleChangeEditIntro = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-intro` });\n  });\n\n  const handleChangeEditCommands = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-commands` });\n  });\n\n  const handleChangeSettings = useLastCallback(() => {\n    startBotFatherConversation({ param: username! });\n  });\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSelectAvatar = useLastCallback((file: File) => {\n    markAvatarTouched();\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  });\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title={lang('ChatSetPhotoOrVideo')}\n            disabled={isLoading}\n          />\n          <InputText\n            id=\"user-name\"\n            label={lang('PaymentCheckoutName')}\n            onChange={handleNameChange}\n            value={name}\n            error={error === ERROR_NAME_MISSING ? error : undefined}\n            teactExperimentControlled\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('DescriptionPlaceholder')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n        </div>\n        <div className=\"section\">\n          <div className=\"dialog-buttons\">\n            <ListItem icon=\"bot-commands-filled\" ripple onClick={handleChangeEditIntro}>\n              <span>{lang('BotEditIntro')}</span>\n            </ListItem>\n            <ListItem icon=\"bot-command\" ripple onClick={handleChangeEditCommands}>\n              <span>{lang('BotEditCommands')}</span>\n            </ListItem>\n            <ListItem icon=\"bots\" ripple onClick={handleChangeSettings}>\n              <span>{lang('BotChangeSettings')}</span>\n            </ListItem>\n            <div className=\"section-info section-info_push\">\n              {renderText(lang('BotManageInfo'), ['links'])}\n            </div>\n          </div>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isFieldTouched || isAvatarTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectBot(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    return {\n      userId,\n      user,\n      progress,\n      currentBio: userFullInfo?.bio,\n      maxBioLength,\n    };\n  },\n)(ManageBot));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsChatRestricted, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  availableReactions?: ApiAvailableReaction[];\n  hasAutoTranslation?: boolean;\n  canToggleAutoTranslation?: boolean;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n  hasAutoTranslation,\n  canToggleAutoTranslation,\n}) => {\n  const {\n    updateChat,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleAutoTranslation,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useOldLang();\n\n  const hasAutoTranslationAvailable = chat && isChatChannel(chat);\n\n  const handleAutoTranslationChange = useLastCallback(() => {\n    toggleAutoTranslation({ chatId, isEnabled: !hasAutoTranslation });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!canInvite) return;\n    loadExportedChatInvites({ chatId });\n    loadExportedChatInvites({ chatId, isRevoked: true });\n    loadChatJoinRequests({ chatId });\n  }, [chatId, canInvite]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateChannel = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickSubscribers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  });\n\n  const handleRemovedUsersClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  });\n\n  const handleDeleteChannel = useLastCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const isRestricted = selectIsChatRestricted(getGlobal(), chatId);\n  if (isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"channel-title\"\n              label={lang('EnterChannelName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"channel-about\"\n              label={lang('DescriptionPlaceholder')}\n              onChange={handleAboutChange}\n              value={about}\n              maxLength={CHANNEL_MAX_DESCRIPTION}\n              maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          {hasAutoTranslationAvailable && (\n            <ListItem\n              icon=\"language\"\n              narrow\n              ripple\n              disabled={!canToggleAutoTranslation}\n              onClick={handleAutoTranslationChange}\n            >\n              <span>{lang('AutomaticTranslation')}</span>\n              <Switcher\n                id=\"auto-translation\"\n                label={lang('AutomaticTranslation')}\n                checked={hasAutoTranslation}\n              />\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{formatInteger(chat.membersCount!)}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const { invites } = management.byChatId[chatId] || {};\n    const minLevelToToggleAutoTranslation = global.appConfig?.channelAutoTranslationLevelMin;\n    const hasAutoTranslation = chat?.hasAutoTranslation;\n    const chatBoostLevel = chat?.level;\n    const canToggleAutoTranslation = chatBoostLevel && minLevelToToggleAutoTranslation\n      ? chatBoostLevel >= minLevelToToggleAutoTranslation : false;\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      availableReactions: global.reactions.availableReactions,\n      hasAutoTranslation,\n      canToggleAutoTranslation,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageChannel));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  isChannel?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n}) => {\n  const { toggleSignatures } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const areSignaturesEnabled = Boolean(chat?.areSignaturesShown);\n  const areProfilesEnabled = Boolean(chat?.areProfilesShown);\n\n  const canAddNewAdmins = Boolean(chat?.isCreator || (chat && getHasAdminRight(chat, 'addAdmins')));\n  const canToggleSignatures = isChannel && getHasAdminRight(chat!, 'postMessages');\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    const [owner, admins] = partition(Object.values(adminMembersById), (member) => member.isOwner);\n\n    return [...owner, ...admins];\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useLastCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  });\n\n  const handleToggleSignatures = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled,\n      areSignaturesEnabled: !areSignaturesEnabled,\n    });\n  });\n\n  const handleToggleProfiles = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled: !areProfilesEnabled,\n      areSignaturesEnabled,\n    });\n  });\n\n  const handleAddAdminClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  });\n\n  const getMemberStatus = useLastCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\" dir=\"auto\">\n            {lang(isChannel\n              ? 'Channel.Management.AddModeratorHelp'\n              : 'Group.Management.AddModeratorHelp')}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <Icon name=\"add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n\n        {canToggleSignatures && (\n          <div className=\"section\">\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={areSignaturesEnabled}\n                label={lang('ChannelSignMessages')}\n                onChange={handleToggleSignatures}\n              />\n            </div>\n            {areSignaturesEnabled && (\n              <>\n                <div className=\"ListItem narrow\">\n                  <Checkbox\n                    checked={areProfilesEnabled}\n                    label={lang('ChannelSignMessagesWithProfile')}\n                    onChange={handleToggleProfiles}\n                  />\n                </div>\n                <p className=\"section-info section-info_push\">\n                  {lang('ChannelSignProfilesInfo')}\n                </p>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: chat && isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo,\n  selectManagement, selectTabState,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Spinner from '../../ui/Spinner';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n    resetManagementError,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n\n    if (error) {\n      resetManagementError({\n        chatId: chat.id,\n      });\n    }\n  }, [chat.id, error]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '', shouldDisableUsernames: true });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useOldLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 0;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <LinkField link={privateInviteLink} className=\"invite-link\" />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <div className=\"settings-input\">\n              <UsernameInput\n                asLink\n                currentUsername={currentUsername}\n                isLoading={isLoading}\n                isUsernameAvailable={isUsernameAvailable}\n                checkedUsername={checkedUsername}\n                onChange={handleUsernameChange}\n              />\n            </div>\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId);\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId) && selectManagement(global, chatId));\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    return filterPeersByQuery({ ids: availableMemberIds, query: search, type: 'user' });\n  }, [chatMembers, currentUserId, search]);\n\n  const handleLoadMore = useLastCallback(() => {\n    loadMoreMembers({ chatId: chat.id });\n  });\n\n  const handleRemoveUser = useLastCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  });\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={handleLoadMore}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useOldLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember): MenuItemContextAction[] | undefined => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <Icon name=\"add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Avatar from '../../common/Avatar';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useOldLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (isChatPublic(linkedGroup)) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat?.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line @stylistic/max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat?.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        {linkedChat && (\n          <ListItem\n            className=\"chat-item-clickable\"\n            inactive\n          >\n            <GroupChatInfo chatId={linkedChat.id} />\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat?.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  const handleNewGroupClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.NewDiscussionGroup);\n  });\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            className=\"create-item\"\n            withPrimaryColor\n            teactOrderKey={0}\n            onClick={handleNewGroupClick}\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={isJoinToSend}\n                onCheck={handleJoinToSendCheck}\n                label={lang('ChannelSettingsJoinToSend')}\n              />\n            </div>\n            {isJoinToSend && (\n              <div className=\"ListItem narrow\">\n                <Checkbox\n                  checked={isJoinRequest}\n                  onCheck={handleJoinRequestCheck}\n                  label={lang('ChannelSettingsJoinRequest')}\n                />\n              </div>\n            )}\n            <p className=\"section-info section-info_push\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId ? selectChat(global, linkedChatId) : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsChatRestricted, selectTabState } from '../../../global/selectors';\nimport { debounce } from '../../../util/schedulers';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => isChatPublic(chat), [chat]);\n  const lang = useOldLang();\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, canInvite]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickPermissions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateGroup = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickMembers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  });\n\n  const handleTogglePreHistory = useLastCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  });\n\n  const handleForumToggle = useLastCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  });\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useLastCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  const isRestricted = selectIsChatRestricted(getGlobal(), chatId);\n  if (isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"group-title\"\n              label={lang('GroupName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === GROUP_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"group-about\"\n              label={lang('DescriptionPlaceholder')}\n              maxLength={GROUP_MAX_DESCRIPTION}\n              maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n              onChange={handleAboutChange}\n              value={about}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}\n              /\n              {TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && !hasLinkedChannel && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                subLabel={\n                  chatFullInfo.isPreHistoryHidden ? lang('ChatHistoryHiddenInfo2') : lang('ChatHistoryVisibleInfo')\n                }\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n    const canChangeInfo = chat.isCreator || getHasAdminRight(chat, 'changeInfo');\n    const canBanUsers = chat.isCreator || getHasAdminRight(chat, 'banUsers');\n    const canInvite = chat.isCreator || getHasAdminRight(chat, 'inviteUsers');\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo,\n      canBanUsers,\n      canInvite,\n      exportedInvites: invites,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.reactions.availableReactions,\n      canEditForum,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isActive,\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"postStories\"\n              checked={Boolean(permissions.postStories)}\n              label={lang('EditAdminPostStories')}\n              blocking\n              disabled={getControlIsDisabled('postStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"editStories\"\n              checked={Boolean(permissions.editStories)}\n              label={lang('EditAdminEditStories')}\n              blocking\n              disabled={getControlIsDisabled('editStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteStories\"\n              checked={Boolean(permissions.deleteStories)}\n              label={lang('EditAdminDeleteStories')}\n              blocking\n              disabled={getControlIsDisabled('deleteStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens, NewChatMembersProgress } from '../../../types';\n\nimport {\n  getHasAdminRight, isChatBasicGroup,\n  isChatChannel, isUserBot, isUserRightBanned, sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport usePeerStoriesPolling from '../../../hooks/polling/usePeerStoriesPolling';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Switcher from '../../ui/Switcher';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  canAddMembers?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  canAddMembers,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement,\n    toggleParticipantsHidden, setNewChatMembersDialogState, toggleManagement,\n  } = getActions();\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  usePeerStoriesPolling(memberIds);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  });\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  const handleToggleParticipantsHidden = useLastCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    toggleManagement();\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"panel-content custom-scroll\">\n        {canHideParticipants && !isChannel && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                  withPortalForMenu\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf withStory />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig?.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n      && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const canAddMembers = chat && ((getHasAdminRight(chat, 'inviteUsers')\n      || (!isChannel && !isUserRightBanned(chat, 'inviteUsers')))\n    || chat.isCreator\n    );\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      canAddMembers,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  progress?: ManagementProgress;\n  currentUserId?: string;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n  arePaidMessagesAvailable?: boolean;\n  groupPeersPaidStars: number;\n  canChargeForMessages?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  progress,\n  currentUserId,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n  arePaidMessagesAvailable,\n  canChargeForMessages,\n  groupPeersPaidStars,\n}) => {\n  const { updateChatDefaultBannedRights, updatePaidMessagesPrice } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  const [isPriceForMessagesChanged, markPriceForMessagesChanged, unmarkPriceForMessagesChanged] = useFlag();\n  const [isPriceForMessagesOpen, setIsPriceForMessagesOpen] = useState(canChargeForMessages);\n  const [chargeForMessages, setChargeForMessages] = useState<number>(groupPeersPaidStars);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkPriceForMessagesChanged();\n    }\n  }, [progress]);\n\n  const handleSavePermissions = useLastCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  });\n\n  const handleUpdatePaidMessagesPrice = useLastCallback(() => {\n    if (!chat) return;\n    updatePaidMessagesPrice({\n      chatId: chat?.id,\n      paidMessagesStars: isPriceForMessagesOpen ? chargeForMessages : 0,\n    });\n  });\n\n  const handleUpdatePermissions = useLastCallback(() => {\n    if (isPriceForMessagesChanged) {\n      handleUpdatePaidMessagesPrice();\n    }\n    if (havePermissionChanged) {\n      handleSavePermissions();\n    }\n  });\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = oldLang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, oldLang]);\n\n  const handleChargeStarsForMessages = useLastCallback(() => {\n    setIsPriceForMessagesOpen(!isPriceForMessagesOpen);\n    markPriceForMessagesChanged();\n  });\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    setChargeForMessages(value);\n    markPriceForMessagesChanged();\n  });\n\n  const arePermissionsChanged = isPriceForMessagesChanged || havePermissionChanged;\n  const arePermissionsLoading = progress === ManagementProgress.InProgress || isLoading;\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            dropdownClassName=\"DropdownListTrap\"\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n          />\n        </div>\n\n        {arePaidMessagesAvailable && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem onClick={handleChargeStarsForMessages}>\n              <span>{lang('GroupMessagesChargePrice')}</span>\n              <Switcher\n                id=\"charge_for_messages\"\n                label={lang('GroupMessagesChargePrice')}\n                checked={isPriceForMessagesOpen}\n              />\n            </ListItem>\n            <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('RightsChargeStarsAbout')}\n            </p>\n          </div>\n        )}\n\n        {isPriceForMessagesOpen && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <PaidMessagePrice\n              canChangeChargeForMessages\n              isGroupChat\n              chargeForMessages={chargeForMessages}\n              onChange={handleChargeForMessagesChange}\n            />\n          </div>\n        )}\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={arePermissionsChanged}\n        onClick={handleUpdatePermissions}\n        ariaLabel={lang('Save')}\n        disabled={arePermissionsLoading}\n      >\n        {arePermissionsLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { progress } = selectTabState(global).management;\n\n    const paidMessagesStars = chat?.paidMessagesStars;\n    const configStarsPaidMessageCommissionPermille = global.appConfig?.starsPaidMessageCommissionPermille;\n\n    return {\n      chat,\n      progress,\n      currentUserId: global.currentUserId,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n      arePaidMessagesAvailable: Boolean(fullInfo?.arePaidMessagesAvailable && configStarsPaidMessageCommissionPermille),\n      canChargeForMessages: Boolean(paidMessagesStars && configStarsPaidMessageCommissionPermille),\n      groupPeersPaidStars: paidMessagesStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{oldLang('UserRestrictionsCanDo')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            dropdownClassName=\"DropdownListTrap\"\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n            getControlIsDisabled={getControlIsDisabled}\n          />\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {oldLang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={oldLang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text={lang('GroupManagementBanUserConfirm')}\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { isChatChannel, sortUserIds } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"section-help hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-heading\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)}\n              {' '}\n              {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"section-help hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-heading\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"section-help hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId] || {};\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useOldLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"section-help\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"section-help\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"panel-content custom-scroll\">\n        {!invite && (\n          <p className=\"section-help\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <LinkField title={invite.title} link={invite.link} className=\"invite-link\" />\n              {Boolean(expireDate) && (\n                <p className=\"section-help\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p className=\"section-heading\">{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId] || {};\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport NothingFound from '../../common/NothingFound';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(forceUpdate, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.hasUsername ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.hasUsername, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: oldLang('LinkCopied'),\n    });\n  }, [oldLang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = oldLang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = oldLang('PeopleJoined', usage);\n    } else {\n      text = oldLang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${oldLang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${oldLang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${oldLang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = expireDate - getServerTime();\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += oldLang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += oldLang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${oldLang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions: MenuItemContextAction[] = [];\n    actions.push({\n      title: oldLang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: oldLang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: oldLang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: oldLang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"section-help\">{isChannel ? oldLang('PrimaryLinkHelpChannel') : oldLang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <LinkField\n              className=\"settings-input\"\n              link={primaryInviteLink}\n              withShare\n              onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n              title={chat?.usernames ? oldLang('PublicLink') : oldLang('lng_create_permanent_link_title')}\n            />\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <ListItem icon=\"add\" withPrimaryColor key=\"create\" className=\"create-item\" onClick={handleCreateNewClick}>\n            {oldLang('CreateNewLink')}\n          </ListItem>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"section-help hint\" key=\"links-hint\">{oldLang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"section-help\" key=\"title\">{oldLang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{oldLang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={oldLang('DeleteAllRevokedLinks')}\n        text={oldLang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={oldLang('RevokeLink')}\n        text={oldLang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={oldLang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={oldLang('DeleteLink')}\n        text={oldLang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId] || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useOldLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            peer={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport JoinRequest from './JoinRequest';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"section-help\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport {\n  MAX_UNIQUE_REACTIONS,\n} from '../../../config';\nimport { isChatChannel, isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions: number;\n  reactionsLimit?: number;\n  isChannel?: boolean;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n  maxUniqueReactions,\n  reactionsLimit,\n  isChannel,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useOldLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  const [localReactionsLimit, setLocalReactionsLimit] = useState(reactionsLimit);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n      reactionsLimit: localReactionsLimit,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions, localReactionsLimit]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n    setLocalReactionsLimit(reactionsLimit);\n  }, [enabledReactions, reactionsLimit]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  useEffect(() => {\n    if (localReactionsLimit !== undefined && localReactionsLimit !== reactionsLimit) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some') {\n      const isReactionsDisabled = enabledReactions?.type !== 'all' && enabledReactions?.type !== 'some';\n\n      if (isReactionsDisabled && localEnabledReactions.allowed.length === 0) {\n        setIsTouched(false);\n        return;\n      }\n    }\n\n    if (localEnabledReactions?.type !== enabledReactions?.type) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some' && enabledReactions?.type === 'some') {\n      const localAllowedReactions = localEnabledReactions.allowed;\n      const enabledAllowedReactions = enabledReactions?.allowed;\n\n      if (localAllowedReactions.length !== enabledAllowedReactions.length\n        || localAllowedReactions.reverse().some(\n          (localReaction) => !enabledAllowedReactions.find(\n            (enabledReaction) => isSameReaction(localReaction, enabledReaction),\n          ),\n        )) {\n        setIsTouched(true);\n        return;\n      }\n    }\n\n    setIsTouched(false);\n  }, [\n    localReactionsLimit,\n    reactionsLimit,\n    localEnabledReactions,\n    enabledReactions,\n  ]);\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n      setLocalReactionsLimit(reactionsLimit);\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n      setLocalReactionsLimit(reactionsLimit);\n    } else {\n      setLocalEnabledReactions(undefined);\n      setLocalReactionsLimit(undefined);\n    }\n  }, [enabledReactions, reactionsLimit]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  const handleReactionsLimitChange = useCallback((value: number) => {\n    setLocalReactionsLimit(value);\n  }, []);\n\n  const renderReactionsMaxCountValue = useCallback((value: number) => {\n    return lang('PeerInfo.AllowedReactions.MaxCountValue', value);\n  }, [lang]);\n\n  const shouldShowReactionsLimit = isChannel\n    && (localEnabledReactions?.type === 'all' || localEnabledReactions?.type === 'some');\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        {Boolean(localReactionsLimit && shouldShowReactionsLimit) && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('MaximumReactionsHeader')}\n            </h3>\n            <RangeSlider\n              min={1}\n              max={maxUniqueReactions}\n              value={localReactionsLimit!}\n              onChange={handleReactionsLimitChange}\n              renderValue={renderReactionsMaxCountValue}\n              isCenteredLayout\n            />\n            <p className=\"section-info section-info_push\">\n              {lang('ChannelReactions.MaxCount.Info')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section section-with-fab\">\n            <h3 className=\"section-heading\">\n              {lang('OnlyAllowThisReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  withIcon\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { maxUniqueReactions = MAX_UNIQUE_REACTIONS } = global.appConfig || {};\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const reactionsLimit = chatFullInfo?.reactionsLimit || maxUniqueReactions;\n    const isChannel = isChatChannel(chat);\n\n    return {\n      enabledReactions: chatFullInfo?.enabledReactions,\n      availableReactions: global.reactions.availableReactions,\n      chat,\n      maxUniqueReactions,\n      reactionsLimit,\n      isChannel,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageReactions));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { isUserBot } from '../../../global/helpers';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            noStatusOrTyping\n            noEmojiStatus\n            withFullInfo\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"user-first-name\"\n              label={lang('UserInfo.FirstNamePlaceholder')}\n              onChange={handleFirstNameChange}\n              value={firstName}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              id=\"user-last-name\"\n              label={lang('UserInfo.LastNamePlaceholder')}\n              onChange={handleLastNameChange}\n              value={lastName}\n            />\n          </div>\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    peer={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"section-help\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { FC } from '../../../lib/teact/teact.ts';\nimport type React from '../../../lib/teact/teact.ts';\nimport { useState } from '../../../lib/teact/teact.ts';\nimport { memo } from '../../../lib/teact/teact.ts';\n\nimport type { ApiChat } from '../../../api/types/index.ts';\nimport type { ManagementScreens } from '../../../types/index.ts';\nimport { ChatCreationProgress } from '../../../types/index.ts';\n\nimport { getActions, withGlobal } from '../../../global/index.ts';\nimport { selectChat, selectTabState } from '../../../global/selectors/index.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack.ts';\nimport useLang from '../../../hooks/useLang.ts';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Icon from '../../common/icons/Icon.tsx';\nimport AvatarEditable from '../../ui/AvatarEditable.tsx';\nimport FloatingActionButton from '../../ui/FloatingActionButton.tsx';\nimport InputText from '../../ui/InputText.tsx';\nimport Spinner from '../../ui/Spinner.tsx';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\nconst NewDiscussionGroup: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  creationProgress,\n  creationError,\n}) => {\n  const { createChannel } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [title, setTitle] = useState(lang('NewDiscussionChatTitle', { name: chat?.title }));\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.trimStart();\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  });\n\n  const renderedError = (creationError && lang('NewChatTitleEmptyError')) || (\n    error !== lang('NewChatTitleEmptyError') && error !== lang('NewChannelTitleEmptyError')\n      ? error\n      : undefined\n  );\n\n  const handleCreateGroup = useLastCallback(() => {\n    if (!title.length) {\n      setError(lang('NewChatTitleEmptyError'));\n      return;\n    }\n    if (!chat) return;\n\n    createChannel({\n      discussionChannelId: chat.id,\n      title,\n      photo,\n      isSuperGroup: true,\n    });\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"NewChat\">\n          <div className=\"NewChat-inner step-2\">\n            <AvatarEditable\n              onChange={setPhoto}\n              title={lang('AddPhoto')}\n            />\n            <InputText\n              value={title}\n              onChange={handleTitleChange}\n              label={lang('GroupName')}\n              error={error === lang('NewChatTitleEmptyError')\n                || error === lang('NewChannelTitleEmptyError') ? error : undefined}\n            />\n\n            {renderedError && (\n              <p className=\"error\">{renderedError}</p>\n            )}\n          </div>\n\n          <FloatingActionButton\n            isShown={title.length !== 0}\n            onClick={handleCreateGroup}\n            disabled={isLoading}\n            ariaLabel={lang('DiscussionCreateGroup')}\n          >\n            {isLoading ? (\n              <Spinner color=\"white\" />\n            ) : (\n              <Icon name=\"arrow-right\" />\n            )}\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewDiscussionGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageBot from './ManageBot';\nimport ManageChannel from './ManageChannel';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvite from './ManageInvite';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageInvites from './ManageInvites';\nimport ManageJoinRequests from './ManageJoinRequests';\nimport ManageReactions from './ManageReactions';\nimport ManageUser from './ManageUser';\nimport NewDiscussionGroup from './NewDiscussionGroup.tsx';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'bot':\n          return (\n            <ManageBot\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.NewDiscussionGroup:\n      return (\n        <NewDiscussionGroup\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType] || '';\n}\n","import type { RegularLangFnParameters } from '../../util/localization';\nimport type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Partial<Record<string, RegularLangFnParameters>>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"maC_9u6e\",\"description\":\"zQ6lEVJ2\",\"checkout-picture\":\"JgWvLdK2\",\"checkoutPicture\":\"JgWvLdK2\",\"text\":\"T2pYH395\",\"checkout-title\":\"HadolzeF\",\"checkoutTitle\":\"HadolzeF\",\"checkout-description\":\"oZW7mUNP\",\"checkoutDescription\":\"oZW7mUNP\",\"price-info\":\"P618Q3yr\",\"priceInfo\":\"P618Q3yr\",\"price-info-item\":\"XNNG_ajy\",\"priceInfoItem\":\"XNNG_ajy\",\"price-info-item-main\":\"D9gYNLVk\",\"priceInfoItemMain\":\"D9gYNLVk\",\"price-info-item-title\":\"NtY5Aah7\",\"priceInfoItemTitle\":\"NtY5Aah7\",\"tipsList\":\"WHO341eB\",\"tipsItem\":\"ksLlzBxw\",\"tipsItem_active\":\"J4yem62L\",\"tipsItemActive\":\"J4yem62L\",\"invoice-info\":\"U2IBOLP1\",\"invoiceInfo\":\"U2IBOLP1\",\"provider\":\"kqWcdro1\",\"stripe\":\"xKztZrna\",\"smartglocal\":\"X_Ge1o4u\",\"checkout-info-item-info-title\":\"ysWuPklS\",\"checkoutInfoItemInfoTitle\":\"ysWuPklS\",\"checkout-info-item-info-data\":\"MpC_P8_c\",\"checkoutInfoItemInfoData\":\"MpC_P8_c\",\"tos-checkbox\":\"OrRb0xG7\",\"tosCheckbox\":\"OrRb0xG7\",\"list\":\"l_wfiFG0\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type {\n  ApiInvoice,\n  ApiLabeledPrice,\n  ApiPaymentCredentials,\n  ApiWebDocument,\n} from '../../api/types';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { IconName } from '../../types/icons';\nimport type { LangFn } from '../../util/localization';\nimport { PaymentStep } from '../../types';\n\nimport { getWebDocumentHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport SafeLink from '../common/SafeLink';\nimport Checkbox from '../ui/Checkbox';\nimport ListItem from '../ui/ListItem';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  title: string;\n  description: string;\n  photo?: ApiWebDocument;\n  invoice: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: ApiLabeledPrice[];\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  title,\n  description,\n  photo,\n  invoice,\n  shippingPrices,\n  checkoutInfo,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    termsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const { ref } = useMediaTransition<HTMLImageElement>({\n    hasMediaData: Boolean(photoUrl),\n  });\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(lang, tipAmount!, invoice.currency)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(lang, tip, invoice.currency, { shouldOmitFractions: true })}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = oldLang('PaymentCheckoutAcceptRecurrent', botName);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, oldLang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && (\n          <img\n            ref={ref}\n            className={styles.checkoutPicture}\n            src={photoUrl}\n            draggable={false}\n            width={photo!.dimensions?.width}\n            height={photo!.dimensions?.height}\n            alt=\"\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {description && (\n            <div className={styles.checkoutDescription}>\n              {renderText(description, ['br', 'links', 'emoji'])}\n            </div>\n          )}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {invoice.prices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang, oldLang('Checkout.TotalAmount'), totalPrice, invoice.currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {!isPaymentFormUrl && renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: oldLang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: oldLang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || (!isInteractive && shippingAddress)) && renderCheckoutItem({\n          title: shippingAddress,\n          label: oldLang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: oldLang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: oldLang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || (!isInteractive && shippingMethod)) && renderCheckoutItem({\n          title: shippingMethod,\n          label: oldLang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {termsUrl && renderTos(termsUrl)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  lang: LangFn, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(lang, value, currency)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title: string | undefined;\n  label: string | undefined;\n  icon?: IconName;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  const isMultiline = Boolean(title && label !== title);\n\n  return (\n    <ListItem\n      className={styles.list}\n      narrow\n      multiline={isMultiline}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n      leftElement={customIcon && <i className={buildClassName('icon', customIcon)} />}\n    >\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n  onPaymentFormSubmit?: (eventData: PaymentFormSubmitEvent['eventData']) => void;\n};\n\nexport interface PaymentFormSubmitEvent {\n  eventType: 'payment_form_submit';\n  eventData: {\n    credentials: {\n      token: string;\n      type: string;\n    };\n    title: string;\n  };\n}\n\ninterface WebAppOpenTgLinkEvent {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full?: string;\n  };\n}\n\ntype IframeCallbackEvent = PaymentFormSubmitEvent | WebAppOpenTgLinkEvent;\n\nconst ConfirmPayment: FC<OwnProps> = ({\n  url, noRedirect, onClose, onPaymentFormSubmit,\n}) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useOldLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n      switch (eventType) {\n        case 'web_app_open_tg_link':\n          if (!noRedirect) {\n            const linkUrl = TME_LINK_PREFIX + eventData.path_full!;\n            openTelegramLink({ url: linkUrl });\n          }\n          onClose();\n          break;\n        case 'payment_form_submit':\n          if (onPaymentFormSubmit) {\n            onPaymentFormSubmit(eventData);\n          }\n          break;\n        default:\n          onClose();\n          break;\n      }\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink, onPaymentFormSubmit]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { RegularLangFnParameters } from '../../util/localization';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport PasswordForm from '../common/PasswordForm';\nimport PasswordMonkey from '../common/PasswordMonkey';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  errorKey?: RegularLangFnParameters;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  errorKey,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={errorKey && lang.withRegular(errorKey)}\n        hint={passwordHint}\n        description={oldLang('PaymentConfirmationMessage', cardName)}\n        placeholder={oldLang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    errorKey: payment.error?.messageKey,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.form?.type === 'regular' ? payment.form.savedCredentials : undefined,\n  };\n})(PasswordConfirm));\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect } from '../lib/teact/teact';\n\nimport { requestMeasure } from '../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst DEFAULT_DURATION = 300;\n\nexport default function useFocusAfterAnimation(\n  ref: ElementRef<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMeasure(() => {\n        ref.current?.focus();\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { CardType, detectCardType } from '../common/helpers/detectCardType';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport mirIconPath from '../../assets/mir.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 19;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n  const cardNumberRef = useRef<HTMLInputElement>();\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} draggable={false} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} draggable={false} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} draggable={false} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport CardInput from './CardInput';\nimport ExpiryInput from './ExpiryInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{oldLang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber && lang.withRegular(formErrors.cardNumber)}\n        />\n        {needCardholderName && (\n          <InputText\n            label={oldLang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder && lang.withRegular(formErrors.cardholder)}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry && lang.withRegular(formErrors.expiry)}\n          />\n          <InputText\n            label={oldLang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv && lang.withRegular(formErrors.cvv)}\n            teactExperimentControlled\n          />\n        </section>\n        {needCountry || needZip ? (\n          <h5>{oldLang('PaymentBillingAddress')}</h5>\n        ) : undefined}\n        <section className=\"inline-inputs\">\n          {needCountry && (\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.billingCountry}\n              hasArrow={Boolean(true)}\n              id=\"billing-country\"\n              error={formErrors.billingCountry && lang.withRegular(formErrors.billingCountry)}\n              tabIndex={0}\n              ref={selectCountryRef}\n            >\n              {\n                countryList.map(({ defaultName, name }) => (\n                  <option\n                    value={defaultName}\n                    className=\"county-item\"\n                    selected={defaultName === state.billingCountry}\n                  >\n                    {defaultName || name}\n                  </option>\n                ))\n              }\n            </Select>\n          )}\n          {needZip && (\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handleBillingPostCodeChange}\n              value={state.billingZip}\n              inputMode=\"text\"\n              tabIndex={0}\n              maxLength={12}\n              error={formErrors.billingZip && lang.withRegular(formErrors.billingZip)}\n            />\n          )}\n        </section>\n        <div className=\"checkbox\">\n          <Checkbox\n            label={oldLang('PaymentCardSavePaymentInformation')}\n            checked={canSaveCredentials ? state.saveCredentials : false}\n            tabIndex={0}\n            subLabel={oldLang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n            onChange={handleChangeSaveCredentials}\n            disabled={!canSaveCredentials}\n          />\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useOldLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\n\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(lang, amount, currency),\n    value,\n  }))), [shippingOptions, currency, lang]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{oldLang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const phoneRef = useRef<HTMLInputElement>();\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{oldLang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={oldLang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1 && lang.withRegular(formErrors.streetLine1)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2 && lang.withRegular(formErrors.streetLine2)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city && lang.withRegular(formErrors.city)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state && lang.withRegular(formErrors.state)}\n            />\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2 && lang.withRegular(formErrors.countryIso2)}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode && lang.withRegular(formErrors.postCode)}\n            />\n          </div>\n        ) : undefined}\n        {needName || needEmail || needPhone ? (\n          <h5>{oldLang('PaymentShippingReceiver')}</h5>\n        ) : undefined}\n        {needName && (\n          <InputText\n            label={oldLang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName && lang.withRegular(formErrors.fullName)}\n          />\n        )}\n        {needEmail && (\n          <InputText\n            label={oldLang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email && lang.withRegular(formErrors.email)}\n          />\n        )}\n        {needPhone && (\n          <InputText\n            label={oldLang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone && lang.withRegular(formErrors.phone)}\n            ref={phoneRef}\n          />\n        )}\n        <Checkbox\n          label={oldLang('PaymentShippingSave')}\n          subLabel={oldLang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiCountry, ApiInvoice, ApiLabeledPrice, ApiPaymentCredentials, ApiPaymentFormRegular,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\nimport type { PaymentFormSubmitEvent } from './ConfirmPayment';\nimport { PaymentStep } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectChat, selectTabState, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatCurrencyAsString } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\n\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport Checkout from './Checkout';\nimport ConfirmPayment from './ConfirmPayment';\nimport PasswordConfirm from './PasswordConfirm';\nimport PaymentInfo from './PaymentInfo';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport Shipping from './Shipping';\nimport ShippingInfo from './ShippingInfo';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst DONATE_PROVIDER_URL = 'https://payment.smart-glocal.com';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  step?: PaymentStep;\n  chat?: ApiChat;\n  nativeProvider?: string;\n  invoice?: ApiInvoice;\n  form?: ApiPaymentFormRegular;\n  error?: TabState['payment']['error'];\n  prices?: ApiLabeledPrice[];\n  isProviderError?: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions?: boolean;\n  shippingOptions?: ShippingOption[];\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  form,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n    setSmartGlocalCardInfo,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n  const prevStep = usePreviousDeprecated(step, true);\n  const prevRequestId = usePreviousDeprecated(requestId);\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error, requestId]);\n\n  // When payment verification occurs and the `step` does not change, the card details must be requested\n  useEffect(() => {\n    if (\n      step === PaymentStep.Checkout\n      && step === prevStep\n      && requestId !== prevRequestId\n      && !paymentState.savedCredentialId\n      && !paymentState.cardNumber\n    ) {\n      setStep(PaymentStep.PaymentInfo);\n    }\n  }, [paymentState.cardNumber, paymentState.savedCredentialId, prevRequestId, prevStep, requestId, setStep, step]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.messageKey,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (form?.savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = form.savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [form, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.descriptionKey ? lang.withRegular(error.descriptionKey) : lang('ErrorUnspecified')}</h4>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {oldLang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handlePaymentFormSubmit = useCallback((eventData: PaymentFormSubmitEvent['eventData']) => {\n    const { credentials } = eventData;\n    setSmartGlocalCardInfo(credentials);\n    sendForm();\n  }, [sendForm]);\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            title={form!.title}\n            description={form!.description}\n            photo={form!.photo}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice!}\n            checkoutInfo={checkoutInfo}\n            isPaymentFormUrl={isPaymentFormUrl}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n            botName={botName}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!form!.isPasswordMissing && form!.canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            needEmail={Boolean(invoice?.isEmailRequested || invoice?.isEmailSentToProvider)}\n            needPhone={Boolean(invoice?.isPhoneRequested || invoice?.isPhoneSentToProvider)}\n            needName={Boolean(invoice?.isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={invoice!.currency}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onPaymentFormSubmit={handlePaymentFormSubmit}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const handleButtonClick = useLastCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (isPaymentFormUrl) {\n          setIsLoading(true);\n          setStep(PaymentStep.ConfirmPayment);\n          return;\n        }\n\n        if (form?.savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (invoice?.isEmailRequested && !email)\n          || (invoice?.isPhoneRequested && !phone)\n          || (invoice?.isNameRequested && !fullName);\n\n        if ((invoice?.isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (invoice?.isShippingAddressRequested && !paymentState.shipping && shippingOptions?.length) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  });\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return oldLang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return oldLang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return oldLang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return oldLang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return oldLang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return oldLang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return oldLang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, oldLang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? oldLang('Checkout.PayPrice', formatCurrencyAsString(totalPrice, invoice!.currency, oldLang.code))\n    : lang('PaymentInfoDone');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.termsUrl) && !isTosAccepted;\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram Web A doesn&apos;t support payments with this provider yet.\n          {' '}\n          <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {oldLang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <Icon name={step === PaymentStep.Checkout ? 'close' : 'arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition\n          name=\"slide\"\n          activeKey={step}\n          shouldCleanup\n          cleanupOnlyKey={PaymentStep.ConfirmPayment}\n        >\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            className=\"button-text\"\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      form,\n      step,\n      shippingOptions,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n      url,\n    } = selectTabState(global).payment;\n\n    const { invoice, nativeParams, nativeProvider } = form || {};\n    const countryList = global.countryList.general;\n\n    let providerName = form?.nativeProvider;\n    if (!providerName && url) {\n      providerName = url.startsWith(DONATE_PROVIDER_URL) ? DONATE_PROVIDER : undefined;\n    }\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!providerName || !SUPPORTED_PROVIDERS.has(providerName)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const bot = form?.botId ? selectUser(global, form.botId) : undefined;\n    const botName = getUserFullName(bot);\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      nativeProvider: providerName,\n      isProviderError,\n      form,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl: confirmPaymentUrl ?? url,\n      isPaymentFormUrl: Boolean(!nativeProvider && url),\n      countryList,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n      botName,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: ApiLabeledPrice[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiReceiptRegular, ApiShippingAddress } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Checkout from './Checkout';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  receipt?: ApiReceiptRegular;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  receipt,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const prevReceipt = usePrevious(receipt);\n  const renderingReceipt = receipt || prevReceipt;\n\n  const checkoutInfo = useMemo(() => {\n    if (!renderingReceipt) return undefined;\n    return getCheckoutInfo(renderingReceipt.credentialsTitle, renderingReceipt.info, renderingReceipt.shippingMethod);\n  }, [renderingReceipt]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      {renderingReceipt && (\n        <>\n          <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            <Button\n              className=\"close-button\"\n              color=\"translucent\"\n              round\n              size=\"smaller\"\n              onClick={closeModal}\n              ariaLabel=\"Close\"\n            >\n              <Icon name=\"close\" />\n            </Button>\n            <h3>\n              {' '}\n              {lang('PaymentReceipt')}\n              {' '}\n            </h3>\n          </div>\n          <div className=\"receipt-content custom-scroll\">\n            <Checkout\n              shippingPrices={renderingReceipt.shippingPrices}\n              totalPrice={renderingReceipt.totalAmount}\n              tipAmount={renderingReceipt.tipAmount}\n              invoice={renderingReceipt.invoice}\n              checkoutInfo={checkoutInfo}\n              title={renderingReceipt.title}\n              description={renderingReceipt.description}\n              photo={renderingReceipt.photo}\n            />\n          </div>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n\n    return {\n      receipt,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?: {\n    phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"n8eENbaR\",\"closeButton\":\"smosGkw9\",\"contentText\":\"Qo4PtFZI\",\"title\":\"wtfpombl\",\"separator\":\"UoMeVIyC\",\"userPicker\":\"nEYyTS_m\",\"sendInvites\":\"Ttkq3nqt\",\"avatarList\":\"Nc3SOtKd\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback,\n  useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './InviteViaLinkModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['inviteViaLinkModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst InviteViaLinkModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n}) => {\n  const { sendInviteMessages, closeInviteViaLinkModal, openPremiumModal } = getActions();\n  const { missingUsers } = modal || {};\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n\n  const userIds = useMemo(() => missingUsers?.map((user) => user.id) || MEMO_EMPTY_ARRAY, [missingUsers]);\n  const [unselectableIds, selectableIds] = useMemo(() => {\n    if (!missingUsers?.length) return [[], []];\n    const [requirePremiumIds, regularIds] = partition(missingUsers, (user) => user.isRequiringPremiumToMessage);\n    return [requirePremiumIds.map((user) => user.id), regularIds.map((user) => user.id)];\n  }, [missingUsers]);\n\n  const invitableWithPremiumIds = useMemo(() => {\n    return missingUsers?.filter((user) => user.isRequiringPremiumToInvite || user.isRequiringPremiumToMessage)\n      .map((user) => user.id);\n  }, [missingUsers]);\n\n  const isEveryPremiumBlocksPm = useMemo(() => {\n    if (!missingUsers) return undefined;\n    return !missingUsers.some((user) => user.isRequiringPremiumToInvite && !user.isRequiringPremiumToMessage);\n  }, [missingUsers]);\n\n  const topListPeers = useMemo(() => {\n    const users = getGlobal().users.byId;\n    return invitableWithPremiumIds?.map((id) => users[id]);\n  }, [invitableWithPremiumIds]);\n\n  useEffect(() => {\n    setSelectedMemberIds(selectableIds);\n  }, [selectableIds]);\n\n  const handleClose = useLastCallback(() => closeInviteViaLinkModal());\n\n  const handleSendInviteLink = useCallback(() => {\n    sendInviteMessages({ chatId: chat!.id, userIds: selectedMemberIds });\n    closeInviteViaLinkModal();\n  }, [selectedMemberIds, chat]);\n\n  const handleOpenPremiumModal = useCallback(() => {\n    openPremiumModal();\n  }, []);\n\n  const canSendInviteLink = useMemo(() => {\n    if (!chat) return undefined;\n    return Boolean(chat?.isCreator || chat?.adminRights?.inviteUsers);\n  }, [chat]);\n\n  const inviteSectionText = useMemo(() => {\n    return canSendInviteLink\n      ? lang(missingUsers?.length === 1 ? 'InviteBlockedOneMessage' : 'InviteBlockedManyMessage')\n      : lang('InviteRestrictedUsers2', missingUsers?.length);\n  }, [canSendInviteLink, lang, missingUsers?.length]);\n\n  const premiumSectionText = useMemo(() => {\n    if (!invitableWithPremiumIds?.length || !topListPeers?.length) return undefined;\n    const prefix = isEveryPremiumBlocksPm ? 'InviteMessagePremiumBlocked' : 'InvitePremiumBlocked';\n    let langKey = `${prefix}One`;\n    let params = [getUserFullName(topListPeers[0])];\n    if (invitableWithPremiumIds.length === 2) {\n      langKey = `${prefix}Two`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1])];\n    } else if (invitableWithPremiumIds.length === 3) {\n      langKey = `${prefix}Three`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1]), getUserFullName(topListPeers[2])];\n    } else if (invitableWithPremiumIds.length > 3) {\n      langKey = `${prefix}Many`;\n      params = [\n        getUserFullName(topListPeers[0]),\n        getUserFullName(topListPeers[1]),\n        (invitableWithPremiumIds.length - 2).toString(),\n      ];\n    }\n\n    return lang(langKey, params, undefined, topListPeers.length);\n  }, [invitableWithPremiumIds, isEveryPremiumBlocksPm, lang, topListPeers]);\n\n  const hasPremiumSection = Boolean(topListPeers?.length);\n  const hasSelectableSection = Boolean(selectableIds?.length);\n\n  return (\n    <Modal\n      isOpen={Boolean(userIds && chat)}\n      contentClassName={styles.content}\n      onClose={handleClose}\n      isSlim\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {premiumSectionText && (\n        <>\n          <AvatarList\n            className={styles.avatarList}\n            peers={topListPeers}\n            size=\"large\"\n          />\n          <h3 className={styles.title}>\n            {canSendInviteLink ? lang('InvitePremiumBlockedTitle') : lang('ChannelInviteViaLinkRestricted')}\n          </h3>\n          <p className={styles.contentText}>\n            {renderText(premiumSectionText, ['simple_markdown'])}\n          </p>\n          <Button\n            withPremiumGradient\n            isShiny\n            size=\"smaller\"\n            onClick={handleOpenPremiumModal}\n          >\n            {lang('InvitePremiumBlockedSubscribe')}\n          </Button>\n        </>\n      )}\n      {hasPremiumSection && hasSelectableSection && (\n        <Separator className={styles.separator}>\n          {lang('InvitePremiumBlockedOr')}\n        </Separator>\n      )}\n      {hasSelectableSection && (\n        <>\n          <h3 className={styles.title}>{lang('InviteBlockedTitle')}</h3>\n          <p className={styles.contentText}>\n            {inviteSectionText}\n          </p>\n          <PeerPicker\n            className={styles.userPicker}\n            itemIds={userIds}\n            selectedIds={selectedMemberIds}\n            lockedUnselectedIds={unselectableIds}\n            lockedUnselectedSubtitle={lang('InvitePremiumBlockedUser')}\n            onSelectedIdsChange={setSelectedMemberIds}\n            isViewOnly={!canSendInviteLink}\n            allowMultiple\n            withStatus\n            itemInputType=\"checkbox\"\n          />\n          {canSendInviteLink && (\n            <Button\n              className={styles.sendInvites}\n              size=\"smaller\"\n              onClick={handleSendInviteLink}\n              disabled={!selectedMemberIds.length}\n            >\n              {lang('SendInviteLink.ActionInvite')}\n            </Button>\n          )}\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal?.chatId ? selectChat(global, modal.chatId) : undefined;\n\n    return {\n      chat,\n    };\n  },\n)(InviteViaLinkModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c3xMWwzW\",\"fade-in-opacity\":\"cHb04cFv\",\"fadeInOpacity\":\"cHb04cFv\",\"closing\":\"_0HkZ8ITm\",\"voice\":\"VLiJWMs0\",\"video\":\"ML2YEpGq\",\"footer\":\"VWy1qXJL\",\"closeBtn\":\"FfMrCmD9\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { isOwnMessage } from '../../../global/helpers';\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Audio from '../../common/Audio';\nimport RoundVideo from '../../middle/message/RoundVideo';\nimport Button from '../../ui/Button';\n\nimport styles from './OneTimeMediaModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['oneTimeMediaModal'];\n};\n\nconst OneTimeMediaModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    closeOneTimeMediaModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const message = useCurrentOrPrev(modal?.message, true);\n\n  const {\n    shouldRender,\n    transitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(modal));\n\n  const handlePlayVoice = useLastCallback(() => {\n    return undefined;\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeOneTimeMediaModal();\n  });\n\n  if (!shouldRender || !message) {\n    return undefined;\n  }\n\n  const isOwn = isOwnMessage(message);\n  const theme = selectTheme(getGlobal());\n  const closeBtnTitle = isOwn ? lang('Chat.Voice.Single.Close') : lang('Chat.Voice.Single.DeleteAndClose');\n\n  function renderMedia() {\n    if (!message?.content) {\n      return undefined;\n    }\n    const { voice, video } = message.content;\n    if (voice) {\n      return (\n        <Audio\n          className={styles.voice}\n          theme={theme}\n          message={message}\n          origin={AudioOrigin.OneTimeModal}\n          autoPlay\n          onPlay={handlePlayVoice}\n          onPause={handleClose}\n        />\n      );\n    } else if (video?.isRound) {\n      return (\n        <RoundVideo\n          className={styles.video}\n          message={message}\n          origin=\"oneTimeModal\"\n          onStop={handleClose}\n        />\n      );\n    }\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, transitionClassNames)}>\n      {renderMedia()}\n      <div className={styles.footer}>\n        <Button\n          faded\n          onClick={handleClose}\n          pill\n          size=\"smaller\"\n          color={theme === 'dark' ? 'dark' : 'secondary'}\n          className={styles.closeBtn}\n        >\n          {closeBtnTitle}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(OneTimeMediaModal);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst WebAppsCloseConfirmationModal: FC<OwnProps> = ({\n  isOpen,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { closeWebAppsCloseConfirmationModal, closeWebAppModal } = getActions();\n\n  const [shouldSkipInFuture, setShouldSkipInFuture] = useState(false);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const onClose = useCallback(() => {\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const confirmHandler = useCallback(() => {\n    closeWebAppModal({ shouldSkipConfirmation: true });\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const handleSelectWithEnter = useCallback((index: number) => {\n    if (index === -1) confirmHandler();\n  }, [confirmHandler]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, handleSelectWithEnter, '.Button');\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      title={lang('CloseMiniApps')}\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <p>{lang('AreYouSureCloseMiniApps')}</p>\n      <Checkbox\n        className=\"dialog-checkbox\"\n        label={lang('DoNotAskAgain')}\n        checked={shouldSkipInFuture}\n        onCheck={setShouldSkipInFuture}\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n        ref={containerRef}\n        onKeyDown={handleKeyDown}\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n          color=\"danger\"\n        >\n          {oldLang('Confirm')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>\n          {oldLang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(WebAppsCloseConfirmationModal);\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport TableAboutModal, { type TableAboutData } from '../common/TableAboutModal';\n\nimport styles from './FrozenAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['isFrozenAccountModalOpen'];\n};\n\ntype StateProps = {\n  freezeAppealUrl?: string;\n  botFreezeAppealUsername?: string;\n  freezeUntilDate?: number;\n};\n\nconst FrozenAccountModal = ({\n  modal,\n  freezeUntilDate,\n  freezeAppealUrl,\n  botFreezeAppealUsername,\n}: OwnProps & StateProps) => {\n  const {\n    closeFrozenAccountModal,\n    openUrl,\n  } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n\n  const handleClose = useLastCallback(() => {\n    closeFrozenAccountModal();\n  });\n\n  const handleAppeal = useLastCallback(() => {\n    closeFrozenAccountModal();\n    if (freezeAppealUrl) {\n      openUrl({ url: freezeAppealUrl });\n    }\n  });\n\n  const header = useMemo(() => {\n    return (\n      <div className={styles.header}>\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.BannedDuck}\n          noLoop\n        />\n        <div className={styles.title}>\n          {lang('FrozenAccountModalTitle')}\n        </div>\n      </div>\n    );\n  }, [lang]);\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          className={styles.buttonAppeal}\n          size=\"smaller\"\n          onClick={handleAppeal}\n          noForcedUpperCase\n        >\n          {lang('ButtonAppeal')}\n        </Button>\n        <Button\n          isText\n          size=\"smaller\"\n          onClick={handleClose}\n          noForcedUpperCase\n        >\n          {lang('ButtonUnderstood')}\n        </Button>\n      </div>\n    );\n  }, [lang, isOpen]);\n\n  if (!freezeUntilDate || !botFreezeAppealUsername) return undefined;\n\n  const date = new Date(freezeUntilDate * 1000);\n\n  const botLink = (\n    <Link onClick={handleAppeal} isPrimary>\n      {formatUsername(botFreezeAppealUsername)}\n    </Link>\n  );\n\n  const listItemData = [\n    ['hand-stop', lang('FrozenAccountViolationTitle'), lang('FrozenAccountViolationSubtitle')],\n    ['lock', lang('FrozenAccountReadOnlyTitle'), lang('FrozenAccountReadOnlySubtitle')],\n    ['frozen-time', lang('FrozenAccountAppealTitle'),\n      lang('FrozenAccountAppealSubtitle', {\n        botLink,\n        date: formatDateToString(date, lang.code),\n      }, {\n        withNodes: true,\n      })],\n  ] satisfies TableAboutData;\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const freezeUntilDate = global.appConfig?.freezeUntilDate;\n    const freezeAppealUrl = global.appConfig?.freezeAppealUrl;\n    const botFreezeAppeal = global.botFreezeAppealId ? selectUser(global, global.botFreezeAppealId) : undefined;\n    const botFreezeAppealUsername = botFreezeAppeal && getMainUsername(botFreezeAppeal);\n\n    return {\n      freezeUntilDate,\n      freezeAppealUrl,\n      botFreezeAppealUsername,\n    };\n  },\n)(FrozenAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"cW2rtp6M\",\"title\":\"qLSm0uyC\",\"footer\":\"Vj3QQ_JQ\",\"buttonAppeal\":\"anvg3JaY\"};"],"names":["SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","memo","PasswordMonkey","isPasswordVisible","isBig","isFirstMonkeyLoaded","markFirstMonkeyLoaded","useFlag","isPeekShown","markPeekShown","isMobile","useAppLayout","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","useTimeout","handleFirstMonkeyLoad","useCallback","_jsxs","id","className","children","_jsx","AnimatedSticker","size","STICKER_SIZE_TWO_FA","tgsUrl","LOCAL_TGS_URLS","MonkeyClose","playSegment","noLoop","onLoad","MonkeyPeek","getMediaViewerItem","message","avatarOwner","profilePhotos","standaloneMedia","mediaIndex","sponsoredMessage","type","media","selectViewableMedia","global","params","isSingle","length","avatar","photos","action","document","photo","video","paidMedia","getMessageContent","isDocumentPhoto","isDocumentVideo","webPage","selectWebPageFromMessage","webpageType","webPagePhoto","webPageVideo","webPageDocument","isDocumentMedia","undefined","extendedMedia","extendedPhoto","extendedVideo","isGif","createGhost","source","origin","ghost","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","ProfileAvatar","SettingsAvatar","profileInfo","querySelector","cloneNode","getNodes","index","containerSelector","mediaSelector","Album","ScheduledAlbum","getMessageHtmlId","PreviewMedia","SharedMedia","SearchResult","MiddleHeaderAvatar","ChannelAvatar","SuggestedAvatar","StarsTransaction","SponsoredMessage","MESSAGE_CONTENT_SELECTOR","ScheduledInline","Inline","container","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","style","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","FALLBACK_DIMENSIONS","AVATAR_FULL_DIMENSIONS","useMediaProps","isAvatar","delay","isPhotoAvatar","mediaType","isVideo","isVideoAvatar","isDocument","isRound","isPhoto","isFromSharedMedia","isFromSearch","getMediaOrAvatarHash","useMemo","isFull","getVideoProfilePhotoMediaHash","getMediaHash","getProfilePhotoMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","BlobUrl","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","clear","set","window","setTimeout","useBlur","Boolean","useBlurSync","getMediaThumbUri","bestData","mediaSize","getMediaFileSize","isLocal","dimensions","VIDEO_AVATAR_FULL_DIMENSIONS","getPhotoFullDimensions","getVideoDimensions","ReportAvatarModal","isOpen","peerId","onClose","onCloseAnimationEnd","reportProfilePhoto","getActions","selectedReason","setSelectedReason","useState","description","setDescription","handleReport","useLastCallback","chatId","reason","handleSelectReason","value","handleDescriptionChange","e","target","lang","useOldLang","REPORT_OPTIONS","label","title","Modal","onEnter","RadioGroup","name","options","onChange","selected","InputText","Button","color","isText","onClick","getZoomChange","setZoomChange","useZoomChange","useUnmountCleanup","DeleteProfilePhotoModal","profileId","onConfirm","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","isUserId","withGlobal","item","canUpdateMedia","tabState","selectTabState","mediaViewer","avatarPhoto","chat","selectCurrentChat","currentMessageList","selectCurrentMessageList","threadId","isProtected","selectIsMessageProtected","activeDownloads","selectActiveDownloads","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","selectAllowedMessageActionsSlow","isCurrentAvatar","avatarPhotoId","canDeleteAvatar","canUpdate","messageListType","viewableMedia","MediaViewerActions","canReportAvatar","onReportAvatar","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","downloadMedia","cancelMediaDownload","updateProfilePhoto","updateChatPhoto","openMediaViewer","openDeleteMessageModal","isMessage","fileName","getMediaFilename","isDownloading","getIsDownloading","downloadProgress","handleDownloadClick","originMessage","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","isAvatarView","forceOnHeavyAnimation","MenuButton","onTrigger","round","ariaLabel","Icon","renderDeleteModal","openDeleteModalHandler","messageIds","isSchedule","menuItems","isForwardingAllowed","content","push","icon","Math","href","download","destructive","DropdownMenu","trigger","positionX","map","MenuItem","ProgressSpinner","progress","noCross","renderDownloadButton","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","getCurrentTime","setCurrentTime","useCurrentTimeSignal","MediaViewerFooter","text","buttonText","isForVideo","handleSponsoredClick","isForceMobileVersion","isMultiline","setIsMultiline","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","onButtonClick","classNames","buildClassName","stopPropagation","dir","isRectangular","getIsVideoWaiting","setIsVideoWaiting","useVideoWaitingSignal","IS_MOBILE","IS_ANDROID","IS_IOS","PREVIEW_SIZE_RATIO","MAX_FRAMES","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","frames","currentTime","constructor","url","this","forEach","connector","request","args","MAX_WORKERS","onFrame","time","frame","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","data","result","callApi","mediaFormat","Progressive","arrayBuffer","postMessage","cancelAnimation","SeekLine","duration","bufferedRanges","isReady","posterSize","playbackRate","isActive","isPlaying","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getCurrentTimeSignal","getIsWaiting","useThrottledSignal","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","floor","renderVideoPreview","createVideoPreviews","remaining","animateNumber","from","to","onUpdate","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","getPointerPosition","x","t","clamp","preview","clientWidth","stopAnimation","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","styles","start","end","PLAYBACK_RATES","renderTime","VideoPlayerControls","bufferedProgress","fileSize","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","onSeekingChange","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","closeTimeoutRef","setVisibility","isVisible","body","remove","handleSeek","position","handleSeekStart","volumeIcon","ripple","RangeSlider","bold","formatFileSize","Menu","positionY","autoClose","rate","disabled","VideoPlayer","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","isSponsoredMessage","timestamp","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","lastMousePosition","y","updateMousePosition","checkMousePositionAndToggleControls","clientX","clientY","bounds","right","top","bottom","handleVideoMove","handleVideoLeave","handleSeekingChange","bufferingHandlers","useBuffering","isUnsupported","useUnsupportedMedia","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransitionDeprecated","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","key","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseLeave","onContextMenu","onDoubleClick","autoPlay","controlsList","playsInline","loop","onWaiting","onPlay","onEnded","onPause","onTimeUpdate","join","textMessage","maxTimestamp","selectMessageTimestampableDuration","MediaViewerContent","withAnimation","isMoving","onFooterClick","updateLastPlaybackTimestamp","toggleControlsOnMove","updatePlaybackTimestamp","useThrottledCallback","MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION","isInAlbum","newTimestamp","PLAYBACK_SAVE_INTERVAL","useSignalEffect","calculateMediaViewerDimensions","ARE_WEBCODECS_SUPPORTED","renderPhoto","textParts","renderMessageText","forcePlayback","isForMediaViewer","hasFooter","shouldForceMobileVersion","imageSize","canDrag","alt","Spinner","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelZoomAnimation","SwipeDirection","MediaViewerSlides","isLoadingMoreMedia","isSynced","loadMoreItemsIfNeeded","getNextItem","selectItem","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveItem","setActiveItem","activeItemRef","isScaled","activeItem","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectItemDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","cActiveItem","nextItem","timing","changeSlideOnClick","closest","calculateOffsetBoundaries","offsetTop","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","max","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","min","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","withWheelDrag","checkIfControlTarget","event","captureEvent","dragOffsetX","dragOffsetY","cancelDrag","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","SWIPE_DIRECTION_THRESHOLD","SWIPE_DIRECTION_TOLERANCE","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","includes","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","prevItem","hasPrev","hasNext","isRtl","toFixed","element","selector","matches","messageSender","selectSender","owner","SenderInfo","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","subtitle","isFallbackAvatar","fallbackPhoto","isPersonalAvatar","personalPhoto","date","formattedDate","formatMediaDateTime","count","currentIndex","countText","parts","isChannel","isChatChannel","isGroup","isChatGroup","senderTitle","getPeerTitle","Avatar","peer","renderText","shouldSkipHistoryAnimations","withDynamicLoading","selectPerformanceSettingsValue","currentUserId","isChatWithSelf","selectIsChatWithSelf","selectPeer","isChatAdmin","selectPeerPhotos","currentItem","isLoading","chatMessages","selectScheduledMessage","selectChatMessage","selectSponsoredMessage","selectChatScheduledMessages","selectChatMessages","isOriginInline","isOriginAlbum","collectedMessageIds","currentSearch","selectCurrentChatMediaSearch","foundIds","currentSegment","selectCurrentSharedMediaSearch","resultsByType","selectOutlyingListByMessageId","selectListedIds","MediaViewer","openForwardMenu","searchChatMediaMessages","loadMoreProfilePhotos","clickSponsored","openUrl","animationKey","senderId","prevSenderId","usePreviousDeprecated","headerAnimation","isGhostAnimation","isReportAvatarModalOpen","openReportAvatarModal","closeReportAvatarModal","info","messageMediaIds","getChatMediaMessageIds","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","headerRef","useElectronDrag","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","prevMessage","prevIsHidden","prevOrigin","prevBestImageData","shouldAnimateOpening","beginHeavyAnimation","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","applyStyles","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","imageEl","messageListElement","getOffsetToContainer","scrollTop","offsetHeight","isMessageImageFullyVisible","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","HTMLElement","isFromMedia","isMedia","randomId","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","currentMediaMessageId","fromMedia","fromMediaIndex","nextIndex","fromAvatarOwner","fromProfilePhotos","fromSponsoredMessage","fromSponsoredMessageIndex","fromMessage","getMessagePaidMedia","indexOf","nextMessageId","nextMessage","openMediaViewerItem","itemChatId","itemMessageId","itemStandaloneMedia","handleBeforeDelete","prevMedia","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","avatarOwnerId","OFFSET_BOTTOM","MOBILE_OFFSET","hasBlur","isGhost2","ctx","alpha","IS_CANVAS_FILTER_SUPPORTED","filter","RADIUS","userId","getPeerStoryHtmlId","StoryViewerOrigin","StoryRibbon","storyRibbonStyles","root","ChatList","calculateOffsetX","slideAmount","isActiveSlideSize","isMoveThroughActiveSlide","isBackward","mainOffset","additionalOffset","totalOffset","roundToNearestEven","useSlideSizes","baseWidth","baseHeight","newWidth","newHeight","widthScale","heightScale","calculateScale","activeSlideWidth","slideWidth","activeSlide","slide","toActiveScale","fromActiveScale","calculateSlideSizes","useStoryProps","story","isCurrentUserPremium","isDropdownMenuOpen","isLoadedStory","isDeletedStory","hasText","hasMessageText","hasForwardInfo","forwardInfo","thumbnail","previewHash","getStoryMediaHash","noSound","fullMediaHash","fullMediaData","altMediaHash","altMediaData","hasFullData","hasThumb","canDownload","noForwards","downloadHash","downloadMediaData","storyViewer","isStealthModalOpen","stealthMode","stories","selectIsCurrentUserPremium","StealthModeModal","toggleStealthModal","activateStealthMode","showNotification","openPremiumModal","isOnCooldown","setIsOnCooldown","serverTime","getServerTime","cooldownUntil","handleTimerEnds","handleActivate","initialSection","contentClassName","isSlim","ListItem","multiline","inactive","leftElement","isShiny","withPremiumGradient","TextTimer","langKey","endsAt","onEnd","deleteStory","openNextStory","handleDeleteStoryClick","storyId","ConfirmDialog","confirmLabel","confirmHandler","confirmIsDestructive","contactListIds","selectedIds","lockedIds","onSelect","searchQuery","setSearchQuery","displayedIds","contactIds","unique","filterPeersByQuery","ids","query","PeerPicker","itemIds","MEMO_EMPTY_ARRAY","lockedSelectedIds","filterValue","filterPlaceholder","searchInputId","isSearchable","withDefaultPadding","forceShowSelf","onSelectedIdsChange","onFilterChange","allowMultiple","withStatus","itemInputType","usersById","saveCloseFriends","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","closeFriendIds","isCloseFriend","useEffectWithPrevDeps","prevIsActive","handleSelectedContactIdsChange","handleSubmit","userIds","_Fragment","FloatingActionButton","isShown","OPTIONS","actions","Screens","selectPeerStory","visibility","contactList","users","byId","editStoryPrivacy","toggleStoryInProfile","isOpenModal","openModal","closeModal","privacy","setPrivacy","isPinned","setIsPinned","isInProfile","setActiveKey","editingBlockingCategory","setEditingBlockingCategory","isBackButton","allowList","allowUserIds","selectedBlockedIds","blockUserIds","handleAllowUserIdsChange","newIds","handleDenyUserIdsChange","handleCloseButtonClick","handleIsPinnedToggle","modal","noBackdrop","header","closeButton","headerTitle","closeFriends","denyList","renderHeaderContent","slideClassName","storyLifeTime","getHours","expireDate","section","list","option","checked","input","handleVisibilityChange","newVisibility","teactExperimentControlled","optionContent","option_name","tabIndex","role","handleActionClick","actionInner","getUserFullName","Switcher","footer","submit","renderPrivacyList","CloseFriends","AllowDenyList","sender","fromPeerId","EmbeddedStoryForward","openStoryViewer","loadPeerStoriesByIds","openChat","storyIds","fromName","openOriginalStory","isDeleted","isSingleStory","handleMouseDown","useFastClick","PeerColorWrapper","getPeerColorClass","onMouseDown","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","renderTextWithEntities","renderTextContent","renderSender","isExpanded","onExpand","onFold","contentRef","textRef","showMoreButtonRef","renderingStory","useCurrentOrPrev","caption","hasOverflow","setHasOverflow","prevIsExpanded","usePrevDuringAnimation","isInExpandedState","addExtraClass","removeExtraClass","canExpand","shouldRenderShowMore","requestMeasure","button","offsetWidth","setProperty","requestForcedReflow","textContainer","textOffsetTop","lineHeight","totalLines","calcTextLineHeightAndCount","isOverflowing","overflowShift","scrollTo","fullClassName","MessageText","messageOrStory","withTranslucentThumbs","StoryFooter","openStoryViewModal","sendStoryReaction","views","isOut","sentReaction","viewsCount","forwardsCount","reactionsCount","isSentStoryReactionHeart","isSameReaction","HEART_REACTION","canForward","isPublic","containerId","getStoryKey","recentViewers","getGlobal","recentViewerIds","handleOpenStoryViewModal","handleForwardClick","handleLikeStory","reaction","AvatarList","peers","nonInteractive","ReactionAnimatedEmoji","withEffectOnly","getReactionKey","isViewed","isPaused","onImageComplete","handleAnimationEnd","animationName","onAnimationEnd","VIDEO_MIN_READY_STATE","IS_SAFARI","appConfig","user","selectUser","selectChat","userFullInfo","selectUserFullInfo","viewModal","isPrivacyModalOpen","storyList","forwardMessages","forwardedStoryId","premiumModal","safeLinkModalUrl","mapModal","reportModal","giftInfoModal","isPaymentMessageConfirmDialogOpen","isPremiumModalOpen","shouldForcePause","reactionPicker","mediaAreas","forwardSenderId","find","area","channelId","forwardSender","withHeaderAnimation","fromPeer","fromId","paidMessagesStars","selectPeerPaidMessagesStars","isAccountFrozen","selectIsCurrentUserFrozen","orderedIds","storyIdsByPeerId","storyChangelogUserId","viewersExpirePeriod","storyExpirePeriod","storyViewersExpirePeriod","isChatExist","arePeerSettingsLoaded","settings","isArchivedStories","isPrivateStories","getIsAnimating","onDelete","viewStory","setStoryViewerMuted","openPreviousStory","loadPeerSkippedStories","copyStoryLink","openStoryPrivacyEditor","loadPeerSettings","fetchChat","loadStoryViews","oldLang","useLang","isComposerHasFocus","markComposerHasFocus","unmarkComposerHasFocus","isStoryPlaybackRequested","playStory","pauseStory","isStoryPlaying","markStoryPlaying","unmarkStoryPlaying","isAppFocused","markAppFocused","unmarkAppFocused","isCaptionExpanded","expandCaption","foldCaption","isPausedBySpacebar","setIsPausedBySpacebar","isPausedByLongPress","markIsPausedByLongPress","unmarkIsPausedByLongPress","markDropdownMenuOpen","unmarkDropdownMenuOpen","isChangelog","isUserStory","isChatStory","isChannelStory","canPinToProfile","canUnpinFromProfile","areViewsExpired","forwardSenderTitle","canCopyLink","hasUsername","canShare","canPlayStory","shouldShowComposer","shouldShowFooter","shouldRenderSkeleton","skeletonTransitionClassNames","mediaTransitionClassNames","thumbRef","useCanvasBlur","previewTransitionClassNames","useMediaTransitionDeprecated","shouldRenderComposer","composerAppearanceAnimationClassNames","shouldRenderCaptionBackdrop","captionBackdropTransitionClassNames","appearanceAnimationClassNames","shouldRenderCaption","captionAppearanceAnimationClassNames","isStreamingSupported","useStreaming","PRIMARY_VIDEO_MIME","useStoryPreloader","canWrite","handlePauseStory","handlePlayStory","handleLongPressStart","handleLongPressEnd","handleDropdownMenuOpen","handleDropdownMenuClose","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","hasAllData","useBackgroundMode","load","keyCode","prevIsComposerHasFocus","prevIsCaptionExpanded","prevShouldForcePause","prevIsAppFocused","prevIsPausedByLongPress","handleOpenChat","handleForwardPeerClick","handleFromPeerClick","handleOpenPrevStory","handleOpenNextStory","handleVideoStoryTimeUpdate","captureKeyboardListeners","onRight","onLeft","handleCopyStoryLink","handlePinClick","handleUnpinClick","handleReportStoryClick","handleInfoPrivacyEdit","handleInfoPrivacyClick","isForContacts","isForCloseFriends","myName","handleOpenStealthModal","activeUntil","diff","handleDownload","inputPlaceholder","amount","formatStarsAsIcon","asFont","withNodes","StoryProgress","formatRelativePastTime","isEdited","privacyIcon","gradient","renderStoryPrivacyButton","onOpen","Skeleton","OptimizedVideo","canPlay","isPriority","disableRemotePlayback","SECONDARY_VIDEO_MIME","MediaAreaOverlay","withStory","storyViewerMode","StoryCaption","Composer","MAIN_THREAD_ID","getIsMobile","editableInputCssSelector","EDITABLE_STORY_INPUT_CSS_SELECTOR","editableInputId","EDITABLE_STORY_INPUT_ID","inputId","onFocus","onBlur","lastViewedByPeerId","lastViewedByPeerIds","lastViewedId","storyIdsForViewer","peerStories","lastReadId","hasUnreadStories","previewIndexId","isLoaded","imageHash","thumbUrl","currentPeerId","currentStoryId","isSinglePeer","isPrivate","isArchive","byPeerId","orderedPeerIds","active","peerIds","selectIsStoryViewerOpen","stopActiveReaction","renderingPeerId","setRenderingPeerId","renderingStoryId","setRenderingStoryId","prevPeerId","renderingIsArchive","renderingIsPrivate","renderingIsSinglePeer","renderingIsSingleStory","slideSizes","rendersRef","setIsAnimating","setRef","renderingPeerIds","slice","renderingPeerPosition","currentPeerPosition","calculateTransformX","reduce","transformX","getCurrentStoryRef","composer","focusEditableElement","disableScrolling","enableScrolling","Object","entries","String","handleTransitionEnd","Story","onTransitionEnd","buildStyle","renderStory","StoryPreview","renderStoryPreview","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","scrollHeight","DEFAULT_REACTION_SIZE","storyView","availableReactions","reactions","StoryView","closeStoryViewer","unblockUser","blockUser","deleteContact","updateStoryView","closeStoryViewModal","contextActions","areStoriesBlocked","isUserBlocked","isContact","fullName","handler","isOnlyStories","statusIcon","shouldColorStatus","status","isModified","formatDateAtTime","opacityFadeIn","blocked","rightElement","ReactionStaticEmoji","viewReaction","withIconHeart","withPortalForMenu","menuBubbleClassName","menuBubble","PrivateChatInfo","withColoredStatus","noStatusOrTyping","GroupChatInfo","nextOffset","loadStoryViewList","clearStoryViews","areJustContacts","markJustContacts","unmarkJustContacts","areReactionsFirst","markReactionsFirst","unmarkReactionsFirst","setQuery","isExpired","shouldShowJustContacts","STORY_VIEWS_MIN_CONTACTS_FILTER","shouldShowSortByReactions","STORY_MIN_REACTIONS_SORT","shouldShowSearch","STORY_VIEWS_MIN_SEARCH","hasHeader","refetchViews","sortedViews","sort","a","b","reactionA","reactionB","prepareComparator","placeholderCount","notAllAvailable","handleLoadMore","MoreMenuButton","isMenuOpen","fluid","sortButton","topButton","faded","iconSort","iconDown","viewsList","contactFilter","check","SearchInput","search","topScrolled","onScroll","centeredInfo","InfiniteScroll","items","onLoadMore","view","additionalKeyId","Array","_","i","PlaceholderChatInfo","bottomInfo","closeStoryPrivacyEditor","reportStory","storyToDelete","setStoryToDelete","isPrevOpen","handleOpenDeleteModal","s","handleCloseDeleteModal","openMessageReport","thumb","safeAreaBottom","getComputedStyle","documentElement","getPropertyValue","parseFloat","toTranslateX","toTranslateY","toScaleX","toScaleY","ghost2","ghost2Top","StorySlides","StoryDeleteConfirmModal","StoryViewModal","StorySettings","TOPIC_ICON_SIZE","ITEM_CLASS_NAME","ChatOrUserPicker","chatOrUserIds","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","isLowStackPriority","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","selectTopicsById","selectTopics","forumTopicsById","useSelector","topicIds","topics","chatsById","chats","chatFullInfoById","fullInfoById","searchTitle","toLowerCase","values","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","renderChatItem","monoforumChannel","selectMonoforumChannel","isSelf","isApiPeerChat","subtitleClassName","getGroupStatus","userStatus","selectUserStatus","getUserStatus","isUserOnline","getSubtitle","PickerItem","FullNameTitle","isMonoforum","isSavedMessages","avatarElement","asMessageBubble","PEER_PICKER_ITEM_HEIGHT_PX","onKeyDown","placeholder","withAbsolutePositioning","maxHeight","Loading","topicId","TopicIcon","letterClassName","itemSelector","listIds","orderedPinnedIds","activeListIds","archivedListIds","archived","pinnedIds","RecipientPicker","API_CHAT_TYPES","onSelectRecipient","isForwarding","setSearch","priorityIds","hasAdminRights","getHasAdminRight","isDeletedUser","selectIsMonoforumAdmin","chatFullInfo","selectChatFullInfo","sorted","sortChatIds","filterChatIdsByType","renderingIds","isManyMessages","isStory","ForwardRecipientPicker","openChatOrTopicWithReplyInDraft","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","forwardStory","renderingIsStory","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","toChatId","getUserFirstOrLastName","getChatTitle","DraftRecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","AttachBotRecipientPicker","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","Dialogs","dismissDialog","sendMessage","isModalOpen","dialog","contactRequest","handleConfirm","contact","messageList","getReadableErrorText","pick","Notifications","notifications","notification","Notification","localId","SafeLinkModal","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","withMarkdown","OpenMapModal","closeMapModal","point","geoPoint","googleUrl","bingUrl","appleUrl","osmUrl","google","prepareMapUrl","bing","osm","handleGoogleClick","handleBingClick","handleAppleClick","handleOsmClick","IS_MAC_OS","currentUser","UrlAuthModal","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","isWriteAllowed","handleLoginChecked","Checkbox","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","padStart","formatDay","CalendarModal","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onDateChange","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","handleDateSelect","inputMode","historyCalendarSelectedAt","HistoryCalendar","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","phoneCodeList","countryList","phoneCodes","NewContactModal","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","ResizeHandleType","resizeHandleSelectorsMap","Top","Bottom","Left","Right","topLeft","TopLeft","topRight","TopRight","bottomLeft","BottomLeft","bottomRight","BottomRight","resizeHandleSelectors","resizeTimeout","FULLSCREEN_POSITION","webApps","selectActiveWebApp","modalState","openedWebApps","isMinimizedState","activeTabBot","MinimizedWebAppModal","changeWebAppModalState","closeWebAppModal","openedWebAppsValues","openedTabsCount","activeTabBotId","app","handleCloseClick","handleExpandClick","state","activeTabName","botName","pluralValue","renderTitle","isPopularApp","requestMainWebView","theme","extractCurrentThemeParams","activeUserCount","botActiveUsers","badgeText","formatIntegerCompact","PeerBadge","avatarContainer","textClassName","badgeClassName","userCountBadge","badgeIconClassName","userBadgeIcon","badgeIcon","runThrottled","cb","globalSearch","popularBotApps","fetchingStatus","botApps","recentBotIds","topBotApps","MoreAppsTabContent","shouldShowMoreMine","setShouldShowMoreMine","searchPopularBotApps","handleToggleShowMoreMine","prev","filteredFoundIds","LoadMoreDirection","Backwards","handleSearchInputReset","noFastList","preloadBackwards","onReset","sectionTitle","showMoreLink","sectionContent","WebAppGridItem","FULLSCREEN_BUTTONS_AREA_HEIGHT","MAIN_BUTTON_ANIMATION_TIME","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","activeWebApp","activeWebAppKey","selectWebApp","activeBotId","attachBot","attachMenu","bots","botAppSettings","botInfo","appSettings","selectTheme","isPaymentModalOpen","regularPaymentStatus","payment","starsPaymentStatus","inputInvoice","starsInputInvoice","starsPayment","botAppPermissions","selectBotAppPermissions","paymentStatus","WebAppModalTabContent","webApp","registerSendEventCallback","registerReloadFrameCallback","isTransforming","isMultiTabSupported","onContextMenuButtonClick","modalHeight","closeActiveWebApp","sendWebViewData","toggleAttachBot","openTelegramLink","setWebAppPaymentSlug","switchBotInline","sharePhoneWithBot","updateWebApp","resetPaymentStatus","openChatWithInfo","openEmojiStatusAccessModal","openLocationAccessModal","openPreparedInlineMessageModal","mainButton","setMainButton","secondaryButton","setSecondaryButton","markLoaded","markUnloaded","popupParameters","setPopupParameters","isRequestingPhone","setIsRequestingPhone","isRequestingWriteAccess","setIsRequestingWriteAccess","requestedFileDownload","setRequestedFileDownload","bottomBarColor","setBottomBarColor","unlockPopupsAt","handlePopupOpened","handlePopupClosed","setUnlockPopupsAt","sequentialCalls","lastClosedDate","usePopupLimit","headerButtonRef","headerButtonCaptionRef","exitFullScreenCallback","fullscreenElementRef","appName","activeWebAppName","backgroundColor","isBackButtonVisible","placeholderPath","isCloseModalOpen","isRemoveModalOpen","webAppKey","getWebAppKey","isAvailable","IS_GEOLOCATION_SUPPORTED","isAccessRequested","geolocation","isAccessGranted","updateCurrentWebApp","updatedPartialWebApp","update","themeParams","secondary_bg_color","themeBackgroundColor","bg_color","backgroundColorFromEvent","setBackgroundColorFromEvent","backgroundColorFromSettings","backgroundDarkColor","themeHeaderColor","headerColorFromEvent","setHeaderColorFromEvent","headerColorFromSettings","headerColor","headerDarkColor","frameRef","isSimple","reloadFrame","sendEvent","sendFullScreenChanged","sendViewport","sendSafeArea","sendTheme","useWebAppFrame","isSimpleView","onEvent","openInvoice","closeWebApp","openSuggestedStatusModal","updateContentSettings","isReloadSupported","reloadTimeout","ignoreEventsRef","lastFrameSizeRef","handleLoad","contentWindow","JSON","stringify","eventType","eventData","is_fullscreen","forceReloadFrame","once","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","skipClosingConfirmation","scrollbarColor","reload_supported","req_id","slug","linkUrl","available","custom_emoji_id","BigInt","customEmojiId","passed","minAge","verifyAgeMin","VERIFY_AGE_MIN_DEFAULT","ageFromParam","age","isSensitiveEnabled","plannedEvents","getIsWebAppsFullscreenSupported","exitIfFullscreenCallback","TME_LINK_PREFIX","path_full","shouldIgnoreCache","force_request","is_visible","isSettingsButtonVisible","validateHexColor","color_key","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","shouldConfirmClosing","buttons","handleAppPopupClose","chat_types","convertToApiChatType","isSamePeer","handleRejectPhone","handleRejectWriteAccess","handleRequestWriteAccess","method","requestId","parameters","customMethod","handleInvokeCustomMethod","handleRejectFileDownload","fileUrl","handleCheckDownloadFile","file_name","access_requested","access_granted","geolocationData","getGeolocationStatus","accessRequested","accessGranted","latitude","longitude","altitude","course","heading","speed","horizontal_accuracy","accuracy","vertical_accuracy","altitudeAccuracy","handleRequestLocation","isMainButtonVisible","isSecondaryButtonVisible","handleHideCloseModal","handleConfirmCloseModal","handleHideRemoveModal","handleMainButtonClick","handleSecondaryButtonClick","buttonId","button_id","handleAppPopupModalClose","sendThemeCallback","setFullscreenCallback","checkIfFullscreen","sendFullScreenChangedCallback","visibilityChangedCallBack","prevModalState","prevIsPaymentModalOpen","handleRemoveAttachBot","isEnabled","handleAcceptPhone","shouldCloseActive","handleAcceptWriteAccess","handleDownloadFile","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","secondaryButtonCurrentPosition","secondaryButtonCurrentColor","secondaryButtonCurrentTextColor","secondaryButtonCurrentIsActive","secondaryButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideMainButton","setShouldHideMainButton","shouldHideSecondaryButton","setShouldHideSecondaryButton","shouldShowMainButton","setShouldShowMainButton","shouldShowSecondaryButton","setShouldShowSecondaryButton","shouldShowAppNameInFullscreen","setShouldShowAppNameInFullscreen","backButtonTextWidth","setBackButtonTextWidth","isVerticalLayout","rowsCount","hideDirection","mainButtonChangeTimeout","mainButtonFastTimeout","secondaryButtonChangeTimeout","secondaryButtonFastTimeout","appNameDisplayTimeout","frameStyle","handleBackClick","handleCollapseClick","handleShowContextMenu","backIconClass","backButtonCaption","hasHeaderElement","viewBox","renderDefaultPlaceholder","sandbox","allow","allowFullScreen","hasCloseButton","filename","MINIMIZED_STATE_SIZE","DEFAULT_MAXIMIZED_STATE_SIZE","MAXIMIZED_STATE_MINIMUM_SIZE","miniAppsCachedPosition","miniAppsCachedSize","selectSharedSettings","cachedPosition","cachedSize","WebAppModal","prolongWebView","openWebAppTab","openMoreAppsTab","closeMoreAppsTab","updateMiniAppCachedPosition","updateMiniAppCachedSize","getMaximizedStateSize","setMaximizedStateSize","getSize","openedOrderedKeys","sessionKeys","isMoreAppsTabActive","tabs","isMaximizedState","isFullScreen","supportMultiTabMode","menuRef","getTriggerElement","getRootElement","getMenuElement","isContextMenuOpen","contextMenuAnchor","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isDraggingEnabled","setIsDraggingEnabled","headerElement","containerElement","isDragging","draggableStyle","dragHandleElementRef","isDragEnabled","originalSize","minimumSize","elementCurrentPosition","setElementCurrentPosition","elementCurrentSize","setElementCurrentSize","getElementPositionOnStartTransform","setElementPositionOnStartTransform","getElementSizeOnStartTransform","setElementSizeOnStartTransform","getTransformStartPoint","setTransformStartPoint","elementPositionOnStartTransform","transformStartPoint","dragHandleElement","isInitiated","setIsInitiated","wasElementShown","setWasElementShown","startDragging","stopDragging","startResizing","stopResizing","isWindowsResizing","startWindowResizing","stopWindowResizing","hitResizeHandle","setHitResizeHandle","getVisibleArea","innerWidth","innerHeight","updateCurrentPosition","getActualPosition","getCenteredPosition","visibleArea","centeredPosition","handleStartDrag","MouseEvent","handleStartResize","targetElement","resizeHandle","RESIZE_HANDLE_SELECTOR","getResizeHandleFromTarget","handleDragRelease","handleResizeRelease","ensurePositionInVisibleArea","visibleAreaWidth","visibleAreaHeight","componentWidth","componentHeight","newX","newY","adjustPositionWithinBounds","newPosition","ensureSizeInVisibleArea","sizeForCheck","newSize","originalWidth","originalHeight","adjustSizeWithinBounds","handleWindowResize","handleDrag","sizeOnStartTransform","pageVisibleX","pageVisibleY","maxX","maxY","newBounds","cleanups","resizeHandler","cursorStyle","actualPosition","useDraggable","getMinimumSize","currentSize","currentWidth","currentHeight","queryId","openTabsCount","useInterval","replyInfo","sendEventCallback","reloadFrameCallback","callback","handleSettingsButtonClick","handleRefreshClick","handleModalClose","handleCloseMoreAppsTab","handleTabClose","handleToggleClick","handleFullscreenClick","handleOpenMoreAppsTabClick","handleTabClick","tab","openBotChat","renderMenuItems","isAttachBot","renderMoreMenu","anchor","backButtonClassName","headerTextVar","r","g","hexToRgb","luma","getColorLuma","renderTabCurveBorder","fill","buildResizeHandleClass","handleClassName","RESIZE_HANDLE_CLASS_NAME","useHorizontalScroll","dialogRef","dialogStyle","dialogContent","shortName","renderActiveTab","noBackdropClose","BotTrustModal","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","handleBotTrustAccept","handleBotTrustDecline","AttachBotInstallModal","confirmAttachBotInstall","cancelAttachBotInstall","isTosAccepted","setIsTosAccepted","tosLabel","split","linkText","MINI_APP_TOS_URL","rel","isConfirmDisabled","DeleteFolderDialog","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","COLORS","PremiumFeatureItem","isFontIcon","newIndex","colorA","colorB","ceil","lerpRgb","buttonClassName","fontIcon","SliderDots","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","isLast","isPreLast","isFirst","isPreFirst","isInvisible","PremiumLimitsCompare","leftValue","rightValue","floatingBadgeIcon","rightStyle","COLOR_START","COLOR_END","PremiumLimitPreview","colorStepProgress","lerp","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","play","isLowPriority","stickers","premium","PremiumFeaturePreviewStickers","setOffset","setSize","renderedStickers","cycleRestrict","STORY_FEATURE_TITLES","stories_order","stories_stealth","stories_views","stories_timer","stories_save","stories_caption","stories_link","STORY_FEATURE_DESCRIPTIONS","STORY_FEATURE_ICONS","STORY_FEATURE_ORDER","CIRCLE_SIZE","AVATAR_SIZES","giant","PremiumFeaturePreviewVideo","circleRef","dpr","useDevicePixelRatio","drawGradientCircle","segmentsCount","readSegmentsCount","readSegmentColor","maxSize","forPremiumPromo","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","wrapper","reverse","down","DeviceFrame","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","translations","saved_tags","last_seen","message_privacy","effects","todo","PREMIUM_FEATURE_DESCRIPTIONS","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","recommendedChannels","moreAccounts","LIMITS_DESCRIPTIONS","PremiumFeatureModal","promo","isPremium","limits","premiumPromoOrder","subscriptionOption","onClickSubscribe","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","PREMIUM_FEATURE_SECTIONS","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","filteredSections","subscriptionButtonText","months","currency","perMonthPrice","price","formatCurrency","handleLimitsScroll","scrollContainer","animateHorizontalScroll","then","handleSelectSlide","currentSection","hasHeaderBackdrop","scrollLeft","scrollLeftOriginal","reverseIndex","prevElement","reverseElement","toString","toggleExtraClass","PREMIUM_LIMITS_ORDER","defaultLimit","premiumLimit","PremiumFeaturePreviewStories","videoSections","shouldUseNewLang","videos","PREMIUM_BOTTOM_VIDEOS","renderTextFilters","PremiumSubscriptionOption","fullMonthlyAmount","isGiveaway","perMonth","isUserCountPlural","discount","handleChange","formatCurrencyAsString","STATUS_EMOJI_SIZE","PREMIUM_FEATURE_COLOR_ICONS","PremiumStatus","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumTranslate","PremiumTags","PremiumLastSeen","PremiumMessagePrivacy","PremiumEffects","fromUser","fromUserId","fromUserStatusEmoji","emojiStatus","customEmojis","documentId","fromUserStatusSet","selectStickerSet","stickerSetInfo","isSuccess","isGift","monthsAmount","gift","toUser","toUserId","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","premiumSlug","premiumInvoiceSlug","premiumBotUsername","PremiumMainModal","closePremiumModal","requestConfetti","loadStickers","openStickerSet","isHeaderHidden","setHeaderHidden","setCurrentSection","selectedSubscriptionOption","setSubscriptionOption","handleOpenSection","handleResetSection","handleClickWithStartParam","handleChangeSubscriptionOption","foundOption","showConfetti","withStars","prevIsPremium","defaultOption","handleOpenStatusSet","monthOption","subscribeButtonText","giftSticker","getStickerFromGift","ParticlesHeader","model","getHeaderText","getHeaderDescription","CustomEmoji","renderHeader","statusText","entities","statusEntities","renderFooterText","template","first","second","emoji","thumbCustomEmojiId","link","perUserTotal","ItemPicker","notFoundText","noScrollRestore","isViewOnly","itemClassName","forceRenderAllItems","onDisabledClick","optionalProps","lockedSelectedValues","lockedUnselectedValues","timeoutId","selectedValues","selectedValue","lockedSelectedValuesSet","Set","lockedUnselectedValuesSet","sortedItemValuesList","lockedSelectedBucket","unlockedBucket","lockedUnselectableBucket","has","concat","handleItemClick","newSelectedValues","splice","onSelectedValuesChange","onSelectedValueChange","viewportValuesList","handleFilterChange","renderItem","itemOption","subLabel","isItemLoading","isAlwaysUnselected","isAlwaysSelected","isLocked","isChecked","inputElement","Radio","onlyInput","pickerList","padded","noResults","CountryPickerModal","selectionLimit","selectedCountryIds","setSelectedCountryIds","noPickerScrollRestore","country","iso2","defaultName","handleSelectedIdsChange","newSelectedIds","pickerSelector","pickerTitle","main","picker","GiveawayChannelPickerModal","giveawayChatId","initialSelectedIds","onSelectedIdsConfirmed","pendingChannelId","setPendingChannelId","isConfirmModalOpen","openConfirmModal","closeConfirmModal","setSelectedIds","channelIds","isChatSuperGroup","displayedChannelIds","foundChannelIds","handleSelectedChannelIdsChange","privateLinkChannelId","isChatPublic","confirmPrivateLinkChannelSelection","handleModalConfirm","PickerModal","shouldAdaptToSearch","withFixedHeight","confirmButtonText","GiveawayTypeOption","isLink","onClickAction","userNames","selectedMemberIds","displayText","members","adminMembersById","GiveawayUserPickerModal","memberIds","statusesById","adminIdsSet","sortUserIds","displayedMemberIds","filteredUserIds","isUserBot","handleSelectedMemberIdsChange","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","giveawayModal","gifts","selectedMemberList","selectedChannelList","selectedChannelIds","giveawayBoostPerPremiumLimit","giveawayBoostsPerPremium","isStarsGiftEnabled","userSelectionLimit","giveawayAddPeersMax","countrySelectionLimit","giveawayCountriesMax","general","prepaidGiveaway","starsGiftOptions","starOptions","GiveawayModal","GIVEAWAY_BOOST_PER_PREMIUM","GIVEAWAY_MAX_ADDITIONAL_COUNTRIES","GIVEAWAY_MAX_ADDITIONAL_USERS","closeGiveawayModal","launchPrepaidGiveaway","launchPrepaidStarsGiveaway","isCalendarOpened","openCalendar","closeCalendar","isCountryPickerModalOpen","openCountryPickerModal","closeCountryPickerModal","isUserPickerModalOpen","openUserPickerModal","closeUserPickerModal","isChannelPickerModalOpen","openChannelPickerModal","closeChannelPickerModal","TYPE_OPTIONS","GiftStar","customExpireDate","setCustomExpireDate","selectedRandomUserCount","setSelectedRandomUserCount","selectedGiveawayOption","setGiveawayOption","selectedStarOption","setSelectedStarOption","selectedSubscriberOption","setSelectedSubscriberOption","selectedMonthOption","setSelectedMonthOption","selectedUserIds","setSelectedUserIds","setSelectedChannelIds","shouldShowWinners","setShouldShowWinners","shouldShowPrizes","setShouldShowPrizes","prizeDescription","setPrizeDescription","dataPrepaidGiveaway","setDataPrepaidGiveaway","dataStarsPrepaidGiveaway","setDataStarsPrepaidGiveaway","isPremiumGiveaway","isStarsGiveaway","selectedUserCount","boostQuantity","boostStarsQuantity","yearlyBoosts","SUBSCRIBER_OPTIONS","monthQuantity","isStarsPrepaidGiveaway","isPremiumPrepaidGiveaway","selectedGift","selectedStarsGift","stars","filteredGifts","STARS_CURRENCY_CODE","basicGift","userCountOptions","winner","winnerCountOptions","winners","quantity","handlePremiumClick","boostChannelId","additionalChannelIds","isOnlyForNewSubscribers","countries","areWinnersVisible","untilDate","confirmLaunchPrepaidGiveaway","giveawayId","paymentPurpose","handleRandomUserCountChange","newValue","handleWinnerCountChange","handlePrizeDescriptionChange","handleChangeSubscriberOption","handleChangeTypeOption","handleExpireDateChange","handleSetCountriesListChange","handleSelectedUserIdsChange","handleShouldShowWinnersChange","handleShouldShowPrizesChange","onClickActionHandler","handleStarClick","renderGiveawayOptionList","filteredChannelIds","deleteParticipantsHandler","iconClassName","subLabelClassName","formatDateTimeToString","PremiumLogo","boosts","RangeSliderWithMarks","rangeCount","marks","StarTopupOptionList","selectedStarCount","match","Link","isPrimary","renderPremiumFeaturesLink","GIVEAWAY_MAX_ADDITIONAL_CHANNELS","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","savedDialogsPinned","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","PremiumLimitReachedModal","closeLimitReachedModal","isClosing","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SLIDE_TRANSITION_DURATION","FOCUS_MARGIN","useStickerPickerObservers","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","stickerSetEl","isClose","animateScroll","maxDistance","StickerSetCover","stickerSet","STICKER_SIZE_PICKER_HEADER","observeIntersection","sharedCanvasRef","hasThumbnail","hasVideoThumb","hasAnimatedThumb","hasStaticThumb","customEmoji","useCustomEmoji","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","colorFilter","useColorFilter","useIsIntersecting","shouldPlay","shouldFallbackToSticker","IS_WEBM_SUPPORTED","firstStickerHash","getStickerMediaHash","firstStickerMediaData","mediaHash","coords","useCoordsInSharedCanvas","observeIntersectionForPlaying","selectIsAlwaysHighPriorityEmoji","sharedCanvas","sharedCanvasCoords","forceAlways","getFirstLetters","contentForStatusMenuContext","arg","StickerButton","noContextMenu","isStatusPicker","canViewSet","observeIntersectionForShowing","isSelected","shouldIgnorePremium","noShowPremium","withTranslucentThumb","clickArg","onFaveClick","onUnfaveClick","onRemoveRecentClick","onContextMenuOpen","onContextMenuClose","onContextMenuClick","isEffectEmoji","withSparkles","setEmojiStatus","isFree","hasEffect","isCustomEmoji","shouldLoad","isIntesectingForShowing","handleBeforeContextMenu","shouldRenderContextMenu","getLayout","withPortal","shouldAvoidNegativePosition","handleRemoveClick","handleContextRemoveRecent","handleContextUnfave","handleContextFave","handleSendQuiet","handleSendScheduled","handleOpenSet","handleEmojiStatusExpiresClick","until","shouldShowCloseButton","contextMenuItems","preventMessageInputBlurWithBubbling","Sparkles","preset","StickerView","isSmall","shouldLoop","shouldPreloadPreview","noLoad","noVideoOnMobile","withSharedAnimation","noFastClick","ReactionEmoji","loadAndPlay","sharedCanvasHqRef","isCustom","availableReaction","staticIcon","animationId","selectAnimation","getDocumentMediaHash","StarReaction","EMOJI_SIZE_PICKER","AnimatedIconWithPreview","collectibleStatuses","collectibleEmojiStatuses","statuses","StickerSet","isNearActive","favoriteStickers","isReactionPicker","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isChatEmojiSet","isChatStickerSet","isTranslucent","noContextMenus","onReactionSelect","onReactionContext","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isStatusCollectible","COLLECTIBLE_STATUS_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","accessHash","isInstalled","installedDate","isArchived","canCut","EFFECT_EMOJIS_SET_ID","EFFECT_STICKERS_SET_ID","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","collectibleEmojiIdsSet","withAddSetButton","addSetButtonText","pill","grey","reactionId","isHqEmoji","canvasRef","HEADER_BUTTON_WIDTH","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","setsById","stickerSetsById","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","defaultTags","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","chatEmojiSetId","emojiSet","isWithPaidReaction","isPaidReactionAvailable","defaultTagReactions","CustomEmojiPicker","pickerListClassName","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","collectibleStatusEmojis","collectibleStatusEmojiIds","prefix","canLoadAndPlay","areAddedLoaded","allSets","defaultSets","TOP_SYMBOL_SET_ID","topReactionsSlice","unshift","cleanRecentReactions","some","topReaction","cleanAvailableReactions","isInactive","allRecentReactions","defaultStatusIconsPack","uniqueByField","defaultTopicIconsPack","userSetIds","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","newLeft","handleEmojiSelect","headerClassName","pickerStyles","listClassName","shouldCleanup","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","StatusPickerMenu","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CUSTOM_EMOJI_SIZE","SuggestedStatusModal","closeSuggestedStatusModal","sendWebAppEvent","renderingModal","mockPeerWithStatus","formatShortDuration","handleSetStatus","expires","referrerWebAppKey","hasAbsoluteCloseButton","loopLimit","PeerChip","mockPeer","withEmojiStatus","getFirstAvailableBoost","myBoosts","boost","firstBoost","prevBoostedChat","BoostModal","applyBoost","closeBoostModal","loadFullChat","isReplaceModalOpen","openReplaceModal","closeReplaceModal","isWaitDialogOpen","openWaitDialog","closeWaitDialog","isPremiumDialogOpen","openPremiumDialog","closePremiumDialog","chatTitle","boostedChatTitle","isStatusLoaded","isBoosted","leftText","rightText","descriptionText","canBoostMore","boostStatus","hasMyBoost","areBoostsInDifferentChannels","every","currentLevel","hasNextLevel","levelProgress","remainingBoosts","isMaxLevel","getBoostProgressInfo","hasBoost","moreBoosts","modalTitle","boostsLeftToUnrestrict","boostsToUnrestrict","boostsApplied","boostTimes","isBoostDisabled","isReplacingBoost","handleApplyBoost","slots","slot","handleProceedPremium","handleButtonClick","PremiumProgress","floatingBadgeText","isOnlyConfirm","chatMessage","GiftCodeModal","closeGiftCodeModal","applyGiftCode","canUse","toId","usedAt","handleOpenGiveaway","giveawayMessageId","modalData","LinkField","tableData","isFromGiveaway","TableInfoModal","getClosestEntry","arr","curr","selfDestructAccountDays","DeleteAccountModal","closeDeleteAccountModal","setAccountTTL","selectedOption","setSelectedOption","optionToDays","initialSelectedOption","ACCOUNT_TTL_OPTIONS","days","onCloseHandler","withIcon","verifyAgeBotUsername","AgeVerificationModal","closeAgeVerificationModal","openChatByUsername","handleVerifyAge","shouldStartMainApp","username","iconWrapper","mainText","ChatlistAlready","invite","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","missingPeerIds","hasChatsToAdd","isNew","alreadyPeerIds","newChatsCount","noCustomEmojiPlayback","noTitleAnimations","handleSelectionToggle","areAllSelected","pickerWrapper","pickerHeader","pickerHeaderInfo","selectionToggle","Badge","buttonBadge","isAlternateColor","ChatlistDelete","suggestedPeerIds","leaveChatlist","ChatlistNew","joinedIds","isNotJoined","selectedCount","removal","selectChatFolder","ChatlistInviteModal","renderingInfo","renderingFolderTitle","folderTabNumber","renderContent","folderTitle","foldersWrapper","folders","Tab","badgeCount","isBadgeActive","ChatInviteModal","acceptChatInvite","closeChatInviteModal","participantsRef","prevModal","usePrevious","hash","inviteInfo","about","isBroadcast","participantIds","participantsCount","isRequestNeeded","handleAccept","acceptLangKey","requestToJoinLangKey","customPeer","getCustomPeerFromInvite","participants","withVideo","participantCount","participant","minLevelToRestrictAds","channelRestrictAdsLevelMin","AboutAdsModal","closeAboutAdsModal","moreMenuRef","canReport","additionalInfo","sponsorInfo","isMonetizationSharing","renderingIsNewDesign","regularAdContent","SafeLink","listItemData","TableAboutModal","headerIconName","withSeparator","SponsoredMessageContextMenuContainer","triggerRef","shouldSkipAbout","onItemClick","AboutMonetizationModal","blockchainText","monetizationTitle","specialReplacement","twoFaSettings","hint","passwordHint","VerificationMonetizationModal","closeMonetizationVerificationModal","clearMonetizationVerificationError","processMonetizationRevenueWithdrawalUrl","shouldShowPassword","setShouldShowPassword","password","currentPassword","handleClearError","PasswordForm","shouldShowSubmit","errorKey","withRegular","clearError","shouldResetValue","onChangePasswordVisibility","EmojiStatusAccessModal","closeEmojiStatusAccessModal","toggleUserEmojiStatusPermission","loadDefaultStatusIcons","currentStatusIndex","setCurrentStatusIndex","totalCount","prevIndex","renderPickerItem","chatItem","itemName","isBotAccessEmojiGranted","renderStatusText","LocationAccessModal","closeLocationAccessModal","toggleUserLocationPermission","renderInfo","ReportAdModal","reportSponsored","closeReportAdModal","openPreviousReportAdModal","transitionRef","handleOptionClick","renderingSection","renderingDepth","sectionDepth","sections","bottomText","hasSubtitle","ACTIVE_SLIDE_CLASS_NAME","handleAnimationStart","TO_SLIDE_CLASS_NAME","narrow","secondaryIcon","ReportModal","reportMessages","closeReportModal","openPreviousReportModal","setText","subject","handleTextChange","closeReportMessageModalHandler","sendMessageReportHandler","Report","TextArea","isOptional","maxLengthIndicator","noReplaceNewlines","isBlurred","isBackgroundBlurred","patternColor","background","customBackground","selectThemeValues","PreparedMessageModal","closePreparedInlineMessageModal","openSharePreparedMessageModal","customBackgroundValue","useCustomBackground","handleOpenClick","localMessage","getMockPreparedMessageFromResult","bgClassName","inert","Message","noComments","noReplies","appearanceOrder","isJustAdded","isFirstInGroup","isLastInGroup","isLastInList","isFirstInDocumentGroup","isLastInDocumentGroup","starsBalance","balance","isStarsBalanceModalOpen","starsBalanceModal","SharePreparedMessageModal","closeSharePreparedMessageModal","sendInlineBotResult","updateSharePreparedMessageModalSendArgs","pendingSendArgs","starsForSendMessage","closeConfirmDialog","closeConfirmModalPayForMessage","dialogHandler","paymentMessageConfirmDialogHandler","shouldAutoApprove","shouldPaidMessageAutoApprove","setAutoApprove","setShouldPaidMessageAutoApprove","handleWithConfirmation","handleActionWithPaymentConfirmation","usePaidMessageConfirmation","handleSend","handleSendWithPaymentConfirmation","handleClosePaymentMessageConfirmDialog","peerName","PaymentMessageConfirmDialog","userName","messagePriceInStars","messagesCount","starBalance","currentDraft","selectDraft","maxStarsAmount","starsSuggestedPostAmountMax","STARS_SUGGESTED_POST_AMOUNT_MAX","minStarsAmount","starsSuggestedPostAmountMin","STARS_SUGGESTED_POST_AMOUNT_MIN","ageMinSeconds","starsSuggestedPostAgeMin","STARS_SUGGESTED_POST_AGE_MIN","futureMin","starsSuggestedPostFutureMin","STARS_SUGGESTED_POST_FUTURE_MIN","futureMax","starsSuggestedPostFutureMax","STARS_SUGGESTED_POST_FUTURE_MAX","tonMaxAmount","tonSuggestedPostAmountMax","TON_SUGGESTED_POST_AMOUNT_MAX","tonMinAmount","tonSuggestedPostAmountMin","TON_SUGGESTED_POST_AMOUNT_MIN","isMonoforumAdmin","tonBalance","ton","SuggestMessageModal","closeSuggestMessageModal","updateDraftSuggestedPostInfo","openStarsBalanceModal","currentSuggestedPostInfo","suggestedPostInfo","currentReplyInfo","isInSuggestChangesMode","currencyAmount","setCurrencyAmount","selectedCurrency","setSelectedCurrency","scheduleDate","setScheduleDate","TON_CURRENCY_CODE","convertTonFromNanos","isCurrencyStars","defaultSelectedTime","handleAmountChange","number","isNaN","currentMaxAmount","handleAnytimeClick","currentMinAmount","handleOffer","neededAmount","convertTonToNanos","topup","balanceNeeded","nanos","modalHeader","form","currencySelector","currencyButton","currencyIcon","formatStarsAsText","formatTonAsText","formatScheduledDateTime","autoComplete","readOnly","timeInputIcon","offerButton","formatTonAsIcon","isAdmin","commissionPermille","starsSuggestedPostCommissionPermille","STARS_SUGGESTED_POST_COMMISSION_PERMILLE","tonCommissionPermille","tonSuggestedPostCommissionPermille","TON_SUGGESTED_POST_COMMISSION_PERMILLE","SuggestedPostApprovalModal","closeSuggestedPostApprovalModal","approveSuggestedPost","selectedScheduleDate","setSelectedScheduleDate","handleApprove","handleCalendarDateChange","handleCalendarSubmit","handlePublishNow","handleNext","senderName","getPeerFullTitle","question","questionText","commission","amountWithCommission","formattedAmount","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","setIsLoading","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","sendGifs","checkMedia","mediaPermissions","v","sendMedia","assign","embedLinks","sendPlain","sendMessages","resetPermissions","permissionKeyList","fullInfo","hasLinkedChat","linkedChatId","PermissionCheckboxList","isMediaDropdownOpen","setIsMediaDropdownOpen","shiftedClassName","dropdownClassName","withCheckbox","getControlIsDisabled","permissionGroup","shouldDisablePermissionForPublicGroup","countCheckedPermissions","handleOpenMediaDropdown","handleDisabledClick","blocking","labelText","rightIcon","onClickLabel","sendPhotos","sendVideos","sendStickers","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","deleteMessageModal","canDeleteForAll","selectCanDeleteSelectedMessages","isSuperGroup","contactName","getPrivateChatUserId","chatBot","isSystemBot","selectBot","canBanUsers","isCreator","isChatWithBot","selectIsChatWithBot","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","DeleteMessageModal","closeDeleteMessageModal","deleteMessages","reportChannelSpam","deleteChatMember","deleteScheduledMessages","exitMessageSelectMode","updateChatMemberBannedRights","deleteParticipantHistory","defaultBannedRights","peerIdsToDeleteAll","setPeerIdsToDeleteAll","peerIdsToBan","setPeerIdsToBan","peerIdsToReportSpam","setPeerIdsToReportSpam","isAdditionalOptionsVisible","setIsAdditionalOptionsVisible","shouldDeleteForAll","setShouldDeleteForAll","peerList","senderArray","getSendersFromSelectedMessages","linkedMonoforumId","buildNestedOptionListWithAvatars","member","peerListToDeleteAll","peerListToReportSpam","peerListToBan","isCurrentUserInList","shouldShowOption","peerNames","buildCollectionByCallback","ACTION_SPAM_OPTION","nestedOptions","opt","ACTION_DELETE_OPTION","ACTION_BAN_OPTION","toggleAdditionalOptions","filterMessageIdByPeerId","selectedMessageIdList","msgId","selectSenderFromMessage","handleReportSpam","userMessagesMap","messageIdList","participantId","handleDeleteMessages","filteredMessageIdList","handleDeleteAllPeerMessages","peerIdList","handleDeleteMember","filteredUserIdList","handleUpdateChatMemberBannedRights","bannedRights","handleDeleteMessageList","CheckboxGroup","nestedCheckbox","isPrivateChat","canPinForAll","PinMessageModal","pinMessage","shouldPinForAll","setShouldPinForAll","handlePinMessage","isUnpin","isOneSide","isSilent","UnpinAllMessagesModal","pinnedMessagesCount","onUnpin","shouldWarnAboutSvg","selectCanReportSelectedMessages","selectCanDownloadSelectedMessages","selectedMessageIds","selectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectCanForwardMessages","hasSvgs","selectHasSvg","isShareMessageModalOpen","isShareMessageModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","MessageSelectToolbar","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","setSharedSettingOption","handleCopy","useHotkeys","useCopySelectedMessages","isSvgDialogOpen","openSvgDialog","closeSvgDialog","shouldNotWarnAboutSvg","setShouldNotWarnAboutSvg","handleExitMessageSelectMode","handleDelete","onBackspace","onEsc","handleMessageDownload","handleSvgConfirm","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","seenByDates","closeSeenByModal","renderingSeenByDates","leftId","rightId","handleCloseSeenByModal","CLOSE_ANIMATION_DURATION","isReadDate","privacySettingsNoticeModal","PrivacySettingsNoticeModal","updateGlobalPrivacySettings","closePrivacySettingsNoticeModal","setPrivacyVisibility","loadUser","handleShowReadTime","shouldHideReadMarks","handleShowLastSeen","privacyKey","onSuccess","handleOpenPremium","ReadTime","LastSeen","Separator","reactorModal","reactors","ReactorListModal","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","allReactions","uniqueReactions","seenByUserIds","flatMap","peerReactions","reactor","seenByUser","addedDate","avatarSize","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","EmojiInteractionAnimation","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","endHeavyAnimation","effectHash","effectTgsUrl","startSize","isReversed","quality","chatLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","ChatLanguageModal","requestMessageTranslation","closeChatLanguageModal","setSettingOption","requestChatTranslation","handleSelect","langCode","toLanguageCode","translationLanguage","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","highlight","CollectibleInfoModal","closeCollectibleInfoModal","isUsername","handleOpenUrl","shouldSkipModal","formatUsername","collectible","copyTextToClipboard","formattedCollectible","purchaseDate","cryptoCurrency","cryptoAmount","Mention","Fragment","chip","createMapStateToProps","props","currentType","isVoice","byChatId","globalMessagesByChatId","messages","searchChatId","AudioResults","searchMessagesGlobal","openAudioPlayer","foundMessages","parseSearchResultKey","handleMessageFocus","handlePlayAudio","canRenderContents","NothingFound","withSticker","shouldDrawDateDivider","toYearMonth","selectMessageDownloadableMedia","formatMonthAndYear","Audio","AudioOrigin","Search","getSenderName","onDateClick","buttonRef","activeElement","selectIsChatPinned","getIsChatMuted","selectNotifyDefaults","selectNotifyException","canChangeFolder","chatFolders","LeftSearchResultChat","withUsername","withOpenAppButton","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","handleChatFolderChange","handleMute","useChatContextActions","handleOpenApp","useSelectWithEnter","storyViewerOrigin","hasMainMiniApp","MuteChatModal","ChatFolderModal","BotAppResults","recentSet","withoutRecent","handleChatClick","shouldReplaceHistory","renderSummary","isRoundVideo","renderMessageSummary","isSpoiler","getMessageIsSpoiler","getMessageVideo","privateChatUserId","privateChatUser","ChatMessage","useThumbnail","mediaThumbnail","getMessageSticker","useMessageMediaHash","mediaBlobUrl","getMessageRoundVideo","formatPastTimeShort","DateSuggest","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","selectTopic","LeftSearchResultTopic","foundTopicIds","ChatMessageResults","dateSearchQuery","onSearchDateSelect","openThread","handleTopicClick","nothingFound","LeftSearchResultSponsored","sponsoredPeer","viewSponsored","useOnIntersect","intersectionRatio","handleBadgeClick","handleBadgeMouseDown","BadgeButton","topUserIds","topPeers","recentlyFoundChatIds","RecentContacts","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","handleClearRecentlyFoundChats","isChannelList","globalResults","localResults","globalPeerIds","accountPeerIds","similarChannelIds","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","suggestedChannelIds","ChatResults","setGlobalSearchChatId","loadChannelRecommendations","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","searchContext","setSearchContext","context","handlePickerItemClick","getSearchContextCaption","handleClickContext","itemPlaceholderClass","startsWith","filteredChatIds","getOrderedIds","ALL_FOLDER_ID","localChatIds","contactIdsWithMe","localPeerIds","filteredIds","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","handleClickShowMoreLocal","handleClickShowMoreGlobal","actualFoundIds","isMessagesFetching","shouldRenderTopPeers","shouldRenderMessagesSection","noScrollRestoreOnTop","customIcon","CURRENT_TYPE","FileResults","observeIntersectionForMedia","getMessageDocument","Document","withDate","datetime","smaller","LinkResults","WebLink","onMessageClick","MediaResults","handleSelectMedia","isMediaGrid","isMessageList","Media","PublicPostsSearchLauncher","searchFlood","onSearch","queryIsFree","queryFromFlood","searchButtonActiveKey","useTransitionActiveKey","trimEnd","handleSearchClick","handlePaidSearchClick","starsAmount","checkSearchPostsFlood","onCheckFlood","handleSubscribePremiumClick","shouldRenderPaidScreen","remains","waitTill","loadingScreen","renderLimitReached","PUBLIC_POSTS_SEARCH_DEFAULT_STARS_AMOUNT","totalDaily","PUBLIC_POSTS_SEARCH_DEFAULT_TOTAL_DAILY","previewUrl","LOCAL_TGS_PREVIEW_URLS","limitTitle","limitDescription","paidSearchButton","noForcedUpperCase","freeSearchUnlock","renderSearchButton","remainingSearches","searchButton","searchButtonContent","searchIcon","searchIconWithNext","nextIcon","premiumTitle","premiumDescription","subscribePremiumButton","premiumSubtitle","publicPostsResult","publicPosts","shouldShowSearchLauncher","isNothingFound","animationLevel","PublicPostsResults","resolveTransitionName","TABS","GlobalSearchContent","ChannelList","BotApps","PublicPosts","Links","Files","Music","Voice","CHAT_TABS","currentContent","LeftSearch","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","handleSearchDateSelect","TabList","onSwitchTab","renderCount","INITIAL_STATE","email","twoFaReducer","payload","maxChats","selectCurrentLimit","SettingsFoldersChatFilters","mode","dispatch","onSaveFilter","openLimitReachedModal","chatFilter","selectedChatIds","selectedChatTypes","selectChatFilters","chatTypes","CUSTOM_PEER_INCLUDED_CHAT_TYPES","CUSTOM_PEER_EXCLUDED_CHAT_TYPES","isTouched","setIsTouched","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","shouldHideChatTypes","isChatList","chatIds","newFilter","includeFilters","includedChatIds","excludeFilters","excludedChatIds","handleSelectedChatTypesChange","newFilters","categories","selectedCategories","categoryPlaceholderKey","withPeerTypes","onSelectedCategoriesChange","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","chatListCount","el","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","maxChatLists","SettingsFoldersEdit","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","includedChatTypes","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","handleEditInviteClick","renderChats","visibleChatIds","leftChatsCount","clickHandler","chatType","typeKey","renderChatType","STICKER_SIZE_FOLDER_SETTINGS","FoldersNew","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","SettingsFoldersMain","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","sortChatFolders","setState","orderedFolderIds","dragOrderIds","draggedIndex","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","getFolderDescriptionText","handleCreateFolderFromRecommended","translation","handleDragEnd","canCreateNewFolder","FoldersAll","isBlocked","isDragged","draggedTop","Draggable","onDragEnd","knobStyle","isStatic","allowSelection","shareFolderScreen","SettingsShareChatlist","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","pinnedChatIds","unlockedIds","partition","selectCanInviteToChat","isFirstRenderRef","prevUrl","handleClickDisabled","chatsCount","AnimatedIcon","FoldersShare","withShare","onRevoke","lockedUnselectedIds","SettingsFolders","currentScreen","shownScreen","openShareChatFolderModal","editChatFolder","openSettingsScreen","handleReset","SettingsScreens","FoldersCreateFolder","FoldersEditFolder","FoldersEditFolderFromChatList","FoldersEditFolderInvites","FoldersIncludedChats","FoldersExcludedChats","screen","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","FoldersIncludedChatsFromChatList","handleAddExcludedChats","FoldersExcludedChatsFromChatList","handleShareFolder","noRequestNextScreen","handleOpenInvite","Folders","SettingsPasswordForm","shouldDisablePasswordManager","expectedPassword","validationError","setValidationError","newPassword","SettingsPasscodeCongratulations","fullReset","STICKER_SIZE_PASSCODE","Congratulations","SettingsPasscodeEnabled","Lock","lockPreviewUrl","PasscodeChangePasscodeCurrent","PasscodeTurnOff","SettingsPasscodeStart","passcode","SettingsPasscode","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","handleStartWizard","PasscodeNewPasscode","handleNewPassword","PasscodeNewPasscodeConfirm","handleNewPasswordConfirm","PasscodeCongratulations","handleChangePasswordCurrent","currentPasscode","decryptSession","PasscodeChangePasscodeNew","handleChangePasswordNew","PasscodeChangePasscodeConfirm","handleTurnOff","Privacy","PasscodeDisabled","SettingsPasscodeForm","PasscodeEnabled","DEFAULT_POINTS","getProgress","points","pointIndex","findIndex","prevPoint","nextPoint","pointValue","PaidMessageSlider","canChangeChargeForMessages","mainClassName","step","starsUsdWithdrawRateX1000","starsUsdWithdrawRate","configStarsPaidMessageCommissionPermille","starsPaidMessageCommissionPermille","starsPaidMessageAmountMax","DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES","isGroupChat","chargeForMessages","handleChargeForMessagesChange","handleUnlockWithPremium","MINIMUM_CHARGE_FOR_MESSAGES","percent","formatPercent","premiumSection","handleOpenPremiumModal","StarIcon","nonContactPeersPaidStars","selectNonContactPeersPaidStars","noPaidReactionsForUsersCount","noPaidMessages","shouldNewNonContactPeersRequirePremium","selectNewNoncontactPeersRequirePremium","shouldChargeForMessages","DEFAULT_CHARGE_FOR_MESSAGES","canLimitNewMessagesWithoutPremium","canChargeForMessages","starsPaidMessagesAvailable","canChangeForContactsAndPremium","setChargeForMessages","hasShownNotification","setHasShownNotification","prevSelectedValue","chatInvite","PrivacyGroupChats","actionText","phoneCall","PrivacyPhoneCall","PrivacyLockedOption","hidden","isCanCheckedInDisabled","privacyValue","updateGlobalPrivacySettingsWithDebounced","privacyDescription","PaidMessagePrice","itemSubtitle","PrivacyNoPaidMessages","renderSectionNoPaidMessagesForUsers","PremiumStatusItem","getSessionIcon","session","platform","device","deviceModel","systemVersion","getLocation","region","activeSessions","byHash","SettingsActiveSession","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","headerButton","iconDevice","dateActive","box","appVersion","ip","note","actionHeader","actionName","SettingsActiveSessions","orderedHashes","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","activeWebSessions","SettingsActiveWebsite","terminateWebAuthorization","renderingBot","browser","SettingsActiveWebsites","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","clearHelp","StickerSetCard","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","byKey","customEmojiSetIds","canPlayAnimatedEmojis","SettingsCustomEmoji","shouldSuggestCustomEmoji","stickerSettingsRef","handleStickerSetClick","handleSuggestCustomEmojiChange","customEmojiSets","SettingsDataStorage","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderContentSizeSlider","renderValue","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","doNotTranslate","SettingsDoNotTranslate","language","displayedOptions","setDisplayedOptions","displayedOptionList","currentLanguageOption","otherOptionList","prevLanguage","ManageUsernames","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","orderedUsernames","dragOrderUsernames","handleCopyUsername","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","usernameData","LINK_PREFIX_REGEX","runDebouncedForCheckUsername","UsernameInput","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","MIN_UPDATE_USERNAME_LENGTH","MAX_USERNAME_LENGTH","USERNAME_REGEX","test","handleUsernameChange","newUsername","isUsernameValid","success","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","getChatAvatarHash","currentBio","bio","SettingsEditProfile","loadCurrentUser","updateProfile","firstEditableUsername","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","InProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","Complete","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","renderPurchaseLink","shouldForceHttpTransport","shouldAllowHttpTransport","shouldCollectDebugLogs","shouldDebugExportedSenders","SettingsExperimental","requestWave","snapButtonRef","isSnapButtonAnimating","setIsSnapButtonAnimating","isAutoUpdateEnabled","setIsAutoUpdateEnabled","electron","getIsAutoUpdateEnabled","handleDownloadLog","file","File","getDebugLogs","DEBUG_LOG_FILENAME","URL","createObjectURL","handleIsAutoUpdateEnabledChange","handleRequestWave","startX","startY","handleRequestConfetti","handleSnap","animateSnap","Experimental","IS_WAVE_TRANSFORM_SUPPORTED","IS_SNAP_EFFECT_SUPPORTED","IS_ELECTRON","shouldUseSystemTheme","messageSendKeyCombo","messageTextSize","timeFormat","SettingsGeneral","isMobileDevice","timeFormatOptions","appearanceThemeOptions","keyboardSendOptions","handleMessageTextSizeChange","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","isTrayIconEnabled","setIsTrayIconEnabled","getIsTrayIconEnabled","handleIsTrayIconEnabledChange","GeneralChatBackground","IS_WINDOWS","WallpaperTile","wallpaper","localMediaHash","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","loadedWallpapers","SettingsGeneralBackground","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","GeneralChatBackgroundColor","handleResetToDefault","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","SettingsHeader","editedFolderId","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","currentAmountRef","useMultiClick","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","EditProfile","General","QuickReaction","DataStorage","Language","DoNotTranslate","Stickers","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyForwarding","PrivacyVoiceMessages","PrivacyMessages","PrivacyLastSeenAllowedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyBioAllowedContacts","PrivacyGroupChatsAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioDeniedContacts","PrivacyGroupChatsDeniedContacts","PrivacyPhoneNumberAllowedContacts","PrivacyBirthdayAllowedContacts","PrivacyGiftsAllowedContacts","PrivacyForwardingAllowedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsDeniedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PDeniedContacts","Performance","ActiveSessions","ActiveWebsites","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaNewPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaChangePasswordHint","TwoFaNewPasswordEmail","TwoFaRecoveryEmail","TwoFaNewPasswordEmailCode","TwoFaRecoveryEmailCode","TwoFaCongratulations","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","canTranslate","canTranslateChats","languages","SettingsLanguage","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","canTranslateChatsEnabled","oldSetLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","handleShouldTranslateChange","handleShouldTranslateChatsChange","handleShouldTranslateChatsClick","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","sessionCount","SettingsMain","openSupportChat","openGiftRecipientPicker","isSupportDialogOpen","openSupportDialog","closeSupportDialog","isPreload","handleOpenSupport","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","isInSettings","languageInfo","formatStarsAmount","convertCurrencyFromBaseUnit","FAQ_URL","PRIVACY_URL","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","SettingsNotifications","notifyDefaults","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","handleSettingsChange","peerType","setting","currentIsMuted","mutedUntil","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","groups","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MED","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","handleAnimationLevelChange","newLevel","performance","wasAnimationLevelSetManually","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","hasPassword","canChangeSensitive","shouldArchiveAndMuteNewNonContact","accountDaysTtl","hasPasscode","canDisplayChatInTitle","isCurrentUserFrozen","blockedCount","webAuthCount","canDisplayAutoarchiveSetting","needAgeVideoVerification","canSetPasscode","selectCanSetPasscode","SettingsPrivacy","openDeleteAccountModal","loadPrivacySettings","loadBlockedUsers","loadGlobalPrivacySettings","loadWebAuthorizations","loadAccountDaysTtl","openAgeVerificationModal","handleArchiveAndMuteChange","handleChatInTitleChange","handleUpdateContentSettings","handleAgeVerification","handleOpenDeleteAccountModal","dayOption","getVisibilityValue","shouldAllowPremium","botsPrivacy","isVisibilityEverybody","shouldShowBotsString","blockCount","blockChatIds","allowCount","allowChatIds","total","exceptionString","conjunction","lastSeen","profilePhoto","birthday","forwards","allowDisabledClick","voiceMessages","blockedIds","localContactIds","userSearch","localUserIds","BlockUserModal","setUserSearchQuery","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","SettingsPrivacyBlockedUsers","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","userMainUsername","CHAT_HEIGHT_PX","renderContact","getPrivacyKey","PrivacyPhoneP2P","PrivacyAddByPhone","disallowedGifts","SettingsAcceptedGift","handleOpenTelegramPremiumModal","handleLimitedEditionChange","shouldDisallowLimitedStarGifts","handleUnlimitedEditionChange","shouldDisallowUnlimitedStarGifts","handleUniqueChange","shouldDisallowUniqueStarGifts","handlePremiumSubscriptionChange","shouldDisallowPremiumGifts","selectShouldHideReadMarks","SettingsPrivacyLastSeen","canShowHideReadTime","handleChangeShouldHideReadMarks","SettingsPrivacyPublicProfilePhoto","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","PrivacySubsection","isPremiumRequired","visibilityOptions","hasNobody","primaryExceptionLists","shouldShowDenied","shouldShowAllowed","headerText","prepareSubtitle","userIdsCount","chatIdsCount","isAllowBots","userCountString","chatCountString","allowedString","blockString","allowedContactsScreen","deniedContactsScreen","primaryPrivacy","secondaryPrivacy","shouldDisplayGiftsButton","addByPhone","phoneP2P","SettingsPrivacyVisibility","handleShowGiftIconInChats","secondaryScreen","PREMIUM_CATEGORY","CUSTOM_PEER_PREMIUM","getCurrentPrivacySettings","SettingsPrivacyVisibilityExceptionList","isAllowList","withPremiumCategory","withMiniAppsCategory","usersOnly","setPrivacySettings","customPeerBots","isCustomPeer","avatarIcon","isAvatarSquare","peerColorId","miniAppsCategory","selectedContactIds","selectedCategoryTypes","newSelectedCategoryTypes","setNewSelectedCategoryTypes","SERVICE_NOTIFICATIONS_USER_ID","filteredChats","handleSelectedCategoriesChange","updatedIds","isPremiumAllowed","config","selectedReaction","defaultReaction","SettingsQuickReaction","setDefaultReaction","emoticon","addedSetIds","SettingsStickers","shouldSuggestStickers","shouldUpdateStickerSetOrder","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","SettingsTwoFaCongratulations","recoveryEmail","animatedEmoji","selectAnimatedEmoji","codeLength","waitingEmailCodeLength","SettingsTwoFaEmailCode","focusDelayTimeoutMs","setValue","handleInputChange","AnimatedIconFromSticker","SettingsTwoFaEnabled","SettingsTwoFaSkippableForm","shouldConfirm","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleSkip","handleSkipConfirm","SettingsTwoFaStart","SettingsTwoFa","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleNewPasswordHint","handleNewPasswordEmail","handleChangePasswordConfirm","handleChangePasswordHint","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaPassword","TRANSITION_RENDER_COUNT","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_BIO_SCREENS","PRIVACY_BIRTHDAY_SCREENS","PRIVACY_GIFTS_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","PRIVACY_MESSAGES_SCREENS","Settings","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","useScrollNotch","forceReturnToChatList","isFromSettings","renderCurrentSectionContent","isScreenActive","activeScreen","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","Main","SettingsGeneralBackgroundColor","SettingsPerformance","shouldWrap","withSwipeControl","_isFrom","_currentKey","userStatusesById","ContactList","openNewContactDialog","isSearching","NewChatStep1","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","foundContactIds","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","NewChatStep2","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","memberFirstNames","generatedChatName","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","NewChat","openLeftColumnContent","newChatMemberIds","setNewChatMemberIds","contentKey","NewChannelStep2","NewGroupStep2","changeSelectedMemberIdsHandler","isSelection","isStepActive","NewChannelStep1","NewGroupStep1","ArchivedChats","isForumPanelOpen","archiveSettings","isStoryRibbonShown","onTopicSearch","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","shouldRenderStoryRibbon","storyRibbonClassNames","isStoryRibbonClosing","StoryToggler","canShow","folderType","isMainList","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","idsToRemove","idsToAdd","MuteDuration","muteUntilOption","setMuteUntilOption","Forever","updateChatMutedState","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isMessageThread","isCommentsInfo","fromChannelId","canSendStickers","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","StickerSetModal","prevStickerSet","renderingStickerSet","isAdded","requestCalendar","calendar","useSchedule","isScheduleRequested","isPreloadedGlobally","scheduledAt","handleCopyLink","suffix","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","CustomEmojiSetsModal","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","sets","teactFastList","customEmojiSet","setCard","BOT_BUTTONS","help","isRestricted","selectIsChatRestricted","canAddContact","getCanAddContact","isMainThread","currentChatId","currentThreadId","canReportChat","canGift","selectCanGift","canCreateTopic","isUserRightBanned","canEditTopic","getCanManageTopic","canManage","selectCanManage","selectCanTranslateChat","isTranslationDisabled","savedDialog","getIsSavedDialog","isTopic","isForumAsMessages","canDeleteChat","getCanDeleteChat","botCommands","commands","botPrivacyPolicyUrl","privacyPolicyUrl","isChatInfoShown","isRightColumnShown","selectIsRightColumnShown","isBot","HeaderMenuContainer","withExtraActions","withForumActions","canStartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canViewMonetization","canViewBoosts","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","canShowBoostModal","channelMonoforumId","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","openFrozenAccountModal","requestMasterAndRequestCall","toggleStatistics","openMonetizationStatistics","openBoostStatistics","openGiftModal","openThreadWithInfo","openCreateTopicPanel","openEditTopicPanel","toggleManagement","togglePeerTranslations","setViewForumAsMessages","openBoostModal","setIsMenuOpen","shouldCloseFast","setShouldCloseFast","setIsDeleteModalOpen","setIsMuteModalOpen","isViewGroupInfoShown","areAllGiftsDisallowed","closeMenu","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftClick","forUserId","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleMonetizationClick","handleBoostClick","handleEnableTranslations","handleSelectMessages","handleOpenAsMessages","handleBlock","handleUnblock","handleSendChannelMessage","botButtons","commandButtons","cmd","hasPrivacyCommand","deleteTitle","MenuSeparator","DeleteChatModal","isSavedDialog","MiddleSearchResult","senderPeer","messageChat","shouldShowChat","hiddenForwardTitle","hiddenUserName","getMessageSenderName","topRow","LastMessageMeta","meta","MessageSummary","truncateLength","CHANNELS_PEER","titleKey","RESULT_ITEM_CLASS_NAME","runDebouncedForSearch","requestedQuery","savedTag","fetchingQuery","isHashtag","selectCurrentMiddleSearch","lastSearchQuery","savedTags","savedReactionTags","monoforumChat","isHistoryCalendarOpen","isHashtagQuery","searchType","MiddleSearch","updateMiddleSearch","resetMiddleSearch","performMiddleSearch","closeMiddleSearch","openHistoryCalendar","loadSavedReactionTags","shouldCancelSearchRef","focusedIndex","setFocusedIndex","canFocusNewer","canFocusOlder","isFullyHidden","setIsFullyHidden","hiddenTimerRef","maybeLongPressActiveRef","isFocused","markFocused","markBlurred","isViewAsList","setIsViewAsList","refs","handleClickOutside","useClickOutside","hasResultsContainer","isOnlyHash","areResultsEmpty","hasResultsDropdown","hasQueryData","hasNavigationButtons","focusInput","blurInput","blur","visualViewport","mainEl","pageTop","requestNextMutation","prevIsCalendarOpen","savedTagsArray","hasSavedTags","areSavedTagsDisabled","handleQueryChange","newQuery","removeListeners","fastRaf","viewportResults","searchResultKey","originalSender","ANONYMOUS_USER_ID","selectForwardedSender","handleMessageClick","getSearchResultKey","handleTriggerViewStyle","foundResult","updateSearchParams","activateSearchTag","tag","removeSearchSavedTag","handleDeleteTag","handleChangeSearchType","handleFocusOlder","newFocusIndex","handleFocusNewer","renderTypeTag","isForTag","selectedType","renderDropdown","dropdown","dropdownHidden","separator","wrap","isChosen","SavedTagButton","withCount","searchTypes","teactOrderKey","focused","mobile","withDropdown","adaptSearchBorders","canClose","resultsItemSelector","hasUpButton","hasDownButton","onStartBackspace","withBackIcon","onUpClick","onDownClick","searchTags","savedSearchTag","icons","getDayStartAt","counter","viewStyle","mobileNavigation","navigationButton","navigationDisabled","recent","favorite","effect","chatStickerSetId","effectStickers","effectEmojis","recentStickers","selectShouldLoopStickers","StickerPicker","isForEffects","loadRecentStickers","addRecentSticker","unfaveSticker","faveSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","effectSets","existingAddedSetIds","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleMouseMove","handleRemoveRecentSticker","CHAT_STICKER_SET_ID","maxUniqueReactions","enabledReactions","reactionsLimit","ReactionPickerLimited","isTouchScreen","currentReactions","shouldUseCurrentReactions","allAvailableReactions","reactionsToSort","sortReactions","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","pickerMaxHeight","REACTION_SELECTOR_WIDTH","availableEffectById","storyPeerId","sendAsMessage","areSomeReactionsAllowed","areAllReactionsAllowed","areCustomAllowed","shouldUseFullPicker","isForbidden","ReactionPicker","toggleReaction","closeReactionPicker","saveEffectInDraft","requestEffectInComposer","addLocalPaidReaction","openPaidReactionModal","renderedMessageId","renderedChatId","renderedStoryPeerId","renderedStoryId","storedPosition","renderingPosition","isDense","deltaX","FULL_PICKER_SHIFT_DELTA","handleToggleCustomReaction","shouldAddToRecent","handleToggleReaction","handleReactionContextMenu","handleStoryReactionSelect","customEmojiMessage","parseHtmlAsFormattedText","buildCustomEmojiHtml","isReaction","availableEffects","effectId","effectStickerId","chosenOrder","backdropExcludedSelector","div","BLUR_CANVAS_SIZE","AttachmentModalItem","attachment","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_PHOTO_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","extension","getFileExtension","previewData","shouldSkipGrouping","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","isFullyVisible","isHorizontal","viewportY1","viewportY2","y2","findInViewport","selectorOrElements","shouldContainBottom","allElements","visibleIndexes","isFound","setTooltipItemVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","handleArrowKey","handleItemSelect","altKey","metaKey","shiftKey","isSelectionOutOfRange","onUp","onDown","onTab","MentionTooltip","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","selectedMentionIndex","prevChatMembers","renderedChatMembers","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","keywords","customEmojiForEmoji","forEmoji","captionLimit","AttachmentModal","attachments","getHtml","editingMessage","canShowCustomSendMenu","isForMessage","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","forceDarkTheme","onAttachmentsUpdate","onCaptionUpdate","onSend","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","canSchedule","onSendWhenOnline","svgRef","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isEditing","groupedId","notEditingFile","getAttachmentMediaType","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","isInvertedMedia","shouldSendInHighQuality","setShouldSendInHighQuality","renderingShouldSendInHighQuality","setRenderingShouldSendInHighQuality","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","timerRef","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","setIsInvertedMedia","removeAllSelections","isCustomSendMenuOpen","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleToggleShouldCompress","handleToggleQuality","handleDisableSpoilers","handleToggleSpoiler","svg","baseVal","leftChars","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","hasAnyPhoto","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","canInvertMedia","attachmentsLength","isBottomDividerShown","buttonSendCaption","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","rx","uniqueId","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","customEmojiPrefix","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","onSendSchedule","PollModal","isQuiz","shouldBeAnonymous","maxOptionsCount","questionInputRef","optionsListRef","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","handleSolutionChange","addNewOption","newOptions","behavior","handleCreate","isNoCorrectOptionError","answers","correct","questionTrimmed","substring","optionsTrimmed","o","summary","multipleChoice","quiz","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","maxItemsCount","todoItemsMax","maxTitleLength","todoTitleLengthMax","maxItemLength","todoItemLengthMax","ToDoListModal","TODO_ITEMS_LIMIT","TODO_TITLE_LENGTH_LIMIT","TODO_ITEM_LENGTH_LIMIT","editTodo","closeTodoListModal","appendTodoList","titleInputRef","itemsListRef","setItems","generateUniqueNumberId","isOthersCanAppend","setIsOthersCanAppend","isOthersCanComplete","setIsOthersCanComplete","isAddTaskMode","forNewTask","isOutgoing","editingTodo","frozenTasks","othersCanAppend","othersCanComplete","editingItems","inputs","lastInput","addNewItem","newItems","todoItems","titleTrimmed","itemsTrimmed","updateItem","removeItem","handleIsOthersCanAppendChange","handleIsOthersCanCompleteChange","getTitleError","getItemsError","tasksToRender","stateIndex","renderItems","EmojiButton","native","IS_PACKAGED_ELECTRON","BASE_URL","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","EmojiCategory","category","allEmojis","emojisPerRow","displayedEmoji","ICONS_BY_CATEGORY","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","EmojiPicker","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","GifButton","gif","onUnsaveClick","hasVideoPreview","getVideoMediaHash","withThumb","videoHash","getVideoPreviewMediaHash","videoData","shouldRenderVideo","isVideoReady","handleUnsaveClick","handleContextDelete","preload","gifs","saved","GifPicker","canSendGifs","onGifSelect","loadSavedGifs","saveGif","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","GIFs","SYMBOL_MENU_TAB_ICONS","SymbolMenuFooter","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","SymbolMenu","isMessageComposer","menuPositionOptions","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","isFrom","mobileClassName","onMouseEnter","ChatCommand","withAvatar","freezeWhenClosed","ChatCommandTooltip","quickReplies","quickReplyMessages","self","sendQuickReply","handleSendCommand","handleSendQuickReply","quickReplyId","quickRepliesWithDescription","reply","topMessageId","shortcut","handleKeyboardSelect","selectedCommandIndex","isEmpty","BotCommandMenu","botCommand","StickerTooltip","prevStickers","displayedStickers","clearCustomEmojiForEmoji","ce","emojiButton","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onRemoveEffect","withEffects","hasCurrentEffect","effectReactions","onToggleReaction","isInSavedMessages","isInStoryViewer","openEffectPicker","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","areItemsHidden","hideItems","showItems","markIsReady","unmarkIsReady","handleOpenMessageEffectsPicker","ReactionSelector","onShowMore","TEXT_FORMAT_BY_TAG_NAME","B","STRONG","I","EM","U","DEL","CODE","SPAN","fragmentEl","TextFormatter","anchorPosition","selectedRange","setSelectedRange","linkUrlInputRef","isLinkControlOpen","openLinkControl","closeLinkControl","setLinkUrl","isEditingLink","setIsEditingLink","inputClassName","setInputClassName","selectedTextFormats","setSelectedTextFormats","useVirtualBackdrop","selectedFormats","parentElement","commonAncestorContainer","EDITABLE_INPUT_ID","textFormat","tagName","restoreSelection","selection","getSelection","removeAllRanges","addRange","updateSelectedRange","getRangeAt","getSelectedText","shouldDropCustomEmoji","replaceChildren","cloneContents","INPUT_CUSTOM_EMOJI_SELECTOR","getAttribute","getSelectedElement","updateInputStyles","scrollWidth","getFormatButtonClassName","fKey","monospace","strikethrough","handleSpoilerText","spoiler","entityType","ApiMessageEntityTypes","Spoiler","execCommand","handleBoldText","handleItalicText","italic","handleUnderlineText","underline","handleStrikethroughText","handleMonospaceText","handleLinkUrlConfirm","formattedLinkUrl","encodeURI","u","m","p","getKeyFromEvent","linkUrlConfirmClassName","CustomEmojiButton","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","BaseResult","thumbnailDataUrl","getWebDocumentHash","decoding","ArticleResult","inlineResult","webThumbnail","GifResult","_gif","MediaResult","isForGallery","thumbnailBlobUrl","getPhotoMediaHash","StickerResult","STICKER_SIZE_INLINE_BOT_RESULT","InlineBotTooltip","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","isFromSwitchWebView","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","SendAsMenu","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","membersCount","StickerSetResult","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","StickerSearch","loadFeaturedStickers","selectCurrentGifSearch","canPostInChat","GifSearch","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","postStatistic","StatisticsRecentMessage","toggleMessageStatistics","StatisticsRecentPostMeta","withStorySolid","forceUnreadStorySolid","toggleStoryStatistics","imgBlobUrl","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","reactionsByEmotionGraph","storyInteractionsGraph","storyReactionsByEmotionGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","statistics","selectStatistics","dcId","statisticsDcId","messagesById","storiesById","selectPeerStories","Statistics","setIsReady","loadedCharts","errorCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","isGraph","graphType","token","isPercentage","ensureLovelyChart","isAsync","isError","zoomToken","create","zoomOutLabel","StatisticsOverview","recentPosts","StatisticsRecentStory","StatisticsMessagePublicForward","GRAPH_TITLES","viewsGraph","reactionsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","loadMessagePublicForwards","publicForwardsData","publicForwards","currentStory","loadStoryStatistics","loadStoryPublicForwards","StatisticsStoryPublicForward","answer","voters","offsets","pollResults","PollAnswerResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","ShowMoreButton","renderViewMoreButton","poll","selectPollFromMessage","PollResults","resultsByOption","buildCollectionByKey","ICON_SIZE","createTopicPanel","CreateTopic","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","noLoopLimit","editTopicPanel","EditTopic","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","ERROR_NAME_MISSING","management","ManageBot","setBotInfo","uploadContactProfilePhoto","startBotFatherConversation","isFieldTouched","markFieldTouched","unmarkProfileTouched","isAvatarTouched","markAvatarTouched","unmarkAvatarTouched","currentName","setName","ManagementProgress","handleNameChange","trimmedName","handleChangeEditIntro","handleChangeEditCommands","handleChangeSettings","isSuggestRef","handleSelectAvatar","isSuggest","CHANNEL_TITLE_EMPTY","minLevelToToggleAutoTranslation","channelAutoTranslationLevelMin","hasAutoTranslation","chatBoostLevel","level","canToggleAutoTranslation","canChangeInfo","canInvite","exportedInvites","ManageChannel","onScreenSelect","updateChat","closeManagement","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleAutoTranslation","currentTitle","currentAbout","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","hasAutoTranslationAvailable","handleAutoTranslationChange","isRevoked","adminsCount","removedUsersCount","kickedMembers","handleClickEditType","ManagementScreens","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickReactions","Reactions","handleClickAdministrators","ChatAdministrators","handleClickInvites","Invites","handleClickRequests","JoinRequests","handleSetPhoto","handleAboutChange","handleUpdateChannel","trimmedTitle","trimmedAbout","handleClickSubscribers","ChannelSubscribers","handleRemovedUsersClick","ChannelRemovedUsers","handleDeleteChannel","chatReactionsDescription","enabledLength","totalLength","isChannelPublic","formatInteger","joinRequests","ManageChatAdministrators","onChatMemberSelect","toggleSignatures","areSignaturesEnabled","areSignaturesShown","areProfilesEnabled","areProfilesShown","canAddNewAdmins","canToggleSignatures","adminMembers","admins","isOwner","handleAdminMemberClick","promotedByUserId","ChatAdminRights","handleToggleSignatures","handleToggleProfiles","handleAddAdminClick","GroupAddAdmins","getMemberStatus","promotedByUser","selectManagement","maxPublicLinks","privateInviteLink","inviteLink","ManageChatPrivacyType","updatePublicLink","updatePrivateLink","toggleIsProtected","resetManagementError","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","shouldDisableUsernames","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","chatMembers","RemoveGroupUserModal","loadMoreMembers","usersId","availableMemberIds","canDeleteMembers","removedMembers","ManageChatRemovedUsers","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","forDiscussionIds","linkedChat","ManageDiscussion","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","Initial","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","handleNewGroupClick","NewDiscussionGroup","DiscussionGroups","STICKER_SIZE_DISCUSSION_GROUPS","withPrimaryColor","linkedGroup","renderLinkGroupHeader","renderLinkGroupConfirmText","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","isChannelsPremiumLimitReached","ManageGroup","togglePreHistoryHidden","deleteChat","toggleForum","isForumEnabled","setIsForumEnabled","isPublicGroup","isPreHistoryHiddenCheckboxRef","handleClickPermissions","GroupPermissions","handleUpdateGroup","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","enabledPermissionsCount","handleDeleteGroup","isForForum","isPromotedByCurrentUser","isFormFullyDisabled","defaultRights","adminRights","hasFullInfo","ManageGroupAdminRights","isNewAdmin","selectedUserId","updateChatAdmin","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedChatMember","selectedAdminMember","handleSavePermissions","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","postStories","editStories","deleteStories","banUsers","addAdmins","manageCall","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","canAddMembers","globalUserIds","ManageGroupMembers","noAdmins","toggleParticipantsHidden","setNewChatMembersDialogState","deletingUserId","setDeletingUserId","adminIds","usePeerStoriesPolling","shouldUseSearchResults","listedIds","ChatNewAdminRights","handleDeleteMembersModalClose","handleToggleParticipantsHidden","handleNewMemberDialogOpen","newChatMembersProgress","NewChatMembersProgress","memberId","DeleteMemberModal","arePaidMessagesAvailable","groupPeersPaidStars","ManageGroupPermissions","updateChatDefaultBannedRights","updatePaidMessagesPrice","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","handleExceptionMemberClick","GroupUserPermissions","isPriceForMessagesChanged","markPriceForMessagesChanged","unmarkPriceForMessagesChanged","isPriceForMessagesOpen","setIsPriceForMessagesOpen","handleUpdatePaidMessagesPrice","handleUpdatePermissions","exceptionMembers","getMemberExceptions","getLangKeyForBannedRightKey","translatedString","handleChargeStarsForMessages","arePermissionsChanged","arePermissionsLoading","ManageGroupUserPermissions","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","ManageGroupUserPermissionsCreate","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","ManageInvite","editExportedChatInvite","exportChatInvite","setIsRequestNeeded","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","usageLimit","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleSaveClick","formatFullDate","n","importers","requesters","ManageInviteInfo","loadChatInviteImporters","loadChatInviteRequesters","usage","adminId","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","BULLET","inviteComparator","i1","i2","isPermanent","i1IsPermanent","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","ManageInvites","setEditingExportedInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","askToRevoke","handleCreateNewClick","EditInvite","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","InviteInfo","deleteInvite","askToDelete","copyLink","prepareUsageText","requested","formatCountdown","getInviteIconClass","prepareContextActions","editInvite","Invite","STICKER_SIZE_INVITES","JoinRequest","hideChatJoinRequest","createClassNameBuilder","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","ManageJoinRequests","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","MAX_UNIQUE_REACTIONS","ManageReactions","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","localReactionsLimit","setLocalReactionsLimit","reactionsOptions","handleSaveReactions","availableActiveReactions","localAllowedReactions","enabledAllowedReactions","localReaction","enabledReaction","handleReactionsOptionChange","handleReactionChange","local","handleReactionsLimitChange","renderReactionsMaxCountValue","shouldShowReactionsLimit","isCenteredLayout","notPersonalPhoto","ManageUser","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","handleNotificationChange","handleDeleteContact","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","canSetPersonalPhoto","noEmojiStatus","withFullInfo","noPersonalPhoto","trimStart","discussionChannelId","managementType","selectCurrentManagementType","Management","GroupRecentActions","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","Checkout","invoice","shippingPrices","checkoutInfo","totalPrice","onAcceptTos","needAddress","hasShippingOptions","savedCredentials","isPaymentFormUrl","setPaymentStep","isInteractive","termsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","useMediaTransition","hasMediaData","handleTipsClick","tips","handlePaymentMethodClick","PaymentStep","SavedPayments","PaymentInfo","handleShippingAddressClick","ShippingInfo","handleShippingMethodClick","Shipping","checkoutPicture","forceAspectRatio","checkoutTitle","checkoutDescription","priceInfo","prices","renderPaymentItem","priceInfoItem","priceInfoItemTitle","tipsList","tip","tipsItem","tipsItem_active","shouldOmitFractions","invoiceInfo","renderCheckoutItem","provider","langStringSplit","renderTosLink","tosCheckbox","priceInfoItemMain","checkoutInfoItemInfoTitle","checkoutInfoItemInfoData","ConfirmPayment","noRedirect","onPaymentFormSubmit","messageKey","PasswordConfirm","onPasswordChange","clearPaymentError","cardName","onInputChange","useFocusAfterAnimation","animationDuration","CardInput","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","ExpiryInput","endsWith","formatCardExpiry","canSaveCredentials","needCardholderName","needCountry","needZip","selectCountryRef","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleCountryChange","handleBillingPostCodeChange","handleChangeSaveCredentials","Select","hasArrow","SavedPaymentCredentials","onNewCardClick","shippingOptions","handleShippingSelect","needEmail","needPhone","needName","phoneRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","confirmPaymentUrl","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","nativeParams","nativeProvider","providerName","isProviderError","smartGlocalToken","stripeId","passwordValidUntil","validUntil","PaymentModal","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","setSmartGlocalCardInfo","paymentState","paymentDispatch","twoFaPassword","setTwoFaPassword","prevStep","prevRequestId","canRenderFooter","setStep","nextStep","field","savedInfo","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","sendForm","shippingOptionId","handlePaymentFormSubmit","credentials","validateRequest","requestInfo","getRequestInfo","sendCredentials","expiryMonth","expiryYear","zip","getCredentials","ConfirmPassword","shouldFillRequestedData","isEmailRequested","isPhoneRequested","isNameRequested","isShippingAddressRequested","isSubmitDisabled","getIsSubmitDisabled","isRecurring","cleanupOnlyKey","currentStep","isPasswordMissing","isEmailSentToProvider","isPhoneSentToProvider","renderModalContent","descriptionKey","renderError","optionId","receipt","ReceiptModal","prevReceipt","renderingReceipt","fullAddress","credentialsTitle","totalAmount","InviteViaLinkModal","sendInviteMessages","closeInviteViaLinkModal","missingUsers","setSelectedMemberIds","unselectableIds","selectableIds","requirePremiumIds","regularIds","isRequiringPremiumToMessage","invitableWithPremiumIds","isRequiringPremiumToInvite","isEveryPremiumBlocksPm","topListPeers","handleSendInviteLink","canSendInviteLink","inviteSectionText","premiumSectionText","hasPremiumSection","hasSelectableSection","lockedUnselectedSubtitle","OneTimeMediaModal","closeOneTimeMediaModal","handlePlayVoice","isOwn","isOwnMessage","closeBtnTitle","voice","OneTimeModal","RoundVideo","onStop","renderMedia","WebAppsCloseConfirmationModal","closeWebAppsCloseConfirmationModal","shouldSkipInFuture","setShouldSkipInFuture","shouldSkipConfirmation","handleSelectWithEnter","freezeUntilDate","freezeAppealUrl","botFreezeAppeal","botFreezeAppealId","botFreezeAppealUsername","FrozenAccountModal","closeFrozenAccountModal","handleAppeal","BannedDuck","botLink","hasBackdrop"],"sourceRoot":""}