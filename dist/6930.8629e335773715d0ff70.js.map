{"version":3,"file":"6930.8629e335773715d0ff70.js","mappings":"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","sources":["webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.module.scss?069e","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.module.scss?3156","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.module.scss?bbd4","webpack://telegram-t/./src/components/modals/stars/BalanceBlock.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionItem.module.scss?74b5","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionItem.tsx","webpack://telegram-t/./src/components/modals/stars/helpers/transaction.ts","webpack://telegram-t/./src/components/modals/stars/transaction/PaidMediaThumb.module.scss?605d","webpack://telegram-t/./src/components/modals/stars/transaction/PaidMediaThumb.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionItem.module.scss?b947","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionItem.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.tsx","webpack://telegram-t/./src/components/modals/gift/UniqueGiftHeader.module.scss?2bf6","webpack://telegram-t/./src/components/modals/gift/UniqueGiftHeader.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.module.scss?a215","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.module.scss?5025","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.tsx","webpack://telegram-t/./src/components/modals/paidReaction/StarSlider.module.scss?b8f3","webpack://telegram-t/./src/components/modals/paidReaction/StarSlider.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.module.scss?80b2","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.tsx","webpack://telegram-t/./src/components/modals/gift/GiftComposer.module.scss?dac8","webpack://telegram-t/./src/components/modals/gift/GiftComposer.tsx","webpack://telegram-t/./src/components/modals/gift/GiftItem.module.scss?c564","webpack://telegram-t/./src/components/modals/gift/GiftItemPremium.tsx","webpack://telegram-t/./src/components/modals/gift/GiftItemStar.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.module.scss?fd13","webpack://telegram-t/./src/components/modals/gift/GiftModalResaleScreen.tsx","webpack://telegram-t/./src/components/modals/gift/ResaleGiftMenuAttributeSticker.module.scss?8276","webpack://telegram-t/./src/components/modals/gift/ResaleGiftMenuAttributeSticker.tsx","webpack://telegram-t/./src/components/modals/gift/GiftResaleFilters.module.scss?c5a8","webpack://telegram-t/./src/components/modals/gift/GiftResaleFilters.tsx","webpack://telegram-t/./src/components/modals/gift/StarGiftCategoryList.module.scss?7d19","webpack://telegram-t/./src/components/modals/gift/StarGiftCategoryList.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.module.scss?b7e9","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.tsx","webpack://telegram-t/./src/components/common/gift/GiftTransferPreview.module.scss?0f0d","webpack://telegram-t/./src/components/common/gift/GiftTransferPreview.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.module.scss?4f0e","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.tsx","webpack://telegram-t/./src/components/modals/gift/resale/GiftResalePriceComposerModal.module.scss?6666","webpack://telegram-t/./src/components/modals/gift/resale/GiftResalePriceComposerModal.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.module.scss?ae9e","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.module.scss?3366","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.module.scss?287b","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.tsx","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/hooks/usePeerSearch.ts","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.tsx","webpack://telegram-t/./src/components/modals/stars/chatRefund/ChatRefundModal.tsx","webpack://telegram-t/./src/components/modals/priceConfirm/PriceConfirmModal.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"MFXAwnxJ\",\"content\":\"Sl6xVf1R\",\"main\":\"bTN9Jeph\",\"headerInfo\":\"c6MiyJgW\",\"logo\":\"StGLWvzb\",\"logoBackground\":\"SyTXSfml\",\"description\":\"kFe3mIZo\",\"section\":\"BgfHkWd2\",\"header\":\"zMtAGfXs\",\"starHeaderText\":\"q3v8orGj\",\"hiddenHeader\":\"bq3FnXT0\",\"closeButton\":\"bDsDTkbe\",\"avatar\":\"jK36xUj4\",\"center\":\"v1PckUQn\",\"secondaryInfo\":\"TDWSRfP9\"};","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiStarTopupOption, ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport {\n  selectUser,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../../util/formatCurrency';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport StarTopupOptionList from '../StarTopupOptionList';\n\nimport styles from './StarsGiftModal.module.scss';\n\nimport StarLogo from '../../../../assets/icons/GoldStar.svg';\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsGiftModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst AVATAR_SIZE = 100;\n\nconst StarsGiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  user,\n}) => {\n  const {\n    closeStarsGiftModal, openInvoice, requestConfetti,\n  } = getActions();\n  const dialogRef = useRef<HTMLDivElement>();\n\n  const isOpen = Boolean(modal?.isOpen);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const oldLang = useOldLang();\n\n  const [selectedOption, setSelectedOption] = useState<ApiStarTopupOption | undefined>();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n    }\n  }, [isOpen]);\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (renderingModal?.isCompleted) {\n      showConfetti();\n    }\n  }, [renderingModal, showConfetti]);\n\n  const handleClick = useLastCallback((option: ApiStarTopupOption) => {\n    if (!renderingModal) return;\n\n    setSelectedOption(option);\n    if (user) {\n      openInvoice({\n        type: 'starsgift',\n        userId: user.id,\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    } else {\n      openInvoice({\n        type: 'stars',\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    }\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClose = useLastCallback(() => {\n    closeStarsGiftModal();\n  });\n\n  function renderGiftTitle() {\n    if (renderingModal?.isCompleted) {\n      return user ? renderText(oldLang('Notification.StarsGift.SentYou',\n        formatCurrencyAsString(selectedOption!.amount, selectedOption!.currency, oldLang.code)), ['simple_markdown'])\n        : renderText(oldLang('StarsAcquiredInfo', selectedOption?.stars), ['simple_markdown']);\n    }\n\n    return user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars');\n  }\n\n  const bottomText = useMemo(() => {\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        url={oldLang('StarsTOSLink')}\n        text={oldLang('lng_credits_summary_options_about_link')}\n      />,\n      parts[1],\n    ];\n  }, [oldLang]);\n\n  return (\n    <Modal\n      className={buildClassName(styles.modalDialog)}\n      contentClassName={styles.content}\n      dialogRef={dialogRef}\n      isSlim\n      onClose={handleClose}\n      isOpen={isOpen}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n\n          onClick={() => closeStarsGiftModal()}\n          ariaLabel={oldLang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars')}\n          </h2>\n        </div>\n        <div className={styles.headerInfo}>\n          {user ? (\n            <>\n              <Avatar\n                size={AVATAR_SIZE}\n                peer={user}\n                className={styles.avatar}\n              />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          ) : (\n            <>\n              <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          )}\n        </div>\n        <h2 className={buildClassName(styles.headerText, styles.center)}>\n          {renderGiftTitle()}\n        </h2>\n        <p className={styles.description}>\n          {user ? renderText(\n            oldLang('ActionGiftStarsSubtitle', getPeerTitle(oldLang, user)), ['simple_markdown'],\n          ) : oldLang('Stars.Purchase.GetStarsInfo')}\n        </p>\n        <div className={styles.section}>\n          <StarTopupOptionList\n            options={renderingModal?.starsGiftOptions}\n            onClick={handleClick}\n          />\n          <div className={styles.secondaryInfo}>\n            {bottomText}\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const user = modal?.forUserId ? selectUser(global, modal.forUserId) : undefined;\n\n  return {\n    user,\n  };\n})(StarsGiftModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"s3k01dTm\",\"transition\":\"BNA0_b5j\",\"main\":\"Oadi16vt\",\"filter\":\"z84KbvhX\",\"title\":\"Jnsrau29\",\"buttons\":\"NnVyYB32\",\"picker\":\"cuI2eDIY\",\"avatars\":\"ILtw_aNL\",\"center\":\"eIfMzHv5\",\"description\":\"FlNJWZ5P\",\"premiumFeatures\":\"xIv0Yaur\",\"options\":\"eNJRXn6P\",\"button\":\"KDNKXBp5\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  isDeletedUser, isUserBot,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\nimport styles from './StarsGiftingPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n  activeListIds?: string[];\n  archivedListIds?: string[];\n}\n\nconst StarsGiftingPickerModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  userIds,\n}) => {\n  const { closeStarsGiftingPickerModal, openStarsGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const combinedIds = unique([\n      ...(userIds || []),\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ]);\n\n    const filteredUserIds = filterPeersByQuery({\n      ids: combinedIds, query: searchQuery, type: 'user',\n    });\n\n    return sortChatIds(filteredUserIds.filter((id) => {\n      const user = usersById[id];\n\n      if (!user) {\n        return false;\n      }\n\n      return !user.isSupport\n        && !isUserBot(user) && !isDeletedUser(user)\n        && id !== currentUserId && id !== SERVICE_NOTIFICATIONS_USER_ID;\n    }));\n  }, [currentUserId, searchQuery, userIds, activeListIds, archivedListIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedId?: string) => {\n    if (newSelectedId?.length) {\n      openStarsGiftModal({ forUserId: newSelectedId });\n      closeStarsGiftingPickerModal();\n    }\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeStarsGiftingPickerModal}\n      title={oldLang('GiftStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={oldLang('Continue')}\n      onEnter={closeStarsGiftingPickerModal}\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        onSelectedIdChange={handleSelectedUserIdsChange}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    chats: {\n      listIds,\n    },\n    currentUserId,\n  } = global;\n\n  return {\n    userIds: global.contactList?.userIds,\n    activeListIds: listIds.active,\n    archivedListIds: listIds.archived,\n    currentUserId,\n  };\n})(StarsGiftingPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TtE8LQNJ\",\"minimal\":\"nkV4JXHc\",\"transition\":\"nXQS4E59\",\"main\":\"JuWZY1ds\",\"container\":\"mnhBs1uK\",\"section\":\"lYkNd_gb\",\"lastSection\":\"f749AI4g\",\"sectionTitle\":\"FF8gm7MP\",\"hint\":\"Rs8WXoOz\",\"tos\":\"Vu6blJk9\",\"topUpButton\":\"dc_DZoVF\",\"tonBalanceContainer\":\"lorbW9II\",\"tonBalance\":\"h2Fs3tOv\",\"tonIconBalance\":\"Ut6GidJP\",\"tonInUsd\":\"FdcdsB4l\",\"tonIconLogo\":\"_hCjjyEv\",\"description\":\"teXilLxe\",\"header\":\"fnhXotO2\",\"starHeaderText\":\"iUwego5s\",\"botItem\":\"AhxcrKWn\",\"hiddenHeader\":\"DZk6d6hF\",\"closeButton\":\"piD1PXHW\",\"addStarsButton\":\"dqnGL2uh\",\"addStarsIcon\":\"w9Db2eiK\",\"balanceBlock\":\"Yk0OQBKC\",\"balanceInfo\":\"p2dW9NOV\",\"smallerText\":\"rUnPcfmE\",\"balanceBottom\":\"F5BTkZ9G\",\"modalBalance\":\"t8tMrx3y\",\"starButton\":\"oOt4VBD2\",\"paymentContent\":\"OReEUNTV\",\"paymentImages\":\"oKorQYTC\",\"paymentPhoto\":\"HGTrEtUF\",\"avatarStar\":\"Wu10dXoa\",\"paymentImageBackground\":\"os8jb_qv\",\"paymentButton\":\"VzR5cibf\",\"paymentButtonStar\":\"Uhg7yWxK\",\"transactions\":\"Qvc0fTTH\",\"subscriptions\":\"IX5BhCUF\",\"tabs\":\"KZVEyKOX\",\"disclaimer\":\"bpVifdwH\",\"amountBadge\":\"BPM7LKwo\",\"loadMore\":\"TKmZjMyd\",\"loadMoreIcon\":\"buepwtN1\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiTypeCurrencyAmount } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport buildClassName from '../../../util/buildClassName';\nimport { convertCurrencyFromBaseUnit } from '../../../util/formatCurrency';\n\nimport useLang from '../../../hooks/useLang';\n\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarsBalanceModal.module.scss';\n\ntype OwnProps = {\n  balance?: ApiTypeCurrencyAmount;\n  withAddButton?: boolean;\n  className?: string;\n};\n\nconst BalanceBlock = ({ balance, className, withAddButton }: OwnProps) => {\n  const lang = useLang();\n\n  const {\n    openStarsBalanceModal,\n  } = getActions();\n\n  const renderStarsAmount = () => {\n    return (\n      <>\n        <StarIcon type=\"gold\" size=\"middle\" />\n        {balance !== undefined && balance.currency === STARS_CURRENCY_CODE\n          ? formatStarsAmount(lang, balance) : '…'}\n        {withAddButton && (\n          <BadgeButton\n            className={styles.addStarsButton}\n            onClick={() => openStarsBalanceModal({})}\n          >\n            <Icon\n              className={styles.addStarsIcon}\n              name=\"add\"\n            />\n          </BadgeButton>\n        )}\n      </>\n    );\n  };\n\n  const renderTonAmount = () => {\n    return (\n      <>\n        <Icon name=\"toncoin\" />\n        {balance !== undefined ? convertCurrencyFromBaseUnit(balance.amount, balance.currency) : '…'}\n      </>\n    );\n  };\n\n  return (\n    <div className={buildClassName(styles.balanceBlock, className)}>\n      <div className={styles.balanceInfo}>\n        <span className={styles.smallerText}>{lang('StarsBalance')}</span>\n        <div className={styles.balanceBottom}>\n          {balance?.currency === TON_CURRENCY_CODE ? renderTonAmount() : renderStarsAmount()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(BalanceBlock);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXnbeQxP\",\"info\":\"zLaaDX3c\",\"status\":\"HbF2qTB2\",\"statusPricing\":\"AveGvpdV\",\"amount\":\"_CBiOQcv\",\"title\":\"k9ZIv5Pd\",\"description\":\"FlRlxMx2\",\"subtitle\":\"YN2J8dw6\",\"statusPeriod\":\"MRrP7Oew\",\"statusEnded\":\"pRHwfr8m\",\"preview\":\"t6Syyhzd\",\"subscriptionStar\":\"ftlbevPm\"};","import { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiStarsSubscription,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatDateToString } from '../../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\n\nimport styles from './StarsSubscriptionItem.module.scss';\n\ntype OwnProps = {\n  subscription: ApiStarsSubscription;\n};\n\nfunction selectProvidedPeer(peerId: string) {\n  return (global: GlobalState) => (\n    selectPeer(global, peerId)\n  );\n}\n\nconst StarsSubscriptionItem = ({ subscription }: OwnProps) => {\n  const { openStarsSubscriptionModal } = getActions();\n  const {\n    peerId, pricing, until, isCancelled, title, photo,\n  } = subscription;\n  const lang = useOldLang();\n\n  const peer = useSelector(selectProvidedPeer(peerId))!;\n\n  const handleClick = useLastCallback(() => {\n    openStarsSubscriptionModal({ subscription });\n  });\n\n  if (!peer) {\n    return undefined;\n  }\n\n  const hasExpired = until < Date.now() / 1000;\n  const formattedDate = formatDateToString(until * 1000, lang.code, true, 'long');\n\n  return (\n    <div className={styles.root} onClick={handleClick}>\n      <div className={styles.preview}>\n        <Avatar size=\"medium\" peer={peer} />\n        <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{renderText(getPeerTitle(lang, peer) || '')}</h3>\n        {title && (\n          <p className={styles.subtitle}>\n            {photo && <Avatar webPhoto={photo} size=\"micro\" />}\n            {renderText(title)}\n          </p>\n        )}\n        <p className={styles.description}>\n          {lang(\n            hasExpired ? 'StarsSubscriptionExpired'\n              : isCancelled ? 'StarsSubscriptionExpires' : 'StarsSubscriptionRenews',\n            formattedDate,\n          )}\n        </p>\n      </div>\n      <div className={styles.status}>\n        {(isCancelled || hasExpired) ? (\n          <div className={styles.statusEnded}>\n            {lang(hasExpired ? 'StarsSubscriptionStatusExpired' : 'StarsSubscriptionStatusCancelled')}\n          </div>\n        ) : (\n          <>\n            <div className={styles.statusPricing}>\n              <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n              <span className={styles.amount}>\n                {formatInteger(pricing.amount)}\n              </span>\n            </div>\n            <div className={styles.statusPeriod}>{lang('StarsParticipantSubscriptionPerMonth')}</div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsSubscriptionItem);\n","import type { ApiStarsAmount, ApiStarsTransaction, ApiTypeCurrencyAmount } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../../config';\nimport { buildStarsTransactionCustomPeer, shouldUseCustomPeer } from '../../../../global/helpers/payments';\nimport {\n  type LangFn,\n} from '../../../../util/localization';\nimport { formatPercent } from '../../../../util/textFormat';\n\nexport function getTransactionTitle(oldLang: OldLangFn, lang: LangFn, transaction: ApiStarsTransaction) {\n  if (transaction.paidMessages) {\n    return lang(\n      'PaidMessageTransaction',\n      { count: transaction.paidMessages },\n      {\n        withNodes: true,\n        pluralValue: transaction.paidMessages,\n      },\n    );\n  }\n\n  if (transaction.isGiftResale) {\n    return isNegativeAmount(transaction.amount)\n      ? lang('StarGiftSaleTransaction')\n      : lang('StarGiftPurchaseTransaction');\n  }\n  if (transaction.isPostsSearch) {\n    return lang('PostsSearchTransaction');\n  }\n\n  if (transaction.starRefCommision) {\n    return oldLang('StarTransactionCommission', formatPercent(transaction.starRefCommision));\n  }\n  if (transaction.isGiftUpgrade) return oldLang('Gift2TransactionUpgraded');\n  if (transaction.extendedMedia) return oldLang('StarMediaPurchase');\n  if (transaction.subscriptionPeriod) return transaction.title || oldLang('StarSubscriptionPurchase');\n  if (transaction.isReaction) return oldLang('StarsReactionsSent');\n  if (transaction.giveawayPostId) return oldLang('StarsGiveawayPrizeReceived');\n  if (transaction.isMyGift) return oldLang('StarsGiftSent');\n  if (transaction.isGift) {\n    if (transaction.amount.currency === TON_CURRENCY_CODE) {\n      return lang('TonGiftReceived');\n    }\n    return oldLang('StarsGiftReceived');\n  }\n  if (transaction.starGift) {\n    return isNegativeAmount(transaction.amount) ? oldLang('Gift2TransactionSent') : oldLang('Gift2ConvertedTitle');\n  }\n\n  const customPeer = (transaction.peer && shouldUseCustomPeer(transaction)\n    && buildStarsTransactionCustomPeer(transaction)) || undefined;\n\n  if (customPeer) return customPeer.title || oldLang(customPeer.titleKey!);\n\n  return transaction.title;\n}\n\nexport function isNegativeStarsAmount(starsAmount: ApiStarsAmount) {\n  if (starsAmount.amount) return starsAmount.amount < 0;\n  return starsAmount.nanos < 0;\n}\n\nexport function isNegativeAmount(currencyAmount: ApiTypeCurrencyAmount) {\n  if (currencyAmount.currency === STARS_CURRENCY_CODE) {\n    return isNegativeStarsAmount(currencyAmount);\n  }\n  return currencyAmount.amount < 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jQkp75Gb\",\"preview\":\"OYGSN3PF\",\"count\":\"KX1yz2Jy\",\"thumb\":\"EvinKr5k\",\"noOutline\":\"KSAAsUDv\",\"itemCount1\":\"GxDajfX_\",\"itemCount2\":\"jXuZoxq8\",\"itemCount3\":\"TPn3XGHJ\",\"blurry\":\"hWZuxLS8\",\"full\":\"w56QPFhl\",\"fadeIn\":\"ds43W8Wq\"};","import { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiMediaExtendedPreview, BoughtPaidMedia } from '../../../../api/types';\n\nimport { getMediaHash, getMediaThumbUri } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport Icon from '../../../common/icons/Icon';\nimport MediaSpoiler from '../../../common/MediaSpoiler';\n\nimport styles from './PaidMediaThumb.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  media: ApiMediaExtendedPreview[] | BoughtPaidMedia[];\n  isTransactionPreview?: boolean;\n  onClick?: NoneToVoidFunction;\n};\n\nconst THUMB_LIMIT = 3;\nconst PREVIEW_THUMB_LIMIT = 2;\n\nconst PaidMediaThumb = ({\n  media, className, isTransactionPreview, onClick,\n}: OwnProps) => {\n  const count = Math.min(media.length, isTransactionPreview ? PREVIEW_THUMB_LIMIT : THUMB_LIMIT);\n  const isLocked = 'mediaType' in media[0];\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        styles[`itemCount${count}`],\n        isTransactionPreview && styles.preview,\n        className,\n      )}\n      dir=\"rtl\"\n      onClick={onClick}\n    >\n      {media.slice(0, count).reverse().map((item, i, arr) => {\n        const realIndex = arr.length - i - 1;\n        return 'mediaType' in item ? (\n          <MediaSpoiler\n            className={styles.thumb}\n            isVisible\n            width={item.width}\n            height={item.height}\n            thumbDataUri={item.thumbnail?.dataUri}\n          />\n        ) : (\n          <SingleMediaThumb\n            className={buildClassName(isTransactionPreview && realIndex > 0 && styles.noOutline)}\n            boughtMedia={item}\n            index={realIndex}\n          />\n        );\n      })}\n      {isLocked && (\n        <div className={styles.count}>\n          <Icon name=\"stars-lock\" />\n          {media.length > 1 ? media.length : ''}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction SingleMediaThumb({\n  boughtMedia,\n  index,\n  className,\n}: {\n  boughtMedia: BoughtPaidMedia;\n  index?: number;\n  className?: string;\n}) {\n  const media = (boughtMedia.video || boughtMedia.photo)!;\n  const mediaHash = getMediaHash(media, 'pictogram');\n  const thumb = getMediaThumbUri(media);\n\n  const mediaBlob = useMedia(mediaHash);\n\n  return (\n    <div className={buildClassName(styles.thumb, index !== undefined && `stars-transaction-media-${index}`, className)}>\n      {thumb && <img className={styles.blurry} src={thumb} alt=\"\" />}\n      {mediaBlob && <img className={styles.full} src={mediaBlob} alt=\"\" />}\n    </div>\n  );\n}\n\nexport default memo(PaidMediaThumb);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aHAxv_Jg\",\"info\":\"oyYrn3II\",\"stars\":\"K5lc75ku\",\"amount\":\"QLQPuLAr\",\"title\":\"e0pK8CJ_\",\"description\":\"xbERdDMQ\",\"date\":\"l6CwQ0Ev\",\"positive\":\"P_42_ZWR\",\"negative\":\"TGjnLJfH\",\"preview\":\"cnjGihOT\",\"subscriptionStar\":\"z43YvnDX\",\"uniqueGiftBackground\":\"eNvzMw2p\",\"giftSticker\":\"U3dqmnM4\"};","import { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransaction,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\nimport type { CustomPeer } from '../../../../types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../../config';\nimport { buildStarsTransactionCustomPeer,\n  formatStarsTransactionAmount,\n  shouldUseCustomPeer } from '../../../../global/helpers/payments';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { CUSTOM_PEER_PREMIUM } from '../../../../util/objects/customPeer';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport renderText from '../../../common/helpers/renderText';\nimport { getTransactionTitle, isNegativeAmount } from '../helpers/transaction';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionItem.module.scss';\n\ntype OwnProps = {\n  transaction: ApiStarsTransaction;\n  className?: string;\n};\n\nconst GIFT_STICKER_SIZE = 36;\n\nfunction selectOptionalPeer(peerId?: string) {\n  return (global: GlobalState) => (\n    peerId ? selectPeer(global, peerId) : undefined\n  );\n}\n\nconst StarsTransactionItem = ({ transaction, className }: OwnProps) => {\n  const { openStarsTransactionModal } = getActions();\n  const {\n    date,\n    amount,\n    photo,\n    peer: transactionPeer,\n    extendedMedia,\n    subscriptionPeriod,\n  } = transaction;\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const peerId = transactionPeer.type === 'peer' ? transactionPeer.id : undefined;\n  const peer = useSelector(selectOptionalPeer(peerId));\n  const starGift = transaction.starGift;\n  const isUniqueGift = starGift?.type === 'starGiftUnique';\n  const giftSticker = starGift && getStickerFromGift(starGift);\n\n  const data = useMemo(() => {\n    let title = getTransactionTitle(oldLang, lang, transaction);\n    let description;\n    let status: string | undefined;\n    let avatarPeer: ApiPeer | CustomPeer | undefined;\n\n    if (!shouldUseCustomPeer(transaction)) {\n      description = peer && getPeerTitle(oldLang, peer);\n      avatarPeer = peer || CUSTOM_PEER_PREMIUM;\n    } else {\n      const customPeer = buildStarsTransactionCustomPeer(transaction);\n      title = customPeer.title || oldLang(customPeer.titleKey!);\n      description = oldLang(customPeer.subtitleKey!);\n      avatarPeer = customPeer;\n    }\n\n    if (transaction.isGiftUpgrade && transaction.starGift?.type === 'starGiftUnique') {\n      description = lang('GiftUnique', { title: transaction.starGift.title, number: transaction.starGift.number });\n    }\n\n    if (transaction.isGiftResale && transaction.starGift?.type === 'starGiftUnique') {\n      description = lang('GiftUnique', { title: transaction.starGift.title, number: transaction.starGift.number });\n    }\n\n    if (transaction.isPostsSearch) {\n      title = getTransactionTitle(oldLang, lang, transaction);\n      description = undefined;\n    }\n\n    if (transaction.photo) {\n      avatarPeer = undefined;\n    }\n\n    if (transaction.isRefund) {\n      status = oldLang('StarsRefunded');\n    }\n\n    if (transaction.hasFailed) {\n      status = oldLang('StarsFailed');\n    }\n\n    if (transaction.isPending) {\n      status = oldLang('StarsPending');\n    }\n\n    return {\n      title,\n      description,\n      avatarPeer,\n      status,\n    };\n  }, [oldLang, lang, peer, transaction]);\n\n  const previewContent = useMemo(() => {\n    if (isUniqueGift) {\n      const { backdrop } = getGiftAttributes(starGift)!;\n      const backgroundColors = [backdrop!.centerColor, backdrop!.edgeColor];\n\n      return (\n        <>\n          <RadialPatternBackground\n            className={styles.uniqueGiftBackground}\n            backgroundColors={backgroundColors}\n          />\n          <AnimatedIconFromSticker\n            className={styles.giftSticker}\n            sticker={giftSticker}\n            size={GIFT_STICKER_SIZE}\n            play={false}\n          />\n        </>\n      );\n    }\n\n    if (giftSticker) {\n      return (\n        <AnimatedIconFromSticker\n          className={styles.giftSticker}\n          sticker={giftSticker}\n          size={GIFT_STICKER_SIZE}\n          play={false}\n        />\n      );\n    }\n\n    if (extendedMedia) {\n      return <PaidMediaThumb media={extendedMedia} isTransactionPreview />;\n    }\n\n    return (\n      <>\n        <Avatar size=\"medium\" webPhoto={photo} peer={data.avatarPeer} />\n        {Boolean(subscriptionPeriod) && (\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n        )}\n      </>\n    );\n  }, [isUniqueGift, extendedMedia, photo, data.avatarPeer, subscriptionPeriod, starGift, giftSticker]);\n\n  const handleClick = useLastCallback(() => {\n    openStarsTransactionModal({ transaction });\n  });\n\n  const amountColorClass = isNegativeAmount(amount) ? styles.negative : styles.positive;\n\n  return (\n    <div className={buildClassName(styles.root, className)} onClick={handleClick}>\n      <div className={styles.preview}>\n        {previewContent}\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{data.title}</h3>\n        {data.description && (\n          <p className={styles.description}>{renderText(data.description)}</p>\n        )}\n        <p className={styles.date}>\n          {formatDateTimeToString(date * 1000, oldLang.code, true)}\n          {data.status && ` — (${data.status})`}\n        </p>\n      </div>\n      <div className={styles.stars}>\n        <span\n          className={buildClassName(styles.amount, amountColorClass)}\n        >\n          {formatStarsTransactionAmount(lang, amount)}\n        </span>\n        {amount.currency === STARS_CURRENCY_CODE && <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />}\n        {amount.currency === TON_CURRENCY_CODE && <Icon name=\"toncoin\" className={amountColorClass} />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsTransactionItem);\n","import { memo, useEffect, useMemo, useState } from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStarTopupOption } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport {\n  PAID_MESSAGES_PURPOSE,\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n  TON_TOPUP_URL_DEFAULT,\n  TON_USD_RATE_DEFAULT,\n} from '../../../config';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectChat, selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { convertCurrencyFromBaseUnit, convertTonToUsd, formatCurrencyAsString } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Modal from '../../ui/Modal';\nimport TabList, { type TabWithProperties } from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ParticlesHeader from '../common/ParticlesHeader.tsx';\nimport BalanceBlock from './BalanceBlock';\nimport StarTopupOptionList from './StarTopupOptionList';\nimport StarsSubscriptionItem from './subscription/StarsSubscriptionItem';\nimport StarsTransactionItem from './transaction/StarsTransactionItem';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nconst TRANSACTION_TYPES = ['all', 'inbound', 'outbound'] as const;\nconst TRANSACTION_TABS_KEYS: RegularLangKey[] = [\n  'StarsTransactionsAll',\n  'StarsTransactionsIncoming',\n  'StarsTransactionsOutgoing',\n];\nconst TRANSACTION_ITEM_CLASS = 'StarsTransactionItem';\nconst SUBSCRIPTION_PURPOSE = 'subs';\n\nexport type OwnProps = {\n  modal: TabState['starsBalanceModal'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  tonBalanceState?: GlobalState['ton'];\n  canBuyPremium?: boolean;\n  shouldForceHeight?: boolean;\n  tonUsdRate?: number;\n  tonTopupUrl: string;\n};\n\nconst StarsBalanceModal = ({\n  modal, starsBalanceState, tonBalanceState, canBuyPremium, shouldForceHeight, tonUsdRate, tonTopupUrl,\n}: OwnProps & StateProps) => {\n  const {\n    closeStarsBalanceModal, loadStarsTransactions, loadStarsSubscriptions, openStarsGiftingPickerModal, openInvoice,\n    openUrl,\n  } = getActions();\n\n  const currency = modal?.currency || STARS_CURRENCY_CODE;\n  const currentState = currency === TON_CURRENCY_CODE ? tonBalanceState : starsBalanceState;\n  const { balance, history } = currentState || {};\n  const { subscriptions } = (currency === STARS_CURRENCY_CODE && starsBalanceState) || {};\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedTabIndex, setSelectedTabIndex] = useState(0);\n  const [areBuyOptionsShown, showBuyOptions, hideBuyOptions] = useFlag();\n\n  const isOpen = Boolean(modal && (starsBalanceState || tonBalanceState));\n\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = modal || {};\n\n  const shouldOpenOnBuy = originStarsPayment || originReaction || originGift || topup;\n\n  const ongoingTransactionAmount = originStarsPayment?.form?.invoice?.totalAmount\n    || originStarsPayment?.subscriptionInfo?.subscriptionPricing?.amount\n    || originReaction?.amount\n    || originGift?.gift.stars\n    || topup?.balanceNeeded;\n  const starsNeeded = ongoingTransactionAmount ? ongoingTransactionAmount - (balance?.amount || 0) : undefined;\n  const starsNeededText = useMemo(() => {\n    const global = getGlobal();\n\n    if (originReaction) {\n      const channel = selectChat(global, originReaction.chatId);\n      if (!channel) return undefined;\n      return oldLang('StarsNeededTextReactions', getChatTitle(oldLang, channel));\n    }\n\n    if (originStarsPayment) {\n      const bot = originStarsPayment.form?.botId ? selectUser(global, originStarsPayment.form.botId) : undefined;\n      if (!bot) return undefined;\n      return oldLang('StarsNeededText', getUserFullName(bot));\n    }\n\n    if (originGift) {\n      const peer = selectUser(global, originGift.peerId);\n      if (!peer) return undefined;\n      return oldLang('StarsNeededTextGift', getPeerTitle(lang, peer));\n    }\n\n    if (topup?.purpose === SUBSCRIPTION_PURPOSE) {\n      return oldLang('StarsNeededTextLink');\n    }\n\n    if (topup?.purpose === PAID_MESSAGES_PURPOSE) {\n      return lang('StarsNeededTextSendPaidMessages', undefined, {\n        withMarkdown: true,\n        withNodes: true,\n      });\n    }\n\n    return undefined;\n  }, [originReaction, originStarsPayment, originGift, topup?.purpose, lang, oldLang]);\n\n  const shouldShowItems = Boolean(history?.all?.transactions.length && !shouldOpenOnBuy);\n  const shouldSuggestGifting = !shouldOpenOnBuy;\n\n  const modalHeight = useMemo(() => {\n    const transactionCount = history?.all?.transactions.length || 0;\n    if (transactionCount == 1) {\n      return '35.5rem';\n    }\n    if (transactionCount == 2) {\n      return '39.25rem';\n    }\n    if (transactionCount == 3) {\n      return '43rem';\n    }\n    return '45rem';\n  }, [history?.all?.transactions.length]);\n\n  const transactionTabs: TabWithProperties[] = useMemo(() => {\n    return TRANSACTION_TABS_KEYS.map((key) => ({\n      title: lang(key),\n    }));\n  }, [lang]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setSelectedTabIndex(0);\n      hideBuyOptions();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (shouldOpenOnBuy) {\n      showBuyOptions();\n      return;\n    }\n\n    hideBuyOptions();\n  }, [shouldOpenOnBuy]);\n\n  const tosText = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />,\n      parts[1],\n    ];\n  }, [isOpen, oldLang]);\n\n  const renderStarsHeaderSection = () => {\n    return (\n      <>\n        <ParticlesHeader\n          model=\"swaying-star\"\n          color=\"gold\"\n          title={starsNeeded ? oldLang('StarsNeededTitle', ongoingTransactionAmount) : oldLang('TelegramStars')}\n          description={renderText(\n            starsNeededText || oldLang('TelegramStarsInfo'),\n            ['simple_markdown', 'emoji'],\n          )}\n          isDisabled={!isOpen}\n        />\n        {canBuyPremium && !areBuyOptionsShown && (\n          <Button\n            className={styles.starButton}\n            onClick={showBuyOptions}\n            fluid\n          >\n            {oldLang('Star.List.BuyMoreStars')}\n          </Button>\n        )}\n        {canBuyPremium && !areBuyOptionsShown && shouldSuggestGifting && (\n          <Button\n            isText\n            noForcedUpperCase\n            className={styles.starButton}\n            fluid\n            onClick={openStarsGiftingPickerModalHandler}\n          >\n            {oldLang('TelegramStarsGift')}\n          </Button>\n        )}\n        {areBuyOptionsShown && starsBalanceState?.topupOptions && (\n          <StarTopupOptionList\n            starsNeeded={starsNeeded}\n            options={starsBalanceState.topupOptions}\n            onClick={handleBuyStars}\n          />\n        )}\n      </>\n    );\n  };\n\n  const renderTonHeaderSection = () => {\n    const tonAmount = convertCurrencyFromBaseUnit(balance?.amount || 0, TON_CURRENCY_CODE);\n    return (\n      <>\n        <ParticlesHeader\n          model=\"speeding-diamond\"\n          color=\"blue\"\n          title={lang('CurrencyTon')}\n          description={lang('DescriptionAboutTon')}\n          isDisabled={!isOpen}\n        />\n        <div className={styles.tonBalanceContainer}>\n          <div className={styles.tonBalance}>\n            <Icon name=\"toncoin\" className={styles.tonIconBalance} />\n            {tonAmount}\n          </div>\n          {Boolean(tonUsdRate) && (\n            <span className={styles.tonInUsd}>\n              {`≈ ${formatCurrencyAsString(\n                convertTonToUsd(balance?.amount || 0, tonUsdRate, true),\n                'USD',\n                lang.code,\n              )}`}\n            </span>\n          )}\n        </div>\n        <Button\n          className={styles.topUpButton}\n          onClick={handleTonTopUp}\n          fluid\n        >\n          {lang('ButtonTopUpViaFragment')}\n        </Button>\n      </>\n    );\n  };\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleLoadMoreTransactions = useLastCallback(() => {\n    loadStarsTransactions({\n      type: TRANSACTION_TYPES[selectedTabIndex],\n      isTon: currency === TON_CURRENCY_CODE,\n    });\n  });\n\n  const handleLoadMoreSubscriptions = useLastCallback(() => {\n    loadStarsSubscriptions();\n  });\n\n  const openStarsGiftingPickerModalHandler = useLastCallback(() => {\n    openStarsGiftingPickerModal({});\n  });\n\n  const handleBuyStars = useLastCallback((option: ApiStarTopupOption) => {\n    openInvoice({\n      type: 'stars',\n      stars: option.stars,\n      currency: option.currency,\n      amount: option.amount,\n    });\n  });\n\n  const handleTonTopUp = useLastCallback(() => {\n    openUrl({ url: tonTopupUrl, shouldSkipModal: true });\n  });\n\n  return (\n    <Modal\n      className={buildClassName(styles.root, !shouldForceHeight && !areBuyOptionsShown && styles.minimal)}\n      isOpen={isOpen}\n      onClose={closeStarsBalanceModal}\n      dialogStyle={`--modal-height: ${modalHeight}`}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n\n          onClick={() => closeStarsBalanceModal()}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        {currency !== TON_CURRENCY_CODE && <BalanceBlock balance={balance} className={styles.modalBalance} />}\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {oldLang('TelegramStars')}\n          </h2>\n        </div>\n        <div className={styles.section}>\n          {currency === TON_CURRENCY_CODE ? renderTonHeaderSection() : renderStarsHeaderSection()}\n        </div>\n        {areBuyOptionsShown && (\n          <div className={styles.tos}>\n            {tosText}\n          </div>\n        )}\n        {currency === TON_CURRENCY_CODE && (\n          <div className={styles.hint}>\n            {lang('TonModalHint')}\n          </div>\n        )}\n        {shouldShowItems && Boolean(subscriptions?.list.length) && (\n          <div className={styles.section}>\n            <h3 className={styles.sectionTitle}>{oldLang('StarMySubscriptions')}</h3>\n            <div className={styles.subscriptions}>\n              {subscriptions?.list.map((subscription) => (\n                <StarsSubscriptionItem\n                  key={subscription.id}\n                  subscription={subscription}\n                />\n              ))}\n              {subscriptions?.nextOffset && (\n                <Button\n                  isText\n                  disabled={subscriptions.isLoading}\n                  size=\"smaller\"\n                  noForcedUpperCase\n                  className={styles.loadMore}\n                  onClick={handleLoadMoreSubscriptions}\n                >\n                  <Icon name=\"down\" className={styles.loadMoreIcon} />\n                  {oldLang('StarMySubscriptionsExpand')}\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n        {shouldShowItems && (\n          <div className={styles.container}>\n            <div className={styles.lastSection}>\n              <Transition\n                name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                activeKey={selectedTabIndex}\n                renderCount={TRANSACTION_TABS_KEYS.length}\n                shouldRestoreHeight\n                className={styles.transition}\n              >\n                <InfiniteScroll\n                  onLoadMore={handleLoadMoreTransactions}\n                  items={history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions}\n                  scrollContainerClosest={`.${styles.main}`}\n                  itemSelector={`.${TRANSACTION_ITEM_CLASS}`}\n                  className={styles.transactions}\n                  noFastList\n                  noScrollRestoreOnTop\n                >\n                  {history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions.map((transaction) => (\n                    <StarsTransactionItem\n                      key={`${transaction.id}-${transaction.isRefund}`}\n                      transaction={transaction}\n                      className={TRANSACTION_ITEM_CLASS}\n                    />\n                  ))}\n                </InfiniteScroll>\n              </Transition>\n            </div>\n            <TabList\n              className={styles.tabs}\n              tabClassName={styles.tab}\n              activeTab={selectedTabIndex}\n              tabs={transactionTabs}\n              onSwitchTab={setSelectedTabIndex}\n            />\n          </div>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const shouldForceHeight = modal?.currency === TON_CURRENCY_CODE\n      ? Boolean(global.ton?.history?.all?.transactions.length)\n      : Boolean(global.stars?.history?.all?.transactions.length);\n\n    return {\n      shouldForceHeight,\n      starsBalanceState: global.stars,\n      tonBalanceState: global.ton,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      tonUsdRate: global.appConfig?.tonUsdRate || TON_USD_RATE_DEFAULT,\n      tonTopupUrl: global.appConfig?.tonTopupUrl || TON_TOPUP_URL_DEFAULT,\n    };\n  },\n)(StarsBalanceModal));\n","import { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiUser,\n} from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\n\nimport { getChatTitle, getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport StarIcon from '../../common/icons/StarIcon';\nimport PeerBadge from '../../common/PeerBadge';\nimport PeerChip from '../../common/PeerChip';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport BalanceBlock from './BalanceBlock';\nimport PaidMediaThumb from './transaction/PaidMediaThumb';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsPayment'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  bot?: ApiUser;\n  paidMediaMessage?: ApiMessage;\n  paidMediaChat?: ApiChat;\n};\n\nconst StarPaymentModal = ({\n  modal,\n  bot,\n  starsBalanceState,\n  paidMediaMessage,\n  paidMediaChat,\n}: OwnProps & StateProps) => {\n  const { closeStarsPaymentModal, openStarsBalanceModal, sendStarPaymentForm } = getActions();\n  const [isLoading, markLoading, unmarkLoading] = useFlag();\n  const isOpen = Boolean(modal?.inputInvoice && starsBalanceState);\n\n  const prevModal = usePrevious(modal);\n  const renderingModal = modal || prevModal;\n\n  const { form, subscriptionInfo } = renderingModal || {};\n  const amount = form?.invoice?.totalAmount || subscriptionInfo?.subscriptionPricing?.amount;\n  const isBotSubscription = Boolean(form?.invoice.subscriptionPeriod);\n  const canShowPeerItem = !subscriptionInfo?.subscriptionPricing;\n\n  const photo = form?.photo;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkLoading();\n    }\n  }, [isOpen]);\n\n  const descriptionText = useMemo(() => {\n    if (!renderingModal?.inputInvoice) {\n      return '';\n    }\n\n    const botName = getUserFullName(bot);\n    const starsText = oldLang('Stars.Intro.PurchasedText.Stars', amount);\n\n    if (paidMediaMessage) {\n      const extendedMedia = paidMediaMessage.content.paidMedia!.extendedMedia as ApiMediaExtendedPreview[];\n      const areAllPhotos = extendedMedia.every((media) => !media.duration);\n      const areAllVideos = extendedMedia.every((media) => Boolean(media.duration));\n\n      const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', extendedMedia.length)\n        : areAllVideos ? oldLang('Stars.Transfer.Videos', extendedMedia.length)\n          : oldLang('Media', extendedMedia.length);\n\n      const channelTitle = getChatTitle(oldLang, paidMediaChat!);\n      return oldLang('Stars.Transfer.UnlockInfo', [mediaText, channelTitle, starsText]);\n    }\n\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeText', {\n        chat: subscriptionInfo.title,\n        amount,\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n        pluralValue: amount!,\n      });\n    }\n\n    if (isBotSubscription) {\n      return lang('StarsSubscribeBotText', {\n        name: form.title,\n        amount,\n        bot: botName,\n      }, {\n        pluralValue: amount!,\n      });\n    }\n\n    return oldLang('Stars.Transfer.Info', [form!.title, botName, starsText]);\n  }, [\n    renderingModal?.inputInvoice, bot, oldLang, amount, paidMediaMessage, subscriptionInfo, isBotSubscription, form,\n    paidMediaChat, lang,\n  ]);\n\n  const disclaimerText = useMemo(() => {\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeInfo', {\n        link: <SafeLink url={lang('StarsSubscribeInfoLink')} text={lang('StarsSubscribeInfoLinkText')} />,\n      }, {\n        withNodes: true,\n      });\n    }\n\n    return undefined;\n  }, [subscriptionInfo, lang]);\n\n  const inviteCustomPeer = useMemo(() => {\n    if (!subscriptionInfo) {\n      return undefined;\n    }\n\n    return getCustomPeerFromInvite(subscriptionInfo);\n  }, [subscriptionInfo]);\n\n  const handlePayment = useLastCallback(() => {\n    const balance = starsBalanceState?.balance;\n    if (amount === undefined || balance === undefined) {\n      return;\n    }\n\n    if (amount > balance.amount) {\n      openStarsBalanceModal({\n        originStarsPayment: modal,\n      });\n      return;\n    }\n\n    sendStarPaymentForm({});\n    markLoading();\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.paymentContent}\n      isOpen={isOpen}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={closeStarsPaymentModal}\n    >\n      <BalanceBlock balance={starsBalanceState?.balance} className={styles.modalBalance} />\n      <div className={styles.paymentImages} dir={oldLang.isRtl ? 'ltr' : 'rtl'}>\n        {paidMediaMessage ? (\n          <PaidMediaThumb media={paidMediaMessage.content.paidMedia!.extendedMedia} />\n        ) : inviteCustomPeer ? (\n          <>\n            <Avatar className={styles.paymentPhoto} peer={inviteCustomPeer} size=\"giant\" />\n            <StarIcon type=\"gold\" size=\"adaptive\" className={styles.avatarStar} />\n          </>\n        ) : (\n          <PeerBadge\n            peer={!photo ? bot : undefined}\n            avatarWebPhoto={photo}\n            avatarSize=\"giant\"\n            badgeIcon=\"star\"\n            badgeText={formatInteger(amount!)}\n            badgeClassName={styles.amountBadge}\n            className={styles.paymentPhoto}\n          />\n        )}\n        <img className={styles.paymentImageBackground} src={StarsBackground} alt=\"\" draggable={false} />\n      </div>\n      <h2 className={styles.headerText}>\n        {inviteCustomPeer ? oldLang('StarsSubscribeTitle') : oldLang('StarsConfirmPurchaseTitle')}\n      </h2>\n      {canShowPeerItem && <PeerChip className={styles.botItem} peerId={form?.botId} />}\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <Button className={styles.paymentButton} size=\"smaller\" onClick={handlePayment} isLoading={isLoading}>\n        {lang(isBotSubscription ? 'StarsSubscribeBotButtonMonth' : 'StarsPay', {\n          amount: formatStarsAsIcon(lang, amount!, { asFont: true }),\n        }, {\n          withNodes: true,\n        })}\n      </Button>\n      {Boolean(disclaimerText) && (\n        <div className={buildClassName(styles.disclaimer, styles.smallerText)}>\n          {disclaimerText}\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const bot = modal?.form?.botId ? selectUser(global, modal.form.botId) : undefined;\n\n    const messageInputInvoice = modal?.inputInvoice?.type === 'message' ? modal.inputInvoice : undefined;\n    const message = messageInputInvoice\n      ? selectChatMessage(global, messageInputInvoice.chatId, messageInputInvoice.messageId) : undefined;\n    const chat = messageInputInvoice ? selectChat(global, messageInputInvoice.chatId) : undefined;\n    const isPaidMedia = message?.content.paidMedia;\n\n    return {\n      bot,\n      starsBalanceState: global.stars,\n      paidMediaMessage: isPaidMedia ? message : undefined,\n      paidMediaChat: isPaidMedia ? chat : undefined,\n    };\n  },\n)(StarPaymentModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"irv1C8bo\",\"subtitleBadge\":\"V7kDVPLm\",\"radialPattern\":\"UvhsGZLf\",\"amount\":\"zTVWZg63\",\"sticker\":\"a1ASgPwu\",\"transition\":\"Tu6_OHoq\",\"transitionSlide\":\"iUTKLzTN\",\"title\":\"ECTvfOda\",\"subtitle\":\"S6JwvHWD\"};","import type { TeactNode } from '@teact';\nimport { memo, useMemo } from '@teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarGiftAttributeBackdrop, ApiStarGiftAttributeModel, ApiStarGiftAttributePattern,\n  ApiTypeCurrencyAmount } from '../../../api/types';\n\nimport {\n  formatStarsTransactionAmount,\n} from '../../../global/helpers/payments';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport { useTransitionActiveKey } from '../../../hooks/animations/useTransitionActiveKey';\nimport useFlag from '../../../hooks/useFlag.ts';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport RadialPatternBackground from '../../common/profile/RadialPatternBackground';\nimport Transition from '../../ui/Transition';\n\nimport styles from './UniqueGiftHeader.module.scss';\n\ntype OwnProps = {\n  modelAttribute: ApiStarGiftAttributeModel;\n  backdropAttribute: ApiStarGiftAttributeBackdrop;\n  patternAttribute: ApiStarGiftAttributePattern;\n  title?: string;\n  subtitle?: TeactNode;\n  subtitlePeer?: ApiPeer;\n  className?: string;\n  resellPrice?: ApiTypeCurrencyAmount;\n};\n\nconst STICKER_SIZE = 120;\n\nconst UniqueGiftHeader = ({\n  modelAttribute,\n  backdropAttribute,\n  patternAttribute,\n  title,\n  subtitle,\n  subtitlePeer,\n  className,\n  resellPrice,\n}: OwnProps) => {\n  const {\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHover, markHover, unmarkHover] = useFlag();\n  const activeKey = useTransitionActiveKey([modelAttribute, backdropAttribute, patternAttribute]);\n  const subtitleColor = backdropAttribute?.textColor;\n\n  const radialPatternBackdrop = useMemo(() => {\n    const backdropColors = [backdropAttribute.centerColor, backdropAttribute.edgeColor];\n    const patternColor = backdropAttribute.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={patternAttribute.sticker}\n      />\n    );\n  }, [backdropAttribute, patternAttribute]);\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      <Transition\n        className={styles.transition}\n        slideClassName={buildClassName('interactive-gift', styles.transitionSlide)}\n        activeKey={activeKey}\n        direction={1}\n        name=\"zoomBounceSemiFade\"\n      >\n        {radialPatternBackdrop}\n        <AnimatedIconFromSticker\n          className={styles.sticker}\n          sticker={modelAttribute.sticker}\n          size={STICKER_SIZE}\n          noLoop={!isHover}\n          onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n          onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n        />\n      </Transition>\n      {title && <h1 className={styles.title}>{title}</h1>}\n      {Boolean(subtitle) && (\n        <div\n          className={buildClassName(styles.subtitle, subtitlePeer && styles.subtitleBadge)}\n          style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}\n          onClick={() => {\n            if (subtitlePeer) {\n              openChat({ id: subtitlePeer.id });\n            }\n          }}\n        >\n          {subtitle}\n        </div>\n      )}\n      {resellPrice && (\n        <p className={styles.amount}>\n          <span>\n            {formatStarsTransactionAmount(lang, resellPrice)}\n          </span>\n          {resellPrice.currency === 'XTR' && <StarIcon type=\"gold\" size=\"middle\" />}\n          {resellPrice.currency === 'TON' && <Icon name=\"toncoin\" />}\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default memo(UniqueGiftHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"IzhfRIWu\",\"positive\":\"jvBZSrpd\",\"negative\":\"xDyq9cc0\",\"header\":\"qBOIq6Jn\",\"uniqueGift\":\"ApoQz22o\",\"amount\":\"sso9uZM6\",\"title\":\"ZZAj3hj7\",\"description\":\"NuWOY7ED\",\"tid\":\"tMF8VIOM\",\"refunded\":\"sxWAwxTd\",\"totalStars\":\"Z2YALGgl\",\"starIcon\":\"cU5QlvwL\",\"footer\":\"KgzPpgS6\",\"starsBackground\":\"nML8IQqX\",\"copyIcon\":\"voCttFzS\",\"mediaPreview\":\"C5r59yiV\",\"subtitle\":\"mFYcIYMJ\",\"starGiftSticker\":\"j3akHdtm\",\"avatar\":\"hcrszlpT\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransactionPeer, ApiSticker,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../../config';\nimport { getMessageLink } from '../../../../global/helpers';\nimport {\n  buildStarsTransactionCustomPeer,\n  formatStarsTransactionAmount,\n  shouldUseCustomPeer,\n} from '../../../../global/helpers/payments';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForStars,\n  selectGiftStickerForTon,\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { formatStarsAsIcon } from '../../../../util/localization/format';\nimport { formatPercent } from '../../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { getTransactionTitle, isNegativeAmount } from '../helpers/transaction';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport InteractiveSparkles from '../../../common/InteractiveSparkles';\nimport SafeLink from '../../../common/SafeLink';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport UniqueGiftHeader from '../../gift/UniqueGiftHeader';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionModal.module.scss';\n\nconst AVATAR_SPARKLES_CENTER_SHIFT = [0, -50] as const;\n\nexport type OwnProps = {\n  modal: TabState['starsTransactionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  canPlayAnimatedEmojis?: boolean;\n  topSticker?: ApiSticker;\n  paidMessageCommission?: number;\n};\n\nconst StarsTransactionModal: FC<OwnProps & StateProps> = ({\n  modal,\n  peer,\n  canPlayAnimatedEmojis,\n  topSticker,\n  paidMessageCommission,\n}) => {\n  const { showNotification, openMediaViewer, closeStarsTransactionModal } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const { transaction } = modal || {};\n  const triggerSparklesRef = useRef<(() => void) | undefined>();\n\n  const handleOpenMedia = useLastCallback(() => {\n    const media = transaction?.extendedMedia;\n    if (!media) return;\n\n    openMediaViewer({\n      origin: MediaViewerOrigin.StarsTransaction,\n      standaloneMedia: media.flatMap((item) => Object.values(item)),\n    });\n  });\n\n  const handleAvatarMouseMove = useLastCallback(() => {\n    triggerSparklesRef.current?.();\n  });\n\n  const handleRequestAnimation = useLastCallback((animate: NoneToVoidFunction) => {\n    triggerSparklesRef.current = animate;\n  });\n\n  const starModalData = useMemo(() => {\n    if (!transaction) {\n      return undefined;\n    }\n\n    const {\n      giveawayPostId, photo, amount, isGiftUpgrade, starGift, isGiftResale,\n      starRefCommision,\n    } = transaction;\n\n    const gift = transaction?.starGift;\n    const isUniqueGift = gift?.type === 'starGiftUnique';\n    const sticker = transaction?.starGift ? getStickerFromGift(transaction.starGift) : topSticker;\n\n    const giftAttributes = isUniqueGift ? getGiftAttributes(gift) : undefined;\n\n    const customPeer = (transaction.peer && shouldUseCustomPeer(transaction)\n      && buildStarsTransactionCustomPeer(transaction)) || undefined;\n\n    const peerId = transaction.peer?.type === 'peer' ? transaction.peer.id : undefined;\n    const toName = transaction.peer && oldLang(getStarsPeerTitleKey(transaction.peer));\n\n    const title = getTransactionTitle(oldLang, lang, transaction);\n\n    const messageLink = peer && transaction.messageId && !isGiftUpgrade\n      ? getMessageLink(peer, undefined, transaction.messageId) : undefined;\n    const giveawayMessageLink = peer && giveawayPostId ? getMessageLink(peer, undefined, giveawayPostId) : undefined;\n\n    const media = transaction.extendedMedia;\n\n    const mediaAmount = media?.length || 0;\n    const areAllPhotos = media?.every((m) => !m.video);\n    const areAllVideos = media?.every((m) => !m.photo);\n\n    const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', mediaAmount)\n      : areAllVideos ? oldLang('Stars.Transfer.Videos', mediaAmount)\n        : oldLang('Media', mediaAmount);\n\n    const description = transaction.description\n      || (isGiftUpgrade && starGift?.type === 'starGiftUnique' ? starGift.title : undefined)\n      || (media ? mediaText : undefined);\n\n    const shouldDisplayAvatar = !media && !sticker && !transaction.isPostsSearch;\n    const avatarPeer = !photo ? ((!shouldUseCustomPeer(transaction) && peer) || customPeer) : undefined;\n\n    const uniqueGiftHeader = isUniqueGift && (\n      <div className={buildClassName(styles.header, styles.uniqueGift)}>\n        <UniqueGiftHeader\n          backdropAttribute={giftAttributes!.backdrop!}\n          patternAttribute={giftAttributes!.pattern!}\n          modelAttribute={giftAttributes!.model!}\n          title={gift.title}\n          subtitle={lang('GiftInfoCollectible', { number: gift.number })}\n          resellPrice={transaction.amount}\n        />\n      </div>\n    );\n\n    const amountColorClass = isNegativeAmount(amount) ? styles.negative : styles.positive;\n\n    const regularHeader = (\n      <div className={styles.header}>\n        {media && (\n          <PaidMediaThumb\n            className={buildClassName(styles.mediaPreview, 'transaction-media-preview')}\n            media={media}\n            onClick={handleOpenMedia}\n          />\n        )}\n        {!media && sticker && (\n          <AnimatedIconFromSticker\n            key={transaction.id}\n            sticker={sticker}\n            play={canPlayAnimatedEmojis}\n            noLoop\n          />\n        )}\n        {shouldDisplayAvatar && (\n          <Avatar\n            className={styles.avatar}\n            peer={avatarPeer}\n            webPhoto={photo}\n            size=\"giant\"\n            onMouseMove={handleAvatarMouseMove}\n          />\n        )}\n        {!sticker && !transaction.isPostsSearch && (\n          <InteractiveSparkles\n            className={buildClassName(styles.starsBackground)}\n            color=\"gold\"\n            onRequestAnimation={handleRequestAnimation}\n            centerShift={AVATAR_SPARKLES_CENTER_SHIFT}\n          />\n        )}\n        {Boolean(title) && <h1 className={styles.title}>{title}</h1>}\n        <p className={styles.description}>{description}</p>\n        <p className={styles.amount}>\n          <span\n            className={buildClassName(styles.amount, amountColorClass)}\n          >\n            {formatStarsTransactionAmount(lang, amount)}\n          </span>\n          {amount.currency === STARS_CURRENCY_CODE && <StarIcon type=\"gold\" size=\"middle\" />}\n          {amount.currency === 'TON' && <Icon name=\"toncoin\" className={amountColorClass} />}\n          {transaction.isRefund && (\n            <p className={styles.refunded}>{lang('Refunded')}</p>\n          )}\n        </p>\n        {Boolean(transaction.paidMessages && transaction.starRefCommision && paidMessageCommission) && (\n          <p className={styles.description}>\n            {lang(\n              'PaidMessageTransactionDescription',\n              { percent: formatPercent(paidMessageCommission! / 10) },\n              {\n                withNodes: true,\n                withMarkdown: true,\n              },\n            )}\n          </p>\n        )}\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    if (transaction && starRefCommision && !transaction.paidMessages && !isGiftResale) {\n      tableData.push([\n        oldLang('StarsTransaction.StarRefReason.Title'),\n        oldLang('StarsTransaction.StarRefReason.Program'),\n      ]);\n    }\n\n    if (isGiftUpgrade) {\n      tableData.push([\n        oldLang('StarGiftReason'),\n        oldLang('StarGiftReasonUpgrade'),\n      ]);\n    }\n\n    if (isGiftResale) {\n      tableData.push([\n        oldLang('StarGiftReason'),\n        isNegativeAmount(transaction.amount)\n          ? lang('StarGiftSaleTransaction')\n          : lang('StarGiftPurchaseTransaction'),\n      ]);\n    }\n\n    let peerLabel;\n    if (isGiftUpgrade) {\n      peerLabel = oldLang('Stars.Transaction.GiftFrom');\n    } else if (isNegativeAmount(amount) || transaction.isMyGift) {\n      peerLabel = oldLang('Stars.Transaction.To');\n    } else if (transaction.starRefCommision && !transaction.paidMessages && !isGiftResale) {\n      peerLabel = oldLang('StarsTransaction.StarRefReason.Miniapp');\n    } else if (peerId) {\n      peerLabel = oldLang('Star.Transaction.From');\n    } else {\n      peerLabel = oldLang('Stars.Transaction.Via');\n    }\n\n    if (!transaction.isPostsSearch) {\n      tableData.push([\n        peerLabel,\n        peerId ? { chatId: peerId } : toName || '',\n      ]);\n    }\n\n    if (transaction.starRefCommision && transaction.paidMessages) {\n      tableData.push([\n        lang('PaidMessageTransactionTotal'),\n        formatStarsAsIcon(lang,\n          transaction.amount.amount / ((100 - transaction.starRefCommision) / 100),\n          { asFont: false, className: styles.starIcon, containerClassName: styles.totalStars }),\n      ]);\n    }\n\n    if (messageLink) {\n      tableData.push([oldLang('Stars.Transaction.Reaction.Post'), <SafeLink url={messageLink} text={messageLink} />]);\n    }\n\n    if (giveawayMessageLink && transaction.amount.currency === STARS_CURRENCY_CODE) {\n      tableData.push([oldLang('BoostReason'), <SafeLink url={giveawayMessageLink} text={oldLang('Giveaway')} />]);\n      tableData.push([oldLang('Gift'), oldLang('Stars', transaction.amount, 'i')]);\n    }\n\n    if (transaction.id) {\n      tableData.push([\n        oldLang('Stars.Transaction.Id'),\n        (\n          <>\n            <div\n              className={styles.tid}\n              onClick={() => {\n                copyTextToClipboard(transaction.id!);\n                showNotification({\n                  message: oldLang('StarsTransactionIDCopied'),\n                });\n              }}\n            >\n              {transaction.id}\n            </div>\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </>\n        ),\n      ]);\n    }\n\n    tableData.push([\n      oldLang('Stars.Transaction.Date'),\n      formatDateTimeToString(transaction.date * 1000, oldLang.code, true),\n    ]);\n\n    const footerText = oldLang('lng_credits_box_out_about');\n    const footerTextParts = footerText.split('{link}');\n\n    const footer = (\n      <span className={styles.footer}>\n        {footerTextParts[0]}\n        <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />\n        {footerTextParts[1]}\n      </span>\n    );\n\n    return {\n      header: isUniqueGift ? uniqueGiftHeader : regularHeader,\n      tableData,\n      footer,\n    };\n  }, [transaction, oldLang, lang, peer, canPlayAnimatedEmojis, topSticker,\n    paidMessageCommission, handleRequestAnimation]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(transaction)}\n      className={styles.modal}\n      hasBackdrop={transaction?.starGift?.type === 'starGiftUnique'}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      buttonText={oldLang('OK')}\n      onClose={closeStarsTransactionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.transaction?.peer?.type === 'peer' && modal.transaction.peer.id;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n    const paidMessageCommission = global.appConfig?.starsPaidMessageCommissionPermille;\n\n    const currencyAmount = modal?.transaction.amount;\n    const starsGiftSticker = modal?.transaction.isGift\n      ? (currencyAmount?.currency === STARS_CURRENCY_CODE ? selectGiftStickerForStars(global, currencyAmount?.amount)\n        : selectGiftStickerForTon(global, currencyAmount?.amount)) : undefined;\n\n    return {\n      peer,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      topSticker: starsGiftSticker,\n      paidMessageCommission,\n    };\n  },\n)(StarsTransactionModal));\n\nfunction getStarsPeerTitleKey(peer: ApiStarsTransactionPeer) {\n  switch (peer.type) {\n    case 'appStore':\n      return 'AppStore';\n    case 'playMarket':\n      return 'PlayMarket';\n    case 'fragment':\n      return 'Fragment';\n    case 'premiumBot':\n      return 'StarsTransactionBot';\n    case 'ads':\n      return 'StarsTransactionAds';\n    case 'api':\n      return 'Stars.Intro.Transaction.TelegramBotApi.Subtitle';\n    default:\n      return 'Stars.Transaction.Unsupported.Title';\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"eR_RZfGB\",\"header\":\"E3R22yAI\",\"title\":\"qdydQHgc\",\"amount\":\"FI6rEJlK\",\"footer\":\"GMWMuWCr\",\"starsBackground\":\"zGCayu45\",\"subscriptionStar\":\"enRetSny\",\"amountStar\":\"J8HIcN6k\",\"secondary\":\"oBLHWBtJ\",\"danger\":\"nkwiG25Q\",\"avatarWrapper\":\"wuTMXDP9\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../../config';\nimport { isApiPeerUser } from '../../../../global/helpers/peers';\nimport {\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport InteractiveSparkles from '../../../common/InteractiveSparkles';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\n\nimport styles from './StarsSubscriptionModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['starsSubscriptionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n};\n\nconst AVATAR_SPARKLES_CENTER_SHIFT = [0, -50] as const;\n\nconst StarsSubscriptionModal: FC<OwnProps & StateProps> = ({\n  modal, peer,\n}) => {\n  const {\n    closeStarsSubscriptionModal,\n    fulfillStarsSubscription,\n    changeStarsSubscription,\n    checkChatInvite,\n    loadStarStatus,\n    openInvoice,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { subscription } = modal || {};\n  const triggerSparklesRef = useRef<(() => void) | undefined>();\n\n  const handleAvatarMouseMove = useLastCallback(() => {\n    triggerSparklesRef.current?.();\n  });\n\n  const handleRequestAnimation = useLastCallback((animate: NoneToVoidFunction) => {\n    triggerSparklesRef.current = animate;\n  });\n\n  const buttonState = useMemo(() => {\n    if (!subscription) {\n      return 'hidden';\n    }\n\n    if (subscription.canRefulfill) {\n      return 'refulfill';\n    }\n\n    const isActive = subscription.until > Date.now() / 1000;\n    if (isActive && !subscription.isCancelled) {\n      return 'cancel';\n    }\n\n    if (isActive && subscription.isCancelled) {\n      return 'renew';\n    }\n\n    const canRestart = subscription.chatInviteHash || subscription.invoiceSlug;\n    if (!isActive && canRestart) {\n      return 'restart';\n    }\n\n    return 'ok';\n  }, [subscription]);\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!subscription) {\n      return;\n    }\n\n    switch (buttonState) {\n      case 'refulfill': {\n        fulfillStarsSubscription({ id: subscription.id });\n        break;\n      }\n      case 'restart': {\n        if (subscription.chatInviteHash) {\n          checkChatInvite({ hash: subscription.chatInviteHash });\n        } else if (subscription.invoiceSlug) {\n          openInvoice({\n            type: 'slug',\n            slug: subscription.invoiceSlug,\n          });\n        }\n        loadStarStatus();\n        break;\n      }\n      case 'renew': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: false });\n        break;\n      }\n      case 'cancel': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: true });\n        break;\n      }\n    }\n    closeStarsSubscriptionModal();\n  });\n\n  const starModalData = useMemo(() => {\n    if (!subscription || !peer) {\n      return undefined;\n    }\n\n    const {\n      pricing, until, isCancelled, canRefulfill, photo, title, hasBotCancelled,\n    } = subscription;\n\n    const isBotSubscription = isApiPeerUser(peer);\n\n    const header = (\n      <div className={styles.header}>\n        <div className={styles.avatarWrapper}>\n          <Avatar\n            peer={!photo ? peer : undefined}\n            webPhoto={photo}\n            size=\"giant\"\n            onMouseMove={handleAvatarMouseMove}\n          />\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"adaptive\" />\n        </div>\n        <InteractiveSparkles\n          className={buildClassName(styles.starsBackground)}\n          color=\"gold\"\n          onRequestAnimation={handleRequestAnimation}\n          centerShift={AVATAR_SPARKLES_CENTER_SHIFT}\n        />\n        <h1 className={styles.title}>{title || oldLang('StarsSubscriptionTitle')}</h1>\n        <p className={styles.amount}>\n          {lang('StarsPerMonth', {\n            amount: pricing.amount,\n          }, {\n            withNodes: true,\n            specialReplacement: {\n              [STARS_ICON_PLACEHOLDER]: <StarIcon className={styles.amountStar} size=\"adaptive\" type=\"gold\" />,\n            },\n          })}\n        </p>\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    tableData.push([\n      oldLang(isBotSubscription ? 'StarsSubscriptionBot' : 'StarsSubscriptionChannel'),\n      { chatId: peer.id },\n    ]);\n\n    if (title) {\n      tableData.push([\n        oldLang('StarsSubscriptionBotProduct'),\n        title,\n      ]);\n    }\n\n    const hasExpired = until < Date.now() / 1000;\n    tableData.push([\n      oldLang(hasExpired ? 'StarsSubscriptionUntilExpired'\n        : isCancelled ? 'StarsSubscriptionUntilExpires' : 'StarsSubscriptionUntilRenews'),\n      formatDateTimeToString(until * 1000, oldLang.code, true),\n    ]);\n\n    const footerTos = lang('StarsTransactionTOS', {\n      link: <SafeLink url={lang('StarsTransactionTOSLink')} text={lang('StarsTransactionTOSLinkText')} />,\n    }, {\n      withNodes: true,\n    });\n\n    const footer = (\n      <span className={styles.footer}>\n        <p className={styles.secondary}>{footerTos}</p>\n        {isCancelled && (\n          <p className={styles.danger}>\n            {oldLang(hasBotCancelled ? 'StarsSubscriptionBotCancelledText' : 'StarsSubscriptionCancelledText')}\n          </p>\n        )}\n        {canRefulfill && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionRefulfillInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionExpiredInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && !hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionCancelInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {buttonState !== 'hidden' && (\n          <Button\n            size=\"smaller\"\n            color={buttonState === 'cancel' ? 'danger' : 'primary'}\n            isText={buttonState === 'cancel'}\n            onClick={handleButtonClick}\n          >\n            {oldLang(\n              buttonState === 'cancel' ? 'StarsSubscriptionCancel'\n                : buttonState === 'refulfill' ? 'StarsSubscriptionRefulfill'\n                  : buttonState === 'restart' ? 'StarsSubscriptionAgain'\n                    : buttonState === 'renew' ? 'StarsSubscriptionRenew' : 'OK',\n            )}\n          </Button>\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [buttonState, lang, oldLang, peer, subscription]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(subscription)}\n      className={styles.modal}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      onClose={closeStarsSubscriptionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.subscription.peerId;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n    return {\n      peer,\n    };\n  },\n)(StarsSubscriptionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CuBAw2yg\",\"slider\":\"euOOAbZi\",\"sparkles\":\"_L1YQTIP\",\"progress\":\"kwK0cNPX\",\"floatingBadgeWrapper\":\"uvlMoXj0\",\"floatingBadge\":\"BGSDWAYc\",\"floatingBadgeText\":\"qqQan8uF\",\"floatingBadgeTriangle\":\"mIdJOmsB\"};","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport Sparkles from '../../common/Sparkles';\n\nimport styles from './StarSlider.module.scss';\n\ntype OwnProps = {\n  maxValue: number;\n  defaultValue: number;\n  className?: string;\n  onChange: (value: number) => void;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst StarSlider = ({\n  maxValue,\n  defaultValue,\n  className,\n  onChange,\n}: OwnProps) => {\n  const floatingBadgeRef = useRef<HTMLDivElement>();\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < maxValue) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= maxValue) {\n        result.push(maxValue);\n        break;\n      }\n    }\n\n    return result;\n  }, [maxValue]);\n\n  const [value, setValue] = useState(0);\n\n  useEffectOnce(() => {\n    setValue(getProgress(points, defaultValue));\n  });\n\n  const updateSafeBadgePosition = useLastCallback(() => {\n    const badge = floatingBadgeRef.current;\n    if (!badge) return;\n    const parent = badge.parentElement!;\n\n    requestMeasure(() => {\n      const safeMinX = parent.offsetLeft + badge.offsetWidth / 2;\n      const safeMaxX = parent.offsetLeft + parent.offsetWidth - badge.offsetWidth / 2;\n\n      requestMutation(() => {\n        parent.style.setProperty('--_min-x', `${safeMinX}px`);\n        parent.style.setProperty('--_max-x', `${safeMaxX}px`);\n      });\n    });\n  });\n\n  useResizeObserver(floatingBadgeRef, updateSafeBadgePosition);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    setValue(newValue);\n\n    onChange(getValue(points, newValue));\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} style={`--progress: ${value / points.length}`}>\n      <div className={styles.floatingBadgeWrapper}>\n        <div className={styles.floatingBadge} ref={floatingBadgeRef}>\n          <div className={styles.floatingBadgeText}>\n            <Icon name=\"star\" className={styles.floatingBadgeIcon} />\n            <AnimatedCounter text={formatInteger(getValue(points, value))} />\n          </div>\n          <svg className={styles.floatingBadgeTriangle} width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\">\n            <defs>\n              <linearGradient id=\"StarBadgeTriangle\" x1=\"0\" x2=\"1\" y1=\"0\" y2=\"0\">\n                <stop offset=\"-50%\" stop-color=\"#FFAA00\" />\n                <stop offset=\"150%\" stop-color=\"#FFCD3A\" />\n              </linearGradient>\n            </defs>\n            <path d=\"m 28,4 v 9 c 0.0089,7.283278 -3.302215,5.319646 -6.750951,8.589815 l -5.8284,5.82843 c -0.781,0.78105 -2.0474,0.78104 -2.8284,0 L 6.7638083,21.589815 C 2.8288652,17.959047 0.04527024,20.332086 0,13 V 4 C 0,4 0.00150581,0.97697493 3,1 5.3786658,1.018266 22.594519,0.9142007 25,1 c 2.992326,0.1067311 3,3 3,3 z\" fill=\"url(#StarBadgeTriangle)\" />\n          </svg>\n        </div>\n      </div>\n      <div className={styles.progress}>\n        <Sparkles preset=\"progress\" className={styles.sparkles} />\n      </div>\n      <input\n        className={styles.slider}\n        type=\"range\"\n        min={0}\n        max={points.length}\n        defaultValue={getProgress(points, defaultValue)}\n        step=\"any\"\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const value = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return Math.round(value);\n}\n\nexport default memo(StarSlider);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"RdhRpsCn\",\"title\":\"yzbjj73U\",\"slider\":\"xePPMXOI\",\"description\":\"BlpfdOtK\",\"itemInfo\":\"nS9V516D\",\"itemTitle\":\"sH5Nukjy\",\"itemSubtitle\":\"dHlNODTI\",\"itemIcon\":\"H_iHihXU\",\"sendAsPeerButtonAvatar\":\"_mjvLELm\",\"sendAsPeerMenuButton\":\"zxsRaWYV\",\"buttonDownIcon\":\"zrwUUELS\",\"sendAsPeerMenuBubble\":\"X1PB6mhQ\",\"sendAsPeerMenu\":\"Px1MDij9\",\"sendAsPeersMenuContainer\":\"Al1nfhHJ\",\"headerControlPanel\":\"vu90kSL_\",\"separator\":\"uhQLUjmo\",\"checkBox\":\"Mc3bVeF0\",\"topLabel\":\"bnou4CpV\",\"top\":\"QludQDKR\",\"topBadge\":\"JBF9pTUK\",\"buttonStar\":\"NJJFuym9\",\"topPeer\":\"Ty4Ud_Rd\",\"disclaimer\":\"KRvkHeo1\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPaidReactionPrivacyType,\n  ApiPeer,\n  ApiSendAsPeerId,\n  ApiStarsAmount, ApiUser,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../config';\nimport { getPeerTitle, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectPeer, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport PeerBadge from '../../common/PeerBadge';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport StarSlider from './StarSlider';\n\nimport styles from './PaidReactionModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['paidReactionModal'];\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  chat?: ApiChat;\n  maxAmount: number;\n  starBalance?: ApiStarsAmount;\n  defaultPrivacy?: ApiPaidReactionPrivacyType;\n  sendPaidReactionsAsPeerIds?: ApiSendAsPeerId[];\n  currentUserId: string;\n  currentUser: ApiUser;\n};\n\ntype ReactorData = {\n  amount: number;\n  localAmount: number;\n  isMy?: boolean;\n  isAnonymous?: boolean;\n  user?: ApiPeer;\n};\n\nconst MAX_TOP_REACTORS = 3;\nconst DEFAULT_STARS_AMOUNT = 50;\nconst MAX_REACTION_AMOUNT = 2500;\nconst ANONYMOUS_PEER: CustomPeer = {\n  avatarIcon: 'author-hidden',\n  customPeerAvatarColor: '#9eaab5',\n  isCustomPeer: true,\n  titleKey: 'StarsReactionAnonymous',\n};\n\nconst PaidReactionModal = ({\n  modal,\n  chat,\n  message,\n  maxAmount,\n  starBalance,\n  defaultPrivacy,\n  sendPaidReactionsAsPeerIds,\n  currentUserId,\n  currentUser,\n}: OwnProps & StateProps) => {\n  const { closePaidReactionModal, addLocalPaidReaction, loadSendPaidReactionsAs } = getActions();\n\n  const [starsAmount, setStarsAmount] = useState(DEFAULT_STARS_AMOUNT);\n  const [isTouched, markTouched, unmarkTouched] = useFlag();\n  const [shouldSendAsAnonymous, setShouldSendAsAnonymous] = useState(true);\n  const [sendAsPeerId, setSendAsPeerId] = useState(currentUserId);\n\n  const chatId = chat?.id;\n\n  const senderPeer = sendAsPeerId ? (selectPeer(getGlobal(), sendAsPeerId)) : currentUser;\n\n  const oldLang = useOldLang();\n  const { isMobile } = useAppLayout();\n  const lang = useLang();\n\n  const handleShowInTopSendersChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setShouldSendAsAnonymous(!e.target.checked);\n  });\n\n  const handleAmountChange = useLastCallback((value: number) => {\n    setStarsAmount(value);\n    markTouched();\n  });\n\n  useEffect(() => {\n    if (chatId && !sendPaidReactionsAsPeerIds) {\n      loadSendPaidReactionsAs({ chatId });\n    }\n  }, [chatId, sendPaidReactionsAsPeerIds]);\n\n  const filteredMyReactorIds = useMemo(() => {\n    const result = sendPaidReactionsAsPeerIds?.map((peer) => peer.id)\n      .filter((id) => id !== chatId);\n    result?.unshift(currentUserId);\n    return result;\n  }, [sendPaidReactionsAsPeerIds, chatId, currentUserId]);\n\n  const canChangeSendAsPeer = filteredMyReactorIds && filteredMyReactorIds.length > 1;\n\n  useEffect(() => {\n    if (!modal) {\n      unmarkTouched();\n    }\n  }, [modal]);\n\n  useEffect(() => {\n    const currentReactor = message?.reactions?.topReactors?.find((reactor) => reactor.isMy);\n    if (currentReactor) {\n      setShouldSendAsAnonymous(Boolean(currentReactor.isAnonymous));\n      if (currentReactor.peerId) {\n        setSendAsPeerId(currentReactor.peerId);\n      }\n      return;\n    }\n\n    setShouldSendAsAnonymous(defaultPrivacy?.type === 'anonymous' || false);\n    if (defaultPrivacy?.type === 'peer' && filteredMyReactorIds?.includes(defaultPrivacy.peerId)) {\n      setSendAsPeerId(defaultPrivacy.peerId);\n      return;\n    }\n\n    setSendAsPeerId(currentUserId);\n  }, [defaultPrivacy, message?.reactions?.topReactors, filteredMyReactorIds, currentUserId]);\n\n  const handleSend = useLastCallback(() => {\n    if (!modal) return;\n\n    addLocalPaidReaction({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      count: starsAmount,\n      isPrivate: shouldSendAsAnonymous,\n      peerId: shouldSendAsAnonymous || sendAsPeerId === currentUserId ? undefined : sendAsPeerId,\n      shouldIgnoreDefaultPrivacy: true,\n    });\n    closePaidReactionModal();\n  });\n\n  const handleSendAsPeerChange = useLastCallback((peerId: string) => {\n    setShouldSendAsAnonymous(false);\n    setSendAsPeerId(peerId);\n  });\n\n  const renderMenuItem = useLastCallback((peerId: string) => {\n    const peer = selectPeer(getGlobal(), peerId);\n    const isSelected = sendAsPeerId === peerId && !shouldSendAsAnonymous;\n    if (!peer) return undefined;\n\n    return (\n      <MenuItem\n\n        onClick={() => handleSendAsPeerChange(peerId)}\n      >\n        <Avatar\n          size=\"small\"\n          peer={peer}\n        />\n        <div className={buildClassName(styles.itemInfo)}>\n          <FullNameTitle className={styles.itemTitle} peer={peer} noFake noVerified />\n          <span className={styles.itemSubtitle}>\n            {isApiPeerUser(peer) ? lang('PeerPersonalAccount') : lang('PeerChannel')}\n          </span>\n        </div>\n        <Icon\n          className={styles.itemIcon}\n          name={isSelected ? 'check' : 'placeholder'}\n        />\n      </MenuItem>\n    );\n  });\n\n  const SendAsPeerMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={buildClassName(styles.sendAsPeerMenuButton, isOpen ? 'active' : '')}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Avatar\n          className={styles.sendAsPeerButtonAvatar}\n          size=\"mini\"\n          peer={shouldSendAsAnonymous ? ANONYMOUS_PEER : senderPeer}\n        />\n        <Icon\n          name=\"down\"\n          className={styles.buttonDownIcon}\n        />\n      </Button>\n    );\n  }, [isMobile, lang, senderPeer, shouldSendAsAnonymous]);\n\n  const sendAsPeersMenu = useMemo(() => {\n    if (!canChangeSendAsPeer) return undefined;\n    return (\n      <DropdownMenu\n        className={buildClassName(styles.sendAsPeerMenu, 'with-menu-transitions')}\n        bubbleClassName={styles.sendAsPeerMenuBubble}\n        trigger={SendAsPeerMenuButton}\n        positionX=\"right\"\n        autoClose\n      >\n        {filteredMyReactorIds.map((id) => (\n          renderMenuItem(id)\n        ))}\n      </DropdownMenu>\n    );\n  }, [SendAsPeerMenuButton, filteredMyReactorIds, canChangeSendAsPeer]);\n\n  const topReactors = useMemo(() => {\n    const global = getGlobal();\n    const all = message?.reactions?.topReactors;\n    if (!all) {\n      return undefined;\n    }\n\n    const result: ReactorData[] = [];\n    let hasCurrentSender = false;\n    let myReactorAmount = 0;\n\n    all.forEach((reactor) => {\n      const peer = reactor.peerId ? selectPeer(global, reactor.peerId) : undefined;\n      if (!peer && !reactor.isAnonymous && !reactor.isMy) return;\n      if (reactor.isMy) {\n        myReactorAmount = reactor.count;\n      }\n\n      if (reactor.isMy && (reactor.peerId !== sendAsPeerId || (reactor.isAnonymous && !shouldSendAsAnonymous))) return;\n\n      const isCurrentReactor = sendAsPeerId === reactor.peerId || (shouldSendAsAnonymous && reactor.isAnonymous);\n\n      if (isCurrentReactor) {\n        hasCurrentSender = true;\n      }\n\n      result.push({\n        amount: reactor.count,\n        localAmount: isCurrentReactor && isTouched ? starsAmount : 0,\n        isMy: reactor.isMy,\n        isAnonymous: reactor.isAnonymous,\n        user: peer,\n      });\n    });\n\n    if (!hasCurrentSender) {\n      const sender = selectPeer(global, sendAsPeerId);\n      result.push({\n        amount: myReactorAmount,\n        localAmount: isTouched ? starsAmount : 0,\n        isMy: true,\n        user: sender,\n      });\n    }\n\n    result.sort((a, b) => (b.amount + b.localAmount) - (a.amount + a.localAmount));\n\n    return result.slice(0, MAX_TOP_REACTORS);\n  }, [isTouched, message?.reactions?.topReactors, starsAmount, sendAsPeerId, shouldSendAsAnonymous]);\n\n  const chatTitle = chat && getPeerTitle(oldLang, chat);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      onClose={closePaidReactionModal}\n      isSlim\n      hasAbsoluteCloseButton\n      contentClassName={styles.content}\n      isLowStackPriority\n    >\n      <div className={styles.sendAsPeersMenuContainer}>\n        {sendAsPeersMenu}\n      </div>\n      <div className={styles.headerControlPanel}>\n        <BalanceBlock balance={starBalance} className={styles.modalBalance} withAddButton />\n      </div>\n\n      <StarSlider\n        className={styles.slider}\n        defaultValue={DEFAULT_STARS_AMOUNT}\n        maxValue={maxAmount}\n        onChange={handleAmountChange}\n      />\n      <h3 className={styles.title}>{oldLang('StarsReactionTitle')}</h3>\n      <div className={styles.description}>\n        {renderText(oldLang('StarsReactionText', chatTitle), ['simple_markdown', 'emoji'])}\n      </div>\n      <Separator>\n        {topReactors && <div className={styles.topLabel}>{oldLang('StarsReactionTopSenders')}</div>}\n      </Separator>\n      {topReactors && (\n        <div className={styles.top}>\n          {topReactors.map((reactor) => {\n            const countText = formatInteger(reactor.amount + reactor.localAmount);\n            const peer = (reactor.isAnonymous || !reactor.user || (reactor.isMy && shouldSendAsAnonymous))\n              ? ANONYMOUS_PEER : reactor.user;\n            const text = 'isCustomPeer' in peer ? oldLang(peer.titleKey)\n              : peer && getPeerTitle(oldLang, peer);\n            return (\n              <PeerBadge\n                className={styles.topPeer}\n                key={`${reactor.user?.id || 'anonymous'}-${countText}`}\n                peer={peer}\n                badgeText={countText}\n                badgeIcon=\"star\"\n                badgeClassName={styles.topBadge}\n                text={text}\n              />\n            );\n          })}\n        </div>\n      )}\n      {topReactors && (<Separator className={styles.separator} />)}\n      <Checkbox\n        className={buildClassName(styles.checkBox, 'dialog-checkbox')}\n        checked={!shouldSendAsAnonymous}\n        onChange={handleShowInTopSendersChange}\n        label={oldLang('StarsReactionShowMeInTopSenders')}\n      />\n      <Button\n        size=\"smaller\"\n        onClick={handleSend}\n      >\n        {lang('SendPaidReaction', { amount: starsAmount }, {\n          withNodes: true,\n          specialReplacement: {\n            [STARS_ICON_PLACEHOLDER]: <Icon className={styles.buttonStar} name=\"star\" />,\n          },\n        })}\n      </Button>\n      <p className={styles.disclaimer}>\n        {lang('StarsReactionTerms', {\n          link: <SafeLink text={lang('StarsReactionLinkText')} url={lang('StarsReactionLink')} />,\n        }, {\n          withNodes: true,\n        })}\n      </p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal.chatId);\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const starBalance = global.stars?.balance;\n    const maxAmount = global.appConfig?.paidReactionMaxAmount || MAX_REACTION_AMOUNT;\n    const defaultPrivacy = global.settings.paidReactionPrivacy;\n    const sendPaidReactionsAsPeerIds = chat?.sendPaidReactionsAsPeerIds;\n    const currentUserId = global.currentUserId!;\n    const currentUser = selectUser(global, currentUserId)!;\n\n    return {\n      chat,\n      message,\n      starBalance,\n      maxAmount,\n      defaultPrivacy,\n      sendPaidReactionsAsPeerIds,\n      currentUserId,\n      currentUser,\n    };\n  },\n)(PaidReactionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jKOG0It6\",\"header\":\"A_fX4EXY\",\"spacer\":\"ATowWJ60\",\"title\":\"gDNtv9oz\",\"balance-container\":\"eAKZVhOT\",\"balanceContainer\":\"eAKZVhOT\",\"balance-caption\":\"vbwprYel\",\"balanceCaption\":\"vbwprYel\",\"star-balance\":\"lXuIlbVK\",\"starBalance\":\"lXuIlbVK\",\"balance\":\"dIEx_Iqi\",\"optionsSection\":\"Y68CEIKn\",\"checkboxTitle\":\"H4taXei_\",\"actionMessageView\":\"CB1mxsgp\",\"messageInput\":\"o5r2IPoA\",\"limited\":\"mWzLu0c0\",\"footer\":\"jxWZSvet\",\"switcher\":\"zZUpGRSI\",\"switcherStarIcon\":\"zAee80Dv\",\"description\":\"nTPAv1ci\",\"main-button\":\"IDuhjrne\",\"mainButton\":\"IDuhjrne\",\"star\":\"Q4NlMT0o\",\"background\":\"ZORVRSG3\",\"customBgImage\":\"Eny_G3JI\",\"customBgColor\":\"TkJZPU2u\",\"withTransition\":\"soDpW2YR\",\"blurred\":\"M6k91TdM\",\"withRightColumn\":\"FBcNO8hj\"};","import type { ChangeEvent } from 'react';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { GiftOption } from './GiftModal';\nimport {\n  type ApiMessage, type ApiPeer, type ApiStarsAmount, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { getPeerTitle, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectPeer, selectPeerPaidMessagesStars, selectTabState, selectTheme, selectThemeValues, selectUserFullInfo,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PremiumProgress from '../../common/PremiumProgress';\nimport ActionMessage from '../../middle/message/ActionMessage';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport styles from './GiftComposer.module.scss';\n\nexport type OwnProps = {\n  gift: GiftOption;\n  giftByStars?: GiftOption;\n  peerId: string;\n};\n\nexport type StateProps = {\n  captionLimit?: number;\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  peer?: ApiPeer;\n  currentUserId?: string;\n  isPaymentFormLoading?: boolean;\n  starBalance?: ApiStarsAmount;\n  paidMessagesStars?: number;\n  areUniqueStarGiftsDisallowed?: boolean;\n  shouldDisallowLimitedStarGifts?: boolean;\n};\n\nconst LIMIT_DISPLAY_THRESHOLD = 50;\n\nfunction GiftComposer({\n  gift,\n  giftByStars,\n  peerId,\n  peer,\n  captionLimit,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  backgroundColor,\n  customBackground,\n  currentUserId,\n  isPaymentFormLoading,\n  starBalance,\n  paidMessagesStars,\n  areUniqueStarGiftsDisallowed,\n  shouldDisallowLimitedStarGifts,\n}: OwnProps & StateProps) {\n  const {\n    sendStarGift, sendPremiumGiftByStars, openInvoice, openGiftUpgradeModal, openStarsBalanceModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [giftMessage, setGiftMessage] = useState<string>('');\n  const [shouldHideName, setShouldHideName] = useState<boolean>(false);\n  const [shouldPayForUpgrade, setShouldPayForUpgrade] = useState<boolean>(false);\n  const [shouldPayByStars, setShouldPayByStars] = useState<boolean>(false);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  useEffect(() => {\n    if (shouldDisallowLimitedStarGifts) {\n      setShouldPayForUpgrade(true);\n    }\n  }, [shouldDisallowLimitedStarGifts, shouldPayForUpgrade]);\n\n  const isStarGift = 'id' in gift && gift.type === 'starGift';\n  const isPremiumGift = 'months' in gift;\n  const hasPremiumByStars = giftByStars && 'amount' in giftByStars;\n  const isPeerUser = peer && isApiPeerUser(peer);\n  const isSelf = peerId === currentUserId;\n\n  const localMessage = useMemo(() => {\n    if (isPremiumGift) {\n      const currentGift = shouldPayByStars && hasPremiumByStars ? giftByStars : gift;\n      return {\n        id: -1,\n        chatId: '0',\n        isOutgoing: false,\n        senderId: currentUserId,\n        date: Math.floor(Date.now() / 1000),\n        content: {\n          action: {\n            mediaType: 'action',\n            type: 'giftPremium',\n            amount: currentGift.amount,\n            currency: currentGift.currency,\n            months: gift.months,\n            message: giftMessage ? { text: giftMessage } : undefined,\n          },\n        },\n      } satisfies ApiMessage;\n    }\n\n    if (isStarGift) {\n      return {\n        id: -1,\n        chatId: '0',\n        isOutgoing: false,\n        senderId: currentUserId,\n        date: Math.floor(Date.now() / 1000),\n        content: {\n          action: {\n            mediaType: 'action',\n            type: 'starGift',\n            message: giftMessage?.length ? {\n              text: giftMessage,\n            } : undefined,\n            isNameHidden: shouldHideName || undefined,\n            starsToConvert: gift.starsToConvert,\n            canUpgrade: shouldPayForUpgrade || undefined,\n            alreadyPaidUpgradeStars: shouldPayForUpgrade ? gift.upgradeStars : undefined,\n            gift,\n            peerId,\n            fromId: currentUserId,\n          },\n        },\n      } satisfies ApiMessage;\n    }\n    return undefined;\n  }, [currentUserId, gift, giftMessage, isStarGift,\n    shouldHideName, shouldPayForUpgrade, peerId,\n    shouldPayByStars, hasPremiumByStars, giftByStars, isPremiumGift]);\n\n  const handleGiftMessageChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setGiftMessage(e.target.value);\n  });\n\n  const handleShouldHideNameChange = useLastCallback(() => {\n    setShouldHideName(!shouldHideName);\n  });\n\n  const handleShouldPayForUpgradeChange = useLastCallback(() => {\n    setShouldPayForUpgrade(!shouldPayForUpgrade);\n  });\n\n  const toggleShouldPayByStars = useLastCallback(() => {\n    if (hasPremiumByStars) setShouldPayByStars(!shouldPayByStars);\n  });\n\n  const handleOpenUpgradePreview = useLastCallback(() => {\n    if (!isStarGift) return;\n    openGiftUpgradeModal({\n      giftId: gift.id,\n      peerId,\n    });\n  });\n\n  const handleGetMoreStars = useLastCallback(() => {\n    openStarsBalanceModal({});\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    if (isStarGift) {\n      sendStarGift({\n        peerId,\n        shouldHideName,\n        gift,\n        message: giftMessage ? { text: giftMessage } : undefined,\n        shouldUpgrade: shouldPayForUpgrade,\n      });\n      return;\n    }\n\n    if (shouldPayByStars && hasPremiumByStars) {\n      sendPremiumGiftByStars({\n        userId: peerId,\n        months: giftByStars.months,\n        amount: giftByStars.amount,\n        message: giftMessage ? { text: giftMessage } : undefined,\n      });\n      return;\n    }\n\n    if (isPremiumGift) {\n      openInvoice({\n        type: 'giftcode',\n        userIds: [peerId],\n        currency: gift.currency,\n        amount: gift.amount,\n        option: gift,\n        message: giftMessage ? { text: giftMessage } : undefined,\n      });\n    }\n  });\n\n  const canUseStarsPayment = hasPremiumByStars && starBalance && (starBalance.amount > giftByStars.amount);\n  function renderOptionsSection() {\n    const symbolsLeft = captionLimit ? captionLimit - giftMessage.length : undefined;\n\n    const title = getPeerTitle(lang, peer!)!;\n    return (\n      <div className={styles.optionsSection}>\n\n        {!paidMessagesStars && (\n          <TextArea\n            className={styles.messageInput}\n            onChange={handleGiftMessageChange}\n            value={giftMessage}\n            label={lang('GiftMessagePlaceholder')}\n            maxLength={captionLimit}\n            maxLengthIndicator={\n              symbolsLeft && symbolsLeft < LIMIT_DISPLAY_THRESHOLD ? symbolsLeft.toString() : undefined\n            }\n          />\n        )}\n\n        {canUseStarsPayment && (\n          <ListItem className={styles.switcher} narrow ripple onClick={toggleShouldPayByStars}>\n            <span>\n              {lang('GiftPremiumPayWithStars', {\n                stars: formatStarsAsIcon(lang, giftByStars.amount, { className: styles.switcherStarIcon }),\n              }, { withNodes: true })}\n            </span>\n            <Switcher\n              checked={shouldPayByStars}\n              onChange={toggleShouldPayByStars}\n              label={lang('GiftPremiumPayWithStarsAcc')}\n            />\n          </ListItem>\n        )}\n\n        {hasPremiumByStars && starBalance && (\n          <div className={styles.description}>\n            {lang('GiftPremiumDescriptionYourBalance', {\n              stars: formatStarsAsIcon(lang, starBalance.amount, { className: styles.switcherStarIcon }),\n              link: <Link isPrimary onClick={handleGetMoreStars}>{lang('GetMoreStarsLinkText')}</Link>,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            })}\n          </div>\n        )}\n\n        {isStarGift && Boolean(gift.upgradeStars) && !areUniqueStarGiftsDisallowed && (\n          <ListItem\n            className={styles.switcher}\n            narrow\n            ripple\n            onClick={handleShouldPayForUpgradeChange}\n            disabled={shouldDisallowLimitedStarGifts}\n          >\n            <span>\n              {lang('GiftMakeUnique', {\n                stars: formatStarsAsIcon(lang, gift.upgradeStars, { className: styles.switcherStarIcon }),\n              }, { withNodes: true })}\n            </span>\n            <Switcher\n              checked={shouldPayForUpgrade}\n              onChange={handleShouldPayForUpgradeChange}\n              label={lang('GiftMakeUniqueAcc')}\n            />\n          </ListItem>\n        )}\n        {isStarGift && Boolean(gift.upgradeStars) && !areUniqueStarGiftsDisallowed && (\n          <div className={styles.description}>\n            {isPeerUser\n              ? lang('GiftMakeUniqueDescription', {\n                user: title,\n                link: <Link isPrimary onClick={handleOpenUpgradePreview}>{lang('GiftMakeUniqueLink')}</Link>,\n              }, {\n                withNodes: true,\n              })\n              : lang('GiftMakeUniqueDescriptionChannel', {\n                peer: title,\n                link: <Link isPrimary onClick={handleOpenUpgradePreview}>{lang('GiftMakeUniqueLink')}</Link>,\n              }, {\n                withNodes: true,\n              })}\n          </div>\n        )}\n\n        {isStarGift && (\n          <ListItem className={styles.switcher} narrow ripple onClick={handleShouldHideNameChange}>\n            <span>{lang('GiftHideMyName')}</span>\n            <Switcher\n              checked={shouldHideName}\n              onChange={handleShouldHideNameChange}\n              label={lang('GiftHideMyName')}\n            />\n          </ListItem>\n        )}\n        {isStarGift && (\n          <div className={styles.description}>\n            {isSelf ? lang('GiftHideNameDescriptionSelf')\n              : isPeerUser ? lang('GiftHideNameDescription', { receiver: title })\n                : lang('GiftHideNameDescriptionChannel')}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  function renderFooter() {\n    const amount = shouldPayByStars && hasPremiumByStars\n      ? formatStarsAsIcon(lang, giftByStars.amount, { asFont: true })\n      : isStarGift\n        ? formatStarsAsIcon(lang, gift.stars + (shouldPayForUpgrade ? gift.upgradeStars! : 0), { asFont: true })\n        : isPremiumGift ? formatCurrency(lang, gift.amount, gift.currency) : undefined;\n\n    return (\n      <div className={styles.footer}>\n        {isStarGift && Boolean(gift.availabilityRemains) && (\n          <PremiumProgress\n            isPrimary\n            progress={gift.availabilityRemains / gift.availabilityTotal!}\n            rightText={lang('GiftSoldCount', {\n              count: gift.availabilityTotal! - gift.availabilityRemains,\n            })}\n            leftText={lang('GiftLeftCount', { count: gift.availabilityRemains })}\n            className={styles.limited}\n          />\n        )}\n        <Button\n          className={styles.mainButton}\n          size=\"smaller\"\n          onClick={handleMainButtonClick}\n          isLoading={isPaymentFormLoading}\n        >\n          {lang('GiftSend', {\n            amount,\n          }, {\n            withNodes: true,\n          })}\n        </Button>\n      </div>\n    );\n  }\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  if ((!isStarGift && !isPremiumGift) || !localMessage) return;\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        <ActionMessage\n          key={isStarGift ? gift.id : isPremiumGift ? gift.months : undefined}\n          message={localMessage}\n          threadId={MAIN_THREAD_ID}\n          appearanceOrder={0}\n        />\n      </div>\n      {renderOptionsSection()}\n      <div className={styles.spacer} />\n      {renderFooter()}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      stars,\n    } = global;\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n    } = selectThemeValues(global, theme) || {};\n    const peer = selectPeer(global, peerId);\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, peerId);\n    const userFullInfo = selectUserFullInfo(global, peerId);\n    const currentUserId = global.currentUserId;\n    const isGiftForSelf = currentUserId === peerId;\n    const areUniqueStarGiftsDisallowed = !isGiftForSelf\n      && userFullInfo?.disallowedGifts?.shouldDisallowUniqueStarGifts;\n    const shouldDisallowLimitedStarGifts = !isGiftForSelf\n      && userFullInfo?.disallowedGifts?.shouldDisallowLimitedStarGifts;\n\n    const tabState = selectTabState(global);\n\n    return {\n      starBalance: stars?.balance,\n      peer,\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      captionLimit: global.appConfig?.starGiftMaxMessageLength,\n      currentUserId: global.currentUserId,\n      isPaymentFormLoading: tabState.isPaymentFormLoading,\n      paidMessagesStars,\n      areUniqueStarGiftsDisallowed,\n      shouldDisallowLimitedStarGifts,\n    };\n  },\n)(GiftComposer));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"G1mBmzxs\",\"starGift\":\"f5ArEO1S\",\"monthsDescription\":\"rn9aWFNA\",\"description\":\"q4_ydkAx\",\"buy\":\"a8no5WH0\",\"star\":\"DvJLTVFU\",\"premiumRequired\":\"NBYIITte\",\"amount\":\"sbo2dMcH\",\"starsPriceBlock\":\"QB5SI7ta\",\"starsPriceIcon\":\"jgnEfoeM\",\"radialPattern\":\"Nkotr8Q4\",\"stickerWrapper\":\"rUSoeQXb\"};","import { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumGiftCodeOption,\n  ApiSticker,\n} from '../../../api/types';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  option: ApiPremiumGiftCodeOption;\n  optionByStars?: ApiPremiumGiftCodeOption;\n  baseMonthAmount?: number;\n  onClick: (gift: ApiPremiumGiftCodeOption) => void;\n};\n\nexport type StateProps = {\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst GIFT_STICKER_SIZE = 86;\n\nfunction GiftItemPremium({\n  sticker, canPlayAnimatedEmojis, baseMonthAmount, option, optionByStars, onClick,\n}: OwnProps & StateProps) {\n  const {\n    months, amount, currency,\n  } = option;\n  const lang = useLang();\n\n  const handleGiftClick = useLastCallback(() => {\n    onClick(option);\n  });\n\n  const perMonth = Math.floor(amount / months);\n  const discount = baseMonthAmount && baseMonthAmount > perMonth\n    ? Math.ceil(100 - perMonth / (baseMonthAmount / 100))\n    : undefined;\n\n  function renderMonths() {\n    const caption = months === 12\n      ? lang('Years', { count: 1 }, { pluralValue: 1 })\n      : lang('Months', { count: months }, { pluralValue: months });\n    return (\n      <div className={styles.monthsDescription}>\n        {caption}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.container}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n    >\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        play={canPlayAnimatedEmojis}\n        noLoop\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n\n      {renderMonths()}\n      <div className={styles.description}>\n        {lang('PremiumGiftDescription')}\n      </div>\n      <Button className={styles.buy} nonInteractive size=\"tiny\" pill fluid>\n        {formatCurrencyAsString(amount, currency)}\n      </Button>\n      {optionByStars && (\n        <div className={styles.starsPriceBlock}>\n          {lang('GiftPremiumStarsPrice', {\n            stars: (formatStarsAsIcon(lang, optionByStars.amount, { className: styles.starsPriceIcon })),\n          }, { withNodes: true, withMarkdown: true })}\n        </div>\n      )}\n      {Boolean(discount) && (\n        <GiftRibbon color=\"purple\" text={lang('GiftDiscount', { percent: discount })} />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { option }): StateProps => {\n    const sticker = selectGiftStickerForDuration(global, option.months);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    return {\n      sticker,\n      canPlayAnimatedEmojis,\n    };\n  },\n)(GiftItemPremium));\n","import { memo, useMemo, useRef, useState } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarGift, ApiTypeCurrencyAmount } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon, formatTonAsIcon } from '../../../util/localization/format';\nimport { getGiftAttributes, getStickerFromGift } from '../../common/helpers/gifts';\n\nimport useFlag from '../../../hooks/useFlag.ts';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport RadialPatternBackground from '../../common/profile/RadialPatternBackground';\nimport StickerView from '../../common/StickerView';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  gift: ApiStarGift;\n  observeIntersection?: ObserveFn;\n  onClick: (gift: ApiStarGift, target: 'original' | 'resell') => void;\n  isResale?: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nfunction GiftItemStar({\n  gift, observeIntersection, onClick, isResale, isCurrentUserPremium,\n}: OwnProps & StateProps) {\n  const { openGiftInfoModal, openPremiumModal, showNotification } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const stickerRef = useRef<HTMLDivElement>();\n\n  function getPriceAmount(amounts?: ApiTypeCurrencyAmount[]) {\n    if (!amounts) return { amount: 0, currency: STARS_CURRENCY_CODE };\n\n    if (gift.type === 'starGiftUnique' && gift.resaleTonOnly) {\n      const tonAmount = amounts.find((amount) => amount.currency === TON_CURRENCY_CODE);\n      if (tonAmount) return tonAmount;\n    }\n\n    const starsAmount = amounts.find((amount) => amount.currency === STARS_CURRENCY_CODE);\n    return starsAmount;\n  }\n\n  const lang = useLang();\n\n  const [isVisible, setIsVisible] = useState(false);\n  const [isHover, markHover, unmarkHover] = useFlag();\n\n  const sticker = getStickerFromGift(gift);\n  const isGiftUnique = gift.type === 'starGiftUnique';\n  const uniqueGift = isGiftUnique ? gift : undefined;\n  const regularGift = !isGiftUnique ? gift : undefined;\n\n  const priceInfo = !isGiftUnique\n    ? { amount: regularGift?.stars || 0, currency: STARS_CURRENCY_CODE }\n    : getPriceAmount(uniqueGift?.resellPrice);\n  const priceCurrency = priceInfo?.currency || STARS_CURRENCY_CODE;\n  const resellMinStars = regularGift?.resellMinStars;\n  const priceInStarsAsString = !isGiftUnique && isResale && resellMinStars\n    ? lang.number(resellMinStars) + '+' : priceInfo?.amount || 0;\n  const isLimited = !isGiftUnique && Boolean(regularGift?.isLimited);\n  const isSoldOut = !isGiftUnique && Boolean(regularGift?.isSoldOut);\n  const isPremiumRequired = Boolean(gift?.requirePremium);\n  const isUserLimitReached = Boolean(regularGift?.limitedPerUser && !regularGift?.perUserRemains);\n  const perUserTotal = regularGift?.perUserTotal;\n\n  const handleGiftClick = useLastCallback(() => {\n    if (isSoldOut && !isResale) {\n      openGiftInfoModal({ gift });\n      return;\n    }\n\n    if (isUserLimitReached) {\n      showNotification({\n        message: lang('NotificationGiftsLimit', {\n          count: perUserTotal,\n        }, {\n          withMarkdown: true,\n          withNodes: true,\n        }),\n      });\n      return;\n    }\n\n    if (isPremiumRequired && !isCurrentUserPremium) {\n      openPremiumModal({\n        gift,\n      });\n      return;\n    }\n\n    onClick(gift, isResale ? 'resell' : 'original');\n  });\n\n  const radialPatternBackdrop = useMemo(() => {\n    const { backdrop, pattern } = getGiftAttributes(gift) || {};\n\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [gift]);\n\n  const giftNumber = isGiftUnique ? gift.number : 0;\n\n  const giftRibbon = useMemo(() => {\n    if (isGiftUnique) {\n      const { backdrop } = getGiftAttributes(gift) || {};\n      if (!backdrop) {\n        return undefined;\n      }\n      return (\n        <GiftRibbon\n          color={[backdrop.centerColor, backdrop.edgeColor]}\n          text={\n            lang('GiftSavedNumber', { number: giftNumber })\n          }\n        />\n      );\n    }\n    if (isPremiumRequired) {\n      return <GiftRibbon color=\"orange\" text={lang('LimitPremium')} />;\n    }\n    if (isResale) {\n      return <GiftRibbon color=\"green\" text={lang('GiftRibbonResale')} />;\n    }\n    if (isSoldOut) {\n      return <GiftRibbon color=\"red\" text={lang('GiftSoldOut')} />;\n    }\n    if (isLimited) {\n      return <GiftRibbon color=\"blue\" text={lang('GiftLimited')} />;\n    }\n    return undefined;\n  }, [isGiftUnique, isResale, gift, isSoldOut, isLimited, lang, giftNumber, isPremiumRequired]);\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    const visible = entry.isIntersecting;\n    setIsVisible(visible);\n  });\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'interactive-gift',\n        styles.container,\n        styles.starGift,\n        'starGiftItem',\n        isPremiumRequired && styles.premiumRequired,\n      )}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n      onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n    >\n      {radialPatternBackdrop}\n\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${GIFT_STICKER_SIZE}px; height: ${GIFT_STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            observeIntersectionForPlaying={observeIntersection}\n            observeIntersectionForLoading={observeIntersection}\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={GIFT_STICKER_SIZE}\n            shouldLoop={isHover}\n            shouldPreloadPreview\n          />\n        )}\n\n      </div>\n      <Button\n        className={styles.buy}\n        nonInteractive\n        size=\"tiny\"\n        color={isGiftUnique ? 'bluredStarsBadge' : 'stars'}\n        withSparkleEffect={isVisible}\n        pill\n        fluid\n      >\n        {priceCurrency === TON_CURRENCY_CODE\n          ? formatTonAsIcon(lang, priceInStarsAsString || 0, { shouldConvertFromNanos: true, className: styles.star })\n          : formatStarsAsIcon(lang, priceInStarsAsString || 0, { asFont: true, className: styles.star })}\n      </Button>\n      {giftRibbon}\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global): StateProps => {\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n    };\n  })(GiftItemStar),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tJK1W0pJ\",\"transition\":\"pP8TxefR\",\"content\":\"o3V1HqbL\",\"resaleScreenRoot\":\"Vce_TsJO\",\"main\":\"cVXqeu9P\",\"giftSection\":\"v4eKefwN\",\"section\":\"EqfarEYb\",\"resaleStarGiftsContainer\":\"RSFcSNGL\",\"starGiftsContainer\":\"OQX3GZl5\",\"premiumGiftsGallery\":\"n40m3BK2\",\"header\":\"iqqoyRgW\",\"resaleHeader\":\"cJRBgg9B\",\"resaleHeaderContentContainer\":\"OXYQmfGK\",\"headerSlide\":\"BTWhJUQB\",\"headerText\":\"lLRmbpIu\",\"hiddenHeader\":\"XgGzn1cQ\",\"resaleHeaderText\":\"bp_KPx8I\",\"commonHeaderText\":\"ybZo03if\",\"resaleHeaderDescription\":\"XefHUFm1\",\"closeButton\":\"r_Y5uG1T\",\"balance\":\"soqAknia\",\"avatars\":\"N_7tYJKr\",\"avatar\":\"_3hY4vIep\",\"logoBackground\":\"ieK4TzSb\",\"center\":\"Ey5gX40t\",\"description\":\"ZioU5h_k\",\"starGiftsDescription\":\"gFgzS8pV\",\"boostIcon\":\"Qi2YR6Dz\",\"optionBottom\":\"RTbClMKE\",\"secondaryInfo\":\"g0R9GSNq\",\"footer\":\"J3Gju3bv\",\"starGiftsTransition\":\"kB6IyXqS\",\"notFoundGiftsRoot\":\"UqnRlJ1n\",\"notFoundGiftsDescription\":\"g0VbwIG_\",\"notFoundGiftsLink\":\"j2zPEQr8\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiStarGift,\n} from '../../../api/types';\nimport type { ResaleGiftsFilterOptions } from '../../../types';\n\nimport { RESALE_GIFTS_LIMIT } from '../../../config';\nimport { selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Transition from '../../ui/Transition';\nimport GiftItemStar from './GiftItemStar';\n\nimport styles from './GiftModal.module.scss';\n\nexport type OwnProps = {\n  onGiftClick: (gift: ApiStarGift) => void;\n};\n\ntype StateProps = {\n  gift?: ApiStarGift;\n  resellGifts?: ApiStarGift[];\n  filter: ResaleGiftsFilterOptions;\n  areGiftsAllLoaded?: boolean;\n  areGiftsLoading?: boolean;\n  updateIteration: number;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst GiftModalResaleScreen: FC<OwnProps & StateProps> = ({\n  resellGifts,\n  gift,\n  filter,\n  areGiftsAllLoaded,\n  areGiftsLoading,\n  updateIteration,\n  onGiftClick,\n}) => {\n  const {\n    loadResaleGifts,\n    updateResaleGiftsFilter,\n  } = getActions();\n  const scrollerRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n  const resellGiftsIds = useMemo(() => {\n    return resellGifts?.map((g) => g.id);\n  }, [resellGifts]);\n\n  const hasFilter = Boolean(filter?.modelAttributes?.length\n    || filter?.patternAttributes?.length || filter?.backdropAttributes?.length);\n\n  const handleLoadMoreResellGifts = useLastCallback(() => {\n    if (gift) {\n      loadResaleGifts({ giftId: gift.id });\n    }\n  });\n\n  const isGiftsEmpty = Boolean(!resellGifts || resellGifts.length === 0);\n\n  const [viewportIds, onLoadMore] = useInfiniteScroll(\n    handleLoadMoreResellGifts,\n    resellGiftsIds,\n    !gift,\n    RESALE_GIFTS_LIMIT,\n  );\n\n  const { observe } = useIntersectionObserver({ rootRef: scrollerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      modelAttributes: [],\n      backdropAttributes: [],\n      patternAttributes: [],\n    } });\n  });\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className={styles.notFoundGiftsRoot}>\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className={styles.notFoundGiftsDescription}>\n          {lang('ResellGiftsNoFound')}\n        </div>\n        {hasFilter && (\n          <Link\n            className={styles.notFoundGiftsLink}\n            onClick={handleResetGiftsFilter}\n          >\n            {lang('ResellGiftsClearFilters')}\n          </Link>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div ref={scrollerRef} className={buildClassName(styles.resaleScreenRoot, 'custom-scroll')}>\n      <Transition\n        name=\"zoomFade\"\n        activeKey={updateIteration}\n      >\n        {isGiftsEmpty && areGiftsAllLoaded && renderNothingFoundGiftsWithFilter()}\n        <InfiniteScroll\n          className={buildClassName(styles.resaleStarGiftsContainer)}\n          items={viewportIds}\n          onLoadMore={onLoadMore}\n          itemSelector=\".starGiftItem\"\n          noFastList\n          preloadBackwards={RESALE_GIFTS_LIMIT}\n          scrollContainerClosest={`.${styles.resaleScreenRoot}`}\n        >\n          {resellGifts?.map((gift) => (\n            <GiftItemStar\n              key={gift.id}\n              gift={gift}\n              observeIntersection={observe}\n              isResale\n              onClick={onGiftClick}\n            />\n          ))}\n        </InfiniteScroll>\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    starGifts,\n  } = global;\n\n  const { resaleGifts } = selectTabState(global);\n  const gift = resaleGifts?.giftId ? starGifts?.byId[resaleGifts.giftId] : undefined;\n  const filter = resaleGifts.filter;\n  const areGiftsAllLoaded = resaleGifts.isAllLoaded;\n  const areGiftsLoading = resaleGifts.isLoading;\n  const updateIteration = resaleGifts.updateIteration;\n\n  return {\n    resellGifts: resaleGifts.gifts,\n    gift,\n    filter,\n    areGiftsAllLoaded,\n    areGiftsLoading,\n    updateIteration,\n  };\n})(GiftModalResaleScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KLFLR9ji\",\"thumb\":\"fCL5rY2D\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\n\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport { type ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport StickerView from '../../common/StickerView';\n\nimport styles from './ResaleGiftMenuAttributeSticker.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  type: 'model' | 'pattern';\n  sticker: ApiSticker;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n};\n\nconst ATTRIBUTE_STICKER_SIZE = 1.5 * REM;\n\nconst ResaleGiftMenuAttributeSticker: FC<StateProps & OwnProps> = ({\n  className,\n  type,\n  sticker,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  theme,\n}) => {\n  const stickerRef = useRef<HTMLDivElement>();\n\n  const customColor = useDynamicColorListener(stickerRef, undefined, type !== 'pattern');\n\n  return (\n    <div\n      ref={stickerRef}\n      className={buildClassName(styles.root, className)}\n      style={`width: ${ATTRIBUTE_STICKER_SIZE}px; height: ${ATTRIBUTE_STICKER_SIZE}px`}\n    >\n      <StickerView\n        containerRef={stickerRef}\n        sticker={sticker}\n        size={ATTRIBUTE_STICKER_SIZE}\n        shouldPreloadPreview\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        thumbClassName={styles.thumb}\n        customColor={customColor}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    theme: selectTheme(global),\n  };\n})(ResaleGiftMenuAttributeSticker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_VgmQnUg\",\"buttonsContainer\":\"IDlp6U6g\",\"itemIcon\":\"yuctLnuR\",\"sticker\":\"VT562JS0\",\"backdropAttributeMenuItemText\":\"D50wFfRL\",\"menuItemStickerText\":\"THcGWXSA\",\"menuItemText\":\"L6EVE2Ux\",\"backdrop\":\"A29QNxKb\",\"menuItemIcon\":\"GL4rVsev\",\"item\":\"qiYcBOYc\",\"menuContentContainer\":\"EDsBn29z\",\"menu\":\"ISaNdBwd\",\"left\":\"e4Kkh_MR\",\"right\":\"Kz_nCGC3\"};","import { type MouseEvent as ReactMouseEvent } from 'react';\nimport type { ElementRef, FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback,\n  useMemo,\n  useRef,\n  useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiStarGiftAttribute,\n  ApiStarGiftAttributeBackdrop,\n  ApiStarGiftAttributeCounter,\n  ApiStarGiftAttributeIdBackdrop,\n  ApiStarGiftAttributeIdPattern,\n  ApiStarGiftAttributeModel,\n  ApiStarGiftAttributePattern,\n  StarGiftAttributeIdModel,\n} from '../../../api/types';\nimport type { ResaleGiftsFilterOptions, ResaleGiftsSortType } from '../../../types';\n\nimport { selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport RadialPatternBackground from '../../common/profile/RadialPatternBackground';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport SearchInput from '../../ui/SearchInput';\nimport ResaleGiftMenuAttributeSticker from './ResaleGiftMenuAttributeSticker';\n\nimport styles from './GiftResaleFilters.module.scss';\n\ntype OwnProps = {\n  dialogRef: ElementRef<HTMLDivElement>;\n};\ntype StateProps = {\n  filter: ResaleGiftsFilterOptions;\n  attributes?: ApiStarGiftAttribute[];\n  counters?: ApiStarGiftAttributeCounter[];\n};\n\nconst GiftResaleFilters: FC<StateProps & OwnProps> = ({\n  attributes,\n  counters,\n  filter,\n  dialogRef,\n}) => {\n  const lang = useLang();\n  const {\n    updateResaleGiftsFilter,\n  } = getActions();\n\n  const [searchModelQuery, setSearchModelQuery] = useState('');\n  const [searchBackdropQuery, setSearchBackdropQuery] = useState('');\n  const [searchPatternQuery, setSearchPatternQuery] = useState('');\n  const filteredAttributes = useMemo(() => {\n    const map: {\n      model: ApiStarGiftAttributeModel[];\n      pattern: ApiStarGiftAttributePattern[];\n      backdrop: ApiStarGiftAttributeBackdrop[];\n    } = {\n      model: [],\n      pattern: [],\n      backdrop: [],\n    };\n\n    for (const counter of counters ?? []) {\n      const { attribute } = counter;\n\n      if (!counter.count) {\n        continue;\n      }\n\n      const found = attributes?.find((attr) => {\n        if (attr.type === 'backdrop' && attribute.type === 'backdrop') {\n          return attr.backdropId === attribute.backdropId;\n        }\n\n        if (attr.type === 'model' && attribute.type === 'model') {\n          return attr.sticker.id === attribute.documentId;\n        }\n\n        if (attr.type === 'pattern' && attribute.type === 'pattern') {\n          return attr.sticker.id === attribute.documentId;\n        }\n\n        return false;\n      });\n\n      if (found?.type === 'backdrop') {\n        map.backdrop.push(found);\n      }\n      if (found?.type === 'model') {\n        map.model.push(found);\n      }\n      if (found?.type === 'pattern') {\n        map.pattern.push(found);\n      }\n    }\n\n    return map;\n  }, [attributes, counters]);\n\n  const filteredAndSearchedAttributes = useMemo(() => {\n    const filterBySearch = <T extends { name?: string }>(items: T[], query: string): T[] => {\n      if (!query.trim()) return items;\n\n      return items.filter(\n        (item): item is T => Boolean(item.name?.toLowerCase().includes(query.toLowerCase())),\n      );\n    };\n\n    return {\n      model: filterBySearch(filteredAttributes.model, searchModelQuery),\n      pattern: filterBySearch(filteredAttributes.pattern, searchPatternQuery),\n      backdrop: filterBySearch(filteredAttributes.backdrop, searchBackdropQuery),\n    };\n  }, [filteredAttributes, searchModelQuery, searchBackdropQuery, searchPatternQuery]);\n\n  // Sort Menu\n  const sortMenuRef = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen: isSortContextMenuOpen,\n    contextMenuAnchor: sortContextMenuAnchor,\n    handleContextMenu: handleSortContextMenu,\n    handleContextMenuClose: handleSortContextMenuClose,\n    handleContextMenuHide: handleSortContextMenuHide,\n  } = useContextMenuHandlers(dialogRef);\n  const getSortMenuElement = useLastCallback(() => sortMenuRef.current!);\n\n  // Model Menu\n  const modelMenuRef = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen: isModelContextMenuOpen,\n    contextMenuAnchor: modelContextMenuAnchor,\n    handleContextMenu: handleModelContextMenu,\n    handleContextMenuClose: handleModelContextMenuClose,\n    handleContextMenuHide: handleModelContextMenuHide,\n  } = useContextMenuHandlers(dialogRef);\n  const getModelMenuElement = useLastCallback(\n    () => modelMenuRef.current!,\n  );\n\n  // Backdrop Menu\n  const backdropMenuRef = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen: isBackdropContextMenuOpen,\n    contextMenuAnchor: backdropContextMenuAnchor,\n    handleContextMenu: handleBackdropContextMenu,\n    handleContextMenuClose: handleBackdropContextMenuClose,\n    handleContextMenuHide: handleBackdropContextMenuHide,\n  } = useContextMenuHandlers(dialogRef);\n  const getBackdropMenuElement = useLastCallback(() => backdropMenuRef.current!);\n\n  // Pattern Menu\n  const patternMenuRef = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen: isPatternContextMenuOpen,\n    contextMenuAnchor: patternContextMenuAnchor,\n    handleContextMenu: handlePatternContextMenu,\n    handleContextMenuClose: handlePatternContextMenuClose,\n    handleContextMenuHide: handlePatternContextMenuHide,\n  } = useContextMenuHandlers(dialogRef);\n  const getPatternMenuElement = useLastCallback(() => patternMenuRef.current!);\n\n  const SortMenuButton: FC<{ onTrigger: (e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => void; isOpen?: boolean }>\n   = useMemo(() => {\n     const sortType = filter.sortType;\n     return ({ onTrigger, isOpen: isMenuOpen }) => (\n       <div\n         className={styles.item}\n         onClick={onTrigger}\n       >\n         {sortType === 'byDate' && lang('ValueGiftSortByDate')}\n         {sortType === 'byNumber' && lang('ValueGiftSortByNumber')}\n         {sortType === 'byPrice' && lang('ValueGiftSortByPrice')}\n         <Icon\n           name=\"dropdown-arrows\"\n           className={styles.itemIcon}\n         />\n       </div>\n     );\n   }, [lang, filter]);\n\n  const ModelMenuButton:\n  FC<{ onTrigger: (e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => void; isOpen?: boolean }>\n   = useMemo(() => {\n     const attributesCount = filter?.modelAttributes?.length || 0;\n     return ({ onTrigger, isOpen: isMenuOpen }) => (\n       <div\n         className={styles.item}\n         onClick={onTrigger}\n       >\n         {attributesCount === 0 && lang('GiftAttributeModel')}\n         {attributesCount > 0\n           && lang('GiftAttributeModelPlural', { count: attributesCount }, { pluralValue: attributesCount })}\n         <Icon\n           name=\"dropdown-arrows\"\n           className={styles.itemIcon}\n         />\n       </div>\n     );\n   }, [lang, filter]);\n  const BackdropMenuButton:\n  FC<{ onTrigger: (e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => void; isOpen?: boolean }>\n   = useMemo(() => {\n     const attributesCount = filter?.backdropAttributes?.length || 0;\n     return ({ onTrigger, isOpen: isMenuOpen }) => (\n       <div\n         className={styles.item}\n         onClick={onTrigger}\n       >\n         {attributesCount === 0 && lang('GiftAttributeBackdrop')}\n         {attributesCount > 0\n           && lang('GiftAttributeBackdropPlural', { count: attributesCount }, { pluralValue: attributesCount })}\n         <Icon\n           name=\"dropdown-arrows\"\n           className={styles.itemIcon}\n         />\n       </div>\n     );\n   }, [lang, filter]);\n  const PatternMenuButton: FC<{ onTrigger: (e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => void; isOpen?: boolean }>\n  = useMemo(() => {\n    const attributesCount = filter?.patternAttributes?.length || 0;\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <div\n        className={styles.item}\n        onClick={onTrigger}\n      >\n        {attributesCount === 0 && lang('GiftAttributeSymbol')}\n        {attributesCount > 0\n          && lang('GiftAttributeSymbolPlural', { count: attributesCount }, { pluralValue: attributesCount })}\n        <Icon\n          name=\"dropdown-arrows\"\n          className={styles.itemIcon}\n        />\n      </div>\n    );\n  }, [lang, filter]);\n\n  const handleSortMenuItemClick = useLastCallback((type: ResaleGiftsSortType) => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      sortType: type,\n    } });\n  });\n\n  const handleSelectedAllModelsClick = useLastCallback(() => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      modelAttributes: [],\n    } });\n  });\n  const handleSelectedAllPatternsClick = useLastCallback(() => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      patternAttributes: [],\n    } });\n  });\n  const handleSelectedAllBackdropsClick = useLastCallback(() => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      backdropAttributes: [],\n    } });\n  });\n\n  const handleModelMenuItemClick = useLastCallback((attribute: ApiStarGiftAttributeModel) => {\n    if (!counters) return;\n    const attributes = filter.modelAttributes || [];\n    const modelAttribute\n      = counters.find((counter): counter is ApiStarGiftAttributeCounter<StarGiftAttributeIdModel> =>\n        counter.attribute.type === 'model' && counter.attribute.documentId === attribute.sticker.id,\n      )?.attribute;\n\n    if (!modelAttribute) return;\n\n    const isActive = attributes.some((item) => item.documentId === modelAttribute.documentId);\n    const updatedAttributes = isActive\n      ? attributes.filter((item) => item.documentId !== modelAttribute.documentId)\n      : [...attributes, modelAttribute];\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      modelAttributes: updatedAttributes,\n    } });\n  });\n\n  const handlePatternMenuItemClick = useLastCallback((attribute: ApiStarGiftAttributePattern) => {\n    if (!counters) return;\n    const attributes = filter.patternAttributes || [];\n    const patternAttribute = counters.find(\n      (counter): counter is ApiStarGiftAttributeCounter<ApiStarGiftAttributeIdPattern> =>\n        counter.attribute.type === 'pattern' && counter.attribute.documentId === attribute.sticker.id,\n    )?.attribute;\n\n    if (!patternAttribute) return;\n\n    const isActive = attributes.some((item) => item.documentId === patternAttribute.documentId);\n    const updatedAttributes = isActive\n      ? attributes.filter((item) => item.documentId !== patternAttribute.documentId)\n      : [...attributes, patternAttribute];\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      patternAttributes: updatedAttributes,\n    } });\n  });\n\n  const handleBackdropMenuItemClick = useLastCallback((attribute: ApiStarGiftAttributeBackdrop) => {\n    if (!counters) return;\n    const attributes = filter.backdropAttributes || [];\n    const backdropAttribute = counters.find(\n      (counter): counter is ApiStarGiftAttributeCounter<ApiStarGiftAttributeIdBackdrop> =>\n        counter.attribute.type === 'backdrop' && counter.attribute.backdropId === attribute.backdropId,\n    )?.attribute;\n\n    if (!backdropAttribute) return;\n\n    const isActive = attributes.some((item) => item.backdropId === backdropAttribute.backdropId);\n    const updatedAttributes = isActive\n      ? attributes.filter((item) => item.backdropId !== backdropAttribute.backdropId)\n      : [...attributes, backdropAttribute];\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      backdropAttributes: updatedAttributes,\n    } });\n  });\n\n  function renderSortMenuItems() {\n    return (\n      <>\n        <MenuItem icon=\"sort-by-price\" onClick={() => { handleSortMenuItemClick('byPrice'); }}>\n          <div className={styles.menuItemText}>\n            {lang('GiftSortByPrice')}\n          </div>\n          <Icon\n            className={styles.menuItemIcon}\n            name={filter?.sortType === 'byPrice' ? 'check' : 'placeholder'}\n          />\n        </MenuItem>\n        <MenuItem icon=\"sort-by-date\" onClick={() => { handleSortMenuItemClick('byDate'); }}>\n          <div className={styles.menuItemText}>\n            {lang('GiftSortByDate')}\n          </div>\n          <Icon\n            className={styles.menuItemIcon}\n            name={filter?.sortType === 'byDate' ? 'check' : 'placeholder'}\n          />\n\n        </MenuItem>\n        <MenuItem icon=\"sort-by-number\"onClick={() => { handleSortMenuItemClick('byNumber'); }}>\n          <div className={styles.menuItemText}>\n            {lang('GiftSortByNumber')}\n          </div>\n          <Icon\n            className={styles.menuItemIcon}\n            name={filter?.sortType === 'byNumber' ? 'check' : 'placeholder'}\n          />\n        </MenuItem>\n      </>\n    );\n  }\n\n  function renderSortMenu() {\n    return (\n      <Menu\n        isOpen={isSortContextMenuOpen}\n        anchor={sortContextMenuAnchor}\n        ref={sortMenuRef}\n        className={buildClassName(\n          styles.menu,\n          styles.left,\n          'with-menu-transitions',\n        )}\n        getMenuElement={getSortMenuElement}\n        autoClose\n        onClose={handleSortContextMenuClose}\n        onCloseAnimationEnd={handleSortContextMenuHide}\n        positionX=\"left\"\n      >\n        {renderSortMenuItems()}\n      </Menu>\n    );\n  }\n\n  const handleSearchModelInputReset = useCallback(() => {\n    setSearchModelQuery('');\n  }, []);\n  const handleSearchBackdropInputReset = useCallback(() => {\n    setSearchBackdropQuery('');\n  }, []);\n  const handleSearchPatternInputReset = useCallback(() => {\n    setSearchPatternQuery('');\n  }, []);\n  const handleSearchInputClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n  });\n\n  const modelMenuItemsContainerRef = useRef<HTMLDivElement>();\n  const { observe } = useIntersectionObserver({\n    rootRef: modelMenuItemsContainerRef,\n    isDisabled: !modelContextMenuAnchor,\n  });\n\n  function renderModelMenuItems() {\n    const models = filteredAndSearchedAttributes.model;\n    const selectedAttributes = filter.modelAttributes ?? [];\n    const isSelectedAll = selectedAttributes.length === 0;\n    return (\n      <div className={styles.menuContentContainer} ref={modelMenuItemsContainerRef}>\n        <SearchInput\n          onClick={handleSearchInputClick}\n          className={styles.search}\n          value={searchModelQuery}\n          onChange={setSearchModelQuery}\n          onReset={handleSearchModelInputReset}\n          placeholder={lang('Search')}\n        />\n        <MenuItem icon=\"select\" onClick={handleSelectedAllModelsClick} disabled={isSelectedAll}>\n          {lang('ContextMenuItemSelectAll')}\n        </MenuItem>\n        {models.map((model) => {\n          const isSelected = isSelectedAll\n            || selectedAttributes.some((attr) => attr.documentId === model.sticker.id);\n          return (\n            <MenuItem\n              key={model.name}\n              onClick={() => {\n                handleModelMenuItemClick(model);\n              }}\n            >\n              <ResaleGiftMenuAttributeSticker\n                className={styles.sticker}\n                sticker={model.sticker}\n                type=\"model\"\n                observeIntersectionForLoading={observe}\n                observeIntersectionForPlaying={observe}\n              />\n              <div className={styles.menuItemStickerText}>\n                {model.name}\n              </div>\n              <Icon\n                className={styles.menuItemIcon}\n                name={isSelected ? 'check' : 'placeholder'}\n              />\n            </MenuItem>\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderModelMenu() {\n    return (\n      <Menu\n        isOpen={isModelContextMenuOpen}\n        anchor={modelContextMenuAnchor}\n        ref={modelMenuRef}\n        className={buildClassName(\n          styles.menu,\n          styles.left,\n          'with-menu-transitions',\n        )}\n        getMenuElement={getModelMenuElement}\n        autoClose\n        onClose={handleModelContextMenuClose}\n        onCloseAnimationEnd={handleModelContextMenuHide}\n      >\n        {renderModelMenuItems()}\n      </Menu>\n    );\n  }\n\n  function renderBackdropMenuItems() {\n    const backdrops = filteredAndSearchedAttributes.backdrop;\n    const selectedAttributes = filter.backdropAttributes ?? [];\n    const isSelectedAll = selectedAttributes.length === 0;\n\n    return (\n      <div className={styles.menuContentContainer}>\n        <SearchInput\n          onClick={handleSearchInputClick}\n          className={styles.search}\n          value={searchBackdropQuery}\n          onChange={setSearchBackdropQuery}\n          onReset={handleSearchBackdropInputReset}\n          placeholder={lang('Search')}\n        />\n        <MenuItem icon=\"select\" onClick={handleSelectedAllBackdropsClick} disabled={isSelectedAll}>\n          {lang('ContextMenuItemSelectAll')}\n        </MenuItem>\n        {backdrops.map((backdrop) => {\n          const isSelected = isSelectedAll\n            || selectedAttributes.some((attr) => attr.backdropId === backdrop.backdropId);\n\n          return (\n            <MenuItem\n              key={backdrop.name}\n              onClick={() => {\n                handleBackdropMenuItemClick(backdrop);\n              }}\n            >\n              <RadialPatternBackground\n                className={styles.backdrop}\n                backgroundColors={[backdrop.centerColor, backdrop.edgeColor]}\n                patternColor={backdrop.patternColor}\n              />\n              <div className={styles.backdropAttributeMenuItemText}>\n                {backdrop.name}\n              </div>\n              <Icon\n                className={styles.menuItemIcon}\n                name={isSelected ? 'check' : 'placeholder'}\n              />\n            </MenuItem>\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderBackdropMenu() {\n    return (\n      <Menu\n        isOpen={isBackdropContextMenuOpen}\n        anchor={backdropContextMenuAnchor}\n        ref={backdropMenuRef}\n        className={buildClassName(styles.menu, styles.right, 'with-menu-transitions')}\n        getMenuElement={getBackdropMenuElement}\n        autoClose\n        onClose={handleBackdropContextMenuClose}\n        onCloseAnimationEnd={handleBackdropContextMenuHide}\n        positionX=\"right\"\n      >\n        {renderBackdropMenuItems()}\n      </Menu>\n    );\n  }\n\n  function renderPatternMenuItems() {\n    const patterns = filteredAndSearchedAttributes.pattern;\n    const selectedAttributes = filter.patternAttributes ?? [];\n    const isSelectedAll = selectedAttributes.length === 0;\n\n    return (\n      <div className={styles.menuContentContainer}>\n        <SearchInput\n          onClick={handleSearchInputClick}\n          className={styles.search}\n          value={searchPatternQuery}\n          onChange={setSearchPatternQuery}\n          onReset={handleSearchPatternInputReset}\n          placeholder={lang('Search')}\n        />\n        <MenuItem icon=\"select\" onClick={handleSelectedAllPatternsClick} disabled={isSelectedAll}>\n          {lang('ContextMenuItemSelectAll')}\n        </MenuItem>\n        {patterns.map((pattern) => {\n          const isSelected = isSelectedAll\n            || selectedAttributes.some((attr) => attr.documentId === pattern.sticker.id);\n\n          return (\n            <MenuItem\n              key={pattern.name}\n              onClick={() => {\n                handlePatternMenuItemClick(pattern);\n              }}\n            >\n\n              <ResaleGiftMenuAttributeSticker\n                className={styles.sticker}\n                sticker={pattern.sticker}\n                type=\"pattern\"\n              />\n\n              <div className={styles.menuItemStickerText}>\n                {pattern.name}\n              </div>\n              <Icon\n                className={styles.menuItemIcon}\n                name={isSelected ? 'check' : 'placeholder'}\n              />\n            </MenuItem>\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderPatternMenu() {\n    return (\n      <Menu\n        isOpen={isPatternContextMenuOpen}\n        anchor={patternContextMenuAnchor}\n        ref={patternMenuRef}\n        className={buildClassName(styles.menu, styles.right, 'with-menu-transitions')}\n        getMenuElement={getPatternMenuElement}\n        autoClose\n        onClose={handlePatternContextMenuClose}\n        onCloseAnimationEnd={handlePatternContextMenuHide}\n      >\n        {renderPatternMenuItems()}\n      </Menu>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      {Boolean(sortContextMenuAnchor) && renderSortMenu()}\n      {Boolean(modelContextMenuAnchor) && renderModelMenu()}\n      {Boolean(backdropContextMenuAnchor) && renderBackdropMenu()}\n      {Boolean(patternContextMenuAnchor) && renderPatternMenu()}\n      <div className={styles.buttonsContainer}>\n        <SortMenuButton\n          onTrigger={handleSortContextMenu}\n          isOpen={isSortContextMenuOpen}\n        />\n        <ModelMenuButton\n          onTrigger={handleModelContextMenu}\n          isOpen={isModelContextMenuOpen}\n        />\n        <BackdropMenuButton\n          onTrigger={handleBackdropContextMenu}\n          isOpen={isBackdropContextMenuOpen}\n        />\n        <PatternMenuButton\n          onTrigger={handlePatternContextMenu}\n          isOpen={isPatternContextMenuOpen}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { resaleGifts } = selectTabState(global);\n\n  const attributes = resaleGifts.attributes;\n  const counters = resaleGifts.counters;\n  const filter = resaleGifts.filter;\n\n  return {\n    attributes,\n    counters,\n    filter,\n  };\n})(GiftResaleFilters));\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"cUjwvN00\",\"item-selected\":\"medfcJpd\",\"itemSelected\":\"medfcJpd\",\"item\":\"dO7FKYY4\",\"selected-item\":\"B2lEJk1v\",\"selectedItem\":\"B2lEJk1v\",\"star\":\"Pb7AU805\"};","import {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { StarGiftCategory } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarGiftCategoryList.module.scss';\n\ntype OwnProps = {\n  onCategoryChanged: (category: StarGiftCategory) => void;\n};\n\ntype StateProps = {\n  idsByCategory?: Record<StarGiftCategory, string[]>;\n  areLimitedStarGiftsDisallowed?: boolean;\n};\n\nconst StarGiftCategoryList = ({\n  idsByCategory,\n  onCategoryChanged,\n  areLimitedStarGiftsDisallowed,\n}: StateProps & OwnProps) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n  const starCategories: number[] | undefined = useMemo(() => idsByCategory && Object.keys(idsByCategory)\n    .filter((category) => category !== 'all' && category !== 'limited')\n    .map(Number)\n    .sort((a, b) => a - b),\n  [idsByCategory]);\n\n  const hasResale = idsByCategory && idsByCategory['resale'].length > 0;\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n\n  function handleItemClick(category: StarGiftCategory) {\n    setSelectedCategory(category);\n    onCategoryChanged(\n      category,\n    );\n  }\n\n  function renderCategoryName(category: StarGiftCategory) {\n    if (category === 'all') return lang('AllGiftsCategory');\n    if (category === 'stock') return lang('StockGiftsCategory');\n    if (category === 'limited') return lang('LimitedGiftsCategory');\n    if (category === 'resale') return lang('GiftCategoryResale');\n    return category;\n  }\n\n  function renderCategoryItem(category: StarGiftCategory) {\n    return (\n      <div\n        className={buildClassName(\n          styles.item,\n          selectedCategory === category && styles.selectedItem,\n        )}\n        onClick={() => handleItemClick(category)}\n      >\n        {Number.isInteger(category) && (\n          <StarIcon\n            className={styles.star}\n            type=\"gold\"\n            size=\"middle\"\n          />\n        )}\n        {renderCategoryName(category)}\n      </div>\n    );\n  }\n\n  useHorizontalScroll(ref, undefined, true);\n\n  return (\n    <div ref={ref} className={buildClassName(styles.list, 'no-scrollbar')}>\n      {renderCategoryItem('all')}\n      {!areLimitedStarGiftsDisallowed && renderCategoryItem('limited')}\n      {!areLimitedStarGiftsDisallowed && hasResale && renderCategoryItem('resale')}\n      {renderCategoryItem('stock')}\n      {starCategories?.map(renderCategoryItem)}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { starGifts } = global;\n\n    return {\n      idsByCategory: starGifts?.idsByCategory,\n    };\n  },\n)(StarGiftCategoryList));\n","import type { FC } from '@teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '@teact';\nimport type React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiDisallowedGifts,\n  ApiPeer,\n  ApiPremiumGiftCodeOption,\n  ApiStarGift,\n  ApiStarGiftRegular,\n  ApiStarsAmount,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { StarGiftCategory } from '../../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport { getPeerTitle, isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { selectPeer, selectUserFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport InteractiveSparkles from '../../common/InteractiveSparkles';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport GiftSendingOptions from './GiftComposer';\nimport GiftItemPremium from './GiftItemPremium';\nimport GiftItemStar from './GiftItemStar';\nimport GiftModalResaleScreen from './GiftModalResaleScreen';\nimport GiftResaleFilters from './GiftResaleFilters';\nimport StarGiftCategoryList from './StarGiftCategoryList';\n\nimport styles from './GiftModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftModal'];\n};\n\nexport type GiftOption = ApiPremiumGiftCodeOption | ApiStarGift;\n\ntype StateProps = {\n  boostPerSentGift?: number;\n  starGiftsById?: Record<string, ApiStarGiftRegular>;\n  starGiftIdsByCategory?: Record<StarGiftCategory, string[]>;\n  starBalance?: ApiStarsAmount;\n  peer?: ApiPeer;\n  isSelf?: boolean;\n  disallowedGifts?: ApiDisallowedGifts;\n  resaleGiftsCount?: number;\n  areResaleGiftsLoading?: boolean;\n};\n\nconst AVATAR_SIZE = 100;\nconst INTERSECTION_THROTTLE = 200;\nconst SCROLL_THROTTLE = 200;\nconst AVATAR_SPARKLES_CENTER_SHIFT = [0, -50] as const;\n\nconst runThrottledForScroll = throttle((cb) => cb(), SCROLL_THROTTLE, true);\n\nconst GiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  starGiftsById,\n  starGiftIdsByCategory,\n  starBalance,\n  peer,\n  isSelf,\n  disallowedGifts,\n  resaleGiftsCount,\n  areResaleGiftsLoading,\n}) => {\n  const {\n    closeGiftModal, openGiftInfoModal, resetResaleGifts, loadResaleGifts,\n  } = getActions();\n  const dialogRef = useRef<HTMLDivElement>();\n  const transitionRef = useRef<HTMLDivElement>();\n  const giftHeaderRef = useRef<HTMLHeadingElement>();\n\n  const scrollerRef = useRef<HTMLDivElement>();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const user = peer && isApiPeerUser(peer) ? peer : undefined;\n  const chat = peer && isApiPeerChat(peer) ? peer : undefined;\n\n  const [selectedGift, setSelectedGift] = useState<GiftOption | undefined>();\n  const [selectedResellGift, setSelectedResellGift] = useState<ApiStarGift | undefined>();\n  const [shouldShowMainScreenHeader, setShouldShowMainScreenHeader] = useState(false);\n  const [isMainScreenHeaderForStarGifts, setIsMainScreenHeaderForStarGifts] = useState(false);\n  const [isGiftScreenHeaderForStarGifts, setIsGiftScreenHeaderForStarGifts] = useState(false);\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n  const triggerSparklesRef = useRef<(() => void) | undefined>();\n\n  const areAllGiftsDisallowed = useMemo(() => {\n    if (!disallowedGifts) {\n      return undefined;\n    }\n    const {\n      shouldDisallowPremiumGifts,\n      ...disallowedGiftTypes\n    } = disallowedGifts;\n    return !isSelf && Object.values(disallowedGiftTypes).every(Boolean);\n  }, [isSelf, disallowedGifts]);\n\n  const areUnlimitedStarGiftsDisallowed = !isSelf && disallowedGifts?.shouldDisallowUnlimitedStarGifts;\n  const areLimitedStarGiftsDisallowed = !isSelf && disallowedGifts?.shouldDisallowLimitedStarGifts;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const allGifts = renderingModal?.gifts;\n  const filteredGifts = useMemo(() => {\n    return allGifts?.sort((prevGift, gift) => prevGift.months - gift.months)\n      .filter((gift) => gift.users === 1 && gift.currency !== STARS_CURRENCY_CODE);\n  }, [allGifts]);\n\n  const giftsByStars = useMemo(() => {\n    const mapGifts = new Map();\n\n    if (!filteredGifts) return mapGifts;\n\n    filteredGifts.forEach((gift) => {\n      const giftByStars = allGifts?.find(\n        (starsGift) => starsGift.currency === STARS_CURRENCY_CODE\n          && starsGift.months === gift.months,\n      );\n      if (giftByStars) {\n        mapGifts.set(gift, giftByStars);\n      }\n    });\n\n    return mapGifts;\n  }, [allGifts, filteredGifts]);\n\n  const baseGift = useMemo(() => {\n    return filteredGifts?.reduce((prev, gift) => (prev.amount < gift.amount ? prev : gift));\n  }, [filteredGifts]);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: scrollerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const isResaleScreen = Boolean(selectedResellGift) && !selectedGift;\n  const isGiftScreen = Boolean(selectedGift);\n  const shouldShowHeader = isResaleScreen || isGiftScreen || shouldShowMainScreenHeader;\n  const isHeaderForStarGifts = isGiftScreen ? isGiftScreenHeaderForStarGifts : isMainScreenHeaderForStarGifts;\n\n  useEffect(() => {\n    if (selectedResellGift) {\n      loadResaleGifts({ giftId: selectedResellGift.id });\n    }\n  }, [selectedResellGift]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setShouldShowMainScreenHeader(false);\n      setSelectedGift(undefined);\n      setSelectedResellGift(undefined);\n      setSelectedCategory('all');\n    }\n  }, [isOpen]);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLDivElement>) => {\n    if (isGiftScreen) return;\n    const currentTarget = e.currentTarget;\n\n    runThrottledForScroll(() => {\n      const { scrollTop } = currentTarget;\n\n      setShouldShowMainScreenHeader(scrollTop > 150);\n\n      if (transitionRef.current && giftHeaderRef.current) {\n        const { top: headerTop } = giftHeaderRef.current.getBoundingClientRect();\n        const { top: transitionTop } = transitionRef.current.getBoundingClientRect();\n        setIsMainScreenHeaderForStarGifts(headerTop - transitionTop <= 0);\n      }\n    });\n  });\n\n  const giftPremiumDescription = lang('GiftPremiumDescription', {\n    user: getUserFullName(user)!,\n    link: (\n      <SafeLink\n        text={lang('GiftPremiumDescriptionLinkCaption')}\n        url={lang('GiftPremiumDescriptionLink')}\n      />\n    ),\n  }, { withNodes: true });\n\n  const starGiftDescription = chat\n    ? lang('StarGiftDescriptionChannel', { peer: getPeerTitle(lang, chat) }, {\n      withNodes: true,\n      withMarkdown: true,\n    })\n    : isSelf\n      ? lang('StarGiftDescriptionSelf', undefined, {\n        withNodes: true,\n        renderTextFilters: ['br'],\n      })\n      : lang('StarGiftDescription', {\n        user: getUserFullName(user)!,\n      }, { withNodes: true, withMarkdown: true });\n\n  function renderGiftPremiumHeader() {\n    return (\n      <h2 className={buildClassName(styles.headerText, styles.center)}>\n        {lang('GiftPremiumHeader')}\n      </h2>\n    );\n  }\n\n  function renderGiftPremiumDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.center)}>\n        {giftPremiumDescription}\n      </p>\n    );\n  }\n\n  function renderStarGiftsHeader() {\n    return (\n      <h2 ref={giftHeaderRef} className={buildClassName(styles.headerText, styles.center)}>\n        {lang(isSelf ? 'StarsGiftHeaderSelf' : 'StarsGiftHeader')}\n      </h2>\n    );\n  }\n\n  function renderStarGiftsDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.starGiftsDescription, styles.center)}>\n        {starGiftDescription}\n      </p>\n    );\n  }\n\n  const handleGiftClick = useLastCallback((gift: GiftOption, target?: 'resell' | 'original') => {\n    if (target === 'resell') {\n      if (!('id' in gift)) {\n        return;\n      }\n      if (isResaleScreen) {\n        openGiftInfoModal({ gift, recipientId: renderingModal?.forPeerId });\n        return;\n      }\n      setSelectedResellGift(gift);\n      return;\n    }\n    setSelectedGift(gift);\n    setIsGiftScreenHeaderForStarGifts('id' in gift);\n  });\n\n  function renderStarGifts() {\n    const filteredGiftIds = starGiftIdsByCategory?.[selectedCategory]?.filter((giftId) => {\n      const gift = starGiftsById?.[giftId];\n      if (!gift) return false;\n\n      const { isLimited, isSoldOut, upgradeStars } = gift;\n      if (areUnlimitedStarGiftsDisallowed && !areLimitedStarGiftsDisallowed) {\n        return isLimited;\n      }\n      if (areLimitedStarGiftsDisallowed && !areUnlimitedStarGiftsDisallowed) {\n        return !isLimited && !isSoldOut;\n      }\n      if (areUnlimitedStarGiftsDisallowed && areLimitedStarGiftsDisallowed) {\n        return Boolean(isLimited && Boolean(upgradeStars));\n      }\n\n      return true;\n    });\n\n    return (\n      <div className={styles.starGiftsContainer}>\n        {starGiftsById && filteredGiftIds?.flatMap((giftId) => {\n          const gift = starGiftsById[giftId];\n          const shouldShowResale = selectedCategory !== 'stock' && Boolean(gift.availabilityResale);\n          const shouldDuplicateAsResale = selectedCategory !== 'resale' && shouldShowResale && !gift.isSoldOut;\n\n          const elements = [\n            <GiftItemStar\n              key={giftId}\n              gift={gift}\n              observeIntersection={observeIntersection}\n              isResale={shouldShowResale && !shouldDuplicateAsResale}\n              onClick={handleGiftClick}\n            />,\n          ];\n\n          if (shouldDuplicateAsResale) {\n            elements.push(\n              <GiftItemStar\n                key={`resale_${giftId}`}\n                isResale\n                gift={gift}\n                observeIntersection={observeIntersection}\n                onClick={handleGiftClick}\n              />,\n            );\n          }\n\n          return elements;\n        })}\n      </div>\n    );\n  }\n\n  function renderPremiumGifts() {\n    return (\n      <div className={styles.premiumGiftsGallery}>\n        {filteredGifts?.map((gift) => {\n          return (\n            <GiftItemPremium\n              option={gift}\n              optionByStars={giftsByStars.get(gift)}\n              baseMonthAmount={baseGift ? Math.floor(baseGift.amount / baseGift.months) : undefined}\n              onClick={handleGiftClick}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  const onCategoryChanged = useLastCallback((category: StarGiftCategory) => {\n    setSelectedCategory(category);\n  });\n\n  const handleCloseModal = useLastCallback(() => {\n    setSelectedGift(undefined);\n    setSelectedResellGift(undefined);\n    resetResaleGifts();\n    closeGiftModal();\n  });\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (isResaleScreen) {\n      setSelectedResellGift(undefined);\n      resetResaleGifts();\n      return;\n    }\n    if (isGiftScreen) {\n      setSelectedGift(undefined);\n      return;\n    }\n    handleCloseModal();\n  });\n\n  const handleAvatarMouseMove = useLastCallback(() => {\n    triggerSparklesRef.current?.();\n  });\n\n  const handleRequestAnimation = useLastCallback((animate: NoneToVoidFunction) => {\n    triggerSparklesRef.current = animate;\n  });\n\n  function renderMainScreen() {\n    return (\n      <div ref={scrollerRef} className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <div className={styles.avatars}>\n          <Avatar\n            className={styles.avatar}\n            size={AVATAR_SIZE}\n            peer={peer}\n            onMouseMove={handleAvatarMouseMove}\n          />\n          <InteractiveSparkles\n            className={styles.logoBackground}\n            color=\"gold\"\n            centerShift={AVATAR_SPARKLES_CENTER_SHIFT}\n            onRequestAnimation={handleRequestAnimation}\n          />\n        </div>\n        {!isSelf && !chat && !disallowedGifts?.shouldDisallowPremiumGifts && (\n          <>\n            {renderGiftPremiumHeader()}\n            {renderGiftPremiumDescription()}\n            {renderPremiumGifts()}\n          </>\n        )}\n\n        {!areAllGiftsDisallowed && (\n          <>\n            {renderStarGiftsHeader()}\n            {renderStarGiftsDescription()}\n            <StarGiftCategoryList\n              areLimitedStarGiftsDisallowed={areLimitedStarGiftsDisallowed}\n              onCategoryChanged={onCategoryChanged}\n            />\n            <Transition\n              name=\"zoomFade\"\n              activeKey={getCategoryKey(selectedCategory)}\n              className={styles.starGiftsTransition}\n            >\n              {renderStarGifts()}\n            </Transition>\n          </>\n        )}\n      </div>\n    );\n  }\n\n  const isBackButton = isGiftScreen || isResaleScreen;\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n  );\n\n  function renderHeader() {\n    if (!shouldShowHeader) return undefined;\n    if (isResaleScreen) {\n      const isFirstLoading = areResaleGiftsLoading && !resaleGiftsCount;\n      return (\n        <div className={styles.resaleHeaderContentContainer}>\n          <h2 className={styles.resaleHeaderText}>\n            {selectedResellGift.title}\n          </h2>\n          {isFirstLoading\n            && (\n              <div className={styles.resaleHeaderDescription}>\n                {lang('Loading')}\n              </div>\n            )}\n          {!isFirstLoading && resaleGiftsCount !== undefined\n            && (\n              <div className={styles.resaleHeaderDescription}>\n                {lang('HeaderDescriptionResaleGifts', {\n                  count: resaleGiftsCount,\n                }, { withNodes: true, withMarkdown: true, pluralValue: resaleGiftsCount })}\n              </div>\n            )}\n          <GiftResaleFilters dialogRef={dialogRef} />\n        </div>\n      );\n    }\n    return (\n      <h2 className={styles.commonHeaderText}>\n        {lang(isHeaderForStarGifts ? (isSelf ? 'StarsGiftHeaderSelf' : 'StarsGiftHeader') : 'GiftPremiumHeader')}\n      </h2>\n    );\n  }\n\n  return (\n    <Modal\n      dialogRef={dialogRef}\n      onClose={handleCloseModal}\n      isOpen={isOpen}\n      isSlim\n      contentClassName={styles.content}\n      className={buildClassName(styles.modalDialog, styles.root)}\n      isLowStackPriority\n    >\n      <Button\n        className={styles.closeButton}\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleCloseButtonClick}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <BalanceBlock className={styles.balance} balance={starBalance} withAddButton />\n      <div className={buildClassName(\n        styles.header,\n        isResaleScreen && styles.resaleHeader,\n        !shouldShowHeader && styles.hiddenHeader)}\n      >\n        <Transition\n          name=\"slideVerticalFade\"\n          activeKey={!shouldShowHeader ? 0 : isResaleScreen ? 1 : isHeaderForStarGifts ? 2 : 3}\n          slideClassName={styles.headerSlide}\n        >\n          {renderHeader()}\n        </Transition>\n      </div>\n      <Transition\n        ref={transitionRef}\n        className={styles.transition}\n        name=\"pushSlide\"\n        activeKey={isGiftScreen ? 1 : isResaleScreen ? 2 : 0}\n      >\n        {!isGiftScreen && !isResaleScreen && renderMainScreen()}\n        {isResaleScreen && selectedResellGift\n          && (\n            <GiftModalResaleScreen\n              onGiftClick={handleGiftClick}\n            />\n          )}\n        {isGiftScreen && renderingModal?.forPeerId && (\n          <GiftSendingOptions\n            gift={selectedGift}\n            giftByStars={giftsByStars.get(selectedGift)}\n            peerId={renderingModal.forPeerId}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const {\n    starGifts,\n    stars,\n    currentUserId,\n  } = global;\n\n  const peer = modal?.forPeerId ? selectPeer(global, modal.forPeerId) : undefined;\n  const isSelf = Boolean(currentUserId && modal?.forPeerId === currentUserId);\n  const userFullInfo = peer ? selectUserFullInfo(global, peer?.id) : undefined;\n\n  const { resaleGifts } = selectTabState(global);\n  const resaleGiftsCount = resaleGifts.count;\n  const areResaleGiftsLoading = resaleGifts.isLoading !== false;\n\n  return {\n    boostPerSentGift: global.appConfig?.boostsPerSentGift,\n    starGiftsById: starGifts?.byId,\n    starGiftIdsByCategory: starGifts?.idsByCategory,\n    starBalance: stars?.balance,\n    peer,\n    isSelf,\n    disallowedGifts: userFullInfo?.disallowedGifts,\n    resaleGiftsCount,\n    areResaleGiftsLoading,\n  };\n})(GiftModal));\n\nfunction getCategoryKey(category: StarGiftCategory) {\n  if (category === 'all') return 0;\n  if (category === 'limited') return 1;\n  if (category === 'resale') return 2;\n  if (category === 'stock') return 3;\n  return category + 3;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"W3JMs1YE\",\"picker\":\"wOipz1Y_\"};","import {\n  memo, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport { selectCanGift } from '../../../../global/selectors';\nimport { unique } from '../../../../util/iteratees';\nimport sortChatIds from '../../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport PickerModal from '../../../common/pickers/PickerModal';\n\nimport styles from './GiftRecipientPicker.module.scss';\n\nexport type OwnProps = {\n  modal?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n}\n\nconst GiftRecipientPicker = ({\n  modal,\n  currentUserId,\n  userIds,\n}: OwnProps & StateProps) => {\n  const { closeGiftRecipientPicker, openGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n  const isOpen = modal;\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const global = getGlobal();\n    const idsWithSelf = userIds ? userIds.concat(currentUserId!) : undefined;\n    const filteredPeerIds = idsWithSelf ? filterPeersByQuery({ ids: idsWithSelf, query: searchQuery }) : [];\n\n    return sortChatIds(unique(filteredPeerIds).filter((peerId) => {\n      return selectCanGift(global, peerId);\n    }), undefined, [currentUserId!]);\n  }, [currentUserId, searchQuery, userIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((selectedId: string) => {\n    openGiftModal({ forUserId: selectedId });\n    closeGiftRecipientPicker();\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeGiftRecipientPicker}\n      title={oldLang('GiftTelegramPremiumOrStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onSelectedIdChange={handleSelectedUserIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        forceShowSelf\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { currentUserId } = global;\n\n  return {\n    currentUserId,\n    userIds: global.contactList?.userIds,\n  };\n})(GiftRecipientPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ef0cKSqQ\",\"giftPreview\":\"IvuNzslN\",\"backdrop\":\"dNukis4X\",\"arrow\":\"oufsMLLF\"};","import { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiPeer, ApiStarGiftUnique,\n} from '../../../api/types';\n\nimport { getGiftAttributes } from '../helpers/gifts';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport AnimatedIconFromSticker from '../AnimatedIconFromSticker';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\n\nimport styles from './GiftTransferPreview.module.scss';\n\ntype OwnProps = {\n  peer: ApiPeer;\n  gift: ApiStarGiftUnique;\n};\n\nconst AVATAR_SIZE = 4 * REM;\nconst GIFT_STICKER_SIZE = 3 * REM;\n\nconst GiftTransferPreview = ({\n  peer,\n  gift,\n}: OwnProps) => {\n  const giftAttributes = useMemo(() => {\n    return getGiftAttributes(gift);\n  }, [gift]);\n\n  if (!giftAttributes) return undefined;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.giftPreview}>\n        <RadialPatternBackground\n          className={styles.backdrop}\n          backgroundColors={[giftAttributes.backdrop!.centerColor, giftAttributes.backdrop!.edgeColor]}\n          patternColor={giftAttributes.backdrop?.patternColor}\n          patternIcon={giftAttributes.pattern?.sticker}\n        />\n        <AnimatedIconFromSticker\n          className={styles.sticker}\n          size={GIFT_STICKER_SIZE}\n          sticker={giftAttributes.model?.sticker}\n        />\n      </div>\n      <Icon name=\"next\" className={styles.arrow} />\n      <Avatar\n        peer={peer}\n        size={AVATAR_SIZE}\n        className={styles.avatar}\n      />\n    </div>\n  );\n};\n\nexport default memo(GiftTransferPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"nnublcCk\",\"checkBox\":\"fjE0wGvw\",\"checkBoxDescription\":\"tepUTe4z\",\"upgradeIcon\":\"lgyInH5K\",\"header\":\"p7FTs7_p\",\"title\":\"pIbzzTir\",\"description\":\"CCPfr26t\",\"soldOut\":\"kjWcRp4W\",\"headerSplitButton\":\"XOMI_4PO\",\"headerButton\":\"WA0INleU\",\"giftResalePriceContainer\":\"BN8gf5y6\",\"starAmountIcon\":\"_5guecUe\",\"giftResalePriceStar\":\"H_q8o2vY\",\"left\":\"aOhTHZlf\",\"right\":\"rJOB1u5Q\",\"footer\":\"bho0GTYt\",\"footerDescription\":\"VUylTszM\",\"unknown\":\"zDauXmpS\",\"giftValue\":\"w_E4LkUj\",\"uniqueAttribute\":\"OJQnkf17\",\"uniqueGift\":\"I6o_pGAm\",\"modalHeader\":\"ie9tImaj\",\"modalCloseButton\":\"p38RBGdC\",\"ownerAddress\":\"DavMRg4Q\",\"copyIcon\":\"SLX5tX8C\"};","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiEmojiStatusType,\n  ApiPeer,\n  ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../../config';\nimport { getHasAdminRight } from '../../../../global/helpers';\nimport { getPeerTitle, isApiPeerChat, isApiPeerUser } from '../../../../global/helpers/peers';\nimport { getMainUsername } from '../../../../global/helpers/users';\nimport { selectPeer, selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport {\n  formatStarsAsIcon, formatStarsAsText, formatTonAsIcon, formatTonAsText,\n} from '../../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../../util/objects/customPeer';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { formatPercent } from '../../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport BadgeButton from '../../../common/BadgeButton';\nimport GiftMenuItems from '../../../common/gift/GiftMenuItems';\nimport GiftTransferPreview from '../../../common/gift/GiftTransferPreview';\nimport Icon from '../../../common/icons/Icon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\nimport DropdownMenu from '../../../ui/DropdownMenu';\nimport Link from '../../../ui/Link';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport UniqueGiftHeader from '../UniqueGiftHeader';\n\nimport styles from './GiftInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftInfoModal'];\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  targetPeer?: ApiPeer;\n  releasedByPeer?: ApiPeer;\n  currentUserId?: string;\n  starGiftMaxConvertPeriod?: number;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n  tonExplorerUrl?: string;\n  currentUser?: ApiUser;\n  recipientPeer?: ApiPeer;\n};\n\nconst STICKER_SIZE = 120;\n\nconst GiftInfoModal = ({\n  modal,\n  fromPeer,\n  targetPeer,\n  releasedByPeer,\n  currentUserId,\n  starGiftMaxConvertPeriod,\n  hasAdminRights,\n  currentUserEmojiStatus,\n  collectibleEmojiStatuses,\n  tonExplorerUrl,\n  currentUser,\n  recipientPeer,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftInfoModal,\n    changeGiftVisibility,\n    convertGiftToStars,\n    openChatWithInfo,\n    focusMessage,\n    openGiftUpgradeModal,\n    showNotification,\n    buyStarGift,\n    closeGiftModal,\n  } = getActions();\n\n  const [isConvertConfirmOpen, openConvertConfirm, closeConvertConfirm] = useFlag();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState<boolean>(false);\n  const [shouldPayInTon, setShouldPayInTon] = useState<boolean>(false);\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingFromPeer = useCurrentOrPrev(fromPeer);\n  const renderingTargetPeer = useCurrentOrPrev(targetPeer);\n\n  const isTargetChat = renderingTargetPeer && isApiPeerChat(renderingTargetPeer);\n\n  const { gift: typeGift } = renderingModal || {};\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const isSender = savedGift?.fromId === currentUserId;\n  const canConvertDifference = (savedGift && starGiftMaxConvertPeriod && (\n    savedGift.date + starGiftMaxConvertPeriod - getServerTime()\n  )) || 0;\n  const conversionLeft = Math.ceil(canConvertDifference / 60 / 60 / 24);\n\n  const gift = isSavedGift ? typeGift.gift : typeGift;\n  const giftSticker = gift && getStickerFromGift(gift);\n  const hasConvertOption = canConvertDifference > 0 && Boolean(savedGift?.starsToConvert);\n\n  const isGiftUnique = gift && gift.type === 'starGiftUnique';\n  const uniqueGift = isGiftUnique ? gift : undefined;\n\n  const giftSubtitle = useMemo(() => {\n    if (!gift || gift.type !== 'starGiftUnique') return undefined;\n\n    if (releasedByPeer) {\n      const releasedByUsername = `@${getMainUsername(releasedByPeer)}`;\n      const ownerTitle = releasedByUsername || getPeerTitle(lang, releasedByPeer);\n      const fallbackText = isApiPeerUser(releasedByPeer)\n        ? lang('ActionFallbackUser')\n        : lang('ActionFallbackChannel');\n\n      return lang('GiftInfoCollectibleBy', {\n        number: gift.number, owner: ownerTitle || fallbackText }, {\n        withNodes: true,\n        withMarkdown: true,\n      });\n    }\n\n    return lang('GiftInfoCollectible', { number: gift.number });\n  }, [gift, releasedByPeer, lang]);\n\n  const canFocusUpgrade = Boolean(savedGift?.upgradeMsgId);\n  const canManage = !canFocusUpgrade && savedGift?.inputGift && (\n    isTargetChat ? hasAdminRights : renderingTargetPeer?.id === currentUserId\n  );\n\n  function getResalePrice(shouldPayInTon?: boolean) {\n    if (!isGiftUnique) return undefined;\n    const amounts = gift.resellPrice;\n    if (!amounts) return undefined;\n\n    if (gift?.resaleTonOnly || shouldPayInTon) {\n      return amounts.find((amount) => amount.currency === TON_CURRENCY_CODE);\n    }\n\n    return amounts.find((amount) => amount.currency === STARS_CURRENCY_CODE);\n  }\n\n  const resellPrice = getResalePrice();\n  const confirmPrice = getResalePrice(shouldPayInTon);\n  const canBuyGift = gift?.type === 'starGiftUnique' && gift.ownerId !== currentUserId && Boolean(resellPrice);\n\n  const giftOwnerTitle = (() => {\n    if (!isGiftUnique) return undefined;\n    const { ownerName, ownerId } = gift;\n    const global = getGlobal(); // Peer titles do not need to be reactive\n    const owner = ownerId ? selectPeer(global, ownerId) : undefined;\n    return owner ? getPeerTitle(lang, owner) : ownerName;\n  })();\n\n  const handleClose = useLastCallback(() => {\n    closeGiftInfoModal();\n  });\n\n  const handleFocusUpgraded = useLastCallback(() => {\n    const giftChat = isSender ? renderingTargetPeer : renderingFromPeer;\n    if (!savedGift?.upgradeMsgId || !giftChat) return;\n    const { upgradeMsgId } = savedGift;\n    focusMessage({ chatId: giftChat.id, messageId: upgradeMsgId });\n    handleClose();\n  });\n\n  const handleTriggerVisibility = useLastCallback(() => {\n    const { inputGift, isUnsaved } = savedGift!;\n    changeGiftVisibility({ gift: inputGift!, shouldUnsave: !isUnsaved });\n    handleClose();\n  });\n\n  const handleConvertToStars = useLastCallback(() => {\n    const { inputGift } = savedGift!;\n    convertGiftToStars({ gift: inputGift! });\n    closeConvertConfirm();\n    handleClose();\n  });\n\n  const handleOpenUpgradeModal = useLastCallback(() => {\n    if (!savedGift) return;\n    openGiftUpgradeModal({ giftId: savedGift.gift.id, gift: savedGift });\n  });\n\n  const handleBuyGift = useLastCallback(() => {\n    if (gift?.type !== 'starGiftUnique' || !getResalePrice()) return;\n    setIsConfirmModalOpen(true);\n  });\n\n  const closeConfirmModal = useLastCallback(() => {\n    setIsConfirmModalOpen(false);\n  });\n\n  const handleConfirmBuyGift = useLastCallback(() => {\n    const peer = recipientPeer || currentUser;\n    const price = getResalePrice(shouldPayInTon);\n    if (!peer || !price || gift?.type !== 'starGiftUnique') return;\n    closeConfirmModal();\n    closeGiftModal();\n    buyStarGift({ peerId: peer.id, slug: gift.slug, price });\n  });\n\n  const giftAttributes = useMemo(() => {\n    return gift && getGiftAttributes(gift);\n  }, [gift]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isMenuOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger }) => (\n      <div\n        className={buildClassName(\n          styles.headerButton,\n          styles.left,\n        )}\n        tabIndex={0}\n        role=\"button\"\n        aria-haspopup=\"menu\"\n        aria-label={lang('AriaMoreButton')}\n        onClick={onTrigger}\n      >\n        <Icon\n          name=\"more\"\n          className={styles.icon}\n        />\n      </div>\n    );\n  }, [lang]);\n\n  const renderFooterButton = useLastCallback(() => {\n    if (canBuyGift) {\n      return (\n        <Button noForcedUpperCase size=\"smaller\" onClick={handleBuyGift}>\n          {lang('ButtonBuyGift', {\n            stars: resellPrice?.currency === TON_CURRENCY_CODE\n              ? formatTonAsIcon(lang, resellPrice.amount, { shouldConvertFromNanos: true })\n              : formatStarsAsIcon(lang, resellPrice?.amount, { asFont: true }),\n          }, { withNodes: true })}\n        </Button>\n      );\n    }\n\n    if (canFocusUpgrade) {\n      return (\n        <Button size=\"smaller\" onClick={handleFocusUpgraded}>\n          {lang('GiftInfoViewUpgraded')}\n        </Button>\n      );\n    }\n\n    if (canManage && savedGift?.alreadyPaidUpgradeStars && !savedGift.upgradeMsgId) {\n      return (\n        <Button size=\"smaller\" isShiny onClick={handleOpenUpgradeModal}>\n          {lang('GiftInfoUpgradeForFree')}\n          <Icon name=\"arrow-down-circle\" className={styles.upgradeIcon} />\n        </Button>\n      );\n    }\n\n    if (canManage && savedGift.canUpgrade && !savedGift.upgradeMsgId) {\n      return (\n        <Button size=\"smaller\" isShiny onClick={handleOpenUpgradeModal}>\n          {lang('GiftInfoUpgrade')}\n          <Icon name=\"arrow-down-circle\" className={styles.upgradeIcon} />\n        </Button>\n      );\n    }\n\n    return (\n      <Button size=\"smaller\" onClick={handleClose}>\n        {lang('OK')}\n      </Button>\n    );\n  });\n\n  const saleDateInfo = useMemo(() => {\n    if (!gift) return undefined;\n    let text = '';\n    if (gift.type === 'starGift') {\n      if (gift.firstSaleDate) {\n        text += `${lang('GiftInfoFirstSale')} ${formatDateTimeToString(gift.firstSaleDate * 1000, lang.code, true)}`;\n      }\n      if (gift.lastSaleDate) {\n        text += '\\n';\n        text += `${lang('GiftInfoLastSale')} ${formatDateTimeToString(gift.lastSaleDate * 1000, lang.code, true)}`;\n      }\n    }\n\n    return text;\n  }, [gift, lang]);\n\n  const modalData = useMemo(() => {\n    if (!typeGift || !gift) {\n      return undefined;\n    }\n\n    const {\n      fromId, isNameHidden, starsToConvert, isUnsaved, isConverted, upgradeMsgId,\n    } = savedGift || {};\n    const canConvert = hasConvertOption && Boolean(starsToConvert);\n\n    const isVisibleForMe = isNameHidden && renderingTargetPeer;\n\n    const description = (() => {\n      if (!savedGift) return lang('GiftInfoSoldOutDescription');\n      if (isTargetChat) return undefined;\n\n      if (savedGift.upgradeMsgId) return lang('GiftInfoDescriptionUpgraded');\n      if (canManage && savedGift.canUpgrade && savedGift.alreadyPaidUpgradeStars && !savedGift.upgradeMsgId) {\n        return lang('GiftInfoDescriptionUpgrade');\n      }\n      if (savedGift.canUpgrade && canManage) {\n        return canManage\n          ? lang('GiftInfoDescriptionFreeUpgrade')\n          : lang('GiftInfoPeerDescriptionFreeUpgradeOut', { peer: getPeerTitle(lang, renderingTargetPeer!)! });\n      }\n      if (!canManage && !isSender) return undefined;\n      if (isConverted && canConvert) {\n        return canManage\n          ? lang('GiftInfoDescriptionConverted', {\n            amount: starsToConvert,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          })\n          : lang('GiftInfoPeerDescriptionOutConverted', {\n            amount: starsToConvert,\n            peer: getPeerTitle(lang, renderingTargetPeer!)!,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          });\n      }\n\n      if (savedGift.canUpgrade && canManage) {\n        if (canConvert) {\n          return lang('GiftInfoDescriptionUpgrade', {\n            amount: starsToConvert,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          });\n        }\n\n        return lang('GiftInfoDescriptionUpgradeRegular');\n      }\n\n      if (canManage) {\n        if (canConvert) {\n          return lang('GiftInfoDescription', {\n            amount: starsToConvert,\n          }, {\n            withNodes: true,\n            withMarkdown: true,\n            pluralValue: starsToConvert,\n          });\n        }\n\n        return lang('GiftInfoDescriptionRegular');\n      }\n\n      if (canConvert) {\n        return lang('GiftInfoPeerDescriptionOut', {\n          amount: starsToConvert,\n          peer: getPeerTitle(lang, renderingTargetPeer!)!,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n          pluralValue: starsToConvert,\n        });\n      }\n\n      return lang('GiftInfoPeerDescriptionOutRegular', { peer: getPeerTitle(lang, renderingTargetPeer!)! });\n    })();\n\n    function getTitle() {\n      if (isGiftUnique) return gift.title;\n      if (!savedGift) return lang('GiftInfoSoldOutTitle');\n\n      return canManage ? lang('GiftInfoReceived') : lang('GiftInfoTitle');\n    }\n\n    const uniqueGiftContextMenu = (\n      <DropdownMenu\n        className=\"with-menu-transitions\"\n        trigger={SettingsMenuButton}\n        positionX=\"right\"\n      >\n        <GiftMenuItems\n          peerId={renderingModal!.peerId!}\n          gift={typeGift}\n          canManage={canManage}\n          collectibleEmojiStatuses={collectibleEmojiStatuses}\n          currentUserEmojiStatus={currentUserEmojiStatus}\n        />\n      </DropdownMenu>\n    );\n\n    const uniqueGiftModalHeader = (\n      <div\n        className={styles.modalHeader}\n      >\n        {canBuyGift && (\n          <div className={styles.giftResalePriceContainer}>\n            {resellPrice.currency === TON_CURRENCY_CODE\n              ? formatTonAsIcon(lang, resellPrice.amount, {\n                className: styles.giftResalePriceStar,\n                shouldConvertFromNanos: true,\n              })\n              : formatStarsAsIcon(lang, resellPrice.amount, {\n                asFont: true,\n                className: styles.giftResalePriceStar,\n              })}\n          </div>\n        )}\n        <div className={styles.headerSplitButton}>\n          {isOpen && uniqueGiftContextMenu}\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.right,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-haspopup=\"menu\"\n            aria-label={lang('Close')}\n            onClick={handleClose}\n          >\n            <Icon\n              name=\"close\"\n              className={buildClassName(\n                styles.icon,\n                styles.moreIcon,\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    );\n\n    const uniqueGiftHeader = isGiftUnique && (\n      <div className={buildClassName(styles.header, styles.uniqueGift)}>\n        <UniqueGiftHeader\n          backdropAttribute={giftAttributes!.backdrop!}\n          patternAttribute={giftAttributes!.pattern!}\n          modelAttribute={giftAttributes!.model!}\n          title={gift.title}\n          subtitle={giftSubtitle}\n          subtitlePeer={releasedByPeer}\n        />\n      </div>\n    );\n\n    const regularHeader = (\n      <div className={styles.header}>\n        <AnimatedIconFromSticker\n          className={styles.giftSticker}\n          sticker={giftSticker}\n          size={STICKER_SIZE}\n        />\n        <h1 className={styles.title}>\n          {getTitle()}\n        </h1>\n        {Boolean(description) && (\n          <p className={buildClassName(styles.description, !savedGift && gift?.type === 'starGift' && styles.soldOut)}>\n            {description}\n          </p>\n        )}\n      </div>\n    );\n\n    const tableData: TableData = [];\n    if (gift.type === 'starGift') {\n      const hasFrom = fromId || isNameHidden;\n\n      if (hasFrom) {\n        tableData.push([\n          lang('GiftInfoFrom'),\n          !fromId ? (\n            <>\n              <Avatar size=\"small\" peer={CUSTOM_PEER_HIDDEN} />\n              <span className={styles.unknown}>{oldLang(CUSTOM_PEER_HIDDEN.titleKey!)}</span>\n            </>\n          ) : { chatId: fromId },\n        ]);\n      }\n\n      if (savedGift?.date) {\n        tableData.push([\n          lang('GiftInfoDate'),\n          <span title={saleDateInfo}>{formatDateTimeToString(savedGift.date * 1000, lang.code, true)}</span>,\n        ]);\n      }\n\n      if (gift.firstSaleDate && !savedGift) {\n        tableData.push([\n          lang('GiftInfoFirstSale'),\n          formatDateTimeToString(gift.firstSaleDate * 1000, lang.code, true),\n        ]);\n      }\n\n      if (gift.lastSaleDate && !savedGift) {\n        tableData.push([\n          lang('GiftInfoLastSale'),\n          formatDateTimeToString(gift.lastSaleDate * 1000, lang.code, true),\n        ]);\n      }\n\n      const starsValue = gift.stars + (savedGift?.alreadyPaidUpgradeStars || 0);\n\n      tableData.push([\n        lang('GiftInfoValue'),\n        <div className={styles.giftValue}>\n          {formatStarsAsIcon(lang, starsValue, { className: styles.starAmountIcon })}\n          {canManage && hasConvertOption && Boolean(starsToConvert) && (\n            <BadgeButton onClick={openConvertConfirm}>\n              {lang('GiftInfoConvert', { amount: starsToConvert }, { pluralValue: starsToConvert })}\n            </BadgeButton>\n          )}\n        </div>,\n      ]);\n\n      if (gift.availabilityTotal) {\n        tableData.push([\n          lang('GiftInfoAvailability'),\n          lang('GiftInfoAvailabilityValue', {\n            count: gift.availabilityRemains || 0,\n            total: gift.availabilityTotal,\n          }, {\n            pluralValue: gift.availabilityRemains || 0,\n          }),\n        ]);\n      }\n\n      if (gift.upgradeStars && !upgradeMsgId) {\n        tableData.push([\n          lang('GiftInfoStatus'),\n          <div className={styles.giftValue}>\n            {lang('GiftInfoStatusNonUnique')}\n          </div>,\n        ]);\n      }\n\n      if (savedGift?.message) {\n        tableData.push([\n          undefined,\n          renderTextWithEntities(savedGift.message),\n        ]);\n      }\n    }\n\n    if (isGiftUnique) {\n      const { ownerName, ownerAddress, ownerId } = gift;\n      const ownerPeer = ownerId ? selectPeer(getGlobal(), ownerId) : undefined;\n      const {\n        model, backdrop, pattern, originalDetails,\n      } = giftAttributes || {};\n\n      if (ownerAddress) {\n        tableData.push([\n          lang('GiftInfoOwner'),\n          <span\n            className={styles.ownerAddress}\n            onClick={() => {\n              copyTextToClipboard(ownerAddress);\n              showNotification({\n                message: { key: 'WalletAddressCopied' },\n                icon: 'copy',\n              });\n            }}\n          >\n            {ownerAddress}\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </span>,\n        ]);\n      } else if (ownerPeer || ownerName) {\n        tableData.push([\n          lang('GiftInfoOwner'),\n          ownerId ? { chatId: ownerId, withEmojiStatus: true } : ownerName || '',\n        ]);\n      }\n\n      if (model) {\n        tableData.push([\n          lang('GiftAttributeModel'),\n          <span className={styles.uniqueAttribute}>\n            {model.name}\n            <BadgeButton>{formatPercent(model.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (backdrop) {\n        tableData.push([\n          lang('GiftAttributeBackdrop'),\n          <span className={styles.uniqueAttribute}>\n            {backdrop.name}\n            <BadgeButton>{formatPercent(backdrop.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (pattern) {\n        tableData.push([\n          lang('GiftAttributeSymbol'),\n          <span className={styles.uniqueAttribute}>\n            {pattern.name}\n            <BadgeButton>{formatPercent(pattern.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      tableData.push([\n        lang('GiftInfoAvailability'),\n        lang('GiftInfoIssued', {\n          issued: gift.issuedCount,\n          total: gift.totalCount,\n        }),\n      ]);\n\n      if (originalDetails) {\n        const {\n          date, recipientId, message, senderId,\n        } = originalDetails;\n        const global = getGlobal(); // Peer titles do not need to be reactive\n\n        const openChat = (id: string) => {\n          openChatWithInfo({ id });\n          closeGiftInfoModal();\n        };\n\n        const recipient = selectPeer(global, recipientId)!;\n        const sender = senderId ? selectPeer(global, senderId) : undefined;\n\n        const formattedDate = formatDateTimeToString(date * 1000, lang.code, true);\n        const recipientLink = (\n\n          <Link onClick={() => openChat(recipientId)} isPrimary>\n            {getPeerTitle(lang, recipient)}\n          </Link>\n        );\n\n        let text: TeactNode | undefined;\n        if (!sender || senderId === recipientId) {\n          text = message ? lang('GiftInfoPeerOriginalInfoText', {\n            peer: recipientLink,\n            text: renderTextWithEntities(message),\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          }) : lang('GiftInfoPeerOriginalInfo', {\n            peer: recipientLink,\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          });\n        } else {\n          const senderLink = (\n\n            <Link onClick={() => openChat(sender.id)} isPrimary>\n              {getPeerTitle(lang, sender)}\n            </Link>\n          );\n          text = message ? lang('GiftInfoPeerOriginalInfoTextSender', {\n            peer: recipientLink,\n            sender: senderLink,\n            text: renderTextWithEntities(message),\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          }) : lang('GiftInfoPeerOriginalInfoSender', {\n            peer: recipientLink,\n            date: formattedDate,\n            sender: senderLink,\n          }, {\n            withNodes: true,\n          });\n        }\n\n        tableData.push([\n          undefined,\n          <span>{text}</span>,\n        ]);\n      }\n    }\n\n    const tonLink = tonExplorerUrl && isGiftUnique && gift.giftAddress && (\n      `${tonExplorerUrl}${gift.giftAddress}`\n    );\n\n    const footer = (\n      <div className={styles.footer}>\n        {(canManage || tonLink || canBuyGift) && (\n          <div className={styles.footerDescription}>\n            {tonLink && (\n              <div>\n                {lang('GiftInfoTonText', {\n                  link: <SafeLink url={tonLink} shouldSkipModal text={lang('GiftInfoTonLinkText')} />,\n                }, { withNodes: true })}\n              </div>\n            )}\n            {canManage && (\n              <div>\n                {lang(`GiftInfo${isTargetChat ? 'Channel' : ''}${isUnsaved ? 'Hidden' : 'Saved'}`, {\n                  link: (\n                    <Link isPrimary onClick={handleTriggerVisibility}>\n                      {lang(`GiftInfoSaved${isUnsaved ? 'Show' : 'Hide'}`)}\n                    </Link>\n                  ),\n                }, {\n                  withNodes: true,\n                })}\n              </div>\n            )}\n            {!canBuyGift && isVisibleForMe && (\n              <div>\n                {lang('GiftInfoSenderHidden')}\n              </div>\n            )}\n            {canBuyGift && giftOwnerTitle && (\n              <div>\n                {lang('GiftInfoBuyGift', {\n                  user: giftOwnerTitle,\n                }, { withNodes: true })}\n              </div>\n            )}\n          </div>\n        )}\n        {renderFooterButton()}\n      </div>\n    );\n\n    return {\n      modalHeader: isGiftUnique ? uniqueGiftModalHeader : undefined,\n      header: isGiftUnique ? uniqueGiftHeader : regularHeader,\n      tableData,\n      footer,\n    };\n  }, [\n    typeGift, savedGift, renderingTargetPeer, giftSticker, lang,\n    canManage, hasConvertOption, isSender, oldLang, tonExplorerUrl,\n    gift, giftAttributes, renderFooterButton, isTargetChat,\n    SettingsMenuButton, isGiftUnique, renderingModal,\n    collectibleEmojiStatuses, currentUserEmojiStatus, saleDateInfo,\n    canBuyGift, giftOwnerTitle, isOpen, resellPrice, giftSubtitle,\n    releasedByPeer,\n  ]);\n\n  return (\n    <>\n      <TableInfoModal\n        isOpen={isOpen}\n        modalHeader={modalData?.modalHeader}\n        header={modalData?.header}\n        hasBackdrop={isGiftUnique}\n        tableData={modalData?.tableData}\n        footer={modalData?.footer}\n        className={styles.modal}\n        onClose={handleClose}\n        withBalanceBar={Boolean(canBuyGift)}\n        currencyInBalanceBar={confirmPrice?.currency}\n        isLowStackPriority\n      />\n      {uniqueGift && currentUser && Boolean(confirmPrice) && (\n        <ConfirmDialog\n          isOpen={isConfirmModalOpen}\n          noDefaultTitle\n          onClose={closeConfirmModal}\n          confirmLabel={lang('ButtonBuyGift', {\n            stars: confirmPrice?.currency === TON_CURRENCY_CODE\n              ? formatTonAsIcon(lang, confirmPrice.amount, { shouldConvertFromNanos: true })\n              : formatStarsAsIcon(lang, confirmPrice.amount, { asFont: true }),\n          }, { withNodes: true })}\n          confirmHandler={handleConfirmBuyGift}\n        >\n\n          <GiftTransferPreview\n            peer={recipientPeer || currentUser}\n            gift={uniqueGift}\n          />\n          {!recipientPeer\n            && (\n              <p>\n                {lang('GiftBuyConfirmDescription', {\n                  gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                  stars: confirmPrice?.currency === TON_CURRENCY_CODE\n                    ? formatTonAsText(lang, confirmPrice.amount, true)\n                    : formatStarsAsText(lang, confirmPrice.amount),\n                }, {\n                  withNodes: true,\n                  withMarkdown: true,\n                })}\n              </p>\n            )}\n          {recipientPeer\n            && (\n              <p>\n                {lang('GiftBuyForPeerConfirmDescription', {\n                  gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                  stars: confirmPrice?.currency === TON_CURRENCY_CODE\n                    ? formatTonAsText(lang, confirmPrice.amount, true)\n                    : formatStarsAsText(lang, confirmPrice.amount),\n                  peer: getPeerTitle(lang, recipientPeer),\n                }, {\n                  withNodes: true,\n                  withMarkdown: true,\n                })}\n              </p>\n            )}\n          {!uniqueGift.resaleTonOnly && (\n            <>\n              <Checkbox\n                className={styles.checkBox}\n                label={lang('LabelPayInTON')}\n                checked={shouldPayInTon}\n                onCheck={setShouldPayInTon}\n              />\n\n              <div className={styles.checkBoxDescription}>\n                {lang('DescriptionPayInTON')}\n              </div>\n            </>\n          )}\n        </ConfirmDialog>\n      )}\n      {savedGift && (\n        <ConfirmDialog\n          isOpen={isConvertConfirmOpen}\n          onClose={closeConvertConfirm}\n          confirmHandler={handleConvertToStars}\n          title={lang('GiftInfoConvertTitle')}\n        >\n          <div>\n            {lang('GiftInfoPeerConvertDescription', {\n              amount: formatStarsAsText(lang, savedGift.starsToConvert!),\n              peer: getPeerTitle(lang, renderingFromPeer!)!,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            })}\n          </div>\n          {hasConvertOption && (\n            <div>\n              {lang('GiftInfoConvertDescriptionPeriod', {\n                count: conversionLeft,\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: conversionLeft,\n              })}\n            </div>\n          )}\n          <div>{lang('GiftInfoConvertDescription2')}</div>\n        </ConfirmDialog>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const typeGift = modal?.gift;\n    const isSavedGift = typeGift && 'gift' in typeGift;\n    const currentUserId = global.currentUserId;\n\n    const fromId = isSavedGift && typeGift.fromId;\n    const fromPeer = fromId ? selectPeer(global, fromId) : undefined;\n    const targetPeer = modal?.peerId ? selectPeer(global, modal.peerId) : undefined;\n    const chat = targetPeer && isApiPeerChat(targetPeer) ? targetPeer : undefined;\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n    const currentUser = selectUser(global, currentUserId!);\n    const recipientPeer = modal?.recipientId && currentUserId !== modal.recipientId\n      ? selectPeer(global, modal.recipientId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    const gift = isSavedGift ? typeGift.gift : typeGift;\n    const releasedByPeerId = gift?.type === 'starGiftUnique' && gift.releasedByPeerId;\n    const releasedByPeer = releasedByPeerId ? selectPeer(global, releasedByPeerId) : undefined;\n\n    return {\n      fromPeer,\n      targetPeer,\n      releasedByPeer,\n      currentUserId,\n      starGiftMaxConvertPeriod: global.appConfig?.starGiftMaxConvertPeriod,\n      tonExplorerUrl: global.appConfig?.tonExplorerUrl,\n      hasAdminRights,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n      currentUser,\n      recipientPeer,\n    };\n  },\n)(GiftInfoModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"checkBoxDescription\":\"pWjQiY4m\",\"inputPriceDescription\":\"SGFmA4kL\",\"checkBox\":\"yt_nODdj\",\"descriptionPrice\":\"r9R0VR_w\",\"inputPrice\":\"ElDo1Bru\"};","import {\n  memo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { TabState } from '../../../../global/types';\n\nimport { convertTonFromNanos, convertTonToNanos } from '../../../../util/formatCurrency';\nimport { convertTonToUsd, formatCurrencyAsString } from '../../../../util/formatCurrency';\nimport { formatStarsAsIcon, formatStarsAsText, formatTonAsIcon,\n  formatTonAsText } from '../../../../util/localization/format';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport Modal from '../../../ui/Modal';\n\nimport styles from './GiftResalePriceComposerModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftResalePriceComposerModal'];\n};\n\nexport type StateProps = {\n  starsStargiftResaleCommissionPermille?: number;\n  starsStargiftResaleAmountMin: number;\n  starsStargiftResaleAmountMax?: number;\n  starsUsdWithdrawRate?: number;\n  tonStargiftResaleCommissionPermille?: number;\n  tonStargiftResaleAmountMin: number;\n  tonStargiftResaleAmountMax?: number;\n  tonUsdRate?: number;\n};\n\nconst GiftResalePriceComposerModal = ({\n  modal, starsStargiftResaleCommissionPermille,\n  starsStargiftResaleAmountMin, starsStargiftResaleAmountMax, starsUsdWithdrawRate,\n  tonStargiftResaleCommissionPermille, tonStargiftResaleAmountMin, tonStargiftResaleAmountMax, tonUsdRate,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftResalePriceComposerModal,\n    closeGiftInfoModal,\n    updateStarGiftPrice,\n    showNotification,\n  } = getActions();\n  const isOpen = Boolean(modal);\n  const [price, setPrice] = useState<number | undefined>(undefined);\n  const [isPriceInTon, setIsPriceInTon] = useState(false);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const { gift: typeGift } = renderingModal || {};\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const hasPrice = Boolean(price);\n\n  const lang = useLang();\n\n  const handleChangePrice = useLastCallback((e) => {\n    const value = e.target.value;\n    const number = parseFloat(value);\n    const maxAmount = isPriceInTon ? tonStargiftResaleAmountMax : starsStargiftResaleAmountMax;\n    const result = value === '' || Number.isNaN(number) ? undefined\n      : maxAmount ? Math.min(number, maxAmount) : number;\n    setPrice(result);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeGiftResalePriceComposerModal();\n  });\n\n  const handleSellGift = useLastCallback(() => {\n    if (!savedGift || savedGift.gift.type !== 'starGiftUnique' || !savedGift.inputGift || !price) return;\n    closeGiftResalePriceComposerModal();\n    closeGiftInfoModal();\n    updateStarGiftPrice(\n      {\n        gift: savedGift.inputGift,\n        price: {\n          currency: isPriceInTon ? 'TON' : 'XTR',\n          amount: isPriceInTon ? convertTonToNanos(price) : price,\n          nanos: 0,\n        },\n      });\n    showNotification({\n      icon: 'sell-outline',\n      message: {\n        key: 'NotificationGiftIsSale',\n        variables: {\n          gift: lang('GiftUnique', { title: savedGift.gift.title, number: savedGift.gift.number }),\n        },\n      },\n    });\n  });\n  const commission = isPriceInTon ? tonStargiftResaleCommissionPermille : starsStargiftResaleCommissionPermille;\n  const minAmount = isPriceInTon ? tonStargiftResaleAmountMin : starsStargiftResaleAmountMin;\n  const isPriceCorrect = hasPrice && price >= minAmount;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={isPriceInTon ? lang('PriceInTON') : lang('PriceInStars')}\n      hasCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      <div className={styles.inputPrice}>\n        <InputText\n          label={isPriceInTon ? lang('EnterPriceInTon') : lang('EnterPriceInStars')}\n          onChange={handleChangePrice}\n          value={price?.toString()}\n          inputMode=\"numeric\"\n          tabIndex={0}\n          teactExperimentControlled={!isPriceInTon}\n        />\n      </div>\n\n      <div className={styles.inputPriceDescription}>\n        <span>\n          {!isPriceCorrect && Boolean(commission) && lang('DescriptionComposerGiftMinimumPrice', {\n            stars: isPriceInTon ? formatTonAsText(lang, minAmount) : formatStarsAsText(lang, minAmount),\n          }, {\n            withMarkdown: true,\n            withNodes: true,\n          })}\n          {isPriceCorrect && (() => {\n            const priceWithCommission = commission ? Number((price * commission).toFixed()) : price;\n            return lang('DescriptionComposerGiftResalePrice',\n              {\n                stars: isPriceInTon\n                  ? formatTonAsText(lang, priceWithCommission)\n                  : formatStarsAsText(lang, priceWithCommission),\n              },\n              {\n                withMarkdown: true,\n                withNodes: true,\n              });\n          })()}\n        </span>\n\n        {isPriceCorrect && Boolean(isPriceInTon ? tonUsdRate : starsUsdWithdrawRate) && (\n          <span className={styles.descriptionPrice}>\n            {`≈ ${formatCurrencyAsString(\n              isPriceInTon ? convertTonToUsd(price, tonUsdRate!) : price * starsUsdWithdrawRate!,\n              'USD',\n              lang.code,\n            )}`}\n          </span>\n        )}\n      </div>\n\n      <Checkbox\n        className={styles.checkBox}\n        label={lang('OnlyAcceptTON')}\n        checked={isPriceInTon}\n        onCheck={setIsPriceInTon}\n      />\n\n      <div className={styles.checkBoxDescription}>\n        {lang('OnlyAcceptTONDescription')}\n      </div>\n\n      <Button noForcedUpperCase disabled={!isPriceCorrect} size=\"smaller\" onClick={handleSellGift}>\n        {isPriceCorrect && lang('ButtonSellGift', {\n          stars: isPriceInTon ? formatTonAsIcon(lang, price)\n            : formatStarsAsIcon(lang, price, { asFont: true }),\n        }, { withNodes: true })}\n        {!isPriceCorrect && lang('Sell')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const configPermille = global.appConfig?.starsStargiftResaleCommissionPermille;\n    const starsStargiftResaleCommissionPermille = configPermille ? (configPermille / 1000) : undefined;\n    const starsStargiftResaleAmountMin = global.appConfig?.starsStargiftResaleAmountMin || 0;\n    const starsStargiftResaleAmountMax = global.appConfig?.starsStargiftResaleAmountMax;\n\n    const starsUsdWithdrawRateX1000 = global.appConfig?.starsUsdWithdrawRateX1000;\n    const starsUsdWithdrawRate = starsUsdWithdrawRateX1000 ? starsUsdWithdrawRateX1000 / 1000 : 1;\n\n    const tonConfigPermille = global.appConfig?.tonStargiftResaleCommissionPermille;\n    const tonStargiftResaleCommissionPermille = tonConfigPermille ? (tonConfigPermille / 1000) : 0;\n    const tonStargiftResaleAmountMin = convertTonFromNanos(global.appConfig?.tonStargiftResaleAmountMin || 0);\n    const maxTonFromConfig = global.appConfig?.tonStargiftResaleAmountMax;\n    const tonStargiftResaleAmountMax = maxTonFromConfig && convertTonFromNanos(maxTonFromConfig);\n\n    const tonUsdRate = global.appConfig?.tonUsdRate;\n\n    return {\n      starsStargiftResaleCommissionPermille,\n      starsStargiftResaleAmountMin,\n      starsStargiftResaleAmountMax,\n      starsUsdWithdrawRate,\n      tonStargiftResaleCommissionPermille,\n      tonStargiftResaleAmountMin,\n      tonStargiftResaleAmountMax,\n      tonUsdRate,\n    };\n  },\n)(GiftResalePriceComposerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"footer\":\"EWaVCxY4\",\"footerButton\":\"_Dt6RSQV\"};","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarGiftAttribute,\n  ApiStarGiftAttributeBackdrop,\n  ApiStarGiftAttributeModel,\n  ApiStarGiftAttributePattern,\n  ApiStarGiftRegular,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport { getStickerMediaHash } from '../../../../global/helpers';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../../util/localization/format';\nimport { fetch } from '../../../../util/mediaLoader';\n\nimport useInterval from '../../../../hooks/schedulers/useInterval';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport TableAboutModal, { type TableAboutData } from '../../common/TableAboutModal';\nimport UniqueGiftHeader from '../UniqueGiftHeader';\n\nimport styles from './GiftUpgradeModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftUpgradeModal'];\n};\n\ntype StateProps = {\n  recipient?: ApiPeer;\n};\n\ntype Attributes = {\n  model: ApiStarGiftAttributeModel;\n  pattern: ApiStarGiftAttributePattern;\n  backdrop: ApiStarGiftAttributeBackdrop;\n};\n\nconst PREVIEW_UPDATE_INTERVAL = 3000;\n\nconst GiftUpgradeModal = ({ modal, recipient }: OwnProps & StateProps) => {\n  const { closeGiftUpgradeModal, upgradeGift } = getActions();\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingRecipient = useCurrentOrPrev(recipient);\n  const [shouldKeepOriginalDetails, setShouldKeepOriginalDetails] = useState(false);\n\n  const [previewAttributes, setPreviewAttributes] = useState<Attributes | undefined>();\n\n  const lang = useLang();\n\n  const handleClose = useLastCallback(() => closeGiftUpgradeModal());\n\n  const handleUpgrade = useLastCallback(() => {\n    const gift = renderingModal?.gift;\n    if (!gift?.inputGift) return;\n\n    upgradeGift({\n      gift: gift.inputGift,\n      shouldKeepOriginalDetails,\n      upgradeStars: !gift.alreadyPaidUpgradeStars ? (gift.gift as ApiStarGiftRegular).upgradeStars : undefined,\n    });\n    handleClose();\n  });\n\n  const updatePreviewAttributes = useLastCallback(() => {\n    if (!renderingModal?.sampleAttributes) return;\n    setPreviewAttributes(getRandomAttributes(renderingModal.sampleAttributes, previewAttributes));\n  });\n\n  useInterval(updatePreviewAttributes, isOpen ? PREVIEW_UPDATE_INTERVAL : undefined, true);\n\n  useEffect(() => {\n    if (isOpen && renderingModal?.sampleAttributes) {\n      updatePreviewAttributes();\n    }\n  }, [isOpen, renderingModal?.sampleAttributes]);\n\n  // Preload stickers and patterns\n  useEffect(() => {\n    const attributes = renderingModal?.sampleAttributes;\n    if (!attributes) return;\n    const patternStickers = attributes.filter((attr): attr is ApiStarGiftAttributeModel => attr.type === 'pattern')\n      .map((attr) => attr.sticker);\n    const modelStickers = attributes.filter((attr): attr is ApiStarGiftAttributeModel => attr.type === 'model')\n      .map((attr) => attr.sticker);\n\n    const mediaHashes = [...patternStickers, ...modelStickers].map((sticker) => getStickerMediaHash(sticker, 'full'));\n    mediaHashes.forEach((hash) => {\n      fetch(hash, ApiMediaFormat.BlobUrl);\n    });\n  }, [renderingModal?.sampleAttributes]);\n\n  const modalData = useMemo(() => {\n    if (!previewAttributes || !isOpen) {\n      return undefined;\n    }\n\n    const gift = renderingModal?.gift;\n\n    const listItemData = [\n      ['diamond', lang('GiftUpgradeUniqueTitle'), lang('GiftUpgradeUniqueDescription')],\n      ['trade', lang('GiftUpgradeTransferableTitle'), lang('GiftUpgradeTransferableDescription')],\n      ['auction', lang('GiftUpgradeTradeableTitle'), lang('GiftUpgradeTradeableDescription')],\n    ] satisfies TableAboutData;\n\n    const subtitle = renderingRecipient\n      ? lang('GiftPeerUpgradeText', { peer: getPeerTitle(lang, renderingRecipient) })\n      : lang('GiftUpgradeTextOwn');\n\n    const header = (\n      <UniqueGiftHeader\n        modelAttribute={previewAttributes.model}\n        backdropAttribute={previewAttributes.backdrop}\n        patternAttribute={previewAttributes.pattern}\n        title={lang('GiftUpgradeTitle')}\n        subtitle={subtitle}\n      />\n    );\n\n    const footer = (\n      <div className={styles.footer}>\n        {!gift && (\n          <Button className={styles.footerButton} size=\"smaller\" onClick={handleClose}>\n            {lang('OK')}\n          </Button>\n        )}\n        {gift && (\n          <>\n            <Checkbox\n              label={lang('GiftUpgradeKeepDetails')}\n              onCheck={setShouldKeepOriginalDetails}\n              checked={shouldKeepOriginalDetails}\n            />\n            <Button className={styles.footerButton} size=\"smaller\" isShiny onClick={handleUpgrade}>\n              {gift.alreadyPaidUpgradeStars\n                ? lang('GeneralConfirm')\n                : lang('GiftUpgradeButton', {\n                  amount: formatStarsAsIcon(lang, (gift.gift as ApiStarGiftRegular).upgradeStars!, { asFont: true }),\n                }, { withNodes: true })}\n            </Button>\n          </>\n        )}\n      </div>\n    );\n\n    return {\n      listItemData,\n      header,\n      footer,\n    };\n  }, [previewAttributes, isOpen, lang, renderingRecipient, renderingModal?.gift, shouldKeepOriginalDetails]);\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={modalData?.header}\n      footer={modalData?.footer}\n      listItemData={modalData?.listItemData}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const recipientId = modal?.recipientId;\n    const recipient = recipientId ? selectPeer(global, recipientId) : undefined;\n\n    return {\n      recipient,\n    };\n  },\n)(GiftUpgradeModal));\n\nfunction getRandomAttributes(list: ApiStarGiftAttribute[], previousSelection?: Attributes): Attributes {\n  const models = list.filter((attr): attr is ApiStarGiftAttributeModel => (\n    attr.type === 'model' && attr.name !== previousSelection?.model.name\n  ));\n  const patterns = list.filter((attr): attr is ApiStarGiftAttributePattern => (\n    attr.type === 'pattern' && attr.name !== previousSelection?.pattern.name\n  ));\n  const backdrops = list.filter((attr): attr is ApiStarGiftAttributeBackdrop => (\n    attr.type === 'backdrop' && attr.name !== previousSelection?.backdrop.name\n  ));\n\n  const randomModel = models[Math.floor(Math.random() * models.length)];\n  const randomPattern = patterns[Math.floor(Math.random() * patterns.length)];\n  const randomBackdrop = backdrops[Math.floor(Math.random() * backdrops.length)];\n\n  return {\n    model: randomModel,\n    pattern: randomPattern,\n    backdrop: randomBackdrop,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"qL0cHbwS\",\"profileBlock\":\"t18QCmAb\",\"titleContainer\":\"q8w7tnmR\",\"radialPattern\":\"_1RfhkfB\",\"lockIcon\":\"jiPObOWv\",\"avatar\":\"JK2zOWA7\",\"userTitle\":\"lxxbgNCl\",\"status\":\"MLMdxkUg\",\"giftTitle\":\"wxg_5ou_\",\"infoDescription\":\"KSCLIMZm\",\"footer\":\"VDrvalBo\"};","import { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { selectIsCurrentUserPremium, selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport buildStyle from '../../../../util/buildStyle';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useCustomEmoji from '../../../common/hooks/useCustomEmoji';\n\nimport Avatar from '../../../common/Avatar';\nimport FullNameTitle from '../../../common/FullNameTitle';\nimport Icon from '../../../common/icons/Icon';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Button from '../../../ui/Button';\nimport TableAboutModal, { type TableAboutData } from '../../common/TableAboutModal';\n\nimport styles from './GiftStatusInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftStatusInfoModal'];\n};\n\ntype StateProps = {\n  currentUser: ApiUser;\n  isCurrentUserPremium?: boolean;\n};\n\nconst GiftStatusInfoModal = ({\n  modal,\n  currentUser,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftStatusInfoModal,\n    setEmojiStatus,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const { emojiStatus } = renderingModal || {};\n\n  const subtitleColor = emojiStatus?.textColor;\n\n  const patternIcon = useCustomEmoji(emojiStatus?.patternDocumentId);\n\n  const handleClose = useLastCallback(() => {\n    closeGiftStatusInfoModal();\n  });\n\n  const onWearClick = useLastCallback(() => {\n    if (emojiStatus) {\n      setEmojiStatus({ emojiStatus });\n    }\n    closeGiftStatusInfoModal();\n  });\n\n  const radialPatternBackdrop = useMemo(() => {\n    if (!emojiStatus || !isOpen) return undefined;\n\n    const backdropColors = [emojiStatus.centerColor, emojiStatus.edgeColor];\n    const patternColor = emojiStatus.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={patternIcon.customEmoji}\n      />\n    );\n  }, [emojiStatus, isOpen, patternIcon]);\n\n  const mockPeerWithStatus = useMemo(() => {\n    return {\n      ...currentUser,\n      emojiStatus,\n    } satisfies ApiUser;\n  }, [currentUser, emojiStatus]);\n\n  const header = useMemo(() => {\n    return (\n      <div className={styles.header}>\n        <div\n          className={buildClassName(styles.profileBlock)}\n          style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}\n        >\n\n          {radialPatternBackdrop}\n          <Avatar peer={mockPeerWithStatus} size=\"jumbo\" className={styles.avatar} />\n          <FullNameTitle\n            peer={mockPeerWithStatus}\n            className={styles.userTitle}\n            withEmojiStatus\n            noFake\n            noVerified\n            statusSparklesColor={subtitleColor}\n          />\n          <p className={styles.status} style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}>\n            {lang('Online')}\n          </p>\n        </div>\n        <div className={styles.titleContainer}>\n          <div className={styles.giftTitle}>\n            {\n              lang('UniqueStatusWearTitle', {\n                gift: mockPeerWithStatus?.emojiStatus?.title,\n              })\n            }\n          </div>\n          <div className={styles.infoDescription}>\n            {\n              lang('UniqueStatusBenefitsDescription')\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }, [subtitleColor, radialPatternBackdrop, mockPeerWithStatus, lang]);\n\n  const listItemData = [\n    ['radial-badge', lang('UniqueStatusBadgeBenefitTitle'), lang('UniqueStatusBadgeDescription')],\n    ['unique-profile', lang('UniqueStatusProfileDesignBenefitTitle'), lang('UniqueStatusProfileDesignDescription')],\n    ['proof-of-ownership', lang('UniqueStatusProofOfOwnershipBenefitTitle'),\n      lang('UniqueStatusProofOfOwnershipDescription')],\n  ] satisfies TableAboutData;\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          size=\"smaller\"\n          onClick={onWearClick}\n        >\n          {lang('UniqueStatusWearButton')}\n          {!isCurrentUserPremium && <Icon name=\"lock-badge\" className={styles.lockIcon} />}\n        </Button>\n      </div>\n    );\n  }, [lang, isCurrentUserPremium, isOpen]);\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!)!;\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      currentUser,\n      isCurrentUserPremium,\n    };\n  },\n)(GiftStatusInfoModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"LQgz8Nlx\",\"giftPreview\":\"hgs0ts_O\",\"backdrop\":\"OnBhMaBw\",\"description\":\"HBxB4QPY\",\"arrow\":\"kXTOUpfb\",\"noPassword\":\"BnqLhoKr\"};","import {\n  memo,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiStarGiftUnique } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { type CustomPeer, SettingsScreens } from '../../../../types';\n\nimport { getDays } from '../../../../util/dates/units';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { getGiftAttributes } from '../../../common/helpers/gifts';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport PasswordForm from '../../../common/PasswordForm';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\n\nimport styles from './GiftWithdrawModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftWithdrawModal'];\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  passwordHint?: string;\n};\n\nconst FRAGMENT_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'fragment',\n  title: '',\n  customPeerAvatarColor: '#000000',\n};\nconst GIFT_STICKER_SIZE = 4.5 * REM;\n\nconst GiftWithdrawModal = ({ modal, hasPassword, passwordHint }: OwnProps & StateProps) => {\n  const {\n    closeGiftWithdrawModal,\n    clearGiftWithdrawError,\n    closeGiftInfoModal,\n    processStarGiftWithdrawal,\n    openSettingsScreen,\n  } = getActions();\n  const isOpen = Boolean(modal);\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const lang = useLang();\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const gift = renderingModal?.gift?.gift as ApiStarGiftUnique;\n  const giftAttributes = gift && getGiftAttributes(gift);\n  const exportDelay = renderingModal?.gift?.canExportAt\n    ? Math.max(renderingModal.gift.canExportAt - getServerTime(), 0) : undefined;\n\n  const handleClose = useLastCallback(() => {\n    closeGiftWithdrawModal();\n  });\n\n  const handleSubmit = useLastCallback((password: string) => {\n    processStarGiftWithdrawal({\n      gift: renderingModal!.gift.inputGift!,\n      password,\n    });\n  });\n\n  const handleSetUpPassword = useLastCallback(() => {\n    openSettingsScreen({\n      screen: SettingsScreens.TwoFaDisabled,\n    });\n    closeGiftWithdrawModal();\n    closeGiftInfoModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('GiftWithdrawTitle')}\n      hasCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {giftAttributes && (\n        <>\n          <div className={styles.header}>\n            <div className={styles.giftPreview}>\n              <RadialPatternBackground\n                className={styles.backdrop}\n                backgroundColors={[giftAttributes.backdrop!.centerColor, giftAttributes.backdrop!.edgeColor]}\n                patternColor={giftAttributes.backdrop?.patternColor}\n                patternIcon={giftAttributes.pattern?.sticker}\n              />\n              <AnimatedIconFromSticker\n                className={styles.sticker}\n                size={GIFT_STICKER_SIZE}\n                sticker={giftAttributes.model?.sticker}\n              />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar\n              peer={FRAGMENT_PEER}\n              size=\"giant\"\n              className={styles.avatar}\n            />\n          </div>\n          <p className={styles.description}>\n            {lang('GiftWithdrawDescription', {\n              gift: `${gift.title} #${gift.number}`,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n              renderTextFilters: ['br'],\n            })}\n          </p>\n        </>\n      )}\n      {Boolean(exportDelay) && (\n        <p className={styles.exportHint}>\n          {lang('GiftWithdrawWait', { days: getDays(exportDelay) }, { pluralValue: getDays(exportDelay) })}\n        </p>\n      )}\n      {!hasPassword && (\n        <>\n          <span className={styles.noPassword}>{lang('ErrorPasswordMissing')}</span>\n          <Button className=\"mt-2\" size=\"smaller\" onClick={handleSetUpPassword}>{lang('SetUp2FA')}</Button>\n        </>\n      )}\n      {hasPassword && !exportDelay && (\n        <PasswordForm\n          shouldShowSubmit\n          placeholder={lang('CheckPasswordPlaceholder')}\n          error={renderingModal?.errorKey && lang.withRegular(renderingModal?.errorKey)}\n          description={lang('CheckPasswordDescription')}\n          clearError={clearGiftWithdrawError}\n          isLoading={renderingModal?.isLoading}\n          hint={passwordHint}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isOpen}\n          onChangePasswordVisibility={setShouldShowPassword}\n          submitLabel={lang('GiftWithdrawSubmit')}\n          onSubmit={handleSubmit}\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      hasPassword,\n      passwordHint,\n    };\n  },\n)(GiftWithdrawModal));\n","import {\n  getIsHeavyAnimating, useCallback, useRef, useState,\n} from '../lib/teact/teact';\n\nimport useForceUpdate from './useForceUpdate';\nimport useHeavyAnimation from './useHeavyAnimation';\nimport useRunDebounced from './useRunDebounced';\nimport useSyncEffect from './useSyncEffect';\n\nexport default function useDebouncedMemo<R, D extends unknown[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useSyncEffect(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimation(noop, handleUnfreeze);\n\n  return {\n    isFrozen: getIsHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useState } from '../lib/teact/teact';\n\nimport type { ApiChat } from '../api/types';\n\nimport { callApi } from '../api/gramjs';\nimport useAsync from './useAsync';\nimport useDebouncedMemo from './useDebouncedMemo';\nimport useLastCallback from './useLastCallback';\n\nconst DEBOUNCE_TIMEOUT = 300;\n\nexport async function peerGlobalSearch(query: string) {\n  const searchResult = await callApi('searchChats', { query });\n  if (!searchResult) return undefined;\n\n  const ids = [...searchResult.accountResultIds, ...searchResult.globalResultIds];\n\n  return ids;\n}\n\nexport function prepareChatMemberSearch(chat: ApiChat) {\n  return async (query: string) => {\n    const searchResult = await callApi('fetchMembers', {\n      chat,\n      memberFilter: 'search',\n      query,\n    });\n\n    return searchResult?.members?.map((member) => member.userId) || [];\n  };\n}\n\nexport default function usePeerSearch({\n  query,\n  queryFn = peerGlobalSearch,\n  defaultValue,\n  debounceTimeout = DEBOUNCE_TIMEOUT,\n  isDisabled,\n}: {\n  query: string;\n  queryFn?: (query: string) => Promise<string[] | undefined>;\n  defaultValue?: string[];\n  debounceTimeout?: number;\n  isDisabled?: boolean;\n}) {\n  const debouncedQuery = useDebouncedMemo(() => query, debounceTimeout, [query]);\n  const [currentResultsQuery, setCurrentResultsQuery] = useState<string>('');\n  const searchQuery = !query ? query : debouncedQuery; // Ignore debounce if query is empty\n  const queryCallback = useLastCallback(queryFn);\n\n  const result = useAsync(async () => {\n    if (!searchQuery || isDisabled) {\n      setCurrentResultsQuery('');\n      return Promise.resolve(defaultValue);\n    }\n\n    const answer = await queryCallback(searchQuery);\n    setCurrentResultsQuery(searchQuery);\n    return answer;\n  }, [searchQuery, defaultValue, queryCallback, isDisabled], defaultValue);\n\n  return {\n    ...result,\n    currentResultsQuery,\n  };\n}\n","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiStarGiftUnique } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport type { UniqueCustomPeer } from '../../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../../config';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectCanGift, selectPeer } from '../../../../global/selectors';\nimport { unique } from '../../../../util/iteratees';\nimport { formatStarsAsIcon, formatStarsAsText } from '../../../../util/localization/format';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { getGiftAttributes } from '../../../common/helpers/gifts';\nimport sortChatIds from '../../../common/helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport usePeerSearch from '../../../../hooks/usePeerSearch';\n\nimport GiftTransferPreview from '../../../common/gift/GiftTransferPreview';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport PickerModal from '../../../common/pickers/PickerModal';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['giftTransferModal'];\n};\n\ntype StateProps = {\n  contactIds?: string[];\n  currentUserId?: string;\n};\n\ntype Categories = 'withdraw';\n\nconst GiftTransferModal = ({\n  modal, contactIds, currentUserId,\n}: OwnProps & StateProps) => {\n  const { closeGiftTransferModal, openGiftWithdrawModal, transferGift } = getActions();\n  const isOpen = Boolean(modal);\n\n  const lang = useLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const uniqueGift = renderingModal?.gift?.gift as ApiStarGiftUnique;\n  const giftAttributes = uniqueGift && getGiftAttributes(uniqueGift);\n\n  const [selectedId, setSelectedId] = useState<string | undefined>();\n\n  const renderingSelectedPeerId = useCurrentOrPrev(selectedId);\n  const renderingSelectedPeer = useMemo(() => {\n    const global = getGlobal();\n    return renderingSelectedPeerId ? selectPeer(global, renderingSelectedPeerId) : undefined;\n  }, [renderingSelectedPeerId]);\n\n  const orderedChatIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n\n  const sortedLocalIds = useMemo(() => {\n    return unique([\n      ...(contactIds || []),\n      ...(orderedChatIds || []),\n    ]);\n  }, [contactIds, orderedChatIds]);\n\n  const { result: foundIds, currentResultsQuery } = usePeerSearch({\n    query: searchQuery,\n    defaultValue: sortedLocalIds,\n  });\n\n  const isLoading = currentResultsQuery !== searchQuery;\n\n  const categories = useMemo(() => {\n    if (currentResultsQuery) return MEMO_EMPTY_ARRAY;\n\n    return [{\n      type: 'withdraw',\n      isCustomPeer: true,\n      avatarIcon: 'toncoin',\n      peerColorId: 5,\n      title: lang('GiftTransferTON'),\n    }] satisfies UniqueCustomPeer<Categories>[];\n  }, [lang, currentResultsQuery]);\n\n  const handleCategoryChange = useLastCallback((category: Categories) => {\n    if (category !== 'withdraw') return;\n\n    openGiftWithdrawModal({\n      gift: renderingModal!.gift,\n    });\n    closeGiftTransferModal();\n  });\n\n  const displayIds = useMemo(() => {\n    if (isLoading) return MEMO_EMPTY_ARRAY;\n    const global = getGlobal();\n\n    return sortChatIds((foundIds || []).filter((peerId) => (\n      peerId !== currentUserId && selectCanGift(global, peerId)\n    )),\n    false);\n  }, [isLoading, foundIds, currentUserId]);\n\n  const closeConfirmModal = useLastCallback(() => {\n    setSelectedId(undefined);\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      setSelectedId(undefined);\n    }\n  }, [isOpen]);\n\n  const handleTransfer = useLastCallback(() => {\n    if (!renderingModal?.gift.inputGift) return;\n    transferGift({\n      gift: renderingModal.gift.inputGift,\n      recipientId: renderingSelectedPeerId!,\n      transferStars: renderingModal.gift.transferStars,\n    });\n\n    closeConfirmModal();\n    closeGiftTransferModal();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={closeGiftTransferModal}\n      title={lang('GiftTransferTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      ignoreFreeze\n    >\n      <PeerPicker<Categories>\n        itemIds={displayIds}\n        categories={categories}\n        onSelectedCategoryChange={handleCategoryChange}\n        withDefaultPadding\n        withPeerUsernames\n        isSearchable\n        noScrollRestore\n        isLoading={isLoading}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onFilterChange={setSearchQuery}\n        onSelectedIdChange={setSelectedId}\n      />\n      {giftAttributes && (\n        <ConfirmDialog\n          isOpen={Boolean(selectedId)}\n          noDefaultTitle\n          onClose={closeConfirmModal}\n          confirmLabel={renderingModal?.gift.transferStars\n            ? lang(\n              'GiftTransferConfirmButton',\n              { amount: formatStarsAsIcon(lang, renderingModal.gift.transferStars, { asFont: true }) },\n              { withNodes: true },\n            ) : lang('GiftTransferConfirmButtonFree')}\n          confirmHandler={handleTransfer}\n        >\n          {renderingSelectedPeer && (\n            <GiftTransferPreview\n              peer={renderingSelectedPeer}\n              gift={uniqueGift}\n            />\n          )}\n          <p>\n            {renderingModal?.gift.transferStars\n              ? lang('GiftTransferConfirmDescription', {\n                gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                amount: formatStarsAsText(lang, renderingModal.gift.transferStars),\n                peer: getPeerTitle(lang, renderingSelectedPeer!),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : lang('GiftTransferConfirmDescriptionFree', {\n                gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                peer: getPeerTitle(lang, renderingSelectedPeer!),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })}\n          </p>\n        </ConfirmDialog>\n      )}\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { contactList, currentUserId } = global;\n\n    return {\n      contactIds: contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(GiftTransferModal));\n","import { memo, useState } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectUser } from '../../../../global/selectors';\nimport { formatStarsAsText } from '../../../../util/localization/format';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['chatRefundModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst ChatRefundModal = ({ modal, user }: OwnProps & StateProps) => {\n  const { closeChatRefundModal, toggleNoPaidMessagesException } = getActions();\n\n  const [shouldRefundStars, setShouldRefundStars] = useState(false);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingUser = useCurrentOrPrev(user);\n\n  const { starsToRefund, userId } = renderingModal || {};\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n\n  const handleConfirmRemoveFee = useLastCallback(() => {\n    closeChatRefundModal();\n    if (!userId) return;\n\n    toggleNoPaidMessagesException ({ userId, shouldRefundCharged: shouldRefundStars });\n  });\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeChatRefundModal}\n      title={lang('RemoveFeeTitle')}\n      confirmLabel={lang('ConfirmRemoveMessageFee')}\n      confirmHandler={handleConfirmRemoveFee}\n    >\n      {lang('ConfirmDialogMessageRemoveFee', {\n        peer: renderingUser && getPeerTitle(lang, renderingUser),\n      }, {\n        withMarkdown: true,\n        withNodes: true,\n      })}\n      {\n        Boolean(starsToRefund) && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('ConfirmDialogRemoveFeeRefundStars', {\n              amount: formatStarsAsText(lang, starsToRefund),\n            }, {\n              withMarkdown: true,\n              withNodes: true,\n            })}\n            checked={shouldRefundStars}\n            onCheck={setShouldRefundStars}\n          />\n        )\n      }\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const user = modal?.userId ? selectUser(global, modal.userId) : undefined;\n\n  return {\n    user,\n  };\n})(ChatRefundModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarsAmount } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { convertTonFromNanos } from '../../../util/formatCurrency';\nimport { formatStarsAsText, formatTonAsText } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['priceConfirmModal'];\n};\n\ntype StateProps = {\n  starBalance?: ApiStarsAmount;\n  tonBalance?: number;\n};\n\nconst PriceConfirmModal: FC<OwnProps & StateProps> = ({\n  modal,\n  starBalance,\n  tonBalance,\n}) => {\n  const actions = getActions();\n\n  const lang = useLang();\n\n  const handleConfirm = useCallback(() => {\n    if (!modal?.directInfo) {\n      actions.closePriceConfirmModal();\n      return;\n    }\n\n    const { currency, newAmount } = modal;\n    const isTon = currency === 'TON';\n    const currentBalance = isTon ? tonBalance : starBalance?.amount;\n\n    if (currentBalance === undefined) {\n      actions.closePriceConfirmModal();\n      return;\n    }\n\n    if (currentBalance < newAmount!) {\n      actions.openStarsBalanceModal({\n        currency: isTon ? 'TON' : 'XTR',\n        tabId: getCurrentTabId(),\n      });\n      actions.closePriceConfirmModal();\n      return;\n    }\n\n    actions.sendStarPaymentForm({\n      directInfo: modal.directInfo,\n      tabId: getCurrentTabId(),\n    });\n    actions.closePriceConfirmModal();\n  }, [modal, starBalance, tonBalance, actions]);\n\n  const handleClose = useCallback(() => {\n    actions.closePriceConfirmModal();\n  }, [actions]);\n\n  if (!modal) {\n    return undefined;\n  }\n\n  const {\n    originalAmount,\n    newAmount,\n    currency,\n  } = modal;\n\n  const isTon = currency === 'TON';\n\n  let originalAmountText: string;\n  let newAmountText: string;\n\n  if (isTon) {\n    originalAmountText = formatTonAsText(lang, convertTonFromNanos(originalAmount!));\n    newAmountText = formatTonAsText(lang, convertTonFromNanos(newAmount!));\n  } else {\n    originalAmountText = formatStarsAsText(lang, originalAmount!);\n    newAmountText = formatStarsAsText(lang, newAmount!);\n  }\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(modal)}\n      onClose={handleClose}\n      title={lang('PriceChanged')}\n      confirmHandler={handleConfirm}\n      confirmLabel={lang('PayNewPrice')}\n    >\n      <p>\n        {lang('PriceChangedText', {\n          originalAmount: originalAmountText,\n          newAmount: newAmountText,\n        }, {\n          withMarkdown: true,\n          withNodes: true,\n        })}\n      </p>\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const starBalance = global.stars?.balance;\n  const tonBalance = global.ton?.balance?.amount;\n\n  return {\n    starBalance,\n    tonBalance,\n  };\n},\n)(PriceConfirmModal));\n"],"names":["memo","withGlobal","global","modal","user","forUserId","selectUser","undefined","StarsGiftModal","closeStarsGiftModal","openInvoice","requestConfetti","getActions","dialogRef","useRef","isOpen","Boolean","renderingModal","useCurrentOrPrev","oldLang","useOldLang","selectedOption","setSelectedOption","useState","isHeaderHidden","setHeaderHidden","useEffect","showConfetti","useLastCallback","dialog","current","top","left","width","height","querySelector","getBoundingClientRect","withStars","isCompleted","handleClick","option","type","userId","id","stars","currency","amount","handleClose","bottomText","useMemo","parts","split","_jsx","SafeLink","url","text","Modal","className","buildClassName","styles","modalDialog","contentClassName","content","isSlim","onClose","children","_jsxs","main","onScroll","e","scrollTop","currentTarget","Button","round","size","closeButton","color","onClick","ariaLabel","Icon","name","header","hiddenHeader","starHeaderText","headerInfo","_Fragment","Avatar","peer","avatar","logoBackground","src","StarsBackground","alt","draggable","logo","StarLogo","headerText","center","renderText","formatCurrencyAsString","code","description","getPeerTitle","section","StarTopupOptionList","options","starsGiftOptions","secondaryInfo","chats","listIds","currentUserId","userIds","contactList","activeListIds","active","archivedListIds","archived","StarsGiftingPickerModal","closeStarsGiftingPickerModal","openStarsGiftModal","searchQuery","setSearchQuery","displayedUserIds","usersById","getGlobal","users","byId","combinedIds","unique","filteredUserIds","filterPeersByQuery","ids","query","sortChatIds","filter","isSupport","isUserBot","isDeletedUser","SERVICE_NOTIFICATIONS_USER_ID","handleSelectedUserIdsChange","newSelectedId","length","PickerModal","title","hasCloseButton","shouldAdaptToSearch","withFixedHeight","confirmButtonText","onEnter","PeerPicker","itemIds","filterValue","filterPlaceholder","onFilterChange","isSearchable","withDefaultPadding","withStatus","onSelectedIdChange","BalanceBlock","balance","withAddButton","lang","useLang","openStarsBalanceModal","balanceBlock","balanceInfo","smallerText","balanceBottom","TON_CURRENCY_CODE","convertCurrencyFromBaseUnit","StarIcon","STARS_CURRENCY_CODE","formatStarsAmount","BadgeButton","addStarsButton","addStarsIcon","StarsSubscriptionItem","subscription","openStarsSubscriptionModal","peerId","pricing","until","isCancelled","photo","useSelector","selectPeer","selectProvidedPeer","hasExpired","Date","now","formattedDate","formatDateToString","root","preview","subscriptionStar","info","subtitle","webPhoto","status","statusEnded","statusPricing","star","formatInteger","statusPeriod","getTransactionTitle","transaction","paidMessages","count","withNodes","pluralValue","isGiftResale","isNegativeAmount","isPostsSearch","starRefCommision","formatPercent","isGiftUpgrade","extendedMedia","subscriptionPeriod","isReaction","giveawayPostId","isMyGift","isGift","starGift","customPeer","shouldUseCustomPeer","buildStarsTransactionCustomPeer","titleKey","currencyAmount","starsAmount","nanos","SingleMediaThumb","boughtMedia","index","media","video","mediaHash","getMediaHash","thumb","getMediaThumbUri","mediaBlob","useMedia","blurry","full","PaidMediaThumb","isTransactionPreview","Math","min","isLocked","dir","slice","reverse","map","item","i","arr","realIndex","MediaSpoiler","isVisible","thumbDataUri","thumbnail","dataUri","noOutline","StarsTransactionItem","openStarsTransactionModal","date","transactionPeer","selectOptionalPeer","isUniqueGift","giftSticker","getStickerFromGift","data","avatarPeer","subtitleKey","CUSTOM_PEER_PREMIUM","number","isRefund","hasFailed","isPending","previewContent","backdrop","getGiftAttributes","backgroundColors","centerColor","edgeColor","RadialPatternBackground","uniqueGiftBackground","AnimatedIconFromSticker","sticker","play","amountColorClass","negative","positive","formatDateTimeToString","formatStarsTransactionAmount","TRANSACTION_TYPES","TRANSACTION_TABS_KEYS","TRANSACTION_ITEM_CLASS","shouldForceHeight","ton","history","all","transactions","starsBalanceState","tonBalanceState","canBuyPremium","selectIsPremiumPurchaseBlocked","tonUsdRate","appConfig","TON_USD_RATE_DEFAULT","tonTopupUrl","TON_TOPUP_URL_DEFAULT","StarsBalanceModal","closeStarsBalanceModal","loadStarsTransactions","loadStarsSubscriptions","openStarsGiftingPickerModal","openUrl","currentState","subscriptions","selectedTabIndex","setSelectedTabIndex","areBuyOptionsShown","showBuyOptions","hideBuyOptions","useFlag","originStarsPayment","originReaction","originGift","topup","shouldOpenOnBuy","ongoingTransactionAmount","form","invoice","totalAmount","subscriptionInfo","subscriptionPricing","gift","balanceNeeded","starsNeeded","starsNeededText","channel","selectChat","chatId","getChatTitle","bot","botId","getUserFullName","purpose","PAID_MESSAGES_PURPOSE","withMarkdown","shouldShowItems","shouldSuggestGifting","modalHeight","transactionCount","transactionTabs","key","tosText","handleLoadMoreTransactions","isTon","handleLoadMoreSubscriptions","openStarsGiftingPickerModalHandler","handleBuyStars","handleTonTopUp","shouldSkipModal","minimal","dialogStyle","modalBalance","renderTonHeaderSection","tonAmount","ParticlesHeader","model","isDisabled","tonBalanceContainer","tonBalance","tonIconBalance","tonInUsd","convertTonToUsd","topUpButton","fluid","starButton","isText","noForcedUpperCase","topupOptions","tos","hint","list","sectionTitle","nextOffset","disabled","isLoading","loadMore","loadMoreIcon","container","lastSection","Transition","isRtl","activeKey","renderCount","shouldRestoreHeight","transition","InfiniteScroll","onLoadMore","items","scrollContainerClosest","itemSelector","noFastList","noScrollRestoreOnTop","TabList","tabs","tabClassName","tab","activeTab","onSwitchTab","messageInputInvoice","inputInvoice","message","selectChatMessage","messageId","chat","isPaidMedia","paidMedia","paidMediaMessage","paidMediaChat","StarPaymentModal","closeStarsPaymentModal","sendStarPaymentForm","markLoading","unmarkLoading","prevModal","usePrevious","isBotSubscription","canShowPeerItem","descriptionText","botName","starsText","areAllPhotos","every","duration","areAllVideos","mediaText","channelTitle","disclaimerText","link","inviteCustomPeer","getCustomPeerFromInvite","handlePayment","paymentContent","hasAbsoluteCloseButton","paymentImages","paymentPhoto","avatarStar","PeerBadge","avatarWebPhoto","avatarSize","badgeIcon","badgeText","badgeClassName","amountBadge","paymentImageBackground","PeerChip","botItem","paymentButton","formatStarsAsIcon","asFont","disclaimer","UniqueGiftHeader","modelAttribute","backdropAttribute","patternAttribute","subtitlePeer","resellPrice","openChat","isHover","markHover","unmarkHover","useTransitionActiveKey","subtitleColor","textColor","radialPatternBackdrop","backdropColors","patternColor","patternIcon","slideClassName","direction","noLoop","onMouseEnter","IS_TOUCH_ENV","onMouseLeave","style","buildStyle","AVATAR_SPARKLES_CENTER_SHIFT","paidMessageCommission","starsPaidMessageCommissionPermille","starsGiftSticker","selectGiftStickerForStars","selectGiftStickerForTon","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","topSticker","StarsTransactionModal","showNotification","openMediaViewer","closeStarsTransactionModal","triggerSparklesRef","handleOpenMedia","origin","MediaViewerOrigin","StarsTransaction","standaloneMedia","flatMap","Object","values","handleAvatarMouseMove","handleRequestAnimation","animate","starModalData","giftAttributes","toName","getStarsPeerTitleKey","messageLink","getMessageLink","giveawayMessageLink","mediaAmount","m","shouldDisplayAvatar","uniqueGiftHeader","pattern","regularHeader","onMouseMove","InteractiveSparkles","onRequestAnimation","centerShift","percent","tableData","peerLabel","push","containerClassName","copyTextToClipboard","footerTextParts","footer","renderingModalData","TableInfoModal","hasBackdrop","buttonText","StarsSubscriptionModal","closeStarsSubscriptionModal","fulfillStarsSubscription","changeStarsSubscription","checkChatInvite","loadStarStatus","buttonState","canRefulfill","isActive","canRestart","chatInviteHash","invoiceSlug","handleButtonClick","hash","slug","hasBotCancelled","isApiPeerUser","specialReplacement","STARS_ICON_PLACEHOLDER","footerTos","DEFAULT_POINTS","getProgress","points","value","pointIndex","findIndex","point","prevPoint","nextPoint","getValue","progress","floor","StarSlider","maxValue","defaultValue","onChange","floatingBadgeRef","result","setValue","useEffectOnce","updateSafeBadgePosition","badge","parent","parentElement","requestMeasure","safeMinX","offsetLeft","offsetWidth","safeMaxX","requestMutation","setProperty","useResizeObserver","handleChange","event","newValue","Number","floatingBadgeWrapper","floatingBadge","ref","floatingBadgeText","floatingBadgeIcon","AnimatedCounter","floatingBadgeTriangle","viewBox","fill","x1","x2","y1","y2","offset","d","Sparkles","preset","sparkles","slider","max","step","ANONYMOUS_PEER","avatarIcon","customPeerAvatarColor","isCustomPeer","starBalance","maxAmount","paidReactionMaxAmount","defaultPrivacy","settings","paidReactionPrivacy","sendPaidReactionsAsPeerIds","currentUser","PaidReactionModal","closePaidReactionModal","addLocalPaidReaction","loadSendPaidReactionsAs","setStarsAmount","isTouched","markTouched","unmarkTouched","shouldSendAsAnonymous","setShouldSendAsAnonymous","sendAsPeerId","setSendAsPeerId","senderPeer","isMobile","useAppLayout","handleShowInTopSendersChange","target","checked","handleAmountChange","filteredMyReactorIds","unshift","canChangeSendAsPeer","currentReactor","reactions","topReactors","find","reactor","isMy","isAnonymous","includes","handleSend","isPrivate","shouldIgnoreDefaultPrivacy","handleSendAsPeerChange","renderMenuItem","isSelected","MenuItem","itemInfo","FullNameTitle","itemTitle","noFake","noVerified","itemSubtitle","itemIcon","SendAsPeerMenuButton","onTrigger","ripple","sendAsPeerMenuButton","sendAsPeerButtonAvatar","buttonDownIcon","sendAsPeersMenu","DropdownMenu","sendAsPeerMenu","bubbleClassName","sendAsPeerMenuBubble","trigger","positionX","autoClose","hasCurrentSender","myReactorAmount","forEach","isCurrentReactor","localAmount","sender","sort","a","b","chatTitle","isLowStackPriority","sendAsPeersMenuContainer","headerControlPanel","Separator","topLabel","countText","topPeer","topBadge","separator","Checkbox","checkBox","label","buttonStar","theme","selectTheme","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","selectThemeValues","paidMessagesStars","selectPeerPaidMessagesStars","userFullInfo","selectUserFullInfo","isGiftForSelf","areUniqueStarGiftsDisallowed","disallowedGifts","shouldDisallowUniqueStarGifts","shouldDisallowLimitedStarGifts","tabState","selectTabState","captionLimit","starGiftMaxMessageLength","isPaymentFormLoading","giftByStars","sendStarGift","sendPremiumGiftByStars","openGiftUpgradeModal","giftMessage","setGiftMessage","shouldHideName","setShouldHideName","shouldPayForUpgrade","setShouldPayForUpgrade","shouldPayByStars","setShouldPayByStars","customBackgroundValue","useCustomBackground","isStarGift","isPremiumGift","hasPremiumByStars","isPeerUser","isSelf","localMessage","currentGift","isOutgoing","senderId","action","mediaType","months","isNameHidden","starsToConvert","canUpgrade","alreadyPaidUpgradeStars","upgradeStars","fromId","handleGiftMessageChange","handleShouldHideNameChange","handleShouldPayForUpgradeChange","toggleShouldPayByStars","handleOpenUpgradePreview","giftId","handleGetMoreStars","handleMainButtonClick","shouldUpgrade","canUseStarsPayment","bgClassName","inert","ActionMessage","threadId","MAIN_THREAD_ID","appearanceOrder","symbolsLeft","TextArea","maxLength","maxLengthIndicator","toString","ListItem","narrow","Switcher","Link","isPrimary","receiver","renderOptionsSection","formatCurrency","availabilityRemains","PremiumProgress","availabilityTotal","rightText","leftText","renderFooter","selectGiftStickerForDuration","baseMonthAmount","optionByStars","handleGiftClick","perMonth","discount","ceil","tabIndex","role","nonInteractive","caption","renderMonths","pill","GiftRibbon","isCurrentUserPremium","selectIsCurrentUserPremium","observeIntersection","isResale","openGiftInfoModal","openPremiumModal","stickerRef","setIsVisible","isGiftUnique","uniqueGift","regularGift","priceInfo","amounts","resaleTonOnly","getPriceAmount","priceCurrency","resellMinStars","priceInStarsAsString","isLimited","isSoldOut","isPremiumRequired","requirePremium","isUserLimitReached","limitedPerUser","perUserRemains","perUserTotal","giftNumber","giftRibbon","useOnIntersect","entry","visible","isIntersecting","StickerView","observeIntersectionForPlaying","observeIntersectionForLoading","containerRef","shouldLoop","shouldPreloadPreview","withSparkleEffect","formatTonAsIcon","shouldConvertFromNanos","starGifts","resaleGifts","areGiftsAllLoaded","isAllLoaded","areGiftsLoading","updateIteration","resellGifts","gifts","GiftModalResaleScreen","onGiftClick","loadResaleGifts","updateResaleGiftsFilter","scrollerRef","resellGiftsIds","g","hasFilter","modelAttributes","patternAttributes","backdropAttributes","handleLoadMoreResellGifts","isGiftsEmpty","viewportIds","useInfiniteScroll","RESALE_GIFTS_LIMIT","observe","useIntersectionObserver","rootRef","throttleMs","handleResetGiftsFilter","resaleScreenRoot","notFoundGiftsRoot","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","SearchingDuck","notFoundGiftsDescription","notFoundGiftsLink","resaleStarGiftsContainer","preloadBackwards","GiftItemStar","ATTRIBUTE_STICKER_SIZE","REM","ResaleGiftMenuAttributeSticker","customColor","useDynamicColorListener","thumbClassName","attributes","counters","GiftResaleFilters","searchModelQuery","setSearchModelQuery","searchBackdropQuery","setSearchBackdropQuery","searchPatternQuery","setSearchPatternQuery","filteredAttributes","counter","attribute","found","attr","backdropId","documentId","filteredAndSearchedAttributes","filterBySearch","trim","toLowerCase","sortMenuRef","isContextMenuOpen","isSortContextMenuOpen","contextMenuAnchor","sortContextMenuAnchor","handleContextMenu","handleSortContextMenu","handleContextMenuClose","handleSortContextMenuClose","handleContextMenuHide","handleSortContextMenuHide","useContextMenuHandlers","getSortMenuElement","modelMenuRef","isModelContextMenuOpen","modelContextMenuAnchor","handleModelContextMenu","handleModelContextMenuClose","handleModelContextMenuHide","getModelMenuElement","backdropMenuRef","isBackdropContextMenuOpen","backdropContextMenuAnchor","handleBackdropContextMenu","handleBackdropContextMenuClose","handleBackdropContextMenuHide","getBackdropMenuElement","patternMenuRef","isPatternContextMenuOpen","patternContextMenuAnchor","handlePatternContextMenu","handlePatternContextMenuClose","handlePatternContextMenuHide","getPatternMenuElement","SortMenuButton","sortType","isMenuOpen","ModelMenuButton","attributesCount","BackdropMenuButton","PatternMenuButton","handleSortMenuItemClick","handleSelectedAllModelsClick","handleSelectedAllPatternsClick","handleSelectedAllBackdropsClick","handleModelMenuItemClick","updatedAttributes","some","handlePatternMenuItemClick","handleBackdropMenuItemClick","handleSearchModelInputReset","useCallback","handleSearchBackdropInputReset","handleSearchPatternInputReset","handleSearchInputClick","stopPropagation","preventDefault","modelMenuItemsContainerRef","Menu","anchor","menu","getMenuElement","onCloseAnimationEnd","icon","menuItemText","menuItemIcon","models","selectedAttributes","isSelectedAll","menuContentContainer","SearchInput","search","onReset","placeholder","menuItemStickerText","renderModelMenuItems","right","backdrops","backdropAttributeMenuItemText","renderBackdropMenuItems","patterns","renderPatternMenuItems","buttonsContainer","idsByCategory","StarGiftCategoryList","onCategoryChanged","areLimitedStarGiftsDisallowed","starCategories","keys","category","hasResale","selectedCategory","setSelectedCategory","renderCategoryName","renderCategoryItem","handleItemClick","isInteger","useHorizontalScroll","runThrottledForScroll","throttle","cb","forPeerId","resaleGiftsCount","areResaleGiftsLoading","boostPerSentGift","boostsPerSentGift","starGiftsById","starGiftIdsByCategory","GiftModal","closeGiftModal","resetResaleGifts","transitionRef","giftHeaderRef","isApiPeerChat","selectedGift","setSelectedGift","selectedResellGift","setSelectedResellGift","shouldShowMainScreenHeader","setShouldShowMainScreenHeader","isMainScreenHeaderForStarGifts","setIsMainScreenHeaderForStarGifts","isGiftScreenHeaderForStarGifts","setIsGiftScreenHeaderForStarGifts","areAllGiftsDisallowed","shouldDisallowPremiumGifts","disallowedGiftTypes","areUnlimitedStarGiftsDisallowed","shouldDisallowUnlimitedStarGifts","allGifts","filteredGifts","prevGift","giftsByStars","mapGifts","Map","starsGift","set","baseGift","reduce","prev","isResaleScreen","isGiftScreen","shouldShowHeader","isHeaderForStarGifts","handleScroll","headerTop","transitionTop","giftPremiumDescription","starGiftDescription","renderTextFilters","recipientId","handleCloseModal","handleCloseButtonClick","isBackButton","buttonClassName","resaleHeader","headerSlide","isFirstLoading","resaleHeaderContentContainer","resaleHeaderText","resaleHeaderDescription","commonHeaderText","renderHeader","avatars","premiumGiftsGallery","GiftItemPremium","get","starGiftsDescription","starGiftsTransition","filteredGiftIds","starGiftsContainer","shouldShowResale","availabilityResale","shouldDuplicateAsResale","elements","renderStarGifts","GiftSendingOptions","GiftRecipientPicker","closeGiftRecipientPicker","openGiftModal","idsWithSelf","concat","filteredPeerIds","selectCanGift","selectedId","forceShowSelf","AVATAR_SIZE","GIFT_STICKER_SIZE","GiftTransferPreview","giftPreview","arrow","typeGift","isSavedGift","fromPeer","targetPeer","hasAdminRights","getHasAdminRight","recipientPeer","currentUserEmojiStatus","emojiStatus","collectibleEmojiStatuses","statuses","releasedByPeerId","releasedByPeer","starGiftMaxConvertPeriod","tonExplorerUrl","GiftInfoModal","closeGiftInfoModal","changeGiftVisibility","convertGiftToStars","openChatWithInfo","focusMessage","buyStarGift","isConvertConfirmOpen","openConvertConfirm","closeConvertConfirm","isConfirmModalOpen","setIsConfirmModalOpen","shouldPayInTon","setShouldPayInTon","renderingFromPeer","renderingTargetPeer","isTargetChat","savedGift","isSender","canConvertDifference","getServerTime","conversionLeft","hasConvertOption","giftSubtitle","ownerTitle","getMainUsername","fallbackText","owner","canFocusUpgrade","upgradeMsgId","canManage","inputGift","getResalePrice","confirmPrice","canBuyGift","ownerId","giftOwnerTitle","ownerName","handleFocusUpgraded","giftChat","handleTriggerVisibility","isUnsaved","shouldUnsave","handleConvertToStars","handleOpenUpgradeModal","handleBuyGift","closeConfirmModal","handleConfirmBuyGift","price","SettingsMenuButton","headerButton","renderFooterButton","isShiny","upgradeIcon","saleDateInfo","firstSaleDate","lastSaleDate","modalData","isConverted","canConvert","isVisibleForMe","uniqueGiftContextMenu","GiftMenuItems","uniqueGiftModalHeader","modalHeader","giftResalePriceContainer","giftResalePriceStar","headerSplitButton","moreIcon","soldOut","CUSTOM_PEER_HIDDEN","unknown","starsValue","giftValue","starAmountIcon","total","renderTextWithEntities","ownerAddress","ownerPeer","originalDetails","copyIcon","withEmojiStatus","uniqueAttribute","rarityPercent","issued","issuedCount","totalCount","recipient","recipientLink","senderLink","tonLink","giftAddress","footerDescription","withBalanceBar","currencyInBalanceBar","ConfirmDialog","noDefaultTitle","confirmLabel","confirmHandler","formatTonAsText","formatStarsAsText","onCheck","checkBoxDescription","configPermille","starsStargiftResaleCommissionPermille","starsStargiftResaleAmountMin","starsStargiftResaleAmountMax","starsUsdWithdrawRateX1000","starsUsdWithdrawRate","tonConfigPermille","tonStargiftResaleCommissionPermille","tonStargiftResaleAmountMin","convertTonFromNanos","maxTonFromConfig","tonStargiftResaleAmountMax","GiftResalePriceComposerModal","closeGiftResalePriceComposerModal","updateStarGiftPrice","setPrice","isPriceInTon","setIsPriceInTon","hasPrice","handleChangePrice","parseFloat","isNaN","handleSellGift","convertTonToNanos","variables","commission","minAmount","isPriceCorrect","InputText","inputMode","teactExperimentControlled","priceWithCommission","toFixed","GiftUpgradeModal","closeGiftUpgradeModal","upgradeGift","renderingRecipient","shouldKeepOriginalDetails","setShouldKeepOriginalDetails","previewAttributes","setPreviewAttributes","handleUpgrade","updatePreviewAttributes","sampleAttributes","previousSelection","random","getRandomAttributes","useInterval","getStickerMediaHash","fetch","ApiMediaFormat","BlobUrl","listItemData","TableAboutModal","GiftStatusInfoModal","closeGiftStatusInfoModal","setEmojiStatus","useCustomEmoji","patternDocumentId","onWearClick","customEmoji","mockPeerWithStatus","statusSparklesColor","FRAGMENT_PEER","byKey","hasPassword","twoFaSettings","passwordHint","GiftWithdrawModal","closeGiftWithdrawModal","clearGiftWithdrawError","processStarGiftWithdrawal","openSettingsScreen","shouldShowPassword","setShouldShowPassword","exportDelay","canExportAt","handleSubmit","password","handleSetUpPassword","screen","SettingsScreens","TwoFaDisabled","exportHint","days","getDays","noPassword","PasswordForm","shouldShowSubmit","error","errorKey","withRegular","clearError","isPasswordVisible","shouldResetValue","onChangePasswordVisibility","submitLabel","onSubmit","noop","async","peerGlobalSearch","searchResult","callApi","accountResultIds","globalResultIds","contactIds","GiftTransferModal","closeGiftTransferModal","openGiftWithdrawModal","transferGift","setSelectedId","renderingSelectedPeerId","renderingSelectedPeer","orderedChatIds","useFolderManagerForOrderedIds","ALL_FOLDER_ID","sortedLocalIds","foundIds","currentResultsQuery","queryFn","debounceTimeout","debouncedQuery","resolverFn","ms","dependencies","isFrozen","updateWhenUnfrozen","forceUpdate","useForceUpdate","handleUnfreeze","useHeavyAnimation","getIsHeavyAnimating","useHeavyAnimationFreeze","runDebounced","useRunDebounced","useSyncEffect","useDebouncedMemo","setCurrentResultsQuery","queryCallback","useAsync","Promise","resolve","answer","usePeerSearch","categories","MEMO_EMPTY_ARRAY","peerColorId","handleCategoryChange","displayIds","handleTransfer","transferStars","ignoreFreeze","onSelectedCategoryChange","withPeerUsernames","noScrollRestore","ChatRefundModal","closeChatRefundModal","toggleNoPaidMessagesException","shouldRefundStars","setShouldRefundStars","renderingUser","starsToRefund","handleConfirmRemoveFee","shouldRefundCharged","PriceConfirmModal","actions","handleConfirm","directInfo","closePriceConfirmModal","newAmount","currentBalance","tabId","getCurrentTabId","originalAmount","originalAmountText","newAmountText"],"sourceRoot":""}