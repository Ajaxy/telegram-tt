{"version":3,"file":"2465.b1e2f7d278b1892b7401.js","mappings":"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","sources":["webpack://telegram-t/./node_modules/music-metadata/lib/ogg/vorbis/VorbisStream.js","webpack://telegram-t/./node_modules/music-metadata/lib/flac/FlacToken.js","webpack://telegram-t/./node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js","webpack://telegram-t/./node_modules/music-metadata/lib/flac/FlacParser.js","webpack://telegram-t/./node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js","webpack://telegram-t/./node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js"],"sourcesContent":["import * as Token from 'token-types';\nimport debugInit from 'debug';\nimport { VorbisDecoder } from './VorbisDecoder.js';\nimport { CommonHeader, IdentificationHeader, VorbisPictureToken } from './Vorbis.js';\nimport { makeUnexpectedFileContentError } from '../../ParseError.js';\nconst debug = debugInit('music-metadata:parser:ogg:vorbis1');\nexport class VorbisContentError extends makeUnexpectedFileContentError('Vorbis') {\n}\n/**\n * Vorbis 1 Parser.\n * Used by OggStream\n */\nexport class VorbisStream {\n    constructor(metadata, options) {\n        this.pageSegments = [];\n        this.durationOnLastPage = true;\n        this.metadata = metadata;\n        this.options = options;\n    }\n    /**\n     * Vorbis 1 parser\n     * @param header Ogg Page Header\n     * @param pageData Page data\n     */\n    async parsePage(header, pageData) {\n        this.lastPageHeader = header;\n        if (header.headerType.firstPage) {\n            this.parseFirstPage(header, pageData);\n        }\n        else {\n            if (header.headerType.continued) {\n                if (this.pageSegments.length === 0) {\n                    throw new VorbisContentError('Cannot continue on previous page');\n                }\n                this.pageSegments.push(pageData);\n            }\n            if (header.headerType.lastPage || !header.headerType.continued) {\n                // Flush page segments\n                if (this.pageSegments.length > 0) {\n                    const fullPage = VorbisStream.mergeUint8Arrays(this.pageSegments);\n                    await this.parseFullPage(fullPage);\n                }\n                // Reset page segments\n                this.pageSegments = header.headerType.lastPage ? [] : [pageData];\n            }\n        }\n    }\n    static mergeUint8Arrays(arrays) {\n        const totalSize = arrays.reduce((acc, e) => acc + e.length, 0);\n        const merged = new Uint8Array(totalSize);\n        arrays.forEach((array, i, _arrays) => {\n            const offset = _arrays.slice(0, i).reduce((acc, e) => acc + e.length, 0);\n            merged.set(array, offset);\n        });\n        return merged;\n    }\n    async flush() {\n        await this.parseFullPage(VorbisStream.mergeUint8Arrays(this.pageSegments));\n    }\n    async parseUserComment(pageData, offset) {\n        const decoder = new VorbisDecoder(pageData, offset);\n        const tag = decoder.parseUserComment();\n        await this.addTag(tag.key, tag.value);\n        return tag.len;\n    }\n    async addTag(id, value) {\n        if (id === 'METADATA_BLOCK_PICTURE' && (typeof value === 'string')) {\n            if (this.options.skipCovers) {\n                debug(\"Ignore picture\");\n                return;\n            }\n            value = VorbisPictureToken.fromBase64(value);\n            debug(`Push picture: id=${id}, format=${value.format}`);\n        }\n        else {\n            debug(`Push tag: id=${id}, value=${value}`);\n        }\n        await this.metadata.addTag('vorbis', id, value);\n    }\n    calculateDuration() {\n        if (this.lastPageHeader && this.metadata.format.sampleRate && this.lastPageHeader.absoluteGranulePosition >= 0) {\n            // Calculate duration\n            this.metadata.setFormat('numberOfSamples', this.lastPageHeader.absoluteGranulePosition);\n            this.metadata.setFormat('duration', this.lastPageHeader.absoluteGranulePosition / this.metadata.format.sampleRate);\n        }\n    }\n    /**\n     * Parse first Ogg/Vorbis page\n     * @param _header\n     * @param pageData\n     */\n    parseFirstPage(_header, pageData) {\n        this.metadata.setFormat('codec', 'Vorbis I');\n        this.metadata.setFormat('hasAudio', true);\n        debug('Parse first page');\n        // Parse  Vorbis common header\n        const commonHeader = CommonHeader.get(pageData, 0);\n        if (commonHeader.vorbis !== 'vorbis')\n            throw new VorbisContentError('Metadata does not look like Vorbis');\n        if (commonHeader.packetType === 1) {\n            const idHeader = IdentificationHeader.get(pageData, CommonHeader.len);\n            this.metadata.setFormat('sampleRate', idHeader.sampleRate);\n            this.metadata.setFormat('bitrate', idHeader.bitrateNominal);\n            this.metadata.setFormat('numberOfChannels', idHeader.channelMode);\n            debug('sample-rate=%s[hz], bitrate=%s[b/s], channel-mode=%s', idHeader.sampleRate, idHeader.bitrateNominal, idHeader.channelMode);\n        }\n        else\n            throw new VorbisContentError('First Ogg page should be type 1: the identification header');\n    }\n    async parseFullPage(pageData) {\n        // New page\n        const commonHeader = CommonHeader.get(pageData, 0);\n        debug('Parse full page: type=%s, byteLength=%s', commonHeader.packetType, pageData.byteLength);\n        switch (commonHeader.packetType) {\n            case 3: //  type 3: comment header\n                return this.parseUserCommentList(pageData, CommonHeader.len);\n            case 1: // type 1: the identification header\n            case 5: // type 5: setup header type\n                break; // ignore\n        }\n    }\n    /**\n     * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-840005.2\n     */\n    async parseUserCommentList(pageData, offset) {\n        const strLen = Token.UINT32_LE.get(pageData, offset);\n        offset += 4;\n        // const vendorString = new Token.StringType(strLen, 'utf-8').get(pageData, offset);\n        offset += strLen;\n        let userCommentListLength = Token.UINT32_LE.get(pageData, offset);\n        offset += 4;\n        while (userCommentListLength-- > 0) {\n            offset += (await this.parseUserComment(pageData, offset));\n        }\n    }\n}\n","import * as util from '../common/Util.js';\nimport { UINT16_BE, UINT24_BE, Uint8ArrayType } from 'token-types';\n/**\n * FLAC supports up to 128 kinds of metadata blocks; currently the following are defined:\n * ref: https://xiph.org/flac/format.html#metadata_block\n */\nexport const BlockType = {\n    STREAMINFO: 0, // STREAMINFO\n    PADDING: 1, // PADDING\n    APPLICATION: 2, // APPLICATION\n    SEEKTABLE: 3, // SEEKTABLE\n    VORBIS_COMMENT: 4, // VORBIS_COMMENT\n    CUESHEET: 5, // CUESHEET\n    PICTURE: 6 // PICTURE\n};\nexport const BlockHeader = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            lastBlock: util.getBit(buf, off, 7),\n            type: util.getBitAllignedNumber(buf, off, 1, 7),\n            length: UINT24_BE.get(buf, off + 1)\n        };\n    }\n};\n/**\n * METADATA_BLOCK_DATA\n * Ref: https://xiph.org/flac/format.html#metadata_block_streaminfo\n */\nexport const BlockStreamInfo = {\n    len: 34,\n    get: (buf, off) => {\n        return {\n            // The minimum block size (in samples) used in the stream.\n            minimumBlockSize: UINT16_BE.get(buf, off),\n            // The maximum block size (in samples) used in the stream.\n            // (Minimum blocksize == maximum blocksize) implies a fixed-blocksize stream.\n            maximumBlockSize: UINT16_BE.get(buf, off + 2) / 1000,\n            // The minimum frame size (in bytes) used in the stream.\n            // May be 0 to imply the value is not known.\n            minimumFrameSize: UINT24_BE.get(buf, off + 4),\n            // The maximum frame size (in bytes) used in the stream.\n            // May be 0 to imply the value is not known.\n            maximumFrameSize: UINT24_BE.get(buf, off + 7),\n            // Sample rate in Hz. Though 20 bits are available,\n            // the maximum sample rate is limited by the structure of frame headers to 655350Hz.\n            // Also, a value of 0 is invalid.\n            sampleRate: UINT24_BE.get(buf, off + 10) >> 4,\n            // probably slower: sampleRate: common.getBitAllignedNumber(buf, off + 10, 0, 20),\n            // (number of channels)-1. FLAC supports from 1 to 8 channels\n            channels: util.getBitAllignedNumber(buf, off + 12, 4, 3) + 1,\n            // bits per sample)-1.\n            // FLAC supports from 4 to 32 bits per sample. Currently the reference encoder and decoders only support up to 24 bits per sample.\n            bitsPerSample: util.getBitAllignedNumber(buf, off + 12, 7, 5) + 1,\n            // Total samples in stream.\n            // 'Samples' means inter-channel sample, i.e. one second of 44.1Khz audio will have 44100 samples regardless of the number of channels.\n            // A value of zero here means the number of total samples is unknown.\n            totalSamples: util.getBitAllignedNumber(buf, off + 13, 4, 36),\n            // the MD5 hash of the file (see notes for usage... it's a littly tricky)\n            fileMD5: new Uint8ArrayType(16).get(buf, off + 18)\n        };\n    }\n};\n","import * as Token from 'token-types';\nimport { textDecode } from '@borewit/text-codec';\nexport class VorbisDecoder {\n    constructor(data, offset) {\n        this.data = data;\n        this.offset = offset;\n    }\n    readInt32() {\n        const value = Token.UINT32_LE.get(this.data, this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readStringUtf8() {\n        const len = this.readInt32();\n        const value = textDecode(this.data.subarray(this.offset, this.offset + len), 'utf-8');\n        this.offset += len;\n        return value;\n    }\n    parseUserComment() {\n        const offset0 = this.offset;\n        const v = this.readStringUtf8();\n        const idx = v.indexOf('=');\n        return {\n            key: v.substring(0, idx).toUpperCase(),\n            value: v.substring(idx + 1),\n            len: this.offset - offset0\n        };\n    }\n}\n","import initDebug from 'debug';\nimport { Uint8ArrayType } from 'token-types';\nimport { VorbisPictureToken } from '../ogg/vorbis/Vorbis.js';\nimport { AbstractID3Parser } from '../id3v2/AbstractID3Parser.js';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { VorbisStream } from '../ogg/vorbis/VorbisStream.js';\nimport { VorbisDecoder } from '../ogg/vorbis/VorbisDecoder.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nimport * as Flac from './FlacToken.js';\nconst debug = initDebug('music-metadata:parser:FLAC');\nclass FlacContentError extends makeUnexpectedFileContentError('FLAC') {\n}\nexport class FlacParser extends AbstractID3Parser {\n    constructor() {\n        super(...arguments);\n        this.vorbisParser = new VorbisStream(this.metadata, this.options);\n        this.padding = 0;\n    }\n    async postId3v2Parse() {\n        const fourCC = await this.tokenizer.readToken(FourCcToken);\n        if (fourCC.toString() !== 'fLaC') {\n            throw new FlacContentError('Invalid FLAC preamble');\n        }\n        let blockHeader;\n        do {\n            // Read block header\n            blockHeader = await this.tokenizer.readToken(Flac.BlockHeader);\n            // Parse block data\n            await this.parseDataBlock(blockHeader);\n        } while (!blockHeader.lastBlock);\n        if (this.tokenizer.fileInfo.size && this.metadata.format.duration) {\n            const dataSize = this.tokenizer.fileInfo.size - this.tokenizer.position;\n            this.metadata.setFormat('bitrate', 8 * dataSize / this.metadata.format.duration);\n        }\n    }\n    async parseDataBlock(blockHeader) {\n        debug(`blockHeader type=${blockHeader.type}, length=${blockHeader.length}`);\n        switch (blockHeader.type) {\n            case Flac.BlockType.STREAMINFO:\n                return this.readBlockStreamInfo(blockHeader.length);\n            case Flac.BlockType.PADDING:\n                this.padding += blockHeader.length;\n                break;\n            case Flac.BlockType.APPLICATION:\n                break;\n            case Flac.BlockType.SEEKTABLE:\n                break;\n            case Flac.BlockType.VORBIS_COMMENT:\n                return this.readComment(blockHeader.length);\n            case Flac.BlockType.CUESHEET:\n                break;\n            case Flac.BlockType.PICTURE:\n                await this.parsePicture(blockHeader.length);\n                return;\n            default:\n                this.metadata.addWarning(`Unknown block type: ${blockHeader.type}`);\n        }\n        // Ignore data block\n        return this.tokenizer.ignore(blockHeader.length).then();\n    }\n    /**\n     * Parse STREAMINFO\n     */\n    async readBlockStreamInfo(dataLen) {\n        if (dataLen !== Flac.BlockStreamInfo.len)\n            throw new FlacContentError('Unexpected block-stream-info length');\n        const streamInfo = await this.tokenizer.readToken(Flac.BlockStreamInfo);\n        this.metadata.setFormat('container', 'FLAC');\n        this.processsStreamInfo(streamInfo);\n    }\n    /**\n     * Parse STREAMINFO\n     */\n    processsStreamInfo(streamInfo) {\n        this.metadata.setFormat('codec', 'FLAC');\n        this.metadata.setFormat('hasAudio', true);\n        this.metadata.setFormat('lossless', true);\n        this.metadata.setFormat('numberOfChannels', streamInfo.channels);\n        this.metadata.setFormat('bitsPerSample', streamInfo.bitsPerSample);\n        this.metadata.setFormat('sampleRate', streamInfo.sampleRate);\n        if (streamInfo.totalSamples > 0) {\n            this.metadata.setFormat('duration', streamInfo.totalSamples / streamInfo.sampleRate);\n        }\n    }\n    /**\n     * Read VORBIS_COMMENT from tokenizer\n     * Ref: https://www.xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-640004.2.3\n     */\n    async readComment(dataLen) {\n        const data = await this.tokenizer.readToken(new Uint8ArrayType(dataLen));\n        return this.parseComment(data);\n    }\n    /**\n     * Parse VORBIS_COMMENT\n     * Ref: https://www.xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-640004.2.3\n     */\n    async parseComment(data) {\n        const decoder = new VorbisDecoder(data, 0);\n        const vendor = decoder.readStringUtf8();\n        if (vendor.length > 0) {\n            this.metadata.setFormat('tool', vendor);\n        }\n        const commentListLength = decoder.readInt32();\n        const tags = new Array(commentListLength);\n        for (let i = 0; i < commentListLength; i++) {\n            tags[i] = decoder.parseUserComment();\n        }\n        await Promise.all(tags.map(tag => {\n            if (tag.key === 'ENCODER') {\n                this.metadata.setFormat('tool', tag.value);\n            }\n            return this.addTag(tag.key, tag.value);\n        }));\n    }\n    async parsePicture(dataLen) {\n        if (this.options.skipCovers) {\n            return this.tokenizer.ignore(dataLen);\n        }\n        return this.addPictureTag(await this.tokenizer.readToken(new VorbisPictureToken(dataLen)));\n    }\n    addPictureTag(picture) {\n        return this.addTag('METADATA_BLOCK_PICTURE', picture);\n    }\n    addTag(id, value) {\n        return this.vorbisParser.addTag(id, value);\n    }\n}\n","import * as Token from 'token-types';\nimport { AttachedPictureType } from '../../id3v2/ID3v2Token.js';\n/**\n * Parse the METADATA_BLOCK_PICTURE\n * Ref: https://wiki.xiph.org/VorbisComment#METADATA_BLOCK_PICTURE\n * Ref: https://xiph.org/flac/format.html#metadata_block_picture\n * // ToDo: move to ID3 / APIC?\n */\nexport class VorbisPictureToken {\n    static fromBase64(base64str) {\n        return VorbisPictureToken.fromBuffer(Uint8Array.from(atob(base64str), c => c.charCodeAt(0)));\n    }\n    static fromBuffer(buffer) {\n        const pic = new VorbisPictureToken(buffer.length);\n        return pic.get(buffer, 0);\n    }\n    constructor(len) {\n        this.len = len;\n    }\n    get(buffer, offset) {\n        const type = AttachedPictureType[Token.UINT32_BE.get(buffer, offset)];\n        offset += 4;\n        const mimeLen = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const format = new Token.StringType(mimeLen, 'utf-8').get(buffer, offset);\n        offset += mimeLen;\n        const descLen = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const description = new Token.StringType(descLen, 'utf-8').get(buffer, offset);\n        offset += descLen;\n        const width = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const height = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const colour_depth = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const indexed_color = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const picDataLen = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const data = buffer.slice(offset, offset + picDataLen);\n        return {\n            type,\n            format,\n            description,\n            width,\n            height,\n            colour_depth,\n            indexed_color,\n            data\n        };\n    }\n}\n/**\n * Comment header decoder\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-620004.2.1\n */\nexport const CommonHeader = {\n    len: 7,\n    get: (buf, off) => {\n        return {\n            packetType: Token.UINT8.get(buf, off),\n            vorbis: new Token.StringType(6, 'ascii').get(buf, off + 1)\n        };\n    }\n};\n/**\n * Identification header decoder\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-630004.2.2\n */\nexport const IdentificationHeader = {\n    len: 23,\n    get: (uint8Array, off) => {\n        return {\n            version: Token.UINT32_LE.get(uint8Array, off + 0),\n            channelMode: Token.UINT8.get(uint8Array, off + 4),\n            sampleRate: Token.UINT32_LE.get(uint8Array, off + 5),\n            bitrateMax: Token.UINT32_LE.get(uint8Array, off + 9),\n            bitrateNominal: Token.UINT32_LE.get(uint8Array, off + 13),\n            bitrateMin: Token.UINT32_LE.get(uint8Array, off + 17)\n        };\n    }\n};\n","import { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport { ID3v2Header } from './ID3v2Token.js';\nimport { ID3v2Parser } from './ID3v2Parser.js';\nimport { ID3v1Parser } from '../id3v1/ID3v1Parser.js';\nimport { BasicParser } from '../common/BasicParser.js';\nconst debug = initDebug('music-metadata:parser:ID3');\n/**\n * Abstract parser which tries take ID3v2 and ID3v1 headers.\n */\nexport class AbstractID3Parser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.id3parser = new ID3v2Parser();\n    }\n    static async startsWithID3v2Header(tokenizer) {\n        return (await tokenizer.peekToken(ID3v2Header)).fileIdentifier === 'ID3';\n    }\n    async parse() {\n        try {\n            await this.parseID3v2();\n        }\n        catch (err) {\n            if (err instanceof EndOfStreamError) {\n                debug(\"End-of-stream\");\n            }\n            else {\n                throw err;\n            }\n        }\n    }\n    finalize() {\n        return;\n    }\n    async parseID3v2() {\n        await this.tryReadId3v2Headers();\n        debug('End of ID3v2 header, go to MPEG-parser: pos=%s', this.tokenizer.position);\n        await this.postId3v2Parse();\n        if (this.options.skipPostHeaders && this.metadata.hasAny()) {\n            this.finalize();\n        }\n        else {\n            const id3v1parser = new ID3v1Parser(this.metadata, this.tokenizer, this.options);\n            await id3v1parser.parse();\n            this.finalize();\n        }\n    }\n    async tryReadId3v2Headers() {\n        const id3Header = await this.tokenizer.peekToken(ID3v2Header);\n        if (id3Header.fileIdentifier === 'ID3') {\n            debug('Found ID3v2 header, pos=%s', this.tokenizer.position);\n            await this.id3parser.parse(this.metadata, this.tokenizer, this.options);\n            return this.tryReadId3v2Headers();\n        }\n    }\n}\n"],"names":["debug","VorbisContentError","VorbisStream","constructor","metadata","options","this","pageSegments","durationOnLastPage","parsePage","header","pageData","lastPageHeader","headerType","firstPage","parseFirstPage","continued","length","push","lastPage","fullPage","mergeUint8Arrays","parseFullPage","arrays","totalSize","reduce","acc","e","merged","Uint8Array","forEach","array","i","_arrays","offset","slice","set","flush","parseUserComment","tag","addTag","key","value","len","id","skipCovers","fromBase64","format","calculateDuration","sampleRate","absoluteGranulePosition","setFormat","_header","commonHeader","get","vorbis","packetType","idHeader","bitrateNominal","channelMode","byteLength","parseUserCommentList","strLen","userCommentListLength","BlockType","STREAMINFO","PADDING","APPLICATION","SEEKTABLE","VORBIS_COMMENT","CUESHEET","PICTURE","BlockHeader","buf","off","lastBlock","type","UINT24_BE","BlockStreamInfo","minimumBlockSize","UINT16_BE","maximumBlockSize","minimumFrameSize","maximumFrameSize","channels","bitsPerSample","totalSamples","fileMD5","Uint8ArrayType","VorbisDecoder","data","readInt32","readStringUtf8","subarray","offset0","v","idx","indexOf","substring","toUpperCase","FlacContentError","FlacParser","super","arguments","vorbisParser","padding","postId3v2Parse","tokenizer","readToken","toString","blockHeader","parseDataBlock","fileInfo","size","duration","dataSize","position","readBlockStreamInfo","readComment","parsePicture","addWarning","ignore","then","dataLen","streamInfo","processsStreamInfo","parseComment","decoder","vendor","commentListLength","tags","Array","Promise","all","map","addPictureTag","picture","VorbisPictureToken","base64str","fromBuffer","from","atob","c","charCodeAt","buffer","mimeLen","descLen","description","width","height","colour_depth","indexed_color","picDataLen","CommonHeader","IdentificationHeader","uint8Array","version","bitrateMax","bitrateMin","AbstractID3Parser","id3parser","startsWithID3v2Header","peekToken","fileIdentifier","parse","parseID3v2","err","finalize","tryReadId3v2Headers","skipPostHeaders","hasAny","id3v1parser"],"sourceRoot":""}