{"version":3,"file":"8621.414759b8d5a573328011.js","mappings":"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","sources":["webpack://telegram-t/./node_modules/music-metadata/lib/id3v2/FrameParser.js","webpack://telegram-t/./node_modules/music-metadata/lib/id3v2/ID3v2Parser.js"],"sourcesContent":["import initDebug from 'debug';\nimport * as Token from 'token-types';\nimport * as util from '../common/Util.js';\nimport { AttachedPictureType, SyncTextHeader, TextEncodingToken, TextHeader } from './ID3v2Token.js';\nimport { Genres } from '../id3v1/ID3v1Parser.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nimport { decodeUintBE } from '../common/Util.js';\nconst debug = initDebug('music-metadata:id3v2:frame-parser');\nconst defaultEnc = 'latin1'; // latin1 == iso-8859-1;\nexport function parseGenre(origVal) {\n    // match everything inside parentheses\n    const genres = [];\n    let code;\n    let word = '';\n    for (const c of origVal) {\n        if (typeof code === 'string') {\n            if (c === '(' && code === '') {\n                word += '(';\n                code = undefined;\n            }\n            else if (c === ')') {\n                if (word !== '') {\n                    genres.push(word);\n                    word = '';\n                }\n                const genre = parseGenreCode(code);\n                if (genre) {\n                    genres.push(genre);\n                }\n                code = undefined;\n            }\n            else\n                code += c;\n        }\n        else if (c === '(') {\n            code = '';\n        }\n        else {\n            word += c;\n        }\n    }\n    if (word) {\n        if (genres.length === 0 && word.match(/^\\d*$/)) {\n            word = parseGenreCode(word);\n        }\n        if (word) {\n            genres.push(word);\n        }\n    }\n    return genres;\n}\nfunction parseGenreCode(code) {\n    if (code === 'RX')\n        return 'Remix';\n    if (code === 'CR')\n        return 'Cover';\n    if (code.match(/^\\d*$/)) {\n        return Genres[Number.parseInt(code)];\n    }\n}\nexport class FrameParser {\n    /**\n     * Create id3v2 frame parser\n     * @param major - Major version, e.g. (4) for  id3v2.4\n     * @param warningCollector - Used to collect decode issue\n     */\n    constructor(major, warningCollector) {\n        this.major = major;\n        this.warningCollector = warningCollector;\n    }\n    readData(uint8Array, type, includeCovers) {\n        if (uint8Array.length === 0) {\n            this.warningCollector.addWarning(`id3v2.${this.major} header has empty tag type=${type}`);\n            return;\n        }\n        const { encoding, bom } = TextEncodingToken.get(uint8Array, 0);\n        const length = uint8Array.length;\n        let offset = 0;\n        let output = []; // ToDo\n        const nullTerminatorLength = FrameParser.getNullTerminatorLength(encoding);\n        let fzero;\n        debug(`Parsing tag type=${type}, encoding=${encoding}, bom=${bom}`);\n        switch (type !== 'TXXX' && type[0] === 'T' ? 'T*' : type) {\n            case 'T*': // 4.2.1. Text information frames - details\n            case 'GRP1': // iTunes-specific ID3v2 grouping field\n            case 'IPLS': // v2.3: Involved people list\n            case 'MVIN':\n            case 'MVNM':\n            case 'PCS':\n            case 'PCST': {\n                let text;\n                try {\n                    text = util.decodeString(uint8Array.subarray(1), encoding).replace(/\\x00+$/, '');\n                }\n                catch (error) {\n                    if (error instanceof Error) {\n                        this.warningCollector.addWarning(`id3v2.${this.major} type=${type} header has invalid string value: ${error.message}`);\n                        break;\n                    }\n                    throw error;\n                }\n                switch (type) {\n                    case 'TMCL': // Musician credits list\n                    case 'TIPL': // Involved people list\n                    case 'IPLS': // Involved people list\n                        output = FrameParser.functionList(this.splitValue(type, text));\n                        break;\n                    case 'TRK':\n                    case 'TRCK':\n                    case 'TPOS':\n                        output = text;\n                        break;\n                    case 'TCOM':\n                    case 'TEXT':\n                    case 'TOLY':\n                    case 'TOPE':\n                    case 'TPE1':\n                    case 'TSRC':\n                        // id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n                        output = this.splitValue(type, text);\n                        break;\n                    case 'TCO':\n                    case 'TCON':\n                        output = this.splitValue(type, text).map(v => parseGenre(v)).reduce((acc, val) => acc.concat(val), []);\n                        break;\n                    case 'PCS':\n                    case 'PCST':\n                        // TODO: Why `default` not results `1` but `''`?\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\n                        output = (Array.isArray(output) && output[0] === '') ? 1 : 0;\n                        break;\n                    default:\n                        output = this.major >= 4 ? this.splitValue(type, text) : [text];\n                }\n                break;\n            }\n            case 'TXXX': {\n                const idAndData = FrameParser.readIdentifierAndData(uint8Array, offset + 1, length, encoding);\n                const textTag = {\n                    description: idAndData.id,\n                    text: this.splitValue(type, util.decodeString(idAndData.data, encoding).replace(/\\x00+$/, ''))\n                };\n                output = textTag;\n                break;\n            }\n            case 'PIC':\n            case 'APIC':\n                if (includeCovers) {\n                    const pic = {};\n                    offset += 1;\n                    switch (this.major) {\n                        case 2:\n                            pic.format = util.decodeString(uint8Array.subarray(offset, offset + 3), 'latin1'); // 'latin1'; // latin1 == iso-8859-1;\n                            offset += 3;\n                            break;\n                        case 3:\n                        case 4:\n                            fzero = util.findZero(uint8Array, offset, length, defaultEnc);\n                            pic.format = util.decodeString(uint8Array.subarray(offset, fzero), defaultEnc);\n                            offset = fzero + 1;\n                            break;\n                        default:\n                            throw makeUnexpectedMajorVersionError(this.major);\n                    }\n                    pic.format = FrameParser.fixPictureMimeType(pic.format);\n                    pic.type = AttachedPictureType[uint8Array[offset]];\n                    offset += 1;\n                    fzero = util.findZero(uint8Array, offset, length, encoding);\n                    pic.description = util.decodeString(uint8Array.subarray(offset, fzero), encoding);\n                    offset = fzero + nullTerminatorLength;\n                    pic.data = uint8Array.subarray(offset, length);\n                    output = pic;\n                }\n                break;\n            case 'CNT':\n            case 'PCNT':\n                output = decodeUintBE(uint8Array);\n                break;\n            case 'SYLT': {\n                const syltHeader = SyncTextHeader.get(uint8Array, 0);\n                offset += SyncTextHeader.len;\n                const result = {\n                    descriptor: '',\n                    language: syltHeader.language,\n                    contentType: syltHeader.contentType,\n                    timeStampFormat: syltHeader.timeStampFormat,\n                    syncText: []\n                };\n                let readSyllables = false;\n                while (offset < length) {\n                    const nullStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), syltHeader.encoding);\n                    offset += nullStr.len;\n                    if (readSyllables) {\n                        const timestamp = Token.UINT32_BE.get(uint8Array, offset);\n                        offset += Token.UINT32_BE.len;\n                        result.syncText.push({\n                            text: nullStr.text,\n                            timestamp\n                        });\n                    }\n                    else {\n                        result.descriptor = nullStr.text;\n                        readSyllables = true;\n                    }\n                }\n                output = result;\n                break;\n            }\n            case 'ULT':\n            case 'USLT':\n            case 'COM':\n            case 'COMM': {\n                const textHeader = TextHeader.get(uint8Array, offset);\n                offset += TextHeader.len;\n                const descriptorStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), textHeader.encoding);\n                offset += descriptorStr.len;\n                const textStr = FrameParser.readNullTerminatedString(uint8Array.subarray(offset), textHeader.encoding);\n                const comment = {\n                    language: textHeader.language,\n                    descriptor: descriptorStr.text,\n                    text: textStr.text\n                };\n                output = comment;\n                break;\n            }\n            case 'UFID': {\n                const ufid = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);\n                output = { owner_identifier: ufid.id, identifier: ufid.data };\n                break;\n            }\n            case 'PRIV': { // private frame\n                const priv = FrameParser.readIdentifierAndData(uint8Array, offset, length, defaultEnc);\n                output = { owner_identifier: priv.id, data: priv.data };\n                break;\n            }\n            case 'POPM': { // Popularimeter\n                fzero = util.findZero(uint8Array, offset, length, defaultEnc);\n                const email = util.decodeString(uint8Array.subarray(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                const valueLen = length - offset - 1;\n                output = {\n                    email,\n                    rating: Token.UINT8.get(uint8Array, offset),\n                    counter: valueLen > 0 ? util.decodeUintBE(uint8Array.subarray(offset + 1)) : undefined\n                };\n                break;\n            }\n            case 'GEOB': { // General encapsulated object\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                const mimeType = util.decodeString(uint8Array.subarray(offset + 1, fzero), defaultEnc);\n                offset = fzero + 1;\n                fzero = util.findZero(uint8Array, offset, length, encoding);\n                const filename = util.decodeString(uint8Array.subarray(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                fzero = util.findZero(uint8Array, offset, length, encoding);\n                const description = util.decodeString(uint8Array.subarray(offset, fzero), defaultEnc);\n                offset = fzero + 1;\n                const geob = {\n                    type: mimeType,\n                    filename,\n                    description,\n                    data: uint8Array.subarray(offset, length)\n                };\n                output = geob;\n                break;\n            }\n            // W-Frames:\n            case 'WCOM':\n            case 'WCOP':\n            case 'WOAF':\n            case 'WOAR':\n            case 'WOAS':\n            case 'WORS':\n            case 'WPAY':\n            case 'WPUB':\n                // Decode URL\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                output = util.decodeString(uint8Array.subarray(offset, fzero), defaultEnc);\n                break;\n            case 'WXXX': {\n                // Decode URL\n                fzero = util.findZero(uint8Array, offset + 1, length, encoding);\n                const description = util.decodeString(uint8Array.subarray(offset + 1, fzero), encoding);\n                offset = fzero + (encoding === 'utf-16le' ? 2 : 1);\n                output = { description, url: util.decodeString(uint8Array.subarray(offset, length), defaultEnc) };\n                break;\n            }\n            case 'WFD':\n            case 'WFED':\n                output = util.decodeString(uint8Array.subarray(offset + 1, util.findZero(uint8Array, offset + 1, length, encoding)), encoding);\n                break;\n            case 'MCDI': {\n                // Music CD identifier\n                output = uint8Array.subarray(0, length);\n                break;\n            }\n            default:\n                debug(`Warning: unsupported id3v2-tag-type: ${type}`);\n                break;\n        }\n        return output;\n    }\n    static readNullTerminatedString(uint8Array, encoding) {\n        let offset = encoding.bom ? 2 : 0;\n        const zeroIndex = util.findZero(uint8Array, offset, uint8Array.length, encoding.encoding);\n        const txt = uint8Array.subarray(offset, zeroIndex);\n        if (encoding.encoding === 'utf-16le') {\n            offset = zeroIndex + 2;\n        }\n        else {\n            offset = zeroIndex + 1;\n        }\n        return {\n            text: util.decodeString(txt, encoding.encoding),\n            len: offset\n        };\n    }\n    static fixPictureMimeType(pictureType) {\n        pictureType = pictureType.toLocaleLowerCase();\n        switch (pictureType) {\n            case 'jpg':\n                return 'image/jpeg';\n            case 'png':\n                return 'image/png';\n        }\n        return pictureType;\n    }\n    /**\n     * Converts TMCL (Musician credits list) or TIPL (Involved people list)\n     * @param entries\n     */\n    static functionList(entries) {\n        const res = {};\n        for (let i = 0; i + 1 < entries.length; i += 2) {\n            const names = entries[i + 1].split(',');\n            res[entries[i]] = res[entries[i]] ? res[entries[i]].concat(names) : names;\n        }\n        return res;\n    }\n    /**\n     * id3v2.4 defines that multiple T* values are separated by 0x00\n     * id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /\n     * @param tag - Tag name\n     * @param text - Concatenated tag value\n     * @returns Split tag value\n     */\n    splitValue(tag, text) {\n        let values;\n        if (this.major < 4) {\n            values = text.split(/\\x00/g);\n            if (values.length > 1) {\n                this.warningCollector.addWarning(`ID3v2.${this.major} ${tag} uses non standard null-separator.`);\n            }\n            else {\n                values = text.split(/\\//g);\n            }\n        }\n        else {\n            values = text.split(/\\x00/g);\n        }\n        return FrameParser.trimArray(values);\n    }\n    static trimArray(values) {\n        return values.map(value => value.replace(/\\x00+$/, '').trim());\n    }\n    static readIdentifierAndData(uint8Array, offset, length, encoding) {\n        const fzero = util.findZero(uint8Array, offset, length, encoding);\n        const id = util.decodeString(uint8Array.subarray(offset, fzero), encoding);\n        offset = fzero + FrameParser.getNullTerminatorLength(encoding);\n        return { id, data: uint8Array.subarray(offset, length) };\n    }\n    static getNullTerminatorLength(enc) {\n        return enc === 'utf-16le' ? 2 : 1;\n    }\n}\nexport class Id3v2ContentError extends makeUnexpectedFileContentError('id3v2') {\n}\nfunction makeUnexpectedMajorVersionError(majorVer) {\n    throw new Id3v2ContentError(`Unexpected majorVer: ${majorVer}`);\n}\n","import * as Token from 'token-types';\nimport * as util from '../common/Util.js';\nimport { FrameParser, Id3v2ContentError } from './FrameParser.js';\nimport { ExtendedHeader, ID3v2Header, UINT32SYNCSAFE } from './ID3v2Token.js';\nimport { textDecode } from '@borewit/text-codec';\nexport class ID3v2Parser {\n    constructor() {\n        this.tokenizer = undefined;\n        this.id3Header = undefined;\n        this.metadata = undefined;\n        this.headerType = undefined;\n        this.options = undefined;\n    }\n    static removeUnsyncBytes(buffer) {\n        let readI = 0;\n        let writeI = 0;\n        while (readI < buffer.length - 1) {\n            if (readI !== writeI) {\n                buffer[writeI] = buffer[readI];\n            }\n            readI += (buffer[readI] === 0xFF && buffer[readI + 1] === 0) ? 2 : 1;\n            writeI++;\n        }\n        if (readI < buffer.length) {\n            buffer[writeI++] = buffer[readI];\n        }\n        return buffer.subarray(0, writeI);\n    }\n    static getFrameHeaderLength(majorVer) {\n        switch (majorVer) {\n            case 2:\n                return 6;\n            case 3:\n            case 4:\n                return 10;\n            default:\n                throw makeUnexpectedMajorVersionError(majorVer);\n        }\n    }\n    static readFrameFlags(b) {\n        return {\n            status: {\n                tag_alter_preservation: util.getBit(b, 0, 6),\n                file_alter_preservation: util.getBit(b, 0, 5),\n                read_only: util.getBit(b, 0, 4)\n            },\n            format: {\n                grouping_identity: util.getBit(b, 1, 7),\n                compression: util.getBit(b, 1, 3),\n                encryption: util.getBit(b, 1, 2),\n                unsynchronisation: util.getBit(b, 1, 1),\n                data_length_indicator: util.getBit(b, 1, 0)\n            }\n        };\n    }\n    static readFrameData(uint8Array, frameHeader, majorVer, includeCovers, warningCollector) {\n        const frameParser = new FrameParser(majorVer, warningCollector);\n        switch (majorVer) {\n            case 2:\n                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);\n            case 3:\n            case 4:\n                if (frameHeader.flags?.format.unsynchronisation) {\n                    uint8Array = ID3v2Parser.removeUnsyncBytes(uint8Array);\n                }\n                if (frameHeader.flags?.format.data_length_indicator) {\n                    uint8Array = uint8Array.subarray(4, uint8Array.length);\n                }\n                return frameParser.readData(uint8Array, frameHeader.id, includeCovers);\n            default:\n                throw makeUnexpectedMajorVersionError(majorVer);\n        }\n    }\n    /**\n     * Create a combined tag key, of tag & description\n     * @param tag e.g.: COM\n     * @param description e.g. iTunPGAP\n     * @returns string e.g. COM:iTunPGAP\n     */\n    static makeDescriptionTagName(tag, description) {\n        return tag + (description ? `:${description}` : '');\n    }\n    async parse(metadata, tokenizer, options) {\n        this.tokenizer = tokenizer;\n        this.metadata = metadata;\n        this.options = options;\n        const id3Header = await this.tokenizer.readToken(ID3v2Header);\n        if (id3Header.fileIdentifier !== 'ID3') {\n            throw new Id3v2ContentError('expected ID3-header file-identifier \\'ID3\\' was not found');\n        }\n        this.id3Header = id3Header;\n        this.headerType = (`ID3v2.${id3Header.version.major}`);\n        return id3Header.flags.isExtendedHeader ? this.parseExtendedHeader() : this.parseId3Data(id3Header.size);\n    }\n    async parseExtendedHeader() {\n        const extendedHeader = await this.tokenizer.readToken(ExtendedHeader);\n        const dataRemaining = extendedHeader.size - ExtendedHeader.len;\n        return dataRemaining > 0 ? this.parseExtendedHeaderData(dataRemaining, extendedHeader.size) : this.parseId3Data(this.id3Header.size - extendedHeader.size);\n    }\n    async parseExtendedHeaderData(dataRemaining, extendedHeaderSize) {\n        await this.tokenizer.ignore(dataRemaining);\n        return this.parseId3Data(this.id3Header.size - extendedHeaderSize);\n    }\n    async parseId3Data(dataLen) {\n        const uint8Array = await this.tokenizer.readToken(new Token.Uint8ArrayType(dataLen));\n        for (const tag of this.parseMetadata(uint8Array)) {\n            switch (tag.id) {\n                case 'TXXX':\n                    if (tag.value) {\n                        await this.handleTag(tag, tag.value.text, () => tag.value.description);\n                    }\n                    break;\n                default:\n                    await (Array.isArray(tag.value) ? Promise.all(tag.value.map(value => this.addTag(tag.id, value))) : this.addTag(tag.id, tag.value));\n            }\n        }\n    }\n    async handleTag(tag, values, descriptor, resolveValue = value => value) {\n        await Promise.all(values.map(value => this.addTag(ID3v2Parser.makeDescriptionTagName(tag.id, descriptor(value)), resolveValue(value))));\n    }\n    async addTag(id, value) {\n        await this.metadata.addTag(this.headerType, id, value);\n    }\n    parseMetadata(data) {\n        let offset = 0;\n        const tags = [];\n        while (true) {\n            if (offset === data.length)\n                break;\n            const frameHeaderLength = ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major);\n            if (offset + frameHeaderLength > data.length) {\n                this.metadata.addWarning('Illegal ID3v2 tag length');\n                break;\n            }\n            const frameHeaderBytes = data.subarray(offset, offset + frameHeaderLength);\n            offset += frameHeaderLength;\n            const frameHeader = this.readFrameHeader(frameHeaderBytes, this.id3Header.version.major);\n            const frameDataBytes = data.subarray(offset, offset + frameHeader.length);\n            offset += frameHeader.length;\n            const values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers, this.metadata);\n            if (values) {\n                tags.push({ id: frameHeader.id, value: values });\n            }\n        }\n        return tags;\n    }\n    readFrameHeader(uint8Array, majorVer) {\n        let header;\n        switch (majorVer) {\n            case 2:\n                header = {\n                    id: textDecode(uint8Array.subarray(0, 3), 'ascii'),\n                    length: Token.UINT24_BE.get(uint8Array, 3)\n                };\n                if (!header.id.match(/[A-Z0-9]{3}/g)) {\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n                }\n                break;\n            case 3:\n            case 4:\n                header = {\n                    id: textDecode(uint8Array.subarray(0, 4), 'ascii'),\n                    length: (majorVer === 4 ? UINT32SYNCSAFE : Token.UINT32_BE).get(uint8Array, 4),\n                    flags: ID3v2Parser.readFrameFlags(uint8Array.subarray(8, 10))\n                };\n                if (!header.id.match(/[A-Z0-9]{4}/g)) {\n                    this.metadata.addWarning(`Invalid ID3v2.${this.id3Header.version.major} frame-header-ID: ${header.id}`);\n                }\n                break;\n            default:\n                throw makeUnexpectedMajorVersionError(majorVer);\n        }\n        return header;\n    }\n}\nfunction makeUnexpectedMajorVersionError(majorVer) {\n    throw new Id3v2ContentError(`Unexpected majorVer: ${majorVer}`);\n}\n"],"names":["debug","defaultEnc","parseGenreCode","code","match","Number","parseInt","FrameParser","constructor","major","warningCollector","this","readData","uint8Array","type","includeCovers","length","addWarning","encoding","bom","get","offset","output","nullTerminatorLength","getNullTerminatorLength","fzero","text","subarray","replace","error","Error","message","functionList","splitValue","map","v","origVal","genres","word","c","undefined","push","genre","parseGenre","reduce","acc","val","concat","Array","isArray","idAndData","readIdentifierAndData","description","id","data","pic","format","majorVer","Id3v2ContentError","makeUnexpectedMajorVersionError","fixPictureMimeType","syltHeader","len","result","descriptor","language","contentType","timeStampFormat","syncText","readSyllables","nullStr","readNullTerminatedString","timestamp","textHeader","descriptorStr","textStr","ufid","owner_identifier","identifier","priv","email","valueLen","rating","counter","mimeType","filename","url","zeroIndex","txt","pictureType","toLocaleLowerCase","entries","res","i","names","split","tag","values","trimArray","value","trim","enc","ID3v2Parser","tokenizer","id3Header","metadata","headerType","options","removeUnsyncBytes","buffer","readI","writeI","getFrameHeaderLength","readFrameFlags","b","status","tag_alter_preservation","file_alter_preservation","read_only","grouping_identity","compression","encryption","unsynchronisation","data_length_indicator","readFrameData","frameHeader","frameParser","flags","makeDescriptionTagName","parse","readToken","fileIdentifier","version","isExtendedHeader","parseExtendedHeader","parseId3Data","size","extendedHeader","dataRemaining","parseExtendedHeaderData","extendedHeaderSize","ignore","dataLen","parseMetadata","handleTag","Promise","all","addTag","resolveValue","tags","frameHeaderLength","frameHeaderBytes","readFrameHeader","frameDataBytes","skipCovers","header"],"sourceRoot":""}