{"version":3,"file":"748.5f22dc464350438cc450.js","mappings":"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","sources":["webpack://telegram-t/./node_modules/@tauri-apps/api/event.js","webpack://telegram-t/./node_modules/@tauri-apps/api/dpi.js","webpack://telegram-t/./node_modules/@tauri-apps/api/window.js","webpack://telegram-t/./node_modules/@tauri-apps/api/image.js"],"sourcesContent":["import { invoke, transformCallback } from './core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * The event system allows you to emit events to the backend and listen to events from it.\n *\n * This package is also accessible with `window.__TAURI__.event` when [`app.withGlobalTauri`](https://v2.tauri.app/reference/config/#withglobaltauri) in `tauri.conf.json` is set to `true`.\n * @module\n */\n/**\n * @since 1.1.0\n */\nvar TauriEvent;\n(function (TauriEvent) {\n    TauriEvent[\"WINDOW_RESIZED\"] = \"tauri://resize\";\n    TauriEvent[\"WINDOW_MOVED\"] = \"tauri://move\";\n    TauriEvent[\"WINDOW_CLOSE_REQUESTED\"] = \"tauri://close-requested\";\n    TauriEvent[\"WINDOW_DESTROYED\"] = \"tauri://destroyed\";\n    TauriEvent[\"WINDOW_FOCUS\"] = \"tauri://focus\";\n    TauriEvent[\"WINDOW_BLUR\"] = \"tauri://blur\";\n    TauriEvent[\"WINDOW_SCALE_FACTOR_CHANGED\"] = \"tauri://scale-change\";\n    TauriEvent[\"WINDOW_THEME_CHANGED\"] = \"tauri://theme-changed\";\n    TauriEvent[\"WINDOW_CREATED\"] = \"tauri://window-created\";\n    TauriEvent[\"WEBVIEW_CREATED\"] = \"tauri://webview-created\";\n    TauriEvent[\"DRAG_ENTER\"] = \"tauri://drag-enter\";\n    TauriEvent[\"DRAG_OVER\"] = \"tauri://drag-over\";\n    TauriEvent[\"DRAG_DROP\"] = \"tauri://drag-drop\";\n    TauriEvent[\"DRAG_LEAVE\"] = \"tauri://drag-leave\";\n})(TauriEvent || (TauriEvent = {}));\n/**\n * Unregister the event listener associated with the given name and id.\n *\n * @ignore\n * @param event The event name\n * @param eventId Event identifier\n * @returns\n */\nasync function _unlisten(event, eventId) {\n    window.__TAURI_EVENT_PLUGIN_INTERNALS__.unregisterListener(event, eventId);\n    await invoke('plugin:event|unlisten', {\n        event,\n        eventId\n    });\n}\n/**\n * Listen to an emitted event to any {@link EventTarget|target}.\n *\n * @example\n * ```typescript\n * import { listen } from '@tauri-apps/api/event';\n * const unlisten = await listen<string>('error', (event) => {\n *   console.log(`Got error, payload: ${event.payload}`);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @param options Event listening options.\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.0\n */\nasync function listen(event, handler, options) {\n    var _a;\n    const target = typeof (options === null || options === void 0 ? void 0 : options.target) === 'string'\n        ? { kind: 'AnyLabel', label: options.target }\n        : ((_a = options === null || options === void 0 ? void 0 : options.target) !== null && _a !== void 0 ? _a : { kind: 'Any' });\n    return invoke('plugin:event|listen', {\n        event,\n        target,\n        handler: transformCallback(handler)\n    }).then((eventId) => {\n        return async () => _unlisten(event, eventId);\n    });\n}\n/**\n * Listens once to an emitted event to any {@link EventTarget|target}.\n *\n * @example\n * ```typescript\n * import { once } from '@tauri-apps/api/event';\n * interface LoadedPayload {\n *   loggedIn: boolean,\n *   token: string\n * }\n * const unlisten = await once<LoadedPayload>('loaded', (event) => {\n *   console.log(`App is loaded, loggedIn: ${event.payload.loggedIn}, token: ${event.payload.token}`);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @param options Event listening options.\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.0\n */\nasync function once(event, handler, options) {\n    return listen(event, (eventData) => {\n        void _unlisten(event, eventData.id);\n        handler(eventData);\n    }, options);\n}\n/**\n * Emits an event to all {@link EventTarget|targets}.\n *\n * @example\n * ```typescript\n * import { emit } from '@tauri-apps/api/event';\n * await emit('frontend-loaded', { loggedIn: true, token: 'authToken' });\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param payload Event payload.\n *\n * @since 1.0.0\n */\nasync function emit(event, payload) {\n    await invoke('plugin:event|emit', {\n        event,\n        payload\n    });\n}\n/**\n * Emits an event to all {@link EventTarget|targets} matching the given target.\n *\n * @example\n * ```typescript\n * import { emitTo } from '@tauri-apps/api/event';\n * await emitTo('main', 'frontend-loaded', { loggedIn: true, token: 'authToken' });\n * ```\n *\n * @param target Label of the target Window/Webview/WebviewWindow or raw {@link EventTarget} object.\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param payload Event payload.\n *\n * @since 2.0.0\n */\nasync function emitTo(target, event, payload) {\n    const eventTarget = typeof target === 'string' ? { kind: 'AnyLabel', label: target } : target;\n    await invoke('plugin:event|emit_to', {\n        target: eventTarget,\n        event,\n        payload\n    });\n}\n\nexport { TauriEvent, emit, emitTo, listen, once };\n","import { SERIALIZE_TO_IPC_FN } from './core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * A size represented in logical pixels.\n * Logical pixels are scaled according to the window's DPI scale.\n * Most browser APIs (i.e. `MouseEvent`'s `clientX`) will return logical pixels.\n *\n * For logical-pixel-based position, see {@linkcode LogicalPosition}.\n *\n * @since 2.0.0\n */\nclass LogicalSize {\n    constructor(...args) {\n        this.type = 'Logical';\n        if (args.length === 1) {\n            if ('Logical' in args[0]) {\n                this.width = args[0].Logical.width;\n                this.height = args[0].Logical.height;\n            }\n            else {\n                this.width = args[0].width;\n                this.height = args[0].height;\n            }\n        }\n        else {\n            this.width = args[0];\n            this.height = args[1];\n        }\n    }\n    /**\n     * Converts the logical size to a physical one.\n     * @example\n     * ```typescript\n     * import { LogicalSize } from '@tauri-apps/api/dpi';\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     *\n     * const appWindow = getCurrentWindow();\n     * const factor = await appWindow.scaleFactor();\n     * const size = new LogicalSize(400, 500);\n     * const physical = size.toPhysical(factor);\n     * ```\n     *\n     * @since 2.0.0\n     */\n    toPhysical(scaleFactor) {\n        return new PhysicalSize(this.width * scaleFactor, this.height * scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            width: this.width,\n            height: this.height\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n * A size represented in physical pixels.\n *\n * Physical pixels represent actual screen pixels, and are DPI-independent.\n * For high-DPI windows, this means that any point in the window on the screen\n * will have a different position in logical pixels (@linkcode LogicalSize).\n *\n * For physical-pixel-based position, see {@linkcode PhysicalPosition}.\n *\n * @since 2.0.0\n */\nclass PhysicalSize {\n    constructor(...args) {\n        this.type = 'Physical';\n        if (args.length === 1) {\n            if ('Physical' in args[0]) {\n                this.width = args[0].Physical.width;\n                this.height = args[0].Physical.height;\n            }\n            else {\n                this.width = args[0].width;\n                this.height = args[0].height;\n            }\n        }\n        else {\n            this.width = args[0];\n            this.height = args[1];\n        }\n    }\n    /**\n     * Converts the physical size to a logical one.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const appWindow = getCurrentWindow();\n     * const factor = await appWindow.scaleFactor();\n     * const size = await appWindow.innerSize(); // PhysicalSize\n     * const logical = size.toLogical(factor);\n     * ```\n     */\n    toLogical(scaleFactor) {\n        return new LogicalSize(this.width / scaleFactor, this.height / scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            width: this.width,\n            height: this.height\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n * A size represented either in physical or in logical pixels.\n *\n * This type is basically a union type of {@linkcode LogicalSize} and {@linkcode PhysicalSize}\n * but comes in handy when using `tauri::Size` in Rust as an argument to a command, as this class\n * automatically serializes into a valid format so it can be deserialized correctly into `tauri::Size`\n *\n * So instead of\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * import { LogicalSize, PhysicalSize } from '@tauri-apps/api/dpi';\n *\n * const size: LogicalSize | PhysicalSize = someFunction(); // where someFunction returns either LogicalSize or PhysicalSize\n * const validSize = size instanceof LogicalSize\n *   ? { Logical: { width: size.width, height: size.height } }\n *   : { Physical: { width: size.width, height: size.height } }\n * await invoke(\"do_something_with_size\", { size: validSize });\n * ```\n *\n * You can just use {@linkcode Size}\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * import { LogicalSize, PhysicalSize, Size } from '@tauri-apps/api/dpi';\n *\n * const size: LogicalSize | PhysicalSize = someFunction(); // where someFunction returns either LogicalSize or PhysicalSize\n * const validSize = new Size(size);\n * await invoke(\"do_something_with_size\", { size: validSize });\n * ```\n *\n * @since 2.1.0\n */\nclass Size {\n    constructor(size) {\n        this.size = size;\n    }\n    toLogical(scaleFactor) {\n        return this.size instanceof LogicalSize\n            ? this.size\n            : this.size.toLogical(scaleFactor);\n    }\n    toPhysical(scaleFactor) {\n        return this.size instanceof PhysicalSize\n            ? this.size\n            : this.size.toPhysical(scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            [`${this.size.type}`]: {\n                width: this.size.width,\n                height: this.size.height\n            }\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n * A position represented in logical pixels.\n * For an explanation of what logical pixels are, see description of {@linkcode LogicalSize}.\n *\n * @since 2.0.0\n */\nclass LogicalPosition {\n    constructor(...args) {\n        this.type = 'Logical';\n        if (args.length === 1) {\n            if ('Logical' in args[0]) {\n                this.x = args[0].Logical.x;\n                this.y = args[0].Logical.y;\n            }\n            else {\n                this.x = args[0].x;\n                this.y = args[0].y;\n            }\n        }\n        else {\n            this.x = args[0];\n            this.y = args[1];\n        }\n    }\n    /**\n     * Converts the logical position to a physical one.\n     * @example\n     * ```typescript\n     * import { LogicalPosition } from '@tauri-apps/api/dpi';\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     *\n     * const appWindow = getCurrentWindow();\n     * const factor = await appWindow.scaleFactor();\n     * const position = new LogicalPosition(400, 500);\n     * const physical = position.toPhysical(factor);\n     * ```\n     *\n     * @since 2.0.0\n     */\n    toPhysical(scaleFactor) {\n        return new PhysicalPosition(this.x * scaleFactor, this.y * scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            x: this.x,\n            y: this.y\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n * A position represented in physical pixels.\n *\n * For an explanation of what physical pixels are, see description of {@linkcode PhysicalSize}.\n *\n * @since 2.0.0\n */\nclass PhysicalPosition {\n    constructor(...args) {\n        this.type = 'Physical';\n        if (args.length === 1) {\n            if ('Physical' in args[0]) {\n                this.x = args[0].Physical.x;\n                this.y = args[0].Physical.y;\n            }\n            else {\n                this.x = args[0].x;\n                this.y = args[0].y;\n            }\n        }\n        else {\n            this.x = args[0];\n            this.y = args[1];\n        }\n    }\n    /**\n     * Converts the physical position to a logical one.\n     * @example\n     * ```typescript\n     * import { PhysicalPosition } from '@tauri-apps/api/dpi';\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     *\n     * const appWindow = getCurrentWindow();\n     * const factor = await appWindow.scaleFactor();\n     * const position = new PhysicalPosition(400, 500);\n     * const physical = position.toLogical(factor);\n     * ```\n     *\n     * @since 2.0.0\n     */\n    toLogical(scaleFactor) {\n        return new LogicalPosition(this.x / scaleFactor, this.y / scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            x: this.x,\n            y: this.y\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n * A position represented either in physical or in logical pixels.\n *\n * This type is basically a union type of {@linkcode LogicalSize} and {@linkcode PhysicalSize}\n * but comes in handy when using `tauri::Position` in Rust as an argument to a command, as this class\n * automatically serializes into a valid format so it can be deserialized correctly into `tauri::Position`\n *\n * So instead of\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * import { LogicalPosition, PhysicalPosition } from '@tauri-apps/api/dpi';\n *\n * const position: LogicalPosition | PhysicalPosition = someFunction(); // where someFunction returns either LogicalPosition or PhysicalPosition\n * const validPosition = position instanceof LogicalPosition\n *   ? { Logical: { x: position.x, y: position.y } }\n *   : { Physical: { x: position.x, y: position.y } }\n * await invoke(\"do_something_with_position\", { position: validPosition });\n * ```\n *\n * You can just use {@linkcode Position}\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * import { LogicalPosition, PhysicalPosition, Position } from '@tauri-apps/api/dpi';\n *\n * const position: LogicalPosition | PhysicalPosition = someFunction(); // where someFunction returns either LogicalPosition or PhysicalPosition\n * const validPosition = new Position(position);\n * await invoke(\"do_something_with_position\", { position: validPosition });\n * ```\n *\n * @since 2.1.0\n */\nclass Position {\n    constructor(position) {\n        this.position = position;\n    }\n    toLogical(scaleFactor) {\n        return this.position instanceof LogicalPosition\n            ? this.position\n            : this.position.toLogical(scaleFactor);\n    }\n    toPhysical(scaleFactor) {\n        return this.position instanceof PhysicalPosition\n            ? this.position\n            : this.position.toPhysical(scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            [`${this.position.type}`]: {\n                x: this.position.x,\n                y: this.position.y\n            }\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n\nexport { LogicalPosition, LogicalSize, PhysicalPosition, PhysicalSize, Position, Size };\n","import { PhysicalPosition, PhysicalSize, Size, Position } from './dpi.js';\nexport { LogicalPosition, LogicalSize } from './dpi.js';\nimport { listen, once, emit, emitTo, TauriEvent } from './event.js';\nimport { invoke } from './core.js';\nimport { transformImage } from './image.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Provides APIs to create windows, communicate with other windows and manipulate the current window.\n *\n * #### Window events\n *\n * Events can be listened to using {@link Window.listen}:\n * ```typescript\n * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n * getCurrentWindow().listen(\"my-window-event\", ({ event, payload }) => { });\n * ```\n *\n * @module\n */\n/**\n * Attention type to request on a window.\n *\n * @since 1.0.0\n */\nvar UserAttentionType;\n(function (UserAttentionType) {\n    /**\n     * #### Platform-specific\n     * - **macOS:** Bounces the dock icon until the application is in focus.\n     * - **Windows:** Flashes both the window and the taskbar button until the application is in focus.\n     */\n    UserAttentionType[UserAttentionType[\"Critical\"] = 1] = \"Critical\";\n    /**\n     * #### Platform-specific\n     * - **macOS:** Bounces the dock icon once.\n     * - **Windows:** Flashes the taskbar button until the application is in focus.\n     */\n    UserAttentionType[UserAttentionType[\"Informational\"] = 2] = \"Informational\";\n})(UserAttentionType || (UserAttentionType = {}));\nclass CloseRequestedEvent {\n    constructor(event) {\n        this._preventDefault = false;\n        this.event = event.event;\n        this.id = event.id;\n    }\n    preventDefault() {\n        this._preventDefault = true;\n    }\n    isPreventDefault() {\n        return this._preventDefault;\n    }\n}\nvar ProgressBarStatus;\n(function (ProgressBarStatus) {\n    /**\n     * Hide progress bar.\n     */\n    ProgressBarStatus[\"None\"] = \"none\";\n    /**\n     * Normal state.\n     */\n    ProgressBarStatus[\"Normal\"] = \"normal\";\n    /**\n     * Indeterminate state. **Treated as Normal on Linux and macOS**\n     */\n    ProgressBarStatus[\"Indeterminate\"] = \"indeterminate\";\n    /**\n     * Paused state. **Treated as Normal on Linux**\n     */\n    ProgressBarStatus[\"Paused\"] = \"paused\";\n    /**\n     * Error state. **Treated as Normal on linux**\n     */\n    ProgressBarStatus[\"Error\"] = \"error\";\n})(ProgressBarStatus || (ProgressBarStatus = {}));\n/**\n * Get an instance of `Window` for the current window.\n *\n * @since 1.0.0\n */\nfunction getCurrentWindow() {\n    return new Window(window.__TAURI_INTERNALS__.metadata.currentWindow.label, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    });\n}\n/**\n * Gets a list of instances of `Window` for all available windows.\n *\n * @since 1.0.0\n */\nasync function getAllWindows() {\n    return invoke('plugin:window|get_all_windows').then((windows) => windows.map((w) => new Window(w, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    })));\n}\n/** @ignore */\n// events that are emitted right here instead of by the created window\nconst localTauriEvents = ['tauri://created', 'tauri://error'];\n/**\n * Create new window or get a handle to an existing one.\n *\n * Windows are identified by a *label*  a unique identifier that can be used to reference it later.\n * It may only contain alphanumeric characters `a-zA-Z` plus the following special characters `-`, `/`, `:` and `_`.\n *\n * @example\n * ```typescript\n * import { Window } from \"@tauri-apps/api/window\"\n *\n * const appWindow = new Window('theUniqueLabel');\n *\n * appWindow.once('tauri://created', function () {\n *  // window successfully created\n * });\n * appWindow.once('tauri://error', function (e) {\n *  // an error happened creating the window\n * });\n *\n * // emit an event to the backend\n * await appWindow.emit(\"some-event\", \"data\");\n * // listen to an event from the backend\n * const unlisten = await appWindow.listen(\"event-name\", e => {});\n * unlisten();\n * ```\n *\n * @since 2.0.0\n */\nclass Window {\n    /**\n     * Creates a new Window.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/api/window';\n     * const appWindow = new Window('my-label');\n     * appWindow.once('tauri://created', function () {\n     *  // window successfully created\n     * });\n     * appWindow.once('tauri://error', function (e) {\n     *  // an error happened creating the window\n     * });\n     * ```\n     *\n     * @param label The unique window label. Must be alphanumeric: `a-zA-Z-/:_`.\n     * @returns The {@link Window} instance to communicate with the window.\n     */\n    constructor(label, options = {}) {\n        var _a;\n        this.label = label;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.listeners = Object.create(null);\n        // @ts-expect-error `skip` is not a public API so it is not defined in WindowOptions\n        if (!(options === null || options === void 0 ? void 0 : options.skip)) {\n            invoke('plugin:window|create', {\n                options: {\n                    ...options,\n                    parent: typeof options.parent === 'string'\n                        ? options.parent\n                        : (_a = options.parent) === null || _a === void 0 ? void 0 : _a.label,\n                    label\n                }\n            })\n                .then(async () => this.emit('tauri://created'))\n                .catch(async (e) => this.emit('tauri://error', e));\n        }\n    }\n    /**\n     * Gets the Window associated with the given label.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/api/window';\n     * const mainWindow = Window.getByLabel('main');\n     * ```\n     *\n     * @param label The window label.\n     * @returns The Window instance to communicate with the window or null if the window doesn't exist.\n     */\n    static async getByLabel(label) {\n        var _a;\n        return (_a = (await getAllWindows()).find((w) => w.label === label)) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Get an instance of `Window` for the current window.\n     */\n    static getCurrent() {\n        return getCurrentWindow();\n    }\n    /**\n     * Gets a list of instances of `Window` for all available windows.\n     */\n    static async getAll() {\n        return getAllWindows();\n    }\n    /**\n     *  Gets the focused window.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/api/window';\n     * const focusedWindow = Window.getFocusedWindow();\n     * ```\n     *\n     * @returns The Window instance or `undefined` if there is not any focused window.\n     */\n    static async getFocusedWindow() {\n        for (const w of await getAllWindows()) {\n            if (await w.isFocused()) {\n                return w;\n            }\n        }\n        return null;\n    }\n    /**\n     * Listen to an emitted event on this window.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const unlisten = await getCurrentWindow().listen<string>('state-changed', (event) => {\n     *   console.log(`Got error: ${payload}`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async listen(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return () => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            };\n        }\n        return listen(event, handler, {\n            target: { kind: 'Window', label: this.label }\n        });\n    }\n    /**\n     * Listen to an emitted event on this window only once.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const unlisten = await getCurrentWindow().once<null>('initialized', (event) => {\n     *   console.log(`Window initialized!`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async once(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return () => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            };\n        }\n        return once(event, handler, {\n            target: { kind: 'Window', label: this.label }\n        });\n    }\n    /**\n     * Emits an event to all {@link EventTarget|targets}.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().emit('window-loaded', { loggedIn: true, token: 'authToken' });\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param payload Event payload.\n     */\n    async emit(event, payload) {\n        if (localTauriEvents.includes(event)) {\n            // eslint-disable-next-line\n            for (const handler of this.listeners[event] || []) {\n                handler({\n                    event,\n                    id: -1,\n                    payload\n                });\n            }\n            return;\n        }\n        return emit(event, payload);\n    }\n    /**\n     * Emits an event to all {@link EventTarget|targets} matching the given target.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().emit('main', 'window-loaded', { loggedIn: true, token: 'authToken' });\n     * ```\n     * @param target Label of the target Window/Webview/WebviewWindow or raw {@link EventTarget} object.\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param payload Event payload.\n     */\n    async emitTo(target, event, payload) {\n        if (localTauriEvents.includes(event)) {\n            // eslint-disable-next-line security/detect-object-injection\n            for (const handler of this.listeners[event] || []) {\n                handler({\n                    event,\n                    id: -1,\n                    payload\n                });\n            }\n            return;\n        }\n        return emitTo(target, event, payload);\n    }\n    /** @ignore */\n    _handleTauriEvent(event, handler) {\n        if (localTauriEvents.includes(event)) {\n            if (!(event in this.listeners)) {\n                // eslint-disable-next-line\n                this.listeners[event] = [handler];\n            }\n            else {\n                // eslint-disable-next-line\n                this.listeners[event].push(handler);\n            }\n            return true;\n        }\n        return false;\n    }\n    // Getters\n    /**\n     * The scale factor that can be used to map physical pixels to logical pixels.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const factor = await getCurrentWindow().scaleFactor();\n     * ```\n     *\n     * @returns The window's monitor scale factor.\n     */\n    async scaleFactor() {\n        return invoke('plugin:window|scale_factor', {\n            label: this.label\n        });\n    }\n    /**\n     * The position of the top-left hand corner of the window's client area relative to the top-left hand corner of the desktop.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const position = await getCurrentWindow().innerPosition();\n     * ```\n     *\n     * @returns The window's inner position.\n     */\n    async innerPosition() {\n        return invoke('plugin:window|inner_position', {\n            label: this.label\n        }).then((p) => new PhysicalPosition(p));\n    }\n    /**\n     * The position of the top-left hand corner of the window relative to the top-left hand corner of the desktop.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const position = await getCurrentWindow().outerPosition();\n     * ```\n     *\n     * @returns The window's outer position.\n     */\n    async outerPosition() {\n        return invoke('plugin:window|outer_position', {\n            label: this.label\n        }).then((p) => new PhysicalPosition(p));\n    }\n    /**\n     * The physical size of the window's client area.\n     * The client area is the content of the window, excluding the title bar and borders.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const size = await getCurrentWindow().innerSize();\n     * ```\n     *\n     * @returns The window's inner size.\n     */\n    async innerSize() {\n        return invoke('plugin:window|inner_size', {\n            label: this.label\n        }).then((s) => new PhysicalSize(s));\n    }\n    /**\n     * The physical size of the entire window.\n     * These dimensions include the title bar and borders. If you don't want that (and you usually don't), use inner_size instead.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const size = await getCurrentWindow().outerSize();\n     * ```\n     *\n     * @returns The window's outer size.\n     */\n    async outerSize() {\n        return invoke('plugin:window|outer_size', {\n            label: this.label\n        }).then((s) => new PhysicalSize(s));\n    }\n    /**\n     * Gets the window's current fullscreen state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const fullscreen = await getCurrentWindow().isFullscreen();\n     * ```\n     *\n     * @returns Whether the window is in fullscreen mode or not.\n     */\n    async isFullscreen() {\n        return invoke('plugin:window|is_fullscreen', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current minimized state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const minimized = await getCurrentWindow().isMinimized();\n     * ```\n     */\n    async isMinimized() {\n        return invoke('plugin:window|is_minimized', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current maximized state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const maximized = await getCurrentWindow().isMaximized();\n     * ```\n     *\n     * @returns Whether the window is maximized or not.\n     */\n    async isMaximized() {\n        return invoke('plugin:window|is_maximized', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current focus state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const focused = await getCurrentWindow().isFocused();\n     * ```\n     *\n     * @returns Whether the window is focused or not.\n     */\n    async isFocused() {\n        return invoke('plugin:window|is_focused', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current decorated state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const decorated = await getCurrentWindow().isDecorated();\n     * ```\n     *\n     * @returns Whether the window is decorated or not.\n     */\n    async isDecorated() {\n        return invoke('plugin:window|is_decorated', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current resizable state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const resizable = await getCurrentWindow().isResizable();\n     * ```\n     *\n     * @returns Whether the window is resizable or not.\n     */\n    async isResizable() {\n        return invoke('plugin:window|is_resizable', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's native maximize button state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const maximizable = await getCurrentWindow().isMaximizable();\n     * ```\n     *\n     * @returns Whether the window's native maximize button is enabled or not.\n     */\n    async isMaximizable() {\n        return invoke('plugin:window|is_maximizable', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's native minimize button state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const minimizable = await getCurrentWindow().isMinimizable();\n     * ```\n     *\n     * @returns Whether the window's native minimize button is enabled or not.\n     */\n    async isMinimizable() {\n        return invoke('plugin:window|is_minimizable', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's native close button state.\n     *\n     * #### Platform-specific\n     *\n     * - **iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const closable = await getCurrentWindow().isClosable();\n     * ```\n     *\n     * @returns Whether the window's native close button is enabled or not.\n     */\n    async isClosable() {\n        return invoke('plugin:window|is_closable', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current visible state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const visible = await getCurrentWindow().isVisible();\n     * ```\n     *\n     * @returns Whether the window is visible or not.\n     */\n    async isVisible() {\n        return invoke('plugin:window|is_visible', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current title.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const title = await getCurrentWindow().title();\n     * ```\n     */\n    async title() {\n        return invoke('plugin:window|title', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current theme.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Theme was introduced on macOS 10.14. Returns `light` on macOS 10.13 and below.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const theme = await getCurrentWindow().theme();\n     * ```\n     *\n     * @returns The window theme.\n     */\n    async theme() {\n        return invoke('plugin:window|theme', {\n            label: this.label\n        });\n    }\n    /**\n     * Whether the window is configured to be always on top of other windows or not.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const alwaysOnTop = await getCurrentWindow().isAlwaysOnTop();\n     * ```\n     *\n     * @returns Whether the window is visible or not.\n     */\n    async isAlwaysOnTop() {\n        return invoke('plugin:window|is_always_on_top', {\n            label: this.label\n        });\n    }\n    // Setters\n    /**\n     * Centers the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().center();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async center() {\n        return invoke('plugin:window|center', {\n            label: this.label\n        });\n    }\n    /**\n     *  Requests user attention to the window, this has no effect if the application\n     * is already focused. How requesting for user attention manifests is platform dependent,\n     * see `UserAttentionType` for details.\n     *\n     * Providing `null` will unset the request for user attention. Unsetting the request for\n     * user attention might not be done automatically by the WM when the window receives input.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** `null` has no effect.\n     * - **Linux:** Urgency levels have the same effect.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().requestUserAttention();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async requestUserAttention(requestType) {\n        let requestType_ = null;\n        if (requestType) {\n            if (requestType === UserAttentionType.Critical) {\n                requestType_ = { type: 'Critical' };\n            }\n            else {\n                requestType_ = { type: 'Informational' };\n            }\n        }\n        return invoke('plugin:window|request_user_attention', {\n            label: this.label,\n            value: requestType_\n        });\n    }\n    /**\n     * Updates the window resizable flag.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setResizable(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setResizable(resizable) {\n        return invoke('plugin:window|set_resizable', {\n            label: this.label,\n            value: resizable\n        });\n    }\n    /**\n     * Enable or disable the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setEnabled(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async setEnabled(enabled) {\n        return invoke('plugin:window|set_enabled', {\n            label: this.label,\n            value: enabled\n        });\n    }\n    /**\n     * Whether the window is enabled or disabled.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setEnabled(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async isEnabled() {\n        return invoke('plugin:window|is_enabled', {\n            label: this.label\n        });\n    }\n    /**\n     * Sets whether the window's native maximize button is enabled or not.\n     * If resizable is set to false, this setting is ignored.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Disables the \"zoom\" button in the window titlebar, which is also used to enter fullscreen mode.\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setMaximizable(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMaximizable(maximizable) {\n        return invoke('plugin:window|set_maximizable', {\n            label: this.label,\n            value: maximizable\n        });\n    }\n    /**\n     * Sets whether the window's native minimize button is enabled or not.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setMinimizable(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMinimizable(minimizable) {\n        return invoke('plugin:window|set_minimizable', {\n            label: this.label,\n            value: minimizable\n        });\n    }\n    /**\n     * Sets whether the window's native close button is enabled or not.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux:** GTK+ will do its best to convince the window manager not to show a close button. Depending on the system, this function may not have any effect when called on a window that is already visible\n     * - **iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setClosable(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setClosable(closable) {\n        return invoke('plugin:window|set_closable', {\n            label: this.label,\n            value: closable\n        });\n    }\n    /**\n     * Sets the window title.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setTitle('Tauri');\n     * ```\n     *\n     * @param title The new title\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setTitle(title) {\n        return invoke('plugin:window|set_title', {\n            label: this.label,\n            value: title\n        });\n    }\n    /**\n     * Maximizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().maximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async maximize() {\n        return invoke('plugin:window|maximize', {\n            label: this.label\n        });\n    }\n    /**\n     * Unmaximizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().unmaximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async unmaximize() {\n        return invoke('plugin:window|unmaximize', {\n            label: this.label\n        });\n    }\n    /**\n     * Toggles the window maximized state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().toggleMaximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async toggleMaximize() {\n        return invoke('plugin:window|toggle_maximize', {\n            label: this.label\n        });\n    }\n    /**\n     * Minimizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().minimize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async minimize() {\n        return invoke('plugin:window|minimize', {\n            label: this.label\n        });\n    }\n    /**\n     * Unminimizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().unminimize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async unminimize() {\n        return invoke('plugin:window|unminimize', {\n            label: this.label\n        });\n    }\n    /**\n     * Sets the window visibility to true.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().show();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async show() {\n        return invoke('plugin:window|show', {\n            label: this.label\n        });\n    }\n    /**\n     * Sets the window visibility to false.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().hide();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async hide() {\n        return invoke('plugin:window|hide', {\n            label: this.label\n        });\n    }\n    /**\n     * Closes the window.\n     *\n     * Note this emits a closeRequested event so you can intercept it. To force window close, use {@link Window.destroy}.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().close();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async close() {\n        return invoke('plugin:window|close', {\n            label: this.label\n        });\n    }\n    /**\n     * Destroys the window. Behaves like {@link Window.close} but forces the window close instead of emitting a closeRequested event.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().destroy();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async destroy() {\n        return invoke('plugin:window|destroy', {\n            label: this.label\n        });\n    }\n    /**\n     * Whether the window should have borders and bars.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setDecorations(false);\n     * ```\n     *\n     * @param decorations Whether the window should have borders and bars.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setDecorations(decorations) {\n        return invoke('plugin:window|set_decorations', {\n            label: this.label,\n            value: decorations\n        });\n    }\n    /**\n     * Whether or not the window should have shadow.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows:**\n     *   - `false` has no effect on decorated window, shadows are always ON.\n     *   - `true` will make undecorated window have a 1px white border,\n     * and on Windows 11, it will have a rounded corners.\n     * - **Linux:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setShadow(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setShadow(enable) {\n        return invoke('plugin:window|set_shadow', {\n            label: this.label,\n            value: enable\n        });\n    }\n    /**\n     * Set window effects.\n     */\n    async setEffects(effects) {\n        return invoke('plugin:window|set_effects', {\n            label: this.label,\n            value: effects\n        });\n    }\n    /**\n     * Clear any applied effects if possible.\n     */\n    async clearEffects() {\n        return invoke('plugin:window|set_effects', {\n            label: this.label,\n            value: null\n        });\n    }\n    /**\n     * Whether the window should always be on top of other windows.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setAlwaysOnTop(true);\n     * ```\n     *\n     * @param alwaysOnTop Whether the window should always be on top of other windows or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setAlwaysOnTop(alwaysOnTop) {\n        return invoke('plugin:window|set_always_on_top', {\n            label: this.label,\n            value: alwaysOnTop\n        });\n    }\n    /**\n     * Whether the window should always be below other windows.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setAlwaysOnBottom(true);\n     * ```\n     *\n     * @param alwaysOnBottom Whether the window should always be below other windows or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setAlwaysOnBottom(alwaysOnBottom) {\n        return invoke('plugin:window|set_always_on_bottom', {\n            label: this.label,\n            value: alwaysOnBottom\n        });\n    }\n    /**\n     * Prevents the window contents from being captured by other apps.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setContentProtected(true);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setContentProtected(protected_) {\n        return invoke('plugin:window|set_content_protected', {\n            label: this.label,\n            value: protected_\n        });\n    }\n    /**\n     * Resizes the window with a new inner size.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, LogicalSize } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setSize(new LogicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSize(size) {\n        return invoke('plugin:window|set_size', {\n            label: this.label,\n            value: size instanceof Size ? size : new Size(size)\n        });\n    }\n    /**\n     * Sets the window minimum inner size. If the `size` argument is not provided, the constraint is unset.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, PhysicalSize } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setMinSize(new PhysicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMinSize(size) {\n        return invoke('plugin:window|set_min_size', {\n            label: this.label,\n            value: size instanceof Size ? size : size ? new Size(size) : null\n        });\n    }\n    /**\n     * Sets the window maximum inner size. If the `size` argument is undefined, the constraint is unset.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, LogicalSize } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setMaxSize(new LogicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMaxSize(size) {\n        return invoke('plugin:window|set_max_size', {\n            label: this.label,\n            value: size instanceof Size ? size : size ? new Size(size) : null\n        });\n    }\n    /**\n     * Sets the window inner size constraints.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setSizeConstraints({ minWidth: 300 });\n     * ```\n     *\n     * @param constraints The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSizeConstraints(constraints) {\n        function logical(pixel) {\n            return pixel ? { Logical: pixel } : null;\n        }\n        return invoke('plugin:window|set_size_constraints', {\n            label: this.label,\n            value: {\n                minWidth: logical(constraints === null || constraints === void 0 ? void 0 : constraints.minWidth),\n                minHeight: logical(constraints === null || constraints === void 0 ? void 0 : constraints.minHeight),\n                maxWidth: logical(constraints === null || constraints === void 0 ? void 0 : constraints.maxWidth),\n                maxHeight: logical(constraints === null || constraints === void 0 ? void 0 : constraints.maxHeight)\n            }\n        });\n    }\n    /**\n     * Sets the window outer position.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, LogicalPosition } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setPosition(new LogicalPosition(600, 500));\n     * ```\n     *\n     * @param position The new position, in logical or physical pixels.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setPosition(position) {\n        return invoke('plugin:window|set_position', {\n            label: this.label,\n            value: position instanceof Position ? position : new Position(position)\n        });\n    }\n    /**\n     * Sets the window fullscreen state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setFullscreen(true);\n     * ```\n     *\n     * @param fullscreen Whether the window should go to fullscreen or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setFullscreen(fullscreen) {\n        return invoke('plugin:window|set_fullscreen', {\n            label: this.label,\n            value: fullscreen\n        });\n    }\n    /**\n     * On macOS, Toggles a fullscreen mode that doesn’t require a new macOS space. Returns a boolean indicating whether the transition was successful (this won’t work if the window was already in the native fullscreen).\n     * This is how fullscreen used to work on macOS in versions before Lion. And allows the user to have a fullscreen window without using another space or taking control over the entire monitor.\n     *\n     * On other platforms, this is the same as {@link Window.setFullscreen}.\n     *\n     * @param fullscreen Whether the window should go to simple fullscreen or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSimpleFullscreen(fullscreen) {\n        return invoke('plugin:window|set_simple_fullscreen', {\n            label: this.label,\n            value: fullscreen\n        });\n    }\n    /**\n     * Bring the window to front and focus.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setFocus();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setFocus() {\n        return invoke('plugin:window|set_focus', {\n            label: this.label\n        });\n    }\n    /**\n     * Sets whether the window can be focused.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS**: If the window is already focused, it is not possible to unfocus it after calling `set_focusable(false)`.\n     *   In this case, you might consider calling {@link Window.setFocus} but it will move the window to the back i.e. at the bottom in terms of z-order.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setFocusable(true);\n     * ```\n     *\n     * @param focusable Whether the window can be focused.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setFocusable(focusable) {\n        return invoke('plugin:window|set_focusable', {\n            label: this.label,\n            value: focusable\n        });\n    }\n    /**\n     * Sets the window icon.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setIcon('/tauri/awesome.png');\n     * ```\n     *\n     * Note that you may need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     *\n     * @param icon Icon bytes or path to the icon file.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setIcon(icon) {\n        return invoke('plugin:window|set_icon', {\n            label: this.label,\n            value: transformImage(icon)\n        });\n    }\n    /**\n     * Whether the window icon should be hidden from the taskbar or not.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Unsupported.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setSkipTaskbar(true);\n     * ```\n     *\n     * @param skip true to hide window icon, false to show it.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSkipTaskbar(skip) {\n        return invoke('plugin:window|set_skip_taskbar', {\n            label: this.label,\n            value: skip\n        });\n    }\n    /**\n     * Grabs the cursor, preventing it from leaving the window.\n     *\n     * There's no guarantee that the cursor will be hidden. You should\n     * hide it by yourself if you want so.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux:** Unsupported.\n     * - **macOS:** This locks the cursor in a fixed location, which looks visually awkward.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setCursorGrab(true);\n     * ```\n     *\n     * @param grab `true` to grab the cursor icon, `false` to release it.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorGrab(grab) {\n        return invoke('plugin:window|set_cursor_grab', {\n            label: this.label,\n            value: grab\n        });\n    }\n    /**\n     * Modifies the cursor's visibility.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows:** The cursor is only hidden within the confines of the window.\n     * - **macOS:** The cursor is hidden as long as the window has input focus, even if the cursor is\n     *   outside of the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setCursorVisible(false);\n     * ```\n     *\n     * @param visible If `false`, this will hide the cursor. If `true`, this will show the cursor.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorVisible(visible) {\n        return invoke('plugin:window|set_cursor_visible', {\n            label: this.label,\n            value: visible\n        });\n    }\n    /**\n     * Modifies the cursor icon of the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setCursorIcon('help');\n     * ```\n     *\n     * @param icon The new cursor icon.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorIcon(icon) {\n        return invoke('plugin:window|set_cursor_icon', {\n            label: this.label,\n            value: icon\n        });\n    }\n    /**\n     * Sets the window background color.\n     *\n     * #### Platform-specific:\n     *\n     * - **Windows:** alpha channel is ignored.\n     * - **iOS / Android:** Unsupported.\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.1.0\n     */\n    async setBackgroundColor(color) {\n        return invoke('plugin:window|set_background_color', { color });\n    }\n    /**\n     * Changes the position of the cursor in window coordinates.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, LogicalPosition } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setCursorPosition(new LogicalPosition(600, 300));\n     * ```\n     *\n     * @param position The new cursor position.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorPosition(position) {\n        return invoke('plugin:window|set_cursor_position', {\n            label: this.label,\n            value: position instanceof Position ? position : new Position(position)\n        });\n    }\n    /**\n     * Changes the cursor events behavior.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setIgnoreCursorEvents(true);\n     * ```\n     *\n     * @param ignore `true` to ignore the cursor events; `false` to process them as usual.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setIgnoreCursorEvents(ignore) {\n        return invoke('plugin:window|set_ignore_cursor_events', {\n            label: this.label,\n            value: ignore\n        });\n    }\n    /**\n     * Starts dragging the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().startDragging();\n     * ```\n     *\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async startDragging() {\n        return invoke('plugin:window|start_dragging', {\n            label: this.label\n        });\n    }\n    /**\n     * Starts resize-dragging the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().startResizeDragging();\n     * ```\n     *\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async startResizeDragging(direction) {\n        return invoke('plugin:window|start_resize_dragging', {\n            label: this.label,\n            value: direction\n        });\n    }\n    /**\n     * Sets the badge count. It is app wide and not specific to this window.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows**: Unsupported. Use @{linkcode Window.setOverlayIcon} instead.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setBadgeCount(5);\n     * ```\n     *\n     * @param count The badge count. Use `undefined` to remove the badge.\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async setBadgeCount(count) {\n        return invoke('plugin:window|set_badge_count', {\n            label: this.label,\n            value: count\n        });\n    }\n    /**\n     * Sets the badge cont **macOS only**.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setBadgeLabel(\"Hello\");\n     * ```\n     *\n     * @param label The badge label. Use `undefined` to remove the badge.\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async setBadgeLabel(label) {\n        return invoke('plugin:window|set_badge_label', {\n            label: this.label,\n            value: label\n        });\n    }\n    /**\n     * Sets the overlay icon. **Windows only**\n     * The overlay icon can be set for every window.\n     *\n     *\n     * Note that you may need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     *\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setOverlayIcon(\"/tauri/awesome.png\");\n     * ```\n     *\n     * @param icon Icon bytes or path to the icon file. Use `undefined` to remove the overlay icon.\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async setOverlayIcon(icon) {\n        return invoke('plugin:window|set_overlay_icon', {\n            label: this.label,\n            value: icon ? transformImage(icon) : undefined\n        });\n    }\n    /**\n     * Sets the taskbar progress state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / macOS**: Progress bar is app-wide and not specific to this window.\n     * - **Linux**: Only supported desktop environments with `libunity` (e.g. GNOME).\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, ProgressBarStatus } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setProgressBar({\n     *   status: ProgressBarStatus.Normal,\n     *   progress: 50,\n     * });\n     * ```\n     *\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async setProgressBar(state) {\n        return invoke('plugin:window|set_progress_bar', {\n            label: this.label,\n            value: state\n        });\n    }\n    /**\n     * Sets whether the window should be visible on all workspaces or virtual desktops.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows / iOS / Android:** Unsupported.\n     *\n     * @since 2.0.0\n     */\n    async setVisibleOnAllWorkspaces(visible) {\n        return invoke('plugin:window|set_visible_on_all_workspaces', {\n            label: this.label,\n            value: visible\n        });\n    }\n    /**\n     * Sets the title bar style. **macOS only**.\n     *\n     * @since 2.0.0\n     */\n    async setTitleBarStyle(style) {\n        return invoke('plugin:window|set_title_bar_style', {\n            label: this.label,\n            value: style\n        });\n    }\n    /**\n     * Set window theme, pass in `null` or `undefined` to follow system theme\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / macOS**: Theme is app-wide and not specific to this window.\n     * - **iOS / Android:** Unsupported.\n     *\n     * @since 2.0.0\n     */\n    async setTheme(theme) {\n        return invoke('plugin:window|set_theme', {\n            label: this.label,\n            value: theme\n        });\n    }\n    // Listeners\n    /**\n     * Listen to window resize.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onResized(({ payload: size }) => {\n     *  console.log('Window resized', size);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onResized(handler) {\n        return this.listen(TauriEvent.WINDOW_RESIZED, (e) => {\n            e.payload = new PhysicalSize(e.payload);\n            handler(e);\n        });\n    }\n    /**\n     * Listen to window move.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onMoved(({ payload: position }) => {\n     *  console.log('Window moved', position);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onMoved(handler) {\n        return this.listen(TauriEvent.WINDOW_MOVED, (e) => {\n            e.payload = new PhysicalPosition(e.payload);\n            handler(e);\n        });\n    }\n    /**\n     * Listen to window close requested. Emitted when the user requests to closes the window.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * import { confirm } from '@tauri-apps/api/dialog';\n     * const unlisten = await getCurrentWindow().onCloseRequested(async (event) => {\n     *   const confirmed = await confirm('Are you sure?');\n     *   if (!confirmed) {\n     *     // user did not confirm closing the window; let's prevent it\n     *     event.preventDefault();\n     *   }\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onCloseRequested(handler) {\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        return this.listen(TauriEvent.WINDOW_CLOSE_REQUESTED, async (event) => {\n            const evt = new CloseRequestedEvent(event);\n            await handler(evt);\n            if (!evt.isPreventDefault()) {\n                await this.destroy();\n            }\n        });\n    }\n    /**\n     * Listen to a file drop event.\n     * The listener is triggered when the user hovers the selected files on the webview,\n     * drops the files or cancels the operation.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/webview\";\n     * const unlisten = await getCurrentWindow().onDragDropEvent((event) => {\n     *  if (event.payload.type === 'over') {\n     *    console.log('User hovering', event.payload.position);\n     *  } else if (event.payload.type === 'drop') {\n     *    console.log('User dropped', event.payload.paths);\n     *  } else {\n     *    console.log('File drop cancelled');\n     *  }\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onDragDropEvent(handler) {\n        const unlistenDrag = await this.listen(TauriEvent.DRAG_ENTER, (event) => {\n            handler({\n                ...event,\n                payload: {\n                    type: 'enter',\n                    paths: event.payload.paths,\n                    position: new PhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenDragOver = await this.listen(TauriEvent.DRAG_OVER, (event) => {\n            handler({\n                ...event,\n                payload: {\n                    type: 'over',\n                    position: new PhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenDrop = await this.listen(TauriEvent.DRAG_DROP, (event) => {\n            handler({\n                ...event,\n                payload: {\n                    type: 'drop',\n                    paths: event.payload.paths,\n                    position: new PhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenCancel = await this.listen(TauriEvent.DRAG_LEAVE, (event) => {\n            handler({ ...event, payload: { type: 'leave' } });\n        });\n        return () => {\n            unlistenDrag();\n            unlistenDrop();\n            unlistenDragOver();\n            unlistenCancel();\n        };\n    }\n    /**\n     * Listen to window focus change.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onFocusChanged(({ payload: focused }) => {\n     *  console.log('Focus changed, window is focused? ' + focused);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onFocusChanged(handler) {\n        const unlistenFocus = await this.listen(TauriEvent.WINDOW_FOCUS, (event) => {\n            handler({ ...event, payload: true });\n        });\n        const unlistenBlur = await this.listen(TauriEvent.WINDOW_BLUR, (event) => {\n            handler({ ...event, payload: false });\n        });\n        return () => {\n            unlistenFocus();\n            unlistenBlur();\n        };\n    }\n    /**\n     * Listen to window scale change. Emitted when the window's scale factor has changed.\n     * The following user actions can cause DPI changes:\n     * - Changing the display's resolution.\n     * - Changing the display's scale factor (e.g. in Control Panel on Windows).\n     * - Moving the window to a display with a different scale factor.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onScaleChanged(({ payload }) => {\n     *  console.log('Scale changed', payload.scaleFactor, payload.size);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onScaleChanged(handler) {\n        return this.listen(TauriEvent.WINDOW_SCALE_FACTOR_CHANGED, handler);\n    }\n    /**\n     * Listen to the system theme change.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onThemeChanged(({ payload: theme }) => {\n     *  console.log('New theme: ' + theme);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onThemeChanged(handler) {\n        return this.listen(TauriEvent.WINDOW_THEME_CHANGED, handler);\n    }\n}\n/**\n * Background throttling policy\n *\n * @since 2.0.0\n */\nvar BackgroundThrottlingPolicy;\n(function (BackgroundThrottlingPolicy) {\n    BackgroundThrottlingPolicy[\"Disabled\"] = \"disabled\";\n    BackgroundThrottlingPolicy[\"Throttle\"] = \"throttle\";\n    BackgroundThrottlingPolicy[\"Suspend\"] = \"suspend\";\n})(BackgroundThrottlingPolicy || (BackgroundThrottlingPolicy = {}));\n/**\n * Platform-specific window effects\n *\n * @since 2.0.0\n */\nvar Effect;\n(function (Effect) {\n    /**\n     * A default material appropriate for the view's effectiveAppearance.  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. You should instead choose an appropriate semantic material.\n     */\n    Effect[\"AppearanceBased\"] = \"appearanceBased\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */\n    Effect[\"Light\"] = \"light\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */\n    Effect[\"Dark\"] = \"dark\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */\n    Effect[\"MediumLight\"] = \"mediumLight\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */\n    Effect[\"UltraDark\"] = \"ultraDark\";\n    /**\n     *  **macOS 10.10+**\n     */\n    Effect[\"Titlebar\"] = \"titlebar\";\n    /**\n     *  **macOS 10.10+**\n     */\n    Effect[\"Selection\"] = \"selection\";\n    /**\n     *  **macOS 10.11+**\n     */\n    Effect[\"Menu\"] = \"menu\";\n    /**\n     *  **macOS 10.11+**\n     */\n    Effect[\"Popover\"] = \"popover\";\n    /**\n     *  **macOS 10.11+**\n     */\n    Effect[\"Sidebar\"] = \"sidebar\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"HeaderView\"] = \"headerView\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"Sheet\"] = \"sheet\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"WindowBackground\"] = \"windowBackground\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"HudWindow\"] = \"hudWindow\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"FullScreenUI\"] = \"fullScreenUI\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"Tooltip\"] = \"tooltip\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"ContentBackground\"] = \"contentBackground\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"UnderWindowBackground\"] = \"underWindowBackground\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"UnderPageBackground\"] = \"underPageBackground\";\n    /**\n     *  **Windows 11 Only**\n     */\n    Effect[\"Mica\"] = \"mica\";\n    /**\n     * **Windows 7/10/11(22H1) Only**\n     *\n     * #### Notes\n     *\n     * This effect has bad performance when resizing/dragging the window on Windows 11 build 22621.\n     */\n    Effect[\"Blur\"] = \"blur\";\n    /**\n     * **Windows 10/11**\n     *\n     * #### Notes\n     *\n     * This effect has bad performance when resizing/dragging the window on Windows 10 v1903+ and Windows 11 build 22000.\n     */\n    Effect[\"Acrylic\"] = \"acrylic\";\n    /**\n     * Tabbed effect that matches the system dark perefence **Windows 11 Only**\n     */\n    Effect[\"Tabbed\"] = \"tabbed\";\n    /**\n     * Tabbed effect with dark mode but only if dark mode is enabled on the system **Windows 11 Only**\n     */\n    Effect[\"TabbedDark\"] = \"tabbedDark\";\n    /**\n     * Tabbed effect with light mode **Windows 11 Only**\n     */\n    Effect[\"TabbedLight\"] = \"tabbedLight\";\n})(Effect || (Effect = {}));\n/**\n * Window effect state **macOS only**\n *\n * @see https://developer.apple.com/documentation/appkit/nsvisualeffectview/state\n *\n * @since 2.0.0\n */\nvar EffectState;\n(function (EffectState) {\n    /**\n     *  Make window effect state follow the window's active state **macOS only**\n     */\n    EffectState[\"FollowsWindowActiveState\"] = \"followsWindowActiveState\";\n    /**\n     *  Make window effect state always active **macOS only**\n     */\n    EffectState[\"Active\"] = \"active\";\n    /**\n     *  Make window effect state always inactive **macOS only**\n     */\n    EffectState[\"Inactive\"] = \"inactive\";\n})(EffectState || (EffectState = {}));\nfunction mapMonitor(m) {\n    return m === null\n        ? null\n        : {\n            name: m.name,\n            scaleFactor: m.scaleFactor,\n            position: new PhysicalPosition(m.position),\n            size: new PhysicalSize(m.size),\n            workArea: {\n                position: new PhysicalPosition(m.workArea.position),\n                size: new PhysicalSize(m.workArea.size)\n            }\n        };\n}\n/**\n * Returns the monitor on which the window currently resides.\n * Returns `null` if current monitor can't be detected.\n * @example\n * ```typescript\n * import { currentMonitor } from '@tauri-apps/api/window';\n * const monitor = await currentMonitor();\n * ```\n *\n * @since 1.0.0\n */\nasync function currentMonitor() {\n    return invoke('plugin:window|current_monitor').then(mapMonitor);\n}\n/**\n * Returns the primary monitor of the system.\n * Returns `null` if it can't identify any monitor as a primary one.\n * @example\n * ```typescript\n * import { primaryMonitor } from '@tauri-apps/api/window';\n * const monitor = await primaryMonitor();\n * ```\n *\n * @since 1.0.0\n */\nasync function primaryMonitor() {\n    return invoke('plugin:window|primary_monitor').then(mapMonitor);\n}\n/**\n * Returns the monitor that contains the given point. Returns `null` if can't find any.\n * @example\n * ```typescript\n * import { monitorFromPoint } from '@tauri-apps/api/window';\n * const monitor = await monitorFromPoint(100.0, 200.0);\n * ```\n *\n * @since 1.0.0\n */\nasync function monitorFromPoint(x, y) {\n    return invoke('plugin:window|monitor_from_point', {\n        x,\n        y\n    }).then(mapMonitor);\n}\n/**\n * Returns the list of all the monitors available on the system.\n * @example\n * ```typescript\n * import { availableMonitors } from '@tauri-apps/api/window';\n * const monitors = await availableMonitors();\n * ```\n *\n * @since 1.0.0\n */\nasync function availableMonitors() {\n    return invoke('plugin:window|available_monitors').then((ms) => ms.map(mapMonitor));\n}\n/**\n * Get the cursor position relative to the top-left hand corner of the desktop.\n *\n * Note that the top-left hand corner of the desktop is not necessarily the same as the screen.\n * If the user uses a desktop with multiple monitors,\n * the top-left hand corner of the desktop is the top-left hand corner of the main monitor on Windows and macOS\n * or the top-left of the leftmost monitor on X11.\n *\n * The coordinates can be negative if the top-left hand corner of the window is outside of the visible screen region.\n */\nasync function cursorPosition() {\n    return invoke('plugin:window|cursor_position').then((v) => new PhysicalPosition(v));\n}\n\nexport { CloseRequestedEvent, Effect, EffectState, PhysicalPosition, PhysicalSize, ProgressBarStatus, UserAttentionType, Window, availableMonitors, currentMonitor, cursorPosition, getAllWindows, getCurrentWindow, monitorFromPoint, primaryMonitor };\n","import { Resource, invoke } from './core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** An RGBA Image in row-major order from top to bottom. */\nclass Image extends Resource {\n    /**\n     * Creates an Image from a resource ID. For internal use only.\n     *\n     * @ignore\n     */\n    constructor(rid) {\n        super(rid);\n    }\n    /** Creates a new Image using RGBA data, in row-major order from top to bottom, and with specified width and height. */\n    static async new(rgba, width, height) {\n        return invoke('plugin:image|new', {\n            rgba: transformImage(rgba),\n            width,\n            height\n        }).then((rid) => new Image(rid));\n    }\n    /**\n     * Creates a new image using the provided bytes by inferring the file format.\n     * If the format is known, prefer [@link Image.fromPngBytes] or [@link Image.fromIcoBytes].\n     *\n     * Only `ico` and `png` are supported (based on activated feature flag).\n     *\n     * Note that you need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     */\n    static async fromBytes(bytes) {\n        return invoke('plugin:image|from_bytes', {\n            bytes: transformImage(bytes)\n        }).then((rid) => new Image(rid));\n    }\n    /**\n     * Creates a new image using the provided path.\n     *\n     * Only `ico` and `png` are supported (based on activated feature flag).\n     *\n     * Note that you need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     */\n    static async fromPath(path) {\n        return invoke('plugin:image|from_path', { path }).then((rid) => new Image(rid));\n    }\n    /** Returns the RGBA data for this image, in row-major order from top to bottom.  */\n    async rgba() {\n        return invoke('plugin:image|rgba', {\n            rid: this.rid\n        }).then((buffer) => new Uint8Array(buffer));\n    }\n    /** Returns the size of this image.  */\n    async size() {\n        return invoke('plugin:image|size', { rid: this.rid });\n    }\n}\n/**\n * Transforms image from various types into a type acceptable by Rust.\n *\n * See [tauri::image::JsImage](https://docs.rs/tauri/2/tauri/image/enum.JsImage.html) for more information.\n * Note the API signature is not stable and might change.\n */\nfunction transformImage(image) {\n    const ret = image == null\n        ? null\n        : typeof image === 'string'\n            ? image\n            : image instanceof Image\n                ? image.rid\n                : image;\n    return ret;\n}\n\nexport { Image, transformImage };\n"],"names":["TauriEvent","async","_unlisten","event","eventId","window","__TAURI_EVENT_PLUGIN_INTERNALS__","unregisterListener","invoke","listen","handler","options","_a","target","kind","label","transformCallback","then","once","eventData","id","emit","payload","emitTo","eventTarget","LogicalSize","constructor","args","this","type","length","width","Logical","height","toPhysical","scaleFactor","SERIALIZE_TO_IPC_FN","toJSON","Physical","toLogical","Size","size","LogicalPosition","x","y","Position","position","UserAttentionType","ProgressBarStatus","Image","Resource","rid","super","rgba","transformImage","fromBytes","bytes","fromPath","path","buffer","Uint8Array","image","CloseRequestedEvent","_preventDefault","preventDefault","isPreventDefault","getCurrentWindow","Window","__TAURI_INTERNALS__","metadata","currentWindow","skip","getAllWindows","windows","map","w","localTauriEvents","listeners","Object","create","parent","catch","e","getByLabel","find","getCurrent","getAll","getFocusedWindow","isFocused","_handleTauriEvent","splice","indexOf","includes","push","innerPosition","p","outerPosition","innerSize","s","outerSize","isFullscreen","isMinimized","isMaximized","isDecorated","isResizable","isMaximizable","isMinimizable","isClosable","isVisible","title","theme","isAlwaysOnTop","center","requestUserAttention","requestType","requestType_","Critical","value","setResizable","resizable","setEnabled","enabled","isEnabled","setMaximizable","maximizable","setMinimizable","minimizable","setClosable","closable","setTitle","maximize","unmaximize","toggleMaximize","minimize","unminimize","show","hide","close","destroy","setDecorations","decorations","setShadow","enable","setEffects","effects","clearEffects","setAlwaysOnTop","alwaysOnTop","setAlwaysOnBottom","alwaysOnBottom","setContentProtected","protected_","setSize","setMinSize","setMaxSize","setSizeConstraints","constraints","logical","pixel","minWidth","minHeight","maxWidth","maxHeight","setPosition","setFullscreen","fullscreen","setSimpleFullscreen","setFocus","setFocusable","focusable","setIcon","icon","setSkipTaskbar","setCursorGrab","grab","setCursorVisible","visible","setCursorIcon","setBackgroundColor","color","setCursorPosition","setIgnoreCursorEvents","ignore","startDragging","startResizeDragging","direction","setBadgeCount","count","setBadgeLabel","setOverlayIcon","undefined","setProgressBar","state","setVisibleOnAllWorkspaces","setTitleBarStyle","style","setTheme","onResized","WINDOW_RESIZED","onMoved","WINDOW_MOVED","onCloseRequested","WINDOW_CLOSE_REQUESTED","evt","onDragDropEvent","unlistenDrag","DRAG_ENTER","paths","unlistenDragOver","DRAG_OVER","unlistenDrop","DRAG_DROP","unlistenCancel","DRAG_LEAVE","onFocusChanged","unlistenFocus","WINDOW_FOCUS","unlistenBlur","WINDOW_BLUR","onScaleChanged","WINDOW_SCALE_FACTOR_CHANGED","onThemeChanged","WINDOW_THEME_CHANGED","BackgroundThrottlingPolicy","Effect","EffectState"],"sourceRoot":""}